# Task ID: 16
# Title: Implement Database Schema for Activity-Centric Scoring System
# Status: pending
# Dependencies: None
# Priority: high
# Description: Design and implement database schema changes to support the activity-centric scoring system, including new tables for different score types and activity tagging functionality.
# Details:
This task involves creating and modifying database schema to support the activity-centric scoring system with the following requirements:

1. Create new score tables:
   - `prScores`: Store pull request activity scores with columns for user_id, pr_id, score_value, timestamp, and any relevant metadata
   - `issueScores`: Store issue-related activity scores with columns for user_id, issue_id, score_value, timestamp, and metadata
   - `reviewScores`: Store code review activity scores with columns for user_id, review_id, score_value, timestamp, and metadata
   - Each table should have appropriate primary keys and foreign key constraints
   - Include created_at and updated_at timestamp fields
   - Consider adding an activity_type field for categorization

2. Create the `activityTags` table:
   - Columns: id, activity_id, activity_type, tag_id, created_at, updated_at
   - This table will serve as a polymorphic join table linking different activity types to tags
   - Implement proper indexing for efficient querying

3. Modify existing tables as needed:
   - Update any tables that will interact with the new scoring system
   - Add foreign key relationships where appropriate
   - Ensure backward compatibility with existing data

4. Create database migrations:
   - Write migration scripts for creating new tables
   - Write migration scripts for modifying existing tables
   - Include rollback functionality for all migrations

5. Update database documentation:
   - Document the new schema design
   - Update entity-relationship diagrams
   - Document the relationships between tables

# Test Strategy:
Testing should verify the database schema changes are correctly implemented and functioning as expected:

1. Migration Testing:
   - Verify migrations run successfully in development environment
   - Test rollback functionality to ensure it properly reverts changes
   - Verify migrations run successfully on a copy of production data

2. Schema Validation:
   - Confirm all new tables are created with correct columns, data types, and constraints
   - Verify foreign key relationships are properly established
   - Check that indexes are created correctly for performance

3. Data Integrity Testing:
   - Insert test data into new tables and verify it can be retrieved correctly
   - Test the polymorphic relationships in the activityTags table by linking various activity types to tags
   - Verify cascading updates/deletes work as expected for related records

4. Query Performance Testing:
   - Create and run common queries that will be used by the application
   - Verify query performance is acceptable using EXPLAIN ANALYZE
   - Test with larger datasets to ensure scalability

5. Integration Testing:
   - Test the schema changes with any existing ORM models
   - Verify application code can successfully interact with the new schema
   - Test any API endpoints that will use the new tables

# Subtasks:
## 1. Create Score Tables for Different Activity Types [pending]
### Dependencies: None
### Description: Implement the database tables for storing different types of activity scores including prScores, issueScores, and reviewScores with appropriate schema design.
### Details:
Implementation steps:
1. Create the `prScores` table with columns:
   - id (primary key)
   - user_id (foreign key to users table)
   - pr_id (foreign key to pull requests table)
   - score_value (numeric/decimal)
   - activity_type (varchar, for categorization)
   - metadata (json/jsonb for flexible storage)
   - timestamp (when the score was earned)
   - created_at, updated_at (timestamps)

2. Create the `issueScores` table with columns:
   - id (primary key)
   - user_id (foreign key to users table)
   - issue_id (foreign key to issues table)
   - score_value (numeric/decimal)
   - activity_type (varchar, for categorization)
   - metadata (json/jsonb)
   - timestamp (when the score was earned)
   - created_at, updated_at (timestamps)

3. Create the `reviewScores` table with columns:
   - id (primary key)
   - user_id (foreign key to users table)
   - review_id (foreign key to reviews table)
   - score_value (numeric/decimal)
   - activity_type (varchar, for categorization)
   - metadata (json/jsonb)
   - timestamp (when the score was earned)
   - created_at, updated_at (timestamps)

4. Add appropriate indexes for each table:
   - Index on user_id for efficient user-based queries
   - Index on activity_type for filtering
   - Composite indexes for common query patterns

Testing approach:
- Write unit tests to verify table creation
- Test foreign key constraints by attempting invalid inserts
- Verify indexes are created correctly
- Test inserting and retrieving sample data for each table

## 2. Implement ActivityTags Table and Polymorphic Relationships [pending]
### Dependencies: 16.1
### Description: Create the activityTags table with polymorphic associations to connect different activity types with tags, enabling flexible activity categorization.
### Details:
Implementation steps:
1. Create the `activityTags` table with columns:
   - id (primary key)
   - activity_id (integer, part of polymorphic relationship)
   - activity_type (varchar, identifies which activity table to reference)
   - tag_id (foreign key to tags table)
   - created_at, updated_at (timestamps)

2. Create a `tags` table if it doesn't already exist:
   - id (primary key)
   - name (varchar, unique)
   - description (text, optional)
   - created_at, updated_at (timestamps)

3. Add appropriate indexes to the `activityTags` table:
   - Index on (activity_id, activity_type) for efficient polymorphic lookups
   - Index on tag_id for tag-based filtering
   - Composite index on (activity_type, tag_id) for common queries

4. Implement foreign key constraint from tag_id to the tags table

5. Create database functions or procedures if needed to simplify working with the polymorphic relationship

Testing approach:
- Test creating tags and associating them with different activity types
- Verify polymorphic queries work correctly across different activity tables
- Test the performance of common queries using the indexes
- Verify referential integrity with the tags table

## 3. Create Migration Scripts and Update Documentation [pending]
### Dependencies: 16.1, 16.2
### Description: Develop database migration scripts for all schema changes, implement rollback functionality, and update database documentation including ER diagrams.
### Details:
Implementation steps:
1. Create forward migration scripts:
   - Script for creating prScores, issueScores, and reviewScores tables
   - Script for creating activityTags and tags tables (if needed)
   - Scripts for any modifications to existing tables
   - Add appropriate indexes and constraints

2. Create rollback migration scripts:
   - Script to revert all table creations
   - Script to revert any modifications to existing tables
   - Ensure data integrity during rollbacks

3. Test migrations:
   - Test forward migrations on a development database
   - Test rollback functionality
   - Verify all constraints and indexes are properly created

4. Update database documentation:
   - Create or update entity-relationship (ER) diagrams showing the new tables and their relationships
   - Document the purpose of each table and its columns
   - Document the polymorphic relationship pattern used for activity tagging
   - Document indexing strategy and query patterns
   - Update any existing schema documentation to reflect changes

5. Create a database seeding script with sample data for testing

Testing approach:
- Run migrations on a clean database and verify all objects are created correctly
- Test rollback functionality and verify the database returns to its previous state
- Verify documentation accuracy by comparing with actual database schema
- Have another team member review the documentation for clarity and completeness

