["I_kwDOKSJyfM7IESZq", 934, "Add CSP to oplabs.co site", "https://oplabs-pbc.slack.com/archives/C048ZRM3L4C/p1756165448300269", "CLOSED", 0, "jvmi7", "2025-08-26T17:47:07Z", "2025-09-02T16:48:03Z", "2025-09-02T16:48:03Z", "ethereum-optimism/ecosystem", "2025-08-30 03:26:19"]
["I_kwDOKSJyfM7IDkUG", 933, "Update font for community.optimism.io", "", "CLOSED", 0, "jvmi7", "2025-08-26T16:40:24Z", "2025-09-02T16:48:06Z", "2025-09-02T16:48:06Z", "ethereum-optimism/ecosystem", "2025-08-30 03:26:19"]
["I_kwDOKSJyfM7H1wL9", 932, "Add atlas to localchain.dev & update logo to be clicky", "https://oplabs-pbc.slack.com/archives/C0972KX67QX/p1756144931861889", "CLOSED", 0, "jvmi7", "2025-08-25T18:12:55Z", "2025-09-02T16:47:50Z", "2025-09-02T16:47:50Z", "ethereum-optimism/ecosystem", "2025-08-30 03:26:19"]
["I_kwDOKSJyfM7H0P5j", 931, "Implement storybook + design system for optimism.io", "", "CLOSED", 0, "jvmi7", "2025-08-25T15:54:34Z", "2025-09-02T17:02:43Z", "2025-09-02T17:02:43Z", "ethereum-optimism/ecosystem", "2025-08-30 03:26:19"]
["I_kwDOKSJyfM7HcB3V", 930, "Spike optimism.io CMS architecture", "", "CLOSED", 0, "jvmi7", "2025-08-22T16:30:08Z", "2025-09-08T17:06:16Z", "2025-09-08T17:06:16Z", "ethereum-optimism/ecosystem", "2025-08-30 03:26:19"]
["I_kwDOKSJyfM688Qu-", 868, "Implement claim contract deployment process for mini app", "", "CLOSED", 0, "jvmi7", "2025-06-24T01:20:53Z", "2025-08-25T15:04:09Z", "2025-08-25T15:04:09Z", "ethereum-optimism/ecosystem", "2025-08-30 03:26:19"]
["I_kwDOL-xLQ87FlJWB", 444, "[acceptance] Port TestSmokeTestFailure and TestInteropSystemNoop to Devstack", "Port the devnet sdk TestSmokeTestFailure and TestInteropSystemNoop to Devstack.", "CLOSED", 0, "serpixel", "2025-08-12T15:38:01Z", "2025-09-02T23:38:36Z", "2025-09-02T23:38:14Z", "ethereum-optimism/infra", "2025-08-30 03:26:21"]
["I_kwDOL-xLQ862aJV0", 347, "Refactor Upgrade Runbook", "# Description\n\n* Refactor the [upgrade runbook](https://www.notion.so/oplabs/Devnet-Spinup-Runbook-17af153ee16280f3b610e808143cd02a?pvs=4) to follow the same format as [mainnet migration playbook](https://www.notion.so/oplabs/Mainnet-Migration-Playbook-74514dac7d7745359001adcd9fcb8715?pvs=4)\n\n* Split the runbook into Acts for devnet deployment, and upgrades. The devnet deployment and upgrade should have defined inputs and outputs. \n\nThe two acts should be able to be ran independtly from each other to allow for devnets to be spun up in advance", "CLOSED", 0, "jelias2", "2025-05-13T14:36:07Z", "2025-08-25T20:08:08Z", "2025-08-25T20:07:41Z", "ethereum-optimism/infra", "2025-08-30 03:26:21"]
["I_kwDOKIwiaM7IVFRU", 1728, "[DOCS] Add PR title", "<!-- please fill out the description and acceptance criteria to the best to your ability. While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description \n<!-- Write a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand-new docs page? -->\n\n## Acceptance criteria\n<!-- Clearly list out the definition of done. -->\n\n## User stories\n<!-- User stories that illustrate the benefits of this issue. For example, this documentation improvement will allow user X to be able to Y. -->\n\n\n## Resources and support\n<!-- Provide additional documentation, context, and subject matter experts to help us complete this issue. -->\n\n## Action items\n<!-- Clear steps to take to complete this issue -->\n", "CLOSED", 0, "killers10", "2025-08-27T21:58:50Z", "2025-08-28T15:53:52Z", "2025-08-28T15:53:52Z", "ethereum-optimism/docs", "2025-08-30 03:26:25"]
["I_kwDOKIwiaM7IVFI-", 1727, "[2024 Q4 Audit] [page-path]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\n<!-- Write a description of the current state of the page. -->\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisk\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>\n\n", "CLOSED", 0, "killers10", "2025-08-27T21:58:33Z", "2025-09-11T19:26:25Z", "2025-09-11T19:26:25Z", "ethereum-optimism/docs", "2025-08-30 03:26:25"]
["I_kwDOKIwiaM7Hvjki", 1722, "[2024 Q4 Audit] [page-path]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\n<!-- Write a description of the current state of the page. -->\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisk\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>", "CLOSED", 0, "Saad4343", "2025-08-25T09:35:44Z", "2025-08-28T15:54:03Z", "2025-08-28T15:54:03Z", "ethereum-optimism/docs", "2025-08-30 03:26:25"]
["I_kwDOKIwiaM694diW", 1675, "[DOCS] Add PR title", "<!-- Please fill out the description and acceptance criteria to the best of your ability.\n     While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description  \nThis docs request relates to a Pull Request that introduces new functionality or significant changes. We need to add or update documentation to reflect these changes.\n\nFor example:  \n- Add new section explaining the updated DAO voting logic introduced in PR #XYZ  \n- Create a new page describing MOVE token staking, based on recent contract deployment  \n- Clarify differences between community vs core contributor governance permissions\n\n## Acceptance criteria  \n- PR-related documentation is clear, concise, and accurate  \n- All new features or changes reflected in public docs  \n- Linked to relevant pages from the Table of Contents (if applicable)  \n- Reviewed and approved by relevant SME or core contributor  \n- Includes bilingual support (English + Burmese) where needed\n\n## User stories  \n- As a new community member, I want to understand the latest updates to the DAO process without reading the raw PR code  \n- As a developer, I want clear documentation on how MOVE token staking works post-update  \n- As a project steward, I want public docs to reflect reality so external contributors can stay aligned\n\n## Resources and support  \n- PR: [Link to PR]  \n- Wiki: [https://wiki.movement.xyz/kokyat](https://wiki.movement.xyz/kokyat)  \n- GitHub Repo: [https://github.com/movementlabsxyz](https://github.com/movementlabsxyz)  \n- SMEs: KoKyat, ThaeThae, HanGyi  \n- Whitepaper: [https://www.movementnetwork.xyz/whitepaper/movement-whitepaper_en.pdf](https://www.movementnetwork.xyz/whitepaper/movement-whitepaper_en.pdf)\n\n## Action items  \n1. Review the PR and associated technical changes  \n2. Draft documentation (new page or updated section)  \n3. Share with SMEs for accuracy check  \n4. Peer review  \n5. Final SME sign-off  \n6. Publish to wiki or docs site", "CLOSED", 0, "cshein45", "2025-06-29T03:11:39Z", "2025-08-28T15:54:53Z", "2025-08-28T15:54:53Z", "ethereum-optimism/docs", "2025-08-30 03:26:25"]
["I_kwDOKIwiaM6vfRhv", 1530, "[DOCS]  An example: Create an op stack Rollup testnet with `op-deployer`", "**Description:**  \nI shared an article in the [Create an op stack Rollup testnet with op-deployer](https://github.com/ethereum-optimism/developers/discussions/17#discussioncomment-12606204) titled *Create an op stack Rollup testnet with op-deployer*. My goal was to provide an example for other users to reference.  \n\nWhile deploying `L1 contracts` using `op-deployer/v0.0.13`, I encountered the following issue:  \n- `_gameType` is set to `1`, whereas in `op-mainnet` and `op-sepolia`, this value should be `0`.  \n- I exported the L2 configuration using the command:  \n  ```sh\n  ./op-deployer inspect deploy-config --workdir .deployer \"$L2_CHAIN_ID\" > l2-chain-config.json\n  ```\n  The output shows `\"respectedGameType\": 0`, despite no modifications to the configuration. Further investigation is needed.  \n\nSince the related documentation is still being updated, users face significant challenges when creating an OP Stack Rollup testnet. I hope to see documentation updates soon and would appreciate any feedback or assistance regarding this issue in my shared article.", "OPEN", 0, "opfocus", "2025-03-24T19:06:26Z", "2025-08-28T15:56:47Z", null, "ethereum-optimism/docs", "2025-08-30 03:26:25"]
["I_kwDOH2Qg5s7IfUtn", 665, "ci: run monorepo CI suite on op-geth PRs", "When making a change to op-geth, we should be in the practice of preparing a monorepo PR consuming those changes, so that the monorepo CI (which contains the majority of our end-to-end tests) can provide a harness and protect against changes which break the desired behaviour of the system as a whole. \n\nWe usually remember to do this for significant changes such as upstream merges, but have been guilty of neglecting to do so for smaller changes / refactors.\n\nWe should consider automating this task so that we do not need to rely on engineers remembering to do it. \n\n## Solution A\nA naive solution would have a CI job which clones the latest monorepo commit, updates the `go.mod` to point at the code being submitted in the PR, and runs the rest of the monorepo suite as usual.\n\nProblems which would arise in the naive version:\n* the monorepo suite can change a lot including how it is triggered in CI; how do we \"import\" the CI configuration into the op-geth CI configuration so that we get all the latest monorepo tests running?\n* upstream merges are often expected to break something in the monorepo; the usual flow for those PRs is to have a monorepo PR which references the new op-geth code _plus any changes in the monorepo required to cope with the changes_. Therefore we can expect upstream merges (and other PRs which intend to break something) to have this new CI check fail. That could be solved by having the check be lablled \"for information only\" (and therefore ignorable by such PRs, which can follow the usual pattern). \n\n\n## Option B\nAnother alternative would be have a lightweight CI check in op-geth which checks for the existence of an actual monorepo PR referencing the new code with passing tests. This check can be cheaply re-run by the PR author when they have that monorepo PR prepared. This meshes nicely with existing practices for significant PRs, but would require a little more manual work from PR authors which might be considered bothersome for small changes. IMO this is probably the right amount of friction to add here. Monorepo PRs could be automatically created by an `op-workbench` command, which would put the commit hash in the PR title to make it easy to find for the new CI job. Or, the new CI job accepts the monorepo PR number as an input parameter which the user supplies when it is launched. ", "OPEN", 0, "geoknee", "2025-08-28T14:55:12Z", "2025-08-28T20:01:03Z", null, "ethereum-optimism/op-geth", "2025-08-30 03:26:26"]
["I_kwDOH2Qg5s7IQr7T", 664, "Gap between different kinds of gas costs", "hello I\u2019m measuring gas with debug_traceCall. My contract returns abi.encode(gasleft()). \n\nWith a very high gas limit I get: \n\nGross Gas Cost (start \u2212 final gasleft()): ~2.46M \n\nNet Gas Cost (trace.gasUsed, maybe due to refunds): ~2.28M \n\nBut the tx only succeeds with at least 2.51M gas; setting the limit to ~gross OOGs. Calldata is short. \n\nIs the gap between gross and non-OOG gas due to the EIP-150 63/64 rule? Is the gap between gross and net gas due to refunds? How do I correctly compute the minimal non-OOG gas?", "OPEN", 0, "Arisawa-v", "2025-08-27T15:25:38Z", "2025-08-27T15:25:38Z", null, "ethereum-optimism/op-geth", "2025-08-30 03:26:26"]
["I_kwDOH2Qg5s7C6nj1", 650, "min-base-fee: add an extra `uint64` for `minBaseFee` in `PayloadAttributesV3`", "Please follow[ feature-fork separation.](https://github.com/ethereum-optimism/design-docs/pull/300)\n\nRequires https://github.com/ethereum-optimism/specs/issues/742", "CLOSED", 0, "geoknee", "2025-07-28T14:27:53Z", "2025-09-05T16:10:07Z", "2025-09-05T16:10:06Z", "ethereum-optimism/op-geth", "2025-08-30 03:26:26"]
["I_kwDOH2Qg5s7C6eoE", 649, "min-base-fee: add `minBaseFee` to the block header's `extraData` field", "See https://github.com/ethereum-optimism/design-docs/pull/295.\n\nRequires https://github.com/ethereum-optimism/specs/issues/742", "CLOSED", 0, "geoknee", "2025-07-28T14:18:13Z", "2025-09-05T16:09:58Z", "2025-09-05T16:09:58Z", "ethereum-optimism/op-geth", "2025-08-30 03:26:26"]
["I_kwDOLB-lzc7C6RMU", 742, "min-base-fee: write specification", "See ratified design doc https://github.com/ethereum-optimism/design-docs/pull/295", "CLOSED", 0, "geoknee", "2025-07-28T14:04:13Z", "2025-08-29T10:29:35Z", "2025-08-29T10:29:35Z", "ethereum-optimism/specs", "2025-08-30 03:26:29"]
["I_kwDOJ_r-bs6ynJDM", 978, "Reduce chain config addresses to minimal set", "# Overview\nThe chain config .toml files should not contain contract/role addresses that can be changed frequently, causing the config file to become stale. All addresses can be read from `addresses.json` codegen file, which is frequently updated for all chains instead of requiring chain operators to open prs to update individual addresses each time one changes.\n\nThe only addresses that must be kept in the config file:\n* `SystemConfigProxy`\n* `L1StandardBridgeProxy`\n* `OptimismPortalProxy`\n* `ProxyAdminOwner`\n* `DisputeGameFactoryProxy`\n\nWe should confirm removing all other addresses from the config files will not break any downstream dependencies (ecosystem tools, execution clients, monorepo components, etc.).\n\n**TODO on another Issue:**\nWe should also add a ci check to ensure consistency between the chain configs and addresses.json:\n1. read the systemConfigProxy address from each chain config .toml\n2. run codegen/op-fetcher to collect all contract+role addresses from onchain\n3. compare the updated codegen'd addresses.json (updated in [2]) to the set of 5 addresses in the chain config .toml to ensure they match\n4. Send a slack message\n\nNeed to decide if this ci check would block prs if it notices an address inconsistency on a chain that is not related to a pr it runs on. Or perhaps this ci check only runs as part of the daily ci codegen job described in https://github.com/ethereum-optimism/superchain-registry/issues/979", "CLOSED", 0, "bitwiseguy", "2025-04-15T14:18:17Z", "2025-09-15T20:13:19Z", "2025-09-15T20:12:17Z", "ethereum-optimism/superchain-registry", "2025-08-30 03:26:30"]
["I_kwDODjvEJM7IwM3k", 17288, "Kona + Cannon: k8s support", "Ensure that OP Labs internal Kubernetes config is able to easily switch to Kona + Cannon as a fault proof type. Determine whether there are any changes needed for op-challenger and op-dispute-mon env/params, and if so ensure that it's possible to switch easily, ideally without editing config.", "OPEN", 0, "pauldowman", "2025-08-29T20:32:22Z", "2025-08-29T20:35:54Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IwLB0", 17287, "Kona + Cannon: runbook updates", "Update OP Labs runbooks for the procedure to switch to Kona + Cannon as a fault proof.\n\nDetermine the risks and requirements around different chains in the Superchain having different respected game types and fallback path.", "OPEN", 0, "pauldowman", "2025-08-29T20:30:05Z", "2025-08-29T20:57:44Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Iv49k", 17286, "Kona + Cannon: op-dispute-mon support", "Dispute-mon [explicitly checks for some game types](https://github.com/ethereum-optimism/optimism/blob/develop/op-dispute-mon/mon/extract/caller.go#L53). It needs a change to only look at specific game types.", "OPEN", 0, "pauldowman", "2025-08-29T20:06:49Z", "2025-09-02T21:25:01Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Iv3WF", 17285, "Kona + Cannon: OPCM support", "Verify what changes are needed in OPCM to support Kona + Cannon. E.g. make sure that OPCM doesn\u2019t assume cannon as the game type.", "OPEN", 0, "pauldowman", "2025-08-29T20:04:43Z", "2025-09-03T00:12:04Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IvsE8", 17284, "Kona + Cannon: prestate verification tools", "We have tools to verify absolute prestates (the `check-prestate` command) which are go-specific and won't work for Kona. Create tools or a method to verify Kona prestates.", "OPEN", 0, "pauldowman", "2025-08-29T19:50:42Z", "2025-09-02T20:00:36Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IvqFh", 17283, "Kona + Cannon: standard prestates integration", "Integrate Cannon + Kona into our tooling for managing absolute prestates.\n\n- Add support for Cannon + Kona prestates to standard-prestates.toml\n  - Use a new field e.g. `program = kona`? Or use `type = cannon-64-kona` or `type = interop-kona`?\n  - Or use a separate file for kona prestates? This is easier for tooling but maybe worse for usability?\n- Ensure `make reproducible-prestate` supports this (it consumes standard-prestates.toml)", "OPEN", 0, "pauldowman", "2025-08-29T19:48:13Z", "2025-09-03T00:28:52Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IvgwG", 17282, "Kona + Cannon: Add game type", "Add CANNON_KONA game type in Types.sol\n\nAs soon as this exists anyone can create Kona games, confirm that they can\u2019t update anchor state and consider any other related issues.", "OPEN", 0, "pauldowman", "2025-08-29T19:37:04Z", "2025-08-29T19:43:01Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Ituvr", 17280, "[DA Footprint Limit] Implement `SystemConfig` DA footprint gas scalar update", "- [ ] Adapt specs PR to include configurability\n- [ ] Add DA footprint gas scalar update event to `SystemConfig` and gas scalar to `L1Block`\n- [ ] Add upgrade txs for Jovian activation block\n- [ ] Adapt `L1BlockInfo` update in derivation\n  - [ ] Set default value at Jovian activation\n- [ ] EL: Read gas scalar from state inside block builder and block processor, instead of constant\n- [ ] Acceptance test of configurability", "CLOSED", 0, "sebastianst", "2025-08-29T16:30:20Z", "2025-10-14T17:52:01Z", "2025-10-14T17:52:01Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IsZ5y", 17278, "[DA Footprint Limit] Write acceptance test", "", "CLOSED", 0, "sebastianst", "2025-08-29T14:32:09Z", "2025-10-16T16:05:59Z", "2025-10-16T16:05:59Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IoY9i", 17273, "Subject: Inquiry Regarding Funds Sent to Unknown Address on Optimism Mainnet", "Dear Optimism Support Team,\n\nI hope this message finds you well.\n\nI am reaching out regarding a concerning issue that I encountered with a transaction on the Optimism Mainnet. I deployed a smart contract and executed some transactions (including creating documents) on behalf of my users. However, when I checked the funds in my wallet, I noticed that a portion of the funds was transferred to an unknown address.\n\nDetails of the Transaction:\n\nMy Wallet Address: 0x03267dCf2B2c7bd1533E80797606D61c738B8710\n\nTransaction Hash: 0x72f4b30ce29ca8a393c255629d1ad209b0c4e9631c48a78414fe85d4062ebeea\n\nDestination Address: 0xa1430Db6c10Bb0a920F9a15DA1e511Da34854604\n\nI believe the funds may have been unintentionally sent to this address, which appears to be associated with a contract or vault address on the network. After further investigation, I found that the funds are still in the address 0xa1430Db6c10Bb0a920F9a15DA1e511Da34854604, but I do not know the ownership or control over this address.\n\nI kindly request your assistance in the following:\n\nClarifying the nature of the destination address: Is this address related to any known contracts or systems on Optimism (such as a proxy contract or vault)?\n\nInvestigating the movement of funds: Can you help me understand why my funds were transferred to this address and if there is any action I can take to recover them?\n\nVerification of the funds: Is it possible to track the movement of these funds or identify who controls this address?\n\nI would greatly appreciate your support in resolving this issue, as it is critical for the integrity of my project.\n\nThank you for your time and assistance. I look forward to your response.\n\nBest regards,\n[KOLLIPARA RAMMOHAN SATYASEN]\n[7075514762]", "OPEN", 0, "satyasenk2004", "2025-08-29T08:46:55Z", "2025-08-29T08:46:55Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Iizd6", 17267, "Update OPCMStandardValidator to handle new dispute game contracts", "## Description\n\nThe `OPContractsManagerStandardValidator` currently pulls a lot of data from the dispute game implementations set in the `DisputeGameFactory`.  For version 2 of these contracts, some of this data is no longer accessible on the implementation.  We'll need to find a way to continue validating the dispute game config.  We should be able to just inspect the `DisputeGameFactory.gameArgs` data to validate the parameters that are no longer stored on the implementation.", "OPEN", 0, "mbaxter", "2025-08-28T20:20:28Z", "2025-08-28T20:20:28Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgMEB", 17263, "Delete legacy dispute game contracts", "## Description\n\nAfter fully integrating the v2 dispute game contracts into OPCM, delete the legacy contracts.", "OPEN", 0, "mbaxter", "2025-08-28T16:02:11Z", "2025-08-28T17:46:56Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgLut", 17262, "Stop deploying blueprints for FDG and PDG", "## Description\n\nStop deploying blueprints for the FaultDisputeGame and PermissionedDisputeGame.  Drop feature flags for using the v2 dispute game contracts - always use the v2 contracts. ", "OPEN", 0, "mbaxter", "2025-08-28T16:01:40Z", "2025-08-28T17:46:50Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgJxk", 17261, "Use v2 dispute game contracts in OPCM.updatePrestate", "## Description\n\nUse v2 dispute game contracts in OPCM.updatePrestate.  This functionality should be feature-flagged.", "OPEN", 0, "mbaxter", "2025-08-28T15:59:11Z", "2025-08-28T17:44:13Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgHVr", 17260, "Use v2 dispute game contracts in OPCM.addGameType", "## Description\n\nUse v2 dispute game contracts in OPCM.addGameType.  This functionality should be feature-flagged.", "OPEN", 0, "mbaxter", "2025-08-28T15:55:48Z", "2025-08-28T17:46:43Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgFGD", 17259, "Use v2 dispute game implementations in OPCM.addGameType", "### Description\n\nUse v2 dispute game implementations in OPCM.addGameType.  This functionality should be feature-flagged.", "CLOSED", 0, "mbaxter", "2025-08-28T15:52:46Z", "2025-09-10T13:56:00Z", "2025-09-10T13:56:00Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgEi9", 17258, "Use v2 dispute game implementations in OPCM.upgrade", "## Description\n\nUse v2 dispute game implementations in OPCM.upgrade.  This functionality should be feature-flagged.", "OPEN", 0, "mbaxter", "2025-08-28T15:51:55Z", "2025-10-14T22:13:32Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgEOU", 17257, "Use v2 dispute game implementation in OPCM.deploy", "## Description\n\nUse v2 dispute game implementation in OPCM.deploy.  This should be feature-flagged. ", "CLOSED", 0, "mbaxter", "2025-08-28T15:51:26Z", "2025-10-15T21:53:12Z", "2025-10-15T21:53:12Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgDx5", 17256, "Deploy new FDG and PDG implementations in op-deployer", "## Description\n\nUpdate op-deployer to deploy v2 versions of the FaultDisputeGame and PermissionedDisputeGame as actual implementations, not blueprints.  This functionality should be feature-flagged.  We should enforce that this feature flag must be turned off for production networks for now. ", "OPEN", 0, "mbaxter", "2025-08-28T15:50:47Z", "2025-08-28T17:46:03Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgB-W", 17255, "Add PermissionedDisputeGame version 2", "## Description\n\nAdd new v2 PermissionedDisputeGame that uses the new CWIA approach.", "OPEN", 0, "mbaxter", "2025-08-28T15:48:22Z", "2025-09-02T20:14:20Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IgBav", 17254, "Add FaultDisputeGame version 2", "## Description\n\nAdd v2 of the FaultDisputeGame that uses the new CWIA approach.", "OPEN", 0, "mbaxter", "2025-08-28T15:47:31Z", "2025-08-28T17:45:49Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Ifq1Z", 17253, "op-sync-tester: Nightly CI job for syncing using the latest op-node", "We may add nightly CI jobs to test op-node (or other CL) are able to sync using the sync tester.", "CLOSED", 0, "pcw109550", "2025-08-28T15:18:43Z", "2025-09-22T08:41:16Z", "2025-09-19T15:09:01Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IWExg", 17248, "op-acceptance-tests: enable flashblock tests against persistent devnets", "Flashblocks tests should be enabled against persistent devnets. The gate is there and pretty much the only work needed is to ensure it does work correctly.\nTask size XS-S.", "OPEN", 0, "serpixel", "2025-08-27T23:59:06Z", "2025-08-28T19:17:07Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7ITyl3", 17245, "op-node: instability triggered by L1 RPC delays", "Initially reported by Alchemy. \n\n* Cloudflare has had a bunch of issues -> unreliable L1 connection on both beaconchain and L1 RPCs\n* OP Stack has trouble producing unsafe blocks when the L1 RPC is slow\n* Any time you exceed .5 second delay, some processes (derivation) gets stuck. This can cause chain halts, pretty reliably\n* Alchemy has been handling this on their end via proxyd, but we may be able to fix this in-protocol\n* Can find this by introducing an artificial .5 lag in our testing\n\nMay fit into the op-node v2 refactors. ", "OPEN", 0, "tessr", "2025-08-27T19:35:32Z", "2025-08-27T19:35:32Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7ITPfM", 17244, "Proofs: U17 governance proposal edits", "", "OPEN", 0, "pauldowman", "2025-08-27T18:43:37Z", "2025-08-27T18:43:37Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IPdwU", 17239, "Kona + Cannon: op-challenger integration", "- [Add `cannon-kona` trace type](https://github.com/ethereum-optimism/optimism/pull/17249)\n- Add `cannon-kona-server` flag?\n- Look for what else we might be missing (e.g. review all the places we use `TraceTypeCannon`)", "OPEN", 0, "pauldowman", "2025-08-27T14:01:43Z", "2025-09-02T16:28:23Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IPb9K", 17238, "Kona + Cannon: add to vm-runner", "Add Kona + Cannon to vm-runner to start testing with real mainnet blocks.", "OPEN", 0, "pauldowman", "2025-08-27T13:59:36Z", "2025-08-29T19:42:38Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IPaV5", 17237, "Kona + Cannon as fallback proof", "This is the main issue for tracking the work to ship Kona + Cannon as a fallback fault proof option.", "OPEN", 0, "pauldowman", "2025-08-27T13:57:36Z", "2025-09-03T16:00:56Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7IC_rQ", 17226, "Improve DevX in CircleCI config for job dependency references of reused job names", "CircleCI jobs that share the same name must include a CircleCI-assigned numeric suffix when referencing such a job as a dependency.\n\nThis was recently encountered when setting up the CI pipeline for `op-up` - [this PR](https://github.com/ethereum-optimism/optimism/pull/17033) got around the issue by setting unique names for the jobs that had the conflicting `contracts-bedrock-build` job name.\n\nWe should explore ways to improve the UX here. Some options:\n* In https://github.com/ethereum-optimism/optimism/issues/17184 we'll aim to enable local testing of CircleCI configs - we could see if there is a way to configure this tool to at least issue a warning on these kinds of conflicting job dependency references\n* We could add a linter on PRs that flags this as a warning", "OPEN", 0, "alfonso-op", "2025-08-26T15:52:16Z", "2025-08-26T15:52:16Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7ICI0c", 17225, "op-up: Define config schema", "", "OPEN", 0, "mslipper", "2025-08-26T14:55:29Z", "2025-08-26T14:55:30Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7ICERW", 17224, "Resolve ImmuneFi divergence report", "", "CLOSED", 0, "mslipper", "2025-08-26T14:50:37Z", "2025-09-22T15:33:12Z", "2025-09-22T15:33:12Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7ICDbP", 17223, "Complete Geth v1.16.2 merge", "", "CLOSED", 0, "mslipper", "2025-08-26T14:49:42Z", "2025-09-12T12:12:38Z", "2025-09-12T12:12:38Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7H4bXl", 17218, "[Forge Deployer] Convert contract verification logic to use Forge", "", "OPEN", 0, "mslipper", "2025-08-25T23:06:31Z", "2025-08-27T04:45:32Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7H4bMO", 17217, "[Forge Deployer] Convert DeployOPChain to use Forge", "", "OPEN", 0, "mslipper", "2025-08-25T23:06:11Z", "2025-09-09T19:24:40Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7H4bFv", 17216, "[Forge Deployer] Convert DeployImplementations to use Forge", "", "OPEN", 0, "mslipper", "2025-08-25T23:05:54Z", "2025-09-09T19:24:36Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7H4bBy", 17215, "[Forge Deployer] Convert DeploySuperchain to use Forge", "", "OPEN", 0, "mslipper", "2025-08-25T23:05:44Z", "2025-09-09T19:24:19Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7H4a3c", 17214, "[Forge Deployer] Create CLI wrapper around Forge binary", "Create a CLI wrapper around the Forge binary that we can use to cleanly call out to Forge from within OP Deployer.", "CLOSED", 0, "mslipper", "2025-08-25T23:05:17Z", "2025-09-17T00:57:23Z", "2025-09-17T00:57:23Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7H4aXm", 17213, "[Tracking] [Forge Deployer] OP Deployer Forge Migration", "Related design doc for reference: [link](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/op-deployer-forge-engine.md)", "OPEN", 0, "mslipper", "2025-08-25T23:04:01Z", "2025-09-19T16:27:19Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7H3Gqj", 17207, "Update FPVM spec with Go 1.24 features", "## Description\n\nUpdate the [Cannon FPVM spec](https://specs.optimism.io/fault-proof/cannon-fault-proof-vm.html) to include the `getrandom` syscall changes. ", "OPEN", 0, "mbaxter", "2025-08-25T20:25:42Z", "2025-08-25T20:25:42Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Hu8Er", 17194, "Implement Websockets support in the Kurtosis Reverse Proxy", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nCurrently websockets will not be reachable through the Traefik websocket proxy. This means we need to use a direct connection (as seen in #17172). We would want to use the reverse proxy to be consistent with the rest of services.\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\nI had an initial stab at this, seems that upgrading to traefik v3 and using TCP routing would sort out the issue (but ended up breaking the rest of endpoints).\nWe're also using an old version of traefik (v2.10) which has a [known websockets issue](https://github.com/dani-garcia/vaultwarden/discussions/3516) so perhaps updating to the last version and doing some routing can also work.\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "CLOSED", 0, "serpixel", "2025-08-25T08:42:45Z", "2025-09-15T15:32:47Z", "2025-09-15T15:32:47Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7HnWpM", 17190, "[Interop POC] Complete implementation, deploy to devnet", "", "CLOSED", 0, "mslipper", "2025-08-24T01:03:44Z", "2025-09-22T15:33:05Z", "2025-09-22T15:33:05Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Hb9US", 17184, "Improve UX and testability of CircleCI config", "Dealing with the 2,500+ line monorepo CircleCI config is daunting and introduces developer friction.\n\nOne of the key pain points discussed in today\u2019s Protocol retro is that there\u2019s no good way to test changes locally. There is the `circleci` CLI which CircleCI provides that\u2019s intended for this purpose, but engineers have not been able to get it to work when they tried it on their machines.\n\nSome ideas:\n* Get the `circleci` tool to work for our dev environment\n* Move as much logic as possible out of the config itself and into just or make files. The Rust team has followed this approach (see [here](https://github.com/op-rs/kona/blob/main/.github/workflows/rust_ci.yaml))", "OPEN", 0, "alfonso-op", "2025-08-22T16:21:31Z", "2025-09-03T14:55:24Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7HALYK", 17164, "op-up: report usage metrics", "Our success metrics for https://localchain.optimism.io anchor on how many people make it through the local chain flow. Today, we rely on metrics reported from the website to know whether people are making it through -- but this is imperfect, because not everyone will click on all of the commands, and it doesn't reflect whether people run into problems on their own machines. We should add actual instrumentation to op-up to determine whether it's working for users and if people are falling off anywhere.", "OPEN", 0, "tessr", "2025-08-20T16:11:48Z", "2025-08-25T19:54:58Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Gyo49", 17151, "op-acceptance-tests: Missing test logs", "**Description**\n\n[This CI run](https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/98223/workflows/f4c25eef-d1df-45f8-bb36-c273ce969ca9/jobs/3777991/steps) reports multiple failed tests yet logs are:\n\n- Missing for any `TestL2EngineAPI*` tests\n- Empty for e.g. `TestL1MinerBuildBlock`\n\n**Acceptance criteria**\n\nEnsure the failed tests correctly report their logs", "CLOSED", 0, "janjakubnanista", "2025-08-19T17:40:12Z", "2025-08-25T17:37:46Z", "2025-08-25T17:37:46Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7GwNmi", 17141, "public docs review of Flashblocks", "Coordinate and review Blessing's drafts of public docs he is prepping of flashblocks", "CLOSED", 0, "yashvardhan-kukreja", "2025-08-19T14:05:19Z", "2025-08-29T18:00:40Z", "2025-08-29T18:00:40Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7GuDrb", 17135, "op-up: add link to survey on shutdown", "When a user ends the op-up process, we should prompt them with a link to fill out our builder survey:\n\n```\nNew L2 block: number 31565, hash 0xd58b7aa8be49a9c1e65234a251c259a6caccd660ec91e89cf23a80b996657b20\nNew L2 block: number 31566, hash 0x99f3b314cfe5d3021ae7d5be2b851220ba91bda4291bb0c832f4fe46bf67dbc4\n^C\nExiting, code: 0\n\n#########################################################\n#                                                       #\n#  Thinking about building on the OP Stack?             #\n#  We'd love to hear from you!                          #\n#  Take our dev survey: https://optimism.io/dev-survey  #\n#                                                       #\n#########################################################\n\n```\n\nIdeally the URL is clickable.", "CLOSED", 0, "tessr", "2025-08-19T11:12:51Z", "2025-08-25T23:57:27Z", "2025-08-25T23:57:27Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7GtZ3O", 17134, "op-up: add some cute ascii on startup", "Discussed in Slack, but let's add a little friendly ascii message to op-up when it starts up (and before it starts showing logs). \n\nSomething like:\n\n```\n###################################\n             Welcome to\n   ___  _ __        _   _ _ __  \n  / _ \\| '_ \\ _____| | | | '_ \\ \n | (_) | |_) |_____| |_| | |_) |\n  \\___/| .__/       \\__,_| .__/ \n       |_|               |_|   \n\n    Your local OP Stack chain\n\n###################################\n```", "CLOSED", 0, "tessr", "2025-08-19T10:18:45Z", "2025-08-25T23:16:31Z", "2025-08-25T23:16:31Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7GQE7H", 17095, "Support release of Cannon with Go 1.24 support", "Cannon Go 1.24 support is aiming to ship in the next release, this issue tracks the changes needed to support this:\n- Update OPCM / op-deployer to release Cannon with stateVersion 8", "CLOSED", 0, "pauldowman", "2025-08-15T19:16:58Z", "2025-08-29T23:28:42Z", "2025-08-25T18:24:51Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7GNdTW", 17087, "[DA Footprint Limit] Write spec", "", "CLOSED", 0, "mslipper", "2025-08-15T14:21:14Z", "2025-09-22T17:30:22Z", "2025-09-22T17:30:22Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7GGiaJ", 17076, "op-up: recognize and respond to standard CLI flags", "op-up doesn't currently recognize some standard CLI flags:\n\n```\n$ op-up --help\nerror: expected no command line args, got 1\n$ op-up --version\nerror: expected no command line args, got 1\n```\n\nIt would be nice to fix this, to return the version and to provide more documentation on what this tool does.", "CLOSED", 0, "tessr", "2025-08-14T21:03:15Z", "2025-08-26T00:47:55Z", "2025-08-26T00:47:55Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Fuc5d", 17046, "op-sync-tester: Add caching layer and batch EL requests", "op-sync-tester may cache the read only EL query results and use it for response.\nop-sync-tester can batch expected read EL requests for faster sync", "OPEN", 0, "pcw109550", "2025-08-13T07:44:32Z", "2025-08-29T11:50:18Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FjnC1", 17027, "Coordinate GTM tasks for Flashblocks public enablement", "Assist Sanjana Mehta with tasks and strategies such as docs and coordinating with RaaS providers to get done associated with public GTM strategy for Flashblocks public sepolia.", "CLOSED", 0, "yashvardhan-kukreja", "2025-08-12T14:06:42Z", "2025-08-29T18:00:45Z", "2025-08-29T18:00:45Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FYJte", 17013, "Multi-proofs (AKA Aggregate Dispute Game)", "This issue is the overall tracker for multi-proofs. The purpose is to combine multiple proof systems.\n\nThis might be an \"Aggregate Dispute Game\", each of which likely implements `IDisputeGame`, although this issue won't prescribe an implementation.", "OPEN", 0, "pauldowman", "2025-08-11T19:45:00Z", "2025-09-02T20:45:19Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FXwvl", 17012, "[Scalar fix] Postmortem of original issue", "", "CLOSED", 0, "mds1", "2025-08-11T19:17:02Z", "2025-08-25T20:06:36Z", "2025-08-25T20:06:36Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FVBIC", 17009, "[DA Footprint Limit] Write design doc", "", "CLOSED", 0, "mslipper", "2025-08-11T15:46:43Z", "2025-09-23T20:22:32Z", "2025-09-23T20:22:32Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FUE2V", 17007, "op-up: clean up logging", "During the offsite hackathon, some problems were encountered with filtering `op-geth` logs (iirc either all were shown or all were filtered). To get around the problem, we decided to mute all `sysgo` logs and configure a proxy to log RPC requests. \n\nWe should understand the root cause and filter the geth logs properly.\n\nEdit: unsurprisingly, the problem stems from geth's use of the global logger. All instances of op-geth--both the one used for L1 EL and the one used for L2 EL--use the same logger. Without a large upstream change, it is not clear how to solve this; focusing on implementing docker support after #17006 may be a more worthwhile route (subprocesses are also an option, but compiling an op-geth artifact into op-up would bloat the binary and complicate the release process).", "CLOSED", 0, "joshklop", "2025-08-11T14:40:24Z", "2025-08-25T22:12:04Z", "2025-08-25T22:12:04Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FUAhI", 17005, "op-up: support the challenger", "We don't need to support every challenger configuration. Will likely require packaging the cannon, op-program, and prestates with the op-up binary.", "CLOSED", 0, "joshklop", "2025-08-11T14:35:23Z", "2025-08-26T00:09:58Z", "2025-08-26T00:09:58Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FSUBh", 16999, "[DA Footprint Limit] Productionize hackathon", "", "CLOSED", 0, "mslipper", "2025-08-11T12:53:32Z", "2025-09-09T14:03:43Z", "2025-09-09T14:03:43Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7FSQmX", 16998, "[Tracking] [DA Footprint Limit] Calldata Footprint Limit", "", "OPEN", 0, "mslipper", "2025-08-11T12:49:42Z", "2025-09-30T11:44:03Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7DobEk", 16932, "deploy mempool rebroadcaster cronjob", "Though we haven't encountered this yet, Base informed us of their experiences with noticing some transactions getting rejected by the mempool of rbuilder while being accepted by geth.\n\nThis created mempool drifts cascading in the form halted transaction inclusion for some of the unlucky transactions.\n\nTo workaround this, they built a mempool rebroadcaster which runs as a CronJob and re-inserts the rejected transactions to the rejecting mempool by performing periodic checks.\n\nWe should deploy it as a preventive measure.\n\nHere's the link to it - https://github.com/base/infra", "CLOSED", 0, "yashvardhan-kukreja", "2025-08-01T01:10:30Z", "2025-08-25T15:15:16Z", "2025-08-25T15:15:16Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7DIXUs", 16874, "op-service: Event Call Graph", "Add a logic to \"trace\" the event flow.\nFor example, when `ReceivedBlockEvent` event is emitted, we get a below call trace in the happy path scenario.\n```\np2p.ReceivedBlockEvent [09ab623c]\n\u2514\u2500\u2500 clsync.ReceivedUnsafePayloadEvent [9277ffe6]\n    \u2514\u2500\u2500 engine.ForkchoiceRequestEvent [aca04240]\n        \u2514\u2500\u2500 engine.ForkchoiceUpdateEvent [e024a814]\n            \u2514\u2500\u2500 engine.ProcessUnsafePayloadEvent [78c3546d]\n                \u251c\u2500\u2500 engine.UnsafeUpdateEvent [c5a17e39]\n                \u2502   \u251c\u2500\u2500 engine.PromoteCrossUnsafeEvent [a67127ca]\n                \u2502   \u2502   \u2514\u2500\u2500 engine.CrossUnsafeUpdateEvent [0e2159d5]\n                \u2502   \u2514\u2500\u2500 engine.TryUpdateEngineEvent [a40cff76]\n                \u2514\u2500\u2500 engine.ForkchoiceUpdateEvent [ba5224e4]\n```", "CLOSED", 0, "pcw109550", "2025-07-29T13:54:49Z", "2025-08-25T20:05:58Z", "2025-08-25T20:05:58Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7C_jKk", 16868, "alert on low peer count health of flashblocks-enabled sequencer", "Considering the criticality on the presence of healthy peers of a flashblocks-enabled sequencers, we should have an alert capturing the situation when the peer count drops below a number like 3 or 4.\n\nThis alert should span across non-leader sequencers as well.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-28T22:20:30Z", "2025-09-11T08:09:22Z", "2025-09-11T08:09:22Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7C_hmk", 16867, "alert when non-flashblocks-enabled sequencer is active or flashblocks are turned off", "We plan to enable flashblocks with a backup sequencer with no flashblocks components. And in case, leadership transfer converges to the backup sequencer, that can be representative of an issue with flashblocks.\n\nHave an alert for that i.e. when the leadership is stuck at a non-flashblocks-enabled sequencer.\n\nMoreover, this alert should cover the scenario when the active sequencer is turned off with flashblocks or is not producing them. It's critical for EOC to know if flashblocks production is impacted intentionally (due to rollup-boost killswitch) or unintentionally", "OPEN", 0, "yashvardhan-kukreja", "2025-07-28T22:15:43Z", "2025-08-26T21:00:34Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7C7BGp", 16843, "Rollout and Release op-batcher", "", "CLOSED", 0, "mslipper", "2025-07-28T14:55:50Z", "2025-08-25T17:05:19Z", "2025-08-25T17:05:19Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7C6YIk", 16839, "min-base-fee: add `minBaseFee` configuration variable to `SystemConfig` contract", "A new method should be added\n\n```solidity\nfunction setMinBaseFeeLog2(uint8 minBaseFeeLog2) external onlyOwner;\n```\n\nwhich emits a `ConfigUpdate` event with a new `UpdateType`: `UpdateType.MINIMUM_BASE_FEE`.\n\nSee ratified design doc https://github.com/ethereum-optimism/design-docs/pull/295", "CLOSED", 0, "geoknee", "2025-07-28T14:11:35Z", "2025-09-15T11:21:17Z", "2025-09-15T11:21:17Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7ClXMH", 16825, "Complete Geth v1.16.1 Merge", "Complete the Geth v1.16.1 merge.\n\nOpen PRs:\n\n- https://github.com/ethereum-optimism/op-geth/pull/638\n- https://github.com/ethereum-optimism/optimism/pull/16785", "CLOSED", 0, "mslipper", "2025-07-25T22:56:30Z", "2025-08-25T19:43:42Z", "2025-08-25T19:43:42Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7CV4hm", 16807, "[Tracking] Min Base Fee", "See ratified design doc https://github.com/ethereum-optimism/design-docs/pull/295", "OPEN", 0, "mslipper", "2025-07-24T16:38:20Z", "2025-08-29T10:27:59Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7By_-I", 16778, "op-sync-tester: Support sync namespace", "\n- [ ] `sync_getSession`: Returns the current forkchoice view (latest, safe, finalized), session status (active, failed, completed), and any diagnostic messages. Useful for test harnesses to monitor or summarize test runs.\n- [ ] `sync_deleteSession`: Deletes the session and its in-memory state. Further RPC calls using the same session UUID will return an error. Enables explicit cleanup in CI or shared environments.\n- [ ] `sync_listSessions`: Lists the UUIDs of all active or recently completed sessions for a given chain ID. Accessible via the /chain/{chain_id}/synctest endpoint using a JSON-RPC call. No session UUID is required in the HTTP path for this method.\n\n", "CLOSED", 0, "pcw109550", "2025-07-22T06:56:17Z", "2025-09-02T15:54:15Z", "2025-09-02T15:54:15Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Bo_z9", 16759, "enable flashblocks on prod-mainnet-op-opn-geth-f-sequencer-0", "To progressively deploy flashblocks on mainnet, deploy it on one sequencer for the first time.\n\nEvaluate its performance over a two-day window. Block progression should depict a 99.95% SLA over a 2-day window and flashblocks should be available 99% of the time.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:48:49Z", "2025-09-11T06:47:39Z", "2025-09-11T06:47:38Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7BouYk", 16756, "load testing flashblocks on devnets", "A load test should be performed on eris-0 to ensure that it's ready to be served publicly with the quality of service we're expecting from it.\n\nDuring the window of this load tests:\n- The normal block progression should meet 99.95% of our SLA.\n- The flashblocks should meet 99% availability (availability represented by a 250ms stream of flashblocks available)", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:28:57Z", "2025-09-15T21:59:23Z", "2025-09-15T21:59:22Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7Apbxc", 16703, "op-sync-tester,op-acceptance-tests: sync test using the sync-tester", "Add sync acceptance tests using the sync tester.\n\n---\n\nsysgo \u2192 easier to config because while we are booting the system, we may make a preset to enable/disable space.\n\n@pcw109550 's suggestion is that, to make a minimal feedback loop to test, lets do in sysgo with activation of isthmus.\n\n- [x] sysgo \u2192 simple\n\n1. Spawn EL, CLA with isthmus enabled\n2. Spawn Sync tester\n3. Connect the CLB with the Sync tester\n4. And make sure the CLB connected with the Sync Tester advances(syncs)\n\nCLB \u2194 Sync-Tester \u2194 EL \u2194 CLA \n\n- [ ] sysgo(extension to sysext can be done in follow up work)  \u2192 real data(op-mainnet etc)\n\n1. hardcode the public endpoint (or OP Labs internal EL endpoint) to the test and give this to the initialization of the sync tester.\n2. we may spawn CL to test\n3. Make CL to sync until isthmus(or hf block - 1)\n4. Check CL correctly advances after new hardfork\n\n---\n\nTest case Ideas(ordered by priority)\n\n- [ ] Check every OP Stack HF transitions, not only Isthmus, but all HFs for real data.\n- [ ] Multiple CLs, Single Sync Tester: Each CLs will initialize their own mock EL endpoints given by the sync tester. This validates that multiple CLs can sync together.\n- [ ] User Tx with Sync Tester: Current tests only sync blocks which only contain deposit tx. Create user tx inside L2 blocks and check the L2CLs are synced also.", "CLOSED", 0, "pcw109550", "2025-07-15T12:34:38Z", "2025-09-09T12:57:56Z", "2025-09-09T12:48:18Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7ApbHK", 16702, "op-sync-tester,op-devstack: Support sysgo", "Deploy in devstack sysgo (for testing the test tool).\n\nProcess:\n1. Initialize L2 EL, L2 CL pair\n2. Initialize sync tester from L2 EL, providing the target `test_{head/safe/finalized}`\n4. Provide sync tester endpoint/auth to the L2 CL\n6. Check sync\n\nWe may provide presets like\n\n```go\nfunc TestMain(m *testing.M) {\n\tpresets.DoMain(m, presets.WithMinimalWithSyncTester(head, safe, finalized),\n\t\tpresets.WithCompatibleTypes(compat.SysGo),\n\t)\n}\n```", "CLOSED", 0, "pcw109550", "2025-07-15T12:33:42Z", "2025-08-26T12:48:40Z", "2025-08-26T12:48:40Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM7AparC", 16701, "op-sync-tester: Support engine namespace", "RPC methods to serve:\n\n- `engine_newPayload{V1,V2,V3,V4}`: check that the payload matches the real one. Error if it does not, and abort the sync test.\n- `engine_forkchoiceUpdated{V1,V2,V3}`: check if the forkchoice hashes are canonical. Update the `test_head`, `test_safe`, `test_finalized` in-memory forkchoice values. And check if the block-building attributes (if any) match the inputs to the actual block.\n- `engine_getPayload{V1,V2,V3,V4}`: return the block that matches the expected block from the block-building job arguments.\n\nNote that `engine_newPayload` and `engine_forkchoiceUpdated` is enough for checking the L2 CL sync as a verifier.  `engine_getPayload` is needed when the CL is acting as a sequencer.\n\n- [x] Isthmus Engine APIs: https://github.com/ethereum-optimism/optimism/pull/17072\n    - `engine_newPayloadV4, engine_getPayloadV4, engine_forkchoiceUpdatedV3`\n- [x] Ecotone, Fjord, Granite, Holocene Engine APIs: https://github.com/ethereum-optimism/optimism/pull/17181\n    - `engine_newPayloadV3, engine_getPayloadV3, engine_forkchoiceUpdatedV3`\n- [ ] Bedrock, Canyon, Delta Engine APIs: https://github.com/ethereum-optimism/optimism/pull/17234\n    - `engine_newPayloadV1, engine_getPayloadV1, engine_forkchoiceUpdatedV1, engine_newPayloadV2, engine_getPayloadV2, engine_forkchoiceUpdatedV2`\n\n", "CLOSED", 0, "pcw109550", "2025-07-15T12:33:11Z", "2025-08-27T11:02:52Z", "2025-08-27T11:02:52Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM68XM2y", 16514, "Add support for flashblocks in kurtosis.", "We should add support for flashblocks (rollup-boost and rbuilder) to the Kurtosis devnet.\n\nWe should make sure this works with an infra topology that has a rbuilder instance per conductor instance. [Here](https://github.com/flashbots/rollup-boost/blob/main/docs/rollup-boost-ha.md) is the reference for that topology.\n\nPS: Ignore the op-nodes coupled with rbuilders", "CLOSED", 0, "yashvardhan-kukreja", "2025-06-19T12:39:51Z", "2025-08-27T23:57:22Z", "2025-08-27T23:57:22Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM67Cx_F", 16388, "[FMA Action] monitoring and alerting improvements in favor of flashblocks", "With the progress of flashblocks integration, and op-sepolia approaching flashblocks enablement, we'd like to have flashblocks-related monitoring and alerting setup which would provide us with relevant observability and paging for whenever anything goes wrong with any flashblocks-associated behaviour on the respective chain/network", "CLOSED", 0, "yashvardhan-kukreja", "2025-06-11T20:47:12Z", "2025-09-11T08:18:08Z", "2025-09-11T08:18:07Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM629vBX", 15980, "Interop proofs U17 proof upgrade workstream", "This is a tracker issue for the [Interop proofs U17 proof upgrade workstream](https://www.notion.so/oplabs/U17-Proof-Upgrade-1eff153ee16280069c19fcae5c86747d).", "CLOSED", 0, "pauldowman", "2025-05-16T18:22:58Z", "2025-08-27T13:51:45Z", "2025-08-27T13:51:45Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM61wUco", 15789, "Fault Proof creator contract OPCM changes", "figure out the OPCM changes and see what we need to do to support it with the latest changes we made", "OPEN", 0, "BlocksOnAChain", "2025-05-08T15:19:36Z", "2025-08-28T19:24:45Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6xCDU7", 15217, "op-program: Invalid pending progress length check in stateTransition", "_Spearbit audit findings_\n\n\n**Description**\nDuring the consolidation step, the following length check is executed.\n```\n\nfunc stateTransition(logger log.Logger, bootInfo *boot.BootInfoInterop, l1PreimageOracle l1.Oracle, l2PreimageOracle l2.Oracle, tasks taskExecutor) (common.Hash, error) {\n\t// ...\n\t} else if transitionState.Step == ConsolidateStep {\n\t\tlogger.Info(\"Running consolidate step\")\n\t\t// sanity check\n\t\tif len(transitionState.PendingProgress) >= ConsolidateStep { // @audit length check here is incorrect\n\t\t\treturn common.Hash{}, fmt.Errorf(\"pending progress length does not match the expected step\")\n\t\t}\n\t\t// ...\n\t}\n\n        // ...\n}\n```\n\nThis sanity check is incorrect as it will fail when `transitionState.PendingProgress` == `ConsolidateStep` with `ConsolidateStep` being 127. However, there might be 127 elements because each step from 0 to 126 may add an element to PendingProgress.\n\nNote: The current dependency set is not expected to reach the 127 chains hard limit, making this issue unlikely to occur.\n\n**Recommendation**\nThe length check must use the > operand instead of >=.\n\n```\ndiff --git a/op-program/client/interop/interop.go b/op-program/client/interop/interop.go\nindex 5174ab04f..04e463004 100644\n--- a/op-program/client/interop/interop.go\n+++ b/op-program/client/interop/interop.go\n@@ -107,7 +107,7 @@ func stateTransition(logger log.Logger, bootInfo *boot.BootInfoInterop, l1Preima\n \t} else if transitionState.Step == ConsolidateStep {\n \t\tlogger.Info(\"Running consolidate step\")\n \t\t// sanity check\n-\t\tif len(transitionState.PendingProgress) >= ConsolidateStep {\n+\t\tif len(transitionState.PendingProgress) > ConsolidateStep {\n \t\t\treturn common.Hash{}, fmt.Errorf(\"pending progress length does not match the expected step\")\n \t\t}\n \t\texpectedSuperRoot, err := RunConsolidation(\n```\n", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:17:48Z", "2025-08-27T22:39:07Z", "2025-08-27T22:39:07Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6vCpTJ", 14976, "Reduce friction between Go/Solidity dev", "The EVM Safety team would like the following to reduce friction when developing smart contracts:\n\n- A way to automatically update Go structs when Solidity contracts change\n- To replace input/output contracts with Solidity structs that can be passed directly to the `run` method of each script\n\nA few implementation notes from today's call on this:\n\n- We decided that we'd use Go codegen\n- We'll need to validate that codegen is up-to-date in CI\n- We may be able to extend/build on top of `abigen`\n- Our codegen process can generate encoders/decoders using [w3](https://w3.cool)\n- We'll start with a prototype for one of our scripts (likely DeploySuperchain), then run it past the EVM Safety team for feedback", "CLOSED", 0, "mslipper", "2025-03-20T21:35:31Z", "2025-08-25T17:36:56Z", "2025-08-25T17:36:56Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6tVetd", 14760, "Support Go 1.24 in Cannon", "## Description\n\nFollowing https://github.com/ethereum-optimism/optimism/issues/13447, we should also update Cannon to support Go 1.24. ", "OPEN", 0, "mbaxter", "2025-03-10T18:26:12Z", "2025-08-29T23:30:06Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6okMy9", 14108, "op-node: remove req-resp p2p sync", "See design-doc: https://github.com/ethereum-optimism/design-docs/blob/main/protocol/deprecate-reqresp-sync.md\n\nThis aims to fix sync problems seen with the old req-resp protocol based syncing.\n\nThe related op-node CLI flags need deprecation, and sync behavior needs to change as described in the design-doc.\nThe CLI sync-flag should be a no-op. \n\nAn explicit `--skip-initial-l1-sync` should be introduced for users who aim to verify the chain starting after an initial EL sync.\n\n", "OPEN", 0, "protolambda", "2025-02-03T17:03:10Z", "2025-09-15T09:51:04Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6kplqE", 13543, "Jovian + Karst: Consensus influencing event nonces [TRACKER]", "## Overview\n\nThis is a tracking issue for https://github.com/ethereum-optimism/specs/issues/330#issuecomment-2354217166, which introduces a nonce for L1 events that affect consensus (`SystemConfig.ConfigUpdate` and `OptimismPortal2.TransactionDeposited`).\n\nDesign doc PR: https://github.com/ethereum-optimism/design-docs/pull/182\nDesign review issue: https://github.com/ethereum-optimism/design-docs/issues/183\n\n## Rollout plan\n\n1. _Jovian_: introduce change in op-node / op-program / Kona to accept `ConfigUpdate` and `TransactionDeposited` for both version `0` and `1`. Version `1` will also contain an incrementing nonce in the upper 128-bits of the version argument. Also update the `L1Block` contract to track these nonces on the L2.\n2. _Between Jovian + Karst_: roll out contract upgrades to `SystemConfig` and `OptimismPortal2` that introduce this new version `1` events with the nonce.\n3. _Karst_: remove support for version `0` events, requiring incrementing nonces going forward. This guarantees that nonces are available, allowing for simplification of the derivation pipeline by supporting skipping L1 blocks that contain none of these events. \n\n## Step 1 TODOs (Jovian):\n - [ ] Specs: https://github.com/ethereum-optimism/specs/pull/487\n - [ ] Implementation:\n     - [ ] https://github.com/ethereum-optimism/optimism/pull/13539\n     - [ ] https://github.com/ethereum-optimism/op-geth/pull/457\n\n## Step 2 TODOs (contract upgrades):\n - [ ] Devnet rollout\n - [ ] Testnet rollout\n - [ ] Mainnet rollout\n\n## Step 3 TODOs (Karst):\n - [ ] Specs: WIP\n - [ ] Implementation: WIP", "CLOSED", 0, "mdehoog", "2024-12-29T18:47:35Z", "2025-08-25T20:03:22Z", "2025-08-25T20:03:22Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6kDRKd", 13502, "op-proposer Failed to create a transaction", "I deploying op-proposer using the command below:\n\n```shell\n./bin/op-proposer \\\n--poll-interval=12s \\\n--rpc.port=8560 \\\n--rollup-rpc=http://localhost:9545 \\\n--private-key=$GS_PROPOSER_PRIVATE_KEY \\\n--game-factory-address=0xcc59dd3b93dd3bd835f0752b4f0c7db100493f19 \\\n--proposal-interval=12s \\\n--l1-eth-rpc=$L1_RPC_URL\n``` \n\nand I get this err\n\n```shell\nt=2024-12-20T09:17:14+0000 lvl=info msg=\"Initializing L2Output Submitter\"\nt=2024-12-20T09:17:14+0000 lvl=info msg=\"Metrics disabled\"\nt=2024-12-20T09:17:14+0000 lvl=info msg=\"Connected to DisputeGameFactory\" address=0xcC59DD3B93DD3Bd835f0752B4F0C7dB100493f19 version=1.0.0\nt=2024-12-20T09:17:14+0000 lvl=info msg=\"Starting JSON-RPC server\"\nt=2024-12-20T09:17:14+0000 lvl=info msg=\"Starting Proposer\"\nt=2024-12-20T09:17:14+0000 lvl=info msg=\"Starting Proposer\"\nt=2024-12-20T09:17:14+0000 lvl=info msg=\"Proposer started\"\nt=2024-12-20T09:17:26+0000 lvl=info msg=\"No proposals found for at least proposal interval, submitting proposal now\" proposalInterval=12s\nt=2024-12-20T09:17:38+0000 lvl=info msg=\"Proposing output root\" output=0xe92b40c506604542b21be065329b4b85db479958711c66e446ef022bfc60a489 block=0x20569d720e37ad5114dab71b7f01aa51b22be752533d112780d69684d72e3aec:952103\nt=2024-12-20T09:17:39+0000 lvl=warn msg=\"Failed to create a transaction, will retry\" service=proposer err=\"failed to estimate gas: execution reverted, reason: 0x031c6de40000000000000000000000000000000000000000000000000000000000000000\"\nt=2024-12-20T09:17:41+0000 lvl=warn msg=\"Failed to create a transaction, will retry\" service=proposer err=\"failed to estimate gas: execution reverted, reason: 0x031c6de40000000000000000000000000000000000000000000000000000000000000000\"\nt=2024-12-20T09:17:43+0000 lvl=warn msg=\"Failed to create a transaction, will retry\" service=proposer err=\"failed to estimate gas: execution reverted, reason: 0x031c6de40000000000000000000000000000000000000000000000000000000000000000\"\nt=2024-12-20T09:17:45+0000 lvl=warn msg=\"Failed to create a transaction, will retry\" service=proposer err=\"failed to estimate gas: execution reverted, reason: 0x031c6de40000000000000000000000000000000000000000000000000000000000000000\"\nt=2024-12-20T09:17:47+0000 lvl=warn msg=\"Failed to create a transaction, will retry\" service=proposer err=\"failed to estimate gas: execution reverted, reason: 0x031c6de40000000000000000000000000000000000000000000000000000000000000000\"\n``` \n\nI have tried to wait for a few days before, but there is still such an error, there is no other useful print, all `t=2024-12-20T09:17:47+0000 lvl=warn msg=\"Failed to create a transaction, will retry\" service=proposer err=\"failed to estimate gas: execution reverted, reason: 0x031c6de40000000000000000000000000000000000000000000000000000000000000000`\n\npls help, how can I handle it\n\nBR\n", "CLOSED", 0, "AphobiaCat", "2024-12-20T09:33:01Z", "2025-08-26T07:50:11Z", "2025-02-04T14:17:08Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6hrIZD", 13168, "Implement The New Creator Pattern", "- [x] - Finish the design doc for the `Creator` pattern\n- [ ] - Finalize the implementation for `Creator` contracts\n- [ ] - Figure out all OPCM changes needed", "CLOSED", 0, "ControlCplusControlV", "2024-12-02T15:56:31Z", "2025-08-28T17:43:08Z", "2025-05-22T15:13:08Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6gfT3C", 13090, "op-challenger: Provide option to limit how often games are processed", "op-challenger makes a lot of calls to the L1 node because it's tracking all games from the last 28 days and for each game it winds up loading all the claims for those games. Currently it tries to update games basically as fast as it can - scheduling a new round of updates on each new block (though back pressure means it doesn't actually update that fast).\n\nTo reduce the number of calls it makes, it would be useful to provide an option to limit how often games are updated. Possibly the easiest way to do this is to only schedule processing games if the new L1 block is X seconds after the previous update was scheduled but can be flexible about the particular semantics.", "CLOSED", 0, "ajsutton", "2024-11-25T23:18:39Z", "2025-08-27T22:47:12Z", "2025-08-27T22:47:12Z", "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDODjvEJM6ZyU6G", 12421, "Refactor proofs contracts to support `Creator` contracts", "## Problem\n\nThe fault proof contracts must be deployed for each new L2 chain because [they take constructor args with values that change](https://github.com/ethereum-optimism/optimism/blob/d470c77689821371d452917632f10011a7cfe618/packages/contracts-bedrock/src/dispute/FaultDisputeGame.sol#L160-L169), so requiring new deployments.\n\nSimilarly, [`AnchorStateRegistry`](https://github.com/ethereum-optimism/optimism/blob/d470c77689821371d452917632f10011a7cfe618/packages/contracts-bedrock/src/dispute/AnchorStateRegistry.sol) takes the dispute game factory in the constructor.\n\n## Context\n\nThe dispute game contracts are already clones with immutable args created by [`DisputeGameFactory`](https://github.com/ethereum-optimism/optimism/blob/d470c77689821371d452917632f10011a7cfe618/packages/contracts-bedrock/src/dispute/DisputeGameFactory.sol), but the implementation to clone can\u2019t be reused for a new L2 because of the constructor args. \n\nThis issue doesn't aim to be prescriptive about how this is solved but one avenue to explore might be for the constructor parameters to be provided by the factory, perhaps in [the opaque `_extraData` parameter to `create()`](https://github.com/ethereum-optimism/optimism/blob/d470c77689821371d452917632f10011a7cfe618/packages/contracts-bedrock/src/dispute/DisputeGameFactory.sol#L162).\n\n## Solution\n\nAs discussed in [design doc](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/proofs/dispute-game-creators.md), the dispute game deployment and configuration should be delegated to a new class of `Creator` contract, which is specific to each `FaultDisputeGame` type, and deployed behind a proxy. This will allow multiple chains to point to the same implementations, having different proxies for each `Creator` contract\n", "OPEN", 0, "pauldowman", "2024-10-11T00:13:02Z", "2025-08-29T23:30:39Z", null, "ethereum-optimism/optimism", "2025-08-30 03:27:04"]
["I_kwDOKIwiaM6LCgIR", 726, "[DOCS] Do not have access permission  <fee parameter calculator>", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nI have not permission fee parameter calculator for determine scalar values\r\n\r\n## Description of the Documentation You'd Like\r\nYou need to open access.\r\n\r\n## Links to Related Pages\r\ndocs link: https://docs.optimism.io/builders/chain-operators/management/blobs#determine-scalar-values-for-using-blobs\r\n\r\nfee parameter calculator link: https://docs.google.com/spreadsheets/d/12VIiXHaVECG2RUunDSVJpn67IQp9NHFJqUsma2PndpE/edit\r\n\r\n## Additional Context\r\nThere's a link in the guide to use this calculator, but it's not available.\r\n", "CLOSED", 0, "ohbyeongmin", "2024-06-04T06:45:50Z", "2024-06-05T00:55:46Z", "2024-06-05T00:55:46Z", "ethereum-optimism/docs", "2025-08-30 07:09:17"]
["I_kwDOKIwiaM6J_THa", 713, "[DOCS] Update the \"OP Stack Components\" Page", "## Brief Description of the Docs Request\r\n\r\nSome things in the _OP Stack Components_ page appear to be outdated, such as the note about OP Stack being usable with more than 1 DA layer.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nUpdate the page with the most up-to-date information about OP Stack.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/stack/components#layers\r\n\r\n## Additional Context\r\n\r\nhttps://github.com/ethereum-optimism/developers/discussions/415", "CLOSED", 0, "PaulRBerg", "2024-05-24T10:40:37Z", "2024-06-09T20:48:28Z", "2024-06-09T20:48:28Z", "ethereum-optimism/docs", "2025-08-30 07:09:17"]
["I_kwDOKIwiaM6K1LDO", 723, "[DOCS] Add PR title", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\r\n\r\n## Description of the Documentation You'd Like\r\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\r\n\r\n## Links to Related Pages\r\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \r\n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "setiyo030991", "2024-06-01T15:16:28Z", "2024-06-14T22:50:44Z", "2024-06-14T22:50:44Z", "ethereum-optimism/docs", "2025-08-30 07:10:03"]
["I_kwDOKIwiaM6KCTNA", 715, "[DOCS] High-level explanation of Fault Proofs in the Overview section", "## Brief Description of the Docs Request\r\n\r\nI would like the overview section of the documentation on Fault Proofs to be simplified and rewritten.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nI've read the current docs multiple times without understanding much about the fault proofs work, at a high level.\r\n\r\nThe documentation feels rather 'abrupt' - it jumps straight to explaining the low-level concepts without giving a high-level overview.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/stack/protocol/fault-proofs/overview\r\n\r\n## Additional Context\r\n\r\nI understood more about how the fault proofs work by reading this summary written by Georgios:\r\n\r\nhttps://x.com/gakonst/status/1489258844429553669", "CLOSED", 0, "PaulRBerg", "2024-05-24T17:08:09Z", "2024-06-14T14:05:00Z", "2024-06-14T14:04:59Z", "ethereum-optimism/docs", "2025-08-30 07:10:03"]
["I_kwDOKIwiaM6O206I", 782, "Add Standard config values to docs", "Need a place in the docs that calls out what \"standard\" config values chains should default to (for alt-layer). I think the place with the most accurate recommended config values right now is here: https://specs.optimism.io/protocol/configurability.html - and we should be making this both:\r\n- Easily accessible and linked via the docs -- find any other pages this should be linked to/within.\r\n- Linked in the Custom Gas token docs for how to set configuration values, saying something like \"Aside from setting useCustomGasToken and customGasTokenAddress during deployment of your contracts, all other configuration can be set to our standard configuration values: https://specs.optimism.io/protocol/configurability.html", "CLOSED", 0, "cpengilly", "2024-07-08T23:23:02Z", "2024-07-19T18:46:18Z", "2024-07-19T18:46:18Z", "ethereum-optimism/docs", "2025-08-30 07:10:07"]
["I_kwDOKIwiaM6PI5ac", 785, "[DOCS] Improve search ability for docker images", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nSome feedback that I've received that its difficult to find the docker images for the services we provide. \r\n\r\n## Description of the Documentation You'd Like\r\n\r\n- Clear instructions on how to find the docker images we publish\r\n\r\n## Links to Related Pages\r\n\r\n- https://docs.optimism.io/builders/node-operators/releases\r\n\r\n## Additional Context\r\n\r\n- This releases page might be better served as one for all of our software and not just the node components.\r\n- Devinfra and node squad might be able to help\r\n", "CLOSED", 0, "sbvegan", "2024-07-10T19:13:20Z", "2024-08-03T20:22:21Z", "2024-08-03T20:22:20Z", "ethereum-optimism/docs", "2025-08-30 07:10:15"]
["I_kwDOKIwiaM6NoSj8", 771, "[TUTORIAL] Add PR title", "", "CLOSED", 0, "Pthannh", "2024-06-26T19:51:03Z", "2024-07-31T22:41:46Z", "2024-07-31T22:41:46Z", "ethereum-optimism/docs", "2025-08-30 07:10:15"]
["I_kwDOKIwiaM6MSL7o", 744, "Update Privileged Roles", "Flagging a quick docs update for privileged roles\n\nI believe we want to update the standard config spec so L2 ProxyAdmin owner is required to be the aliased address of the L1 ProxyAdmin Owner. We also currently incorrectly state in both the https://specs.optimism.io/protocol/configurability.html#admin-roles and https://docs.optimism.io/chain/security/privileged-roles#l2-proxy-admin that the L2 ProxyAdmin owner is a Foundation Safe on L2, but now that Upgrade 8 is executed it's actually 0x6B1BAE59D09fCcbdDB6C6cceb07B7279367C4E3b, which is the aliased L1 Safe address. ", "CLOSED", 0, "cpengilly", "2024-06-14T15:07:27Z", "2024-06-20T20:57:59Z", "2024-06-20T20:57:59Z", "ethereum-optimism/docs", "2025-08-30 07:10:16"]
["I_kwDOKIwiaM6LFlaZ", 728, "[DOCS] Update chain-deployment docs", "## Brief Description of the Docs Request\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup\r\nis one of the core docs, very essential to developers test-running the stack, and starts with a warning of \"Please do not rely on the content of this page\".\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nSplit in 3 pages:\r\n- How to work with the currently stable contracts deployment set, and up to which hardfork is supported on op-mainnet.\r\n- How to work with the latest develop branch.\r\n- Common reference for deploy-config. Reference to the configuration page, and summary which parameters are most relevant.\r\n\r\nFor develop, the approximate process is (to my understanding):\r\n- create private keys, for each role that is going to be configured\r\n- configure, create a `deploy-config.json`\r\n- run `Deploy.s.sol` to deploy the L1 smart-contracts. Get a contract-addresses summary and a deployment-artifacts directory.\r\n- run `L2Genesis.s.sol` to generate the L2 `genesis.json`\r\n- run `op-node genesis l2` with the CLI flag options pointing to L1 RPC and various config inputs / outputs.\r\n- run `op-geth init --datadir=somepathhere genesis.json` to create a datadir for the L2 chain\r\n- run `op-geth` from that datadir\r\n- op-geth should have generated a JWT file, if you didn't specify one yourself already. Use that in op-node CLI flag to get engine-API connection authenticated.\r\n- run `op-node`, with sequencer flags, and `--rollup.config=rollup.json` pointing to the previously generated L2 rollup config.\r\n- run `op-batcher`, with flags pointed at op-geth and op-node and L1 node\r\n- run `op-proposer` (assumes geth is running in archive mode! Fixed in future Granite hardfork maybe), necessary for L2 withdrawals.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/management/configuration\r\n\r\n## Additional Context\r\n\r\nCore dev teams, external RaaS and devops teams all heavily rely on this documentation.\r\n", "CLOSED", 0, "protolambda", "2024-06-04T13:09:38Z", "2024-06-18T12:50:10Z", "2024-06-18T12:50:10Z", "ethereum-optimism/docs", "2025-08-30 07:10:16"]
["I_kwDOKSJyfM6VZvJx", 456, "Update the UI to show an error state when the faucet claim returns an error", "Right now when a faucet claim fails, the loading spinner just spins continuously. We should add UI handling for this so the user is not stuck waiting.", "CLOSED", 0, "tremarkley", "2024-09-05T00:55:11Z", "2024-09-05T20:11:11Z", "2024-09-05T20:11:11Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6VOr8p", 451, "Create runbook for troubleshooting dev console faucet issues", "", "CLOSED", 0, "tremarkley", "2024-09-03T19:48:08Z", "2024-09-07T00:17:23Z", "2024-09-07T00:17:22Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6VOqeH", 450, "Fix WorldID faucet auth", "", "CLOSED", 0, "tremarkley", "2024-09-03T19:45:27Z", "2024-09-05T00:54:16Z", "2024-09-05T00:54:15Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6VOZn5", 449, "Add GH auth to faucet", "", "CLOSED", 0, "tremarkley", "2024-09-03T19:09:09Z", "2024-09-05T18:07:51Z", "2024-09-05T18:07:51Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6VOZgT", 448, "Do not allow users to claim from the faucet if balance on admin wallet or smart contract is too low", "Backend should return the health of the faucet: `HEALTHY`, `ADMIN_WALLET_BALANCE_LOW`, `CONTRACT_BALANCE_LOW`\n\nFrontend should read this status in order to determine whether to show the empty state of the faucet.", "CLOSED", 0, "tremarkley", "2024-09-03T19:08:51Z", "2024-09-06T21:54:30Z", "2024-09-06T21:54:30Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6RfySz", 430, "Add Observability to Faucet", "Add observability for status of faucet requests to get a sense for how often folks encounter failures. Most likely should use the existing [Grafana dashboard](https://optimistic.grafana.net/d/ebc95cfa-3368-410f-9d72-ca240f4e2831/superchain-faucet-v1-monitoring). Once this task is complete, we should add a pageable event at a certain threshold (we can experiment with the right level) for oncall to ensure we are alerted.", "CLOSED", 0, "fainashalts", "2024-07-31T22:08:38Z", "2024-09-06T23:30:03Z", "2024-09-06T23:30:03Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6QeRQ_", 416, "Interop Abstractions", "To ease development of interop-aware applications on the Superchain, developers need access to high-level abstractions that simplify their workflow when implementing interoperability features. Viem and Wagmi provide evm abstractions to application developers, and as OPLabs rolls out interop, we can make it easier for app developers by extending these abstractions. \r\n\r\nThe PRD for this work is available [here](https://docs.google.com/document/d/1owAJ5dwiE_XZW56l8vuH6Mzu724TR61ZMzhoiAb6bxg/edit), and the technical spec for viem actions (which set us up for wagmi hooks), is [here](https://www.notion.so/oplabs/Viem-Interop-3e76e3f812af4cd791862f2d8a2ec2cc). \r\n\r\nThis is the parent issue to track work toward these abstractions. It should be updated with related PRs and threads can be started here for any conversations related to the effort. \r\n\r\n**Viem Tasks**\r\n- [x] Setup `@eth-optimism/viem`\r\n- [x] Add ABI and predeploy addresses\r\n   - [x] `L2ToL2CrossDomainMessenger`\r\n   - [x] `CrossL2Inbox`\r\n   - [x] `IDependencySet`\r\n- [x] Add Types\r\n   - [x] `MessageIdentifier`\r\n- [x] Add L2 Public Actions\r\n   - [x] `buildSendL2ToL2Message`\r\n   - [x] `buildExecuteL2ToL2Message`\r\n   - [x] `estimateSendL2ToL2MessageGas`\r\n   - [x] `estimateExecuteL2ToL2MessageGas`\r\n   - [x] `getL2ToL2MessageIdentifier`\r\n- [x] Add decorators to extend wallet & public clients\r\n- [x] Add instructions to README for how to use \r\n- [x] Mark package as public and start publishing snapshots to npm\r\n- [x]  Add L2 Wallet actions\r\n   - [x] `sendL2ToL2Message`\r\n   - [x] `executeL2ToL2Message`\r\n- [x] Publish `0.0.1` to npm\r\n\r\n**Wagmi Tasks**\r\n- [x] Setup `@eth-optimism/wagmi`\r\n- [x] Consume `@eth-optimism/viem`\r\n- [x] Add `sendMessage` hook\r\n- [x] Add `executeMessage` hook\r\n- [x] Add `waitForL2ToL2MessageReceipt` hook\r\n- [x] Add instructions to README for how to use \r\n- [x] Mark package as public and start publishing snapshots to npm\r\n- [x] Publish `0.0.1` to npm\r\n\r\n**Reference App Tasks**\r\n- [x] Update tic tac toe game to consume `@eth-optimism/wagmi`\r\n- [x] Update tic tac toe hooks to branch between interop vs non-interop\r\n- [x] Add interop UI to make it easier to follow what you're being prompted for\r\n\r\n\r\n", "CLOSED", 0, "fainashalts", "2024-07-22T22:12:29Z", "2024-09-06T14:45:08Z", "2024-09-06T14:45:08Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6BwfAk", 168, "Host dapp console app under console.optimism.io", "", "CLOSED", 0, "jvmi7", "2024-03-09T00:48:57Z", "2024-09-06T14:45:58Z", "2024-09-06T14:45:58Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6BuUxr", 164, "Add in all links", "https://docs.google.com/document/d/1iJeKa9o3cRnIO0yxxwnDgFaP8nr_hocsBKr6tDlWKD0/edit#heading=h.rfrr48gv10r5", "CLOSED", 0, "tarunkhasnavis", "2024-03-08T16:48:39Z", "2024-09-06T14:45:58Z", "2024-09-06T14:45:58Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6BWtEq", 151, "Add Gitcoin and Coinbase to auth flow", "![Screenshot 2024-03-05 at 2 02 07\u202fPM](https://github.com/ethereum-optimism/ecosystem/assets/7953225/82134182-39cb-4489-8932-a429240168aa)\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T21:58:55Z", "2024-09-06T14:45:58Z", "2024-09-06T14:45:58Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM6BWtBW", 147, "Change claim status and return to claim notification", "![Uploading Screenshot 2024-03-05 at 2.05.12\u202fPM.png\u2026]()\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T21:58:46Z", "2024-09-06T14:45:57Z", "2024-09-06T14:45:57Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5_3olH", 128, "[s] Implement script to pull emails from privy UI", "Use this endpoint with our setup config to write a script we can run to export the users in privy.\r\n\r\nhttps://docs.privy.io/guide/backend/api/users/get-batch", "CLOSED", 0, "jvmi7", "2024-02-20T21:12:46Z", "2024-09-06T14:45:57Z", "2024-09-06T14:45:57Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5_YyZb", 127, "Event Log Indexing Service Spec", "# Event Log Indexing Service\r\n\r\nWe're planning on spinning up a brand new micro service to help us with our smart contract log indexing needs that we can utilize across all of our products, demos, and prototypes.\r\n\r\nWe plan on building this service on top of [Ponder](https://ponder.sh/) this is an open source framework that makes indexing logs extremely easy. It will allow the team to move much faster than we currently are moving when it comes to indexing, and it will also help show the community how they can easily get some indexing setup for their own projects.\r\n\r\n## Architecture\r\n\r\nOne thing to keep in mind as we go through what this will look like is we want this service to be able to scale up to being able to index 100's of contracts at once even though the initial versions of the service will only be indexing a handful of contracts across some OP chains. This means we're going to attempt to structure the code in a way that will allow multiple engineers to build on top of this and commit code without always running into merge conflicts and stepping on each others toes.\r\n\r\nBelow is how we plan to setup the initial directory structure. This example is just for illustration to show what it would look like if we were to index 2 different contracts.\r\n\r\n```\r\n\u251c\u2500\u2500 /abis\r\n\u2502   \u251c\u2500\u2500 optimist.ts\r\n\u2502   \u251c\u2500\u2500 attestationStation.ts\r\n\u251c\u2500\u2500 /generated\r\n\u2502   \u251c\u2500\u2500 schema.graphql\r\n\u251c\u2500\u2500 /src\r\n|   \u251c\u2500\u2500 index.ts\r\n\u2502   \u251c\u2500\u2500 /constants\r\n\u2502       \u251c\u2500\u2500 contracts.ts\r\n\u2502       \u251c\u2500\u2500 networks.ts\r\n\u251c\u2500\u2500 /events\r\n\u2502   \u251c\u2500\u2500 optimist.ts\r\n\u2502   \u251c\u2500\u2500 attestationStation.ts\r\n\u251c\u2500\u2500 ponder-env.d.ts\r\n\u251c\u2500\u2500 ponder.config.ts\r\n\u251c\u2500\u2500 ponder.schema.ts\r\n```\r\n\r\nWe'll talk about some of the directories below to explain whats happening a bit more but won't go over all of them would recommend reading up on how Ponder works: https://ponder.sh/\r\n\r\n### /abis\r\nThis directory is literally what it say it's just going to contain all ABI definitions in typescript. Ponder uses ABIType to allow strict type checking across everything so the definitions just need to conform to what ABIType is expecting.\r\n\r\nEach file under this directory will represent an individual contract and will only contain that contracts ABI and nothing else.\r\n\r\n### /generated\r\nWill just contain our graphql schema, there is nothing that needs to be edited here this file will automatically be generated when running `pnpm codegen` or in our case would be `pnpm nx run @eth-optimism/event-log-indexer:codegen`. This file gets generated based off of the schema defined in `ponder.schema.ts`\r\n\r\n### index.ts\r\nRepresents the main function where we'll be able to register all of our event listeners and create general puprose objects like loggers and error reports, that can be utilized in our event handlers\r\n\r\n### contracts.ts\r\nAt first we'll ship this will just a single file that contains the configuration that ponder needs to understand what contracts need to be indexed, whats the address and starting block. Eventually this will most likely need to be broken out into individual files for each contract but want to avoid that at first until it's needed.\r\n\r\nExample of what it will look like.\r\n```\r\nimport { optimism, optimismSepolia } from 'viem/chains'\r\n\r\nimport { optimistAbi } from '../../abis/optimist'\r\n\r\nexport const optimist = {\r\n  abi: optimistAbi,\r\n  network: {\r\n    [optimism.id]: {\r\n      address: '0x2335022c740d17c2837f9C884Bfe4fFdbf0A95D5',\r\n      filter: { event: 'Transfer' },\r\n      startBlock: 49670714,\r\n    },\r\n    [optimismSepolia.id]: {\r\n      address: '0xF6Ec1682996633B7cde3D8e33a9FD32686E993D3',\r\n      filter: { event: 'Transfer' },\r\n      startBlock: 2708644,\r\n    },\r\n  },\r\n} as const\r\n```\r\n\r\n### networks.ts\r\nThis file will contain all of the configuration needed to for all the networks that will be used in this service\r\n\r\nExample\r\n```\r\nimport { http } from 'viem'\r\nimport { optimism, optimismSepolia } from 'viem/chains'\r\n\r\nexport const networks = {\r\n  [optimism.id]: {\r\n    chainId: optimism.id,\r\n    transport: http(process.env.JSON_RPC_URL_OP_MAINNET),\r\n  },\r\n  [optimismSepolia.id]: {\r\n    chainId: optimismSepolia.id,\r\n    transport: http(process.env.JSON_RPC_URL_OP_SEPOLIA),\r\n  },\r\n}\r\n```\r\n### /events\r\nThis directory will contain individual files for each contract that we are going to index. This is where we have functions that will allow us to register events to be indexed. It will export a register function that will be called in `index.ts`, we're trying to break up how all the events will be registered to avoid having any super long files. We're also breaking out the functions to be pure so it will be easier to write unit tests against them so we don't have to ever worry about mocking anything with ponder.\r\n\r\nExample\r\n```\r\nexport const NULL_ADDRESS = toHex(0, { size: 20 })\r\n\r\nexport async function transfer(\r\n  args: IndexingFunctionArgs<'optimist:Transfer'>,\r\n) {\r\n  const { event, context } = args\r\n\r\n  const { Optimist } = context.db\r\n\r\n  const { chainId } = context.network\r\n  const { hash: transactionHash, blockNumber } = event.transaction\r\n  const { from, to, tokenId } = event.args\r\n\r\n  if (from === NULL_ADDRESS) {\r\n    await Optimist.upsert({\r\n      id: to,\r\n      create: {\r\n        chainId,\r\n        tokenId,\r\n        transactionHash,\r\n        blockNumber,\r\n      },\r\n      update: {},\r\n    })\r\n  } else if (to === NULL_ADDRESS) {\r\n    await Optimist.delete({ id: from })\r\n  }\r\n}\r\n\r\nexport function registerOptimstEvents() {\r\n  ponder.on('optimist:Transfer', transfer)\r\n}\r\n```\r\n## Deployment \r\n\r\nThe initial plan is to deploy this service with k8s that will also hit a Postgres db in GCP. We're going to ship this as a multichain service at first until we have a reason to break the service out by network. The examples above show both OP mainnet & sepolia that we plan on indexing at first. If we ever run into scaling issues we'll break this up to run multiple variants of the service by network\r\n\r\nMultiple chains in a single instance:\r\n<img width=\"411\" alt=\"Screenshot 2024-02-15 at 1 46 11\u202fPM\" src=\"https://github.com/ethereum-optimism/ecosystem/assets/1761993/97df4b0e-96ce-47af-84c2-806fd4387b04\">\r\n\r\nMultiple chains where each instance represents a different network:\r\n<img width=\"414\" alt=\"Screenshot 2024-02-15 at 1 46 57\u202fPM\" src=\"https://github.com/ethereum-optimism/ecosystem/assets/1761993/5c5abac9-f9df-4c68-afd3-74a745821e79\">\r\n\r\nThe initial implementation of this can be found here: https://github.com/ethereum-optimism/ecosystem/pull/123", "CLOSED", 0, "nitaliano", "2024-02-15T18:49:13Z", "2024-09-06T14:45:57Z", "2024-09-06T14:45:57Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-dR8c", 105, "[m] Changes to faucet on gateway", "Update the faucet in gateway to reflect these changes:\r\n\r\nhttps://www.figma.com/file/CGniuSspvj03nBrH0bW8jv/%F0%9F%9A%B0-Superchain-Faucet?type=design&node-id=2086-25834&mode=design&t=0k7IoCAuCdK09CoD-0", "CLOSED", 0, "jvmi7", "2024-02-06T20:24:00Z", "2024-09-06T14:45:56Z", "2024-09-06T14:45:56Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-ctiG", 102, "[xs] Wallet section learn about onchain identity dropdown", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:13Z", "2024-09-06T14:45:56Z", "2024-09-06T14:45:56Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-cthR", 101, "[s] Implement link/unlink wallet with privy", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:11Z", "2024-09-06T14:45:56Z", "2024-09-06T14:45:55Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-ctga", 100, "[s] Implement wallet section", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:09Z", "2024-09-06T14:45:55Z", "2024-09-06T14:45:55Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-ctfa", 99, "[xs] Implement delete account", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:06Z", "2024-09-06T14:45:55Z", "2024-09-06T14:45:55Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-cten", 98, "[s] Implement account section", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:04Z", "2024-09-06T14:45:55Z", "2024-09-06T14:45:55Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-ctd5", 97, "[s] Implement side navigation component", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:02Z", "2024-09-06T14:45:54Z", "2024-09-06T14:45:54Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-ctdH", 96, "[s] Implement settings page nested layout", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:00Z", "2024-09-06T14:45:54Z", "2024-09-06T14:45:54Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKSJyfM5-cgaX", 74, "Dapp Console Frontend Eng Tracking", "# Overview\r\nThis issue will serve as the parent issue for tracking all of the frontend work in the Dapp Console project.\r\n\r\n# Breakdown\r\nThe team has opted to ship the Dapp Console in multiple phases. For now we will be focusing on the first iteration of the project (without the backend), designs for this can be found here: https://www.figma.com/file/8OsKnr7Xp6UZ1zEtiyRQek/Dapp-Console-(ShadCN)?node-id=292%3A43019&mode=dev\r\n\r\n# Frontend eng issues\r\n### MS1: Skeleton app with sign in/sign up flow\r\n- [x] #75\r\n- [x] #76\r\n- [x] #77\r\n- [x] #78\r\n- [x] #80\r\n- [x] #79\r\n- [x] #81\r\n- [x] #82\r\n\r\n### MS2: Console Home UI\r\n- [x] #83\r\n- [x] #84\r\n- [x] #85\r\n- [x] #86\r\n- [x] #87\r\n- [x] #88\r\n- [x] #89\r\n- [x] #90\r\n\r\n### MS3: About offers (modals)\r\n- [x] #91\r\n- [x] #92\r\n- [x] #93\r\n- [x] #94\r\n- [x] #95\r\n- [x] #164\r\n\r\n### MS5: Faucet changes\r\n- [x] #152\r\n- [x] #153\r\n- [x] #150\r\n- [x] #148\r\n- [x] #146\r\n- [x] #157\r\n- [x] #165\r\n- [x] #149\r\n- [x] #173\r\n- [x] #174\r\n\r\n### MS6: Testing & Tracking\r\n- [x] #103\r\n- [x] #104\r\n- [x] #128\r\n- [x] #168\r\n\r\n### Other\r\n- [x] https://github.com/ethereum-optimism/ecopod/issues/867\r\n\r\n## Bug report issues\r\n- [x] https://github.com/ethereum-optimism/ecopod/issues/843", "CLOSED", 0, "jvmi7", "2024-02-06T18:11:01Z", "2024-09-06T14:45:59Z", "2024-09-06T14:45:53Z", "ethereum-optimism/ecosystem", "2025-08-30 07:11:05"]
["I_kwDOKIwiaM558L5O", 324, "[DOCS] Add hildr as a consensus client", "The latest hildr release already tested with OP sepolia canyon upgrade. it could be added on the docs. \r\n\r\nThe release is [here](https://github.com/optimism-java/hildr/releases/tag/v0.2.3) and images is [here](https://github.com/optimism-java/hildr/pkgs/container/hildr).", "CLOSED", 0, "GrapeBaBa", "2023-12-18T06:17:35Z", "2024-01-03T17:59:41Z", "2024-01-03T17:59:41Z", "ethereum-optimism/docs", "2025-08-30 07:16:23"]
["I_kwDOKIwiaM53o5Ue", 199, "[AUDIT] update sdk-view-tx", "for this page: https://docs.optimism.io/builders/tools/javascript/sdk-view-tx\r\n\r\nrename conclusion to `next steps`, and can be moved to the end to wrap up the tutorial.", "CLOSED", 0, "cpengilly", "2023-11-22T22:43:24Z", "2024-01-05T19:50:29Z", "2024-01-05T19:50:29Z", "ethereum-optimism/docs", "2025-08-30 07:16:23"]
["I_kwDOKIwiaM53owyT", 196, "[AUDIT] revise two dapp testing pages", "for these pages: https://docs.optimism.io/builders/dapp-developers/testing and https://docs.optimism.io/chain/testing/testing-dapps\r\n\r\npossible options: \r\n- delete the first one, or just link to that section\r\n- We could probably just merge the first page with the [[overview testing page](https://docs.optimism.io/chain/testing/testing-dapps)](https://docs.optimism.io/chain/testing/testing-dapps) under the testing section  OP MAINNET > Testing > Overview. With\u00a0`testing-dapps`\u00a0at the top of the overview page and\u00a0`testing`\u00a0in a section below\r\n- both pages need work, Neither of them are really about testing in any meaningful way", "CLOSED", 0, "cpengilly", "2023-11-22T22:03:09Z", "2024-01-05T19:55:06Z", "2024-01-05T19:55:06Z", "ethereum-optimism/docs", "2025-08-30 07:16:23"]
["I_kwDOKIwiaM53n2Lc", 193, "[AUDIT] remove mentions of KYC from docs", "style guide: https://docs.optimism.io/connect/contribute/style-guide#abbreviations\r\nhttps://docs.optimism.io/builders/dapp-developers/contracts/meta-tx#onboarding", "CLOSED", 0, "cpengilly", "2023-11-22T18:50:18Z", "2024-01-05T22:41:07Z", "2024-01-05T22:41:07Z", "ethereum-optimism/docs", "2025-08-30 07:16:23"]
["I_kwDOKIwiaM57WkDM", 387, "[DOCS] `Launch Support` Link Broken", "Our team wants to build and rollup based on Op Stack and try to reach out the official support team via `Launch Support`. But, it's doesn't work. Could you please help us? Or any other way to get support from the official team.\r\n\r\n![image](https://github.com/ethereum-optimism/docs/assets/11801722/a69ba36e-a129-4fa8-8e73-019becdde482)\r\n\r\n![image](https://github.com/ethereum-optimism/docs/assets/11801722/f894090a-dc61-48a6-b258-785a652f2be9)\r\n\r\n", "CLOSED", 0, "boundless-forest", "2024-01-08T02:52:08Z", "2024-01-12T16:57:32Z", "2024-01-09T18:48:52Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM57Ra9j", 382, "Guide: managing your op stack chain keys", "# Managing op stack chain private keys\r\n\r\nThis guide should go over best practices on managing your keys for an op stack chain and general information on a HSM + `eth_signTransaction` setup for sending txs.\r\n\r\nReference: https://github.com/ethereum-optimism/optimism/blob/develop/op-service/signer/client.go", "CLOSED", 0, "sbvegan", "2024-01-05T23:09:02Z", "2024-01-11T22:19:08Z", "2024-01-11T22:19:08Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM56nbvy", 357, "[DOCS] Add PR title", "<!-- please fill out the following the best to your ability and properly label the issue -->\n\n## Brief Description of the Docs Request\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\n\n## Description of the Documentation You'd Like\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\n\n## Links to Related Pages\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\n\n## Additional Context\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?", "CLOSED", 0, "Crist523", "2023-12-27T09:52:40Z", "2024-01-09T18:50:12Z", "2024-01-09T18:50:12Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM56QkqA", 347, "[DOCS] add information about the differences between: `safe`, `unsafe`, and `finalized` block tags", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nImprove understanding of the different block tags. \r\n\r\n## Description of the Documentation You'd Like\r\n\r\nI'd like a the differences between `safe`, `unsafe`, and `finalized` block tags included:\r\n\r\nsafe means all of the data to derive a L2 block has been included on L1\r\nsafe blocks only reorg if L1 reorg happens\r\n\r\nunsafe means all of the data to derive a L2 block has been included on L1\r\nunsafe blocks can reorg if the L1 reorgs or there was an issue sequencer\r\n\r\nfinalized means all of the data to derive a L2 block has been finalized on L1\r\nno finalized block can be reorged\r\n\r\n## Links to Related Pages\r\n\r\n- It should probably go somewhere in the OP Stack > Protocol section: https://docs.optimism.io/stack/protocol/overview\r\n\r\n## Additional Context\r\n\r\nI've had different questions that boil down to understanding the difference between these. Things like rollback risks, confirmation delays for indexers, etc.\r\n", "CLOSED", 0, "sbvegan", "2023-12-20T19:44:12Z", "2024-01-10T21:13:13Z", "2024-01-10T21:13:13Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM54-u2i", 267, "[DOCS] Document docs dependencies", "- document all features and dependencies in the new dev docs for long-term maintenance (e.g., linter, link checker, tutorial checker, code rabbit, docs feedback widget, tutorial tracking code, integration testing) \r\n- add to folder in docs repo (folder should not seen/indexed by search engines)", "CLOSED", 0, "cpengilly", "2023-12-07T01:58:06Z", "2024-01-12T19:17:06Z", "2024-01-12T19:17:05Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM53nRav", 187, "[AUDIT] Link node guide to CEX", "Lots of CEXs run nodes, so I would also link to the node operator guide to [this page](https://docs.optimism.io/builders/cex-wallet-developers/cex-support).", "CLOSED", 0, "cpengilly", "2023-11-22T17:14:00Z", "2024-01-10T21:31:48Z", "2024-01-10T21:31:48Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM520_NZ", 148, "[FEEDBACK] remove proxy_ovm references from docs", "OVM references in docs are for legacy contracts, so we need to update and find the replacement contracts/links for:\r\n[Proxy__OVM_L1CrossDomainMessenger.json](https://github.com/ethereum-optimism/optimism/blob/186e46a47647a51a658e699e9ff047d39444c2de/packages/contracts/deployments/goerli/Proxy__OVM_L1CrossDomainMessenger.json#L2)\r\n[Proxy__OVM_L1StandardBridge.json](https://github.com/ethereum-optimism/optimism/blob/186e46a47647a51a658e699e9ff047d39444c2de/packages/contracts/deployments/goerli/Proxy__OVM_L1StandardBridge.json)", "CLOSED", 0, "cpengilly", "2023-11-14T21:27:05Z", "2024-01-10T21:21:12Z", "2024-01-10T21:21:12Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM52i970", 121, "[Chain Operators part]A potential issue that may need to be checked.", "Location: https://docs.optimism.io/chain-operators/create-l2-rollup\r\n1. Quotation:  of the Optimism Superchain \r\nlost link\r\n\r\n2. Quotation: out the Superchain Explainer\r\nlost link\r\n\r\n3. Quotation: and op-nethermind (coming soon).\r\nNeed to check if op-nethermind information needs updating.\r\n\r\n4. Quotation: We recommend funding the accounts with the following amounts when using Sepolia:\r\n\r\nAdmin \u2014 0.2 ETH\r\nProposer \u2014 0.2 ETH\r\nBatcher \u2014 0.1 ETH\r\n\r\nValidation is needed, especially for the admin's recommended balance\r\n\r\n\r\nLocation: https://docs.optimism.io/chain-operators/configuration\r\n1. Quotation: this is the configuration file for the tutorial blockchain.\r\nDescription is outdated, currently using a script to generate the corresponding JSON files.\r\n\r\n\r\nLocation: https://docs.optimism.io/chain-operators/operations\r\n1. Quotation: tip Synchronization takes time\r\nStyles not applied\r\n\r\n\r\n2. Quotation: peer to peer synchronization\r\nlost link\r\n\r\nLocation: https://docs.optimism.io/chain-operators/explorer\r\n1. Quotation: edit docker-compose-no-build-geth.yml to set ETHEREUM_JSONRPC_HTTP_URL to the correct URL.\r\nBlockscout version update may have resulted in this information being outdated\r\n\r\nLocation: https://docs.optimism.io/chain-operators/sdk\r\n\r\nLib_AddressManager.json\r\nName outdated\r\n\r\nProxy__OVM_L1CrossDomainMessenger.json\r\nName outdated\r\n\r\nProxy__OVM_L1StandardBridge.json\r\nName outdated\r\n\r\n   AddressManager: \"0x....\",   // Lib_AddressManager.json\r\n   L1CrossDomainMessenger: \"0x....\",   // Proxy__OVM_L1CrossDomainMessenger.json  \r\n   L1StandardBridge: \"0x....\",   // Proxy__OVM_L1StandardBridge.json\r\nName outdated\r\n\r\n\r\nLocation: https://docs.optimism.io/chain-operators/hacks/derivation\r\n1. Quotation: Tutorial: Adding attributes to the derivation function.\r\nlost link\r\n\r\nLocation: https://docs.optimism.io/chain-operators/hacks/execution\r\n1. Quotation: Tutorial: Adding a precompile.\r\nlost link\r\n\r\nLocation: https://docs.optimism.io/chain-operators/sample-hacks/adding-derivation-attributes\r\n1. Quotation: Insert the burn transactions\r\nThis section's references are outdated compared to the latest source code updates\r\n\r\n\r\nLocation: https://docs.optimism.io/chain-operators/sample-hacks/adding-precompiles\r\n1. Quotation: op-geth/core/vm/contracts.go.\r\nShould we reference the default branch?\r\n\r\nLocation: https://docs.optimism.io/chain-operators/sample-hacks/modifying-predeploys\r\n1. Quotation: predeployed contracts\r\nInconsistent references(link)\r\n\r\n2. Quotation: ProxyAdmin\r\nShould we reference the default branch\r\n\r\n3. Quotation: upgrade(address,address)\r\nShould we reference the default branch\r\n\r\n\r\nLocation: https://docs.optimism.io/chain-operators/chain-troubleshooting\r\n.envrc.example\r\nChanges in location within the default branch.", "CLOSED", 0, "opfocus", "2023-11-11T10:16:18Z", "2024-01-12T18:28:32Z", "2024-01-12T18:28:32Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM511Xl6", 95, "Feedback for \u201cForcing Withdrawal from an OP Stack Blockchain\u201d", "community feedback: \r\n\r\nfor the callout below, it'd be nice to know Which function can they look to for the crossChainMessenger fee? Would be good to mention how to call/assess or approximate here. \r\n<img width=\"944\" alt=\"callout-needs-info\" src=\"https://github.com/ethereum-optimism/docs/assets/29023967/56a18957-6c94-48f5-9988-dd01902c1fa0\">\r\n", "CLOSED", 0, "cpengilly", "2023-11-03T21:00:02Z", "2024-01-10T21:22:56Z", "2024-01-10T21:22:56Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5085nV", 86, "[TUTORIAL] run op stack on a private L1 network", "when running a private L1 network,  the CREATE2 factory contract is not already deployed.\n\nThe steps that they would need to take:\n\u2022 spin up private L1 network\n\u2022 fund the create2 deployer account and deploy the create2 deployer\n    \u25e6 These two commands can be found on the <https://github.com/ethereum-optimism/optimism/blob/536b44b0c6b5317c6a5dba9bad85ebdd069cbac8/bedrock-devnet/devnet/__init__.py#L123-L133|devnet init script>\n\u2022 deploy the  L1 contracts (they will use the create2 deployer)\n\u2022 deploy the OP Stack\n", "CLOSED", 0, "cpengilly", "2023-10-25T19:51:35Z", "2024-01-09T19:40:52Z", "2024-01-09T19:40:52Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5zYNtv", 70, "[FEEDBACK] Update op-stack getting started", "In this section https://stack.optimism.io/docs/build/getting-started/#deploy-the-l1-contracts, after you broadcast the L1 contracts the folder that gets updated is deployments/goerli and the folder you make deployments/getting-started remains empty. The follow command to generate the genesis and rollup files assumed deployments/getting-started is populated but it's empty and errors. I have been copying the goerli folder to getting-started to be consistent with the command\nStep 4 in https://stack.optimism.io/docs/build/getting-started/#configure-your-network asks you to put your PRIVATE_KEY in the .envrc but doesn't specify using the raw privkey and not the hex prepended 0x... key\nI don't think there's a section on which address/steps on how to bridge back out (understand this takes a while to actually execute, but unless I missed it I don't think the info is there)\nSmall note when you're configuring your files to change the batcher inbox address to something arbitrary would be helpful to users\nProposed ETH amounts for Admin \u2014 2 ETH Proposer \u2014 5 ETH Batcher \u2014 10 ETH is probably a bit high, Goerli is super cheap \ud83d\ude42\nPin the optimism and geth tags/versions here https://stack.optimism.io/docs/build/getting-started/#build-the-optimism-monorepo - trying this guide from a latest tag has many config values missing or missing steps, I am using v1.1.4 and it seems fine\nThe RPC port by default is 8545, a note on which piece of the software has the flag to change this and a note about ssl setup with it would help", "CLOSED", 0, "cpengilly", "2023-10-10T16:13:11Z", "2024-01-10T21:00:30Z", "2024-01-10T21:00:30Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5zEp5t", 69, "[DOCS] Revise transaction fees/gas estimate page", "problem: [Trouble with gas estimate on OP Chains](https://github.com/ethereum-optimism/developer-support/discussions/196) (5). Developers often time have trouble estimating the cost of gas fees on OP Chains. This has been improved with the developer experience pod\u2019s [fee-estimation](https://github.com/ethereum-optimism/optimism/tree/develop/packages/fee-estimation) library. However, there is still general developer confusion on how L2 gas fees work.\r\n\r\nSolution: The confusion is around putting it all together. EIP1559 on L1 and L2, is something folks are still wrapping their head around. we should rewrite [the transaction fees page](https://docs.optimism.io/stack/transaction-fees/overview) and split it into \r\n- [x] overview: give context on how estimation and send are 2 separate problems, and overall context on how to read this page. how to estimate fees easily: best practice for devs is to let the wallet set it. Likely @eth-optimism/fee-estimation until op-viem ships is the best way\r\n- [x] frontend estimation use: You can use the sdk, [fee-estimation](https://github.com/ethereum-optimism/optimism/tree/develop/packages/fee-estimation), or follow the explanation on this page, especially in the \u201cdisplaying fees to users\u201d section\r\n- [x] backend sending use (the core of the confusion from that issue): This is exactly like ethereum, just need the L2 execution fee section and the \u201csending transactions section\u201d\r\n- [x] faq section (see below)\r\n", "CLOSED", 0, "cpengilly", "2023-10-06T16:42:36Z", "2024-01-12T16:58:14Z", "2024-01-10T21:02:14Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5xtVW_", 33, "Automatic Error Message Surfacing", "## Background\nA key finding of [Superhack UXR](https://docs.google.com/presentation/d/1gY-EZ1oXigTfiGXion4J8sUnVvbcwpyOTG2QWliOouY/edit#slide=id.g240a299e8da_0_6) was that developers found live support timely, but first would look for self service options to unblock themselves.\n\nRather than reaching out to live support, most developers tried to run down their errors by: \n\n1.  Copying the error code\n2. Going to Optimism GitHub repo\n3. Pasting the error code into the issue\n4. Looking at filtered issues for a solution \n\n## Proposal\nThis proposal is for finding an automation or pattern that makes documenting, updating, and finding error messages easier. \n\nContext from @roninjin10 :\n\n> It's hard. One of those things you need to think about up front and commit to to make wwork. Viem has a really good pattern https://viem.sh/docs/glossary/errors.html\n\n## Benefits\n\n- Process ensures more timely updates to error docs.\n- Error message can appear in site searches, GitHub searches, and search engine results.\n- Automation or pattern will help with updating to make it a lighter-weight process.\n- Incorporating other standards from tools teams will help users familiar with those tools use our docs.\n", "CLOSED", 0, "OPMattie", "2023-08-31T17:19:38Z", "2024-01-09T18:54:33Z", "2024-01-09T18:54:33Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5xtVuV", 37, "[DOCS] add instructions on how to bridge ERC20s/ETH with multisig wallets", "**Is your doc request related to a problem or existing docs? Please describe.**\r\n\r\nOne of our users lost their ERC20s by directly sending them to a bridge implementation contract.\r\n\r\n**Describe the documentation you'd like**\r\n\r\nCreate new user documentation around bridging tokens and ether with multisig (Safe) wallets.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "CLOSED", 0, "sbvegan", "2023-08-18T00:09:29Z", "2024-01-12T19:04:15Z", "2024-01-12T19:03:58Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5xtWm3", 44, "[FEEDBACK] Covalent indexing and querying API", "Covalent's asking to have a docs page added. We told them we've paused doing this but will consider their page if we add ecosystem guides back in to the redesign.\n\nRequest from Slack:\n> Hope all's been well and congrats on all the new exciting developments on the OP stack recently!\n> I\u2019m reaching out to see if we could add a Covalent reference page to your docs site which contains relevant info on our developer tools and support for the Optimism ecosystem.\n> I have attached the docs page we tailored for Optimism in Markdown Code below. Please let me know what'd be the best way to collaborate on this!\n\n\n\n```\n# Covalent Indexing and Querying API\n[Covalent](https://www.covalenthq.com/?utm_source=optimism&utm_medium=partner-docs) is a hosted blockchain data solution providing access to historical and current on-chain data for [100+ supported blockchains](https://www.covalenthq.com/docs/networks/?utm_source=optimism&utm_medium=partner-docs), including [Optimism](https://www.covalenthq.com/docs/networks/optimism/?utm_source=optimism&utm_medium=partner-docs).\n\u200b\nCovalent maintains a full archival copy of every supported blockchain, meaning every balance, transaction, log event, and NFT asset data is available from the genesis block. This data is available via:\n\u200b\n1. [Unified API](#unified-api) - Incorporate blockchain data into your app with a familiar REST API\n2. [Increment](#increment) - Create and embed custom charts with no-code analytics\n\u200b\n**Use Covalent if you need:**\n* Structured and enhanced on-chain data well beyond what you get from RPC providers\n* Broad and deep multi-chain data at scale\n* Enterprise-grade performance\n\u200b\n> **[Sign up to start building on Optimism](https://www.covalenthq.com/platform/?utm_source=optimism&utm_medium=partner-docs)**\n\u200b\n&nbsp;\n## Unified API\n\u200b\n[![example-api-response-json](https://www.datocms-assets.com/86369/1686182768-example-api-response-json-optimism.png)](https://www.covalenthq.com/docs/api/balances/get-token-balances-for-address/?utm_source=optimism&utm_medium=partner-docs)\n\u200b\nThe Covalent API is RESTful and offers the following for blockchain:\n\u200b\n| **Features**| |\n|---|---|\n| Response Formats | JSON, CSV |\n| Real-Time Data Latency | 2 blocks |\n| Batch Data Latency | 30 minutes |\n| Supported Networks (`chainName`, `chainId`) | Mainnet: `optimism-mainnet`, `10` <br> Testnet: `optimism-goerli`, `420`  |\n| API Tiers | [Free tier](https://www.covalenthq.com/docs/unified-api/pricing/?utm_source=optimism&utm_medium=partner-docs#free-tier) <br> [Premium tier](https://www.covalenthq.com/docs/unified-api/pricing/?utm_source=optimism&utm_medium=partner-docs#premium-tier) |\n| API Categories | [Balances](https://www.covalenthq.com/docs/api/balances/get-token-balances-for-address/?utm_source=optimism&utm_medium=partner-docs) <br> [NFTs](https://www.covalenthq.com/docs/api/nft/get-nfts-for-address/?utm_source=optimism&utm_medium=partner-docs) <br> [Transactions](https://www.covalenthq.com/docs/api/transactions/get-transactions-for-address/?utm_source=optimism&utm_medium=partner-docs) <br> [Security](https://www.covalenthq.com/docs/api/security/get-token-approvals-for-address/?utm_source=optimism&utm_medium=partner-docs) <br> [Log Events & Others](https://www.covalenthq.com/docs/api/base/get-log-events-by-contract-address/?utm_source=optimism&utm_medium=partner-docs)\n\u200b\n### Get started\n- [API Key](https://www.covalenthq.com/platform/?utm_source=optimism&utm_medium=partner-docs) - sign up for free\n- [Quickstart](https://www.covalenthq.com/docs/unified-api/quickstart/?utm_source=optimism&utm_medium=partner-docs) - summary of key resources to get you building immediately on blockchain\n- [API Reference](https://www.covalenthq.com/docs/api/?utm_source=optimism&utm_medium=partner-docs) - try all the endpoints directly from your browser\n- [Guides](https://www.covalenthq.com/docs/unified-api/guides/?utm_source=optimism&utm_medium=partner-docs) - learn how to build dapps, fetch data and extend your Web3 knowledge\n\u200b\n## Increment\n\u200b\n[![example-increment-chart](https://www.datocms-assets.com/86369/1684974544-increment-example-partner-docs.png)](https://www.covalenthq.com/platform/increment/#/?utm_source=optimism&utm_medium=partner-docs)\n\u200b\nIncrement is a novel no-code charting and reporting tool powered by Covalent, revolutionizing how the Web3 space approaches analytics. Many analytics tools let you write SQL to create charts, but *Increment is the only one to encode business logic - Reach, Retention, and Revenue - into an SQL compiler that can write valid SQL for you.*\n\u200b\n### Use cases\nIncrement can be used for:\n\u200b\n- [Analyzing Blockchain Networks](https://www.covalenthq.com/docs/increment/data-models/chain-gdp/?utm_source=optimism&utm_medium=partner-docs)\n- [Analyzing DEXs](https://www.covalenthq.com/docs/increment/data-models/swap-land/?utm_source=optimism&utm_medium=partner-docs)\n- [Analyzing NFT Marketplaces](https://www.covalenthq.com/docs/increment/data-models/jpeg-analysis/?utm_source=optimism&utm_medium=partner-docs)\n\u200b\nFor example, click on the following table to get the latest number of active wallets, transactions and tokens by day, week, month or year for Optimism:\n[![example-network-status-increment](https://www.datocms-assets.com/86369/1686100924-example_network_status_increment_general.png)](https://www.covalenthq.com/docs/networks/optimism/?utm_source=optimism&utm_medium=partner-docs#network-status)\n\n### Get started\n\u200b\n- [Increment](https://www.covalenthq.com/platform/increment/#/?utm_source=optimism&utm_medium=partner-docs) - login via the Covalent Platform\n- [Docs](https://www.covalenthq.com/docs/increment/?utm_source=optimism&utm_medium=partner-docs) - learn how to use Increment to build dynamic, custom charts\n- [Data Models Demo](https://www.covalenthq.com/docs/increment/data-models/model-intro/?utm_source=optimism&utm_medium=partner-docs) - build analytics in 3 clicks\n- [Explore Models. Seek Alpha.](https://www.covalenthq.com/platform/increment/#/pages/covalent/chain-gdp/?utm_source=optimism&utm_medium=partner-docs) - browse all data models\n- [Use Models. Become Alpha.](https://www.covalenthq.com/platform/increment/#/sql/query_b6c88fd8604f49d5920ca86fa7/?utm_source=optimism&utm_medium=partner-docs) - use a data model\n- \n```", "CLOSED", 0, "OPMattie", "2023-08-10T22:54:59Z", "2024-01-12T19:13:03Z", "2024-01-12T19:13:02Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5xtWru", 45, "[DOCS] Bridging tokens from L1 to PGN", "**Is your doc request related to a problem or existing docs? Please describe.**\r\nVia PGN:\r\n- Bridging tokens from L1 to PGN is currently under-documented, and there isn't clarity on how to best verify that token contracts will be correctly recognized on withdraw back to ETH mainnet\r\n- Base DevRel also confirmed there is user confusion for what being on the superchain token list means, since it does not necessarily mean it ends up on the Base bridge.\r\n- There is an opportunity to position the token list as a tool that can be built on for projects.\r\n\r\n**Describe the documentation you'd like**\r\n- In OP Stack docs, create new page that helps with the \"L1 to PGN\" use case above. Target audience is chain operators. Should be generalized to any OP Chain, not just PGN.\r\n- Create a page or section detailing Superchain Token List, how to get on it, and what can be built with it.\r\n\r\n\r\n", "CLOSED", 0, "OPMattie", "2023-07-31T21:28:10Z", "2024-01-12T19:00:11Z", "2024-01-12T19:00:11Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOKIwiaM5xtWw3", 46, "[DOCS] Update Docker Setup", "**Is your doc request related to a problem or existing docs? Please describe.**\r\n\r\n`simple-optimism-node` will not be maintained by OPLabs so we should include a docker setup guide in our docs.\r\n\r\n**Describe the documentation you'd like**\r\n\r\nTake the configs from https://github.com/ethereum-optimism/developer-support/issues/64 and create a docker node setup guide. It should include: mainnet/testnet & full/archive details.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "CLOSED", 0, "sbvegan", "2023-07-29T00:28:42Z", "2024-01-10T14:50:08Z", "2024-01-09T19:11:33Z", "ethereum-optimism/docs", "2025-08-30 07:16:31"]
["I_kwDOI7W0xc58DVbi", 324, "Optimism IDS System", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the solution you'd like:**\r\nI propose implementing an Intrusion Detection System (IDS) within the Optimism Blockchain ecosystem. This IDS would actively monitor and analyze network activities, identifying and alerting the community to potential security threats or anomalies. A system designed to enhance the overall security posture of the Optimism Collective.\r\n\r\n**Describe alternatives you've considered:**\r\nI've considered alternative approaches, such as relying solely on external third-party security tools. However, having an in-house Intrusion Detection System tailored to the specific needs and nuances of the Optimism Blockchain would provide a more customized and integrated security solution. Otherwise I\u2019d suggest integrating tools and building out a testing framework. A portion of funding to analyze wallet attacks. Then utilize the information for the collective. To focus on tools and resources needed to optimize.\r\n\r\n**Additional context:**\r\nGiven the complexity and evolving nature of blockchain security, having an internal IDS offers the advantage of real-time threat detection and response. It aligns with the Optimism Collective's commitment to security and community well-being. Integrating this system would contribute to a safer and more resilient blockchain environment for all participants. Blockchain is always evolving, but if this goes with a project I would like to help, or contribute.", "CLOSED", 0, "philliprossii", "2024-01-15T04:54:26Z", "2024-01-19T13:58:55Z", "2024-01-19T13:58:54Z", "ethereum-optimism/op-analytics", "2025-08-30 07:16:43"]
["I_kwDOI7W0xc58DThB", 323, "Optimism Mission IDS", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the solution you'd like:**\r\nI propose implementing an Intrusion Detection System (IDS) within the Optimism Blockchain ecosystem. This IDS would actively monitor and analyze network activities, identifying and alerting the community to potential security threats or anomalies. The system should be designed to enhance the overall security posture of the Optimism Collective.\r\n\r\n**Describe alternatives you've considered:**\r\nI've considered alternative approaches, such as relying solely on external third-party security tools. However, having an in-house Intrusion Detection System tailored to the specific needs and nuances of the Optimism Blockchain would provide a more customized and integrated security solution.\r\n\r\n**Additional context:**\r\nGiven the complexity and evolving nature of blockchain security, having an internal IDS offers the advantage of real-time threat detection and response. It aligns with the Optimism Collective's commitment to security and community well-being. Integrating this system would contribute to a safer and more resilient blockchain environment for all participants. Blockchain is always evolving, but if this goes with a project I would like to help, or contribute.", "CLOSED", 0, "philliprossii", "2024-01-15T04:44:59Z", "2024-01-19T13:58:42Z", "2024-01-19T13:58:41Z", "ethereum-optimism/op-analytics", "2025-08-30 07:16:43"]
["I_kwDOH2Qg5s57Mb8U", 213, "Crash deploying new mainnet node without --syncmode=full", "#### System information\r\n\r\nGeth version: Geth/v0.1.0-unstable-c6b416da/linux-amd64/go1.20.12\r\nCL client & version: any\r\nOS & Version: Linux\r\nCommit hash : c6b416da\r\n\r\n#### Expected behaviour\r\nStarting op-geth from the provided Bedrock snapshot doesn't crash when syncmode is default (= snap). You can't sync via snap until after you run `syncmode=full` for a little bit first because of this bug.\r\n\r\n#### Actual behaviour\r\nop-geth crashes near the beginning after launching without `syncmode=full`:\r\n```\r\nINFO [01-04|05:13:45.380] Loaded most recent local block           number=105,235,063 hash=dbf6a8..c2afd3 td=0 age=6mo3w1d\r\nINFO [01-04|05:13:45.380] Loaded most recent local finalized block number=105,235,063 hash=dbf6a8..c2afd3 td=0 age=6mo3w1d\r\nINFO [01-04|05:13:45.715] Initialising Ethereum protocol           network=10         dbversion=8\r\nINFO [01-04|05:13:45.715] Initialized transaction indexer          limit=2,350,000\r\nINFO [01-04|05:13:45.715] Regenerated local transaction journal    transactions=0 accounts=0\r\nINFO [01-04|05:13:45.718] Enabled snap sync                        head=105,235,063 hash=dbf6a8..c2afd3\r\nINFO [01-04|05:13:45.719] Chain post-merge, sync via beacon client \r\nINFO [01-04|05:13:45.719] Gasprice oracle is ignoring threshold set threshold=2\r\nWARN [01-04|05:13:45.721] Engine API enabled                       protocol=eth\r\nINFO [01-04|05:13:45.721] Starting peer-to-peer node               instance=Geth/v0.1.0-unstable-c6b416da/linux-amd64/go1.20.12\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,360 error=EOF\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,369 error=EOF\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,358 error=EOF\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,357 error=EOF\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,350 error=EOF\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,339 error=EOF\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,349 error=EOF\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,359 error=EOF\r\n...\r\nWARN [01-04|05:13:47.383] Failed to decode block body              block=105,234,368 error=EOF\r\nCRIT [01-04|05:13:47.383] Failed writing batch to db               error=\"leveldb: closed\"\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\nTry following the mainnet OP node setup tutorial, but omit `--syncmode=full` (enabling snap).\r\n\r\n#### Backtrace\r\nNone\r\n\r\n#### Note\r\nIf this can't easily be fixed, please at least update the documentation/tutorial so others know about this.", "OPEN", 0, "heartache4", "2024-01-05T07:21:48Z", "2024-01-05T07:21:48Z", null, "ethereum-optimism/op-geth", "2025-08-30 07:16:53"]
["I_kwDOH2Qg5s57C3Kf", 209, "--rpc.txfeecap=0 isn't being honored, returning tx fee exceeds the configured cap", "#### System information\r\n\r\nGeth version: `Geth/v1.101304.2-stable-c6b416da/linux-amd64/go1.20.10`\r\nOS & Version: OSX\r\n\r\n**Describe the bug**\r\nWe are getting an error on our nodes that says: \r\n`\"message\":\"tx fee (1.63 ether) exceeds the configured cap (1.00 ether)`\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nHere is an example of a transaction that is 1.63 ETH that is getting denied and we cant figure out why the txfeecap isn't being overridden: \r\n\r\n```\r\n\u279c  ~ curl -X POST \"ADD_ANY_URL\"      \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\"jsonrpc\":\"2.0\",\"id\":61092,\"method\":\"eth_sendRawTransaction\",\"params\":[\"0xf8e7821d1f86018ecb5d3235830e909e941c8a8e0991a18852951cbc18fb19d1f44dcc403d80b87e06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe137a03e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0aa00c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05\"]}'\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":61092,\"error\":{\"code\":-32000,\"message\":\"tx fee (1.63 ether) exceeds the configured cap (1.00 ether)\"}}\r\n```\r\n\r\nI have [decoded the transaction](https://www.ethereumdecoder.com/?search=0xf8e7821d1f86018ecb5d3235830e909e941c8a8e0991a18852951cbc18fb19d1f44dcc403d80b87e06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe137a03e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0aa00c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05), and here is what it is returning: \r\n\r\n```\r\n{\"nonce\":7455,\"gasPrice\":{\"_hex\":\"0x018ecb5d3235\"},\"gasLimit\":{\"_hex\":\"0x0e909e\"},\"to\":\"0x1c8a8e0991a18852951cbc18fb19d1f44dcc403d\",\"value\":{\"_hex\":\"0x0\"},\"data\":\"0x06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe1\",\"v\":55,\"r\":\"0x3e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0a\",\"s\":\"0x0c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05\"}\r\n```\r\n\r\n```\r\n\u276f hexdec 0x0e909e\r\n954526\r\n\u276f hexdec 0x018ecb5d3235\r\n1712808866357\r\nMultiply those numbers together and you get:\r\n1.634920595968282e18\r\n```\r\n\r\nI also have tested public URLs and they all return the same: \r\n\r\n```\r\ncurl -X POST \"https://optimism.publicnode.com\"      \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\"jsonrpc\":\"2.0\",\"id\":61092,\"method\":\"eth_sendRawTransaction\",\"params\":[\"0xf8e7821d1f86018ecb5d3235830e909e941c8a8e0991a18852951cbc18fb19d1f44dcc403d80b87e06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe137a03e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0aa00c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05\"]}'\r\n     \r\n   {\"jsonrpc\":\"2.0\",\"id\":61092,\"error\":{\"code\":-32000,\"message\":\"tx fee (1.63 ether) exceeds the configured cap (1.00 ether)\"}}\r\n```\r\n\r\n**System Specs:**\r\n\r\nAnd here is the following config file (some unnecessary things have been redacted):\r\n\r\n\r\n```\r\n[Service]\r\nUser            = optimism\r\nExecStart   = /usr/local/bin/geth \\\r\n                    --ws \\\r\n                    --ws.port=8546 \\\r\n                    --ws.addr=0.0.0.0 \\\r\n                    --ws.origins=\"*\" \\\r\n                    --http \\\r\n                    --http.port=8545 \\\r\n                    --http.addr=0.0.0.0 \\\r\n                    --http.vhosts=\"*\" \\\r\n                    --http.corsdomain=\"*\" \\\r\n                    --authrpc.addr=0.0.0.0 \\\r\n                    --authrpc.port=8551 \\\r\n                    --datadir=/home/optimism \\\r\n                    --verbosity=3 \\\r\n                    --rollup.disabletxpoolgossip=true \\\r\n                    --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io \\\r\n                    --rollup.historicalrpc=http://opti-l2geth-mainnet.<URL>:8525 \\\r\n                    --rollup.historicalrpctimeout=300s \\\r\n                    --nodiscover \\\r\n                    --networkid=10 \\\r\n                    --op-network=op-mainnet \\\r\n                    --syncmode=full \\\r\n                    --snapshot=false \\\r\n                    --maxpeers=0 \\\r\n                    --txlookuplimit=0 \\\r\n                    --rpc.txfeecap=0 \\\r\n                    --gcmode=full \\\r\n                    --rollup.halt=major\r\nRestart         = on-failure \r\n```\r\n\r\n**Additional context**\r\nWe cant seem to find anywhere in the source code that seems this would be honored. Is it possible the sequencer is rejecting it?\r\n", "OPEN", 0, "yaanakbr", "2024-01-03T16:52:00Z", "2024-01-05T21:09:33Z", null, "ethereum-optimism/op-geth", "2025-08-30 07:16:53"]
["I_kwDOH2Qg5s56dbEp", 207, "failed to init L2: failed to get L2 chain ID", "When I run the following command: \r\n op-node\r\n          --l1=http://localhost:8545/\r\n          --l1.rpckind=erigon\r\n          --l2=http://localhost:8561 \r\n          --l2.jwt-secret=/shared/jwt.txt \r\n          --network=op-mainnet\r\n          --rpc.addr=0.0.0.0 \r\n          --rpc.port=8559\r\n\r\nI get the following error message in the logs: \r\nop-node  | t=2023-12-22T21:44:18+0000 lvl=info msg=\"Not opted in to ProtocolVersions signal loading, disabling ProtocolVersions contract now.\"\r\nop-node  | t=2023-12-22T21:44:18+0000 lvl=info msg=\"Rollup Config\" l2_chain_id=10 l2_network=OP-Mainnet l1_chain_id=1 l1_network=mainnet l2_start_time=1,686,068,903 l2_block_hash=0xdbf6a80fef073de06add9b0d14026d6e5a86c85f6d102c36d3d8e9cf89c2afd3 l2_block_number=105,235,063 l1_block_hash=0x438335a20d98863a4c0c97999eb2481921ccd28553eac6f913af7c12aec04108 l1_block_number=17,422,590 regolith_time=\"@ genesis\" canyon_time=\"@ 1704992401 ~ Thu Jan 11 17:00:01 UTC 2024\" delta_time=\"(not configured)\" eclipse_time=\"(not configured)\" fjord_time=\"(not configured)\" interop_time=\"(not configured)\"\r\nop-node  | t=2023-12-22T21:44:18+0000 lvl=info msg=\"Initializing rollup node\" version=v0.0.0-54a7dbf8-1702417143\r\nop-node  | t=2023-12-22T21:44:18+0000 lvl=eror msg=\"Error initializing the rollup node\" err=\"failed to init L2: failed to get L2 chain ID: 401 Unauthorized: signature is invalid\\n\"\r\nop-node  | t=2023-12-22T21:44:18+0000 lvl=crit msg=\"Application failed\"                 message=\"failed to setup: unable to create the rollup node: failed to init L2: failed to get L2 chain ID: 401 Unauthorized: signature is invalid\\n\"\r\n\r\nCould someone help me to find the reason. ", "OPEN", 0, "liobah", "2023-12-22T21:52:48Z", "2024-01-05T01:15:37Z", null, "ethereum-optimism/op-geth", "2025-08-30 07:16:53"]
["I_kwDOH2Qg5s52qCIH", 184, "op-geth is consistently 12 hours behind", "#### System information\r\n\r\nGeth version: geth version 1.101304.1-stable-ed8e9f54\r\nCL client & version: op-node version v0.0.0-c4ebe7fb-1699871168\r\nOS & Version: Linux AlmaLinux9.2\r\n\r\n#### Expected behaviour\r\nSynchronize to the latest block\r\n\r\n#### Actual behaviour\r\nAlways 12 hours behind.\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\n/root/op-geth/build/bin/geth \\\r\n  --port=10303 \\\r\n  --http.api=admin,debug,web3,eth,txpool,personal,miner,net \\\r\n  --http \\\r\n  --http.port=38545 \\\r\n  --http.addr=0.0.0.0 \\\r\n  --http.vhosts=\"*\" \\\r\n  --http.corsdomain=\"*\" \\\r\n  --authrpc.addr=localhost \\\r\n  --authrpc.jwtsecret=/root/op-geth/jwt.txt \\\r\n  --authrpc.port=38551 \\\r\n  --authrpc.vhosts=\"*\" \\\r\n  --verbosity=3 \\\r\n  --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io/ \\\r\n  --nodiscover \\\r\n  --syncmode=full \\\r\n  --maxpeers=0 \\\r\n  --txlookuplimit=0 \\\r\n  --datadir=/mnt/backup2/optimism\r\n\r\n#### Backtrace\r\n\r\n````\r\n11|op-geth | INFO [11-13|21:54:40.196] Chain head was updated                   number=112,120,664 hash=488815..380053 root=ba5383..a35919 elapsed=\"39.459\u00b5s\"  age=12h6m15s\r\n11|op-geth | INFO [11-13|21:54:40.210] Starting work on payload                 id=0x5a36fd26ae67d0cb\r\n11|op-geth | INFO [11-13|21:54:40.211] Imported new potential chain segment     number=112,120,665 hash=e58af5..007de2 blocks=1 txs=1 mgas=0.047 elapsed=\"265.858\u00b5s\" mgasps=176.414 age=12h6m13s  snapdiffs=149.93KiB triedirty=977.59KiB\r\n11|op-geth | INFO [11-13|21:54:40.211] Chain head was updated                   number=112,120,665 hash=e58af5..007de2 root=699ed1..8231e5 elapsed=\"27.46\u00b5s\"   age=12h6m13s\r\n11|op-geth | INFO [11-13|21:54:40.226] Starting work on payload                 id=0x00f28d62c83fe28b\r\n11|op-geth | INFO [11-13|21:54:40.228] Imported new potential chain segment     number=112,120,666 hash=712fcc..52f975 blocks=1 txs=1 mgas=0.047 elapsed=\"407.356\u00b5s\" mgasps=115.135 age=12h6m11s  snapdiffs=150.10KiB triedirty=977.59KiB\r\n11|op-geth | INFO [11-13|21:54:40.229] Chain head was updated                   number=112,120,666 hash=712fcc..52f975 root=3d8abf..ca606f elapsed=\"37.61\u00b5s\"   age=12h6m11s\r\n11|op-geth | INFO [11-13|21:54:40.245] Starting work on payload                 id=0x7a160e34ed8d4a64\r\n11|op-geth | INFO [11-13|21:54:40.247] Imported new potential chain segment     number=112,120,667 hash=39035f..da09c3 blocks=1 txs=1 mgas=0.047 elapsed=\"312.306\u00b5s\" mgasps=150.176 age=12h6m9s   snapdiffs=150.27KiB triedirty=977.59KiB\r\n11|op-geth | INFO [11-13|21:54:40.247] Chain head was updated                   number=112,120,667 hash=39035f..da09c3 root=81d5b6..710bff elapsed=\"25.11\u00b5s\"   age=12h6m9s\r\n11|op-geth | INFO [11-13|21:54:40.277] Starting work on payload                 id=0x03ed0c6092bab20e\r\n11|op-geth | INFO [11-13|21:54:40.280] Imported new potential chain segment     number=112,120,668 hash=779330..3d4f24 blocks=1 txs=1 mgas=0.047 elapsed=\"417.736\u00b5s\" mgasps=112.274 age=12h6m7s   snapdiffs=150.44KiB triedirty=977.59KiB\r\n11|op-geth | INFO [11-13|21:54:40.280] Chain head was updated                   number=112,120,668 hash=779330..3d4f24 root=37302d..414667 elapsed=\"53.759\u00b5s\"  age=12h6m7s\r\n\r\n11|op-geth  | INFO [11-13|21:54:52.139] Starting work on payload                 id=0x05b3b397be5bb129\r\n11|op-geth  | INFO [11-13|21:54:52.142] Imported new potential chain segment     number=112,120,669 hash=64a77c..03d91f blocks=1 txs=2 mgas=0.117 elapsed=\"534.614\u00b5s\" mgasps=219.560 age=12h6m17s  snapdiffs=150.94KiB triedirty=986.67KiB\r\n11|op-geth  | INFO [11-13|21:54:52.142] Chain head was updated                   number=112,120,669 hash=64a77c..03d91f root=7107ff..32c38f elapsed=\"44.139\u00b5s\"  age=12h6m17s\r\n11|op-geth  | INFO [11-13|21:54:52.163] Starting work on payload                 id=0x8e1ba46438f27c66\r\n11|op-geth  | INFO [11-13|21:54:52.164] Imported new potential chain segment     number=112,120,670 hash=f99dfa..c7e2f1 blocks=1 txs=1 mgas=0.064 elapsed=\"326.427\u00b5s\" mgasps=196.102 age=12h6m15s  snapdiffs=151.11KiB triedirty=986.12KiB\r\n11|op-geth  | INFO [11-13|21:54:52.164] Chain head was updated                   number=112,120,670 hash=f99dfa..c7e2f1 root=01bc5a..8591c2 elapsed=\"25.91\u00b5s\"   age=12h6m15s\r\n11|op-geth  | INFO [11-13|21:54:52.178] Starting work on payload                 id=0x82aaacfe274de721\r\n11|op-geth  | INFO [11-13|21:54:52.180] Imported new potential chain segment     number=112,120,671 hash=4bb2c6..0088bf blocks=1 txs=1 mgas=0.047 elapsed=\"442.795\u00b5s\" mgasps=105.947 age=12h6m13s  snapdiffs=151.28KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:54:52.181] Chain head was updated                   number=112,120,671 hash=4bb2c6..0088bf root=c2fb1d..28fda1 elapsed=\"38.499\u00b5s\"  age=12h6m13s\r\n11|op-geth  | INFO [11-13|21:54:52.196] Starting work on payload                 id=0x86e621fcc7713e47\r\n11|op-geth  | INFO [11-13|21:54:52.199] Imported new potential chain segment     number=112,120,672 hash=a5e5d3..8abc2d blocks=1 txs=1 mgas=0.047 elapsed=\"423.605\u00b5s\" mgasps=110.747 age=12h6m11s  snapdiffs=151.45KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:54:52.199] Chain head was updated                   number=112,120,672 hash=a5e5d3..8abc2d root=5aec31..f4d8cd elapsed=\"42.11\u00b5s\"   age=12h6m11s\r\n11|op-geth  | INFO [11-13|21:54:52.214] Starting work on payload                 id=0x0a47f25202b0d4e5\r\n11|op-geth  | INFO [11-13|21:54:52.216] Imported new potential chain segment     number=112,120,673 hash=27ef6e..c1f487 blocks=1 txs=1 mgas=0.047 elapsed=\"357.526\u00b5s\" mgasps=131.216 age=12h6m9s   snapdiffs=151.62KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:54:52.216] Chain head was updated                   number=112,120,673 hash=27ef6e..c1f487 root=f1d8fa..c25d20 elapsed=\"34.29\u00b5s\"   age=12h6m9s\r\n11|op-geth  | INFO [11-13|21:54:52.230] Starting work on payload                 id=0x2925503fecabbcf7\r\n11|op-geth  | INFO [11-13|21:54:52.232] Imported new potential chain segment     number=112,120,674 hash=6bde11..ce525d blocks=1 txs=1 mgas=0.047 elapsed=\"325.456\u00b5s\" mgasps=144.145 age=12h6m7s   snapdiffs=151.79KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:54:52.232] Chain head was updated                   number=112,120,674 hash=6bde11..ce525d root=a134a9..739a99 elapsed=\"34.819\u00b5s\"  age=12h6m7s\r\n11|op-geth  | INFO [11-13|21:55:17.115] Starting work on payload                 id=0x8e8c723025d0a86e\r\n11|op-geth  | INFO [11-13|21:55:17.117] Imported new potential chain segment     number=112,120,675 hash=df43fb..7d550f blocks=1 txs=1 mgas=0.051 elapsed=\"462.935\u00b5s\" mgasps=109.089 age=12h6m30s  snapdiffs=152.11KiB triedirty=986.67KiB\r\n11|op-geth  | INFO [11-13|21:55:17.118] Chain head was updated                   number=112,120,675 hash=df43fb..7d550f root=7500af..0db106 elapsed=\"59.58\u00b5s\"   age=12h6m30s\r\n11|op-geth  | INFO [11-13|21:55:17.133] Starting work on payload                 id=0x4eac01dc7cc7f384\r\n11|op-geth  | INFO [11-13|21:55:17.135] Imported new potential chain segment     number=112,120,676 hash=cba4b8..453045 blocks=1 txs=1 mgas=0.064 elapsed=\"386.125\u00b5s\" mgasps=165.783 age=12h6m28s  snapdiffs=152.28KiB triedirty=986.12KiB\r\n11|op-geth  | INFO [11-13|21:55:17.136] Chain head was updated                   number=112,120,676 hash=cba4b8..453045 root=d016f2..c2b762 elapsed=\"36.81\u00b5s\"   age=12h6m28s\r\n11|op-geth  | INFO [11-13|21:55:17.150] Starting work on payload                 id=0x5a6db88d76a8a897\r\n11|op-geth  | INFO [11-13|21:55:17.152] Imported new potential chain segment     number=112,120,677 hash=483a52..42567c blocks=1 txs=1 mgas=0.047 elapsed=\"370.116\u00b5s\" mgasps=126.752 age=12h6m26s  snapdiffs=152.45KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:17.152] Chain head was updated                   number=112,120,677 hash=483a52..42567c root=b40784..41f83a elapsed=\"32.799\u00b5s\"  age=12h6m26s\r\n11|op-geth  | INFO [11-13|21:55:17.167] Starting work on payload                 id=0xfc8b948aceb7a11b\r\n11|op-geth  | INFO [11-13|21:55:17.169] Imported new potential chain segment     number=112,120,678 hash=4b87e5..6337e3 blocks=1 txs=1 mgas=0.047 elapsed=\"329.207\u00b5s\" mgasps=142.503 age=12h6m24s  snapdiffs=152.62KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:17.169] Chain head was updated                   number=112,120,678 hash=4b87e5..6337e3 root=8624c4..ca045f elapsed=\"24.1\u00b5s\"    age=12h6m24s\r\n11|op-geth  | INFO [11-13|21:55:17.184] Starting work on payload                 id=0x5816b8ac5887b794\r\n11|op-geth  | INFO [11-13|21:55:17.186] Imported new potential chain segment     number=112,120,679 hash=99232d..d7cb87 blocks=1 txs=1 mgas=0.047 elapsed=\"322.657\u00b5s\" mgasps=145.396 age=12h6m22s  snapdiffs=152.79KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:17.187] Chain head was updated                   number=112,120,679 hash=99232d..d7cb87 root=f652c0..2047ff elapsed=\"42.99\u00b5s\"   age=12h6m22s\r\n11|op-geth  | INFO [11-13|21:55:17.202] Starting work on payload                 id=0xfbb832b05f843e17\r\n11|op-geth  | INFO [11-13|21:55:17.204] Imported new potential chain segment     number=112,120,680 hash=dc61fa..642435 blocks=1 txs=1 mgas=0.047 elapsed=\"293.527\u00b5s\" mgasps=159.825 age=12h6m20s  snapdiffs=152.96KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:17.204] Chain head was updated                   number=112,120,680 hash=dc61fa..642435 root=f33cd0..2ea835 elapsed=\"22.74\u00b5s\"   age=12h6m20s\r\n11|op-geth  | INFO [11-13|21:55:27.895] Starting work on payload                 id=0x1557e0d3743e8d02\r\n11|op-geth  | INFO [11-13|21:55:27.898] Imported new potential chain segment     number=112,120,681 hash=7d2190..6a68b4 blocks=1 txs=1 mgas=0.050 elapsed=\"446.125\u00b5s\" mgasps=113.145 age=12h6m28s  snapdiffs=153.27KiB triedirty=986.67KiB\r\n11|op-geth  | INFO [11-13|21:55:27.898] Chain head was updated                   number=112,120,681 hash=7d2190..6a68b4 root=40d19b..4431fe elapsed=\"37.609\u00b5s\"  age=12h6m28s\r\n11|op-geth  | INFO [11-13|21:55:27.915] Starting work on payload                 id=0x49a78ee8b06ddf60\r\n11|op-geth  | INFO [11-13|21:55:27.917] Imported new potential chain segment     number=112,120,682 hash=841062..84df8c blocks=1 txs=1 mgas=0.064 elapsed=\"313.187\u00b5s\" mgasps=204.316 age=12h6m26s  snapdiffs=153.45KiB triedirty=986.12KiB\r\n11|op-geth  | INFO [11-13|21:55:27.917] Chain head was updated                   number=112,120,682 hash=841062..84df8c root=a930bd..40647f elapsed=\"23.36\u00b5s\"   age=12h6m26s\r\n11|op-geth  | INFO [11-13|21:55:27.940] Starting work on payload                 id=0x34877ce226d76877\r\n11|op-geth  | INFO [11-13|21:55:27.942] Imported new potential chain segment     number=112,120,683 hash=064b11..a1542c blocks=1 txs=1 mgas=0.047 elapsed=\"276.197\u00b5s\" mgasps=169.767 age=12h6m24s  snapdiffs=153.62KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:27.942] Chain head was updated                   number=112,120,683 hash=064b11..a1542c root=ea942a..8dcdbe elapsed=\"40.77\u00b5s\"   age=12h6m24s\r\n11|op-geth  | INFO [11-13|21:55:27.958] Starting work on payload                 id=0xe861f6a52e518424\r\n11|op-geth  | INFO [11-13|21:55:27.960] Imported new potential chain segment     number=112,120,684 hash=50f138..6d8ea3 blocks=1 txs=1 mgas=0.047 elapsed=\"340.177\u00b5s\" mgasps=137.837 age=12h6m22s  snapdiffs=153.79KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:27.960] Chain head was updated                   number=112,120,684 hash=50f138..6d8ea3 root=90d511..f044fa elapsed=\"42.559\u00b5s\"  age=12h6m22s\r\n11|op-geth  | INFO [11-13|21:55:27.974] Starting work on payload                 id=0xf0ed787540d684a6\r\n11|op-geth  | INFO [11-13|21:55:27.975] Imported new potential chain segment     number=112,120,685 hash=8b3958..8a86d9 blocks=1 txs=1 mgas=0.047 elapsed=\"306.497\u00b5s\" mgasps=152.984 age=12h6m20s  snapdiffs=153.96KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:27.976] Chain head was updated                   number=112,120,685 hash=8b3958..8a86d9 root=e9e9d6..6c8d48 elapsed=\"25.76\u00b5s\"   age=12h6m20s\r\n11|op-geth  | INFO [11-13|21:55:27.992] Starting work on payload                 id=0x05728e830faf5bb7\r\n11|op-geth  | INFO [11-13|21:55:27.993] Imported new potential chain segment     number=112,120,686 hash=6cd7aa..045c98 blocks=1 txs=1 mgas=0.047 elapsed=\"437.955\u00b5s\" mgasps=107.064 age=12h6m18s  snapdiffs=154.13KiB triedirty=986.15KiB\r\n11|op-geth  | INFO [11-13|21:55:27.994] Chain head was updated                   number=112,120,686 hash=6cd7aa..045c98 root=465335..d014c1 elapsed=\"46.749\u00b5s\"  age=12h6m18s\r\n11|op-geth  | INFO [11-13|21:55:40.124] Starting work on payload                 id=0x47c1b1831f04a0cc\r\n11|op-geth  | INFO [11-13|21:55:40.128] Imported new potential chain segment     number=112,120,687 hash=12ade3..c26af0 blocks=1 txs=1 mgas=0.051 elapsed=\"603.504\u00b5s\" mgasps=83.680  age=12h6m29s  snapdiffs=154.44KiB triedirty=986.67KiB\r\n11|op-geth  | INFO [11-13|21:55:40.129] Chain head was updated                   number=112,120,687 hash=12ade3..c26af0 root=a5cb53..9eee32 elapsed=\"50.779\u00b5s\"  age=12h6m29s\r\n11|op-geth  | INFO [11-13|21:55:40.144] Starting work on payload                 id=0x10195d1abc19a872\r\n11|op-geth  | INFO [11-13|21:55:40.146] Imported new potential chain segment     number=112,120,688 hash=6ed3f8..d6dfc6 blocks=1 txs=1 mgas=0.064 elapsed=\"533.344\u00b5s\" mgasps=120.022 age=12h6m27s  snapdiffs=154.61KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:55:40.147] Chain head was updated                   number=112,120,688 hash=6ed3f8..d6dfc6 root=4b3efc..b9ed59 elapsed=\"57.769\u00b5s\"  age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:55:40.182] Starting work on payload                 id=0x44b32209f441d075\r\n11|op-geth  | INFO [11-13|21:55:40.184] Imported new potential chain segment     number=112,120,689 hash=7ada7d..6aa981 blocks=1 txs=1 mgas=0.047 elapsed=\"749.522\u00b5s\" mgasps=62.591  age=12h6m25s  snapdiffs=154.79KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:40.185] Chain head was updated                   number=112,120,689 hash=7ada7d..6aa981 root=524b08..ad31c0 elapsed=\"77.779\u00b5s\"  age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:55:40.211] Starting work on payload                 id=0xcd605923048d5d01\r\n11|op-geth  | INFO [11-13|21:55:40.213] Imported new potential chain segment     number=112,120,690 hash=7c9d60..208a46 blocks=1 txs=1 mgas=0.047 elapsed=\"720.632\u00b5s\" mgasps=65.100  age=12h6m23s  snapdiffs=154.96KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:40.213] Chain head was updated                   number=112,120,690 hash=7c9d60..208a46 root=591bc8..3f5cd6 elapsed=\"53.83\u00b5s\"   age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:55:40.239] Starting work on payload                 id=0x3dfba86bec082104\r\n11|op-geth  | INFO [11-13|21:55:40.242] Imported new potential chain segment     number=112,120,691 hash=4f8ce7..2d16de blocks=1 txs=1 mgas=0.047 elapsed=\"648.313\u00b5s\" mgasps=72.362  age=12h6m21s  snapdiffs=155.13KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:40.243] Chain head was updated                   number=112,120,691 hash=4f8ce7..2d16de root=962f4c..ccfdd8 elapsed=\"60.779\u00b5s\"  age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:55:40.266] Starting work on payload                 id=0x8f026990b1d8e663\r\n11|op-geth  | INFO [11-13|21:55:40.269] Imported new potential chain segment     number=112,120,692 hash=32a68c..a42a1e blocks=1 txs=1 mgas=0.047 elapsed=\"587.534\u00b5s\" mgasps=79.847  age=12h6m19s  snapdiffs=155.30KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:40.270] Chain head was updated                   number=112,120,692 hash=32a68c..a42a1e root=1991e1..5ae5d9 elapsed=\"55.78\u00b5s\"   age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:55:49.888] Starting work on payload                 id=0xce05baf14580e5b4\r\n11|op-geth  | INFO [11-13|21:55:49.890] Imported new potential chain segment     number=112,120,693 hash=b5223f..c6735d blocks=1 txs=1 mgas=0.050 elapsed=\"430.865\u00b5s\" mgasps=117.181 age=12h6m26s  snapdiffs=155.61KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:55:49.890] Chain head was updated                   number=112,120,693 hash=b5223f..c6735d root=6d8a1b..62fb0b elapsed=\"51.539\u00b5s\"  age=12h6m26s\r\n11|op-geth  | INFO [11-13|21:55:49.905] Starting work on payload                 id=0x5df6841d217ceb1f\r\n11|op-geth  | INFO [11-13|21:55:49.907] Imported new potential chain segment     number=112,120,694 hash=32f652..da024f blocks=1 txs=1 mgas=0.064 elapsed=\"448.435\u00b5s\" mgasps=142.721 age=12h6m24s  snapdiffs=155.78KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:55:49.907] Chain head was updated                   number=112,120,694 hash=32f652..da024f root=152507..96a1e5 elapsed=\"47.88\u00b5s\"   age=12h6m24s\r\n11|op-geth  | INFO [11-13|21:55:49.923] Starting work on payload                 id=0xfd6cbbf8ed1b46f1\r\n11|op-geth  | INFO [11-13|21:55:49.924] Imported new potential chain segment     number=112,120,695 hash=4f981c..4bd657 blocks=1 txs=1 mgas=0.047 elapsed=\"359.627\u00b5s\" mgasps=130.416 age=12h6m22s  snapdiffs=155.95KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:49.924] Chain head was updated                   number=112,120,695 hash=4f981c..4bd657 root=1fb809..005f91 elapsed=\"24.05\u00b5s\"   age=12h6m22s\r\n11|op-geth  | INFO [11-13|21:55:49.939] Starting work on payload                 id=0xc74ee3a5470671ca\r\n11|op-geth  | INFO [11-13|21:55:49.941] Imported new potential chain segment     number=112,120,696 hash=7c8210..d37a5e blocks=1 txs=1 mgas=0.047 elapsed=\"417.465\u00b5s\" mgasps=112.347 age=12h6m20s  snapdiffs=156.12KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:49.941] Chain head was updated                   number=112,120,696 hash=7c8210..d37a5e root=cc9b01..b6ac23 elapsed=\"46.34\u00b5s\"   age=12h6m20s\r\n11|op-geth  | INFO [11-13|21:55:49.956] Starting work on payload                 id=0x1fccbc9acf943915\r\n11|op-geth  | INFO [11-13|21:55:49.957] Imported new potential chain segment     number=112,120,697 hash=b7d806..24b3b9 blocks=1 txs=1 mgas=0.047 elapsed=\"300.596\u00b5s\" mgasps=156.027 age=12h6m18s  snapdiffs=156.30KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:49.957] Chain head was updated                   number=112,120,697 hash=b7d806..24b3b9 root=3495a9..d35cb4 elapsed=\"28.35\u00b5s\"   age=12h6m18s\r\n11|op-geth  | INFO [11-13|21:55:49.971] Starting work on payload                 id=0x003d083ee9d035e1\r\n11|op-geth  | INFO [11-13|21:55:49.973] Imported new potential chain segment     number=112,120,698 hash=8248a2..ea44ff blocks=1 txs=1 mgas=0.047 elapsed=\"339.407\u00b5s\" mgasps=138.185 age=12h6m16s  snapdiffs=156.47KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:55:49.973] Chain head was updated                   number=112,120,698 hash=8248a2..ea44ff root=513d5d..3b928e elapsed=\"30\u00b5s\"      age=12h6m16s\r\n11|op-geth  | INFO [11-13|21:56:04.020] Starting work on payload                 id=0xf364c421a6a8fe61\r\n11|op-geth  | INFO [11-13|21:56:04.022] Imported new potential chain segment     number=112,120,699 hash=0be205..80ef7c blocks=1 txs=1 mgas=0.051 elapsed=\"444.645\u00b5s\" mgasps=113.576 age=12h6m29s  snapdiffs=156.78KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:56:04.022] Chain head was updated                   number=112,120,699 hash=0be205..80ef7c root=e7a61c..05130d elapsed=\"42.469\u00b5s\"  age=12h6m29s\r\n11|op-geth  | INFO [11-13|21:56:04.038] Starting work on payload                 id=0x360194f874380995\r\n11|op-geth  | INFO [11-13|21:56:04.040] Imported new potential chain segment     number=112,120,700 hash=ed6209..e8da8b blocks=1 txs=1 mgas=0.064 elapsed=\"367.306\u00b5s\" mgasps=174.277 age=12h6m27s  snapdiffs=156.95KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:56:04.041] Chain head was updated                   number=112,120,700 hash=ed6209..e8da8b root=928c6b..1ba664 elapsed=\"40.609\u00b5s\"  age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:56:04.058] Starting work on payload                 id=0x26a31ae2a347ac04\r\n11|op-geth  | INFO [11-13|21:56:04.059] Imported new potential chain segment     number=112,120,701 hash=9de10e..c7cd36 blocks=1 txs=1 mgas=0.047 elapsed=\"334.217\u00b5s\" mgasps=140.367 age=12h6m25s  snapdiffs=157.12KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:04.059] Chain head was updated                   number=112,120,701 hash=9de10e..c7cd36 root=aa39d3..ad2b4e elapsed=\"30.18\u00b5s\"   age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:56:04.082] Starting work on payload                 id=0x525fa3b63b619ced\r\n11|op-geth  | INFO [11-13|21:56:04.084] Imported new potential chain segment     number=112,120,702 hash=9f97ec..c7153b blocks=1 txs=1 mgas=0.047 elapsed=\"450.305\u00b5s\" mgasps=104.180 age=12h6m23s  snapdiffs=157.29KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:04.085] Chain head was updated                   number=112,120,702 hash=9f97ec..c7153b root=8ff45f..b48526 elapsed=\"43.679\u00b5s\"  age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:56:04.100] Starting work on payload                 id=0x5eb472966a245af9\r\n11|op-geth  | INFO [11-13|21:56:04.102] Imported new potential chain segment     number=112,120,703 hash=ec1079..8c8651 blocks=1 txs=1 mgas=0.047 elapsed=\"413.646\u00b5s\" mgasps=113.413 age=12h6m21s  snapdiffs=157.46KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:04.102] Chain head was updated                   number=112,120,703 hash=ec1079..8c8651 root=4c721a..dd6fbd elapsed=\"40.94\u00b5s\"   age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:56:04.117] Starting work on payload                 id=0xfb2e00f00b93d6aa\r\n11|op-geth  | INFO [11-13|21:56:04.120] Imported new potential chain segment     number=112,120,704 hash=213a5c..ff757b blocks=1 txs=1 mgas=0.047 elapsed=\"463.105\u00b5s\" mgasps=101.301 age=12h6m19s  snapdiffs=157.64KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:04.120] Chain head was updated                   number=112,120,704 hash=213a5c..ff757b root=ad7078..ad339e elapsed=\"54.809\u00b5s\"  age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:56:13.876] Starting work on payload                 id=0x1999c16645000a8b\r\n11|op-geth  | INFO [11-13|21:56:13.878] Imported new potential chain segment     number=112,120,705 hash=b9c419..b62298 blocks=1 txs=1 mgas=0.050 elapsed=\"389.996\u00b5s\" mgasps=129.460 age=12h6m26s  snapdiffs=157.95KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:56:13.878] Chain head was updated                   number=112,120,705 hash=b9c419..b62298 root=5ff71f..e40d8b elapsed=\"38.979\u00b5s\"  age=12h6m26s\r\n11|op-geth  | INFO [11-13|21:56:13.895] Starting work on payload                 id=0xbc335761a353c5d8\r\n11|op-geth  | INFO [11-13|21:56:13.898] Imported new potential chain segment     number=112,120,706 hash=e3fdc1..327027 blocks=1 txs=1 mgas=0.064 elapsed=\"556.214\u00b5s\" mgasps=115.065 age=12h6m24s  snapdiffs=158.12KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:56:13.898] Chain head was updated                   number=112,120,706 hash=e3fdc1..327027 root=5ca541..3ae61f elapsed=\"42.639\u00b5s\"  age=12h6m24s\r\n11|op-geth  | INFO [11-13|21:56:13.914] Starting work on payload                 id=0xea22756b36d3ed6e\r\n11|op-geth  | INFO [11-13|21:56:13.916] Imported new potential chain segment     number=112,120,707 hash=a787f9..8fa24f blocks=1 txs=1 mgas=0.047 elapsed=\"375.926\u00b5s\" mgasps=124.761 age=12h6m22s  snapdiffs=158.29KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:13.916] Chain head was updated                   number=112,120,707 hash=a787f9..8fa24f root=bd100f..d00915 elapsed=\"36.32\u00b5s\"   age=12h6m22s\r\n11|op-geth  | INFO [11-13|21:56:13.931] Starting work on payload                 id=0x38301f3e113ba319\r\n11|op-geth  | INFO [11-13|21:56:13.934] Imported new potential chain segment     number=112,120,708 hash=956e9e..1a46ed blocks=1 txs=1 mgas=0.047 elapsed=\"461.195\u00b5s\" mgasps=101.695 age=12h6m20s  snapdiffs=158.46KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:13.934] Chain head was updated                   number=112,120,708 hash=956e9e..1a46ed root=69274b..c765e2 elapsed=\"36.799\u00b5s\"  age=12h6m20s\r\n11|op-geth  | INFO [11-13|21:56:13.948] Starting work on payload                 id=0xba5a46fb899f8267\r\n11|op-geth  | INFO [11-13|21:56:13.951] Imported new potential chain segment     number=112,120,709 hash=c62fb6..e097e9 blocks=1 txs=1 mgas=0.047 elapsed=\"326.556\u00b5s\" mgasps=143.623 age=12h6m18s  snapdiffs=158.63KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:13.951] Chain head was updated                   number=112,120,709 hash=c62fb6..e097e9 root=e4de5a..1510ba elapsed=\"28.629\u00b5s\"  age=12h6m18s\r\n11|op-geth  | INFO [11-13|21:56:13.965] Starting work on payload                 id=0xb5f9b83446bdc8de\r\n11|op-geth  | INFO [11-13|21:56:13.966] Imported new potential chain segment     number=112,120,710 hash=6ae82d..c1e8a1 blocks=1 txs=1 mgas=0.047 elapsed=\"337.577\u00b5s\" mgasps=138.934 age=12h6m16s  snapdiffs=158.80KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:13.967] Chain head was updated                   number=112,120,710 hash=6ae82d..c1e8a1 root=58822d..6c8da7 elapsed=\"31.33\u00b5s\"   age=12h6m16s\r\n11|op-geth  | INFO [11-13|21:56:26.530] Starting work on payload                 id=0xddc3151ef1fae202\r\n11|op-geth  | INFO [11-13|21:56:26.531] Imported new potential chain segment     number=112,120,711 hash=72795c..88106c blocks=1 txs=1 mgas=0.051 elapsed=\"551.374\u00b5s\" mgasps=91.591  age=12h6m27s  snapdiffs=159.12KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:56:26.532] Chain head was updated                   number=112,120,711 hash=72795c..88106c root=fff898..181ddd elapsed=\"50.009\u00b5s\"  age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:56:26.549] Starting work on payload                 id=0xc09741d4e94ae1f5\r\n11|op-geth  | INFO [11-13|21:56:26.551] Imported new potential chain segment     number=112,120,712 hash=248267..5a0412 blocks=1 txs=1 mgas=0.064 elapsed=\"411.156\u00b5s\" mgasps=155.690 age=12h6m25s  snapdiffs=159.29KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:56:26.552] Chain head was updated                   number=112,120,712 hash=248267..5a0412 root=930c0c..8ba37e elapsed=\"33.08\u00b5s\"   age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:56:26.567] Starting work on payload                 id=0x0e6c671351b87284\r\n11|op-geth  | INFO [11-13|21:56:26.568] Imported new potential chain segment     number=112,120,713 hash=4830ad..0dfc41 blocks=1 txs=1 mgas=0.047 elapsed=\"317.126\u00b5s\" mgasps=147.932 age=12h6m23s  snapdiffs=159.46KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:26.568] Chain head was updated                   number=112,120,713 hash=4830ad..0dfc41 root=ee70f5..0f3c7e elapsed=\"27.759\u00b5s\"  age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:56:26.585] Starting work on payload                 id=0x3fdc9de2bc6b27da\r\n11|op-geth  | INFO [11-13|21:56:26.586] Imported new potential chain segment     number=112,120,714 hash=802fd9..c7e164 blocks=1 txs=1 mgas=0.047 elapsed=\"342.367\u00b5s\" mgasps=137.025 age=12h6m21s  snapdiffs=159.63KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:26.587] Chain head was updated                   number=112,120,714 hash=802fd9..c7e164 root=6f21eb..6128d0 elapsed=\"37.489\u00b5s\"  age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:56:26.601] Starting work on payload                 id=0x3b6dd9d5eb3a4657\r\n11|op-geth  | INFO [11-13|21:56:26.604] Imported new potential chain segment     number=112,120,715 hash=adb674..2ce166 blocks=1 txs=1 mgas=0.047 elapsed=\"424.966\u00b5s\" mgasps=110.392 age=12h6m19s  snapdiffs=159.80KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:26.604] Chain head was updated                   number=112,120,715 hash=adb674..2ce166 root=327347..ecfea7 elapsed=\"39.399\u00b5s\"  age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:56:26.621] Starting work on payload                 id=0xecdd2b024c1e2cf4\r\n11|op-geth  | INFO [11-13|21:56:26.622] Imported new potential chain segment     number=112,120,716 hash=ae4c2e..8f5d12 blocks=1 txs=1 mgas=0.047 elapsed=\"431.315\u00b5s\" mgasps=108.767 age=12h6m17s  snapdiffs=159.97KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:26.622] Chain head was updated                   number=112,120,716 hash=ae4c2e..8f5d12 root=d6d699..bc03a4 elapsed=\"40.699\u00b5s\"  age=12h6m17s\r\n11|op-geth  | INFO [11-13|21:56:40.306] Starting work on payload                 id=0xa96e439c7e533135\r\n11|op-geth  | INFO [11-13|21:56:40.309] Imported new potential chain segment     number=112,120,717 hash=22a8ae..b8b969 blocks=1 txs=1 mgas=0.051 elapsed=\"467.335\u00b5s\" mgasps=108.062 age=12h6m29s  snapdiffs=160.29KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:56:40.309] Chain head was updated                   number=112,120,717 hash=22a8ae..b8b969 root=42f225..99ca6d elapsed=\"46.149\u00b5s\"  age=12h6m29s\r\n11|op-geth  | INFO [11-13|21:56:40.327] Starting work on payload                 id=0xd3a4d58290191da5\r\n11|op-geth  | INFO [11-13|21:56:40.328] Imported new potential chain segment     number=112,120,718 hash=04b7c2..f70524 blocks=1 txs=1 mgas=0.064 elapsed=\"403.596\u00b5s\" mgasps=158.607 age=12h6m27s  snapdiffs=160.46KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:56:40.329] Chain head was updated                   number=112,120,718 hash=04b7c2..f70524 root=853e22..d38dc1 elapsed=\"44.099\u00b5s\"  age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:56:40.344] Starting work on payload                 id=0x43dc1c731e71d9ec\r\n11|op-geth  | INFO [11-13|21:56:40.347] Imported new potential chain segment     number=112,120,719 hash=d484c2..be7bf3 blocks=1 txs=1 mgas=0.047 elapsed=\"460.115\u00b5s\" mgasps=101.959 age=12h6m25s  snapdiffs=160.63KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:40.347] Chain head was updated                   number=112,120,719 hash=d484c2..be7bf3 root=8fd1f5..cca6d4 elapsed=\"50.389\u00b5s\"  age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:56:40.368] Starting work on payload                 id=0x1aa1cf77347ecbc3\r\n11|op-geth  | INFO [11-13|21:56:40.370] Imported new potential chain segment     number=112,120,720 hash=7c3735..95c479 blocks=1 txs=1 mgas=0.047 elapsed=\"424.816\u00b5s\" mgasps=110.431 age=12h6m23s  snapdiffs=160.80KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:40.370] Chain head was updated                   number=112,120,720 hash=7c3735..95c479 root=40fce8..f38e6d elapsed=\"57.71\u00b5s\"   age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:56:40.389] Starting work on payload                 id=0x5e1dce0b86ac2bb2\r\n11|op-geth  | INFO [11-13|21:56:40.390] Imported new potential chain segment     number=112,120,721 hash=d46848..18261e blocks=1 txs=1 mgas=0.047 elapsed=\"458.605\u00b5s\" mgasps=102.295 age=12h6m21s  snapdiffs=160.97KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:40.391] Chain head was updated                   number=112,120,721 hash=d46848..18261e root=05aa07..702a20 elapsed=\"46.79\u00b5s\"   age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:56:40.407] Starting work on payload                 id=0x1b738b4f2a7a47f4\r\n11|op-geth  | INFO [11-13|21:56:40.410] Imported new potential chain segment     number=112,120,722 hash=4108a4..a1d1be blocks=1 txs=1 mgas=0.047 elapsed=\"471.795\u00b5s\" mgasps=99.435  age=12h6m19s  snapdiffs=161.14KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:40.410] Chain head was updated                   number=112,120,722 hash=4108a4..a1d1be root=6328c9..c9809f elapsed=\"48.859\u00b5s\"  age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:56:52.401] Starting work on payload                 id=0x9979bb8a294ca4de\r\n11|op-geth  | INFO [11-13|21:56:52.403] Imported new potential chain segment     number=112,120,723 hash=b2350e..ce4434 blocks=1 txs=1 mgas=0.051 elapsed=\"418.586\u00b5s\" mgasps=120.647 age=12h6m29s  snapdiffs=161.46KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:56:52.403] Chain head was updated                   number=112,120,723 hash=b2350e..ce4434 root=171cd5..3cbd26 elapsed=\"46.26\u00b5s\"   age=12h6m29s\r\n11|op-geth  | INFO [11-13|21:56:52.419] Starting work on payload                 id=0x0f7819de18a870fd\r\n11|op-geth  | INFO [11-13|21:56:52.421] Imported new potential chain segment     number=112,120,724 hash=c93176..ab2b75 blocks=1 txs=1 mgas=0.064 elapsed=\"426.695\u00b5s\" mgasps=150.021 age=12h6m27s  snapdiffs=161.63KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:56:52.422] Chain head was updated                   number=112,120,724 hash=c93176..ab2b75 root=e79aa4..d615f0 elapsed=\"44.28\u00b5s\"   age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:56:52.437] Starting work on payload                 id=0xd26a39c70150bf11\r\n11|op-geth  | INFO [11-13|21:56:52.439] Imported new potential chain segment     number=112,120,725 hash=cfed44..722f96 blocks=1 txs=1 mgas=0.047 elapsed=\"395.836\u00b5s\" mgasps=118.516 age=12h6m25s  snapdiffs=161.80KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:52.440] Chain head was updated                   number=112,120,725 hash=cfed44..722f96 root=7c7d2f..35df38 elapsed=\"47.699\u00b5s\"  age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:56:52.456] Starting work on payload                 id=0xf938df2e6916718b\r\n11|op-geth  | INFO [11-13|21:56:52.458] Imported new potential chain segment     number=112,120,726 hash=c17c73..83fe62 blocks=1 txs=1 mgas=0.047 elapsed=\"468.235\u00b5s\" mgasps=100.191 age=12h6m23s  snapdiffs=161.97KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:52.459] Chain head was updated                   number=112,120,726 hash=c17c73..83fe62 root=3d5cfe..4c60a6 elapsed=\"49.249\u00b5s\"  age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:56:52.474] Starting work on payload                 id=0x50425ee553bb79d7\r\n11|op-geth  | INFO [11-13|21:56:52.476] Imported new potential chain segment     number=112,120,727 hash=838033..311662 blocks=1 txs=1 mgas=0.047 elapsed=\"408.836\u00b5s\" mgasps=114.748 age=12h6m21s  snapdiffs=162.14KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:52.476] Chain head was updated                   number=112,120,727 hash=838033..311662 root=7281b9..94eb90 elapsed=\"43.269\u00b5s\"  age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:56:52.492] Starting work on payload                 id=0x7922e2480f0138d6\r\n11|op-geth  | INFO [11-13|21:56:52.494] Imported new potential chain segment     number=112,120,728 hash=e9f8e2..d6e877 blocks=1 txs=1 mgas=0.047 elapsed=\"429.066\u00b5s\" mgasps=109.337 age=12h6m19s  snapdiffs=162.31KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:56:52.494] Chain head was updated                   number=112,120,728 hash=e9f8e2..d6e877 root=d71cdf..466e34 elapsed=\"58.649\u00b5s\"  age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:57:04.153] Starting work on payload                 id=0x0f2d57303cfc8bc6\r\n11|op-geth  | INFO [11-13|21:57:04.156] Imported new potential chain segment     number=112,120,729 hash=29ff4a..4f97b9 blocks=1 txs=1 mgas=0.051 elapsed=\"409.466\u00b5s\" mgasps=123.334 age=12h6m29s  snapdiffs=162.63KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:57:04.156] Chain head was updated                   number=112,120,729 hash=29ff4a..4f97b9 root=9d9347..620fd9 elapsed=\"58.219\u00b5s\"  age=12h6m29s\r\n11|op-geth  | INFO [11-13|21:57:04.171] Starting work on payload                 id=0xdee1465e22944030\r\n11|op-geth  | INFO [11-13|21:57:04.174] Imported new potential chain segment     number=112,120,730 hash=9c48b2..88c3a1 blocks=1 txs=1 mgas=0.064 elapsed=\"334.837\u00b5s\" mgasps=191.177 age=12h6m27s  snapdiffs=162.80KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:57:04.174] Chain head was updated                   number=112,120,730 hash=9c48b2..88c3a1 root=52e251..3a6129 elapsed=\"29.679\u00b5s\"  age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:57:04.189] Starting work on payload                 id=0x99c7b70cf9133f37\r\n11|op-geth  | INFO [11-13|21:57:04.191] Imported new potential chain segment     number=112,120,731 hash=d628c5..e77cae blocks=1 txs=1 mgas=0.047 elapsed=\"313.887\u00b5s\" mgasps=149.458 age=12h6m25s  snapdiffs=162.97KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:04.191] Chain head was updated                   number=112,120,731 hash=d628c5..e77cae root=1c85fe..859f33 elapsed=\"29.85\u00b5s\"   age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:57:04.206] Starting work on payload                 id=0x1d101f7ae2a41672\r\n11|op-geth  | INFO [11-13|21:57:04.208] Imported new potential chain segment     number=112,120,732 hash=cf363b..4ba954 blocks=1 txs=1 mgas=0.047 elapsed=\"384.706\u00b5s\" mgasps=121.945 age=12h6m23s  snapdiffs=163.14KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:04.208] Chain head was updated                   number=112,120,732 hash=cf363b..4ba954 root=c65b23..17ee89 elapsed=\"42.64\u00b5s\"   age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:57:04.223] Starting work on payload                 id=0xc11fabb0662c64c8\r\n11|op-geth  | INFO [11-13|21:57:04.225] Imported new potential chain segment     number=112,120,733 hash=d75119..d2e57b blocks=1 txs=1 mgas=0.047 elapsed=\"365.816\u00b5s\" mgasps=128.242 age=12h6m21s  snapdiffs=163.31KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:04.225] Chain head was updated                   number=112,120,733 hash=d75119..d2e57b root=50de25..2e4077 elapsed=\"29.5\u00b5s\"    age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:57:04.241] Starting work on payload                 id=0xbf1779f0106526c7\r\n11|op-geth  | INFO [11-13|21:57:04.242] Imported new potential chain segment     number=112,120,734 hash=c423f8..17db94 blocks=1 txs=1 mgas=0.047 elapsed=\"326.046\u00b5s\" mgasps=143.885 age=12h6m19s  snapdiffs=163.48KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:04.242] Chain head was updated                   number=112,120,734 hash=c423f8..17db94 root=ae3e64..547edd elapsed=\"28.24\u00b5s\"   age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:57:17.114] Starting work on payload                 id=0xd8eb3d9b15fd679e\r\n11|op-geth  | INFO [11-13|21:57:17.117] Imported new potential chain segment     number=112,120,735 hash=8cde9c..5e4f1c blocks=1 txs=1 mgas=0.050 elapsed=\"510.584\u00b5s\" mgasps=98.885  age=12h6m30s  snapdiffs=163.79KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:57:17.117] Chain head was updated                   number=112,120,735 hash=8cde9c..5e4f1c root=5f9d5e..09f540 elapsed=\"40.859\u00b5s\"  age=12h6m30s\r\n11|op-geth  | INFO [11-13|21:57:17.132] Starting work on payload                 id=0xf61a62dbd3f76dee\r\n11|op-geth  | INFO [11-13|21:57:17.135] Imported new potential chain segment     number=112,120,736 hash=abe281..f034db blocks=1 txs=1 mgas=0.064 elapsed=\"296.887\u00b5s\" mgasps=215.574 age=12h6m28s  snapdiffs=163.97KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:57:17.135] Chain head was updated                   number=112,120,736 hash=abe281..f034db root=4c09ea..c558c7 elapsed=\"27.26\u00b5s\"   age=12h6m28s\r\n11|op-geth  | INFO [11-13|21:57:17.150] Starting work on payload                 id=0x050af068b64ed53d\r\n11|op-geth  | INFO [11-13|21:57:17.152] Imported new potential chain segment     number=112,120,737 hash=121a31..08f107 blocks=1 txs=1 mgas=0.047 elapsed=\"283.797\u00b5s\" mgasps=165.262 age=12h6m26s  snapdiffs=164.14KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:17.152] Chain head was updated                   number=112,120,737 hash=121a31..08f107 root=4b3daa..d45349 elapsed=\"41.769\u00b5s\"  age=12h6m26s\r\n11|op-geth  | INFO [11-13|21:57:17.167] Starting work on payload                 id=0x4a84a80aee62dd67\r\n11|op-geth  | INFO [11-13|21:57:17.169] Imported new potential chain segment     number=112,120,738 hash=07f01b..2d1b06 blocks=1 txs=1 mgas=0.047 elapsed=\"259.018\u00b5s\" mgasps=181.072 age=12h6m24s  snapdiffs=164.31KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:17.169] Chain head was updated                   number=112,120,738 hash=07f01b..2d1b06 root=45791e..ad636c elapsed=\"21.01\u00b5s\"   age=12h6m24s\r\n11|op-geth  | INFO [11-13|21:57:17.190] Starting work on payload                 id=0x1a1b50856a37ed85\r\n11|op-geth  | INFO [11-13|21:57:17.191] Imported new potential chain segment     number=112,120,739 hash=7bab46..367899 blocks=1 txs=1 mgas=0.047 elapsed=\"283.857\u00b5s\" mgasps=165.228 age=12h6m22s  snapdiffs=164.48KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:17.191] Chain head was updated                   number=112,120,739 hash=7bab46..367899 root=6eefcb..21ef9a elapsed=\"30.049\u00b5s\"  age=12h6m22s\r\n11|op-geth  | INFO [11-13|21:57:17.207] Starting work on payload                 id=0x8d7f91a7de256d63\r\n11|op-geth  | INFO [11-13|21:57:17.209] Imported new potential chain segment     number=112,120,740 hash=c10ff1..1da2b4 blocks=1 txs=1 mgas=0.047 elapsed=\"396.776\u00b5s\" mgasps=118.205 age=12h6m20s  snapdiffs=164.65KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:17.209] Chain head was updated                   number=112,120,740 hash=c10ff1..1da2b4 root=e75ae0..f87b6a elapsed=\"43.32\u00b5s\"   age=12h6m20s\r\n11|op-geth  | INFO [11-13|21:57:26.082] Starting work on payload                 id=0xc07d3e09738a0276\r\n11|op-geth  | INFO [11-13|21:57:26.085] Imported new potential chain segment     number=112,120,741 hash=21ddb7..14c729 blocks=1 txs=1 mgas=0.051 elapsed=\"529.834\u00b5s\" mgasps=95.315  age=12h6m27s  snapdiffs=164.96KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:57:26.085] Chain head was updated                   number=112,120,741 hash=21ddb7..14c729 root=71b313..e721c9 elapsed=\"51.779\u00b5s\"  age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:57:26.102] Starting work on payload                 id=0xb9304dd00c3cc4d3\r\n11|op-geth  | INFO [11-13|21:57:26.103] Imported new potential chain segment     number=112,120,742 hash=b478df..049f9a blocks=1 txs=1 mgas=0.064 elapsed=\"372.586\u00b5s\" mgasps=171.807 age=12h6m25s  snapdiffs=165.13KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:57:26.103] Chain head was updated                   number=112,120,742 hash=b478df..049f9a root=9cddb1..53d548 elapsed=\"34.78\u00b5s\"   age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:57:26.120] Starting work on payload                 id=0x6f56cf02e362c6eb\r\n11|op-geth  | INFO [11-13|21:57:26.123] Imported new potential chain segment     number=112,120,743 hash=f46df5..47c3b7 blocks=1 txs=1 mgas=0.047 elapsed=\"435.335\u00b5s\" mgasps=107.763 age=12h6m23s  snapdiffs=165.31KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:26.123] Chain head was updated                   number=112,120,743 hash=f46df5..47c3b7 root=36272f..067dd5 elapsed=\"40.92\u00b5s\"   age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:57:26.144] Starting work on payload                 id=0xe65054a6d7451e4e\r\n11|op-geth  | INFO [11-13|21:57:26.147] Imported new potential chain segment     number=112,120,744 hash=96ac3a..570b2d blocks=1 txs=1 mgas=0.047 elapsed=\"362.766\u00b5s\" mgasps=129.320 age=12h6m21s  snapdiffs=165.48KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:26.147] Chain head was updated                   number=112,120,744 hash=96ac3a..570b2d root=d17a39..93342b elapsed=\"27.479\u00b5s\"  age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:57:26.163] Starting work on payload                 id=0x3acc9d5ebc4ab70b\r\n11|op-geth  | INFO [11-13|21:57:26.165] Imported new potential chain segment     number=112,120,745 hash=285dc0..b131cd blocks=1 txs=1 mgas=0.047 elapsed=\"319.006\u00b5s\" mgasps=147.060 age=12h6m19s  snapdiffs=165.65KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:26.165] Chain head was updated                   number=112,120,745 hash=285dc0..b131cd root=7f4635..4ac9ed elapsed=\"28.399\u00b5s\"  age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:57:26.181] Starting work on payload                 id=0x788ef2190db0d550\r\n11|op-geth  | INFO [11-13|21:57:26.184] Imported new potential chain segment     number=112,120,746 hash=68b0e2..33b074 blocks=1 txs=1 mgas=0.047 elapsed=\"591.003\u00b5s\" mgasps=79.379  age=12h6m17s  snapdiffs=165.82KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:26.184] Chain head was updated                   number=112,120,746 hash=68b0e2..33b074 root=fba6ea..f5005d elapsed=\"45.65\u00b5s\"   age=12h6m17s\r\n11|op-geth  | INFO [11-13|21:57:37.874] Starting work on payload                 id=0xca657688aa93a35b\r\n11|op-geth  | INFO [11-13|21:57:37.875] Imported new potential chain segment     number=112,120,747 hash=2f78a0..dbd0d9 blocks=1 txs=1 mgas=0.051 elapsed=\"414.236\u00b5s\" mgasps=121.914 age=12h6m26s  snapdiffs=166.13KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:57:37.875] Chain head was updated                   number=112,120,747 hash=2f78a0..dbd0d9 root=30a713..a18c9b elapsed=\"43.299\u00b5s\"  age=12h6m26s\r\n11|op-geth  | INFO [11-13|21:57:37.893] Starting work on payload                 id=0x71f21a3a9ddf466a\r\n11|op-geth  | INFO [11-13|21:57:37.895] Imported new potential chain segment     number=112,120,748 hash=6dc2fa..b51aea blocks=1 txs=1 mgas=0.064 elapsed=\"512.755\u00b5s\" mgasps=124.841 age=12h6m24s  snapdiffs=166.30KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:57:37.896] Chain head was updated                   number=112,120,748 hash=6dc2fa..b51aea root=1ac5e2..3436ee elapsed=\"51.97\u00b5s\"   age=12h6m24s\r\n11|op-geth  | INFO [11-13|21:57:37.912] Starting work on payload                 id=0x5ee6c03bd3037e72\r\n11|op-geth  | INFO [11-13|21:57:37.914] Imported new potential chain segment     number=112,120,749 hash=d6fa3f..a3a8e1 blocks=1 txs=1 mgas=0.047 elapsed=\"468.325\u00b5s\" mgasps=100.172 age=12h6m22s  snapdiffs=166.47KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:37.914] Chain head was updated                   number=112,120,749 hash=d6fa3f..a3a8e1 root=e85da7..17bfe2 elapsed=\"63.979\u00b5s\"  age=12h6m22s\r\n11|op-geth  | INFO [11-13|21:57:37.929] Starting work on payload                 id=0xd549d93c26b45335\r\n11|op-geth  | INFO [11-13|21:57:37.931] Imported new potential chain segment     number=112,120,750 hash=3776dc..b50c80 blocks=1 txs=1 mgas=0.047 elapsed=\"431.806\u00b5s\" mgasps=108.644 age=12h6m20s  snapdiffs=166.65KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:37.932] Chain head was updated                   number=112,120,750 hash=3776dc..b50c80 root=d97599..8cf619 elapsed=\"48.37\u00b5s\"   age=12h6m20s\r\n11|op-geth  | INFO [11-13|21:57:37.963] Starting work on payload                 id=0x81f7c12371aca1de\r\n11|op-geth  | INFO [11-13|21:57:37.966] Imported new potential chain segment     number=112,120,751 hash=d8a286..80803a blocks=1 txs=1 mgas=0.047 elapsed=\"570.484\u00b5s\" mgasps=82.234  age=12h6m18s  snapdiffs=166.82KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:37.966] Chain head was updated                   number=112,120,751 hash=d8a286..80803a root=07c138..b00bb3 elapsed=\"47.999\u00b5s\"  age=12h6m18s\r\n11|op-geth  | INFO [11-13|21:57:37.984] Starting work on payload                 id=0x1840b488ec82e7ce\r\n11|op-geth  | INFO [11-13|21:57:37.987] Imported new potential chain segment     number=112,120,752 hash=71dbab..523804 blocks=1 txs=1 mgas=0.047 elapsed=\"466.505\u00b5s\" mgasps=100.563 age=12h6m16s  snapdiffs=166.99KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:37.987] Chain head was updated                   number=112,120,752 hash=71dbab..523804 root=382f33..6c42bc elapsed=\"44.309\u00b5s\"  age=12h6m16s\r\n11|op-geth  | INFO [11-13|21:57:50.028] Starting work on payload                 id=0xbaeb373caf038760\r\n11|op-geth  | INFO [11-13|21:57:50.030] Imported new potential chain segment     number=112,120,753 hash=381bfe..816649 blocks=1 txs=1 mgas=0.051 elapsed=\"484.815\u00b5s\" mgasps=104.166 age=12h6m27s  snapdiffs=167.30KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:57:50.031] Chain head was updated                   number=112,120,753 hash=381bfe..816649 root=348b38..daba17 elapsed=\"59.279\u00b5s\"  age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:57:50.047] Starting work on payload                 id=0x98b53df5c5170bbe\r\n11|op-geth  | INFO [11-13|21:57:50.049] Imported new potential chain segment     number=112,120,754 hash=c44d97..0b4b92 blocks=1 txs=1 mgas=0.064 elapsed=\"367.516\u00b5s\" mgasps=174.177 age=12h6m25s  snapdiffs=167.47KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:57:50.049] Chain head was updated                   number=112,120,754 hash=c44d97..0b4b92 root=4eccf5..b47840 elapsed=\"32.979\u00b5s\"  age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:57:50.064] Starting work on payload                 id=0x6dfbb703e268d0d9\r\n11|op-geth  | INFO [11-13|21:57:50.066] Imported new potential chain segment     number=112,120,755 hash=d9fd02..e20af0 blocks=1 txs=1 mgas=0.047 elapsed=\"437.765\u00b5s\" mgasps=107.165 age=12h6m23s  snapdiffs=167.64KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:50.067] Chain head was updated                   number=112,120,755 hash=d9fd02..e20af0 root=447381..047c76 elapsed=\"50.269\u00b5s\"  age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:57:50.082] Starting work on payload                 id=0x490993a6e3a7d58e\r\n11|op-geth  | INFO [11-13|21:57:50.084] Imported new potential chain segment     number=112,120,756 hash=3438ac..79a6f3 blocks=1 txs=1 mgas=0.047 elapsed=\"470.765\u00b5s\" mgasps=99.653  age=12h6m21s  snapdiffs=167.81KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:50.085] Chain head was updated                   number=112,120,756 hash=3438ac..79a6f3 root=f4342c..a1a4ae elapsed=\"43.359\u00b5s\"  age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:57:50.100] Starting work on payload                 id=0xd15e74426eca4389\r\n11|op-geth  | INFO [11-13|21:57:50.102] Imported new potential chain segment     number=112,120,757 hash=8eacf1..def0b9 blocks=1 txs=1 mgas=0.047 elapsed=\"445.075\u00b5s\" mgasps=105.405 age=12h6m19s  snapdiffs=167.99KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:50.103] Chain head was updated                   number=112,120,757 hash=8eacf1..def0b9 root=ef62a9..a5105d elapsed=\"62.889\u00b5s\"  age=12h6m19s\r\n11|op-geth  | INFO [11-13|21:57:50.118] Starting work on payload                 id=0x9ad494ca57ac653f\r\n11|op-geth  | INFO [11-13|21:57:50.120] Imported new potential chain segment     number=112,120,758 hash=064ea3..d8afb8 blocks=1 txs=1 mgas=0.047 elapsed=\"601.793\u00b5s\" mgasps=77.955  age=12h6m17s  snapdiffs=168.16KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:57:50.121] Chain head was updated                   number=112,120,758 hash=064ea3..d8afb8 root=3c7001..65075e elapsed=\"49.289\u00b5s\"  age=12h6m17s\r\n11|op-geth  | INFO [11-13|21:58:02.069] Starting work on payload                 id=0xdf675242fb653f75\r\n11|op-geth  | INFO [11-13|21:58:02.071] Imported new potential chain segment     number=112,120,759 hash=b65b8a..d5ad65 blocks=1 txs=1 mgas=0.050 elapsed=\"524.875\u00b5s\" mgasps=96.192  age=12h6m27s  snapdiffs=168.47KiB triedirty=980.36KiB\r\n11|op-geth  | INFO [11-13|21:58:02.071] Chain head was updated                   number=112,120,759 hash=b65b8a..d5ad65 root=e03402..146f5f elapsed=\"39.48\u00b5s\"   age=12h6m27s\r\n11|op-geth  | INFO [11-13|21:58:02.087] Starting work on payload                 id=0xf3fb4da6ac734b29\r\n11|op-geth  | INFO [11-13|21:58:02.089] Imported new potential chain segment     number=112,120,760 hash=2dfe4a..1f87c3 blocks=1 txs=1 mgas=0.064 elapsed=\"319.647\u00b5s\" mgasps=200.224 age=12h6m25s  snapdiffs=168.64KiB triedirty=979.80KiB\r\n11|op-geth  | INFO [11-13|21:58:02.090] Chain head was updated                   number=112,120,760 hash=2dfe4a..1f87c3 root=c49fb3..212673 elapsed=\"32.239\u00b5s\"  age=12h6m25s\r\n11|op-geth  | INFO [11-13|21:58:02.105] Starting work on payload                 id=0x8d8f1ecef04ebb5c\r\n11|op-geth  | INFO [11-13|21:58:02.106] Imported new potential chain segment     number=112,120,761 hash=100c0d..4b2f96 blocks=1 txs=1 mgas=0.047 elapsed=\"358.736\u00b5s\" mgasps=130.740 age=12h6m23s  snapdiffs=168.81KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:58:02.107] Chain head was updated                   number=112,120,761 hash=100c0d..4b2f96 root=3aa186..d0ead3 elapsed=\"55.779\u00b5s\"  age=12h6m23s\r\n11|op-geth  | INFO [11-13|21:58:02.124] Starting work on payload                 id=0x2587a901af717d91\r\n11|op-geth  | INFO [11-13|21:58:02.126] Imported new potential chain segment     number=112,120,762 hash=f54a0d..59d393 blocks=1 txs=1 mgas=0.047 elapsed=\"466.956\u00b5s\" mgasps=100.440 age=12h6m21s  snapdiffs=168.98KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:58:02.127] Chain head was updated                   number=112,120,762 hash=f54a0d..59d393 root=1aa489..3cb92b elapsed=\"41.929\u00b5s\"  age=12h6m21s\r\n11|op-geth  | INFO [11-13|21:58:02.144] Starting work on payload                 id=0x2f0e00eeca4eadad\r\n11|op-geth  | INFO [11-13|21:58:02.146] Imported new potential chain segment     number=112,120,763 hash=826fea..989448 blocks=1 txs=1 mgas=0.047 elapsed=\"523.335\u00b5s\" mgasps=89.619  age=12h6m19s  snapdiffs=169.15KiB triedirty=979.84KiB\r\n11|op-geth  | INFO [11-13|21:58:02.147] Chain head was updated                   number=112,120,763 hash=826fea..989448 root=190203..c39008 elapsed=\"53.319\u00b5s\"  age=12h6m19s\r\n````\r\n\r\nThe op-geth being 12 hours behind has been going on for many days now, I followed the official stable setup parameters and earlier on it has been running fine, I don't know what the problem is?", "CLOSED", 0, "cheneyweb", "2023-11-13T14:05:26Z", "2024-01-05T01:02:48Z", "2024-01-05T01:02:47Z", "ethereum-optimism/op-geth", "2025-08-30 07:16:53"]
["I_kwDOH2Qg5s58HQwI", 218, "flatCallTracer for prebedrock blocks", "# Rationale\r\n\r\nAt https://github.com/ethereum/go-ethereum/pull/26377 this PR Geth introduced `flatCallTracer` which uses `callTracer` as a proxy to collect call stack info and at the end formats the output in Parity style\r\n\r\nCurrently, if I am correct `flatCallTracer` works only for blocks above `105235063` and for older blocks response is \r\n\r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": 1,\r\n    \"result\": [\r\n        {\r\n            \"error\": \"tracer not found\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nWhere older blocks support `callTracer` (which means that they should support `flatCallTracer` as well - this is just a different format)\r\n\r\nThis alignment will help a lot of data pipelines to align approaches add process all blockchains using Parity style traces since block 0.\r\n\r\nIf I am doing something wrong, feel free to advice how to solve that problem.", "OPEN", 0, "MRabenda", "2024-01-15T15:40:43Z", "2024-01-16T19:29:43Z", null, "ethereum-optimism/op-geth", "2025-08-30 07:16:57"]
["I_kwDOH2Qg5s59W6m3", 229, "The node synchronization is stuck. The node synchronization from 0 is stuck again", ":9767781\r\nt=2024-01-27T11:08:31+0800 lvl=info msg=\"Received signed execution payload from p2p\" id=0x02c77013b2e958dbc596a8a9ca7408f619df02e9e64f82c57b3fe401c7aa92c7:9767782 peer=16Uiu2HAmSuoZXHRukCU14cbDfTZCnkP2JKd5PFvnGxTuhWvNLr7n\r\nt=2024-01-27T11:08:31+0800 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x02c77013b2e958dbc596a8a9ca7408f619df02e9e64f82c57b3fe401c7aa92c7:9767782\r\nt=2024-01-27T11:08:32+0800 lvl=warn msg=\"Failed to share forkchoice-updated signal\" state=\"&{HeadBlockHash:0x570ff94038b3733f0219180341fe9923ef9d1dd4bc184e6e67e927d2db80db09 SafeBlockHash:0x570ff94038b3733f0219180341fe9923ef9d1dd4bc184e6e67e927d2db80db09 FinalizedBlockHash:0x2a85e0b859752dde851e92b72732a7f50ecbd5881c6652369969ccbd45a11ee5}\" err=\"Invalid parameters\"\r\nt=2024-01-27T11:08:32+0800 lvl=warn msg=\"Derivation process temporary error\"     attempts=33 err=\"engine stage failed: temp: temporarily cannot insert new safe block: failed to create new block via forkchoice: unrecognized rpc error: Invalid parameters\"\r\nt=2024-01-27T11:08:33+0800 lvl=info msg=\"Received signed execution payload from p2p\" id=0x6924ff95a94bb8fea99f2d53995343a18e1452e4a4d909f1b376a02ec3340129:9767783 peer=16Uiu2HAmKosB2Havkc2BuBUC5HBcNRv1oMeqH47ABa1tKtdcPwcH\r\nt=2024-01-27T11:08:33+0800 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x6924ff95a94bb8fea99f2d53995343a18e1452e4a4d909f1b376a02ec3340129:9767783\r\nt=2024-01-27T11:08:35+0800 lvl=info msg=\"disconnected from peer\"                 peer=16Uiu2HAm6ouvNqRmRey6dqJAmouWWoQduWXuWaagHWq3qV3ZUbAD addr=/ip4/88.198.23.21/tcp/9222\r\nt=2024-01-27T11:08:35+0800 lvl=info msg=\"Received signed execution payload from p2p\" id=0x5b347671724c9a8d5e5f0d9981564e39e492ac80b49850c25dc53286eb74d412:9767784 peer=16Uiu2HAmUBPbKnBDqvcB246WFMm8MMYTzKW3z5BtZaEJhCCXMSVV\r\nt=2024-01-27T11:08:35+0800 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x5b347671724c9a8d5e5f0d9981564e39e492ac80b49850c25dc53286eb74d412:9767784\r\nt=2024-01-27T11:08:37+0800 lvl=info msg=\"Received signed execution payload from p2p\" id=0xa9e3dd8d1e83c0268a5b387da49db6a8289eba04487471f1c1565da6d6a07cc8:9767785 peer=16Uiu2HAmKosB2Havkc2BuBUC5HBcNRv1oMeqH47ABa1tKtdcPwcH\r\nt=2024-01-27T11:08:37+0800 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xa9e3dd8d1e83c0268a5b387da49db6a8289eba04487471f1c1565da6d6a07cc8:9767785\r\nt=2024-01-27T11:08:39+0800 lvl=info msg=\"Received signed execution payload from p2p\" id=0xe51a89cc136a46e111bdcca7ae7c0c7c7b6f12c6c8ec447bfdcde7b8f1886e46:9767786 peer=16Uiu2HAmUBPbKnBDqvcB246WFMm8MMYTzKW3z5BtZaEJhCCXMSVV\r\nt=2024-01-27T11:08:39+0800 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xe51a89cc136a46e111bdcca7ae7c0c7c7b6f12c6c8ec447bfdcde7b8f1886e46:9767786", "OPEN", 0, "blocknodehub", "2024-01-27T03:09:54Z", "2024-01-27T03:09:54Z", null, "ethereum-optimism/op-geth", "2025-08-30 07:17:01"]
["I_kwDOH2Qg5s54AYpm", 195, "Snap Sync: How to handle unprefixed code", "We had to revert an upstream geth change around using ContractCodeWithPrefix to just getting ContractCode. We may need to do this migration ourselves. This is the change we should look into undoing: https://github.com/ethereum-optimism/op-geth/pull/105/files\r\n", "CLOSED", 0, "trianglesphere", "2023-11-28T00:28:24Z", "2024-01-25T21:26:40Z", "2024-01-25T21:26:40Z", "ethereum-optimism/op-geth", "2025-08-30 07:17:01"]
["I_kwDOH2Qg5s5-H799", 238, "`debug_traceBlockByNumber` gives a `0x00..00` transaction hash on pre-bedrock blocks", "This issue was reported to me and I'm relaying it here.\r\n\r\n#### System information\r\n\r\nArchive node\r\nop-node: v1.3.2\r\nop-geth: v1.101304.2\r\nl2geth: ethereumoptimism/l2geth:0.5.31\r\n\r\n#### Expected behaviour\r\n\r\nReturn the actual transaction hash that is reported by `l2geth` and block exploreres.\r\n\r\n#### Actual behaviour\r\n\r\nWhen running `debug_traceBlockByNumber` on some pre bedrock blocks and are getting this transaction hash: `0x0000000000000000000000000000000000000000000000000000000000000000`, but they're seeing the actual transaction hash on block explorers.\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nTo get the `0x00..00` txns hash, make the following request on `op-geth`\r\n\r\n```\r\ncurl NODE-URL/AUTH-KEY -X POST -H \"Content-Type: application/json\" --data '{\r\n    \"id\": 1,\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"debug_traceBlockByNumber\",\r\n    \"params\": [\r\n        \"0x73706\",\r\n        { \"tracer\": \"callTracer\", \"timeout\": \"60s\", \"tracerConfig\": { \"withLog\": true, \"onlyTopCall\": false } }\r\n  ]\r\n}' | jq\r\n```\r\n\r\nResult:\r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": [\r\n    {\r\n      \"txHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n      \"result\": {\r\n        \"calls\": [\r\n          {\r\n            \"calls\": [\r\n```\r\n\r\nTracing the txn for block `0x73706` but from the txn hash from the [explorer](https://optimistic.etherscan.io/txs?block=472838)\r\n\r\n```\r\ncurl NODE-URL/AUTH-KEY \\\r\n-X POST \\\r\n-H \"Content-Type: application/json\" \\\r\n--data '{\"method\":\"debug_traceTransaction\",\"params\":[\"0xdcd888c5364c8292e308b64acf48aa9ba7d2b67c7e10504d086b5d51fdd7a824\", {\"tracer\": \"callTracer\", \"timeout\": \"60s\", \"tracerConfig\": { \"withLog\": true, \"onlyTopCall\": false } }],\r\n\"id\":1,\"jsonrpc\":\"2.0\"}' |\r\nSome additional info:\r\nwhen we do eth_getBlockByNumber for the same problematic block we get the correct txn hash but with debug_traceBlockByNumber it gives 0x00\u2026\r\ncurl http://localhost:8545/ \\\r\n-X POST \\\r\n-H \"Content-Type: application/json\" \\\r\n-d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByNumber\",\"params\":[\"0x73706\", true],\"id\":0}' | jq -r '.result.transactions[].hash'\r\n\r\n0xdcd888c5364c8292e308b64acf48aa9ba7d2b67c7e10504d086b5d51fdd7a824 \r\n```\r\n\r\n#### Additional Information\r\n\r\n- When making the request directly to `l2geth` or `op-erigon` you get the expected result.\r\n- @mslipper has a hunch that there was a change in how the JSON was represented between `l2geth` and `op-geth`\r\n", "OPEN", 0, "sbvegan", "2024-02-02T23:54:34Z", "2024-02-02T23:56:07Z", null, "ethereum-optimism/op-geth", "2025-08-30 07:17:06"]
["I_kwDOKIwiaM59T2Oi", 450, "[DOCS] Archive Node Snapshot links are giving 404s", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nWe need to fix the archive node snapshot links, I've already flagged this to devinfra\r\n\r\n## Description of the Documentation You'd Like\r\nThe links on the archive snapshots are giving 404 errors:\r\n\r\n![Screenshot 2024-01-26 at 6 54 37\u202fAM](https://github.com/ethereum-optimism/docs/assets/85043086/fc83eebd-3e62-44cc-905e-63f795d37c47)\r\n\r\n![Screenshot 2024-01-26 at 6 54 41\u202fAM](https://github.com/ethereum-optimism/docs/assets/85043086/e7445e0f-cfd0-4c9d-9586-2b569f87be61)\r\n\r\n\r\n\r\n## Links to Related Pages\r\n- https://docs.optimism.io/builders/node-operators/management/snapshots\r\n\r\n## Additional Context\r\n\r\nn/a\r\n", "CLOSED", 0, "sbvegan", "2024-01-26T14:56:10Z", "2024-01-30T19:32:43Z", "2024-01-30T19:32:43Z", "ethereum-optimism/docs", "2025-08-30 07:17:25"]
["I_kwDOKIwiaM58foZ1", 434, "[DOCS] Add PR title", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\r\n\r\n## Description of the Documentation You'd Like\r\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\r\n\r\n## Links to Related Pages\r\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \r\n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "Ivantahdbxk", "2024-01-18T16:38:40Z", "2024-01-31T00:42:12Z", "2024-01-31T00:42:12Z", "ethereum-optimism/docs", "2025-08-30 07:17:25"]
["I_kwDOKIwiaM579EEu", 423, "Update NFT Tools/ThirdWeb", "Update ThirdWeb section\r\n\r\n- multi-chain ([all EVM chains](https://thirdweb.com/dashboard/infrastructure/rpc-edge) or if you think a number fits better 1100+)\r\n- no-code deployment  :white_check_mark:\r\n- pricing this will be updated soon can we possibly just link to pricing page without a description: (https://thirdweb.com/pricing)\r\n- image hosting (just IPFS)", "CLOSED", 0, "cpengilly", "2024-01-12T19:54:49Z", "2024-01-29T21:18:41Z", "2024-01-29T21:18:41Z", "ethereum-optimism/docs", "2025-08-30 07:17:25"]
["I_kwDOKIwiaM54-tZF", 265, "[FEATURE] Editable live code samples in docs tutorials", "Embed, editable live code examples in high-value tutorials (e.g., [viem](https://viem.sh/docs/getting-started.html))", "CLOSED", 0, "cpengilly", "2023-12-07T01:54:04Z", "2024-01-31T00:52:28Z", "2024-01-31T00:52:28Z", "ethereum-optimism/docs", "2025-08-30 07:17:25"]
["I_kwDODjvEJM57dMzb", 8890, "SDK update 3.1.7 broke estimateTotalGasCost", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nThe lastest SDK release introduced a bug in its fix https://github.com/ethereum-optimism/optimism/pull/8836 \r\nThe[ `estimateTotalGasCost`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/sdk/src/l2-provider.ts#L133) function calls internally the updated `estimateL1GasCost` function and `estimateL2GasCost` function. While the first one does not allow a `from` address the second one requires a `from` address to work. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Call `estimateTotalGasCost` with a valid transaction including a from address (e.g. a simple approval)\r\n```json\r\n{\r\n  \"data\":\"0x095ea7b30000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eaeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\r\n  \"to\":\"0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85\",\r\n  \"from\":\"0x56F19F4F9A4cbd98C222bB5A79B9255CD4d9D0B0\",\r\n}\r\n```\r\n2. The call fails with\r\n```\r\ninvalid object key - from (argument=\\\"transaction:from\\\", value={\\\"data\\\":\\\"0x095ea7b30000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eaeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\",\\\"to\\\":\\\"0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85\\\",\\\"from\\\":\\\"0x56F19F4F9A4cbd98C222bB5A79B9255CD4d9D0B0\\\",\\\"nonce\\\":0}, code=INVALID_ARGUMENT, version=properties/5.7.0)\r\n```\r\n\r\n**Expected behavior**\r\nThe estimate should return a valid BigNumber which combines both l1 and l2 gas costs.\r\n\r\n**Additional context**\r\nI would recommend that `estimateL1GasCost` is updated again to omit the `from` address and any other parameters that are not allowed (e.g. `maxFeePerGas`) so it can be called with any transaction again.\r\n", "CLOSED", 0, "maxklenk", "2024-01-08T21:27:46Z", "2024-01-11T09:17:02Z", "2024-01-10T01:47:02Z", "ethereum-optimism/optimism", "2025-08-30 07:17:50"]
["I_kwDODjvEJM56gEO0", 8770, "Ox Flashbot", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS:\r\n - Package Version (or commit hash):\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "philliprossii", "2023-12-24T22:28:06Z", "2024-01-14T22:17:07Z", "2023-12-24T23:23:52Z", "ethereum-optimism/optimism", "2025-08-30 07:17:50"]
["I_kwDODjvEJM54AZfI", 8307, "Snap Sync: Simple checkpoint block flag", "Add a flag which specifies an L2 checkpoint block.\r\n", "CLOSED", 0, "trianglesphere", "2023-11-28T00:31:46Z", "2024-01-11T19:37:58Z", "2024-01-11T19:37:57Z", "ethereum-optimism/optimism", "2025-08-30 07:17:50"]
["I_kwDODjvEJM5uFfrL", 6739, "op-service: pprof util package improvements", "- [ ] profile from start of program\r\n  We should add the option to start profiling from the start of the program (with one of the profile types) to capture program start-up performance, and not have to call the pprof http API after startup.\r\n- [ ] Use `cli.GenericFlag` to validate flag contents upon CLI flag parsing time.", "CLOSED", 0, "protolambda", "2023-08-11T14:33:26Z", "2024-01-09T15:05:06Z", "2024-01-09T15:05:06Z", "ethereum-optimism/optimism", "2025-08-30 07:17:50"]
["I_kwDODjvEJM5jgixy", 5462, "It takes long time to sync to the latest block.. more than 3 weeks ", "**Describe the bug**\r\nSince the 'nonce too high error' I have to resync the optimism node \r\nI use the snapshot https://archive.org/download/optimism-snapshot/op-replica_geth-2023-02-20.tar.zst and https://archive.org/download/optimism-snapshot/op-replica_dtl-2023-02-20.tar.zst\r\nSync L2 from alchemy.\r\nBut I need to sync from block 75xxxxxx to 90795825  , the node synced around 600 block/min , it will take several weeks to reach the latest block.\r\nCan I make it faster ?  \r\nI have another node which synced L1 from my erigon achive node ... I guess it will be in syncing forever ... 1 week only 10 million blocks..\r\n\r\n**System Specs:**\r\nSystem : aws t2.xlarge (4 CPU,16G MEM, 600G volume)\r\n\r\nPlease help , thanks \r\nBr\r\nLu\r\n\r\n", "CLOSED", 0, "luwang920", "2023-04-15T16:29:59Z", "2024-01-12T21:45:11Z", "2023-06-16T19:26:08Z", "ethereum-optimism/optimism", "2025-08-30 07:17:50"]
["I_kwDOFpg0Ns56AZMb", 608, "Token missing", "I'm not 100% sure it's a bug, but didn't find another place to report it for help\r\n\r\n**Describe the bug**\r\nLast week, the token mpETH's PR was approved. I see the token ok the token list, and in the data folder. On https://app.optimism.io/bridge/deposit if I add the token as a custom token, it shows, but it isn't displayed on the main list on the website. I'm not sure if I have to wait longer, if there is an issue or if a step is missing.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to https://app.optimism.io/bridge/deposit\r\n2. Click on token selector\r\n3. Token doesn't appear\r\n\r\n==================================================================\r\n\r\n1. Go to https://app.optimism.io/bridge/deposit\r\n2. Click on token selector\r\n3. Click on custom\r\n5. Input 0x819845b60a192167ed1139040b4f8eca31834f27\r\n6. Click on `Add custom token`\r\n7. Check `MetaPoolETH` token is displayed\r\n\r\n**Expected behavior**\r\nI expect for the MetaPoolETH token to be displayed in the main list\r\n\r\n**System Specs:**\r\n - OS: Linux Zorin\r\n \r\nThanks in advance", "CLOSED", 0, "Calcifer1001", "2023-12-18T15:31:27Z", "2024-01-02T01:46:54Z", "2024-01-02T01:46:54Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 07:17:50"]
["I_kwDOFpg0Ns55421A", 598, "fault", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS:\r\n - Package Version (or commit hash):\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "IrieHenna", "2023-12-16T20:23:35Z", "2023-12-31T01:47:37Z", "2023-12-31T01:47:37Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 07:17:50"]
["I_kwDOFpg0Ns5psmK8", 402, ".github/workflows /stale.yml: Consider increasing timeout threshold for stale issues/PRs", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThere is currently a 7-day auto-close on all issues and pull requests; this might make it trickier to manage this repo as contribution volume increases, because maintainers who are only looking at open issues/pull requests may not realize there were some pending review that ended up getting automatically closed.\r\n\r\nPeople who are trying to contribute/add assets will also need to reopen when this happens; looks like this has happened a couple of times.\r\n\r\nLooks like there are a couple of recent PRs this may have inadvertently happened with: https://github.com/ethereum-optimism/ethereum-optimism.github.io/pulls?q=is%3Apr+is%3Aclosed+label%3AStale\r\n\r\n**Describe the solution you'd like**\r\nConsider increasing the timeout threshold for closing stale issues and pull requests to something greater, perhaps 14d or 30d.\r\n", "CLOSED", 0, "wbnns", "2023-06-25T13:53:26Z", "2024-01-04T18:25:11Z", "2024-01-04T18:25:10Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 07:17:50"]
["I_kwDODjvEJM58YKsL", 9044, "Getting error on op-geth and op-node when setting up OP archive node", "I downloaded the latest archive snapshots \r\n\r\n`https://datadirs.optimism.io/mainnet-2024-01-03.tar.zst`\r\n\r\nbelow are the errors \r\n\r\n**OP-geth error**\r\n\r\n```\r\n  geth[802120]: Fatal: Failed to register the Ethereum service: database contains incompatible genesis (have d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3, new 7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b)\r\n\r\n```\r\n\r\n\r\nService file flags (I have separate l2geth ndoe too.)\r\n\r\n`ExecStart=/home/ubuntu/op-geth/build/bin/geth --datadir=/data/datadir --http --http.port=8545 --http.addr=0.0.0.0 --authrpc.addr=localhost --authrpc.jwtsecret=./jwt.txt --verbosity=3 --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io/ --nodiscover --syncmode=full --maxpeers=0  --op-network=op-mainnet --rollup.historicalrpc=http://10.199.11.3:8546 --gcmode archive\r\n`\r\n\r\n\r\n**Op-node error**\r\n\r\n```\r\nl1_block_number=17,422,590 regolith_time=\"@ genesis\" canyon_time=\"@ 1704992401 ~ Thu Jan 11 17:00:01 UTC 2024\" delta_time=\"(not configured)\" eclipse_time=\"(not configured)\" fjord_time=\"(not configured)\" interop_time=\"(not configured)\"\r\n op-node[801494]: t=2024-01-17T16:51:03+0000 lvl=info msg=\"Initializing rollup node\" version=v0.0.0-f2229b8b-1703194093\r\n op-node[801494]: t=2024-01-17T16:51:04+0000 lvl=eror msg=\"Error initializing the rollup node\" err=\"failed to init L2: failed to get L2 genesis blockhash: failed to determine L2BlockRef of height 105235063, could not get payload: not found\"\r\n op-node[801494]: t=2024-01-17T16:51:04+0000 lvl=crit msg=\"Application failed\"                 message=\"failed to setup: unable to create the rollup node: failed to init L2: failed to get L2 genesis blockhash: failed to determine L2BlockRef of height 105235063, could not get payload: not found\"\r\n.\r\n```\r\n\r\n\r\n**Service file flags'**\r\n\r\n`ExecStart=/home/ubuntu/optimism/op-node/bin/op-node         --l1=https://ethereum.xxxx.xyz/ethmainnetnvl?apikey=xxxxxx         --l1.rpckind=basic         --l2=ws://localhost:8551         --l2.jwt-secret=./jwt.txt         --network=op-mainnet         --rpc.addr=0.0.0.0         --rpc.port=8547`\r\n\r\n\r\nplease advice ", "CLOSED", 0, "danlix2000", "2024-01-17T18:06:19Z", "2024-01-18T03:04:36Z", "2024-01-18T03:04:36Z", "ethereum-optimism/optimism", "2025-08-30 07:17:50"]
["I_kwDODjvEJM54AZ1B", 8308, "Snap Sync: Modify op-node to use the P2P unsafe block as the syncing target", "The op-node will now need to handle long syncing gaps and needs to handle finalization which doesn't start from genesis.", "CLOSED", 0, "trianglesphere", "2023-11-28T00:33:14Z", "2024-01-19T18:32:25Z", "2024-01-19T18:32:25Z", "ethereum-optimism/optimism", "2025-08-30 07:17:50"]
["I_kwDOKIwiaM58Aurx", 427, "Feedback for \u201cCreating Your Own L2 Rollup Testnet\u201d", "On the step for Deploying the L1 Contracts...\r\nThe error message listed in the guide:\r\nIf you see a nondescript error that includes EvmError: Revert and Script failed then you likely need to change the IMPL_SALT environment variable. This variable determines the addresses of various smart contracts that are deployed via CREATE2. If the same IMPL_SALT is used to deploy the same contracts twice, the second deployment will fail. You can generate a new IMPL_SALT by running direnv allow anywhere in the Optimism Monorepo.\r\n\r\nI am receiving this sort of error, but I follow the guide and attempt to rerun direnv allow, however this does not stop the error from coming through.", "CLOSED", 0, "Ezra-Labs", "2024-01-14T03:34:48Z", "2024-01-26T02:55:46Z", "2024-01-25T17:43:56Z", "ethereum-optimism/docs", "2025-08-30 07:17:51"]
["I_kwDOKIwiaM55aIwM", 286, "[DOCS] [TUTORIALS] Integrate Testnet Faucet in 10 Tutorials", "Tightly Integrate testnet faucet with top 10 most-used tutorials to solve major pain point for devs", "CLOSED", 0, "cpengilly", "2023-12-12T03:15:31Z", "2024-01-25T17:51:36Z", "2024-01-25T17:51:36Z", "ethereum-optimism/docs", "2025-08-30 07:17:51"]
["I_kwDOKIwiaM53o6Gh", 200, "[AUDIT] update analytics-tools", "2 steps to update this page https://docs.optimism.io/builders/tools/monitoring/analytics-tools:\r\n1. Update the list of OP Dashboards\r\n    - [[OP Stack Chains - L1 Mainnet Activity & Fees Paid, L2 OP Chain Activity](https://dune.com/oplabspbc/op-stack-chains-l1-activity)](https://dune.com/oplabspbc/op-stack-chains-l1-activity)\r\n    - [[OP Mainnet Protocol Metrics](https://dune.com/optimismfnd/Optimism)](https://dune.com/optimismfnd/Optimism)\r\n    - [[Popular Apps on OP Mainnet and Project Usage Trends](https://dune.com/optimismfnd/Optimism-Project-Usage-Trends)](https://dune.com/optimismfnd/Optimism-Project-Usage-Trends)\r\n    - [[OP Token House Delegates](https://dune.com/optimismfnd/optimism-op-token-house)](https://dune.com/optimismfnd/optimism-op-token-house)\r\n    - [[Superchain NFTs](https://dune.com/oplabspbc/superchain-nfts)](https://dune.com/oplabspbc/superchain-nfts)\r\n2. Add additional tools/resources (i.e. our github, defillama, growthepie)\r\n    - DeFi Stats:\u00a0https://defillama.com/\r\n    - L2 Usage and comparison:\u00a0https://www.growthepie.xyz/\r\n    - OP Analytics (incentive tracking, helper functions, public analysis):\u00a0https://github.com/ethereum-optimism/op-analytics\r\n    - Contribute to NumbaNERDs:\u00a0https://app.dework.xyz/optimism-community/main-space-35638/overview\u00a0or requests:\u00a0https://github.com/ethereum-optimism/op-analytics/issues", "CLOSED", 0, "cpengilly", "2023-11-22T22:47:43Z", "2024-01-25T17:43:18Z", "2024-01-25T17:43:18Z", "ethereum-optimism/docs", "2025-08-30 07:17:51"]
["I_kwDOKIwiaM52aS-1", 118, "[FEEDBACK] Update dev-node tutorial + github wiki", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nFeedback from devconnect about dev-node tutorial\r\n\r\n## Description of the Documentation You'd Like\r\nI'll point out some minor issues in the docs that we noticed during setup:\r\n\r\n- The [optimism docs](https://community.optimism.io/docs/developers/build/dev-node/#) do not mention that you need to build the bedrock contracts prior to the deployment (only the [github wiki](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/meta/devnet.md) has this info).\r\n- The contracts are located in the packages/bedrock-contracts, while the github wiki instructs to build from packages/contracts (does not exist).\r\n- When building the contracts using yarn (as per the guidelines in the docs), we were prompted to use pnpm instead. Using pnpm the installation and build process worked fine.\r\n\r\n## Links to Related Pages\r\nn/a\r\n\r\n## Additional Context\r\ndev-node tutorial and github wiki need to be updated to match\r\n", "CLOSED", 0, "cpengilly", "2023-11-10T00:06:33Z", "2024-01-25T17:53:23Z", "2024-01-25T17:53:22Z", "ethereum-optimism/docs", "2025-08-30 07:17:51"]
["I_kwDODjvEJM57C1dT", 8819, "--rpc.txfeecap=0 isn't being honored, returning tx fee exceeds the configured cap", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nWe are getting an error on our nodes that says: \r\n`\"message\":\"tx fee (1.63 ether) exceeds the configured cap (1.00 ether)`\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nHere is an example of a transaction that is 1.63 ETH that is getting denied and we cant figure out why the txfeecap isn't being overridden: \r\n\r\n```\r\n\u279c  ~ curl -X POST \"ADD_ANY_URL\"      \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\"jsonrpc\":\"2.0\",\"id\":61092,\"method\":\"eth_sendRawTransaction\",\"params\":[\"0xf8e7821d1f86018ecb5d3235830e909e941c8a8e0991a18852951cbc18fb19d1f44dcc403d80b87e06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe137a03e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0aa00c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05\"]}'\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":61092,\"error\":{\"code\":-32000,\"message\":\"tx fee (1.63 ether) exceeds the configured cap (1.00 ether)\"}}\r\n```\r\n\r\nI have [decoded the transaction](https://www.ethereumdecoder.com/?search=0xf8e7821d1f86018ecb5d3235830e909e941c8a8e0991a18852951cbc18fb19d1f44dcc403d80b87e06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe137a03e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0aa00c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05), and here is what it is returning: \r\n\r\n```\r\n{\"nonce\":7455,\"gasPrice\":{\"_hex\":\"0x018ecb5d3235\"},\"gasLimit\":{\"_hex\":\"0x0e909e\"},\"to\":\"0x1c8a8e0991a18852951cbc18fb19d1f44dcc403d\",\"value\":{\"_hex\":\"0x0\"},\"data\":\"0x06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe1\",\"v\":55,\"r\":\"0x3e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0a\",\"s\":\"0x0c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05\"}\r\n```\r\n\r\n```\r\n\u276f hexdec 0x0e909e\r\n954526\r\n\u276f hexdec 0x018ecb5d3235\r\n1712808866357\r\nMultiply those numbers together and you get:\r\n1.634920595968282e18\r\n```\r\n\r\nI also have tested public URLs and they all return the same: \r\n\r\n```\r\ncurl -X POST \"https://optimism.publicnode.com\"      \\\r\n     -H \"Content-Type: application/json\" \\\r\n     -d '{\"jsonrpc\":\"2.0\",\"id\":61092,\"method\":\"eth_sendRawTransaction\",\"params\":[\"0xf8e7821d1f86018ecb5d3235830e909e941c8a8e0991a18852951cbc18fb19d1f44dcc403d80b87e06cdc42b0000000000000000000016292d14d1778f9df3eee5473a9640f13682e3846f61febc3655000000000a03a0500e2adf9d530568f5c0a2de713a54991e01858fd27a38324018492118000000000003f393c0b1824f3ff585c31ffa3706d1cce9d525a00f1c7d4a2911754ca114000000000000000000001700fbe137a03e77cca2d7965447d699ad64baacc40569d236282f47e5033b2741fd85e66f0aa00c2fb89765726a8e99f209cf9e7efc026355c1864ce1acee0909878b102c0e05\"]}'\r\n     \r\n   {\"jsonrpc\":\"2.0\",\"id\":61092,\"error\":{\"code\":-32000,\"message\":\"tx fee (1.63 ether) exceeds the configured cap (1.00 ether)\"}}\r\n```\r\n\r\n**System Specs:**\r\n\r\nAnd here is the following config file (some unnecessary things have been redacted):\r\n\r\n\r\n```\r\n[Service]\r\nUser            = optimism\r\nExecStart   = /usr/local/bin/geth \\\r\n                    --ws \\\r\n                    --ws.port=8546 \\\r\n                    --ws.addr=0.0.0.0 \\\r\n                    --ws.origins=\"*\" \\\r\n                    --http \\\r\n                    --http.port=8545 \\\r\n                    --http.addr=0.0.0.0 \\\r\n                    --http.vhosts=\"*\" \\\r\n                    --http.corsdomain=\"*\" \\\r\n                    --authrpc.addr=0.0.0.0 \\\r\n                    --authrpc.port=8551 \\\r\n                    --datadir=/home/optimism \\\r\n                    --verbosity=3 \\\r\n                    --rollup.disabletxpoolgossip=true \\\r\n                    --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io \\\r\n                    --rollup.historicalrpc=http://opti-l2geth-mainnet.<URL>:8525 \\\r\n                    --rollup.historicalrpctimeout=300s \\\r\n                    --nodiscover \\\r\n                    --networkid=10 \\\r\n                    --op-network=op-mainnet \\\r\n                    --syncmode=full \\\r\n                    --snapshot=false \\\r\n                    --maxpeers=0 \\\r\n                    --txlookuplimit=0 \\\r\n                    --rpc.txfeecap=0 \\\r\n                    --gcmode=full \\\r\n                    --rollup.halt=major\r\nRestart         = on-failure \r\n```\r\n\r\n**Additional context**\r\nWe cant seem to find anywhere in the source code that seems this would be honored. Is it possible the sequencer is rejecting it? ", "CLOSED", 0, "yaanakbr", "2024-01-03T16:46:44Z", "2024-01-03T16:49:11Z", "2024-01-03T16:49:11Z", "ethereum-optimism/optimism", "2025-08-30 07:18:00"]
["I_kwDODjvEJM5258RY", 8180, "feat(devnet): Move from `geth` -> `anvil` for `make devnet-allocs`", " ## Overview\r\n\r\nCurrently, the `make devnet-allocs` job uses `geth` to deploy L1 contracts and generate the genesis state of L1 for `op-e2e`. `geth` is a bit heavy for what we need here.\r\n\r\n**Describe the solution you'd like**\r\nThe `geth` invocation can be found [here](https://github.com/ethereum-optimism/optimism/blob/develop/bedrock-devnet/devnet/__init__.py#L163-L187) in the devnet script. Rather than using `debug_dumpBlock` in `geth`, we should just be able to use `anvil`'s `anvil_dumpState` endpoint.\r\n\r\nAnvil's `anvil_dumpState` endpoint returns a gzip compressed hex string of a JSON object with the following schema:\r\n```json\r\n{\r\n    \"accounts\": {\r\n        \"0x...00\": {\r\n            \"nonce\": \"<hex_number>\",\r\n            \"balance\": \"<hex_number>\",\r\n            \"code\": \"<bytes>\",\r\n            \"storage\": {\r\n                 \"<32b_slot>\": \"<32b_value>\"\r\n            }\r\n        },\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nTo easily convert the gzipped state back to JSON:\r\n```sh\r\ncast rpc anvil_dumpState --rpc-url http://localhost:8545 | jq -r | xxd -r -p | gzip -d\r\n```\r\n\r\nIn addition, there are several default accounts in anvil that will be present within this state dump. To avoid this, pass `-a 1` to the anvil binary to only generate 1 default account, and filter it out when serializing the allocs in the devnet script. The create2 deployer is also deployed by default @ `0x4e59b44847b379578588920ca78fbf26c0b4956c`\r\n\r\n### Output\r\n\r\nThe end result should be that the devnet is no longer reliant on `geth` to generate the state snapshots for `op-e2e` L1 allocs.", "CLOSED", 0, "clabby", "2023-11-15T14:33:49Z", "2024-01-03T05:40:25Z", "2024-01-03T05:40:24Z", "ethereum-optimism/optimism", "2025-08-30 07:18:00"]
["I_kwDOKSJyfM5-csrm", 90, "[xs] Implement Promotions section", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:44:02Z", "2024-02-09T00:50:46Z", "2024-02-09T00:50:46Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-csqy", 89, "[xs] Implement Support section", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:44:00Z", "2024-02-09T00:50:42Z", "2024-02-09T00:50:42Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-csp2", 88, "[s] Implement UI for Build & Launch & Grow sections", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:58Z", "2024-02-09T00:47:35Z", "2024-02-09T00:47:35Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-cspE", 87, "[s] Implement Tile component in ui-components package", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:56Z", "2024-02-08T03:00:36Z", "2024-02-08T03:00:36Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-csm1", 85, "[xs] Implement footer section for console UI", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:52Z", "2024-02-06T18:45:36Z", "2024-02-06T18:45:36Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-cslb", 84, "[xs] Implement clickable icons with spring animation", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:49Z", "2024-02-06T18:45:30Z", "2024-02-06T18:45:30Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-cskO", 83, "[s] Main layout section with page toggle", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:47Z", "2024-02-06T18:45:24Z", "2024-02-06T18:45:24Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-csdt", 78, "[s] Spike & set up privy demo", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:36Z", "2024-02-06T18:45:09Z", "2024-02-06T18:45:09Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-csb8", 77, "[xs] Generate deploy previews with netlify + set up env vars", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:33Z", "2024-02-06T18:45:01Z", "2024-02-06T18:45:01Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-csa4", 76, "[s] Implement skeleton UI of the console homepage", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:30Z", "2024-02-06T18:44:55Z", "2024-02-06T18:44:55Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOKSJyfM5-csZ5", 75, "[s] Create a new package for dappConsole in our apps directory", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:27Z", "2024-02-06T18:44:46Z", "2024-02-06T18:44:46Z", "ethereum-optimism/ecosystem", "2025-08-30 07:28:48"]
["I_kwDOH2Qg5s54AYRS", 194, "Snap Sync: Add a netrestrict flag which only applies to the txpool", "We want to be able to separate the txpool part of the eth P2P namespace from the block & receipt fetching.\r\n\r\nSee: https://github.com/ethereum/devp2p/blob/master/caps/eth.md\r\n\r\nThis feature should disable the txpool by default & should opt-in to sharing the txpool to specific CIDR network masks.", "CLOSED", 0, "trianglesphere", "2023-11-28T00:26:38Z", "2024-02-08T00:42:33Z", "2024-02-08T00:42:33Z", "ethereum-optimism/op-geth", "2025-08-30 07:28:48"]
["I_kwDOLB-lzc591cZL", 20, "Add `doctoc` back", "## Overview\r\n\r\nWe removed `doctoc` in #16 in favor of `mdbook-toc`, but some folks prefer viewing the specs on GitHub. Migrate back to `doctoc` and remove the `mdbook-toc` plugin.", "CLOSED", 0, "clabby", "2024-01-31T23:26:02Z", "2024-02-01T19:20:26Z", "2024-02-01T19:20:26Z", "ethereum-optimism/specs", "2025-08-30 07:28:51"]
["I_kwDOLB-lzc5-QbZN", 29, "Dealing with invalid batches in channel reader ", "The spec does not clearly describe the expected behavior for dealing with an invalid batch in the channel reader. The [Channel Reader (Batch Decoding)](https://github.com/ethereum-optimism/specs/blob/598745d96c573ac15c05a1040d27ae021c5a57b2/specs/protocol/derivation.md#channel-reader-batch-decoding) section does not mention anything and only links to the [Batch Format](https://github.com/ethereum-optimism/specs/blob/598745d96c573ac15c05a1040d27ae021c5a57b2/specs/protocol/derivation.md#batch-format) section. There it is mentioned that _unknown versions make the batch invalid (it must be ignored by the rollup node), as do malformed contents_.\r\n\r\nHowever it is unclear what exactly \"ignored\" means and how other errors are handled. It [seems](https://github.com/ethereum-optimism/optimism/blob/afb204893af0c708b2ed2324cc7725e60b1dfa8d/op-node/rollup/derive/channel_in_reader.go#L88) that in the [op-node](https://github.com/ethereum-optimism/optimism/tree/develop/op-node) reference implementation, after any batch decode error (version or simple RLP error) the entire rest of the channel is skipped.\r\n\r\nThis behavior should also be described in the specification. ", "OPEN", 0, "Wollac", "2024-02-05T10:55:52Z", "2024-02-05T10:55:52Z", null, "ethereum-optimism/specs", "2025-08-30 07:32:42"]
["I_kwDODjvEJM5-TwUs", 9354, "Add checks to DisputeGameFactory deployment", "DisputeGameFactory gets deployed in the current deploy scripts but does not have a corresponding checkDisputeGameFactory function, this needs to be added.", "CLOSED", 0, "smartcontracts", "2024-02-05T17:40:33Z", "2024-02-05T19:59:23Z", "2024-02-05T19:59:23Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5-Kvjb", 9330, "Disable EIP1559 on L1", "**Is your feature request related to a problem? Please describe.**\r\nI am trying to deploy the op stack on a chain that doesn't have EIP-1559 functionality (block basefee).\r\nIs there an easy way to turn this off in the op-stack?\r\n\r\n**Describe the solution you'd like**\r\nI would like an argument or config that turns EIP-1559 functionality off, or an implementation of op-geth without EIP-1559 functionality.\r\n\r\n**Describe alternatives you've considered**\r\nI see mustBePostMerge, but changing that to false didn't initially work.\r\n\r\n**Additional context**\r\nOn the command\r\n```\r\ngo run cmd/main.go genesis l2 \\\r\n  --deploy-config ../packages/contracts-bedrock/deploy-config/getting-started.json \\\r\n  --deployment-dir ../packages/contracts-bedrock/deployments/getting-started/ \\\r\n  --outfile.l2 genesis.json \\\r\n  --outfile.rollup rollup.json \\\r\n  --l1-rpc $L1_RPC_URL\r\n```\r\nI get the error\r\n```\r\nmessage=\"error creating l2 genesis: block base fee not set\"\r\n```", "CLOSED", 0, "sbarratt", "2024-02-04T00:06:23Z", "2024-02-04T23:21:18Z", "2024-02-04T23:21:18Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM59z-Lv", 9280, "failed to fetch L1 head for runtime config initialization", "My op-stack chain was running smoothly since last 2 months, it stopped yesterday. what is the reason behind it ?? and how to fix it\r\n\r\nthese are the op-node logs -\r\n\r\n![image](https://github.com/ethereum-optimism/optimism/assets/96972634/2680b70f-61c3-483d-84f4-c52a3ca5df93)\r\n", "CLOSED", 0, "nitantchhajed", "2024-01-31T19:05:03Z", "2024-02-05T00:47:04Z", "2024-02-05T00:47:04Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM59ww0M", 9275, "Centralized node balance query delay problem", "The problem is that after transferring money, the balance is 0 when checking.\r\n", "CLOSED", 0, "hanzhenlong1314", "2024-01-31T11:57:15Z", "2024-02-05T00:47:26Z", "2024-02-05T00:47:26Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM59CprA", 9170, "op-node failed to get receipts from L1", "\r\n**Describe the bug**\r\nIn my environment, the node can't get block receipts from L1 node, which caused the L2 block can't be confirmed. once the node restart, it will take long time to recover.\r\n\r\nthe error log \r\n![image](https://github.com/ethereum-optimism/optimism/assets/7013043/802dd4d8-c795-4567-96ff-1db67781e5a0)\r\n\r\nop-node version : v1.4.0\r\n\r\n**Additional context**\r\nthe L1 node has not been changed in restart period.\r\n", "CLOSED", 0, "wangjiangw", "2024-01-24T09:40:39Z", "2024-02-05T00:55:10Z", "2024-02-05T00:52:15Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM58nLGk", 9101, "Node behind the tip", "Hi,\r\n\r\nwe're experiencing node being behind the tip for cca 200secs, it looks like waves - going up to 200-220secs (last block timestamp vs actual datetime), then it quickly sync up. \r\n\r\nis that a feature or I can improve our config? Using latest 1.4.2 op-node.\r\n\r\n```\r\n      --network=op-mainnet\r\n      --rpc.addr=0.0.0.0\r\n      --rpc.port=<port>\r\n      --p2p.disable\r\n      --l1=<l1 url>\r\n      --l2=<l2 url>\r\n      --l2.jwt-secret=/shared/jwt.txt\r\n      --l1.max-concurrency 20\r\n      --l1.rpc-max-batch-size 60\r\n      --l1.http-poll-interval 1s\r\n      --l1.epoch-poll-interval 60s\r\n      --p2p.peers.hi 50\r\n```\r\n\r\ntried to play with `max-concurrency` and the rest, no effect.\r\n\r\nnode: 128G RAM, NVME, 32 cores AMD EPYC 7371\r\n\r\nThanks\r\ntom", "CLOSED", 0, "tmeinlschmidt", "2024-01-19T14:06:53Z", "2024-02-05T10:53:27Z", "2024-02-05T00:57:39Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM571LUy", 8956, "Issue with new geth-op and geth-node upgrade", "**Describe the bug**\r\nNode could not sync due to to old version with deadline Thu Jan 11 17:00:01 UTC 2024 (unix timestamp: 1704992401)\r\nI upgraded op-node (op-node v1.4.0)  and op-geth (v1.101304.2)\r\n\r\nAdd flags for op-node : --network=op-mainnet and op-geth:  --op-network=op-mainnet\r\n\r\nThe issue with sync\r\n`no peers ready to handle block requests for more P2P requests for L2 block history target=114,696,812 end=ad8ba5..6b8c56:114703049 current=114,702,845`\r\n\r\n**Getting in the log**\r\n\r\n`\r\nINFO [01-11|21:30:47.516] Advancing bq origin                      origin=1a4d5e..2bf44e:18985035 originBehind=false\r\nINFO [01-11|21:30:47.999] Optimistically queueing unsafe L2 execution payload id=0b6659..f0e187:114703076\r\nWARN [01-11|21:30:47.999] Could not add unsafe payload             id=0b6659..f0e187:114703076 timestamp=1,705,004,929 err=\"cannot add duplicate payload 0x0b665981dafac6b2333f229cd605f9cccc14a04599d28a2e225c5ae6e2f0e187:114703076\"\r\nINFO [01-11|21:30:48.139] Advancing bq origin                      origin=bcf8e3..c55968:18985036 originBehind=false\r\nINFO [01-11|21:30:48.139] created new channel                      origin=bcf8e3..c55968:18985036 channel=a4baf8..cb386d length=115,237 frame_number=0 is_last=true\r\nINFO [01-11|21:30:48.139] Reading channel                          channel=a4baf8..cb386d frames=1\r\nINFO [01-11|21:30:48.139] Optimistically queueing unsafe L2 execution payload id=094aa4..36e9e7:114703075\r\nWARN [01-11|21:30:48.139] Could not add unsafe payload             id=094aa4..36e9e7:114703075 timestamp=1,705,004,927 err=\"cannot add duplicate payload 0x094aa41435fce0248848b5001086281f14c0e91ad3ff0c49d1337eb2e636e9e7:114703075\"\r\nINFO [01-11|21:30:48.139] Optimistically queueing unsafe L2 execution payload id=23a2aa..eb7e24:114703074\r\nINFO [01-11|21:30:48.407] attempting connection                    peer=16Uiu2HAmP8nPwENMbsgC7dgv5EmQXKsvbYy5vPjRxBLtpeBdww7x\r\nINFO [01-11|21:30:48.802] Advancing bq origin                      origin=573c31..020b5e:18985037 originBehind=false\r\nINFO [01-11|21:30:49.297] no peers ready to handle block requests for more P2P requests for L2 block history target=114,696,812 end=23a2aa..eb7e24:114703074 current=114,702,846\r\nINFO [01-11|21:30:49.419] Advancing bq origin                      origin=8d0354..d00f8a:18985038 originBehind=false\r\nWARN [01-11|21:30:49.763] failed p2p sync request                  peer=16Uiu2HAm1hmjDZjF27FP1oCQBS8ND9DWXZX1yyRNexTyr7eC5WL3 num=114,702,978 err=\"failed to open stream: failed to negotiate protocol: protocols not supported: [/opstack/req/payload_by_number/10/0]\"\r\nWARN [01-11|21:30:49.906] failed p2p sync request                  peer=16Uiu2HAmNuBC9F56kbHqg6cQj8jbSaRxC47rCd5PYaGhegDg233L num=114,702,975 err=\"failed to open stream: failed to negotiate protocol: protocols not supported: [/opstack/req/payload_by_number/10/0]\"\r\nINFO [01-11|21:30:49.949] Advancing bq origin                      origin=6a076e..7e8bdb:18985039 originBehind=false\r\nINFO [01-11|21:30:50.468] Advancing bq origin                      origin=d6f053..66ce57:18985040 originBehind=false\r\nINFO [01-11|21:30:51.086] Advancing bq origin                      origin=2565a4..899e71:18985041 originBehind=false\r\nINFO [01-11|21:30:51.644] Advancing bq origin                      origin=28e906..6414ee:18985042 originBehind=false\r\nWARN [01-11|21:30:51.644] tx in inbox with unauthorized submitter  origin=28e906..6414ee:18985042 index=166 txHash=6f1176..799430 err=nil\r\nINFO [01-11|21:30:52.243] Advancing bq origin                      origin=c3b336..178def:18985043 originBehind=false\r\nINFO [01-11|21:30:52.733] no peers ready to handle block requests for more P2P requests for L2 block history target=114,696,812 end=23a2aa..eb7e24:114703074 current=114,702,846\r\nINFO [01-11|21:30:52.849] Advancing bq origin                      origin=6171a9..f98789:18985044 originBehind=false\r\nINFO [01-11|21:30:52.850] created new channel                      origin=6171a9..f98789:18985044 channel=a44b20..674004 length=116,023 frame_number=0 is_last=true\r\nINFO [01-11|21:30:52.850] Reading channel                          channel=a44b20..674004 frames=1\r\nINFO [01-11|21:30:53.443] Advancing bq origin                      origin=b45803..1ab2e5:18985045 originBehind=false\r\nWARN [01-11|21:30:53.761] failed p2p sync request                  peer=16Uiu2HAm1hmjDZjF27FP1oCQBS8ND9DWXZX1yyRNexTyr7eC5WL3 num=114,702,862 err=\"failed to open stream: failed to negotiate protocol: protocols not supported: [/opstack/req/payload_by_number/10/0]\"\r\nWARN [01-11|21:30:53.906] failed p2p sync request                  peer=16Uiu2HAmNuBC9F56kbHqg6cQj8jbSaRxC47rCd5PYaGhegDg233L num=114,702,861 err=\"failed to open stream: failed to negotiate protocol: protocols not supported: [/opstack/req/payload_by_number/10/0]\"\r\nINFO [01-11|21:30:54.049] Advancing bq origin                      origin=007ab1..c0763f:18985046 originBehind=false\r\nINFO [01-11|21:30:54.599] Advancing bq origin                      origin=66ddee..eab990:18985047 originBehind=false\r\nINFO [01-11|21:30:55.259] Advancing bq origin                      origin=cc171a..ef0711:18985048 originBehind=false\r\nINFO [01-11|21:30:55.999] Advancing bq origin                      origin=b8ccac..c96942:18985049 originBehind=false\r\n`\r\n\r\n**To Reproduce**\r\nop-node (op-node v1.4.0)  and op-geth (v1.101304.2)\r\n\r\n**Expected behavior**\r\nNode is synced after the upgrade", "OPEN", 0, "dandavid3000", "2024-01-11T20:33:18Z", "2024-02-05T00:57:31Z", null, "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM542IRI", 8467, "[Flaky Test] indexer/e2e_tests TestE2EBridgeL2CrossDomainMessenger", "https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/35495/workflows/9d9e7092-aaa1-4565-82b1-619b31692ddd/jobs/1612579/tests\r\n\r\n```\r\n    bridge.go:152:              \ufffd[32mINFO \ufffd[0m[12-06|01:10:38.601] notified of new L2 state                 \ufffd[32mrole\ufffd[0m=indexer     \ufffd[32mprocessor\ufffd[0m=bridge \ufffd[32ml2_etl_block_number\ufffd[0m=199\r\n    bridge.go:269:              \ufffd[32mINFO \ufffd[0m[12-06|01:10:38.601] scanning for initiated bridge events     \ufffd[32mrole\ufffd[0m=indexer     \ufffd[32mprocessor\ufffd[0m=bridge \ufffd[32mbridge\ufffd[0m=l2 \ufffd[32mkind\ufffd[0m=initiated    \ufffd[32mfrom_block_number\ufffd[0m=199 \ufffd[32mto_block_number\ufffd[0m=199\r\n    bridge_messages_e2e_test.go:124: \r\n        \tError Trace:\t/root/project/indexer/e2e_tests/bridge_messages_e2e_test.go:124\r\n        \tError:      \tReceived unexpected error:\r\n        \t            \tfailed to get receipt: context deadline exceeded\r\n        \tTest:       \tTestE2EBridgeL2CrossDomainMessenger\r\n```", "CLOSED", 0, "ajsutton", "2023-12-06T01:24:28Z", "2024-02-05T01:14:00Z", "2024-02-05T01:13:59Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM520oWx", 8168, "Error Running go run cmd/main.go in op-node: JSON Unmarshal Issue", "**Describe the bug**\r\nWhen running the `go run cmd/main.go` command for the op-node with specific flags and parameters, the application fails with a critical error related to JSON unmarshaling. The error message indicates an issue with unmarshaling a string into a Go struct field of type `[]interface {}`.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Set up the environment with the specified versions of Go, Node, and other dependencies on macOS 14.\r\n2. Navigate to the op-node directory in the terminal.\r\n3. Execute the following command:\r\n\r\n```\r\ngo run cmd/main.go genesis l2 \\\r\n--deploy-config ../packages/contracts-bedrock/deploy-config/getting-started.json \\\r\n--deployment-dir ../packages/contracts-bedrock/deployments/getting-started/ \\\r\n--outfile.l2 genesis.json \\\r\n--outfile.rollup rollup.json \\\r\n--l1-rpc $L1_RPC_URL\r\n```\r\n\r\n**Expected behavior**\r\nI expected the `go run` command to execute successfully without critical failures, generating the specified genesis and rollup JSON files.\r\n\r\n**System Specs:**\r\n- Operating System: macOS 14 Sonoma\r\n- Node Version: 20.9.0\r\n- Go Version: 1.21.4\r\n- Other Relevant Versions:\r\n- git: 2.42.0\r\n- pnpm: 16.14\r\n- foundry: 0.2.0\r\n- make: 3.81\r\n- jq: 1.7\r\n- direnv: 2.32.3\r\n\r\n**Additional context**\r\n3 attempts, all without success.\r\n", "CLOSED", 0, "ZentaChainAdmin", "2023-11-14T20:22:59Z", "2024-02-08T02:49:40Z", "2024-02-08T02:49:40Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM51xbsp", 8026, "(code: -32000, message: nonce too low, data: None)", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nWhen running `make devnet-up` to  run a local development environment based on the [link](https://community.optimism.io/docs/developers/build/dev-node/#), it leads to the following error:\r\n```\r\nmypc@DESKTOP11:~/optimism/optimism$ make devnet-up\r\nmake[1]: Entering directory '/home/mypc/optimism/optimism'\r\n./ops/scripts/geth-version-checker.sh && \\\r\n        (echo \"Geth versions match, not installing geth...\"; true) || \\\r\n                (echo \"Versions do not match, installing geth!\"; \\\r\n                        go install -v github.com/ethereum/go-ethereum/cmd/geth@v1.13.4; \\\r\n                        echo \"Installed geth!\"; true)\r\nGeth version v1.13.4-stable is correct!\r\nGeth versions match, not installing geth...\r\nmake[1]: Leaving directory '/home/mypc/optimism/optimism'\r\n./ops/scripts/newer-file.sh .devnet/allocs-l1.json ./packages/contracts-bedrock \\\r\n        || make devnet-allocs\r\nmake[1]: Entering directory '/home/mypc/optimism/optimism'\r\nmake[2]: Entering directory '/home/mypc/optimism/optimism'\r\n./ops/scripts/geth-version-checker.sh && \\\r\n        (echo \"Geth versions match, not installing geth...\"; true) || \\\r\n                (echo \"Versions do not match, installing geth!\"; \\\r\n                        go install -v github.com/ethereum/go-ethereum/cmd/geth@v1.13.4; \\\r\n                        echo \"Installed geth!\"; true)\r\nGeth version v1.13.4-stable is correct!\r\nGeth versions match, not installing geth...\r\nmake[2]: Leaving directory '/home/mypc/optimism/optimism'\r\nPYTHONPATH=./bedrock-devnet python3 ./bedrock-devnet/main.py --monorepo-dir=. --allocs\r\n[INFO|11-03-2023 11:14:05] Generating L1 genesis state\r\n[INFO|11-03-2023 11:14:05] Trying 127.0.0.1:8545\r\n[INFO|11-03-2023 11:14:05] Connected 127.0.0.1:8545\r\n[INFO|11-03-2023 11:14:05] Waiting for RPC server at 127.0.0.1:8545\r\n[INFO|11-03-2023 11:14:05] RPC server at 127.0.0.1:8545 ready\r\n[INFO|11-03-2023 11:14:05] Fetch eth_accounts 127.0.0.1:8545\r\n[INFO|11-03-2023 11:14:05] Deploying with 0x41fdba6b9154497f78248b087ce8e613f8b10201\r\nINFO [11-03|11:14:05.547] Starting Geth in ephemeral dev mode... \r\nWARN [11-03|11:14:05.547] You are running Geth in --dev mode. Please note the following:\r\n\r\n  1. This mode is only intended for fast, iterative development without assumptions on\r\n     security or persistence.\r\n  2. The database is created in memory unless specified otherwise. Therefore, shutting down\r\n     your computer or losing power will wipe your entire block data and chain state for\r\n     your dev environment.\r\n  3. A random, pre-allocated developer account will be available and unlocked as\r\n     eth.coinbase, which can be used for testing. The random dev account is temporary,\r\n     stored on a ramdisk, and will be lost if your machine is restarted.\r\n  4. Mining is enabled by default. However, the client will only seal blocks if transactions\r\n     are pending in the mempool. The miner's minimum accepted gas price is 1.\r\n  5. Networking is disabled; there is no listen-address, the maximum number of peers is set\r\n     to 0, and discovery is disabled.\r\n \r\nINFO [11-03|11:14:05.548] Maximum peer count                       ETH=50 LES=0 total=50\r\nINFO [11-03|11:14:05.550] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\r\nDEBUG[11-03|11:14:05.551] FS scan times                            list=\"42.646\u00b5s\" set=353ns diff=\"1.542\u00b5s\"\r\nDEBUG[11-03|11:14:05.551] FS scan times                            list=\"6.383\u00b5s\"  set=194ns diff=464ns\r\nDEBUG[11-03|11:14:05.552] Sanitizing Go's GC trigger               percent=100\r\nINFO [11-03|11:14:05.552] Enabling recording of key preimages since archive mode is used \r\nWARN [11-03|11:14:05.552] Disabled transaction unindexing for archive node \r\nINFO [11-03|11:14:05.552] Set global gas cap                       cap=50,000,000\r\nINFO [11-03|11:14:05.699] Using developer account                  address=0x2b127Af93bE0Fbe15D7F696eB06F6c1Ac2C449a9\r\nINFO [11-03|11:14:05.699] Initializing the KZG library             backend=gokzg\r\nINFO [11-03|11:14:05.719] Allocated trie memory caches             clean=307.00MiB dirty=0.00B\r\nINFO [11-03|11:14:05.719] State schema set to default              scheme=hash\r\nINFO [11-03|11:14:05.719] Initialising Ethereum protocol           network=1337 dbversion=<nil>\r\nINFO [11-03|11:14:05.719] Writing custom genesis block \r\nINFO [11-03|11:14:05.720] Persisted trie from memory database      nodes=12 size=1.83KiB time=\"121.969\u00b5s\" gcnodes=0 gcsize=0.00B gctime=0s livenodes=0 livesize=0.00B\r\nINFO [11-03|11:14:05.721]  \r\nINFO [11-03|11:14:05.721] --------------------------------------------------------------------------------------------------------------------------------------------------------- \r\nINFO [11-03|11:14:05.721] Chain ID:  1337 (unknown) \r\nINFO [11-03|11:14:05.721] Consensus: unknown \r\nINFO [11-03|11:14:05.721]  \r\nINFO [11-03|11:14:05.721] Pre-Merge hard forks (block based): \r\nINFO [11-03|11:14:05.721]  - Homestead:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md) \r\nINFO [11-03|11:14:05.721]  - Tangerine Whistle (EIP 150): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md) \r\nINFO [11-03|11:14:05.721]  - Spurious Dragon/1 (EIP 155): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md) \r\nINFO [11-03|11:14:05.721]  - Spurious Dragon/2 (EIP 158): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md) \r\nINFO [11-03|11:14:05.721]  - Byzantium:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md) \r\nINFO [11-03|11:14:05.721]  - Constantinople:              #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md) \r\nINFO [11-03|11:14:05.721]  - Petersburg:                  #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md) \r\nINFO [11-03|11:14:05.721]  - Istanbul:                    #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md) \r\nINFO [11-03|11:14:05.721]  - Muir Glacier:                #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md) \r\nINFO [11-03|11:14:05.721]  - Berlin:                      #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md) \r\nINFO [11-03|11:14:05.721]  - London:                      #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md) \r\nINFO [11-03|11:14:05.721]  - Arrow Glacier:               #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md) \r\nINFO [11-03|11:14:05.721]  - Gray Glacier:                #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md) \r\nINFO [11-03|11:14:05.721]  \r\nINFO [11-03|11:14:05.721] Merge configured: \r\nINFO [11-03|11:14:05.721]  - Hard-fork specification:    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md \r\nINFO [11-03|11:14:05.721]  - Network known to be merged: true \r\nINFO [11-03|11:14:05.721]  - Total terminal difficulty:  0 \r\nINFO [11-03|11:14:05.721]  \r\nINFO [11-03|11:14:05.721] Post-Merge hard forks (timestamp based): \r\nINFO [11-03|11:14:05.721]  - Shanghai:                    @0          (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md) \r\nINFO [11-03|11:14:05.721]  \r\nINFO [11-03|11:14:05.721] --------------------------------------------------------------------------------------------------------------------------------------------------------- \r\nINFO [11-03|11:14:05.721]  \r\nINFO [11-03|11:14:05.721] Loaded most recent local block           number=0 hash=069823..36d079 td=0 age=54y7mo2w\r\nWARN [11-03|11:14:05.721] Failed to load snapshot                  err=\"missing or corrupted snapshot\"\r\nINFO [11-03|11:14:05.721] Rebuilding state snapshot \r\nDEBUG[11-03|11:14:05.721] Journalled generator progress            progress=empty\r\nDEBUG[11-03|11:14:05.721] Start snapshot generation                root=1c90b7..4d2107\r\nINFO [11-03|11:14:05.721] Resuming state snapshot generation       root=1c90b7..4d2107 accounts=0 slots=0 storage=0.00B dangling=0 elapsed=\"218.739\u00b5s\"\r\nINFO [11-03|11:14:05.721] Initialized transaction indexer          limit=0\r\nDEBUG[11-03|11:14:05.721] Regenerated state range                  kind=account prefix=0x61 root=1c90b7..4d2107 last=0x count=10 created=10 updated=0 untouched=0 deleted=0\r\nDEBUG[11-03|11:14:05.721] Journalled generator progress            progress=done\r\nINFO [11-03|11:14:05.722] Generated state snapshot                 accounts=10 slots=0 storage=412.00B dangling=0 elapsed=\"548.759\u00b5s\"\r\nDEBUG[11-03|11:14:05.733] Blobpool tip threshold updated           tip=1\r\nINFO [11-03|11:14:05.734] Chain post-merge, sync via beacon client \r\nINFO [11-03|11:14:05.734] Unprotected transactions allowed \r\nINFO [11-03|11:14:05.734] Gasprice oracle is ignoring threshold set threshold=2\r\nINFO [11-03|11:14:05.735] Entered PoS stage \r\nINFO [11-03|11:14:05.736] Starting peer-to-peer node               instance=Geth/v1.13.4-stable-3f907d6a/linux-amd64/go1.21.3\r\nWARN [11-03|11:14:05.736] P2P server will be useless, neither dialing nor listening \r\nINFO [11-03|11:14:05.739] New local node record                    seq=1,699,006,445,738 id=2877c30fdbcb9fd1 ip=127.0.0.1 udp=0 tcp=0\r\nINFO [11-03|11:14:05.739] Started P2P networking                   self=enode://5afdbddbeec36b1dac392150ad427fd6f35fa621b97ca60d04f5e389452edd94eebe57fb5a14e56a44b0d4275545dca75f97a034ab956c028a2eba95134ec50a@127.0.0.1:0\r\nDEBUG[11-03|11:14:05.739] IPCs registered                          namespaces=admin,debug,web3,eth,txpool,miner,net,dev\r\nINFO [11-03|11:14:05.739] IPC endpoint opened                      url=/tmp/geth.ipc\r\nDEBUG[11-03|11:14:05.740] RPC server shutting down \r\nDEBUG[11-03|11:14:05.740] RPC server shutting down \r\nINFO [11-03|11:14:05.740] IPC endpoint closed                      url=/tmp/geth.ipc\r\nDEBUG[11-03|11:14:05.740] RPC server shutting down \r\nDEBUG[11-03|11:14:06.104] FS scan times                            list=\"196.448\u00b5s\" set=\"40.395\u00b5s\" diff=\"3.13\u00b5s\"\r\n\r\nblockHash               0x44310b8b379eeb4ec387fbe077d56a91cb7105798053b568ab9431be27ca518f\r\nblockNumber             74474\r\ncontractAddress         \r\ncumulativeGasUsed       21000\r\neffectiveGasPrice       3000000007\r\ngasUsed                 21000\r\nlogs                    []\r\nlogsBloom               0xr\nroot                    \r\nstatus                  1\r\ntransactionHash         0x3351715531fa5c403174fc1f8a4b388271ca6a73bde68566c02a07c11938c04f\r\ntransactionIndex        0\r\ntype                    2\r\nError: \r\n(code: -32000, message: nonce too low, data: None)\r\nTraceback (most recent call last):\r\n  File \"/home/mypc/optimism/optimism/./bedrock-devnet/main.py\", line 9, in <module>\r\n    main()\r\n  File \"/home/mypc/optimism/optimism/./bedrock-devnet/main.py\", line 5, in main\r\n    devnet.main()\r\n  File \"/home/mypc/optimism/optimism/bedrock-devnet/devnet/__init__.py\", line 97, in main\r\n    devnet_l1_genesis(paths)\r\n  File \"/home/mypc/optimism/optimism/bedrock-devnet/devnet/__init__.py\", line 179, in devnet_l1_genesis\r\n    raise Exception(f\"Exception occurred in child process: {err}\")\r\nException: Exception occurred in child process: Command '['cast', 'publish', '--rpc-url', 'http://127.0.0.1:8545', '0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222']' returned non-zero exit status 1.\r\nmake[1]: *** [Makefile:143: devnet-allocs] Error 1\r\nmake[1]: Leaving directory '/home/mypc/optimism/optimism'\r\nmake: *** [Makefile:118: devnet-up] Error 2\r\n```\r\n\r\n**To Reproduce**\r\nFollowing exactly the same procedure of the [link ](https://community.optimism.io/docs/developers/build/dev-node/#what-is-this)\r\n\r\n\r\n**System Specs:**\r\n - OS: Ubuntu 22.04.2 LTS\r\n\r\n", "CLOSED", 0, "HE1M", "2023-11-03T10:35:10Z", "2024-02-05T01:25:20Z", "2024-02-05T01:25:20Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5z0Xm4", 7681, "error creating l2 genesis: block base fee not set", "I began to learn the [document](https://stack.optimism.io/docs/build/getting-started/#deploy-the-l1-contracts) and follow the steps prompted. When I do this step [Generate the L2 config files] , I get the following error message:\r\n      **error creating l2 genesis: block base fee not set**\r\n\r\nThe orders I carried out were this:\r\n    go run cmd/main.go genesis l2 \\\r\n    --deploy-config ../packages/contracts-bedrock/deploy-config/getting-started.json \\\r\n    --deployment-dir ../packages/contracts-bedrock/deployments/getting-started/ \\\r\n    --outfile.l2 genesis.json \\\r\n    --outfile.rollup rollup.json \\\r\n    --l1-rpc http://localhost:7545 \r\n\r\nCan someone tell me where to configure this parameter\uff1f\r\n", "CLOSED", 0, "sameplacewei", "2023-10-14T09:12:40Z", "2024-02-05T01:22:11Z", "2024-02-05T01:22:11Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5zBXtr", 7580, "Block skipped on synchronisation process after performing a deposit", "When using OP Stack, the funds of L2 accounts are set/updated according to the events emitted by L1 contract when performing a deposit. If the L2 block synchronisation process happen to skip the block containing the event (for any reason, such as resetting the network starting from a more recent L1 block), the deposit funds will not be reflected on the corresponding L2 account. In this kind of scenario what is the best way to \u201crecover\u201d these funds? Whats the best strategy to \u201cre-sync\u201d the network in case something fails?\r\n\r\n**To Reproduce**\r\n1. Set up an OP Stack L2 network.\r\n2. Start syncing blocks providing B1 as genesis L1 block\r\n3. Perform a deposit (send L1 Eth to L1 Bridge contract). This emits an event in block B5.\r\n4. Stop the L2 network when it had synced up to block B4. \r\n5. Restart the L2 network providing block B6 as starting block.\r\n\r\nI am aware that this may not be a bug in itself, but im wondering what is the best way to navigate around this issue. And an additional question: how much time does it take to sync blocks?\r\n\r\n", "CLOSED", 0, "djav35", "2023-10-06T09:05:50Z", "2024-02-05T01:21:05Z", "2024-02-05T01:21:05Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5yoWgq", 7516, "Exception occurred in child process: [Errno 2] No such file or directory: 'cast'", "I clone the latest optimism code,run make devnet-up,the fellowing err occur:\r\n\r\n> make[1]: enter path\u201c/home/weizp/work/gows/src/github.com/ethereum-optimism/optimism\u201d\r\nPYTHONPATH=./bedrock-devnet python3 ./bedrock-devnet/main.py --monorepo-dir=. --allocs\r\n[INFO|10-02-2023 10:47:53] Generating L1 genesis state\r\n==================================================\r\n<devnet.Bunch object at 0x7f6c7e5d8eb0>\r\n[INFO|10-02-2023 10:47:53] Trying 127.0.0.1:8545\r\n[INFO|10-02-2023 10:47:53] Connected 127.0.0.1:8545\r\n[INFO|10-02-2023 10:47:53] Waiting for RPC server at 127.0.0.1:8545\r\nDEBUG[10-02|22:47:53.215] Served eth_chainId                       conn=127.0.0.1:48034 reqid=1 duration=\"439.605\u00b5s\"\r\n[INFO|10-02-2023 10:47:53] RPC server at 127.0.0.1:8545 ready\r\n[INFO|10-02-2023 10:47:53] Fetch eth_accounts 127.0.0.1:8545\r\nDEBUG[10-02|22:47:53.221] Served eth_accounts                      conn=127.0.0.1:48048 reqid=2 duration=\"42.992\u00b5s\"\r\n[INFO|10-02-2023 10:47:53] Deploying with 0xa56222cb89bfc647296ec74331b9b47aaf6b4fea\r\nTraceback (most recent call last):\r\n  File \"/home/weizp/work/gows/src/github.com/ethereum-optimism/optimism/./bedrock-devnet/main.py\", line 9, in <module>\r\n    main()\r\n  File \"/home/weizp/work/gows/src/github.com/ethereum-optimism/optimism/./bedrock-devnet/main.py\", line 5, in main\r\n    devnet.main()\r\n  File \"/home/weizp/work/gows/src/github.com/ethereum-optimism/optimism/bedrock-devnet/devnet/__init__.py\", line 94, in main\r\n    devnet_l1_genesis(paths)\r\n  File \"/home/weizp/work/gows/src/github.com/ethereum-optimism/optimism/bedrock-devnet/devnet/__init__.py\", line 166, in devnet_l1_genesis\r\n    raise Exception(f\"Exception occurred in child process: {err}\")\r\nException: Exception occurred in child process: [Errno 2] No such file or directory: 'cast'\r\nmake[1]: *** [Makefile:120\uff1adevnet-allocs] error 1\r\nmake[1]: leave path\u201c/home/weizp/work/gows/src/github.com/ethereum-optimism/optimism\u201d\r\nmake: *** [Makefile:91\uff1adevnet-up] error 2\r\n\r\nwho can help me ,why?\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. git clone https://github.com/ethereum-optimism/optimism.git\r\n2. cd optimism\r\n3. make devnet-up\r\n4. See error\r\n\r\n**Expected behavior**\r\nno errors.\r\n\r\n**System Specs:**\r\n - OS:ubuntu20.04\r\n - python 3.9.18\r\n - optimism: 5e6b7f1edd1398858c3dcdcf250a977cd70d0cb6 (HEAD -> develop, origin/develop, origin/HEAD)\r\n\r\n", "CLOSED", 0, "sameplacewei", "2023-10-03T02:46:00Z", "2024-02-05T01:20:21Z", "2024-02-05T01:20:21Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5vhPLr", 7048, "FXS Token Deposit from L1 to L2 stuck", "Describe the bug\r\nI have a transaction of FXS token deposit from MainNet to Optimism network\r\nAnd this deposit still not received\r\n\r\nTo Reproduce\r\nThis is the transaction on MainNet\r\nhttps://etherscan.io/tx/0x92ab3e18df7b1f9373a5e8ee88bba419908a39012866440899da6605ec987c98\r\n\r\n\r\nThis is the message on L2\r\nhttps://optimistic.etherscan.io/tx/0x7a7c1d4cc5c4189c4fd1cb69425680cf8679d578c9dc624a63cdd52f9802e9e1\r\n\r\ntrying to execute i get an empty message box\r\nhttps://optimistic.etherscan.io/messagerelayer?search=0x7a7c1d4cc5c4189c4fd1cb69425680cf8679d578c9dc624a63cdd52f9802e9e1\r\n![image](https://github.com/ethereum-optimism/optimism/assets/6552383/09d0c344-73d2-4514-8643-c29695a04b59)\r\n\r\n\r\nExpected behavior\r\nExpected receive after 20min but almost 12 hours passed", "CLOSED", 0, "bsliran", "2023-08-29T06:34:25Z", "2024-02-05T01:03:55Z", "2024-02-05T01:03:55Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5upPhm", 6902, "Fix safe head stuck for 1hour", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nYes, safe head may stop increase for 1hour(==channelTimeOut), which is a problem to some DAPPs since they may require safe head increasing timely\r\n\r\nI found that the team already identified this issue: https://status.optimism.io/clkhjkmre549295iqomx3wh79jr \r\nand revealed that team is actively working on a fix.\r\n\r\n1. could the team describe more about the fix tech-plan? \r\n* plan-A: optimize op-node to support read multi-channels from channel queue \r\n* or plan-B: just optimize op-batcher to avoid submitting broken channel(some frame in channel is missed, which result to channel time out)\r\nplan-B seems can not fix the issue perfectly, if batcher submitted a frame, the tx is on-chain successfully but rpc client return error to batcher due to network issue, so batcher will submit it again, this duplicated frame may cause channel queue stuck for 1hour\r\n* or plan-C?\r\n\r\n2. when will this be fixed?\r\nthanks!\r\n\r\n\r\n", "CLOSED", 0, "nolanxyg", "2023-08-18T08:37:18Z", "2024-02-05T22:28:33Z", "2024-02-05T22:28:33Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5tUwiE", 6575, "seems reorg blocks been written onto L1", "I spin up my own op stack chain, my sequencer node has been running for days. today I launch a RPC node, it runs well firstly, but then it reports the following error during deriving from L1, and the derivation cannot proceed now:\r\n\r\n```\r\nt=2023-08-03T02:08:02+0000 lvl=warn msg=\"ignoring batch with mismatching parent hash\" batch_index=0 batch_timestamp=1,690,972,368 parent_hash=0x25af559293bca60cbe5fa04c93758667eecf078b3\r\n912e027019b956c7a9adc6a batch_epoch=0x3e451a8984aedf8bbadae3ad8bceecce338cac3fdc2a29433cc2171812d65754:9449663 txs=0  current_safe_head=0x1af6cdc0f79d0bdff9414a127d588b516e646bd13a6add83220cad7d828c4e15\r\n```\r\n\r\nI'm not quite sure but it seems like the batcher wrote reorg L2 blocks onto the L1? so that the RPC node derives wrong blocks and cannot proceed now. have we ever encountered this before?\r\n", "CLOSED", 0, "cifer76", "2023-08-03T02:14:36Z", "2024-02-05T01:14:45Z", "2024-02-05T01:14:45Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5stvjn", 6478, "it log error when I run op-node", "when I run ./bin/op-node \\\r\n\t--l2=http://localhost:8551 \\\r\n\t--l2.jwt-secret=./jwt.txt \\    \r\n\t--sequencer.enabled \\\r\n\t--sequencer.l1-confs=3 \\\r\n\t--verifier.l1-confs=3 \\\r\n\t--rollup.config=./rollup.json \\\r\n\t--rpc.addr=0.0.0.0 \\\r\n\t--rpc.port=8547 \\\r\n\t--p2p.disable \\\r\n\t--rpc.enable-admin \\\r\n\t--p2p.sequencer.key=$SEQ_KEY \\\r\n\t--l1=$L1_RPC \\\r\n\t--l1.rpckind=$RPC_KIND\r\n\r\nit log error : t=2023-07-27T[15:57:36](https://www.youtube.com/watch?v=PcgAKoUKRv4&t=43200s)+0700 lvl=info msg=\"Initializing Rollup Node\"\r\nERROR[07-27|[15:57:36](https://www.youtube.com/watch?v=PcgAKoUKRv4&t=43200s).518] Unable to create the rollup node config  error=\"flag l1 is required\"\r\nCRIT [07-27|[15:57:36](https://www.youtube.com/watch?v=PcgAKoUKRv4&t=43200s).518] Application failed                       message=\"flag l1 is required\"\r\nzsh: command not found: --sequencer.enabled", "CLOSED", 0, "minhhoang2404", "2023-07-27T09:01:24Z", "2024-02-05T01:14:03Z", "2024-02-05T01:14:03Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5soCo4", 6454, "Prove Transation", "Can anyone here help me solve my transaction issue.\r\n\r\nWhen trying to withdraw 0.021 ETH the system won't let me prove the withdrawal and comes up as failed. Now my ETH is just stuck in limbo and I want to get it back out and across to my coinbase account.\r\n\r\n", "CLOSED", 0, "MATURNER93", "2023-07-26T13:34:26Z", "2024-02-05T01:13:28Z", "2024-02-05T01:13:28Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5sGhP6", 6368, "Developer Bridge Docs Link not functioning", "**Describe the bug**\r\nContract Links in Optimstim docs not working because one of the branch of the repo no longer exists.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '[...](https://community.optimism.io/docs/developers/bridge/messaging/)'\r\n2. Click on 'L1CrossDomainMessenger.sol'\r\n3 See error\r\n\r\n**Expected behavior**\r\nGo to the right github page\r\n\r\n**Screenshots**\r\n![image](https://github.com/ethereum-optimism/optimism/assets/83915728/83aa65d0-7910-4607-bc96-b3e47181e8da)", "CLOSED", 0, "RedHorse823", "2023-07-20T10:20:03Z", "2024-02-05T01:12:56Z", "2024-02-05T01:12:56Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5r-8IH", 6347, "questions about deriving L2 blocks from L1 during sequencer node migrating", "recently we're spinning up our own Op Stack chain and noticed a interesting thing wanna discuss with you.\r\n\r\nWe launched our sequencer node 2 weeks ago, and the `op-batcher` has already written thousands of blocks onto L1.\r\nYesterday we stopped the previous sequencer node, and setup another identical sequencer node on a new ec2 instance with higher performance, we expect that the our new sequencer node will derive the chain from L1, but it wasn't...\r\n\r\nThe \"new\" sequencer node seems unaware of the existing chain that has been written onto L1, the `op-node` just started stimulating `op-geth` to produce a new sequence of blocks. While in the meantime the `op-node` is still traversing the L1 blocks based on the configured L1 block number in `rollup.json`, so certainly it encountered the batcher transaction, but these batcher transactions are just failed on the [CheckBatch](https://github.com/ethereum-optimism/optimism/blob/develop/op-node/rollup/derive/batches.go#L31) function, either being dropped due to `batch with old timestamp` or `ignoring batch with mismatching parent hash`.\r\n\r\nI'm not sure if this is by design or we haven't consider this deeply yet, but IMO, when we migrate and restart the sequencer node , it's better to let `op-node` finish traversing all of the batcher transactions on L1 and be aware of the latest state of the L2 before letting it start to emit `op-geth` to produce new blocks.\r\n\r\nHow do you think about it?", "CLOSED", 0, "cifer76", "2023-07-19T10:31:59Z", "2024-02-05T01:12:40Z", "2024-02-05T01:12:40Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5r4J-U", 6323, "\"Edit this page\" links broken on stack.optimism.io/docs", "For example the link on https://stack.optimism.io/docs/build/conf/ points to\r\nhttps://github.com/ethereum-optimism/opstack-docs/edit/main/src/docs/build/conf.md while it probably should point to \r\nhttps://github.com/ethereum-optimism/optimism/edit/develop/docs/op-stack/src/docs/build/conf.md .\r\n\r\nIt looks like it should be fixed in https://github.com/ethereum-optimism/optimism/blob/develop/docs/op-stack/src/.vuepress/theme/components/PageMeta.js#L60.", "CLOSED", 0, "karlb", "2023-07-18T12:58:59Z", "2024-02-05T01:11:44Z", "2024-02-05T01:11:43Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5rX_JQ", 6273, "Can not send max amount from my metamask at L2", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nCan not send max amount of ETH from my metamask wallet at L2.\r\n\r\n\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to metamask\r\n2. Click on send\r\n3. enter wallet to send\r\n4. click max amount\r\n5. see error\r\n\r\n**Expected behavior**\r\nTx sent with no errors\r\n\r\n**Screenshots**\r\n<img width=\"349\" alt=\"image\" src=\"https://github.com/ethereum-optimism/optimism/assets/10223123/5f767bb2-22e1-4a0f-8157-cbd083905e96\">\r\n\r\n**System Specs:**\r\n - OS: MacOS\r\n - Package Version (or commit hash):\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "eskrano", "2023-07-12T17:37:25Z", "2024-02-05T01:10:53Z", "2024-02-05T01:10:53Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5rSs_R", 6265, "Are there any dispute game smart contracts implemented for cannon?", "Hi, \r\n\r\nI am investigating how the dispute game works for cannon, and I have seen there are several related` .sol` files such as `packages/contracts-bedrock/contracts/dispute/interfaces/IFaultDisputeGame.sol`, but I fail to find out the `.sol ` targeting at gaming with cannon. So is there such one existed at present? \r\nIf not, I would like to try out writing an example my self, is there any sample code I can refer to?\r\n\r\nThanks!", "CLOSED", 0, "David-Web3", "2023-07-12T02:44:37Z", "2024-02-05T01:09:26Z", "2024-02-05T01:09:25Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5q5Ae2", 6236, "L1 to L2 bridge proxy not working, while setting up Op Stack Node", "Successfully set up the RollUp, using the below Doc. \r\nNot able to get the Eth on L2 after transferring to L1 bridge proxy contract address. \r\n\r\nhttps://goerli.etherscan.io/address/0x9566d077ddf649e8f399e119c34609e16385e9e9\r\n", "CLOSED", 0, "devudilip", "2023-07-07T11:03:25Z", "2024-02-05T01:11:20Z", "2024-02-05T01:11:20Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5qw_l2", 6232, "GetProof and GetStorageAt does not follow EIP-1898 when querying using blockHash", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n[GetProof](https://github.com/ethereum-optimism/optimism/blob/d80c145e0acf23a49c6a6588524f57e32e33b91c/op-node/sources/eth_client.go#L397) and [GetStorageAt](https://github.com/ethereum-optimism/optimism/blob/d80c145e0acf23a49c6a6588524f57e32e33b91c/op-node/sources/eth_client.go#L405) (maybe others as well) does not follow [EIP-1898](https://eips.ethereum.org/EIPS/eip-1898) when querying using blockHash\r\n\r\nCurrently, the two methods calls the L1 RPC with \r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"eth_getProof\",\r\n    \"params\": [\r\n        \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\",\r\n        [\r\n            \"0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08\"\r\n        ],\r\n        \"0xc5d324f4bb9694a438b6b5b5ed374faf5f09c9e7a44ec03aa924163576a34913\"}\r\n    ],\r\n    \"id\": 1\r\n}\r\n\r\n### Response returns this error when the RPC follows EIP-1898 strictly (anvil for example)\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": 1,\r\n    \"error\": {\r\n        \"code\": -32602,\r\n        \"message\": \"Invalid string length\"\r\n    }\r\n}\r\n```\r\nWhen it should be\r\n```\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"eth_getProof\",\r\n    \"params\": [\r\n        \"0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9\",\r\n        [\r\n            \"0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08\"\r\n        ],\r\n        {\"blockHash\": \"0xc5d324f4bb9694a438b6b5b5ed374faf5f09c9e7a44ec03aa924163576a34913\"}\r\n    ],\r\n    \"id\": 1\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS:\r\n - Package Version (or commit hash):\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "javiersuweijie", "2023-07-06T10:03:16Z", "2024-02-05T01:09:59Z", "2024-02-05T01:09:59Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5qrftl", 6230, "Links to bridge contracts in the documentation give you a 404", "**Describe the bug**\r\n\r\nIf you open the [bridge contracts](https://community.optimism.io/docs/protocol/protocol-2.0/#bridge-contracts) documentation, and click on any of the links to go to the contract source code, you get a 404.  \r\n\r\nFor example, this link (copied from the documentation: [L1CrossDomainMessenger(opens new window)](https://github.com/ethereum-optimism/optimism/blob/master/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol) gives a 404.  Same goes for the rest of the contract links.", "CLOSED", 0, "oveddan", "2023-07-05T15:19:28Z", "2024-02-05T01:08:54Z", "2024-02-05T01:08:54Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM5erlsT", 4908, "Friendlier way to recover from a corrupt op-geth state", "When I run `op-geth` with a corrupt state, `op-node` keeps emitting:\r\n\r\n```\r\nWARN [02-16|21:22:02.868] Derivation process temporary error       attempts=14 err=\"stage 0 failed resetting: temp: failed to find the L2 Heads to start from: failed to fetch L2 block by hash 0x0000000000000000000000000000000000000000000000000000000000000000: failed to determine block-hash of hash 0x0000000000000000000000000000000000000000000000000000000000000000, could not get payload: not found\"\r\n```\r\n\r\nThe solution is to delete `op-geth`'s data dir, reinitialize, and resync. However, this doesn't happen automatically, which is less than ideal from the user friendliness perspective, especially if we want more people who aren't professionals running blockchain nodes, either for our network or for OP Stack blockchains.\r\n", "CLOSED", 0, "qbzzt", "2023-02-16T22:57:00Z", "2024-02-05T01:07:59Z", "2024-02-05T01:07:59Z", "ethereum-optimism/optimism", "2025-08-30 07:33:19"]
["I_kwDODjvEJM59uR1G", 9271, "Panic when unmarshalling devnet allocs file", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nIn the current develop branch([`9a59811f51`](https://github.com/ethereum-optimism/optimism/tree/9a59811f53960e0fae39a1c7cbcc25c3dfc808e6)), the type of `nonce` is string hexadecimal in the generated devnet l1 alloc file (`.devnet/allocs-l1.json`). It makes panic when trying to run any e2e test, with the following message.\r\n```\r\npanic: cannot unmarshal dump: json: cannot unmarshal string into Go struct field DumpAccount.accounts.nonce of type uint64\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/ethereum-optimism/optimism/op-e2e/config.init.0()\r\n\t/Users/tei/tip-optimism/op-e2e/config/init.go:93 +0x730\r\nexit status 2\r\n```\r\n\r\nThe content of the `.devnet/allocs-l1.json`:\r\n```\r\n...\r\n  \"accounts\": {\r\n    \"0x2abb7cbb720020ee3c9ecf3915d14b6d1886a577\": {\r\n      \"nonce\": \"0x2\",\r\n      \"balance\": \"0x0\",\r\n      \"code\": \"0x60806040523...\",\r\n      \"storage\": {\r\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\": \"0x0000000000000000000000006153107879eb0f3743b33091206fd2946833c35b\"\r\n      }\r\n    },\r\n...\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Checkout the latest develop branch (`9a59811f51`)\r\n2. Rebuild everything (following `CONTRIBUTING.md`)\r\n3. Generate devnet alloc file (following `op-e2e/README.md`)\r\n4. Run e2e test (e.g. `go test -run TestOutputCannonGame` in `op-e2e/faultproofs`)\r\n\r\n**Expected behavior**\r\nThe type of nonce must be an integer, or the code can unmarshal hex string.\r\n\r\n**System Specs:**\r\n - OS: macOS Sonoma 14.3 (M1 pro)\r\n - Package Version (or commit hash): `9a59811f51`\r\n", "CLOSED", 0, "ImTei", "2024-01-31T04:56:28Z", "2024-02-02T04:58:30Z", "2024-02-02T04:58:30Z", "ethereum-optimism/optimism", "2025-08-30 07:33:25"]
["I_kwDODjvEJM59jiMg", 9235, "Decrease SDK size / introduce submodules", "Hello OP team\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI found that the SDK size is beyond expected. However, only fraction of the components can be used for the everyday \"userspace\" tasks.\r\n\r\n**Describe the solution you'd like**\r\nIt'd be great to introduce modules so user can choose what functionality needed. For some use cases it'd be just a gas price computation, for other - full blown testing dependencies with FaultDisputeGame.\r\n\r\n**Describe alternatives you've considered**\r\nWhen building the prod image one of the options is prune test-related contracts using plain `rm -rf`, releasing about 80Mb of disk space but it's a band-aid solution.\r\n\r\n**Current version**\r\n3.1.8\r\n\r\n**Steps to reproduce**\r\n(in the new folder, no deps installed)\r\n```sh\r\n$ npm install @eth-optimism/sdk\r\n\r\n$ du -sh node_modules/\r\n451M node_modules/\r\n\r\n$ du -h -d1 node_modules/ | sort -hr\r\n451M\tnode_modules/\r\n414M\tnode_modules/@eth-optimism <------------ [!!!!!!!!!!]\r\n11M\tnode_modules/ethers\r\n8.2M\tnode_modules/@ethersproject\r\n5.0M\tnode_modules/lodash\r\n2.8M\tnode_modules/@noble\r\n2.4M\tnode_modules/aes-js\r\n\r\n\r\n$ du -h -d3 node_modules/\\@eth-optimism/ | sort -hr\r\n414M\tnode_modules/@eth-optimism/\r\n410M\tnode_modules/@eth-optimism/contracts-bedrock\r\n393M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts <----------- [!!!!!!!!!!!!!!]\r\n69M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/FaultDisputeGame.t.sol\r\n52M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/L1StandardBridge.t.sol\r\n25M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/CommonTest.t.sol\r\n17M\tnode_modules/@eth-optimism/contracts-bedrock/deployments\r\n16M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/OptimismPortal.t.sol\r\n14M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/console2.sol\r\n14M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/console.sol\r\n14M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/L2StandardBridge.t.sol\r\n7.9M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/StdCheats.sol\r\n7.0M\tnode_modules/@eth-optimism/contracts-bedrock/forge-artifacts/L2OutputOracle.t.so\r\n\r\n....\r\n\r\n\r\n```\r\n\r\n", "CLOSED", 0, "ruXlab", "2024-01-29T21:28:19Z", "2024-01-29T23:53:55Z", "2024-01-29T23:47:54Z", "ethereum-optimism/optimism", "2025-08-30 07:33:25"]
["I_kwDODjvEJM59S4ld", 9202, "`op-version-check`: cannot get addresses for internal devnet", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nRunning `op-version-check` against the internal devnet fails with \"Ignoring L1/L2\"\r\n\r\n**To Reproduce**\r\n\r\n```\r\n> L1_RPC_URLS=https://ethereum-goerli.publicnode.com L2_RPC_URLS=<internal-devnet-rpc> ./bin/op-version-check\r\nINFO [01-26|11:44:01.034] Ignoring L1/L2                           l1-chain-id=5 l2-chain-id=997\r\n[]\r\n```\r\n\r\n**Expected behavior**\r\nThe tool should printthe contract version information correctly with the above input. \r\n```\r\n>  L1_RPC_URLS=https://ethereum-goerli.publicnode.com L2_RPC_URLS=<internal-devnet-rpc> ./bin/op-version-check\r\nWARN [01-26|11:46:46.087] goerli\r\nWARN [01-26|11:46:46.087] goerli-dev-0\r\nINFO [01-26|11:46:46.087] OP Labs devnet 0                         l1-chain-id=5 l2-chain-id=997\r\nINFO [01-26|11:46:46.087] Detecting on chain contracts\r\nINFO [01-26|11:46:46.605] Successfully processed contract versions chain=\"OP Labs devnet 0\" l1-chain-id=5 l2-chain-id=997\r\n[\r\n  {\r\n    \"Name\": \"OP Labs devnet 0\",\r\n    \"ChainID\": 997,\r\n    \"Contracts\": {\r\n      \"AddressManager\": {\r\n        \"Version\": \"null\",\r\n        \"Address\": \"0xf3a31b72d030e1916afeb3abba90e7e104818b9b\"\r\n      },\r\n      \"L1CrossDomainMessenger\": {\r\n        \"Version\": \"1.1.0\",\r\n        \"Address\": \"0x12371d047382bb3a4b1891e8474ddaee983d08ec\"\r\n      },\r\n      \"L1ERC721Bridge\": {\r\n        \"Version\": \"1.1.0\",\r\n        \"Address\": \"0xab598ffd07bdf497fce58e36138573ccba6b7a8b\"\r\n      },\r\n      \"L1StandardBridge\": {\r\n        \"Version\": \"1.1.0\",\r\n        \"Address\": \"0x0178b1f72eb1e61e1847f8fd36c791822623fb42\"\r\n      },\r\n      \"L2OutputOracle\": {\r\n        \"Version\": \"1.2.0\",\r\n        \"Address\": \"0xddb2e0c86ae08f1249d528f1a810cebd1b4c4d72\"\r\n      },\r\n      \"OptimismMintableERC20Factory\": {\r\n        \"Version\": \"1.1.0\",\r\n        \"Address\": \"0x00b75ed2e46c4c29bc363a75a6d97791018b3903\"\r\n      },\r\n      \"OptimismPortal\": {\r\n        \"Version\": \"1.2.0\",\r\n        \"Address\": \"0xc6170e048b7daef6d0b6cbbad9aca0e5370ddbbc\"\r\n      },\r\n      \"ProxyAdmin\": {\r\n        \"Version\": \"null\",\r\n        \"Address\": \"0xd98bd7a1f2384d890d0d6153cb6f813ab6ccfccf\"\r\n      },\r\n      \"SystemConfig\": {\r\n        \"Version\": \"1.0.1\",\r\n        \"Address\": \"0x78c9876a3621b97cc9b3c13ad0f35091db49e8e3\"\r\n      }\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n**Additional context**\r\n\r\n I think the underlying issue is tied to looking up superchain name from L1 chain id. There are technically two superchains on Goerli, so such a lookup can't work in all cases: \r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/1eb56be09f45a996a144509e5bb9bd63045a8b57/op-chain-ops/cmd/op-version-check/main.go#L108\r\n\r\n", "CLOSED", 0, "geoknee", "2024-01-26T11:59:54Z", "2024-01-30T18:59:42Z", "2024-01-30T18:59:42Z", "ethereum-optimism/optimism", "2025-08-30 07:33:25"]
["I_kwDODjvEJM58EBLd", 9005, "What is the maximum gas limit of the Optimis mainnet?", "\r\nhello What is the maximum gas limit of the Optimis mainnet?", "CLOSED", 0, "hanzhenlong1314", "2024-01-15T07:41:55Z", "2024-01-29T17:55:17Z", "2024-01-29T17:55:17Z", "ethereum-optimism/optimism", "2025-08-30 07:33:25"]
["I_kwDOH2Qg5s5shrOS", 110, "eth_getBlockByNumber vs eth_getBlockByHash responses discrepancies", "We are running a curl request for `eth_getBlockByNumber` vs `eth_getBlockByHash` responses, For block `46772657`, there is one transaction in the block. However, `eth_getBlockByHash` returns a `chainId` field in the transaction while eth_getBlockByNum does not return `chainId` field in the transaction.\r\n\r\nDo you know why there is a difference for this block?\r\n\r\nRPC backend version: `Geth/v0.1.0-unstable-0a77db9c/linux-amd64/go1.20.1`\r\n\r\ncurl request eth_getBlockByNumber: \r\n\r\n```\r\ncurl -s https://<QUIKNODE-ENDPOINT>/XXX -H \"Content-Type: application/json\" -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x2c9b1b1\", true] }'\r\n```\r\n\r\nresponse: \r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": {\r\n    \"difficulty\": \"0x2\",\r\n    \"extraData\": \"0xd98301090a846765746889676f312e31352e3133856c696e7578000000000000cebb9731665fbaa5bad7259f336e0e3bc3f4235bd023d41269ef1d692272ab932efd94784330c27ffeece1cb02bdd868baae3acc1684e120ce1c1545df7ad9b601\",\r\n    \"gasLimit\": \"0xe4e1c0\",\r\n    \"gasUsed\": \"0x5208\",\r\n    \"hash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"miner\": \"0x0000000000000000000000000000000000000000\",\r\n    \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"nonce\": \"0x0000000000000000\",\r\n    \"number\": \"0x2c9b1b1\",\r\n    \"parentHash\": \"0x454badb331c9cb14ae6897530011081492a3e58c47a364a6f62ce416dcf64a8c\",\r\n    \"receiptsRoot\": \"0x056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2\",\r\n    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\r\n    \"size\": \"0x2d0\",\r\n    \"stateRoot\": \"0x5307c8b991a8cf03eabfb96f1e0b8a05b0dc423734f759a39a4f9716de2bbaa0\",\r\n    \"timestamp\": \"0x6391d861\",\r\n    \"totalDifficulty\": \"0x5936363\",\r\n    \"transactions\": [\r\n      {\r\n        \"blockHash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n        \"blockNumber\": \"0x2c9b1b1\",\r\n        \"from\": \"0xb20c8dca769b63314d1965cebedb87e2a3a70715\",\r\n        \"gas\": \"0x5208\",\r\n        \"gasPrice\": \"0x10c8e0\",\r\n        \"hash\": \"0x8fb278a0ecaeaa660fd88c794dc51a1940cf9832ca543332e59ef3691d7680b7\",\r\n        \"input\": \"0x\",\r\n        \"nonce\": \"0xb\",\r\n        \"to\": \"0x6abf790d3b4a80ebfce25dccbfa07f6f8e5cab1a\",\r\n        \"transactionIndex\": \"0x0\",\r\n        \"value\": \"0x3c6568f12e8000\",\r\n        \"v\": \"0x38\",\r\n        \"r\": \"0xf4f4795c43f3699e2b2fe3fe629f11d274ed4252c6052015b9bc10182b3ab6c6\",\r\n        \"s\": \"0x68c5a331660b592d50ddd670a8df8953f75b8b71adb1dfe4febc47771f2a4e18\",\r\n        \"queueOrigin\": \"sequencer\",\r\n        \"l1TxOrigin\": null,\r\n        \"l1BlockNumber\": \"0xf646a0\",\r\n        \"l1Timestamp\": \"0x6391d861\",\r\n        \"index\": \"0x2c9b1b0\",\r\n        \"queueIndex\": null,\r\n        \"rawTransaction\": \"0xf8690b8310c8e0825208946abf790d3b4a80ebfce25dccbfa07f6f8e5cab1a873c6568f12e80008038a0f4f4795c43f3699e2b2fe3fe629f11d274ed4252c6052015b9bc10182b3ab6c6a068c5a331660b592d50ddd670a8df8953f75b8b71adb1dfe4febc47771f2a4e18\"\r\n      }\r\n    ],\r\n    \"transactionsRoot\": \"0x8917ef36a9e241c2cfc48d5fa49afef55c9638c70a73295c263d6f9283931a9a\",\r\n    \"uncles\": []\r\n  }\r\n}\r\n```\r\n\r\ncurl request eth_getBlockByHash: \r\n\r\n\r\n```\r\ncurl -s https://<QUIKNODE-ENDPOINT>/XXX -H \"Content-Type: application/json\" -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByHash\", \"params\": [\"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\", true] }' \r\n```\r\n\r\nresponse: \r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": {\r\n    \"difficulty\": \"0x2\",\r\n    \"extraData\": \"0xd98301090a846765746889676f312e31352e3133856c696e7578000000000000cebb9731665fbaa5bad7259f336e0e3bc3f4235bd023d41269ef1d692272ab932efd94784330c27ffeece1cb02bdd868baae3acc1684e120ce1c1545df7ad9b601\",\r\n    \"gasLimit\": \"0xe4e1c0\",\r\n    \"gasUsed\": \"0x5208\",\r\n    \"hash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"miner\": \"0x0000000000000000000000000000000000000000\",\r\n    \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"nonce\": \"0x0000000000000000\",\r\n    \"number\": \"0x2c9b1b1\",\r\n    \"parentHash\": \"0x454badb331c9cb14ae6897530011081492a3e58c47a364a6f62ce416dcf64a8c\",\r\n    \"receiptsRoot\": \"0x056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2\",\r\n    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\r\n    \"size\": \"0x2d0\",\r\n    \"stateRoot\": \"0x5307c8b991a8cf03eabfb96f1e0b8a05b0dc423734f759a39a4f9716de2bbaa0\",\r\n    \"timestamp\": \"0x6391d861\",\r\n    \"totalDifficulty\": \"0x5936363\",\r\n    \"transactions\": [\r\n      {\r\n        \"blockHash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n        \"blockNumber\": \"0x2c9b1b1\",\r\n        \"from\": \"0xb20c8dca769b63314d1965cebedb87e2a3a70715\",\r\n        \"gas\": \"0x5208\",\r\n        \"gasPrice\": \"0x10c8e0\",\r\n        \"hash\": \"0x8fb278a0ecaeaa660fd88c794dc51a1940cf9832ca543332e59ef3691d7680b7\",\r\n        \"input\": \"0x\",\r\n        \"nonce\": \"0xb\",\r\n        \"to\": \"0x6abf790d3b4a80ebfce25dccbfa07f6f8e5cab1a\",\r\n        \"transactionIndex\": \"0x0\",\r\n        \"value\": \"0x3c6568f12e8000\",\r\n        \"type\": \"0x0\",\r\n        \"chainId\": \"0xa\",\r\n        \"v\": \"0x38\",\r\n        \"r\": \"0xf4f4795c43f3699e2b2fe3fe629f11d274ed4252c6052015b9bc10182b3ab6c6\",\r\n        \"s\": \"0x68c5a331660b592d50ddd670a8df8953f75b8b71adb1dfe4febc47771f2a4e18\"\r\n      }\r\n    ],\r\n    \"transactionsRoot\": \"0x8917ef36a9e241c2cfc48d5fa49afef55c9638c70a73295c263d6f9283931a9a\",\r\n    \"uncles\": []\r\n  }\r\n}\r\n```\r\n\r\nThanks for the help in advance! :) ", "OPEN", 0, "yaanakbr", "2023-07-25T17:09:03Z", "2024-02-13T20:11:50Z", null, "ethereum-optimism/op-geth", "2025-08-30 07:37:13"]
["I_kwDOKIwiaM5_OqDQ", 484, "Fix page redirect", "On the  ``chain operators/tutorials/Creating Your Own L2 Rollup Testnet`` there is a warning section with two links:\r\n- optimism superchain\r\n- superchain explainer\r\nThey both direct to ``docs.optimism.io/op-stack/explainer`` that doesn't exist. Think the intention is to direct to ``docs.optimism.io/stack/explainer``.\r\n\r\nWill open a PR shortly for this", "CLOSED", 0, "pedrovalido", "2024-02-14T14:59:35Z", "2024-02-14T18:14:22Z", "2024-02-14T18:14:22Z", "ethereum-optimism/docs", "2025-08-30 07:37:13"]
["I_kwDOKIwiaM5-EhQJ", 471, "[DOCS] update `op-geth` configuration page with updated flags from the latest stable release", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nNeed to update `op-geth` configuration page with updated flags from the latest stable release. \r\n\r\n## Description of the Documentation You'd Like\r\n\r\nJust updating the config section\r\n\r\n## Links to Related Pages\r\n\r\n- https://github.com/ethereum-optimism/op-geth/releases\r\n- https://docs.optimism.io/builders/node-operators/management/configuration\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "sbvegan", "2024-02-02T14:51:31Z", "2024-02-15T23:44:50Z", "2024-02-15T23:44:50Z", "ethereum-optimism/docs", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-ctbp", 95, "[s] Implement promotions modals", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:45:56Z", "2024-02-13T18:43:37Z", "2024-02-13T18:43:36Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-csvU", 94, "[s] Implement Docs modal", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:44:12Z", "2024-02-13T18:43:31Z", "2024-02-13T18:43:31Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-csut", 93, "[s] Implement mainnet offer modals under Launch & Grow section", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:44:10Z", "2024-02-13T18:43:26Z", "2024-02-13T18:43:26Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-cstu", 92, "[s] Implement view testnet offer modals under Build section", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:44:08Z", "2024-02-13T18:43:20Z", "2024-02-13T18:43:20Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-css6", 91, "[s] Implement reusable modal with ui-components modal for all popups", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:44:05Z", "2024-02-13T18:43:14Z", "2024-02-13T18:43:14Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-csn_", 86, "[s] Bring in tooltip & implement modals for all superchains", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:54Z", "2024-02-13T18:43:03Z", "2024-02-13T18:43:03Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-csin", 82, "[m] Implement Privy sign up + questionnaire", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:45Z", "2024-02-13T18:43:48Z", "2024-02-13T18:43:48Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOKSJyfM5-csgN", 80, "[s] Implement account dropdown", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:40Z", "2024-02-13T18:42:56Z", "2024-02-13T18:42:56Z", "ethereum-optimism/ecosystem", "2025-08-30 07:37:13"]
["I_kwDOJ_r-bs5-_iye", 89, "Run `CheckSecurityConfigs` on a scheduled job", "From https://github.com/ethereum-optimism/superchain-registry/issues/87\r\n\r\n> Some changes were made on chain which should be reflected in the registry. https://app.circleci.com/pipelines/github/ethereum-optimism/superchain-registry/337/workflows/0c87fd15-22a3-4718-a198-87de3904de84/jobs/1334\r\n> \r\n> I think we should consider running the CI checks nightly, since I only discovered this CI failure on a pull request with unrelated changes.\r\n\r\nThese checks should be pretty fast and cheap to execute, so we can execute them on a scheduled job fairly frequently to catch issues faster. We should also make sure failures of this scheduled job send an alert", "CLOSED", 0, "mds1", "2024-02-12T17:12:06Z", "2024-02-14T09:52:02Z", "2024-02-14T09:52:02Z", "ethereum-optimism/superchain-registry", "2025-08-30 07:37:34"]
["I_kwDOJ_r-bs5--bIN", 87, "Get `CheckSecurityConfigs` passing again.", "Some changes were made on chain which should be reflected in the registry. https://app.circleci.com/pipelines/github/ethereum-optimism/superchain-registry/337/workflows/0c87fd15-22a3-4718-a198-87de3904de84/jobs/1334", "CLOSED", 0, "geoknee", "2024-02-12T14:47:39Z", "2024-02-12T17:12:26Z", "2024-02-12T15:31:44Z", "ethereum-optimism/superchain-registry", "2025-08-30 07:37:34"]
["I_kwDODjvEJM5_fs1v", 9581, "op-node 1.5.1 is logging TRACE level by default", "**Bug Description**\r\nI just upgraded op-node to v1.5.1 and it is by default logging everything at TRACE level. Confirmed with another user this behavior.\r\n\r\nCompiled from the sources, branch `op-node/v1.5.1`.\r\n\r\n**Steps to Reproduce**\r\nCheckout `op-node/v1.5.1` branch, build op-node and run it.\r\n\r\n**Expected behavior**\r\nINFO level logging by default as in previous versions.\r\n\r\n**Environment Information:**\r\n - macos 14.2.1\r\n - `op-node/v1.5.1`\r\n\r\n**Configurations:**\r\n```\r\n~/optimism/op-node/bin/op-node \\\r\n        --l1=\"http://localhost:8745\" \\\r\n        --l1.beacon=\"http://localhost:5752\" \\\r\n        --l2=\"http://localhost:7751\" \\\r\n        --l2.jwt-secret=\"/Volumes/op-erigon-sepolia/jwt.hex\" \\\r\n        --network=sepolia \\\r\n        --rpc.addr=0.0.0.0 \\\r\n        --rpc.port=9545\r\n```\r\n\r\n**Logs:**\r\n\r\n```\r\nTRACE[02-16|13:53:32.773] FINDNODE failed                          p2p=discv5 id=b0b9a9a421445048 failcount=89  dropped=true  err=\"RPC timeout\"\r\nTRACE[02-16|13:53:32.799] FINDNODE failed                          p2p=discv5 id=b07aa96d3a9884db failcount=48  dropped=true  err=\"RPC timeout\"\r\nDEBUG[02-16|13:53:34.745] validated blockv2                        topic=blocksV2 result=ACCEPT from=16Uiu2HAmLRJHcXJ1E8Va1EQ5VQWwav2eLHDb61xFcRzd43kDnpix\r\nINFO [02-16|13:53:34.745] Received signed execution payload from p2p id=a91dba..353481:8149937 peer=16Uiu2HAmLRJHcXJ1E8Va1EQ5VQWwav2eLHDb61xFcRzd43kDnpix\r\nINFO [02-16|13:53:34.745] Optimistically queueing unsafe L2 execution payload id=a91dba..353481:8149937\r\nDEBUG[02-16|13:53:35.115] Scheduling P2P block request             target=8,149,933 end=553139..c69af8:8149935 num=8,149,934\r\nDEBUG[02-16|13:53:35.399] completed p2p sync request               peer=16Uiu2HAmLRJHcXJ1E8Va1EQ5VQWwav2eLHDb61xFcRzd43kDnpix num=8,149,934\r\nINFO [02-16|13:53:35.399] Received signed execution payload from p2p id=034150..069213:8149934 peer=16Uiu2HAmLRJHcXJ1E8Va1EQ5VQWwav2eLHDb61xFcRzd43kDnpix\r\nINFO [02-16|13:53:35.399] Optimistically queueing unsafe L2 execution payload id=034150..069213:8149934\r\nTRACE[02-16|13:53:35.399] sending payload for execution            block_hash=034150..069213\r\nTRACE[02-16|13:53:35.415] Received payload execution result        block_hash=034150..069213 status=VALID latestValidHash=034150..069213 message=<nil>\r\nTRACE[02-16|13:53:35.415] Sharing forkchoice-updated signal        state=\"&{HeadBlockHash:0x0341501bc2739c1aa0dfec2b3f1900e1f0f7325711238dfb8dd1187a19069213 SafeBlockHash:0x042a0d41b18543a71ca74a551701ea99f393ac1e9e94585b1a3c65ff3ef19349 FinalizedBlockHash:0x6c08ca9e1da4ccc81529f53011eee6b63ebcaed0dfce6e0910df3c05961477b8}\" attr=<nil>\r\nTRACE[02-16|13:53:35.433] Shared forkchoice-updated signal         state=\"&{HeadBlockHash:0x0341501bc2739c1aa0dfec2b3f1900e1f0f7325711238dfb8dd1187a19069213 SafeBlockHash:0x042a0d41b18543a71ca74a551701ea99f393ac1e9e94585b1a3c65ff3ef19349 FinalizedBlockHash:0x6c08ca9e1da4ccc81529f53011eee6b63ebcaed0dfce6e0910df3c05961477b8}\" attr=<nil>\r\n```\r\n", "CLOSED", 0, "wmitsuda", "2024-02-16T17:03:27Z", "2024-02-18T20:25:21Z", "2024-02-18T20:25:20Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_oi2", 9494, "cantina-MCP-L1-review: Resource config values can be modified during the MCP L1 upgrade", "Context: [l1.go#L728](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L728)\r\n\r\nDescription: The deployment process implemented in the op-chain-ops/upgrades/l1.go file is intended to carry over the values of the removed immutable variables to their mutable counterparts. Additionally, the process sets values of newly added variables (e.g. [SystemConfig's stratBlock](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L625-L629)). If the initialization of a contract requires setting variables that were not part of the MCP L1 upgrade, their values are carried over without modification (e.g. [the SystemConfig settings](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L669-L697)).\r\n\r\nHowever, the resource config of SystemConfig is set to the default value during the upgrade of the contract ([l1.go#L728](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L728)):\r\n\r\n```\r\ncalldata, err := systemConfigABI.Pack(\r\n\t\"initialize\",\r\n\tfinalSystemOwner,\r\n\tgasPriceOracleOverhead,\r\n\tgasPriceOracleScalar,\r\n\tbatcherHash,\r\n\tl2GenesisBlockGasLimit,\r\n\tp2pSequencerAddress,\r\n\tgenesis.DefaultResourceConfig, // @audit sets default values\r\n\tchainConfig.BatchInboxAddr,\r\n\tbindings.SystemConfigAddresses{\r\n\t\tL1CrossDomainMessenger:       common.Address(list.L1CrossDomainMessengerProxy),\r\n\t\tL1ERC721Bridge:               common.Address(list.L1ERC721BridgeProxy),\r\n\t\tL1StandardBridge:             common.Address(list.L1StandardBridgeProxy),\r\n\t\tL2OutputOracle:               common.Address(list.L2OutputOracleProxy),\r\n\t\tOptimismPortal:               common.Address(list.OptimismPortalProxy),\r\n\t\tOptimismMintableERC20Factory: common.Address(list.OptimismMintableERC20FactoryProxy),\r\n\t},\r\n)\r\n```\r\nThe resource config of a SystemConfig can have values that differ from the default ones as a result of a call to [SystemConfig.setResourceConfig()](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L339).\r\n\r\nAs a result, the upgrade can modify the resource config of a deployed SystemConfig contract. The resource config represents the configuration for the EIP-1559 based curve for the deposit gas market. Unintentional modification of the values can impact the gas metering of deposits of an OP chain.\r\n\r\nRecommendation: In the [upgrades.SystemConfig()](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L612) function, consider reading the current values of the SystemConfig's resource config and carrying them over to the initialize() function call.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:26:20Z", "2024-02-14T23:18:07Z", "2024-02-14T21:22:33Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_oW_", 9493, "cantina-MCP-L1-review: Upgrading poses the risk of unintentional modification of state variables", "Context: [SystemConfig.sol#L153-L188](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L153-L188), [l1.go#L720-L738](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L720-L738)\r\n\r\nDescription: The upgradeable contracts implement only one state initialization function (initialize()), which is used both during deployments and upgrades. This doesn't allow to initialize state variables selectively during an upgrade.\r\n\r\nConsider [SystemConfig.initialize()](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L153) as an example. The reviewed MCP L1 upgrade has added new state variables to the contract, which were all added to the initialize() for initialization during deployment. But, since the same initializer is used during upgrades, the values of the previously defined state variables need to be carried carried over without modification, when upgrading the contract ([l1.go#L664-L738](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L664-L738)):\r\n\r\n```\r\ngasPriceOracleOverhead, err := systemConfig.Overhead(&bind.CallOpts{})\r\n...\r\ngasPriceOracleScalar, err := systemConfig.Scalar(&bind.CallOpts{})\r\n...\r\nbatcherHash, err := systemConfig.BatcherHash(&bind.CallOpts{})\r\n...\r\nl2GenesisBlockGasLimit, err := systemConfig.GasLimit(&bind.CallOpts{})\r\n...\r\np2pSequencerAddress, err := systemConfig.UnsafeBlockSigner(&bind.CallOpts{})\r\n...\r\nfinalSystemOwner, err := systemConfig.Owner(&bind.CallOpts{})\r\n...\r\ncalldata, err := systemConfigABI.Pack(\r\n\t\"initialize\",                  // @audit old variables are carried over\r\n\tfinalSystemOwner,              //\r\n\tgasPriceOracleOverhead,        //\r\n\tgasPriceOracleScalar,          //\r\n\tbatcherHash,                   //\r\n\tl2GenesisBlockGasLimit,        //\r\n\tp2pSequencerAddress,           //\r\n\tgenesis.DefaultResourceConfig, //\r\n\tchainConfig.BatchInboxAddr,    //\r\n\tbindings.SystemConfigAddresses{ // @audit new variables are set\r\n\t\tL1CrossDomainMessenger:       common.Address(list.L1CrossDomainMessengerProxy),\r\n\t\tL1ERC721Bridge:               common.Address(list.L1ERC721BridgeProxy),\r\n\t\tL1StandardBridge:             common.Address(list.L1StandardBridgeProxy),\r\n\t\tL2OutputOracle:               common.Address(list.L2OutputOracleProxy),\r\n\t\tOptimismPortal:               common.Address(list.OptimismPortalProxy),\r\n\t\tOptimismMintableERC20Factory: common.Address(list.OptimismMintableERC20FactoryProxy),\r\n\t},\r\n)\r\n```\r\n\r\nThis creates the risk of mistakenly modifying an existing storage value during an upgrade. Since proxy addresses of L1 contracts are now stored in storage, an unintentional modification of a mutable proxy address can disrupt the work of an OP chain.\r\n\r\nRecommendation: Consider having multiple initializing functions in the upgradeable contracts:\r\n\r\nThe main initializer, e.g. initialize(), could be used to initialize state during deployments. It'd initialize all state variables of a contract.\r\nThe upgrade initializer, e.g. initialize_upgrade(), would initialize only upgrade-specific storage variables.\r\nTo avoid initialization conflicts, consider using versioning via the [reinitializer modifier](https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable-reinitializer-uint8-).", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:25:52Z", "2024-02-14T21:22:24Z", "2024-02-14T21:22:24Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_oLo", 9492, "cantina-MCP-L1-review: Incorrect implementation initialization testing", "Context: [L2CrossDomainMessenger.t.sol#L22-L28](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L2/L2CrossDomainMessenger.t.sol#L22-L28), [L2StandardBridge.t.sol#L25-L33](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L2/L2StandardBridge.t.sol#L25-L33)\r\n\r\nDescription: The [L2CrossDomainMessenger_Test.test_constructor_succeeds()](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L2/L2CrossDomainMessenger.t.sol#L23) is intended to check that the implementation of L2CrossDomainMessenger was initialized with zero values. However, the test ensures that the address of the other messenger was set to a real value:\r\n\r\n```\r\nL2CrossDomainMessenger impl = L2CrossDomainMessenger(deploy.mustGetAddress(\"L2CrossDomainMessenger\"));\r\nassertEq(address(impl.OTHER_MESSENGER()), address(l1CrossDomainMessenger));\r\nassertEq(address(impl.otherMessenger()), address(l1CrossDomainMessenger));\r\nassertEq(address(impl.l1CrossDomainMessenger()), address(l1CrossDomainMessenger));\r\n```\r\nThe cause of this is that deploy.mustGetAddress(\"L2CrossDomainMessenger\") returns the address of the proxy, not the implementation ([Artifacts.s.sol#L134-L135](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/scripts/Artifacts.s.sol#L134-L135)):\r\n\r\n```\r\nif (digest == keccak256(bytes(\"L2CrossDomainMessenger\"))) {\r\n    return payable(Predeploys.L2_CROSS_DOMAIN_MESSENGER);\r\n```\r\nThis issue (with an identical root cause) is also present in the [L2StandardBridge_Test.test_constructor_succeeds()](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L2/L2StandardBridge.t.sol#L26) test case.\r\n\r\nAs a result, the tests will fail to detect when the implementation of the L2 contract is initialized with real values. It's recommended that implementation contracts are always initialized with zero values so they cannot be confused and/or used as the main contracts.\r\n\r\nRecommendation: In the L2CrossDomainMessenger_Test.test_constructor_succeeds() test case, consider running the checks against the implementation address, not the proxy address. The implementation address can be obtained by calling the Proxy.implementation() function as an admin, or by reading the address from the corresponding storage slot.\r\n\r\nThis recommendation is also applicable to L2StandardBridge_Test.test_constructor_succeeds().", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:25:24Z", "2024-02-14T21:22:17Z", "2024-02-14T21:22:16Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_n-e", 9491, "cantina-MCP-L1-review: Inconsistent version updates", "Context: [L2CrossDomainMessenger.sol#L18-L19](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L2/L2CrossDomainMessenger.sol#L18-L19), [L1CrossDomainMessenger.sol#L23-L25](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol#L23-L25)\r\n\r\nDescription: The reviewed MCP L1 upgrade doesn't assume backward incompatible changes. Indeed, the changes made in [L1CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol#L15), [L2CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L2/L2CrossDomainMessenger.sol#L17), and [CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/universal/CrossDomainMessenger.sol#L87) didn't break backward compatibility.\r\n\r\nHowever, L1CrossDomainMessenger and L2CrossDomainMessenger received different version updates:\r\n\r\nL1CrossDomainMessenger was [updated from 2.2.0 to 2.3.0](https://github.com/ethereum-optimism/optimism/commit/e6ef3a900c42c8722e72c2e2314027f85d12ced5#diff-758b0324563ef5a12c2a621194fc988535939aba35f80f43f30c36c0c8f5affdL25-R25) (a minor update).\r\nL2CrossDomainMessenger was [updated from 1.9.0 to 2.0.0](https://github.com/ethereum-optimism/optimism/commit/e6ef3a900c42c8722e72c2e2314027f85d12ced5#diff-a05e63d94979f621f79dd9dd22c9efb7f7033bbe460410a5fe55199b962a2ffbL18-R19) (a major update).\r\nAs a result, the upgrade will signal an incorrect version update, which may impact third-party integrations and off-chain tools.\r\n\r\nRecommendation: In L2CrossDomainMessenger, consider setting version to 1.10.0.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:24:51Z", "2024-02-14T20:49:40Z", "2024-02-14T20:49:34Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_n4G", 9490, "cantina-MCP-L1-review: OP Chain deployment process is not compatible with MCP L1", "Context: [Deploy.s.sol#L303-L305](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/scripts/Deploy.s.sol#L303-L305)\r\n\r\nDescription: The reviewed MCP L1 upgrade makes L1 contract implementations re-usable by different OP Chains, via their respective L1 proxy contracts. However, the process of deploying OP Chains wasn't updated accordingly: when setting up a new chain, new L1 implementations are deployed and set in respective proxies ([Deploy.s.sol#L304-L305](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/scripts/Deploy.s.sol#L304-L305)):\r\n\r\n```\r\nfunction setupOpChain() public {\r\n    console.log(\"Deploying OP Chain\");\r\n\r\n    ...\r\n\r\n    deployProxies();\r\n    deployImplementations(); // @audit deploys new implementations instead of re-using existing ones\r\n    initializeImplementations();\r\n\r\n    ...\r\n}\r\n```\r\n[Deploy.s.sol#L329-L342](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/scripts/Deploy.s.sol#L329-L342):\r\n\r\n```\r\nfunction deployImplementations() public {\r\n    console.log(\"Deploying implementations\");\r\n    deployOptimismPortal();\r\n    deployL1CrossDomainMessenger();\r\n    deployL2OutputOracle();\r\n    deployOptimismMintableERC20Factory();\r\n    deploySystemConfig();\r\n    deployL1StandardBridge();\r\n    deployL1ERC721Bridge();\r\n    deployDisputeGameFactory();\r\n    deployPreimageOracle();\r\n    deployMips();\r\n}\r\n```\r\nAs a result, the next deployed OP Chain will be using its implementation contracts, which won't be covered by the atomic upgrades feature.\r\n\r\nRecommendation: Consider updating the deployment script to re-use existing implementation addresses in newly deployed OP Chains, instead of deploying new ones.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:24:34Z", "2024-02-14T21:22:08Z", "2024-02-14T21:22:07Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_nuC", 9489, "cantina-MCP-L1-review: Typos", "Context: [L2OutputOracle.t.sol#L454](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L1/L2OutputOracle.t.sol#L454), [OptimismPortal.sol#L26](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/OptimismPortal.sol#L26)\r\n\r\nDescription: During the review, the following typos were found in the codebase:\r\n\r\n[L2OutputOracle.t.sol#L454](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L1/L2OutputOracle.t.sol#L454): \"test_initalize_l2BlockTimeZero_reverts\" should be \"test_initialize_l2BlockTimeZero_reverts\";\r\nIn [OptimismPortal.sol#L26](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/OptimismPortal.sol#L26) whcih should be which.\r\n```\r\n    /// @notice Represents a proven withdrawal.\r\n    /// @custom:field outputRoot    Root of the L2 output this was proven against.\r\n-    /// @custom:field timestamp     Timestamp at whcih the withdrawal was proven.\r\n+    /// @custom:field timestamp     Timestamp at which the withdrawal was proven.\r\n    /// @custom:field l2OutputIndex Index of the output this was proven against.\r\n```\r\nRecommendation: Consider fixing the above typos.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:24:08Z", "2024-02-14T21:21:58Z", "2024-02-14T21:21:58Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_ni0", 9488, "cantina-MCP-L1-review: OptimismPortal initialization tests lack resource config checks", "Context: [OptimismPortal.t.sol#L34-L42](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L1/OptimismPortal.t.sol#L34-L42), [OptimismPortal.t.sol#L45-L56](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L1/OptimismPortal.t.sol#L45-L56)\r\n\r\nDescription: The [test_constructor_succeeds](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L1/OptimismPortal.t.sol#L34) and [test_initialize_succeeds](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L1/OptimismPortal.t.sol#L45) test cases check the initial values in the implementation and the proxy of OptimismPortal. However, those checks are not complete: the [OptimismPortal.initialize()](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/OptimismPortal.sol#L124) function also initializes the [ResourceMetering](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/ResourceMetering.sol#L13) contracts and sets the initial resource config\u2013these config values are not checked in the tests.\r\n\r\nRecommendation: In above mentioned test cases, consider checking the initial resource config values of OptimismPortal.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:23:42Z", "2024-02-14T21:21:51Z", "2024-02-14T21:21:51Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_naI", 9487, "cantina-MCP-L1-review: Should reserve gaps for FeeVault", "Context: [FeeVault.sol#L32](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/universal/FeeVault.sol#L32)\r\n\r\nDescription: There is no gaps reserved in FeeVault abstract contract.\r\n\r\nThe BaseFeeVault, L1FeeVault, and SequencerFeeVault that inherit from FeeVault don't have their own state variables yet, so it's possible to reserve gaps in FeeVault now.\r\n\r\nIf any contracts that inherit from FeeVault have their own state variables, then it will not be possible to add any new state variables to FeeVault. This will break FeeVault contract's upgradability.\r\n\r\nRecommendation: It is recommended to reserve gaps in FeeVault.\r\n\r\n```\r\nabstract contract FeeVault {\r\n    /// @notice Enum representing where the FeeVault withdraws funds to.\r\n    /// @custom:value L1 FeeVault withdraws funds to L1.\r\n    /// @custom:value L2 FeeVault withdraws funds to L2.\r\n    enum WithdrawalNetwork {\r\n        L1,\r\n        L2\r\n    }\r\n\r\n    /// @notice Minimum balance before a withdrawal can be triggered.\r\n    uint256 public immutable MIN_WITHDRAWAL_AMOUNT;\r\n\r\n    /// @notice Wallet that will receive the fees.\r\n    address public immutable RECIPIENT;\r\n\r\n    /// @notice Network which the RECIPIENT will receive fees on.\r\n    WithdrawalNetwork public immutable WITHDRAWAL_NETWORK;\r\n\r\n    /// @notice The minimum gas limit for the FeeVault withdrawal transaction.\r\n    uint32 internal constant WITHDRAWAL_MIN_GAS = 35_000;\r\n\r\n    /// @notice Total amount of wei processed by the contract.\r\n    uint256 public totalProcessed;\r\n\r\n+   uint256[49] private __gap;\r\n```", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:23:22Z", "2024-02-14T21:21:42Z", "2024-02-14T21:21:42Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_nQj", 9486, "cantina-MCP-L1-review: Different sources of values for checking and deployment", "Context: [l1.go#L121-L123](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/op-chain-ops/upgrades/l1.go#L121-L123), [L1CrossDomainMessenger.sol#L38](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol#L38)\r\n\r\nDescription: In L1(), we check that the values in the configuration (from list/config/chainConfig parameter) are the same as on the chain, and call the initialize() with them later.\r\nHowever, for predeploys, the address in op-bindings/predeploys/addresses.go is used for checking and the address in packages/contracts-bedrock/src/libraries/Predeploys.sol is used for deploying.\r\nIf the addresses in the two files are not synchronized, then this will result in incorrect addresses being used when deployment.\r\n\r\n```\r\nimport (\r\n...\r\n\t\"github.com/ethereum-optimism/optimism/op-bindings/predeploys\"\r\n...\r\n\tif otherMessenger != predeploys.L2CrossDomainMessengerAddr {\r\n\t\treturn fmt.Errorf(\"upgrading L1CrossDomainMessenger: OtherMessenger address doesn't match config\")\r\n\t}\r\nimport { Predeploys } from \"src/libraries/Predeploys.sol\";\r\n...\r\n    function initialize(SuperchainConfig _superchainConfig, OptimismPortal _portal) public initializer {\r\n        superchainConfig = _superchainConfig;\r\n        portal = _portal;\r\n        __CrossDomainMessenger_init({ _otherMessenger: CrossDomainMessenger(Predeploys.L2_CROSS_DOMAIN_MESSENGER) });\r\n    }\r\n```\r\nRecommendation: It is recommended to add checks to ensure that the values to be used are the same in the two files.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:22:58Z", "2024-02-14T21:21:32Z", "2024-02-14T21:21:32Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_nGD", 9485, "cantina-MCP-L1-review: Real values are used in the implementation", "Context: [L1CrossDomainMessenger.sol#L28-L39](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol#L28-L39)\r\n\r\nDescription: Calling initialize() in the constructor() initializes superchainConfig and portal to address(0), but otherMessenger remains Predeploys.L2_CROSS_DOMAIN_MESSENGER.\r\n\r\n```\r\n    constructor() CrossDomainMessenger() {\r\n        initialize({ _superchainConfig: SuperchainConfig(address(0)), _portal: OptimismPortal(payable(address(0))) });\r\n    }\r\n\r\n    /// @notice Initializes the contract.\r\n    /// @param _superchainConfig Contract of the SuperchainConfig contract on this network.\r\n    /// @param _portal Contract of the OptimismPortal contract on this network.\r\n    function initialize(SuperchainConfig _superchainConfig, OptimismPortal _portal) public initializer {\r\n        superchainConfig = _superchainConfig;\r\n        portal = _portal;\r\n        __CrossDomainMessenger_init({ _otherMessenger: CrossDomainMessenger(Predeploys.L2_CROSS_DOMAIN_MESSENGER) });\r\n    }\r\n```\r\nAlthough the correct checks are made in the tests, however, we should not use the real values in the implementation to ensure that there is a difference between the proxy and the implementation, thus avoiding confusion.\r\n\r\nAnd, considering that this implementation will be used by multiple proxies, it is not a good choice to keep it as a certain L2 value.\r\n\r\nRecommendation: It is recommended not to use real values in the implementation.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:22:33Z", "2024-02-14T21:21:23Z", "2024-02-14T21:21:23Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_m8o", 9484, "cantina-MCP-L1-review: L2OutputOracle.t.sol removed check for latestBlockNumbe", "Context: [L2OutputOracle.t.sol#L41-L61](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/test/L1/L2OutputOracle.t.sol#L41-L61)\r\n\r\nDescription: L2OutputOracle.t.sol seems to have mistakenly removed the check for latestBlockNumber in test_initialize_succeeds() when upgrading.\r\n\r\nRecommendation:\r\nIt is recommended to add back the check for latestBlockNumber in test_initialize_succeeds().\r\n\r\n```\r\n    function test_initialize_succeeds() external {\r\n        address proposer = deploy.cfg().l2OutputOracleProposer();\r\n        address challenger = deploy.cfg().l2OutputOracleChallenger();\r\n        uint256 submissionInterval = deploy.cfg().l2OutputOracleSubmissionInterval();\r\n        uint256 startingBlockNumber = deploy.cfg().l2OutputOracleStartingBlockNumber();\r\n        uint256 startingTimestamp = deploy.cfg().l2OutputOracleStartingTimestamp();\r\n        uint256 l2BlockTime = deploy.cfg().l2BlockTime();\r\n        uint256 finalizationPeriodSeconds = deploy.cfg().finalizationPeriodSeconds();\r\n\r\n        assertEq(l2OutputOracle.SUBMISSION_INTERVAL(), submissionInterval);\r\n        assertEq(l2OutputOracle.submissionInterval(), submissionInterval);\r\n        assertEq(l2OutputOracle.L2_BLOCK_TIME(), l2BlockTime);\r\n        assertEq(l2OutputOracle.l2BlockTime(), l2BlockTime);\r\n+       assertEq(l2OutputOracle.latestBlockNumber(), startingBlockNumber);\r\n        assertEq(l2OutputOracle.startingBlockNumber(), startingBlockNumber);\r\n        assertEq(l2OutputOracle.startingTimestamp(), startingTimestamp);\r\n        assertEq(l2OutputOracle.finalizationPeriodSeconds(), finalizationPeriodSeconds);\r\n        assertEq(l2OutputOracle.PROPOSER(), proposer);\r\n        assertEq(l2OutputOracle.proposer(), proposer);\r\n        assertEq(l2OutputOracle.CHALLENGER(), challenger);\r\n        assertEq(l2OutputOracle.FINALIZATION_PERIOD_SECONDS(), finalizationPeriodSeconds);\r\n        assertEq(l2OutputOracle.challenger(), challenger);\r\n    }\r\n```", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:22:07Z", "2024-02-14T21:21:12Z", "2024-02-14T21:21:12Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_mwB", 9483, "cantina-MCP-L1-review: Missing or Incomplete NatSpec", "Context: [SystemConfig.sol#L215](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L215), [SystemConfig.sol#L220](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L220), [SystemConfig.sol#L225](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L225), [SystemConfig.sol#L230](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L230), [SystemConfig.sol#L235](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L235), [SystemConfig.sol#L240](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L240), [SystemConfig.sol#L245](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol#L245)\r\n\r\nDescription: Some instances of incomplete or missing NatSpec documentation have been found in the codebase. There are listed in the recommendation section with the suggested fix.\r\n\r\nRecommendation:\r\n\r\nIn [SystemConfig.sol](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/L1/SystemConfig.sol), the l1ERC721Bridge(), l1StandardBridge(), l2OutputOracle(), optimismPortal(), optimismMintableERC20Factory(), batchInbox() and the startBlock() functions are missing the NatSpec @return.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:21:40Z", "2024-02-14T21:20:58Z", "2024-02-14T21:20:58Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_mnG", 9482, "cantina-MCP-L1-review: address(0) checks are missing from the ERC721Bridge contract #34", "Context: [ERC721Bridge.sol#L73-L82](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L73-L82)\r\n\r\nDescription: The [__ERC721Bridge_init](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L73-L82) function is called during the initialization of both the [L1ERC721Bridge](https://github.com/ethereum-optimism/optimism/blob/c368f633c24f099029e0f081238dc7c47b619b80/packages/contracts-bedrock/src/L1/L1ERC721Bridge.sol#L31-L44) and in the [L2ERC721Bridge](https://github.com/ethereum-optimism/optimism/blob/c368f633c24f099029e0f081238dc7c47b619b80/packages/contracts-bedrock/src/L2/L2ERC721Bridge.sol#L28-L39). However, the address(0) checks that were present in the previous version are now missing from the ERC721Bridge contract.\r\n```\r\n    /// @notice Initializer.\r\n    /// @param _messenger   Contract of the CrossDomainMessenger on this network.\r\n    /// @param _otherBridge Contract of the ERC721 bridge on the other network.\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __ERC721Bridge_init(\r\n        CrossDomainMessenger _messenger,\r\n        StandardBridge _otherBridge\r\n    )\r\n        internal\r\n        onlyInitializing\r\n    {\r\n        messenger = _messenger;\r\n        otherBridge = _otherBridge;\r\n    }\r\n```\r\nRecommendation: Since the address(0) are used to initialize the _messenger or _otherBridge, address(0xdEaD) can be used on both the L1ERC721Bridge and L2ERC721Bridge contracts while also including the zero-address checks.\r\nAdditionally, instead of initializing with zero or dead values, you can consider using the [_disableInitializers](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/ecd2ca2cd7cac116f7a37d0e474bbb3d7d5e1c4d/contracts/proxy/utils/Initializable.sol#L131) method on the constructor.", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:21:22Z", "2024-02-14T21:20:47Z", "2024-02-14T21:20:47Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5-_mV9", 9481, "cantina-MCP-L1-review: Incorrect comment in the ERC721Bridge contract regarding storage layout", "Context: [ERC721Bridge.sol#L25-26](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L25-26)\r\n\r\nDescription: The comment in the [ERC721Bridge](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L25-26) contract states that there are 50 reserved storage slots. However, it should indicate that 49 slots are reserved, not 50. This discrepancy arises because the combined storage slots of the ERC721Bridge and Initializable total 49 slots rather than the stated 50.\r\n\r\nThe storage slot for the deposit mapping in the parent contract [starts at 49](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/snapshots/storageLayout/L1ERC721Bridge.json#L45) not 50.\r\n\r\nRecommendation: It is recommended to modify the comment in the [ERC721Bridge](https://github.com/ethereum-optimism/optimism/blob/e6ef3a900c42c8722e72c2e2314027f85d12ced5/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L25-26) contract:\r\n```\r\n-  /// @notice Reserve extra slots (to a total of 50) in the storage layout for future upgrades.\r\n+  /// @notice Reserve extra slots (to a total of 49) in the storage layout for future upgrades.\r\n    uint256[46] private __gap;\r\n```", "CLOSED", 0, "0xfuturistic", "2024-02-12T17:20:40Z", "2024-02-14T21:20:36Z", "2024-02-14T21:20:35Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDODjvEJM5uhPTh", 6851, "op-node stuck after L1 node switch", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nI'm running bedrock stack on mainnet with the dockerized `op-node:v1.1.1`\r\nIn the last two days, I lost network connection to the configured L1 node.\r\nToday, I've switched the L1 URL and restarted op-node.\r\nNow the op-node is stuck in a loop traversing back around 2 days of L1 blocks over and over again.\r\n```\r\n...\r\nt=2023-08-17T03:45:25+0000 lvl=info msg=\"Walking back L1Block by hash\"       curr=0x731ca1d47d67669803bf14e585db34fc55f7b218119ecc0dbc31851a7d7fe979:17927746 next=0x551ed54dbda8d7ff705e9f0c46c9f72cf58f217e3c2646af1cd27ec91de77657:17927745 l2block=0x6e2bf3aad26cbde7153017833634149da3fbe438b2eb79341c66fa33d526aea2:108297243\r\nt=2023-08-17T03:45:25+0000 lvl=info msg=\"Walking back L1Block by hash\"       curr=0x551ed54dbda8d7ff705e9f0c46c9f72cf58f217e3c2646af1cd27ec91de77657:17927745 next=0x7e3992df851edcb60d52608879eaa238f6420f396f305af0a0623e5f862dc7b1:17927744 l2block=0x6a72668599ba100f47cac1e7827ef3909e4935dd0666357ac7d498eccad4e8b4:108297237\r\nt=2023-08-17T03:45:25+0000 lvl=info msg=\"Walking back L1Block by hash\"       curr=0x7e3992df851edcb60d52608879eaa238f6420f396f305af0a0623e5f862dc7b1:17927744 next=0x3c9e4e966465efb8dee9086c7ab98d2e77dba6332163ef704a38e7cbe28fe0ef:17927743 l2block=0xbc957b7eb9e142405c5be4366208b0e1937d2e70e7d2202bd4a0f481123a586c:108297231\r\nt=2023-08-17T03:45:25+0000 lvl=info msg=\"Walking back L1Block by hash\"       curr=0x3c9e4e966465efb8dee9086c7ab98d2e77dba6332163ef704a38e7cbe28fe0ef:17927743 next=0xe148f6c7220bf5a9db1a7ae01a5726be40f2d5f378aa9bba1a761cd6eec8555e:17927742 l2block=0xf1f9cdb6e98f22771d0efed5118836cdedd8311f56630ec5627317b7ab04a56a:108297225\r\nt=2023-08-17T03:45:25+0000 lvl=info msg=\"Walking back L1Block by hash\"       curr=0xe148f6c7220bf5a9db1a7ae01a5726be40f2d5f378aa9bba1a761cd6eec8555e:17927742 next=0x4bff1e62b1727274627cbc82e28115b35a74ba1e2a84774c81b692ce0acae55c:17927741 l2block=0x40a5a34c6458e5a63a92458f7832af0477ebec2bdec5448a1ba297fde93f39b8:108297219\r\n...\r\n```\r\n\r\nI've seen a few other logs indicating a reorg problem:\r\n```\r\nt=2023-08-17T03:01:06+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=1 err=\"stage 0 failed resetting: temp: failed to find the L2 Heads to start from: reorg is too deep: traversed back to L2 block 0x80e91068369632491fe9c34005b434ec268daf6fc5a0e72a4e96e610affa565d:108198044, but too deep compared to previous unsafe block 0x3a0ca33bfeff0d153f8b73178eb800617d5f02efb9ecd829f71df0ce6d830715:108306767\"\r\nt=2023-08-17T03:16:00+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=2 err=\"stage 0 failed resetting: temp: failed to find the L2 Heads to start from: reorg is too deep: traversed back to L2 block 0x80e91068369632491fe9c34005b434ec268daf6fc5a0e72a4e96e610affa565d:108198044, but too deep compared to previous unsafe block 0x3a0ca33bfeff0d153f8b73178eb800617d5f02efb9ecd829f71df0ce6d830715:108306767\"\r\nt=2023-08-17T03:30:00+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=3 err=\"stage 0 failed resetting: temp: failed to find the L2 Heads to start from: reorg is too deep: traversed back to L2 block 0x80e91068369632491fe9c34005b434ec268daf6fc5a0e72a4e96e610affa565d:108198044, but too deep compared to previous unsafe block 0x3a0ca33bfeff0d153f8b73178eb800617d5f02efb9ecd829f71df0ce6d830715:108306767\"\r\n```\r\n\r\n\r\n**Expected behavior**\r\nop-node should self-recover\r\n\r\nIs there anything that can be done to recover the node ?", "CLOSED", 0, "crebsy", "2023-08-17T04:02:09Z", "2024-02-12T16:54:02Z", "2024-02-12T16:54:01Z", "ethereum-optimism/optimism", "2025-08-30 07:37:52"]
["I_kwDOFpg0Ns6AGcAz", 655, "Token validation error occurred during a pool request", "While submitting a PR for the SMT token support on BASE mainnet: #642 \r\nThe validation of this PR [failed](https://github.com/ethereum-optimism/ethereum-optimism.github.io/actions/runs/7886893209/job/21778986640) with the description:\r\n```\r\n[ 'SMT' ]\r\n\u2009ELIFECYCLE\u2009 Command failed with exit code 1.\r\n/home/runner/work/ethereum-optimism.github.io/ethereum-optimism.github.io/src/generate.ts:40\r\n      const logoext = logofiles[0].endsWith('png') ? 'png' : 'svg'\r\n                                   ^\r\n\r\nTypeError: Cannot read properties of undefined (reading 'endsWith')\r\n    at <anonymous> (/home/runner/work/ethereum-optimism.github.io/ethereum-optimism.github.io/src/generate.ts:40:36)\r\n    at Array.map (<anonymous>)\r\n    at generate (/home/runner/work/ethereum-optimism.github.io/ethereum-optimism.github.io/src/generate.ts:33:6)\r\n    at validate (/home/runner/work/ethereum-optimism.github.io/ethereum-optimism.github.io/src/validate.ts:330:[16](https://github.com/ethereum-optimism/ethereum-optimism.github.io/actions/runs/7886893209/job/21778986640?pr=642#step:10:17))\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at Command.<anonymous> (/home/runner/work/ethereum-optimism.github.io/ethereum-optimism.github.io/bin/cli.ts:25:[21](https://github.com/ethereum-optimism/ethereum-optimism.github.io/actions/runs/7886893209/job/21778986640?pr=642#step:10:22))\r\n```\r\nIs this validation error related to the provided `.svg` image or something else? And how can this problem be solved?\r\n\r\n@roberto-bayardo , @roninjin10 \r\nLooking forward to your help \ud83d\ude4c", "CLOSED", 0, "b0gdaniy", "2024-02-22T14:13:36Z", "2024-02-23T08:17:02Z", "2024-02-23T08:16:32Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 08:39:20"]
["I_kwDOKSJyfM5-cshN", 81, "[xs] Implement insights page", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:42Z", "2024-02-20T21:09:09Z", "2024-02-20T21:09:09Z", "ethereum-optimism/ecosystem", "2025-08-30 08:39:20"]
["I_kwDOKSJyfM5-csfN", 79, "[s] Implement mobile navigation menu", "", "CLOSED", 0, "jvmi7", "2024-02-06T18:43:38Z", "2024-02-20T21:09:38Z", "2024-02-20T21:09:38Z", "ethereum-optimism/ecosystem", "2025-08-30 08:39:20"]
["I_kwDOI7W0xc5_3Heo", 358, "jesi", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nA clear and concise description of what the bug is.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Outline the steps to reproduce the bug.\r\n2. Be specific and detailed to help developers replicate the issue.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\n - Operating System: [e.g. Ubuntu 20.04]\r\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "habibiman62", "2024-02-20T19:52:36Z", "2024-02-22T01:15:17Z", "2024-02-22T01:15:16Z", "ethereum-optimism/op-analytics", "2025-08-30 08:39:21"]
["I_kwDOI7W0xc5_2uSO", 357, "Never got airdrop ", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nA clear and concise description of what the bug is.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Outline the steps to reproduce the bug.\r\n2. Be specific and detailed to help developers replicate the issue.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\n - Operating System: [e.g. Ubuntu 20.04]\r\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "xadro23", "2024-02-20T18:46:53Z", "2024-02-22T01:15:54Z", "2024-02-22T01:15:54Z", "ethereum-optimism/op-analytics", "2025-08-30 08:39:21"]
["I_kwDOKIwiaM5_uxhA", 496, "[DOCS] OP Mainnet archive node snapshot 404 not found", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\n<img width=\"707\" alt=\"image\" src=\"https://github.com/ethereum-optimism/docs/assets/4103490/08326379-a1c5-40f2-bbeb-32ea8438cf03\">\r\n\r\n<img width=\"205\" alt=\"image\" src=\"https://github.com/ethereum-optimism/docs/assets/4103490/21035d97-16e9-4692-9f77-5a82d000cb59\">\r\n\r\n\r\n## Description of the Documentation You'd Like\r\nIt should not be 404 and must download the snapshot archive file\r\n\r\n## Links to Related Pages\r\nhttps://docs.optimism.io/builders/node-operators/management/snapshots\r\n\r\nhttps://datadirs.optimism.io/mainnet-2024-01-26.tar.zst\r\n\r\n## Additional Context\r\n@sbvegan @cpengilly @smartcontracts \r\n", "CLOSED", 0, "Chomtana", "2024-02-19T18:47:09Z", "2024-02-21T18:32:56Z", "2024-02-21T18:32:56Z", "ethereum-optimism/docs", "2025-08-30 08:39:21"]
["I_kwDOKIsnqM5_2O3z", 80, "refactor: reduce duplication of script code", "From https://github.com/ethereum-optimism/superchain-ops/pull/79#discussion_r1496196583 by @mds1 and @maurelian \r\n\r\n> Do we intentionally duplicate the logic instead of adding a new `safeKind = foundation | council` parameter to avoid any breaking changes to UX? https://just.systems/man/en/chapter_38.html\r\n> > I had a bit of difficulty getting the `just` syntax to work for that, so I just did this, but I agree it's worth investigating further.", "CLOSED", 0, "mds1", "2024-02-20T17:38:52Z", "2024-02-21T19:42:29Z", "2024-02-21T19:42:29Z", "ethereum-optimism/superchain-ops", "2025-08-30 08:39:34"]
["I_kwDODjvEJM6ATA3V", 9652, "<!-- Contributions welcome! See https://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md -->", "<!-- Contributions welcome! See https://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md -->\r\n\r\n**Description**\r\n\r\nLooking for any bugs none were found\r\n\r\n**Tests**\r\n\r\nNo changes or added requests to test delete the pull.\r\n\r\n**Additional context**\r\n\r\nDecline the pull request auditing was the test \r\n\r\n**Metadata**\r\n\r\n- Fixes #[Link to Issue]\r\n\n\n_Originally posted by @kakazgg in https://github.com/ethereum-optimism/ethereum-optimism.github.io/pull/657_", "CLOSED", 0, "philliprossii", "2024-02-24T20:13:43Z", "2024-02-24T20:20:14Z", "2024-02-24T20:20:14Z", "ethereum-optimism/optimism", "2025-08-30 08:40:03"]
["I_kwDODjvEJM6ALPSi", 9639, "`ProxyAdmin.sol` is not two-step", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThe `ProxyAdmin` is, I believe, one of the most crucial pieces within the OP Stack.  That being said, transferring ownership for the `ProxyAdmin` is only a single step.  So, as soon as the ownership transfer tx is submitted, the `ProxyAdmin` owner is changed.\r\n\r\nThis can be an issue for several reasons:\r\n- There's always the possibility of fat-finger ownership transfer to an unintended recipient (which may or may not have control over their PK).\r\n- The fact that the `ProxyAdmin` can be changed and modify all controlled contracts within the same tx is quite uneasing.\r\n\r\n**Describe the solution you'd like**\r\nI suggest using OZ's [Ownable2Step](https://docs.openzeppelin.com/contracts/5.x/api/access#Ownable2Step) to further solidify ownership transfer.  With this module, ownership is not transferred *until* the recipient accepts the transfer.  Therefore:\r\n- It is impossible to accidentally transfer `ProxyAdmin` ownership.\r\n- Ownership transfer and controlled contract execution is impossible within the same transaction as there needs to be a transaction by the owner to submit ownership transfer, and a second tx for the recipient to accept.\r\n\r\nI'm not sure if this can be done with the current `ProxyAdmin` on OP mainnet and live  Superchains.  At the minimum, it's worth adding for future OP Stack buidlers.", "CLOSED", 0, "pegahcarter", "2024-02-23T06:10:25Z", "2024-02-25T16:40:09Z", "2024-02-25T15:52:35Z", "ethereum-optimism/optimism", "2025-08-30 08:40:03"]
["I_kwDODjvEJM6AIriu", 9630, "Show newly created token in my portfolio in sushi swap and other DEXes", "Show newly created token in my portfolio in sushi swap and other DEXes", "CLOSED", 0, "blackbelt1207", "2024-02-22T19:08:02Z", "2024-02-22T20:07:38Z", "2024-02-22T20:07:38Z", "ethereum-optimism/optimism", "2025-08-30 08:40:03"]
["I_kwDODjvEJM6AIcoY", 9628, "AW HOUSE", "On the website https://www.optimism.io/apps/all there are some apps that are not active and not used, why to add it into the list. Quality is better than quantity.", "CLOSED", 0, "rsayfiev", "2024-02-22T18:31:43Z", "2024-02-22T20:38:09Z", "2024-02-22T20:38:09Z", "ethereum-optimism/optimism", "2025-08-30 08:40:03"]
["I_kwDODjvEJM6AHs4y", 9626, "SFD - stake for drop", "Staking Optimism to get drops from other project via collaboration with them. It will increase the volume of OP token and add some liquidity into the Optimism ecosystem.", "CLOSED", 0, "Rus-Alvarez", "2024-02-22T16:52:39Z", "2024-02-22T17:54:12Z", "2024-02-22T17:54:12Z", "ethereum-optimism/optimism", "2025-08-30 08:40:03"]
["I_kwDODjvEJM5_ghZH", 9586, "op-e2e TestMixedWithdrawalValidity/withdrawal_test#9 is broken", "**Bug Description**\r\nThe op-e2e test `TestMixedWithdrawalValidity/withdrawal_test#9` is broken.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Check out a fresh copy of Optimism\r\n2. Prepare the e2e tests by running `make && make devnet-allocs`\r\n3. Run the op-e2e tests with `cd op-e2e && make test`\r\n\r\n**Expected behavior**\r\nThe tests should all pass\r\n\r\n**Environment Information:**\r\n\r\nTried locally on a number of systems (Mac, Linux, CircleCI)\r\n\r\n**Additional context**\r\nThis test has been broken for a while, but was accidentally being skipped in CI.", "CLOSED", 0, "jyellick", "2024-02-16T18:57:48Z", "2024-02-20T03:55:26Z", "2024-02-20T03:55:26Z", "ethereum-optimism/optimism", "2025-08-30 08:40:03"]
["I_kwDODjvEJM5FdnDe", 2306, "callTracer returns TypeError exception for certarin txs", "**Describe the bug**\r\n\r\nSome transactions raise an exception when using `debug_traceTransaction` with the `callTracer` tracer.\r\n\r\nThese transactions all have the same error in the Status at [Etherscan](https://optimistic.etherscan.io/tx/0xc033250c5a45f9d104fc28640071a776d146d48403cf5e95ed0015c712e26cb6):\r\n`Fail with error 'deployer address not whitelisted: 0xc6dbd69d69F22842832E93aE1Ede9995c583bFC1'`\r\n\r\nList of transactions detected:\r\n- [0xc033250c5a45f9d104fc28640071a776d146d48403cf5e95ed0015c712e26cb6](https://optimistic.etherscan.io/tx/0xc033250c5a45f9d104fc28640071a776d146d48403cf5e95ed0015c712e26cb6)\r\n- [0xcf6e46a1f41e1678fba10590f9d092690c5e8fd2e85a3614715fb21caa74655d](https://optimistic.etherscan.io/tx/0xcf6e46a1f41e1678fba10590f9d092690c5e8fd2e85a3614715fb21caa74655d)\r\n- [0x86f8c77cfa2b439e9b4e92a10f6c17b99fce1220edf4001e4158b57f41c576e5](https://optimistic.etherscan.io/tx/0x86f8c77cfa2b439e9b4e92a10f6c17b99fce1220edf4001e4158b57f41c576e5)\r\n- [0x0c38a734be0cd55ae21a9f40b7b7399cbbc957614a39e3e1ecd5e135496c6e9f](https://optimistic.etherscan.io/tx/0x0c38a734be0cd55ae21a9f40b7b7399cbbc957614a39e3e1ecd5e135496c6e9f)\r\n- [0x4ae94460e1550b430707d13f6c632422b89f2b8989fe50adeddb85464584b3a3](https://optimistic.etherscan.io/tx/0x4ae94460e1550b430707d13f6c632422b89f2b8989fe50adeddb85464584b3a3)\r\n- [0x9305aa567670acee152774543136e1e2cb756c04083f643f69de75bceba150c7](https://optimistic.etherscan.io/tx/0x9305aa567670acee152774543136e1e2cb756c04083f643f69de75bceba150c7)\r\n- [0x177a8debf83f65daf7e9eb75d676262949d91dc8a5ef62a859a31b0e6167fd17](https://optimistic.etherscan.io/tx/0x177a8debf83f65daf7e9eb75d676262949d91dc8a5ef62a859a31b0e6167fd17)\r\n- [0xc033250c5a45f9d104fc28640071a776d146d48403cf5e95ed0015c712e26cb6](https://optimistic.etherscan.io/tx/0xc033250c5a45f9d104fc28640071a776d146d48403cf5e95ed0015c712e26cb6)\r\n- [0xd171e2d41a1828f2986633ab004a613767811a962e6aa02b181ac1707e31212e](https://optimistic.etherscan.io/tx/0xd171e2d41a1828f2986633ab004a613767811a962e6aa02b181ac1707e31212e)\r\n\r\n**To Reproduce**\r\n\r\nSend `debug_traceTransaction` to an archive node:\r\n```\r\ncurl https://your-node \\\r\n  -X POST \\\r\n  -H \"Content-Type: application/json\" \\\r\n  --data '{\"method\":\"debug_traceTransaction\",\"params\":[\"0xc033250c5a45f9d104fc28640071a776d146d48403cf5e95ed0015c712e26cb6\", {\"tracer\": \"callTracer\"}],\"id\":1,\"jsonrpc\":\"2.0\"}'\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32000,\"message\":\"TypeError: cannot read property 'toString' of undefined    in server-side tracer function 'result'\"}}\r\n```\r\n\r\n**Expected behavior**\r\nGet a response without an exception which is similar to other `callTracer` responses.\r\n\r\n**System Specs:**\r\n - OS: Ubuntu 20.04.3 LTS\r\n - Package Version (or commit hash): 0.5.11\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "qk-santi", "2022-03-10T15:42:16Z", "2024-02-22T07:53:35Z", "2023-06-16T19:01:23Z", "ethereum-optimism/optimism", "2025-08-30 08:40:03"]
["I_kwDOKSJyfM5-ctjp", 103, "[m] Set up mixpanel in dapp console app", "Implement a reusable way for us to have mixpanel tracking in applications in the ecosystem repo", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:15Z", "2024-02-28T21:07:25Z", "2024-02-28T21:07:25Z", "ethereum-optimism/ecosystem", "2025-08-30 08:40:23"]
["I_kwDOH2Qg5s6AYyZq", 255, "Node stopped syncing after oom kill", "#### System information\r\n\r\nGeth version: `v1.101304.2`\r\nOp-node version: `v1.3.2`\r\nOS & Version: Linux\r\n\r\n#### Expected behaviour\r\nNode is syncing normally\r\n\r\n#### Actual behaviour\r\nNode stopped syncing and concerns about `gap in the chain between ancients`\r\n\r\n#### Steps to reproduce the behaviour\r\nJust run the node\r\n\r\n#### Backtrace\r\nI am running optimism stack in docker - https://github.com/smartcontracts/simple-optimism-node \r\nMy node was syncing normally, but after oom kill due to high memory consumption it couldn't sync again, reporting that there is a problem with database, attached the logs below.\r\nI've upgraded op-node to `v1.4.3` and op-geth to `1.101305.3`, unfortunately it didn't help.\r\n\r\n<details><summary> op-geth logs</summary>\r\n\r\n````\r\nerrexit         on\r\nnoglob          off\r\nignoreeof       off\r\nmonitor         off\r\nnoexec          off\r\nxtrace          off\r\nverbose         off\r\nnoclobber       off\r\nallexport       off\r\nnotify          off\r\nnounset         off\r\nerrtrace        off\r\nvi              off\r\npipefail        off\r\nINFO [02-26|10:24:19.147] Enabling metrics collection \r\nINFO [02-26|10:24:19.149] Maximum peer count                       ETH=0 LES=0 total=0\r\nINFO [02-26|10:24:19.150] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\r\nINFO [02-26|10:24:19.153] Enabling recording of key preimages since archive mode is used \r\nWARN [02-26|10:24:19.153] Disabled transaction unindexing for archive node \r\nINFO [02-26|10:24:19.153] Set global gas cap                       cap=50,000,000\r\nINFO [02-26|10:24:19.154] Initializing the KZG library             backend=gokzg\r\nINFO [02-26|10:24:19.195] Allocated trie memory caches             clean=307.00MiB dirty=0.00B\r\nINFO [02-26|10:24:21.419] Using leveldb as the backing database \r\nINFO [02-26|10:24:21.419] Allocated cache and file handles         database=/geth/geth/chaindata cache=512.00MiB handles=524,288\r\nINFO [02-26|10:24:36.001] Using LevelDB as the backing database \r\nINFO [02-26|10:24:36.001] Found legacy ancient chain path          location=/geth/geth/chaindata/ancient\r\nINFO [02-26|10:24:36.046] Opened ancient database                  database=/geth/geth/chaindata/ancient readonly=false\r\nChain metadata\r\n  databaseVersion: 8 (0x8)\r\n  headBlockHash: 0x284dc3a53bf254cabf3d22cfc3a8664fc5957db4dca4b433866ebb1612147c07\r\n  headFastBlockHash: 0x284dc3a53bf254cabf3d22cfc3a8664fc5957db4dca4b433866ebb1612147c07\r\n  headHeaderHash: 0x284dc3a53bf254cabf3d22cfc3a8664fc5957db4dca4b433866ebb1612147c07\r\n  lastPivotNumber: <nil>\r\n  len(snapshotSyncStatus): 0 bytes\r\n  snapshotDisabled: false\r\n  snapshotJournal: 1891973 bytes\r\n  snapshotRecoveryNumber: <nil>\r\n  snapshotRoot: 0xf761dd8a26b2fefceffa3751f06614abafb9d256cfc9985f61b637eae126df29\r\n  txIndexTail: 0 (0x0)\r\n  fastTxLookupLimit: <nil>\r\n\r\n\r\nFatal: Failed to register the Ethereum service: gap in the chain between ancients [0 - #116579847] and leveldb [#116669875 - #116669874] \r\nFatal: Failed to register the Ethereum service: gap in the chain between ancients [0 - #116579847] and leveldb [#116669875 - #116669874] \r\n````\r\n</details>\r\n", "OPEN", 0, "alexqrid", "2024-02-26T11:47:06Z", "2024-02-26T11:47:06Z", null, "ethereum-optimism/op-geth", "2025-08-30 08:40:24"]
["I_kwDOH2Qg5s5wkxky", 130, "op-geth stuck with \"State not available\"", "My optimism-goerli node got stuck with op-geth outputting this:\r\n```\r\nop-geth_1  | INFO [09-09|10:28:46.160] Regenerating historical state            block=12,566,031 target=12,572,804 remaining=6773    elapsed=7m20.25015045s\r\nop-geth_1  | INFO [09-09|10:28:54.177] Regenerating historical state            block=12,568,349 target=12,572,804 remaining=4455    elapsed=7m28.26743038s\r\nop-geth_1  | INFO [09-09|10:29:02.191] Regenerating historical state            block=12,570,850 target=12,572,804 remaining=1954    elapsed=7m36.281140218s\r\nop-geth_1  | INFO [09-09|10:29:09.168] Historical state regenerated             block=12,572,804 elapsed=7m43.258507511s nodes=107.24MiB preimages=0.00B\r\nop-geth_1  | INFO [09-09|10:29:09.832] Starting work on payload                 id=0x06e60832d5e72719\r\nop-geth_1  | WARN [09-09|10:29:17.419] State not available, ignoring new payload \r\nop-geth_1  | WARN [09-09|10:29:27.424] State not available, ignoring new payload \r\nop-geth_1  | WARN [09-09|10:29:37.428] State not available, ignoring new payload\r\n```\r\n\r\nI can connect to the http RPC interface, but the head block is stuck at 12573071.\r\n\r\nop-node meanwhile shows:\r\n```\r\nop-node_1  | t=2023-09-09T10:43:36+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x7488a42e0d5460fd50245a28a5d9adda1ff4792a32e5e88cbfc8d4f0a42da6cb:14414074\r\nop-node_1  | t=2023-09-09T10:43:37+0000 lvl=warn msg=\"did not finish previous block building, starting new building now\" prev_onto=0x793b08cf542ab32b409c6bc08d14387af7954b8dcb4f8642668a23cb3390d4e2:12572804 prev_payload_id=0x06e60832d5e72719 new_onto=0x793b08cf542ab32b409c6bc08d14387af7954b8dcb4f8642668a23cb3390d4e2:12572804\r\nop-node_1  | t=2023-09-09T10:43:37+0000 lvl=warn msg=\"Derivation process temporary error\"     attempts=121 err=\"engine stage failed: temp: temporarily cannot insert new safe block: failed to complete building on top of L2 chain 0x793b08cf542ab32b409c6bc08d14387af7954b8dcb4f8642668a23cb3390d4e2:12572804, id: 0x06e60832d5e72719, error (1): execution payload cannot be validated yet, latest valid hash is <nil>\"\r\nop-node_1  | t=2023-09-09T10:43:38+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xd9716eeabed250e8016cfc49bd3e498b171f544286c0b34ebeaf5adf03d01b65:14414075 peer=16Uiu2HAmNiobrb62Y6p5bzmqL5oqnvkoK3wJmefcWAtvoGJriWWu\r\n```\r\n\r\nIt's not clear to me what this means and what to do about it.\r\nI suspect it's relate to the connected goerli L1 having been unavailable for a while. But it's now good again, yet this Optimism node seems to not be recovering.", "OPEN", 0, "d10r", "2023-09-09T10:46:30Z", "2024-02-26T02:05:28Z", null, "ethereum-optimism/op-geth", "2025-08-30 08:40:24"]
["I_kwDOKIwiaM5_3o6_", 501, "[DOCS] Update Node Configuration Page", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\nWe will want to update this section: https://docs.optimism.io/builders/node-operators/management/configuration#working-base-configuration-1 \r\n\r\n1. To the configuration, add. `--l1.beacon=<ethereum mainnet beacon node RPC url>`\r\n2. And then add a section below, repeating our note:\r\n\r\n> To set your --l1.beacon value, either run your own L1 beacon node like [Lighthouse](https://lighthouse-book.sigmaprime.io/run_a_node.html) or use a third-party beacon node RPC service, like [Quicknode](https://www.quicknode.com/docs/ethereum/eth-v1-beacon-genesis).\r\n\r\n3. Below, I'd also duplicate the \"Configure a blob archiver\" section from the [ecotone/node-operators page](https://docs.optimism.io/builders/node-operators/network-upgrades/ecotone#configure-a-blob-archiver-archive-nodes)\r\n", "CLOSED", 0, "cpengilly", "2024-02-20T21:13:26Z", "2024-02-26T23:50:19Z", "2024-02-26T23:50:18Z", "ethereum-optimism/docs", "2025-08-30 08:40:24"]
["I_kwDOLB-lzc6A3Gvv", 74, "Research Area: Blob Stitching", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWith the release of ecotone, it is expected that a batch cannot be larger than a single blob. For a 4844 tx that has multiple blobs, each blob is its own independent data, each must contain its own batch. It should be possible to have a batch that spans between blobs, we are calling this \"blob stitching\" as the derivation pipeline stitches together blobs in the same 4844 tx and attempts to read the data all together.", "CLOSED", 0, "tynes", "2024-02-29T19:10:50Z", "2024-02-29T20:49:16Z", "2024-02-29T20:49:16Z", "ethereum-optimism/specs", "2025-08-30 08:40:29"]
["I_kwDODjvEJM6AoeSi", 9686, "Start error reporting for v1.7.0", "", "CLOSED", 0, "isReset728", "2024-02-28T04:39:19Z", "2024-02-28T04:48:52Z", "2024-02-28T04:48:51Z", "ethereum-optimism/optimism", "2025-08-30 08:40:36"]
["I_kwDODjvEJM6AQdd5", 9648, "L2 synchronization is delayed for several hours due to OP-NODE's failure to parse L1 blocks", "# Situation:\r\n\r\nL2 synchronization is delayed for several hours due to OP-NODE's failure to parse L1 blocks.\r\n\r\nThen, the synchronization is suddenly completed to the latest block.\r\n\r\n### Environment:\r\n\r\n[Manta Node Configure](https://docs.manta.network/docs/manta-pacific/Replica%20Node)\r\n- L1: Ethereum network\r\n- L2: Manta network (using OP-Node, OP-Geth, Celestia)\r\n\r\ndocker-compose.yaml:\r\n\r\n```yaml\r\ncelestia:\r\n   ...\r\nop-geth:\r\n   ... \r\nop-node:\r\n    image: \".../op-node:celestia-3.0.0\"\r\n    command: >\r\n      op-node\r\n      --l1=\"${L1_RPC_URL}\"\r\n      --l2=http://l2:8551\r\n      --l2.jwt-secret=/config/test-jwt-secret.txt \r\n      ...\r\n\r\n      --p2p.listen.ip=0.0.0.0\r\n      --p2p.listen.tcp=9003\r\n      --p2p.listen.udp=9003\r\n      --p2p.static=/ip4/35.82.210.70/tcp/9003/p2p/16Uiu2HAmL4fvgBQi5jcuiEYDaNcg4hpGqCmyAv4DZuSM8f2USYwQ\r\n```\r\n\r\n### Repeated Error Messages:\r\n\r\nDuring the delay, the following error messages are continuously displayed:\r\n\r\n\r\n```shell\r\nmanta-pacific-op-node-1  | t=2024-02-15T02:01:07+0000 lvl=warn msg=\"Derivation process temporary error\"     attempts=1665  err=\"temp: failed to fetch receipts of L1 block 0x855a9a2ec4a098bf17d7b7d7887151cf8e65425e7364c85afbd4741d8f0ac064:19228780 for L1 sysCfg update: receipt 0 has unexpected tx index 4\"\r\nmanta-pacific-op-node-1  | t=2024-02-15T02:01:08+0000 lvl=info msg=\"attempting connection\"                  peer=16Uiu2HAmL4fvgBQi5jcuiEYDaNcg4hpGqCmyAv4DZuSM8f2USYwQ\r\n```\r\n\r\n\r\n# Issue 1: Repeated \"attempting connection\"\r\n\r\nCurrently, OP-Node is failing to connect to other P2P peers (includes static p2p peer), as indicated by the continuous \"attempting connection\" error message.\r\n- static p2p peer: `16Uiu2HAmL4fvgBQi5jcuiEYDaNcg4hpGqCmyAv4DZuSM8f2USYwQ` \r\n\r\n```shell\r\n$ curl -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"opp2p_peers\",\"params\":[true],\"id\":1}' http://localhost:7545\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":{\"totalConnected\":0,\"peers\":{},\"bannedPeers\":[],\"bannedIPS\":[],\"bannedSubnets\":[]}}\r\n\r\n$ nc 35.82.210.70 9003\r\nConnection to 35.82.210.70 port 9003 [tcp/*] succeeded!\r\n```\r\n> The firewall is confirmed to be not an issue.\r\n\r\nThe following error message appears when op-node starts:\r\n\r\n```\r\nmanta-pacific-op-node-1  | t=2024-02-15T07:18:03+0000 lvl=warn msg=\"error dialing static peer\"         peer=16Uiu2HAmL4fvgBQi5jcuiEYDaNcg4hpGqCmyAv4DZuSM8f2USYwQ err=\"failed to dial 16Uiu2HAmL4fvgBQi5jcuiEYDaNcg4hpGqCmyAv4DZuSM8f2USYwQ:\\n  * [/ip4/35.82.210.70/tcp/9003] failed to negotiate security protocol: peer id mismatch: expected 16Uiu2HAmL4fvgBQi5jcuiEYDaNcg4hpGqCmyAv4DZuSM8f2USYwQ, but remote key matches 16Uiu......NfcH\"\r\n```\r\n\r\nAfter this message, \"attempting connection\" is repeated.\r\n\r\nCould you please provide any insights or potential causes for the P2P connection failure?\r\n\r\n\r\n# Issue 2: Repeated \"failed to fetch receipts\"\r\n\r\n\r\n```shell\r\n$ curl -X POST -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"optimism_syncStatus\",\"params\":[],\"id\":1}' http://localhost:7545\r\n\r\n# summary\r\n- current_l1: 19231378 / 05:55:11 AM\r\n- current_l1_finalized: 19231571 / 06:33:59 AM\r\n- unsafe_l2: 1375229 / 5:50:49 AM\r\n```\r\n> The above message was printed at 10 AM, which means that the L2 block synchronization was delayed by about 4 hours.\r\n\r\n\r\nL1 RPC itself is working fine. (sync well)\r\n> L1 RPC is currently composed of multiple eth-geth nodes through a load balancer. (The height of each synchronization block may vary slightly)\r\n\r\nHowever, why is it that L1 blocks were not parsed for several hours and then suddenly resolved all at once?\r\n\r\n## Summary\r\n1. P2P connection issue\r\n2. L1 block parsing issue (or etc)\r\n\r\n> I think the issue of delay in synchronization depends on issue 2.\r\n\r\n", "CLOSED", 0, "junha-ahn", "2024-02-23T21:05:55Z", "2024-02-28T19:23:37Z", "2024-02-28T19:23:37Z", "ethereum-optimism/optimism", "2025-08-30 08:40:36"]
["I_kwDODjvEJM58CFKs", 9002, "USDC.e circle USD Coin (Bridged from Ethereum) (USDC.e) Token Tracker on OP Mainnet.", "              USDC.e circle USD Coin (Bridged from Ethereum) (USDC.e) Token Tracker on OP Mainnet.\r\n\r\nA relay transaction was requesting a deposit. When the L2 signature asked for 350,000,000 USDC.e there was no option to optimize the allocated amount signed from the wallet given access. Even though a bridge was being constructed this configuration confuses the user. This new transaction was applied from the previous transaction (airdrop) not allowing the wallet owner to understand this was a designed bridge that was new; instead it came from the first airdrop with the \u201cwithdrawal button\u201d highlighted. Noticing the 0x Flashbot lead to researching to ensure no signature attack was detected. Is there a tool to help a user identify this was a bridge mission; especially for a new transaction, because this is what raised concerns from the wallet this happened in. Would like to have this documented as a way to help apply to an app. Next time will apply the notes of what was found through OKX that raised questions. Time though finally told the truth. This could be an added feature to a future IDS (Intrusion Detection System), or alert system as a way to implement alerts for security and detection purposes.\r\n\r\n_Originally posted by @philliprossii in https://github.com/ethereum-optimism/optimism/issues/8770#issuecomment-1868604518_\r\n            ", "CLOSED", 0, "philliprossii", "2024-01-14T22:17:57Z", "2024-02-29T23:38:43Z", "2024-02-05T00:54:58Z", "ethereum-optimism/optimism", "2025-08-30 08:40:36"]
["I_kwDODjvEJM57RtvG", 8872, "Ecotone: Create test vector based tests for blob encoding/decoding", "**Describe the solution you'd like**\r\n \r\nThe Blob encoder / decoder is currently well tested with round-trip tests, but is not yet tested to confirm that specific inputs yield the desired outputs (one way tests).  We should add test vectors for this purpose.\r\n\r\n", "CLOSED", 0, "roberto-bayardo", "2024-01-06T00:27:54Z", "2024-02-29T17:19:19Z", "2024-02-29T17:19:19Z", "ethereum-optimism/optimism", "2025-08-30 08:40:36"]
["I_kwDODjvEJM56udNo", 8784, "`StateScheme=path` Data is damaged after the node is killed", "**Describe the bug**\r\nAfter the node is killed, it cannot be used after restarting the node.\r\n\r\n**System Specs:**\r\n  - OS: Linux\r\n\r\n**Additional context**\r\n```\r\nDec 29 10:07:06 base-geth[1946932]: INFO [12-29|10:07:06.896] Imported new potential chain segment     number=4,008,751 hash=4d4a67..9f579b blocks=1 txs=3 mgas=0.094 elapsed=1.373ms     mgasps=68.081   age=8h17m16s  snapdiffs=1.44MiB    triediffs=1.25MiB triedirty=36.12MiB\r\nDec 29 10:07:06 base-geth[1946932]: INFO [12-29|10:07:06.897] Chain head was updated                   number=4,008,751 hash=4d4a67..9f579b root=d30f24..7d22b3 elapsed=\"222.868\u00b5s\" age=8h17m16s\r\nDec 29 10:07:07 systemd[1]: base-sepolia.service: Main process exited, code=killed, status=9/KILL\r\nDec 29 10:07:07 systemd[1]: base-sepolia.service: Failed with result 'signal'.\r\nDec 29 10:07:07 systemd[1]: base-sepolia.service: Consumed 1min 25.159s CPU time.\r\nDec 29 10:07:12 systemd[1]: base-sepolia.service: Scheduled restart job, restart counter is at 1.\r\nDec 29 10:07:12 systemd[1]: Stopped daemon.\r\nDec 29 10:07:12 systemd[1]: base-sepolia.service: Consumed 1min 25.159s CPU time.\r\nDec 29 10:07:12 systemd[1]: Started daemon.\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.285] Starting geth on an OP network...        network=base-sepolia\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.285] Bumping default cache on mainnet         provided=1024 updated=4096\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.286] Maximum peer count                       ETH=0 LES=0 total=0\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.287] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.291] Set global gas cap                       cap=600,000,000\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.477] Initializing the KZG library             backend=gokzg\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.495] Allocated trie memory caches             clean=614.00MiB dirty=1024.00MiB\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.495] Using pebble as the backing database\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.496] Allocated cache and file handles         database=/node/full/base-sepolia/geth/geth/chaindata cache=2.00GiB handles=100,000\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.558] Opened ancient database                  database=/node/full/base-sepolia/geth/geth/chaindata/ancient/chain readonly=false\r\nDec 29 10:07:12 base-geth[1950914]: INFO [12-29|10:07:12.560] State scheme set by user                 scheme=path\r\nDec 29 10:07:12 base-geth[1950914]: WARN [12-29|10:07:12.619] Sanitizing invalid node buffer size      provided=1024.00MiB updated=256.00MiB\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.768] Opened ancient database                  database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state readonly=false\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.769] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=storage.index items=4,008,624 limit=4,005,901\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.769] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=account.data  items=4,008,624 limit=4,005,901\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.769] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=storage.data  items=4,008,624 limit=4,005,901\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.769] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=history.meta  items=4,008,624 limit=4,005,901\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.769] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=account.index items=4,008,624 limit=4,005,901\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.769] Truncated extra state histories          number=2723\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.769] Path-based state scheme is an experimental feature\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828] ---------------------------------------------------------------------------------------------------------------------------------------------------------\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828] Chain ID:  84532 (Base Sepolia)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828] Consensus: Optimism\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828] Pre-Merge hard forks (block based):\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Homestead:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Tangerine Whistle (EIP 150): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Spurious Dragon/1 (EIP 155): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Spurious Dragon/2 (EIP 158): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Byzantium:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Constantinople:              #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Petersburg:                  #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Istanbul:                    #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Muir Glacier:                #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Berlin:                      #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - London:                      #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Arrow Glacier:               #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Gray Glacier:                #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828] Merge configured:\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Hard-fork specification:    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Network known to be merged: true\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Total terminal difficulty:  0\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Merge netsplit block:       #0\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828] Post-Merge hard forks (timestamp based):\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Shanghai:                    @1699981200 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md)\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Regolith:                    @0\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]  - Canyon:                      @1699981200\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828] ---------------------------------------------------------------------------------------------------------------------------------------------------------\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.828]\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.829] Loaded most recent local block           number=4,008,751 hash=4d4a67..9f579b td=0 age=8h17m23s\r\nDec 29 10:07:13 base-geth[1950914]: INFO [12-29|10:07:13.829] Loaded most recent local finalized block number=4,005,108 hash=a3130f..a845a2 td=0 age=10h18m49s\r\nDec 29 10:07:13 base-geth[1950914]: WARN [12-29|10:07:13.889] Head state missing, repairing            number=4,008,751 hash=4d4a67..9f579b snaproot=9660a9..b62dff\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.854] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=account.index items=4,005,901 limit=4,004,441\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.854] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=storage.index items=4,005,901 limit=4,004,441\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.854] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=account.data  items=4,005,901 limit=4,004,441\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.854] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=storage.data  items=4,005,901 limit=4,004,441\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.854] Truncating freezer table                 database=/node/full/base-sepolia/geth/geth/chaindata/ancient/state table=history.meta  items=4,005,901 limit=4,004,441\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.855] Loaded most recent local header          number=4,008,751 hash=4d4a67..9f579b td=0 age=8h17m24s\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.855] Loaded most recent local block           number=4,004,440 hash=6ecb70..53e835 td=0 age=10h41m6s\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.855] Loaded most recent local snap block      number=4,008,751 hash=4d4a67..9f579b td=0 age=8h17m24s\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.855] Loaded most recent local finalized block number=4,005,108 hash=a3130f..a845a2 td=0 age=10h18m50s\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.855] Enabling snapshot recovery               chainhead=4,004,440 diskbase=4,004,440\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.936] Snapshot is not continuous with chain    snaproot=65bfec..2b07fd chainroot=9660a9..b62dff\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.936] Initialising Ethereum protocol           network=84532        dbversion=8\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.936] Initialized transaction indexer          limit=0\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.936] Loaded local transaction journal         transactions=0 dropped=0\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.937] Regenerated local transaction journal    transactions=0 accounts=0\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.952] Chain post-merge, sync via beacon client\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.952] Gasprice oracle is ignoring threshold set threshold=2\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.952] Unclean shutdown detected                booted=2023-12-29T10:04:18+0800 age=2m56s\r\nDec 29 10:07:14 base-geth[1950914]: WARN [12-29|10:07:14.953] Engine API enabled                       protocol=eth\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.953] Starting peer-to-peer node               instance=Geth/v0.1.0-unstable-c6b416da/linux-amd64/go1.20.11\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.958] IPC endpoint opened                      url=/node/full/base-sepolia/geth/geth.ipc\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.959] Loaded JWT secret file                   path=/node/full/base-sepolia/jwt.txt crc32=0x8cdf983\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.959] New local node record                    seq=1,703,578,546,179 id=1630514fc58df63b ip=127.0.0.1 udp=0 tcp=31720\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.959] HTTP server started                      endpoint=[::]:31721 auth=false prefix= cors=* vhosts=*\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.959] WebSocket enabled                        url=ws://[::]:31722\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.959] WebSocket enabled                        url=ws://127.0.0.1:31723\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.959] Started P2P networking                   self=\"enode://1fbff8f0399d7880fd61cdc094c39e7f8a90acbcfb8a23c4d87a0155c4a99a2adfdaff2441805a902c1bd7e72de1005adc2f2400b9e1f9363d594fcf7fb35747@127.0.0.1:31720?discport=0\"\r\nDec 29 10:07:14 base-geth[1950914]: INFO [12-29|10:07:14.959] HTTP server started                      endpoint=127.0.0.1:31723 auth=true  prefix= cors=localhost vhosts=*\r\nDec 29 10:07:21 base-geth[1950914]: ERROR[12-29|10:07:21.739] Failed to create sealing context         err=\"missing trie node d30f24fb69c40b838f42f942c62777a694067de94ff8b022eb8e72f9a07d22b3 (path ) state 0xd30f24fb69c40b838f42f942c62777a694067de94ff8b022eb8e72f9a07d22b3 is not available\"\r\nDec 29 10:07:21 base-geth[1950914]: ERROR[12-29|10:07:21.739] Failed to build payload                  err=\"missing trie node d30f24fb69c40b838f42f942c62777a694067de94ff8b022eb8e72f9a07d22b3 (path ) state 0xd30f24fb69c40b838f42f942c62777a694067de94ff8b022eb8e72f9a07d22b3 is not available\"\r\nDec 29 10:07:21 base-geth[1950914]: WARN [12-29|10:07:21.739] Served engine_forkchoiceUpdatedV2        reqid=17590 duration=\"412.974\u00b5s\" err=\"Invalid payload attributes\" errdata=\"{Error:missing trie node d30f24fb69c40b838f42f942c62777a694067de94ff8b022eb8e72f9a07d22b3 (path ) state 0xd30f24fb69c40b838f42f942c62777a694067de94ff8b022eb8e72f9a07d22b3 is not available}\"\r\n```", "CLOSED", 0, "rayn316", "2023-12-29T02:10:01Z", "2024-03-01T05:20:59Z", "2024-01-02T17:24:00Z", "ethereum-optimism/optimism", "2025-08-30 08:40:36"]
["I_kwDODjvEJM51nqc1", 8008, "Tips to run op-stack programmatically ", "Hello,\r\n\r\nI see many monitoring tools and devops related codes but I am not sure which package should I refer to run op-stack programmatically.\r\n\r\nWould like to subscribe on any kind of unhealthy event and attempt to recover on failure.\r\n\r\nIs there any tip or an advice on this?\r\n\r\nThanks.", "CLOSED", 0, "unknown", "2023-11-02T01:11:31Z", "2024-02-26T05:00:23Z", "2024-02-26T05:00:23Z", "ethereum-optimism/optimism", "2025-08-30 08:40:36"]
["I_kwDODjvEJM51YpHU", 7950, "Creating L2 genesis alloc using pure javascript / typescript", "Since I don't like dependencies I would like to know how hard would it be to dump genesis alloc for a new op-stack rollup based on a deploy-config JSON https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/deploy-config/getting-started.json.\r\n\r\nMaybe I might be looking for implementing features of the go code here to js https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops/genesis.\r\n\r\nSince there are ethereumjs it wouldn't be technically impossible but I would like to know what is required to do so.\r\n\r\nThanks.", "CLOSED", 0, "unknown", "2023-10-30T23:44:38Z", "2024-02-26T04:54:11Z", "2024-02-26T04:54:11Z", "ethereum-optimism/optimism", "2025-08-30 08:40:36"]
["I_kwDOKSJyfM5-ctlN", 104, "[s] Add in all of the tracking events", "Add in all the tracking events from this doc:\r\n\r\nhttps://docs.google.com/document/d/1iJeKa9o3cRnIO0yxxwnDgFaP8nr_hocsBKr6tDlWKD0/edit#heading=h.lnsjyxig3l7x", "CLOSED", 0, "jvmi7", "2024-02-06T18:46:18Z", "2024-03-05T18:48:49Z", "2024-03-05T18:48:49Z", "ethereum-optimism/ecosystem", "2025-08-30 08:41:27"]
["I_kwDOKIwiaM6BXH6V", 538, "[DOCS] update ecotone notice to improve devx", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd https://ethereum.publicnode.com/ as an option for a Beacon endpoint\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/notices/ecotone-changes#prepare-for-activation\r\n\r\n## Additional Context\r\n\r\nfrom @ajsutton in discord:\r\n\r\n> Beacon node endpoints aren't provided by all free RPC providers but some do, including publicnode https://ethereum.publicnode.com/\r\n\r\n@opfocus said:\r\n\r\n> I feel this is much more straightforward than the Quicknode link mentioned  in the doc", "CLOSED", 0, "sbvegan", "2024-03-05T23:25:30Z", "2024-03-07T18:24:39Z", "2024-03-07T18:24:39Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM6BVDlW", 535, "Update security FAQ page", "this part is outdated: \n\nNext gen fault proofs\nAs part of the OVM 2.0 upgrade, the Optimism fault proof mechanism had to be temporarily disabled. This means that users of the OP Mainnet network currently need to trust the Sequencer node (run by Optimism Foundation) to publish valid state roots to Ethereum. You can also read more about our security model.\n\nWe're making progress on the upgrade fault proof mechanism and we expect to productionize our work in 2023. You can keep up with developments in the Cannon repository.", "CLOSED", 0, "cpengilly", "2024-03-05T17:30:05Z", "2024-03-07T06:00:10Z", "2024-03-07T06:00:10Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM6BT_C0", 534, "[DOCS] bridging tutorial's title says OP Mainnet but the docs references OP Sepolia", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nThe linked page's title is OP Mainnet, but the content only refers to OP Sepolia.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\n- Either remove OP Mainnet from the title or replace it with OP Sepolia\r\n- Add a new or addition to the call out that this is the same process on OP Mainnets and OP Testnets\r\n\r\n## Links to Related Pages\r\n- https://docs.optimism.io/builders/dapp-developers/tutorials/standard-bridge-standard-token\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "sbvegan", "2024-03-05T15:17:24Z", "2024-03-07T18:45:51Z", "2024-03-07T18:45:51Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM6BFv01", 527, "[DOCS] fix duplicate scalar tab", "<!-- please fill out the following the best to your ability and properly label the issue -->\n\n## Brief Description of the Docs Request\nShould be blobFeeScalar\n\n## Description of the Documentation You'd Like\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\n\n## Links to Related Pages\n\nhttps://docs.optimism.io/builders/chain-operators/management/blobs\n\n## Additional Context\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?", "CLOSED", 0, "sbvegan", "2024-03-04T02:13:23Z", "2024-03-05T21:08:46Z", "2024-03-05T21:08:46Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM6A21Zp", 521, "[FEATURE] Custom Footer", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nDocs site needs a custom footer to help clean up index page and add privacy policy + other required info like data consent. This will require a custom footer component for nextra theme.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\n- [ ] build custom footer component for nextra theme\r\n- [ ] relocate the build with optimism stuff to footer\r\n- [ ] add other footer elements -- sketch out and pilot/share internally first\r\n\r\n## Links to Related Pages\r\n![relocate-to-footer](https://github.com/ethereum-optimism/docs/assets/29023967/7018a6d1-b120-4cb0-9bcc-e886ce981b4a)\r\n\r\n\r\n## Additional Context\r\nhere's a few examples of things we could do from other sites using nextra theme:\r\n* [cloudquery](https://github.com/cloudquery/cloudquery/blob/main/website/theme.config.tsx)\r\n![cloudquery-footer](https://github.com/ethereum-optimism/docs/assets/29023967/0369f27f-ff01-439c-97b2-9d7e75c6570a)\r\n\r\n* [turbo](https://github.com/vercel/turbo/blob/main/docs/theme.config.tsx)\r\n![turbo-footer](https://github.com/ethereum-optimism/docs/assets/29023967/fa15ab57-3c4e-4640-992a-ec50a664716a)\r\n\r\n* truffle site has separate privacy policy and data policy\r\n![truffle_footer](https://github.com/ethereum-optimism/docs/assets/29023967/352066fd-8661-460b-93e5-80c76abdcd8c)\r\n", "CLOSED", 0, "cpengilly", "2024-02-29T18:29:58Z", "2024-03-07T07:44:41Z", "2024-03-07T07:44:41Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM5_5voG", 507, "[FEATURE] Add More Docs Callouts", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nThis feature request is to revise one callout and add 2 new callouts.\r\n\r\n## Detailed Explanation & Deliverables\r\n\r\n1. We need to differentiate -- color and icon -- for the default callout. It has nearly the same color visually as the warning callout, which makes the warning less effective and impacts site accessibility.  (See [this page ](https://docs.optimism.io/builders/notices/ecotone-fee-changes) for an example. Maybe we can use a pale yellow color??\r\n\r\nAdditionally, we could use two brand new callouts. \r\n\r\n2. One callout for success/congratulations (often used at the end of a tutorial or quick start, pale green in color and maybe a \ud83c\udf89 symbol) \r\n3. one callout for prereq info (before you start/pre-req/dependencies). possibly a light grey color?? Here's an example [pre-req callout](https://docs.strapi.io/dev-docs/quick-start).\r\n\r\n## Final Thoughts\r\nI think an update to our callouts would provide clear and consistent markers for devs about what part or section of the guide they are reading, which aids in usability, accessibility, and the magical developer experience. \r\n\r\n![green-callout](https://github.com/ethereum-optimism/docs/assets/29023967/7ba4c8a3-6d5b-49fd-a88c-826f5d4a9d2f)\r\n![prereq-callout](https://github.com/ethereum-optimism/docs/assets/29023967/db92fbec-9250-4140-ac10-7bade956ae52)\r\n![congrats-callout](https://github.com/ethereum-optimism/docs/assets/29023967/b150215b-b164-4ba3-aac3-a9659f1932a9)\r\n", "CLOSED", 0, "cpengilly", "2024-02-21T05:03:55Z", "2024-03-08T02:19:17Z", "2024-03-08T02:19:16Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM5_3DV7", 499, "[FEATURE] Add Superchain Registry Page (Autogenerated)", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n@K-Ho would like to request a dedicated superchain registry page in the docs that automatically pulls in content from the [json file](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/configs/chainids.json) and renders in the actual docs. We've done this for the tokenlist page @ https://docs.optimism.io/chain/tokenlist so there is precedence.\r\n\r\n## Description of the Documentation You'd Like\r\nnew dedicated page that helps devs with stuff like this:\r\n> If you are operating a node for an OP Chain that has an entry in the [`superchain-registry`](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/configs/chainids.json\r\n\r\n## Links to Related Pages\r\nhttps://docs.optimism.io/chain/tokenlist so there is precedence.\r\n\r\n## Additional Context\r\nwould be useful for devs who want to know which chains are already listed\r\n", "CLOSED", 0, "cpengilly", "2024-02-20T19:41:44Z", "2024-03-08T02:14:19Z", "2024-03-08T02:14:17Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM5-szFZ", 476, "Feedback on upgrade docs", "Sharing some great feedback that @abcoathup gave on [twitter](https://twitter.com/abcoathup/status/1755398875916149083), I generally agree with all of these suggestion and think they would be really nice improvements to the docs.\r\n\r\n---\r\n\r\n1. Each upgrade in docs should have a table in each upgrade with details for Devnet, Testnet, mainnet (including governance & notice periods).  With links to the action (e.g. governance vote)\r\n![image](https://github.com/ethereum-optimism/docs/assets/17163988/bab4d2f1-d80a-4aeb-86b2-e03a00a713a0)\r\n\r\n2. The features of the upgrade should be described in the docs. Blog posts & announcements can point to the docs for technical details. Not the other way round with docs pointing to blog posts. Announce and do blog posts for each major step.\r\n![image](https://github.com/ethereum-optimism/docs/assets/17163988/79ee9540-87dc-49f2-985c-c10ab00d14e1)\r\n\r\n3. The overview is great but should have more detail for when you go to the docs for a specific upgrade.\r\n![image](https://github.com/ethereum-optimism/docs/assets/17163988/5cf57a3d-d3df-4b69-a5d8-48c3f1126e9c)\r\n\r\n4. Make the menu header clickable.  At least on mobile.  To make it easier to navigate.\r\n![image](https://github.com/ethereum-optimism/docs/assets/17163988/2ee68dba-859c-4e4b-a670-5bec48145783)\r\n\r\n5. Add Citizens house veto in the detail of each upgrade. You should be able to get to all the info about an upgrade from the docs.\r\n![image](https://github.com/ethereum-optimism/docs/assets/17163988/058b81bb-a7a5-4282-80ab-8c5691fa7a00)\r\n\r\n6. Add info on the upgrade naming scheme.  Even if its whatever cool name the dev team wants. A one liner on what the name means.\r\n![image](https://github.com/ethereum-optimism/docs/assets/17163988/0b3fae66-b950-420e-a636-f4445e88fdd1)\r\n\r\n7. Keep the docs updated.  Ecotone on OP Goerli already happened.\r\n![image](https://github.com/ethereum-optimism/docs/assets/17163988/db89d11a-ecb8-4552-8aec-aed4db94cbe3)\r\n\r\n8. overall make it easy to find out all about an upgrade and when it happened.  Devs shouldn't need to hunt around for ages to find info.  Upgrades should be celebrated and shouted about. Bring on Ecotone and blobs.", "CLOSED", 0, "mds1", "2024-02-08T17:07:34Z", "2024-03-07T05:54:11Z", "2024-03-07T05:54:10Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM57ukDh", 408, "[DOCS] Incorrect MintManager Contract Address", "https://docs.optimism.io/chain/security/privileged-roles#mintmanager-owner\r\n\r\n![image](https://github.com/ethereum-optimism/docs/assets/11801722/2936b3a3-29ee-4849-9e50-dddf69af3400)\r\n\r\n[0xfd1d2e729ae8eee2e146c033bf4400fe75284301](https://sepolia.etherscan.io/address/0xfd1d2e729ae8eee2e146c033bf4400fe75284301) is not a contract address.", "CLOSED", 0, "boundless-forest", "2024-01-11T05:46:53Z", "2024-03-07T06:03:06Z", "2024-03-07T06:03:05Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM57b9U5", 389, "[FEATURE] Track search terms within nextra site", "we need to access/track keywords used in search bar by devs from within our nextra site. for more context: we have google console setup which lets us see terms devs search for while browsing google that lands them on [docs.optimism.io](http://docs.optimism.io/), but how we also need/want to track the search terms dev use while already on the site (using the search bar).\r\n\r\n- Does nextra support algolia? \r\n- Yea I\u2019ve seen it used with nextra before. You might want to wrap the existing nextra input instead of using a regular input like swr docs do but here is an example react component https://github.com/vercel/swr-site/blob/88d1b8affa7f1c344f3aaba229b51867b2cedc8d/components/docsearch.js", "CLOSED", 0, "cpengilly", "2024-01-08T17:32:26Z", "2024-03-08T02:08:09Z", "2024-03-08T02:08:08Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM55upIj", 305, "[FEATURE] Add Tool-tips for glossary and smart contract references", "Add automated tool-tip (on:hover) for glossary terms and smart contract references in docs. tool-top pops up with the definition straight from the glossary or points to the correct smart contract\r\n\r\nreasons: \r\n- this is developer-focused\r\n- a better, cleaner DevX\r\n- great usability and accessibility", "CLOSED", 0, "cpengilly", "2023-12-14T18:43:27Z", "2024-03-08T02:04:11Z", "2024-03-08T02:04:09Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM54-xLQ", 269, "[FEATURE] Reward tutorial completions", "establish method and process to reward completion of tutorials (e.g., gamified learning)\r\npossible reward ideas: NFTs, gas", "CLOSED", 0, "cpengilly", "2023-12-07T02:03:38Z", "2024-03-08T02:00:24Z", "2024-03-08T02:00:23Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM54-trf", 266, "[FEATURE] Combined changelog", "add integrated .mdx changelog to docs that merges [op-node](https://github.com/ethereum-optimism/optimism/releases) and [op-geth](https://github.com/ethereum-optimism/op-geth/releases) releases\r\n\r\n- Add way for developer to filter by op-geth, op-node, op-batcher, and op-proposer\r\n- toggle on all of them, toggle on some of them, check to display just batcher etc.\r\n- possibly use RSS feeds from op-geth, op-node, and monorepo release notes (batcher, proposer, etc.) -- bring them into one MDX file within docs in a way that devs can manipulate\r\n", "CLOSED", 0, "cpengilly", "2023-12-07T01:55:38Z", "2024-03-07T07:36:42Z", "2024-03-07T07:36:40Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM53o71v", 201, "[AUDIT] Update tools overview", "- Would add \u201cDeveloping\u201d section and reference new the JS tools (in a separate issue)\r\n- could also reference the compatible tools at @ https://docs.optimism.io/chain/getting-started-op-mainnet", "CLOSED", 0, "cpengilly", "2023-11-22T22:57:41Z", "2024-03-06T20:23:30Z", "2024-03-06T20:23:30Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM53ndeK", 191, "[AUDIT] Add custom bridge examples", "for this page: https://docs.optimism.io/builders/dapp-developers/bridging/custom-bridge\r\n\r\nwe can link to some custom bridges to help explain this more (eg the NFT bridge) ", "CLOSED", 0, "cpengilly", "2023-11-22T17:48:54Z", "2024-03-07T06:40:57Z", "2024-03-07T06:40:57Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM53nb_p", 190, "[AUDIT] Add JS tools overview page", "As outlined below, it might be nice to just have one page outlining all JS tools and how they fit into each other. This draft is how I imagine them relating to each other.\r\n\r\n- The sdk, [[op-viem](https://www.opviem.sh/)](https://www.opviem.sh/), [[fee-estimation](https://github.com/ethereum-optimism/optimism/tree/develop/packages/fee-estimation)](https://github.com/ethereum-optimism/optimism/tree/develop/packages/fee-estimation) are all a class of \u201cJS libraries that bridge the gap between Ethereum and the OP Stack.\u201d \r\n\r\nHere\u2019s what\u2019s potentially the right abstraction:\r\n\r\n- In JS tools, explain that OP Mainnet and OP Stack chains are automatically compatible with many Ethereum JS tools, and we provide subsidiary libraries for the different functions: bridging & gas\r\n    - Ethers v5\r\n        - the SDK provides the different functions\r\n    - Ethers v6\r\n        - (the plugin is incoming, a draft of it at https://github.com/ethers-io/ext-utils-optimism\r\n    - Viem\r\n        - op-viem handles bridging; fee-estimation handles fees, but both will be merged into op-viem\r\n    - web3.js\r\n        - fees handled by the [[web3.js-plugin](https://github.com/ethereum-optimism/optimism/tree/develop/packages/web3js-plugin)](https://github.com/ethereum-optimism/optimism/tree/develop/packages/web3js-plugin)", "CLOSED", 0, "cpengilly", "2023-11-22T17:44:23Z", "2024-03-06T20:14:53Z", "2024-03-06T20:14:52Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM53nX3S", 189, "[AUDIT] Add more links to diff sdk tutorials", "revisions for this page: https://docs.optimism.io/builders/chain-operators/tutorials/sdk\r\n- This tool is relevant for OP Mainnet developers too, there should probably be a reference to it there, maybe just as a link to this page\r\n- There are lots of smaller tutorials around the SDK all over the docs, might be nice to put them all in one place by linking them here!", "CLOSED", 0, "cpengilly", "2023-11-22T17:32:02Z", "2024-03-06T20:13:23Z", "2024-03-06T20:13:23Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM5ylXYT", 66, "[FEATURE] Dev Survey in Docs @ end of tutorials", "Add dev survey to docs, most likely at end of tutorials\r\n\r\n- [ ] migrate typform survey over to hubspot\r\n- [ ] modify for docs specific questions like: \r\n    - The docs have the right amount of information.\r\n    - I easily found the exact information I was looking for.\r\n    - The examples are accurate and easy to follow.\r\n    - \u201cWhat else would you like to share about your experience with the docs?\u201d", "CLOSED", 0, "cpengilly", "2023-10-02T18:16:10Z", "2024-03-07T08:37:06Z", "2024-03-07T08:37:06Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM5x0HQD", 56, "[AUDIT] OP Stack Operators Guide FAQ", "* What can OP Chains do or configure that wouldn\u2019t break homogeneity?\r\n* \t\tTheir specific ask is for CSR, but in general they\u2019re asking for more clarity on what would / wouldn\u2019t break compatibility\r\n* this question keeps coming up for multiple teams\r\n* right now anything that's execution (geth changes) and settlement (bridging, deriving, 7-day withdrawal) breaks compatibility\r\n\r\n* \t\tWhere do OP Chains need to update info in OP Stack repo (eg. token list)\r\n* \t\tBase told them there are a \u201cdozen places\u201d that Base had to update and they\u2019re trying to find out what all those places are\r\n* \t\tthis might be an eng question but feels like low hanging fruit to have a list to share with OP Chains\r\n* devX has a project that seeks to automate this! we'll start by compiling a list first, but on our minds\r\n* Super rough list: chainlist, ethers/viem,\u00a0OP SDK, wallets (Metamask\u00a0especially), various configs (superchain-registry\u00a0to start)\r\n\r\n* \t\tCan we have some kind of bridge shared liquidity pool for OP Chains?\r\n* \t\tThey are talking to teams like Hop but need to front liquidity. If there were a shared liquidity pool, it would reduce costs for fronting the liquidity\r\n* \t\tThey are excited about LayerSwap bc they jumped on building out L2 to L2 bridging\r\n* The solution here is likely not exactly what people are thinking of. We'd want to be careful with the design and how we pay for that liquidity!\r\n\r\n* Stablecoin availability?\r\n* \t\tcurrent thinking around this: either we create L2 to L2 messaging and they integrate with 1 hub chain (e.g OP Mainnet)\r\n* \t\tOr they integrate a seamless wrapped version that\u00a0they own\u00a0and can easily migrate once they deploy native. They said the Law of Chains is a blocker for this. \r\n\r\n* Is CSR something that has to be breaking protocol level changes? \r\n* devs can implement CSR out of protocol! there's a tweet around how (can find if it's helpful);\u00a0this is a hackathon submission\u00a0[https://ethglobal.com/showcase/shadow-rollup-k712d] implementing it in a slightly different way\r\n* this thread on CSR that would require an L3 on PGN?\u00a0https://twitter.com/kelvinfichter/status/1624975097537654786\r\n* can reimburse periodically or \u201cmanual\u201d reimbursement, may be cumbersome with scale", "CLOSED", 0, "cpengilly", "2023-09-22T20:31:42Z", "2024-03-07T20:59:31Z", "2024-03-07T20:59:31Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM5xyqcG", 53, "[DOCS] Update descriptions of Batcher and sequencer", "\"getting stared\" (<https://stack.optimism.io/docs/build/getting-started/#generate-some-keys>) tutorial and looking to understand what separates the Sequencer from the Batcher. In the tutorial, the Sequencer address is never funded or used, only lists addresses for the batcher and the proposer. \r\n\r\n0x6887246668a3b87F54DeB3b94Ba47a6f63F32985- \"Optimism: Sequencer\" (should be updated now to show \u201cOP Mainnet Batcher\u201d in Etherscan)\r\n0x473300df21D047806A082244b417f96b32f13A33- \"Optimism: State Root Proposer\"\r\n\r\n\r\nDocs clarification to make: \r\nSequencer includes txs from mempool into new blocks, and shares these blocks offchain. Has a P2P-Sequencer-Key to sign these blocks before gossiping them.\r\n\r\nBatcher takes blocks from sequencer op-geth, packages the inputs into batch data, and submits them to the L1 inbox for others to reproduce. Uses a special L1 account, other data txs in the inbox are ignored by verifiers.\r\n\r\nVerifiers take unsafe blocks from sequencer via p2p gossip, and then later verify (or reconstruct, if they never received the offchain blocks gossip) the L2 blocks. If any tx is invalid, the block input as a whole is ignored, and alternative block inputs are awaited. L1 inputs take precedence if the gossiped block data is not the same.\r\n\r\nProposer runs an archive verifier node (or is directly attached to sequencer) and monitors it. Every N blocks (after they are finalized w.r.t. irreversible inputs that are finalized on L1) it constructs an \u201coutput root\u201d, a claim about the L2 state. This is then submitted to L1. The L1 contract validates the output root is submitted from a specific authorized proposer account. In the future, once we have fault proof tech live, this proposal process will be permissionless (and possibly part of the user withdrawal-flow responsibilities).\r\n![Image from iOS](https://github.com/ethereum-optimism/developer-support/assets/29023967/9e6643fb-d98a-4a1c-848d-2ef670ff2310)\r\n\r\nFuture: challenger monitors the onchain L1 claims from the proposer and other challengers, and counter-claims when necessary, as part of the fault-proof bisection game.\r\n\r\nIs it possible to Update guide with addresses of all accounts so users can observe the txn flow end-to-end? Note that the addresses of the batcher and proposer may change, to enable key-rotation.\r\n\r\nThe SystemConfig contract on L1 (OP Mainnet:\u00a0https://etherscan.io/address/0x229047fed2591dbec1eF1118d64F7aF3dB9EB290\u00a0) is the source of truth for the batcher. But yes,\u00a00x6887246668a3b87f54deb3b94ba47a6f63f32985\u00a0is the current batcher address (it can be read from the\u00a0batcherHash\u00a0attribute in the contract).\r\n\r\nAnd the proposer is defined in the ouput oracle contract on L1 (OP Mainnet:\u00a0https://etherscan.io/address/0xdfe97868233d1aa22e815a266982f2cf17685a27\u00a0), from the\u00a0PROPOSER\u00a0attribute in the contract). And yes,\u00a00x473300df21D047806A082244b417f96b32f13A33\u00a0is the current proposer.\r\n\r\nThe p2p sequencer key is not used onchain, only for offchain execution-payload (L2 block gossip data) signing. It can be found in the L1 SystemConfig as well.", "CLOSED", 0, "cpengilly", "2023-09-22T03:05:40Z", "2024-03-06T20:04:02Z", "2024-03-06T20:04:02Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOKIwiaM5xtUM1", 19, "[AUDIT] troubleshooting guide/wallet developers", "guides/wallet developers, add troubleshooting guide: users overpaying for priority fees and estimating gas correctly", "CLOSED", 0, "cpengilly", "2023-09-19T23:16:23Z", "2024-03-06T19:39:29Z", "2024-03-06T19:39:29Z", "ethereum-optimism/docs", "2025-08-30 08:41:28"]
["I_kwDOLB-lzc591ZEI", 17, "Drop R&D note on span batch specs", "## Overview\r\n\r\nThe span batch specification still has an \"in R&D\" note:\r\n\r\nhttps://github.com/ethereum-optimism/specs/blob/main/specs/span-batches.md#L32-L34\r\n\r\nThis should be removed. Span batches have been live on Sepolia and Goerli for a while now, and Delta is scheduled for mainnet.", "OPEN", 0, "clabby", "2024-01-31T23:16:01Z", "2024-03-04T23:37:07Z", null, "ethereum-optimism/specs", "2025-08-30 08:41:46"]
["I_kwDODjvEJM6BvTLl", 9799, "`make devnet-up` throws error `No target contract named scripts/ForgeArtifacts.sol:ForgeArtifacts`", "**Bug Description**\r\nI am unable to set up the devnet locally using the command `make devnet-up`. I get the error `Message:  No target contract named scripts/ForgeArtifacts.sol:ForgeArtifacts`.\r\n\r\nDo  you think it could be related to this recent PR? https://github.com/ethereum-optimism/optimism/commit/cf9785348934de92766fb9051e305666e9a463c7\r\n\r\n![Screenshot from 2024-03-08 20-15-45](https://github.com/ethereum-optimism/optimism/assets/54408225/cd98e86f-0ea8-4700-a4d9-ed52b38b61e9)\r\n\r\n\r\n\r\nI've checkout some older commit and I see that contracts are being deployed and I can make more progress with the network setup. However, at some point the process also fails (with a different error).\r\n\r\n![Screenshot from 2024-03-08 20-35-59](https://github.com/ethereum-optimism/optimism/assets/54408225/cce61bee-9b80-406a-8244-2df4b4e12fc5)\r\n\r\n\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Run `make devnet-up`\r\n\r\n**Expected behavior**\r\nL1 and L2 networks should be running. \r\n\r\n\r\n**Environment Information:**\r\n - Operating System: Ubuntu\r\n - Package Version: `develop` branch - commit 7d3922c8758541a9d0413cb65c99050c14003374\r\n\r\n**Configurations:**\r\nNo flag set\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "seaona", "2024-03-08T19:37:35Z", "2024-03-09T18:22:17Z", "2024-03-09T18:22:17Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDODjvEJM6BuyoP", 9798, "Batch Decoder prints warning messages", "**Bug Description**\r\nWhen using the batch decoder tool, I'm running into warnings produced by the following line of code: https://github.com/ethereum-optimism/optimism/blob/7d3922c8758541a9d0413cb65c99050c14003374/op-node/rollup/derive/frame.go#L131 \r\n\r\n**Steps to Reproduce**\r\n\r\nRunning against sepolia here:\r\n```\r\ncd optimism/op-node/cmd/batch_decoder\r\ngo build\r\n./batch_decoder fetch --start 5443463 --end 5443543 --inbox 0xff00000000000000000000000000000011155420 --sender 0x8F23BB38F531600e5d8FDDaAEC41F13FaB46E98c --l1 https://eth-sepolia.g.alchemy.com/v2/<your_api_key_here>\r\nopen /tmp/batch_decoder/transactions_cache\r\n```\r\n\r\n**Expected behavior**\r\nNot entirely sure how to interpret this message. Any clarity would be appreciated. \r\n\r\n**Environment Information:**\r\n - Operating System: MacOS 14.2.1\r\n - Commit hash: `df98e902c227904f74d1f5f6337a4d91538cf823` on `develop` branch.\r\n\r\n\r\n**Logs:**\r\n\r\n```\r\nblaine@blaines-MacBook-Pro batch_decoder % ./batch_decoder fetch --start 5443463 --end 5443543 --inbox 0xff00000000000000000000000000000011155420 --sender 0x8F23BB38F531600e5d8FDDaAEC41F13FaB46E98c --l1 https://eth-sepolia.g.alchemy.com/v2/5ief20x2sn8ULZYkzYm2UtVeE3M1en9y\r\nFetched block:  5443465\r\nFetched block:  5443471\r\nFetched block:  5443469\r\nFetched block:  5443467\r\nFetched block:  5443472\r\nFetched block:  5443470\r\nFetched block:  5443466\r\nFetched block:  5443464\r\nFetched block:  5443463\r\nFound a transaction (0x2753a857d9f79d452049a4f91b09383601a690d7d6657dc4bb37c0d1e02e0d40) with invalid data: data array must not be empty\r\nFetched block:  5443468\r\nFetched block:  5443473\r\nFetched block:  5443475\r\nFound a transaction (0x60a8f8478f7aa444d633c76f0c452641d3e7b627c46662ae46084c31a3d32308) with invalid data: data array must not be empty\r\n```\r\n\r\n\r\n**Additional context**\r\nThis may not be a bug. Curious to understand what I should be expecting to see here. Perhaps this is a bug and changes to the transaction format has caused some regression with the introduction of eip4844? ", "CLOSED", 0, "blmalone", "2024-03-08T18:07:27Z", "2024-03-08T18:53:02Z", "2024-03-08T18:53:02Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDODjvEJM6Bn6d2", 9782, "Unreliable portal `depositTransaction()` for contract", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nAs mentioned within `OptimismPortal.depositTransaction()`:\r\nhttps://github.com/ethereum-optimism/optimism/blob/70c0778dc1f2ee3addc733b264da3f0d3bf7761a/packages/contracts-bedrock/src/L1/OptimismPortal.sol#L365-L367\r\n\r\nA contract should not be calling this method as if the deposit does not succeed, the ETH is deposited to the contract alias and is not replayable.  \r\n\r\nGiven this, I do not believe there should be a reason for a contract to be depositing to the Portal.\r\n\r\n**Suggestion**\r\nAdd the following protection to `depositTransaction()`:\r\n\r\n```solidity\r\nrequire(msg.sender == tx.origin, \"OptimismPortal: cannot deposit from contract\");\r\n```", "CLOSED", 0, "pegahcarter", "2024-03-07T20:23:07Z", "2024-03-08T05:01:13Z", "2024-03-08T05:01:13Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDODjvEJM6BUWpq", 9739, "Proposal to increase maxSequencerDrift to 30 minutes", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\nA `maxSequencerDrift` of 600s is very limiting for resolving L1 node issues.\r\n\r\n**Describe the solution you'd like**\r\nThe Base team proposes raising the `maxSequencerDrift` to 1800s. This could be included in the upcoming Fjord hard fork\r\n\r\n**Describe alternatives you've considered**\r\n<n/a>\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "CLOSED", 0, "henridevieux", "2024-03-05T16:00:20Z", "2024-03-05T16:04:05Z", "2024-03-05T16:04:05Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDODjvEJM6A92ci", 9710, "Sending to portal implementation leads to frozen funds.", "**Bug Description**\r\nThe Optimism Portal operates through a front-facing proxy with implementation. When a user wants to manually send ETH to Optimism mainnet, they send the ETH to the proxy contract. From there, Optimism reads events from the proxy to mint ETH for the user on L2.\r\n\r\nAs Optimism reads events from the Portal proxy, any transactions sent directly to the implementation will not be seen. Specifically, the `TransactionDeposited()` event that is emitted on `depositTransaction()` will never be picked up by Optimism.\r\n\r\nIn addition, a user should be able to withdraw from the L2 to the implementation directly. However, the user is unable to replay the transaction with `proveWithdrawalTransaction()` as the implementation is paused.\r\n\r\n**Impact Details**\r\nThis impacts all OP-stack chains as none of the implementations revert on receiving assets.  I stumbled upon this by sending ETH to the Fraxtal portal implementation:\r\nhttps://etherscan.io/address/0x59b6903044fa9439a5d621d3605789a6e654b1d6\r\n\r\n**Expected behavior**\r\n- Balance transfers to L2\r\nOR\r\n- tx reverts on L1 \r\n\r\n**Potential Solutions**\r\n- Add a paused check to the implementation for `receive()`\r\n- Have `receive()` revert if `(address(this) == implementation)`\r\n- Additionally revert for non-ETH based OP-stack chains if transferring the chain native token to the implementation.", "CLOSED", 0, "pegahcarter", "2024-03-01T15:59:53Z", "2024-03-06T18:27:10Z", "2024-03-06T18:27:10Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDODjvEJM52Ly-w", 8097, "How will your code be adjusted after Eip4844 goes online?", "As we know, There is a data validity period in eip4844, about 30 days. If eip4844 launch mainnet, what will happen to the process of verifier synchronizing rollup data and derivation in op-stack? Will the data 30 days ago become finalized directly, or should I use a data snapshot?", "CLOSED", 0, "guoshijiang", "2023-11-08T05:56:47Z", "2024-03-05T18:56:36Z", "2024-03-05T18:56:35Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDODjvEJM5iNq1n", 5300, "contracts-bedrock: eip 1967 constants in Constants.sol", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThere are multiple places where the EIP 1967 constants are used and they are defined inline multiple times. We should deduplicate the values.\r\n\r\n**Describe the solution you'd like**\r\nWe should hardcode the constants into `Constants.sol` and then also have unit tests that the values are correct and also import the values from the constants library into all the places where they are used.\r\n\r\n\r\n", "CLOSED", 0, "tynes", "2023-03-30T14:30:38Z", "2024-03-05T19:02:07Z", "2024-03-05T19:02:07Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDODjvEJM5ZZEW1", 4513, "Build docker images for ARM", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nHi,\r\nWould it be possible to build your docker images for ARM? This will help us run nodes on m1 macs and graviton aws instances.\r\nI'm specially interested in the super-awesome healthcheck image since it works for other EVM chains' nodes as well and help us keep track of nodes going bad.\r\nPlease lmk if it's possible to build a dockerfile which will allow me to do this myself too instead. Thanks!\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nTried writing the dockerfile below, ran it on an AWS graviton instance and kept getting `'Unknown system error -8'`\r\n```dockerfile\r\nFROM ethereumoptimism/foundry:latest as foundry\r\nFROM node:16-alpine3.14\r\n\r\nWORKDIR /\r\nRUN apk --no-cache add curl \\\r\n    jq \\\r\n    python3 \\\r\n    ca-certificates \\\r\n    git \\\r\n    make \\\r\n    gcc \\\r\n    musl-dev \\\r\n    linux-headers \\\r\n    bash \\\r\n    build-base \\\r\n    gcompat \\\r\n    git\r\n\r\nRUN git clone https://github.com/ethereum-optimism/optimism.git\r\nCOPY --from=foundry /usr/local/bin/forge /usr/local/bin/forge\r\nCOPY --from=foundry /usr/local/bin/cast /usr/local/bin/cast\r\n\r\nWORKDIR /optimism\r\nRUN yarn install --frozen-lockfile && yarn cache clean\r\nRUN yarn build\r\n\r\n\r\nWORKDIR /optimism/packages/replica-healthcheck\r\nENTRYPOINT [\"npm\", \"run\", \"start\"]\r\n```\r\n\r\nI also tried just building `replica-healthcheck` and ended up getting a bunch of TypeScript compile errors.\r\n\r\n**Additional context**\r\nTraceback:-\r\n```\r\n=> ERROR [stage-1  8/10] RUN yarn build                                                                                                                 16.8s\r\n------\r\n > [stage-1  8/10] RUN yarn build:\r\n#0 0.786 yarn run v1.22.19\r\n#0 0.834 $ yarn lerna run build\r\n#0 1.175 $ /optimism/node_modules/.bin/lerna run build\r\n#0 1.577 lerna notice cli v4.0.0\r\n#0 1.580 lerna info versioning independent\r\n#0 1.677 lerna info Executing command in 14 packages: \"yarn run build\"\r\n#0 5.992 lerna info run Ran npm script 'build' in '@eth-optimism/core-utils' in 4.3s:\r\n#0 5.993 $ tsc -p tsconfig.json\r\n#0 7.961 lerna info run Ran npm script 'build' in '@eth-optimism/hardhat-deploy-config' in 6.3s:\r\n#0 7.961 $ tsc -p tsconfig.json\r\n#0 12.90 lerna info run Ran npm script 'build' in '@eth-optimism/common-ts' in 6.9s:\r\n#0 12.90 $ tsc -p tsconfig.json\r\n#0 16.69 lerna ERR! yarn run build exited 1 in '@eth-optimism/contracts-bedrock'\r\n#0 16.69 lerna ERR! yarn run build stdout:\r\n#0 16.69 $ yarn ts-node scripts/verify-foundry-install.ts\r\n#0 16.69 $ /optimism/node_modules/.bin/ts-node scripts/verify-foundry-install.ts\r\n#0 16.69 $ hardhat compile && yarn autogen:artifacts && yarn build:ts && yarn typechain\r\n#0 16.69 \r\n#0 16.69 info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n#0 16.69 lerna ERR! yarn run build stderr:\r\n#0 16.69 Solidity 0.8.15 is not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\r\n#0 16.69 \r\n#0 16.69 Learn more at https://hardhat.org/reference/solidity-support\r\n#0 16.69 \r\n#0 16.69 An unexpected error occurred:\r\n#0 16.69 Error: spawn Unknown system error -8\r\n#0 16.69     at ChildProcess.spawn (node:internal/child_process:413:11)\r\n#0 16.69     at spawn (node:child_process:700:9)\r\n#0 16.69     at /optimism/packages/contracts-bedrock/node_modules/@foundry-rs/hardhat-forge/src/forge/build/build.ts:36:26\r\n#0 16.69     at new Promise (<anonymous>)\r\n#0 16.69     at spawnBuild (/optimism/packages/contracts-bedrock/node_modules/@foundry-rs/hardhat-forge/src/forge/build/build.ts:35:10)\r\n#0 16.69     at async OverriddenTaskDefinition._action (/optimism/packages/contracts-bedrock/node_modules/@foundry-rs/hardhat-forge/src/forge/build/index.ts:20:5)\r\n#0 16.69     at async Environment._runTaskDefinition (/optimism/node_modules/hardhat/src/internal/core/runtime-environment.ts:219:14)\r\n#0 16.69     at async Environment.run (/optimism/node_modules/hardhat/src/internal/core/runtime-environment.ts:131:14)\r\n#0 16.69     at async main (/optimism/node_modules/hardhat/src/internal/cli/cli.ts:218:5) {\r\n#0 16.69   errno: -8,\r\n#0 16.69   code: 'Unknown system error -8',\r\n#0 16.69   syscall: 'spawn'\r\n#0 16.69 }\r\n#0 16.69 error Command failed with exit code 1.\r\n#0 16.69 lerna ERR! yarn run build exited 1 in '@eth-optimism/contracts-bedrock'\r\n#0 16.69 lerna WARN complete Waiting for 2 child processes to exit. CTRL-C to exit immediately.\r\n#0 16.71 error Command failed with exit code 1.\r\n#0 16.71 info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n#0 16.73 error Command failed with exit code 1.\r\n#0 16.73 info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n------\r\nfailed to solve: executor failed running [/bin/sh -c yarn build]: exit code: 1\r\n```", "CLOSED", 0, "0xabhinav", "2022-12-16T07:37:45Z", "2024-03-05T18:57:50Z", "2024-03-05T18:57:50Z", "ethereum-optimism/optimism", "2025-08-30 08:41:47"]
["I_kwDOKIwiaM6B0GU2", 550, "Revise GSGs to link to dev persona overview pages", "Revise op-mainnet and op-stack getting started guides to link to dev persona overview pages \r\n- [op-stack GSG](https://docs.optimism.io/stack/getting-started) links to chain operators, CEX, wallet devs, node operators (?) @sbvegan to confirm\r\n- [op-mainnet GSG](https://docs.optimism.io/chain/getting-started) links to dapp developers and node operators", "CLOSED", 0, "cpengilly", "2024-03-10T21:44:38Z", "2024-03-11T17:21:54Z", "2024-03-11T17:21:54Z", "ethereum-optimism/docs", "2025-08-30 08:44:07"]
["I_kwDOH2Qg5s6CiQry", 270, "Historical receipts are missing l1 data on snap sync nodes", "#### System information\r\n\r\n`op-geth version 1.101308.2-stable-0402d543`\r\n\r\n#### Expected behaviour\r\n\r\nThe response to `eth_getBlockReceipts` and `eth_getTransactionReceipt` should be identical regardless of sync method.\r\n\r\n#### Actual behaviour\r\n\r\nSnap sync nodes return `null` for l1 data and are missing the field `l1FeeScalar` entirely for historical blocks\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nQuery:\r\n\r\n```json\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"eth_getBlockReceipts\",\"params\":[\"0x1234\"]}\r\n```\r\n\r\nResult:\r\n\r\n```bash\r\n\u276f diff <(jq --sort-keys . ~/tmp/snap.json) <(jq --sort-keys . ~/tmp/full.json)\r\n13,15c13,16\r\n<       \"l1Fee\": null,\r\n<       \"l1GasPrice\": null,\r\n<       \"l1GasUsed\": null,\r\n---\r\n>       \"l1Fee\": \"0x4d0d1b312dc7a\",\r\n>       \"l1FeeScalar\": \"1.5\",\r\n>       \"l1GasPrice\": \"0x2b61b593ee\",\r\n>       \"l1GasUsed\": \"0x12f2\",\r\n```\r\n\r\nSo the full sync full nodes have l1Fee and l1Gas data, but the snap sync node does not.\r\n\r\nrelevant op-geth flags:\r\n\r\n```bash\r\n--op-network=op-mainnet\r\n--state.scheme=path\r\n--history.transactions=0\r\n--syncmode=snap\r\n--gcmode=full\r\n```", "OPEN", 0, "quickchase", "2024-03-16T14:09:58Z", "2024-03-16T14:09:58Z", null, "ethereum-optimism/op-geth", "2025-08-30 08:44:07"]
["I_kwDOH2Qg5s6CXiw1", 269, "[Denial of Service] \"Opted to halt, unprepared for protocol change\"", "Hey could we maybe not automatically halt when a major version change is encountered and just log an error instead?\r\n\r\nThis is the opposite of designing your distributed system to be antifragile.\r\n\r\nhttps://github.com/ethereum-optimism/op-geth/blob/336d284b606ec4792a605932201b97f04981db9d/eth/backend.go#L612-L640", "OPEN", 0, "feld", "2024-03-14T20:25:21Z", "2024-03-17T20:29:13Z", null, "ethereum-optimism/op-geth", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6B89Sq", 174, "Update image on Dapp Console Modal", "", "CLOSED", 0, "tarunkhasnavis", "2024-03-11T21:09:36Z", "2024-03-13T22:11:08Z", "2024-03-13T22:11:08Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6B8Lnm", 173, "Update FAQ on faucet", "<img width=\"430\" alt=\"Screenshot 2024-03-11 at 12 27 03\u202fPM\" src=\"https://github.com/ethereum-optimism/ecosystem/assets/7953225/58f9bacc-2b41-4f17-b380-13a886ed8218\">\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-11T19:26:34Z", "2024-03-13T22:11:00Z", "2024-03-13T22:11:00Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BvOQy", 165, "Update order of faucets", "", "CLOSED", 0, "tarunkhasnavis", "2024-03-08T19:24:41Z", "2024-03-13T22:10:43Z", "2024-03-13T22:10:43Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BfY-z", 157, "Add coinbase verification to attestation group", "", "CLOSED", 0, "tarunkhasnavis", "2024-03-06T21:45:48Z", "2024-03-13T22:10:36Z", "2024-03-13T22:10:36Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BWtgj", 153, "Add link out cards for dapp console and new bulk token form", "![Screenshot 2024-03-05 at 2 01 35\u202fPM](https://github.com/ethereum-optimism/ecosystem/assets/7953225/c0bf8a58-430a-437a-a913-3cf2f9339326)\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T22:00:23Z", "2024-03-13T22:10:01Z", "2024-03-13T22:10:01Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BWtFc", 152, "Copy and image changes", "\r\n![Screenshot 2024-03-05 at 2 01 09\u202fPM](https://github.com/ethereum-optimism/ecosystem/assets/7953225/f8a1af44-90e8-40c6-a947-ff40a417d064)\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T21:58:58Z", "2024-03-13T22:09:53Z", "2024-03-13T22:09:53Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BWtEA", 150, "Add ETH Sepolia support to faucet", "\r\n![Screenshot 2024-03-05 at 2 02 56\u202fPM](https://github.com/ethereum-optimism/ecosystem/assets/7953225/55480273-8e76-44a2-9957-2e328083ec47)\r\n![Screenshot 2024-03-05 at 2 04 10\u202fPM](https://github.com/ethereum-optimism/ecosystem/assets/7953225/f91d5975-5eb4-44a1-b429-496990589bf4)\r\n\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T21:58:53Z", "2024-03-13T22:10:09Z", "2024-03-13T22:10:09Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BWtDO", 149, "Add Fraxtal support to faucet", "![Screenshot 2024-03-05 at 2 03 47\u202fPM](https://github.com/ethereum-optimism/ecosystem/assets/7953225/5f48227e-32c3-4947-befb-1126d2fb27be)\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T21:58:51Z", "2024-03-13T22:10:51Z", "2024-03-13T22:10:51Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BWtCL", 148, "Change claim toggle to only have one active at a time", "https://www.loom.com/share/bd6a3564286b4b6a97fe2d105367158e", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T21:58:48Z", "2024-03-11T21:00:28Z", "2024-03-11T21:00:28Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOKSJyfM6BWtAo", 146, "Create and add dapp console upsell modal", "![Screenshot 2024-03-05 at 2 05 41\u202fPM](https://github.com/ethereum-optimism/ecosystem/assets/7953225/0da2bba5-d3a5-48c7-a6b0-5d64a88c8b1e)\r\n", "CLOSED", 0, "tarunkhasnavis", "2024-03-05T21:58:43Z", "2024-03-13T22:10:20Z", "2024-03-13T22:10:20Z", "ethereum-optimism/ecosystem", "2025-08-30 08:44:07"]
["I_kwDOLB-lzc6B-0K9", 89, "Interop: Cross Chain Message Throttling", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nEvery executing message that is included adds cost to the derivation pipeline. There needs to be some mechanism by which that cost is paid for by users. There are a few options here:\r\n- Enforce in the `CrossL2Inbox` a max number of executing messages per block. This would need to be coupled with a rule that marks reverting executing messages as resolved automatically instead of needing to fetch data from remote chains to resolve the executing messages. This can greatly reduce the cost in the derivation pipeline but adds a requirement of L2 receipt fetching from within derivation\r\n- Enforce in consensus a max number of executing messages per block. Any block with more than a certain number of executing messages is considered invalid and skipped. This means that a hardfork is required to change this value unless we decide to add it to the L1 attributes transaction so that it can be dynamically changed by the chain operator\r\n- Burn gas in the `CrossL2Inbox` to artificially make it more expensive to send cross chain messages. Ideally we avoid a concept of  an EIP-1559 like curve with a supply/demand curve and basefee because that is complex to test. We can burn a flat amount per message. Any sort of dynamic amount of gas burned will result in gas estimation issues\r\n- Accept fee payments in ether in the `CrossL2Inbox` instead of burning gas. This is a better throttling mechanism than burning gas although we do not have any prior art for this kind of design\r\n\r\n\r\n", "OPEN", 0, "tynes", "2024-03-12T04:54:11Z", "2024-03-12T04:54:11Z", null, "ethereum-optimism/specs", "2025-08-30 09:45:09"]
["I_kwDODjvEJM6CB8_A", 9824, "Feat: Upgrade to Ethers v6 from v5", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nDependency on Ethers v5 should be depreciated and a migration path to v6 should be assessed. There are significant breaking change of moving to ES2020 BigInt and other modern JS features that make moving to v6 in my view worthwhile. Additionally, test network Holesky isn't supported on v5.\r\n\r\n**Describe the solution you'd like**\r\nCatalog all current packages dependent upon Ethers\r\nAssess the complexity of migration. For example v5 and v6 providers aren\u2019t interchangeable. An example of an easier migration update is depicted below:\r\n\r\n\r\nOld Ethers v5\r\n```ts\r\nimport { providers } from 'ethers'\r\nimport { providers, Wallet } from \"ethers\";\r\nconst provider = providers.getDefaultProvider('goerli')\r\n```\r\n\r\nNew Ethers v6 \r\n```ts\r\nimport { getDefaultProvider } from 'ethers'\r\nimport { JsonRpcProvider, Wallet } from \"ethers\";\r\nconst provider = getDefaultProvider('goerli')\r\n```\r\n\r\n\r\nOld\r\n\r\n```diff\r\nconst tx = {\r\n    from: wallet.address,\r\n    to: wallet.address,\r\n    value: \"0x42\",\r\n-    gasPrice: BigNumber.from(99).mul(1e9), // 99 gwei\r\n-    gasLimit: BigNumber.from(21000),\r\n}\r\n```\r\n\r\n\r\n```diff\r\nconst tx = {\r\n    from: wallet.address,\r\n    to: wallet.address,\r\n    value: \"0x42\",\r\n+   gasPrice: 99n * BigInt(1e9), // 99 gwei\r\n+   gasLimit: 21000n,\r\n}\r\n```\r\n\r\n\r\n**Describe alternatives you've considered**\r\nForking the codebase and just YOLO the changes\r\n\r\n**Additional context**\r\nI am not suggesting someone actually does this shit by hand. Instead, something like a codemod (see for example Nextjs usage here: https://nextjs.org/docs/app/building-your-application/upgrading/codemods) should be utilized or bounty given. Lets be reasonable here comrades.", "CLOSED", 0, "sambacha", "2024-03-12T12:52:45Z", "2024-03-12T17:13:35Z", "2024-03-12T17:08:27Z", "ethereum-optimism/optimism", "2025-08-30 09:45:22"]
["I_kwDOJ_r-bs6AbzAx", 103, "Move `init` function to its own file", "              I realize that this `init()` function is buried in the middle of this large `superchain.go` file. We should move this into `init.go` in a follow up.\r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/superchain-registry/pull/101#discussion_r1501629450_\r\n            ", "CLOSED", 0, "geoknee", "2024-02-26T17:52:30Z", "2024-03-11T09:49:35Z", "2024-03-11T09:49:35Z", "ethereum-optimism/superchain-registry", "2025-08-30 09:45:36"]
["I_kwDOJ_r-bs5-9fh0", 85, "Remove `goerli/base` from the registry", "[Since this network is now sunset](https://base.mirror.xyz/WvUZ4ea5G45kaASvgfL8M0whT2tt1qcegeyx3oYHwb4)", "CLOSED", 0, "geoknee", "2024-02-12T12:35:24Z", "2024-03-11T14:21:09Z", "2024-03-11T14:21:09Z", "ethereum-optimism/superchain-registry", "2025-08-30 09:45:36"]
["I_kwDOKIwiaM6CfRkd", 573, "update all references of dapp to app", "- page names\r\n- url changes", "CLOSED", 0, "cpengilly", "2024-03-15T18:26:07Z", "2024-03-21T19:27:29Z", "2024-03-21T19:27:29Z", "ethereum-optimism/docs", "2025-08-30 09:46:14"]
["I_kwDOH2Qg5s6DPC2n", 272, "Syncing specification after Dencun", "In the past, I have op-geth and when syncing from the L2 genesis block, it referred to verify from the L2 transaction batch data as stored cdata in L1 node.\r\nAfter the Dencun, L1 blob will disappear for 18 days, so the L2 transaction batch in blob will also disappear.\r\nIt suggests that the op-geth cannot sync from the genesis because currently cannot verify the L2 batch data in L1 node because of blob L2 batch data disappearing for 18 days.\r\n\r\n- So, currently, op-geth started to support snap-sync because of the incapability of syncing from the genesis and the snapshot is also stale for use after 18 days?\r\n\r\nSorry if I have some misconception beforehand.", "CLOSED", 0, "HiroyukiNaito", "2024-03-22T05:58:11Z", "2024-03-22T16:34:20Z", "2024-03-22T16:32:36Z", "ethereum-optimism/op-geth", "2025-08-30 09:46:16"]
["I_kwDOLB-lzc6DNMDT", 101, "Proposal: live preimage collector", "## Background\r\n\r\nThe OP-Stack currently requires an archive node for some special tasks:\r\n- **output-root proposals** (withdrawal storage root): spanning at least an hour, or as long as the proposer is configured to wait before proposals. This may be multiplied, to not handle proposer downtime.\r\n- **fault-proof program execution** (historical L2 state): the last week worth of data, assuming a disputed L2 output root is no older than the last finalized L2 output root. This may be extended if there are very infrequent output-roots.\r\n\r\nArchive nodes retain *all* historical versions of the state, and are thus more burdensome to run than full nodes, due to increased resource usage, and difficulty syncing (just snap-syncing the latest state is insufficient).\r\n\r\nThe archive data that the op-stack relies on however does not span more than the most recent week worth of state. This can help bound the resource usage of the archive data significantly.\r\n\r\nNote that go-ethereum may implement a \"rolling archive mode\" at some point, but this would be single-client, and may not handle intermediate merkle-patricia-trie nodes as necessary.\r\n\r\nFor reference, OP-Mainnet full-node (pebble DB, path scheme) stats:\r\n```\r\n| Key-Value store       | Path trie account nodes | 18.98 GiB  |  165149260 |\r\n| Key-Value store       | Path trie storage nodes | 113.25 GiB | 1140900306 |\r\n| Key-Value store       | Account snapshot        | 8.05 GiB   |  124274313 |\r\n| Key-Value store       | Storage snapshot        | 57.15 GiB  |  832582174 |\r\n```\r\n\r\nWhile large, this is signficiantly less than running an archive node (OP-Mainnet Hash-db, leveldb), which takes just under 5 TB total (most of which is state, since a full-node is ~450 GB total).\r\n\r\n## Towards a solution\r\n\r\nTo mitigate this, the OP-Stack could be extended with a special service that collects and maintains just the last week worth of preimage data. The preimage data can be collected when it is still \"hot\", i.e. from a full node, which retains the most recent history (128 L2 blocks, just over 4 minutes of data).\r\n\r\nSince output-proposing and fault-proving is not constrained on performance, the preimage collection does not have to be optimized. If the withdrawal-storage is available within an hour, and arbitrary state is available within hours, the use-case of the data is not really affected.\r\n\r\n## Possible shape of archive\r\n\r\nThere are two ways to do this:\r\n- A full copy of all state pre-images that are attached to a recent state-root\r\n- A combination of the latest state, and a running list of recently deleted preimages.\r\n\r\nThe latter approach may be more efficient, but also relies on the live DB serving the preimages reliably. Which includes intermediate MerklePatriciaTrie nodes and such.\r\n\r\nThe former approach requires more disk-space, but may be easier to maintain conceptually:\r\n- maintain a set of known state-roots\r\n- every few seconds, poll for new state-roots, add to the collection\r\n- every few seconds, poll for old state-roots, remove from the collection\r\n- garbage-collect any merkle-patricia-trie node that is not reachable from a known state-root. This can be done by implementing reference counting or some sweeping routine.\r\n- trace the L2 blocks of state-roots with unknown preimage data, to collect the list of changed accounts and storage values, and then collect the missing trie branches for the changes with batched `eth_getProof` calls.\r\n\r\nThe latter approach may be implemented by attaching a log to the execution-layer directly: whenever any preimage gets replaced/deleted, write it to the log. Then prune the log to not contain anything older than a week. The latest state, combined with recent changes, should cover the full set of preimages necessary for the OP-Stack.\r\n\r\n## Possible variants\r\n\r\nBy re-using the op-program, the preimages can be generated locally, by processing blocks on top of the existing pre-state. This removes the need for state-fetching through `eth_getProof` or similar, and also test-runs the op-program consistently; state-roots can be compared against the actual block state-roots.\r\n\r\n## API\r\n\r\nThis service should expose a simple key-value getter API, for the `op-program` (in host mode) to collect state preimages from.\r\n", "OPEN", 0, "protolambda", "2024-03-21T22:05:37Z", "2024-03-22T01:43:57Z", null, "ethereum-optimism/specs", "2025-08-30 09:46:21"]
["I_kwDOLB-lzc6CYe60", 91, "Proposal: disallow moving spec pages without corresponding path redirecting", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nsomeone links me to a doc page, suddenly 404 page missing fml\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\nProposal: disallow moving spec pages without corresponding path redirecting\r\n\r\n**Describe alternatives you've considered**\r\nusing a different rollup stack\r\n\r\n**Additional context**\r\n\r\nExample: https://github.com/ethereum-optimism/optimism/blob/develop/specs/fault-proof.md", "OPEN", 0, "sambacha", "2024-03-14T23:40:38Z", "2024-03-19T23:42:31Z", null, "ethereum-optimism/specs", "2025-08-30 09:46:21"]
["I_kwDOLB-lzc5-FBkb", 26, "Specs Layout Refactor", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nRight now it is difficult to contribute or consume the specs because of the way that they are laid out. It is not clear where to add new information and there isn't an easy way to know what functionality is associated with what network upgrade.\r\n\r\nWe should lay out the specs in a way where there is a set of topics and directories for each network upgrade. If a topic is changed as part of a network upgrade, we should include a markdown file named after the topic inside which includes the functionality specific for that network upgrade.\r\n\r\nA simplified example below:\r\n\r\n```\r\n\u251c\u2500\u2500 bedrock\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 batcher.md\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 derivation-pipeline.md\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 predeploys.md\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 state-transition.md\r\n\u251c\u2500\u2500 canyon\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 state-transition.md\r\n\u251c\u2500\u2500 delta\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 span-batches.md\r\n\u251c\u2500\u2500 ecotone\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 predeploys.md\r\n\u251c\u2500\u2500 fjord\r\n\u2514\u2500\u2500 regolith\r\n    \u2514\u2500\u2500 state-transition.md\r\n```", "OPEN", 0, "tynes", "2024-02-02T16:00:52Z", "2024-03-18T19:45:30Z", null, "ethereum-optimism/specs", "2025-08-30 09:46:21"]
["I_kwDOJ_r-bs6BfY5Y", 111, "Simplify `CONTRIBUTING.md` process", "Currently the [`CONTRIBUTING.md`](https://github.com/ethereum-optimism/superchain-registry/blob/46f8c2f74debd4a40facf5686b2238cf7093023c/CONTRIBUTING.md) process has a lot of manual steps and is tedious.\r\n\r\nNone of the inputs to this process are secret, so we can commit inputs to the repo as an incremental step towards a broader refactor of the registry. Therefore the proposed implementation here is:\r\n\r\n- Create a `superchain/input/template.toml` file that has all the keys needed\r\n- Add [yq](https://github.com/mikefarah/yq) or [yj](https://github.com/sclevine/yj) as a dependency. (yq parses TOML directly, yj converts it to json so we can pipe to jq)\r\n- Create a `scripts/add-chain.sh` bash script that contains all the existing code currently in `CONTRIBUTING.md`, with yq/yj usage as needed\r\n\r\nNow to add a chain you would:\r\n- `cp superchain/input/template.toml superchain/input/{l1ChainName}/{l2ChainName}.toml`\r\n    - Example: `cp superchain/input/template.toml superchain/input/sepolia/mode.toml`\r\n- Fill in the resulting file\r\n- Run `bash scripts/add-chain.sh [path/to/your/input.toml]`\r\n\r\nThen to verify new inputs on PRs, CI run the bash script for new input files (or all inputs if its simpler), and verify there is no resulting diff (similar to how our snapshots work in the monorepo)\r\n\r\nAlternatively, if we don't want to introduce TOML parsing yet, we can use a `.env.example` file and just export env vars", "CLOSED", 0, "mds1", "2024-03-06T21:45:31Z", "2024-03-18T16:54:59Z", "2024-03-18T16:54:59Z", "ethereum-optimism/superchain-registry", "2025-08-30 09:48:20"]
["I_kwDODjvEJM6Chx6w", 9880, "When deploying an L1 smart contract, is it normal to consume 10  Sepolia  ETH?", " \r\n**Bug Description**\r\nI fellow the tutorial \u300aCreating Your Own L2 Rollup Testnet\u300b,\r\nWhen deploying an L1 smart contract, is it normal to consume 10+  Sepolia  ETH and 46 txes?\r\n\r\n![1](https://github.com/ethereum-optimism/optimism/assets/3353561/e2b34fac-ed56-44d9-9963-235d5fe29630)\r\n", "CLOSED", 0, "lichong2005", "2024-03-16T10:05:12Z", "2024-03-18T12:30:38Z", "2024-03-18T12:30:38Z", "ethereum-optimism/optimism", "2025-08-30 09:48:38"]
["I_kwDODjvEJM6AwtrF", 9698, "failed to get time to slot function: failed request with status 403: missing token", "Hi team,\r\nThank you for your great work.\r\n\r\nWhen I upgraded the sepolia network to the latest version, I found that there were more related configurations of l1.beacon. I was running lighthouse locally.\r\n```\r\nlighthouse --network sepolia beacon --http --http-address 0.0.0.0 --checkpoint-sync-url=https://beaconstate-sepolia.chainsafe.io --execution-endpoint=http://127.0.0.1:8551 --execution-jwt=/jwt/node_beacon/jwt.hex --purge-db\r\n```\r\n When I added relevant parameters to start,\r\n```\r\nL1URL=http://127.0.0.1:8545\r\nL1BEACONURL=http://127.0.0.1:8551\r\nL1KIND=basic\r\nNET=op-sepolia\r\n\r\ncd /geth/optimism/op-node\r\n\r\n./bin/op-node \\\r\n        --l1=$L1URL  \\\r\n        --l1.rpckind=$L1KIND \\\r\n\t--l1.beacon=$L1BEACONURL \\\r\n\t--l1.beacon.ignore=true \\\r\n        --l2=http://localhost:8561 \\\r\n        --l2.jwt-secret=/geth/optimism/op-node/jwt.txt \\\r\n        --network=$NET \\\r\n\t--network=op-sepolia \\\r\n        --rpc.addr=0.0.0\r\n```\r\nIt threw the following error. \r\n```\r\nt=2024-02-29T02:56:06+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xf944074e22a7ba27c062a1a679b5c415bed51999a747c786945abbf07fa8b015:8686413\r\nt=2024-02-29T02:56:07+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=28 err=\"engine stage failed: temp: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0x799e89369a21a862a5ae506841e56b1cd4895f5d7b7fabe66add300a6c1cb315:5335452: failed to get time to slot function: failed request with status 403: missing token\\n\"\r\nt=2024-02-29T02:56:08+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x352220123d4f5881d9c1ac64da1de0ca7a73f4293b750ed5ca553ad5224b44b0:8686414 peer=16Uiu2HAmK7wyBpAEg2b7jXebgmNNtyCywHJKm4YaWYn6PMUoDHmC\r\nt=2024-02-29T02:56:08+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x352220123d4f5881d9c1ac64da1de0ca7a73f4293b750ed5ca553ad5224b44b0:8686414\r\n\r\n```\r\nWhich parameter does this token need to be added to? --l1.beacon-header? I tried it but it didn't work.\r\n\r\nAny input is greatly appreciated", "CLOSED", 0, "harveyff", "2024-02-29T02:57:49Z", "2024-03-24T06:18:26Z", "2024-03-24T06:18:26Z", "ethereum-optimism/optimism", "2025-08-30 09:48:38"]
["I_kwDODjvEJM58fZ3r", 9078, "only-allow: not found / MODULE_NOT_FOUND", "Opening the issue, not because I am convinced that the source of the problem is here, but just to let you guys know that there is such issue, and possible fix.\r\n\r\n**Describe the bug**\r\n- we are using `optimism-sdk` as dependency\r\n- locally, all seem to work\r\n- on circleCI or on heroku, the `yarn install` command (seemingly randomly) fails with\r\n\r\n```\r\nExit code: 127\r\nCommand: npx only-allow pnpm\r\nArguments: \r\nDirectory: /home/circleci/repo/node_modules/@eth-optimism/core-utils\r\nOutput:\r\nnpm WARN exec The following package was not found and will be installed: only-allow@1.2.1\r\nsh: 1: only-allow: not found\r\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\r\n\r\nExited with code exit status 127\r\n```\r\n\r\nor \r\n\r\n```\r\nerror /home/circleci/repo/node_modules/@eth-optimism/contracts-bedrock: Command failed.\r\nExit code: 1\r\nCommand: npx only-allow pnpm\r\nArguments: \r\nDirectory: /home/circleci/repo/node_modules/@eth-optimism/contracts-bedrock\r\nOutput:\r\nnpm WARN exec The following package was not found and will be installed: only-allow@1.2.1\r\nnode:internal/modules/cjs/loader:1080\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module '/home/circleci/.npm/_npx/0b83cd9ca5e1325c/node_modules/.bin/only-allow'\r\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1077:15)\r\n    at Module._load (node:internal/modules/cjs/loader:922:27)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\r\n    at node:internal/main/run_main_module:23:47 {\r\n  code: 'MODULE_NOT_FOUND',\r\n  requireStack: []\r\n}\r\n\r\nNode.js v18.17.1\r\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\r\n```\r\n\r\n\r\n**To Reproduce**\r\n - hard to do, for us, the `yarn install` script was failing randomly, we haven't figured out what is it dependent on\r\n\r\n**Expected behavior**\r\n- yarn install works, only allow gets installed and is found\r\n\r\n**System Specs:**\r\n\"@eth-optimism/sdk\": \"^3.1.6\"\r\n\r\n**Additional context**\r\nPossibly related\r\nhttps://github.com/pnpm/only-allow/issues/11\r\nhttps://github.com/npm/cli/issues/2660\r\nhttps://github.com/Lightprotocol/light-protocol/issues/381\r\nhttps://github.com/juliencrn/usehooks-ts/issues/420\r\n\r\n**Possible fix**\r\n- we added `only-allow` package as `devDependency` which seemed to fix the issue.\r\n\r\n\r\n", "CLOSED", 0, "PeterBenc", "2024-01-18T16:08:07Z", "2024-03-22T09:13:16Z", "2024-03-11T17:13:23Z", "ethereum-optimism/optimism", "2025-08-30 09:48:38"]
["I_kwDOLB-lzc6AaUKd", 65, "plasma: default commitment type conflicts with derivation version", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nCurrently the specs for plasma describe the commitment type as `0` for `keccak256` commitment of the data. \r\n\r\n> Commitments are encoded as `commitment_type_byte ++ commitment_bytes`, where `commitment_bytes` depends\r\n> on the `commitment_type_byte` where [0, 128) are reserved for official implementations:\r\n> \r\n> | `commitment_type` | `commitment`                    |\r\n> | ----------------- | ------------------------------- |\r\n> | 0                 | `keccak256(tx_payload)`         |\r\n> \r\n\r\nThere is small but unfortunate chance of mis-interpreting the commitment type as the derivation version due to both being calldata, for example if a sequencer node enables plasma but disables it later. Since configuration for plasma is part of the `--plasma` cli flags and not part of `rollup.json`, the likelihoood of this is high especially during fork migrations.\r\n\r\n**Describe the solution you'd like**\r\n\r\nPlease consider removing the ambiguity between the derivation version and commitment type by using distinct sentinel bytes.\r\n\r\n**Describe alternatives you've considered**\r\nAlternatively, please consider making the plasma config part of the rollup config.", "CLOSED", 0, "tuxcanfly", "2024-02-26T14:55:34Z", "2024-03-25T17:32:05Z", "2024-03-25T17:32:05Z", "ethereum-optimism/specs", "2025-08-30 09:49:06"]
["I_kwDODjvEJM6DZV_3", 9960, "Deploying L1 contracts failed at VM::split() step when creating our own OP Stack chain", "**Bug Description**\r\n\r\n\r\n\r\n```\r\n% forge script scripts/Deploy.s.sol:Deploy --private-key $GS_ADMIN_PRIVATE_KEY --broadcast --rpc-url $L1_RPC_URL --slow\r\n[\u2812] Compiling...\r\nNo files changed, compilation skipped\r\nTraces:\r\n  [68391679] \u2192 new Deploy@0x5b73C5498c1E3b4dbA84de0F1833c4a029d90519\r\n    \u2514\u2500 \u2190 340423 bytes of code\r\n\r\n  [104336] Deploy::setUp() \r\n    \u251c\u2500 [0] VM::projectRoot() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 /Users/user/op/packages/contracts-bedrock\r\n    \u251c\u2500 [0] VM::envOr(DEPLOYMENT_CONTEXT, ) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 <env var value>\r\n    \u251c\u2500 [0] VM::envOr(DEPLOYMENT_OUTFILE, /Users/user/op/packages/contracts-bedrock/deployments/d-sepolia/.deploy) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 <env var value>\r\n    \u251c\u2500 [0] console::log(Writing artifact to %s, /Users/user/op/packages/contracts-bedrock/deployments/d-sepolia/.deploy) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::split(/Users/user/op/packages/contracts-bedrock/deployments/d-sepolia/.deploy, /) \r\n    \u2502   \u2514\u2500 \u2190 \"Invalid data\"\r\n    \u2514\u2500 \u2190 \"EvmError: Revert\"\r\n\r\n\r\n== Logs ==\r\n  Writing artifact to /Users/user/op/packages/contracts-bedrock/deployments/d-sepolia/.deploy\r\nError: \r\nScript failed.\r\n```\r\n\r\n**Steps to Reproduce**\r\n\r\nFollow the tutorial step by step till \"Deploying L1 contracts\" step:\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#deploy-the-l1-contracts\r\n\r\n\r\n**Environment Information:**\r\n - Operating System: macos 13.3.1\r\n - Package Version (or commit hash): v1.7.2\r\n", "CLOSED", 0, "cifer76", "2024-03-24T17:06:38Z", "2024-03-26T08:49:00Z", "2024-03-26T08:49:00Z", "ethereum-optimism/optimism", "2025-08-30 09:50:32"]
["I_kwDODjvEJM5-OFou", 9347, "OP Node `Walking back L1Block by hash` will start from the beginning if it hits a 429 rate limit error", "**Describe the bug**\r\nAfter a node restart, op-node will walk back to the last finalized head and emit's the log `Walking back L1Block by hash` at each step. During this phase, if the L1 RPC gets rate limited it will restart the process from the beginning. This can cause a node to never get sync'd after a restart.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Get an L1 RPC that has a fairly low rate limit or run a side process that will spam the L1 RPC so that it's close to getting rate limited\r\n2. Restart OP node with the same L1 RPC\r\n3. Should see `Walking back L1Block by hash` start from the beginning after it hits a 429 error.\r\n\r\n**Expected behavior**\r\nIt should retry the L1 RPC with an exponential back-off and continue where it left off rather than start from the beginning.\r\n\r\n**System Specs:**\r\n - OS: Ubuntu\r\n - Package Version (or commit hash): op-node v1.5.0 and op-geth v1.101305.3\r\n\r\n**Additional context**\r\nWe run multiple OP nodes in production. Ran into this issue when attempting to update multiple nodes in parallel using the same L1 RPC. Issue resolved once I switched to updating nodes sequentially.\r\n", "CLOSED", 0, "hazim-j", "2024-02-05T03:54:33Z", "2024-03-25T17:37:40Z", "2024-03-25T17:37:40Z", "ethereum-optimism/optimism", "2025-08-30 09:50:32"]
["I_kwDODjvEJM5z1RXZ", 7684, "op-proposer,challenger: start/stop balance-metrics like op-batcher", "`StartBalanceMetrics` in op-batcher creates a background loop that can be closed gracefully. This same pattern should be applied to the proposer/challenger, so the loop is closed before the RPC clients are closed.\r\n\r\nSee https://github.com/ethereum-optimism/optimism/pull/7682 for context.\r\n", "CLOSED", 0, "protolambda", "2023-10-14T15:37:07Z", "2024-03-30T13:57:05Z", "2024-03-30T13:57:05Z", "ethereum-optimism/optimism", "2025-08-30 09:50:32"]
["I_kwDOKIwiaM53oxv3", 198, "[AUDIT] new tutorial: op-viem", "op-viem tutorial is needed", "CLOSED", 0, "cpengilly", "2023-11-22T22:07:47Z", "2024-04-03T03:48:53Z", "2024-04-03T03:48:53Z", "ethereum-optimism/docs", "2025-08-30 10:51:35"]
["I_kwDOFpg0Ns6E3iax", 766, "We are gonna change this folder name to `heart` since a \u2764\ufe0f as a file name is not ideal", "              We are gonna change this folder name to `heart` since a :heart: as a file name is not ideal\r\n\r\n_Originally posted by @roninjin10 in https://github.com/ethereum-optimism/ethereum-optimism.github.io/issues/637#issuecomment-1995712268_\r\n\r\nHi,\r\n\r\nWhen the folder name it the GitHub repo was changed from \u201c\u2764\ufe0f\u201d to \u201cLike\u201d the json file was also changed in error, specifically the token symbol was changed from \u201c\u2764\ufe0f\u201d to \u201cLIKE\u201d.  This token symbol change was an error and results in the token symbol now being inconsistent across chains, please revert the token symbol back to \u201c\u2764\ufe0f\u201d", "CLOSED", 0, "ENSpunks", "2024-04-06T08:58:46Z", "2024-04-06T09:03:31Z", "2024-04-06T09:03:31Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 10:51:36"]
["I_kwDOH2Qg5s6E4eVU", 291, "Transaction gas fee cap increase", "# Rationale\r\n\r\nAs L2s gain more attention so does competing with gas fee. Have been limited multiple times by the 1 eth gas fee cap on 'eth_sendRawTransaction' . \r\n\r\n# Implementation\r\n\r\nRemove 1 eth gas fee cap on transactions or allow clients to run custom gas fee caps if possible.", "OPEN", 0, "hotsinglegirl", "2024-04-06T20:25:12Z", "2024-04-06T20:25:12Z", null, "ethereum-optimism/op-geth", "2025-08-30 10:51:37"]
["I_kwDOH2Qg5s6EyeOp", 288, "Simulator \"Stopping work on payload\" / reason=timeout", "#### System information\r\nop-geth `v1.101309.0-rc.2` / `v1.101311.0-rc.1` (tried both)\r\n\r\n#### Expected behaviour\r\nIn our tests we use the simulator extensively. We recently switched from go-ethereum to op-geth and use `ethclient/simulated` for our tests. Sometimes the simulator stops producing blocks. Expected behaviour is that the simulator keeps on producing blocks.\r\n\r\n#### Actual behaviour\r\n```\r\nINFO [04-04|21:52:39.246] Updated payload                          id=0xe46277cf3367acf8 number=3  hash=dcd614..2d9e0b txs=0  withdrawals=0 gas=0         fees=0           root=6aee59..2c44e7 elapsed=\"177.504\u00b5s\"\r\nINFO [04-04|21:52:39.246] Imported new potential chain segment     number=3  hash=dcd614..2d9e0b blocks=1 txs=0  mgas=0.000 elapsed=\"360.978\u00b5s\" mgasps=0.000   snapdiffs=883.00B triedirty=5.22KiB\r\nINFO [04-04|21:52:39.247] Chain head was updated                   number=3  hash=dcd614..2d9e0b root=6aee59..2c44e7 elapsed=\"130.876\u00b5s\"\r\nINFO [04-04|21:52:39.247] Starting work on payload                 id=0xdd8c77b2883e5d28\r\nINFO [04-04|21:52:39.247] Stopping work on payload                 id=0xe46277cf3367acf8 reason=delivery elapsed=1\r\nINFO [04-04|21:52:39.248] Updated payload                          id=0xdd8c77b2883e5d28 number=4  hash=4c7c64..40aeaf txs=0  withdrawals=0 gas=0         fees=0           root=6aee59..2c44e7 elapsed=\"301.266\u00b5s\"\r\nINFO [04-04|21:52:39.248] Stopping work on payload                 id=0xdd8c77b2883e5d28 reason=delivery elapsed=0\r\nINFO [04-04|21:52:39.248] Imported new potential chain segment     number=4  hash=4c7c64..40aeaf blocks=1 txs=0  mgas=0.000 elapsed=\"405.762\u00b5s\" mgasps=0.000   snapdiffs=883.00B triedirty=5.22KiB\r\nINFO [04-04|21:52:39.249] Chain head was updated                   number=4  hash=4c7c64..40aeaf root=6aee59..2c44e7 elapsed=\"135.325\u00b5s\"\r\nINFO [04-04|21:52:39.249] Starting work on payload                 id=0x2fa44f85b982dd71\r\nINFO [04-04|21:52:39.250] Updated payload                          id=0x2fa44f85b982dd71 number=5  hash=999578..16833f txs=0  withdrawals=0 gas=0         fees=0           root=6aee59..2c44e7 elapsed=\"593.405\u00b5s\"\r\nINFO [04-04|21:52:39.250] Stopping work on payload                 id=0x2fa44f85b982dd71 reason=delivery elapsed=0\r\nINFO [04-04|21:52:39.251] Imported new potential chain segment     number=5  hash=999578..16833f blocks=1 txs=0  mgas=0.000 elapsed=\"[379](https://github.com/river-build/river-stage/actions/runs/8561748914/job/23463630134?pr=313#step:21:380).173\u00b5s\" mgasps=0.000   snapdiffs=883.00B triedirty=5.22KiB\r\nINFO [04-04|21:52:39.251] Chain head was updated                   number=5  hash=999578..16833f root=6aee59..2c44e7 elapsed=\"172.354\u00b5s\"\r\nINFO [04-04|21:52:39.252] Starting work on payload                 id=0xa278c1b3f9bf98f0\r\nINFO [04-04|21:52:39.253] Updated payload                          id=0xa278c1b3f9bf98f0 number=6  hash=9a424e..2a8fdd txs=0  withdrawals=0 gas=0         fees=0           root=6aee59..2c44e7 elapsed=\"132.99\u00b5s\"\r\nINFO [04-04|21:52:41.253] Stopping work on payload                 id=0xa278c1b3f9bf98f0 reason=timeout  elapsed=2000\r\npanic: test timed out after 20m0s\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\nUse the `ethclient/simulated.Backend` and commit blocks from tests.\r\n\r\n#### Backtrace\r\n```\r\ngoroutine 602 [sync.Cond.Wait, 19 minutes]:\r\nsync.runtime_notifyListWait(0xc000523c50, 0x0)\r\n\t/opt/hostedtoolcache/go/1.21.8/x64/src/runtime/sema.go:527 +0x159\r\nsync.(*Cond).Wait(0xc000523c40)\r\n\t/opt/hostedtoolcache/go/1.21.8/x64/src/sync/cond.go:70 +0x76\r\ngithub.com/ethereum/go-ethereum/miner.(*Payload).WaitFull(0xc0008a9580)\r\n\t/home/runner/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101309.0-rc.2/miner/payload_building.go:188 +0xa8\r\ngithub.com/ethereum/go-ethereum/eth/catalyst.(*payloadQueue).waitFull(0xc0001d5320, {0xa2, 0x78, 0xc1, 0xb3, 0xf9, 0xbf, 0x98, 0xf0})\r\n\t/home/runner/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101309.0-rc.2/eth/catalyst/queue.go:106 +0x2d0\r\ngithub.com/ethereum/go-ethereum/eth/catalyst.(*SimulatedBeacon).sealBlock(0xc0009b6790, {0x429f620, 0x0, 0x0}, 0x660f2127)\r\n\t/home/runner/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101309.0-rc.2/eth/catalyst/simulated_beacon.go:171 +0x74b\r\ngithub.com/ethereum/go-ethereum/eth/catalyst.(*SimulatedBeacon).Commit(0xc0009b6790)\r\n\t/home/runner/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101309.0-rc.2/eth/catalyst/simulated_beacon.go:251 +0x205\r\ngithub.com/ethereum/go-ethereum/ethclient/simulated.(*Backend).Commit(...)\r\n\t/home/runner/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101309.0-rc.2/ethclient/simulated/backend.go:183\r\n```\r\n\r\n", "OPEN", 0, "bas-vk", "2024-04-05T11:38:39Z", "2024-04-05T14:13:52Z", null, "ethereum-optimism/op-geth", "2025-08-30 10:51:37"]
["I_kwDOH2Qg5s6EVNHQ", 280, "Net_version returning testnet network id rather than mainnet", "#### System information\r\n\r\nGeth version: op-geth-1.101308.2\r\nCL client & version: Prysm (v5.0.1) / Teku (24.3.0)\r\nOS & Version: Linux (Rocky 9)\r\n\r\n#### Expected behaviour\r\n\r\nAttempting to migrate our L1 node from one box to another, repointing Optimism. Both L1's are fully synced.\r\n\r\nPrevious node: Erigon + Teku\r\nNew node: Erigon + Prysm\r\n\r\nAs part of the upgrade I changed the \r\n\r\nFollowing the migration, my net_version RPC calls return 420 rather than 10. Despite the logs indicating we are initialising network=10 as per below. Both L1s are on mainnet.\r\n\r\n\r\n#### Backtrace\r\n\r\n```\r\n Initialising Ethereum protocol           network=10         dbversion=8\r\n```\r\n\r\n```\r\ncurl localhost:8645   -X POST   -H \"Content-Type: application/json\"   --data '{\"jsonrpc\":\"2.0\",\"method\":\"net_version\",\"params\":[],\"id\":67}'\r\n{\"jsonrpc\":\"2.0\",\"id\":67,\"result\":\"420\"}\r\n```\r\n\r\nCommands being run:\r\n\r\n```\r\n./op-node --l1=http://15.235.114.217:8545 --l2=http://0.0.0.0:8551 --l1.beacon=http://15.235.114.217:3500 --network=mainnet --rpc.addr=0.0.0.0 --rpc.port=9545 --l2.jwt-secret=/optimism/jwt.hex --l1.trustrpc --network=op-mainnet --rollup.load-protocol-versions=true --rollup.halt=none --l1.rpckind=erigon\r\n\r\n./geth --datadir /optimism/geth --http --http.corsdomain=* --http.vhosts=* --http.addr=0.0.0.0 --http.port=8645 --http.api=web3,debug,eth,txpool,net,engine --ws --ws.addr=0.0.0.0 --ws.port=8646 --ws.origins=* --ws.api=debug,eth,txpool,net,engine,web3 --syncmode=full --gcmode=full --nodiscover --maxpeers=0 --networkid=420 --authrpc.vhosts=* --authrpc.addr=0.0.0.0 --authrpc.port=8551 --authrpc.jwtsecret=/optimism/jwt.hex --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io/ --rollup.disabletxpoolgossip=true --rollup.halt=major --op-network=op-mainnet\r\n\r\n```\r\n", "CLOSED", 0, "angusscott", "2024-04-02T10:34:10Z", "2024-04-02T15:24:04Z", "2024-04-02T15:23:48Z", "ethereum-optimism/op-geth", "2025-08-30 10:51:37"]
["I_kwDOJ_r-bs6EXLVy", 156, "validation: Allow submissionInterval check for older contract versions", "              The deployed version is a valid ABI (it corresponds to the ABI at tag `op-contracts/v1.0.0`), so our checks should be updated to support it\r\n\r\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/superchain-registry/pull/107#discussion_r1546864145_\r\n            ", "CLOSED", 0, "geoknee", "2024-04-02T14:24:46Z", "2024-04-03T12:15:02Z", "2024-04-03T12:15:02Z", "ethereum-optimism/superchain-registry", "2025-08-30 10:52:00"]
["I_kwDOJ_r-bs6D1dqd", 147, "Resolve confusion about sepolia superchain semver.yaml entries", "About the optimism portal desired version.  Something strange going on here. The proxy contract for this contract on op sepolia is [here](https://sepolia.etherscan.io/address/0x58Cc85b8D04EA49cC6DBd3CbFFd00B4B8D6cb3ef#readProxyContract), and if you \"read as proxy\" you get 2.3.0. But if you click through to the implementation contract [here](https://sepolia.etherscan.io/address/0xdaf83496d1e2bf53eb60f29ca141189118db1b0a#readContract) and \"read\" you get 1.5.1.", "CLOSED", 0, "geoknee", "2024-03-27T20:20:45Z", "2024-04-02T11:43:52Z", "2024-03-27T20:49:55Z", "ethereum-optimism/superchain-registry", "2025-08-30 10:52:00"]
["I_kwDODjvEJM54gR1w", 8397, "Switch formatter from prettier to biome", "## Description\r\n\r\nThis task is an easy good first issue to replace prettier formatting for JavaScript files with biome.\r\n\r\n- [Biome is 25x faster than prettier](https://github.com/biomejs/biome/tree/main/benchmark#formatting) \r\n- [They recently reached the ability to be pretty prettier equivelent passing over 95% of the prettier test suite](https://prettier.io/blog/2023/11/27/20k-bounty-was-claimed)\r\n\r\nAn example of using biome can be found [here](https://github.com/wevm/viem/blob/main/biome.json#L25)\r\n\r\nNote: This does not include linting! Though we may switch to biome for linting in future for now we don't want to because it will not have many of the linting rules we currently have turned on via eslint. We only want to use biome format as a prettier replacement\r\n\r\n## Tasks\r\n\r\n- [ ] Add biome\r\n- [ ] Remove prettier\r\n- [ ] Configure biome so it is maximally equivalent to existing prettier formatting. Create smallest diff possible in the actual source code", "CLOSED", 0, "roninjin10", "2023-12-01T23:29:45Z", "2024-04-05T07:42:50Z", "2024-04-05T07:42:50Z", "ethereum-optimism/optimism", "2025-08-30 10:52:23"]
["I_kwDODjvEJM5sSvXB", 6410, "[Feature] Keep Horizontal scaling using docker-compose", "### Behaviour obtained\r\n\r\nCan't start with new bedrock ops multiples nodes connected with custom L1+L2 using \"deploy\" key from docker compose\r\n\r\n### Behaviour expected\r\n\r\nCan start with new bedrock ops multiples nodes connected with custom L1+L2 using \"deploy\" key from docker compose\r\n\r\n\r\n#### Notes\r\nBefore bedrock update exists \"replica\" as a different container to allow create multiples nodes connecting to your own L2+L1.\r\nNow the docker configuration just include configuration for l1,l2,\"deployer\" as python script, batcher, proposer op-node and stateviz\r\n\r\nmaybe im missunderstanding something, if i want to generate my 10 deploy(docker funtionality) of \"replica\" old container with new bedrock update, why we are not maintaining this kind of \"docker-compose files\" ?\r\n\r\ni mean, instead of using just this guide https://stack.optimism.io/docs/build/getting-started/#initialize-op-geth\r\nwe can have something like \r\n\r\n```\r\n# /ops-bedrock/docker-compose.l2-nodes.yml\r\nservices:\r\nop-node:\r\n  deploy:\r\n      replicas: 10\r\n  # all node config\r\nop-geth:\r\n  deploy:\r\n      replicas: 10\r\n  # all geth config\r\n```\r\n\r\n:pray: as QA , i think we will want to create strange scenarios to improve productivity.\r\n", "CLOSED", 0, "netzulo", "2023-07-22T18:15:38Z", "2024-04-07T14:46:11Z", "2023-07-27T04:48:18Z", "ethereum-optimism/optimism", "2025-08-30 10:52:23"]
["I_kwDOKIwiaM6Fem8O", 632, "[DOCS] Link on chain identity EAS JavaScript SDK does not work", "On\r\n[https://docs.optimism.io/chain/identity/contracts-eas](url)\r\nJavaScript SDK leads to\r\n[https://docs.attest.org/docs/getting--started/javascript](url)\r\nPage Not Found", "CLOSED", 0, "AtsKotzen", "2024-04-12T08:29:25Z", "2024-04-12T20:42:25Z", "2024-04-12T20:42:25Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM6E7OjT", 626, "[DOCS] link on home page does not work", "On\nhttps://docs.optimism.io/\n\nDeveloper tooling link leads to https://docs.optimism.io/builders/tools/build/overview\n\nInternal Server Error", "CLOSED", 0, "Pfed-prog", "2024-04-08T02:16:31Z", "2024-04-12T20:42:25Z", "2024-04-12T20:42:25Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM6E29Kj", 625, "[DOCS] Devnet: Incorrect Link for L1 Contract Addresses in \"Additional\" section", "In the documentation found at https://docs.optimism.io/chain/testing/dev-node#additional-info, the link provided for \"The monorepo includes the L1 contract addresses\" does not contain the information about L1 contracts. Perhaps the linked resource should resemble something like https://docs.optimism.io/chain/addresses, which lists L1 contracts. \r\n\r\n**It's important to note that while there is a mismatch, the linked resource remains valuable. We should include additional clarification while retaining the original link source.**\r\n\r\nCould someone please verify and update the link to the correct resource? Thank you.", "CLOSED", 0, "opfocus", "2024-04-06T01:01:05Z", "2024-04-12T20:42:25Z", "2024-04-12T20:42:24Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM6E2HO3", 623, "[DOCS] Docs Multilingual Support", "I've been exploring the OP Stack documentation and have found it to be exceptionally informative, with tutorials that are easy to navigate. I believe that extending support to include additional languages would benefit a broader audience. Are there any plans for multilingual documentation? If so, I would be eager to contribute to Chinese translations for tutorials, such as the one on creating an L2 rollup (https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup)\r\n\r\nThank you!", "CLOSED", 0, "22Xy", "2024-04-05T20:41:41Z", "2024-04-12T20:30:28Z", "2024-04-12T20:30:28Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM6Enuhv", 621, "[DOCS] Add PR title", "<!-- please fill out the following the best to your ability and properly label the issue -->\n\n## Brief Description of the Docs Request\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\n\n## Description of the Documentation You'd Like\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\n\n## Links to Related Pages\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\n\n## Additional Context\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?", "CLOSED", 0, "Sade28", "2024-04-04T09:45:19Z", "2024-04-08T21:37:02Z", "2024-04-08T21:37:02Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM6C3ZWx", 583, "Clarifying When OP-Geth Initialization is Necessary", "In the documentation section titled \"Configuring OP-Geth\" at https://docs.optimism.io/builders/node-operators/management/configuration#configuring-op-geth, it is stated, \"As a result, it stores its state in a database that requires initialization. Initialization is done one of two ways, depending on which network you're deploying.\" This outlines the necessity of OP-Geth initialization and briefly discusses the process.\r\n\r\nHowever, in the tutorials for Node Operators on both the mainnet (https://docs.optimism.io/builders/node-operators/tutorials/mainnet#start-op-geth) and testnet (https://docs.optimism.io/builders/node-operators/tutorials/testnet#start-op-geth), there is no mention of the OP-Geth initialization process.\r\n\r\nAdditionally, \"Snapshots\" section (https://docs.optimism.io/builders/node-operators/management/snapshots)\uff0c it is stated \u201cData directories and node snapshots are not required for nodes using snap sync but are still required for archive nodes and in instances when you need to trace the entire chain.\u201d\u3002\r\nFurthermore,  regarding snap sync in the \"Snap Sync\" section (https://docs.optimism.io/builders/node-operators/management/snap-sync) \u3002the option to enable snap sync provides insights into the necessity of data directories, particularly in Option 3, which appears to require a data directory, albeit without explicit mention.\r\n\r\nIssues:\r\n\r\nThe direct correlation between the necessity of data directories and OP-Geth initialization is unclear.\r\nDocumentation lacks coherence and fails to provide consistent guidance across different sections\u3002\r\n\r\nRecommendations:\r\n\r\nClarify the relationship between data directories and OP-Geth initialization to enhance understanding for Node Operators. This could involve explicitly stating the conditions under which OP-Geth initialization is required.\r\nImprove documentation coherence by linking relevant sections across tutorials and management guides. This could involve adding links within tutorials to pertinent sections discussing OP-Geth initialization and data directories. ", "CLOSED", 0, "opfocus", "2024-03-19T17:26:49Z", "2024-04-11T19:17:28Z", "2024-04-11T19:17:28Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM6CN7dK", 564, "[feature request]  make node tutorials customizable", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nGive node operators selector options to spin up a custom node tutorial:\r\n\r\n- OP Mainnet vs OP Testnet\r\n- full vs archive node\r\n- if archive, do you want legacy execution?\r\n- etc.\r\n\r\nThese inputs will spit out one tutorial with the necessary steps.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\n- This feature will simplify node operator steps, so they only get the information they need for their setup\r\n- Make the components of the tutorial modular which makes updating the docs simpler because its one place to make changes\r\n\r\n## Links to Related Pages\r\n\r\n- https://docs.optimism.io/builders/node-operators/tutorials/node-from-source\r\n- https://docs.optimism.io/builders/node-operators/tutorials/mainnet\r\n- https://docs.optimism.io/builders/node-operators/tutorials/testnet\r\n\r\n## Additional Context\r\n\r\nFeedback from Kev and engineering\r\n", "CLOSED", 0, "sbvegan", "2024-03-13T18:55:54Z", "2024-04-13T21:03:09Z", "2024-04-13T21:03:08Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM6B8M9A", 556, "[TUTORIAL] Add a grafana + prometheus dashboard for node and chain operators", "### Tutorial title\n\nAdd a grafana + prometheus dashboard for node and chain operators\n\n### Tutorial description\n\ndashboard for monitoring\n\n### Tutorial tags\n\nnodes, chains\n\n### Skill level\n\nAdvanced\n\n### Hosted on Optimism.io or hosted elsewhere?\n\nHosted on optimism.io\n\n### For tutorials to be hosted on Optimism.io: Tutorial Content\n\n_No response_\n\n### For tutorials hosted elsewhere: URL to tutorial\n\n_No response_\n\n### Additional context\n\n_No response_", "CLOSED", 0, "sbvegan", "2024-03-11T19:28:58Z", "2024-04-13T20:58:24Z", "2024-04-13T20:58:24Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM57Pjqo", 378, "[DOCS] add unclean shutdown + database corruption to the node troubleshooting docs", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nAddition to the node troubleshooting page.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nIf `op-geth` isn't given ample time to gracefully shutdown, it can cause database corruption. This will break the node. To fix the issue, you have to delete the database and resync.\r\n\r\n## Links to Related Pages\r\n\r\n- https://docs.optimism.io/builders/node-operators/management/troubleshooting\r\n\r\n## Additional Context\r\n\r\nThis is a common developer support issue\r\n", "CLOSED", 0, "sbvegan", "2024-01-05T16:42:45Z", "2024-04-11T21:52:23Z", "2024-04-11T21:52:23Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOKIwiaM5xtURp", 20, "[AUDIT] troubleshooting guide/centralized exchanges", "guides/centralized exchanges \u2014 add troubleshooting guide with binance stuff, depositing to unsupported network", "CLOSED", 0, "cpengilly", "2023-09-19T23:15:23Z", "2024-04-08T21:40:00Z", "2024-04-08T21:40:00Z", "ethereum-optimism/docs", "2025-08-30 10:54:14"]
["I_kwDOH2Qg5s6FMWNb", 295, "Why can't I have my own payment directly (usdc) 0xf896f18fa3c62f5288d6010b597d80a2a6479a1e", "This should only be used in very rare cases e.g. if you are not 100% sure if something is a bug or asking a question that leads to improving the documentation. For general questions please use [discord](https://discord.gg/nthXNEv) or the Ethereum stack exchange at https://ethereum.stackexchange.com.", "CLOSED", 0, "Shednandezstore", "2024-04-10T02:00:51Z", "2024-04-10T02:01:06Z", "2024-04-10T02:01:06Z", "ethereum-optimism/op-geth", "2025-08-30 10:54:17"]
["I_kwDOH2Qg5s6FBJjs", 292, "Consider adding `opstack` key-values to op-geth discovery", "This may make it easier for op-geth/opstack EL nodes to find each other. We have something like this on the [op-node](https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/rollup-node-p2p.md#structure)\r\n", "OPEN", 0, "trianglesphere", "2024-04-08T16:45:58Z", "2024-04-08T16:45:58Z", null, "ethereum-optimism/op-geth", "2025-08-30 10:54:17"]
["I_kwDODjvEJM6FV3JM", 10113, "Project: optimism to the warpcast ", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [X] I have added the team label for this project (CH, TH, Contributions).\n- [X] I have added the timeline for this project to the issue.", "CLOSED", 0, "farzin146", "2024-04-11T07:34:21Z", "2024-04-11T15:14:07Z", "2024-04-11T15:14:07Z", "ethereum-optimism/optimism", "2025-08-30 10:54:40"]
["I_kwDODjvEJM6FOd8x", 10095, "Deploy the L1 contracts occurs: error code -32000: max priority fee per gas higher than max fee per gas", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nOccurs when deploying L1 contracts:\r\n```\r\nError: \r\nFailed to send transaction\r\n\r\nContext:\r\n- server returned an error response: error code -32000: max priority fee per gas higher than max fee per gas\r\n```\r\n**Steps to Reproduce**\r\n\r\n1. Follow the guide to deploy an L2 chain with Sepolia as the L1: [Creating Your Own L2 Rollup Testnet](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#deploy-the-l1-contracts)\r\n2. Unable to deploy the contract to L1 when the step 'Deploy the L1 contracts' is executed.\r\n\r\n**Expected behavior**\r\nNot sure which of my getting-start.json configurations is at fault.\r\n\r\n**Environment Information:**\r\n - Operating System: AWS Linux 2023\r\n - Package Version (or commit hash): optimism v1.7.2\r\n ```\r\n Dependency | Minimum         | Actual\r\ngit          2                2.40.1\r\ngo           1.21             1.21.5\r\nnode         20               20.11.1\r\npnpm         8                8.14.0\r\nfoundry      0.2.0 (a5efe4f)  0.2.0 (4603195)\r\nmake         3                4.3\r\njq           1.6              1.6\r\ndirenv       2                2.34.0\r\n```\r\n\r\n**Configurations:**\r\nRefer to `sepolia.json` for other configurations, I've only listed the gas related configurations.\r\n```\r\n{\r\n  \"finalSystemOwner\": \"0xxxx\",\r\n  \"superchainConfigGuardian\": \"0xxxx\",\r\n  \"l1StartingBlockTag\": \"0xd9943312c4ebd63abcfa0533c371b8d535cc3dd3eb4159f5389d8b20679b9557\",\r\n  ...\r\n  \"gasPriceOracleOverhead\": 2100,\r\n  \"gasPriceOracleScalar\": 1000000,\r\n\r\n  \"eip1559Denominator\": 50,\r\n  \"eip1559DenominatorCanyon\": 250,\r\n  \"eip1559Elasticity\": 6,\r\n  ...\r\n```\r\n\r\n**Logs:**\r\n```\r\n$ forge script scripts/Deploy.s.sol:Deploy --private-key $GS_ADMIN_PRIVATE_KEY --broadcast --rpc-url $L1_RPC_URL --slow\r\n[\u2812] Compiling...\r\nNo files changed, compilation skipped\r\nScript ran successfully.\r\n\r\n== Logs ==\r\n  Writing artifact to /home/ec2-user/op/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy\r\n  Connected to network with chainid 11155111\r\n  DeployConfig: reading file /home/ec2-user/op/optimism/packages/contracts-bedrock/deploy-config/getting-started.json\r\n  Deploying a fresh OP Stack including SuperchainConfig\r\n  Deploying Safe\r\n  ...\r\n  Running chain assertions on the DelayedWETH\r\n\r\n## Setting up 1 EVM.\r\n\r\n==========================\r\n\r\nChain 11155111\r\n\r\nEstimated gas price: 0.001137278 gwei\r\n\r\nEstimated total gas used for script: 68784315\r\n\r\nEstimated amount required: 0.00007822688819457 ETH\r\n\r\n==========================\r\n##\r\nSending transactions [0 - 0].\r\n\r\nTransactions saved to: /home/ec2-user/op/optimism/packages/contracts-bedrock/broadcast/Deploy.s.sol/11155111/run-latest.json\r\n\r\nSensitive values saved to: /home/ec2-user/op/optimism/packages/contracts-bedrock/cache/Deploy.s.sol/11155111/run-latest.json\r\n\r\nError: \r\nFailed to send transaction\r\n\r\nContext:\r\n- server returned an error response: error code -32000: max priority fee per gas higher than max fee per gas\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "420516460", "2024-04-10T09:37:40Z", "2024-04-11T07:48:09Z", "2024-04-11T03:53:36Z", "ethereum-optimism/optimism", "2025-08-30 10:54:40"]
["I_kwDODjvEJM5oXV90", 5983, "CrossChainMessenger: Support multiple withdrawals", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nThe CrossChainMessenger is [known to not support multiple withdrawals](https://github.com/ethereum-optimism/optimism/blob/develop/packages/sdk/src/cross-chain-messenger.ts#L432). This creates a problem for use cases like Bridges that often do have these sorts of L2 transactions containing multiple withdrawals.\r\n\r\n**To Reproduce**\r\nExample [L2 txn](https://optimistic.etherscan.io/tx/0xd73f0cdf499830f2919f3009cee35611abf5a01842c4eed0e8c2493a00969a5b)\r\n\r\n**Expected behavior**\r\n```\r\nError: multiple withdrawals found in receipt\r\n    at CrossChainMessenger.toLowLevelMessage (/Users/nicholaspai/UMA/relayer-v2/node_modules/@eth-optimism/sdk/src/cross-chain-messenger.ts:439:15)\r\n    at runMicrotasks (<anonymous>)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async CrossChainMessenger.getMessageStatus (/Users/nicholaspai/UMA/relayer-v2/node_modules/@eth-optimism/sdk/src/cross-chain-messenger.ts:668:30)\r\n```\r\n\r\n**System Specs:**\r\n - Package Version (or commit hash): `\"@eth-optimism/sdk\": \"^2.1.0\"`\r\n", "CLOSED", 0, "nicholaspai", "2023-06-10T12:24:29Z", "2024-04-11T07:07:42Z", "2023-06-29T23:41:19Z", "ethereum-optimism/optimism", "2025-08-30 10:54:40"]
["I_kwDOJ_r-bs6EJseS", 149, "Support admin and service roles in add-standard-chain.sh", "The automation in [add-standrd-chain.sh](https://github.com/ethereum-optimism/superchain-registry/blob/77a930120ec63dd50c43483c82b1a0a29939ed27/scripts/add-standard-chain.sh#L62) does not automatically add the following roles to the json file:\r\n\r\n```\r\n  \"ProxyAdminOwner\": \"\",\r\n  \"SystemConfigOwner\": \"\",\r\n  \"Guardian\": \"\",\r\n  \"Challenger\": \"\"\r\n```\r\n\r\nAs a result, people get the following errors: https://app.circleci.com/pipelines/github/ethereum-optimism/superchain-registry/1687/workflows/6b7258c4-deeb-499e-8f67-b7a6ef65ea58/jobs/5174?invite=true#step-102-4143_0\r\n\r\nadd-standard-chain.sh should be extended to automatically add these roles", "CLOSED", 0, "zchn", "2024-03-31T18:46:22Z", "2024-04-12T18:43:50Z", "2024-04-12T18:43:50Z", "ethereum-optimism/superchain-registry", "2025-08-30 10:54:42"]
["I_kwDOLB-lzc6E7UIN", 114, "Research Area: Using L2 Native Token to Pay Gas", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n### Enabling a L2 Native ERC20 Token to Pay for Gas\r\n\r\nThis is an experimental feature and it is not clear if it will ever be included in the OP Stack.\r\nWhen considering the possibility of using an L2 native ERC20 token to pay for gas, the design constraint\r\nis no diff to the execution layer client. The legacy design of Optimism modified the execution client\r\nsuch that an ERC20 WETH was used as the native asset. This resulted in a [critical bug][saurik-bug]\r\nthat would have allowed infinite minting of `ether` via `selfdestruct`.\r\n\r\n[saurik-bug]: https://x.com/saurik/status/1491821215924690950\r\n\r\nIt may still be possible to use a L2 native ERC20 token to pay for gas given this constraint. The\r\ndesign could involve modifying the derivation pipeline to accept the previous L2 block's outputs instead\r\nof just the next set of inputs. This would make it more similar to the design of Ethereum's state transition\r\nfunction.\r\n\r\nA simplified design of the Ecotone system:\r\n\r\n(mathjax doesn't render on github but does for mdbook, preserved to enable easy copy/paste)\r\n\r\n\\\\( L2\\\\_inputs_i = derive(L1\\\\_data_i) \\\\)\r\n\r\n\\\\( L2\\\\_outputs_i = state\\\\_transition\\\\_function(L2\\\\_inputs_i) \\\\)\r\n\r\nWhere \\\\( L1\\\\_data_i \\\\) represents a chunk of L1 data containing L2 batches.\r\n\r\nEthereum State Transition Function:\r\n\r\n\\\\( \u03c3\\_{t+1} \u2261 \u03a5(\u03c3\\_t, T) \\\\)\r\n\r\nWhere \\\\( \u03a5 \\\\) is the state transition function, \\\\( \u03c3 )\\\\ is the state at a particular block and \\\\( T )\\\\\r\nis the next set of transactions to execute, also known as a block. This is taken directly from the\r\n[yellow-paper][yellow-paper].\r\n\r\n[yellow-paper]: https://ethereum.github.io/yellowpaper/paper.pdf\r\n\r\nPossible future design of Derivation Pipeline:\r\n\r\n\\\\( L2\\\\_inputs_i = derive(L1\\\\_data_i, L2\\\\_outputs\\_{i-1}) \\\\)\r\n\r\n\\\\( L2\\\\_outputs_i = state\\\\_transition\\\\_function(L2\\\\_inputs_i) \\\\)\r\n\r\nThis would enable a design where the derivation pipeline can be aware of mint events from a particular predeploy.\r\nThe predeploy could represent an ERC20 wrapped version of the native asset and contain wrapping/unwrapping logic.\r\nThe unwrapping logic would result in a future L2 block containing a deposit transaction that mints the native asset.\r\nThe wrapping logic would be provably burning the native asset on chain and minting an ERC20 representation of the asset.\r\nFurther work needs to be done to determine if such a design is desirable. A version byte in the storage slot meant\r\nto hold the custom gas token address could be used to make the layer the custom gas token is native on.", "OPEN", 0, "tynes", "2024-04-08T02:43:58Z", "2024-04-08T02:43:58Z", null, "ethereum-optimism/specs", "2025-08-30 10:55:00"]
["I_kwDOKIwiaM6DLsqQ", 598, "[DOCS] add the OP Sepolia to Sepolia withdrawal time", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nPost fault proofs the withdrawal period is longer, but how long is it? hmmmm\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nupdate the testnet withdrawal time\r\n\r\n## Links to Related Pages\r\n\r\n- https://docs.optimism.io/builders/app-developers/bridging/messaging#for-l2-to-l1-transactions\r\n- honestly there is probably more, we just need to go through all the bridging pages to check\r\n\r\n## Additional Context\r\n\r\n- might be a good opportunity for some content reuse refactoring\r\n", "CLOSED", 0, "sbvegan", "2024-03-21T18:26:11Z", "2024-04-20T21:12:44Z", "2024-04-20T21:12:44Z", "ethereum-optimism/docs", "2025-08-30 10:56:54"]
["I_kwDOKIwiaM5_Xzzx", 490, "Suggest an FAQ item page in Github", "### FAQ Category\r\n\r\nRevise an existing faq item\r\n\r\n### What page will this FAQ item live?\r\n\r\nhttps://github.com/ethereum-optimism/docs/issues/new?assignees=&labels=documentation%2Cfaq%2Ccommunity-request&projects=&template=suggest_faq_item.yaml&title=Suggest+an+FAQ+item\r\n\r\n### write the question from a developer's perspective\r\n\r\nBefore submitting this suggestion, be sure to read our expectations for [FAQ content](https://docs.optimism.io/contribute/style-guide#faqs).\r\nFor an example FAQ guide with question+answer pairs, see [Security Model FAQ](https://docs.optimism.io/security/faq#security-model-faq).\r\n\r\n### answer the question identified above as best as possible\r\n\r\nBefore submitting this suggestion, be sure to read our expectations for [FAQ content](https://docs.optimism.io/connect/contribute/style-guide).\r\nFor an example FAQ guide with question+answer pairs, see [Security Model FAQ](https://docs.optimism.io/chain/security/faq#security-model-faq).\r\n\r\n### Additional context\r\n\r\nbroken links", "CLOSED", 0, "noobmanog", "2024-02-15T16:23:16Z", "2024-04-19T17:04:41Z", "2024-04-19T17:04:41Z", "ethereum-optimism/docs", "2025-08-30 10:56:54"]
["I_kwDOKIwiaM56QXa_", 344, "[DOCS] Add call out to the audited versions of our contracts", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nLets call out what version of our smart contracts are deployed and audited.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd a callout or table to the smart contracts section to highlight what versions are audited/deployed.\r\n\r\n## Links to Related Pages\r\n\r\n- [Smart Contract Overview](https://docs.optimism.io/stack/protocol/smart-contracts)\r\n\r\n## Additional Context\r\n\r\n\r\n", "CLOSED", 0, "sbvegan", "2023-12-20T18:58:57Z", "2024-04-20T20:41:44Z", "2024-04-20T20:41:44Z", "ethereum-optimism/docs", "2025-08-30 10:56:54"]
["I_kwDOKIwiaM54-wSX", 268, "[DOCS] Ship set of chain op migration guides", "ship set of chain operator guides outlining easy migration path from one chain to another\r\n - make it easier for devs who have already deployed on other chains to deploy on OP Mainnet\r\n - goals is to reduce the time, cost, and friction for deploying and running OP Chains", "CLOSED", 0, "cpengilly", "2023-12-07T02:01:30Z", "2024-04-20T21:41:26Z", "2024-04-20T21:41:26Z", "ethereum-optimism/docs", "2025-08-30 10:56:54"]
["I_kwDOKIwiaM53pGFw", 202, "[AUDIT] Update getting started op-mainnet", "[Getting Started with OP Mainnet](https://docs.optimism.io/chain/getting-started) could be more educational, or perhaps could be split into two documents:\r\n- one that explains what OP Mainnet is and \r\n- another that acts like a getting started guide. Right now it immediately jumps into getting started without doing any exposition.\r\n\r\n**WORK IN PROGRESS. STILL SCOPING THIS ISSUE.**", "CLOSED", 0, "cpengilly", "2023-11-22T23:52:31Z", "2024-04-19T18:08:32Z", "2024-04-19T18:08:32Z", "ethereum-optimism/docs", "2025-08-30 10:56:54"]
["I_kwDOLB-lzc6F34Bn", 129, "docs: update predeploy section with latest predeploys", "Seems https://specs.optimism.io/protocol/predeploys.html does not contain all predeploys like Multicall3 and SafeSingletonFactory\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/develop/op-bindings/predeploys/addresses.go#L9-L38", "CLOSED", 0, "emilianobonassi", "2024-04-16T13:09:18Z", "2024-04-16T14:14:20Z", "2024-04-16T14:14:20Z", "ethereum-optimism/specs", "2025-08-30 10:57:01"]
["I_kwDOLB-lzc6A-Yqd", 76, "Interop: Address Aliasing", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n# L2 to L2 Address Aliasing\r\n\r\n> \ud83d\udca1 tldr; no address aliasing is required for security, just an exposed \u201ccross domain sender\u201d and \u201cinitiating chain id\u201d. Its functionally the same as using aliasing but more simple\r\n\r\n\r\nAddress aliasing exists for L1 to L2 deposits because there is no guarantee that owner of the account on L1 is the owner of the account on L2. For EOAs, this is not an issue because the same keypair can generate signatures for both chains but for smart contracts, this is a valid concern. It prevents somebody from assuming the identity of a smart contract on L2 that they do not actually control.\r\n\r\nAliasing is built directly into the protocol via the `OptimismPortal`, see the code snippet below:\r\n\r\n```solidity\r\n// Transform the from-address to its alias if the caller is a contract.\r\naddress from = msg.sender;\r\nif (msg.sender != tx.origin) {\r\n  from = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\r\n}\r\n```\r\n\r\nThis is saying \u201cif the call comes from a smart contract, apply the alias\u201d. This results in the [DepositTx](https://github.com/ethereum-optimism/op-geth/blob/ef668c77e03f5401d2882bdfd51cbac8536aa4cd/core/types/deposit_tx.go#L29) having a an aliased `from` field. Contracts on L2 must unalias the `from` field if they want to know what the account of the sender is, meaning that they opt in to receiving messages from L1 contracts.\r\n\r\nThe same concept applies for L2 to L2 transactions - it is possible that the same account is owned by different entities between different L2s. A difference with the interop scheme is that the top level `transaction.from` on the executing message isn\u2019t necessarily the same entity that creates the initiating message. It is also the case that with our interop scheme the top level call will always be to the `CrossL2Inbox`. This may or may not go through the [`L2ToL2CrossDomainMessenger`](https://specs.optimism.io/interop/predeploys.html#l2tol2crossdomainmessenger) after the `CrossL2Inbox`. When a user wants to do auth, they need to call back to `L2ToL2CrossDomainMessenger` to get the sender of the initiating message. They will also need the chain id of the chain that initiated the message.\r\n\r\n### What Aliasing Could Look Like\r\n\r\n```solidity\r\nlibrary AddressAliasHelper {\r\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\r\n\r\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\r\n    /// the inbox to the msg.sender viewed in the L2\r\n    /// @param l1Address the address in the L1 that triggered the tx to L2\r\n    /// @return l2Address L2 address as viewed in msg.sender\r\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\r\n        unchecked {\r\n            l2Address = address(uint160(l1Address) + offset);\r\n        }\r\n    }\r\n\r\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\r\n    /// address in the L1 that submitted a tx to the inbox\r\n    /// @param l2Address L2 address as viewed in msg.sender\r\n    /// @return l1Address the address in the L1 that triggered the tx to L2\r\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\r\n        unchecked {\r\n            l1Address = address(uint160(l2Address) - offset);\r\n        }\r\n    }\r\n\r\n    function applyL2ToL2Alias(address localAddress) internal pure returns (address remoteAddress) {\r\n      unchecked {\r\n        remoteAddress = address(uint160(localAddress) + uint160(uint256(keccack(block.chainid))));\r\n      }\r\n    }\r\n\r\n    function undoL2ToL2Alias(address remoteAddress, uint256 remoteChainId) internal pure returns (address localAddress) {\r\n      unchecked {\r\n        localAddress = address(uint160(l1Address) - uint160(uint256(keccack(remoteChainId))));\r\n      }\r\n    }\r\n}\r\n```\r\n\r\nTo ensure that it is not possible to spoof having control of the identity of an account by controlling it on one of many possible domains, some unique information relevant to the chain must be used when aliasing. In the sample implementation, the `block.chainid` is used. This means that on the remote chain, there needs to be knowledge of the chain id of the initiating chain.\r\n\r\nThe executing message will never assume the identity via `msg.sender` or `tx.origin` since deposit transactions aren\u2019t used and the contract that is being called is at least 1 callframe deep.\r\n\r\nThis leads me to believe it is far more simple to not alias addresses and instead expose 2 pieces of information - the sender of the cross chain message and the chain id of the originating chain. Using the above address aliasing scheme requires the same information as the remote chain id is required to unalias the contract. Developers will be able to grasp the concept of asserting on sender + chainid more than asserting on unaliased address.\r\n\r\nOne upside of aliasing is that an aliased owned contract may not be obvious on which domain the owner resides until it is called once. It produces a completely unique account that commits to an account on a particular domain. Developers can build an aliasing scheme on top of the messenger if they so desire.\r\n\r\n### User Stories\r\n\r\nI am a smart contract developer that has a cross chain app. I have a single contract on OP Mainnet that owns a contract on Base. I want to ensure that only the contract on OP Mainnet can call permissioned functions on the contract on Base. Since there may exist other contracts on other chains that have the same address as my contract on OP Mainnet, I need to check 2 things. The address is correct and the originating domain is correct.\r\n\r\nI am a smart contract dev that has a cross chain app with a deterministically deployed contract across all chains. I can be sure that I own the account on all chains since it is deterministically deployed. I just need to check that the address is correct.", "CLOSED", 0, "tynes", "2024-03-01T17:14:28Z", "2024-04-15T20:23:02Z", "2024-04-15T20:15:05Z", "ethereum-optimism/specs", "2025-08-30 10:57:01"]
["I_kwDOKIwiaM6GTBN6", 642, "Withdrawal Flow Update", "I am reading the doc <https://docs.optimism.io/stack/protocol/withdrawal-flow>\n<https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/op-proposer/proposer/l2_output_submitter.go#L312-L320|proposes a new output> link point to an old version or the proposer code.\nthe new code is <https://github.com/ethereum-optimism/optimism/blob/4a3d3fb444f50bed6a6991785ea5634e0efa07a4/op-proposer/proposer/driver.go#L311|here>", "CLOSED", 0, "cpengilly", "2024-04-19T14:15:19Z", "2024-04-22T16:10:06Z", "2024-04-22T16:10:06Z", "ethereum-optimism/docs", "2025-08-30 11:59:05"]
["I_kwDOKIwiaM6GAJUT", 639, "Minor Spelling Error for \u201cSmart Contract Overview\u201d", "Minor spelling error: derviation \r\nIn L1 Contracts --> SystemConfig section", "CLOSED", 0, "Gregory100000", "2024-04-17T12:33:22Z", "2024-04-22T14:33:45Z", "2024-04-22T14:33:45Z", "ethereum-optimism/docs", "2025-08-30 11:59:05"]
["I_kwDOKIwiaM6EhLxA", 619, "[DOCS] OP Mainnet NFT Tools page needs an update", "The documentation states: \"This list was last updated early January 2023, but new features are implemented all the time.\" \r\nMy hope for updating this page stems from my personal perception, and I lack understanding in this area. As part of the update, it's necessary to remove the discontinued Quix NFT market.", "CLOSED", 0, "opfocus", "2024-04-03T15:47:35Z", "2024-04-22T14:33:45Z", "2024-04-22T14:33:45Z", "ethereum-optimism/docs", "2025-08-30 11:59:05"]
["I_kwDOKIwiaM6EHxwW", 612, "[DOCS] OP Sepolia withdrawal time is not seconds anymore", "https://github.com/ethereum-optimism/docs/blob/ad3d9c32d90992f8367bfdd8227302677a9b4aec/pages/builders/app-developers/tutorials/cross-dom-bridge-eth.mdx?plain=1#L245", "CLOSED", 0, "lucadonnoh", "2024-03-30T19:12:58Z", "2024-04-22T14:33:45Z", "2024-04-22T14:33:45Z", "ethereum-optimism/docs", "2025-08-30 11:59:05"]
["I_kwDOKIwiaM6CuCG6", 579, "[DOCS] Add reference to smart contract overview in the contract address page", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nAdd a reference to the smart contract overview page in the contract address page, so people can read the high level details and get access to the source code.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nLink to the smart contact over view page.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/chain/addresses\r\nhttps://docs.optimism.io/stack/protocol/smart-contracts\r\n\r\n## Additional Context\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-03-18T19:36:43Z", "2024-04-22T14:33:44Z", "2024-04-22T14:33:44Z", "ethereum-optimism/docs", "2025-08-30 11:59:05"]
["I_kwDOKIwiaM6Cfi_g", 575, "[DOCS] clarify snap sync docs", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nClarify that the \"Full Sync\" section should mention that they need the migrated data directory. Similar to the archive node section.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd that information to the full sync section.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/node-operators/tutorials/mainnet#full-sync\r\n\r\n## Additional Context\r\n\r\nThis feedback is from our friends at Quicknode.\r\n", "CLOSED", 0, "sbvegan", "2024-03-15T19:13:01Z", "2024-04-22T14:33:44Z", "2024-04-22T14:33:44Z", "ethereum-optimism/docs", "2025-08-30 11:59:05"]
["I_kwDOH2Qg5s6G9Z0z", 308, "Error using debug_traceBlockByNumber & built-in tracers (i.e. callTracer, prestateTracer)", "### System information\r\n\r\nop-geth image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:v1.101308.2\r\nop-node image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.7.2\r\nhistoricalrpc geth image: ethereum/client-go:v1.12.0 \r\nOS & Version: Debian GNU/Linux 11 (bullseye)\r\n\r\n### op-geth params\r\n```\r\n--ws\r\n--ws.port=8546\r\n--ws.addr=0.0.0.0\r\n--ws.origins=*\r\n--http\r\n--http.api=eth,net,web3,txpool,debug\r\n--http.port=8545\r\n--http.addr=0.0.0.0\r\n--http.vhosts=*\r\n--http.corsdomain=*\r\n--authrpc.addr=0.0.0.0\r\n--authrpc.port=8551\r\n--authrpc.vhosts=*\r\n--rpc.evmtimeout=0\r\n--rpc.gascap=0\r\n--rpc.txfeecap=0\r\n--history.transactions=0\r\n--datadir=/data\r\n--verbosity=3\r\n--rollup.historicalrpctimeout=600s\r\n--rollup.disabletxpoolgossip=true\r\n--rollup.sequencerhttp=https://mainnet.optimism.io/\r\n--nodiscover\r\n--networkid=10\r\n--syncmode=full\r\n--snapshot=false\r\n--maxpeers=0\r\n--authrpc.jwtsecret=/tmp/jwtsecret\r\n--gcmode=archive\r\n--op-network=op-mainnet\r\n--authrpc.jwtsecret=/local/jwtsecret\r\n--rollup.historicalrpc=http://address:port\r\n```\r\n\r\n### op-node params\r\n```\r\n--l1.trustrpc=true\r\n--network=mainnet\r\n--rpc.addr=0.0.0.0\r\n--rpc.port=8545\r\n--p2p.listen.ip=0.0.0.0\r\n--p2p.listen.tcp=9003\r\n--p2p.listen.udp=9003\r\n--snapshotlog.file=/op_log/snapshot.log\r\n--rollup.load-protocol-versions=true\r\n--l1=ws://address:port\r\n--l1.beacon=http://address:port\r\n--l2=ws://address:port\r\n--l2.jwt-secret=/local/jwtsecret\r\n```\r\n\r\n### historicalrpc geth params:\r\n```\r\n--authrpc.port=8551\r\n--authrpc.jwtsecret=/local/jwtsecret\r\n--authrpc.addr=0.0.0.0\r\n--authrpc.vhosts=*\r\n--datadir=/home/geth_mainnet\r\n--http\r\n--http.api=eth,net,web3,txpool\r\n--http.addr=0.0.0.0\r\n--http.corsdomain=*\r\n--http.vhosts=*\r\n--http.port=8545\r\n--ws\r\n--ws.addr=0.0.0.0\r\n--ws.port=8546\r\n--ws.api=eth,net,web3\r\n--ws.origins=*\r\n--txlookuplimit=0\r\n--syncmode=full\r\n--snapshot=false\r\n--rpc.gascap=9223372036854775807\r\n```\r\n\r\n### Expected behaviour\r\n'Usual' response with no error\r\n\r\n### Actual behaviour\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": [\r\n    {\r\n      \"txHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n      \"error\": \"TypeError: cannot read property 'toString' of undefined    in server-side tracer function 'result'\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Steps to reproduce the behaviour\r\n1. Run op-geth image mentioned using above params\r\n2. Run op-node image mentioned using above params\r\n3. Send the request to op-geth, using prestateTracer or callTracer:\r\n```\r\ncurl -sH 'Content-Type: application/json' --data '{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"debug_traceBlockByNumber\",\r\n    \"params\": [\r\n        \"0x3d9\",\r\n        {\r\n            \"tracer\": \"callTracer\"\r\n        }\r\n    ],\r\n    \"id\": 1\r\n}' http://localhost:8545\r\n```\r\n\r\n### Backtrace\r\nNo backtrace\r\n\r\n### Comment\r\n\r\nI have also seen pretty same errors [here](https://github.com/ethereum-optimism/optimism/issues/2306) (but w/o the txHash field in the response body) and [here](https://github.com/ethereum-optimism/op-geth/issues/238) (the txHash has 0x0...0 value like in the current issue, although there's no any TypeError and even \"error\" field). \r\nActually it looks like there's a bug in built-in tracers' code\r\n\r\nI'm not sure whether these issues are related to each other, its' behaviours looks pretty same, but I can't find an issue which combines both of them :/\r\n\r\nNext days I'll also update op-geth & op-node and then will check if response changes in a better way; the report will be here", "OPEN", 0, "arsenio-g", "2024-04-25T18:29:34Z", "2024-04-25T18:36:18Z", null, "ethereum-optimism/op-geth", "2025-08-30 11:59:06"]
["I_kwDOLB-lzc59-9ij", 24, "Ambiguous batch format", "According to the [Channel Format](https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#channel-format) section, `rlp_batches` is the concatenation of the RLP-encoded batches. This is somewhat misleading, as `rlp_batches` is not\r\n```\r\nbatch1_version ++ rlp_encode([..]) ++ ... ++ batchn_version ++ rlp_encode([..])\r\n```\r\n(similar to a list of EIP-2718 transactions), but instead\r\n```\r\nrlp_encode(batch1_version ++ rlp_encode([..])) ++ ... ++ rlp_encode(batchn_version ++ rlp_encode([..]))\r\n```\r\nIt should be made clear in the spec that `rlp_batches` is the concatenation of the RLP-encoded strings `batch_data`, where `batch_data = batch_version ++ content` as described in the section [Batch Format](https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/derivation.md#batch-format).\r\n\r\nAnd perhaps more importantly, it should be made clear what is supposed to happen during decoding, if the \"byte envelope\" is larger than `batch_version ++ content`. For example, if for `rlp_encode(batch1_version ++ rlp_encode([..]))` resulting in\r\n```\r\nb85000f84da0dbf6a80fef073de06add9b0d14026d6e5a86c85f6d102c36d3d8e9cf89c2afd3840109d8fea0438335a20d98863a4c0c97999eb2481921ccd28553eac6f913af7c12aec0410884647f5ea9c0\r\n```\r\nthe following (adding a bunch of useless zeros) would also be valid:\r\n```\r\nb85800f84da0dbf6a80fef073de06add9b0d14026d6e5a86c85f6d102c36d3d8e9cf89c2afd3840109d8fea0438335a20d98863a4c0c97999eb2481921ccd28553eac6f913af7c12aec0410884647f5ea9c00000000000000000\r\n```\r\n\r\nIf different implementations handle this decoding differently, it could lead to a chain fork.", "OPEN", 0, "Wollac", "2024-02-01T22:45:47Z", "2024-04-26T01:18:12Z", null, "ethereum-optimism/specs", "2025-08-30 11:59:26"]
["I_kwDODjvEJM6HIPZF", 10330, "Foundry is missing error in latest v1.7.4", "Honestly I am sick of the issues this node causes everyday. \r\nYou guys have some serious work to do in order to maintain this node. \r\n<img width=\"803\" alt=\"Screenshot 2024-04-27 at 9 23 27\u202fPM\" src=\"https://github.com/ethereum-optimism/optimism/assets/48196604/26892a60-3322-4076-a331-2c36f239a75e\">\r\n ", "CLOSED", 0, "zainirfan13", "2024-04-27T16:28:14Z", "2024-04-27T18:01:12Z", "2024-04-27T18:01:12Z", "ethereum-optimism/optimism", "2025-08-30 11:59:33"]
["I_kwDODjvEJM6Gt6cz", 10283, "Support multiple asterisc prestates", "Add the ability to play games with different asterisc prestates, similar to how cannon supports it with https://github.com/ethereum-optimism/optimism/pull/10282\r\n\r\nThis makes it easier to update the asterisc prestate without having to invalidate existing games.", "CLOSED", 0, "ajsutton", "2024-04-24T02:49:11Z", "2024-04-26T01:22:27Z", "2024-04-26T01:22:27Z", "ethereum-optimism/optimism", "2025-08-30 11:59:33"]
["I_kwDODjvEJM6GnkHs", 10268, "devnet GAR transfer", "How to transfer GAR from L1 to L2 address on devnet?\r\n\r\nIt could be found in previous documents, but now it can't be found. Help me please.", "CLOSED", 0, "lenny0x", "2024-04-23T10:30:34Z", "2024-04-23T10:49:24Z", "2024-04-23T10:49:24Z", "ethereum-optimism/optimism", "2025-08-30 11:59:33"]
["I_kwDODjvEJM6Gk-5j", 10263, "Choose another ERC20 token as the gas fee", "Hi, we all know that the current op chain uses eth as the gas fee, can we change the basic code logic or configuration of op to use ERC20 USDT as the gas fee? ", "CLOSED", 0, "starlzy", "2024-04-23T03:02:11Z", "2024-04-24T03:50:30Z", "2024-04-24T03:50:30Z", "ethereum-optimism/optimism", "2025-08-30 11:59:33"]
["I_kwDODjvEJM6Fwk-A", 10155, "Having issue in generating artifacts", "I ran this 2 week ago it worked fine but now i m trying to run on Sepolia Testnet but i am getting issue \r\n\r\nmuhammadajmal@Muhammads-MacBook-Pro contracts-bedrock % forge script scripts/Deploy.s.sol:Deploy --sig 'sync()' --rpc-url $L1_RPC_URL\r\n[\u2806] Compiling...\r\n[\u2830] Compiling 1 files with 0.5.17\r\n[\u2814] Compiling 331 files with 0.8.15\r\n[\u2812] Compiling 135 files with 0.8.19\r\n[\u2822] Solc 0.5.17 finished in 40.41ms\r\n[\u280a] Solc 0.8.19 finished in 5.77s\r\n[\u2812] Solc 0.8.15 finished in 87.40s\r\nCompiler run successful!\r\nScript ran successfully.\r\n\r\n== Logs ==\r\n  Connected to network with chainid 11155111\r\n  Storing temp deployment data in /Users/muhammadajmal/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy\r\n  DeployConfig: reading file /Users/muhammadajmal/optimism/packages/contracts-bedrock/deploy-config/getting-started.json\r\n  Deploying from Deploy\r\n  Deployment context: getting-started\r\n  Syncing 27 deployments\r\n  Using deployment artifact /Users/muhammadajmal/optimism/packages/contracts-bedrock/broadcast/Deploy.s.sol/11155111/run-latest.json\r\n  Deploy Tx not found for AddressManager skipping deployment artifact generation\r\n  Deploy Tx not found for DisputeGameFactory skipping deployment artifact generation\r\n  Deploy Tx not found for DisputeGameFactoryProxy skipping deployment artifact generation\r\n  Deploy Tx not found for L1CrossDomainMessenger skipping deployment artifact generation\r\n  Deploy Tx not found for L1CrossDomainMessengerProxy skipping deployment artifact generation\r\n  Deploy Tx not found for L1ERC721Bridge skipping deployment artifact generation\r\n  Deploy Tx not found for L1ERC721BridgeProxy skipping deployment artifact generation\r\n  Deploy Tx not found for L1StandardBridge skipping deployment artifact generation\r\n  Deploy Tx not found for L1StandardBridgeProxy skipping deployment artifact generation\r\n  Deploy Tx not found for L2OutputOracle skipping deployment artifact generation\r\n  Deploy Tx not found for L2OutputOracleProxy skipping deployment artifact generation\r\n  Deploy Tx not found for Mips skipping deployment artifact generation\r\n  Deploy Tx not found for OptimismMintableERC20Factory skipping deployment artifact generation\r\n  Deploy Tx not found for OptimismMintableERC20FactoryProxy skipping deployment artifact generation\r\n  Deploy Tx not found for OptimismPortal skipping deployment artifact generation\r\n  Deploy Tx not found for OptimismPortalProxy skipping deployment artifact generation\r\n  Deploy Tx not found for PreimageOracle skipping deployment artifact generation\r\n  Deploy Tx not found for ProtocolVersions skipping deployment artifact generation\r\n  Deploy Tx not found for ProtocolVersionsProxy skipping deployment artifact generation\r\n  Deploy Tx not found for ProxyAdmin skipping deployment artifact generation\r\n  Deploy Tx not found for SafeProxyFactory skipping deployment artifact generation\r\n  Deploy Tx not found for SafeSingleton skipping deployment artifact generation\r\n  Deploy Tx not found for SuperchainConfig skipping deployment artifact generation\r\n  Deploy Tx not found for SuperchainConfigProxy skipping deployment artifact generation\r\n  Deploy Tx not found for SystemConfig skipping deployment artifact generation\r\n  Deploy Tx not found for SystemConfigProxy skipping deployment artifact generation\r\n  Deploy Tx not found for SystemOwnerSafe skipping deployment artifact generation\r\n  Synced temp deploy files, deleting /Users/muhammadajmal/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy\r\n  \r\n  \r\n  \r\n  I have deployed the contracts successfully \r\n  \r\n  \r\n ##\r\nSending transactions [45 - 45].\r\n\u2824 [00:09:38] [#####################################################################################################################################################################################] 46/46 txes (0.0s)##\r\nWaiting for receipts.\r\n\u2809 [00:00:13] [###################################################################################################################################################################################] 1/1 receipts (0.0s)\r\n##### sepolia\r\n\u2705  [Success]Hash: 0xb8dc284fe104c114b522a9e82cc1720a1af0b7ea6523ae507cf4c175883910c2\r\nBlock: 5704519\r\nPaid: 0.00013120598489472 ETH (33570 gas * 3.908429696 gwei)\r\n\r\n\r\n\r\n==========================\r\n\r\nONCHAIN EXECUTION COMPLETE & SUCCESSFUL.\r\nTotal Paid: 0.129445396874885295 ETH (34057681 gas * avg 3.746442412 gwei)\r\n\r\nTransactions saved to: /Users/muhammadajmal/optimism/packages/contracts-bedrock/broadcast/Deploy.s.sol/11155111/run-latest.json\r\n\r\nSensitive values saved to: /Users/muhammadajmal/optimism/packages/contracts-bedrock/cache/Deploy.s.sol/11155111/run-latest.json\r\n\r\n\r\ni can see the contract in run-latest.json\r\n\r\n\r\nI don't what i m doing worng ", "CLOSED", 0, "Ajmali124", "2024-04-15T16:24:17Z", "2024-04-24T03:50:56Z", "2024-04-24T03:50:56Z", "ethereum-optimism/optimism", "2025-08-30 11:59:33"]
["I_kwDOKIsnqM6F3SOR", 140, "Suggestion: improved proposal ops", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nI propose using a framework like [forge-proposal-simulator](https://github.com/solidity-labs-io/forge-proposal-simulator) to standardize how proposals are generated. \r\n", "CLOSED", 0, "pegahcarter", "2024-04-16T11:58:22Z", "2025-09-24T19:48:26Z", "2025-09-24T19:48:26Z", "ethereum-optimism/superchain-ops", "2025-08-30 12:01:02"]
["I_kwDODjvEJM6F9bTM", 10183, "op-node error when fetching L1 block", "\r\n**Bug Description**\r\ni was trying to build my own first L2 OP Chain in the guide of the optimism docs, and when i finally launch op-geth and op-node, an error occurred.\r\nthe code is on the branch: **tutorials/chain**\r\n\r\n**Expected behavior**\r\ni guess in the normal way, the op-node is responsible for getting blocks from L1, but now there is some problems between their jsonrpc conmmunication. The message they sent to each other seems mismatch their expectation.\r\n\r\n**Environment Information:**\r\n```shell\r\nDependency | Minimum | Actual\r\ngit          2         2.44.0\r\ngo           1.21      1.22.1\r\nnode         20        20.9.0\r\npnpm         8         8.15.6\r\nfoundry      0.2.0     0.2.0\r\nmake         3         3.81\r\njq           1.6       1.7.1\r\ndirenv       2         2.34.0\r\n``` \r\n\r\n**Configurations:**\r\n`./bin/op-node --l1.rpc-max-batch-size=200 --l2=http://localhost:8551 --l2.jwt-secret=./jwt.txt   --sequencer.enabled   --sequencer.l1-confs=5   --verifier.l1-confs=4   --rollup.config=./rollup.json   --rpc.addr=0.0.0.0   --rpc.port=8547   --p2p.disable --rpc.enable-admin  --p2p.sequencer.key=$GS_SEQUENCER_PRIVATE_KEY --l1=https://sepolia.infura.io/v3/673923aa4cc74918af3b0a2ef3a3ad5a  --l1.rpckind=infura`\r\n\r\n**Logs:**\r\n```shell\r\nINFO [04-17|11:54:35.698] Not opted in to ProtocolVersions signal loading, disabling ProtocolVersions contract now. \r\nINFO [04-17|11:54:35.699] No persisted sequencer state loaded \r\nINFO [04-17|11:54:35.699] Rollup Config                            l2_chain_id=42069 l2_network=\"unknown L2\" l1_chain_id=11,155,111 l1_network=sepolia l2_start_time=1,712,805,984 l2_block_hash=0xc4daaff41e0e100af7e23406e38df3c9bca9b06d6fdf30ad8510c9dcccfe839c l2_block_number=0 l1_block_hash=0xd6822cafd796ddf6396a615202376630d9326c520c1dea425b3466e68c7a0078 l1_block_number=5,672,369 regolith_time=\"@ genesis\" canyon_time=\"@ genesis\" delta_time=\"(not configured)\" ecotone_time=\"(not configured)\" fjord_time=\"(not configured)\" interop_time=\"(not configured)\"\r\nINFO [04-17|11:54:35.699] Initializing rollup node                 version=v0.0.0-a06cae81-1705510057\r\nWARN [04-17|11:54:37.686] No beacon endpoint configured. Configuration is mandatory for the Ecotone upgrade \r\nINFO [04-17|11:54:38.611] loaded new runtime config values!        p2p_seq_address=0x0000000000000000000000000000000000000000\r\nINFO [04-17|11:54:38.612] Admin RPC enabled \r\nINFO [04-17|11:54:38.612] Starting JSON-RPC server \r\nINFO [04-17|11:54:38.613] metrics disabled \r\nINFO [04-17|11:54:38.613] Starting execution engine driver \r\nINFO [04-17|11:54:38.613] Starting driver                          sequencerEnabled=true sequencerStopped=false\r\nINFO [04-17|11:54:38.613] Rollup node started \r\nINFO [04-17|11:54:38.613] State loop started \r\nINFO [04-17|11:54:38.618] Loaded current L2 heads                  unsafe=b63e8a..86069a:5 safe=c4daaf..fe839c:0 finalized=c4daaf..fe839c:0 unsafe_origin=d6822c..7a0078:5672369 safe_origin=d6822c..7a0078:5672369\r\nINFO [04-17|11:54:38.915] Walking back L1Block by number           curr=d6822c..7a0078:5672369 next=d6822c..7a0078:5672369 l2block=b63e8a..86069a:5\r\nINFO [04-17|11:54:38.921] Hit finalized L2 head, returning immediately unsafe=b63e8a..86069a:5 safe=c4daaf..fe839c:0 finalized=c4daaf..fe839c:0 unsafe_origin=d6822c..7a0078:5672369 safe_origin=d6822c..7a0078:5672369\r\nINFO [04-17|11:54:38.921] Sync progress                            reason=\"reset derivation work\" l2_finalized=c4daaf..fe839c:0 l2_safe=c4daaf..fe839c:0 l2_pending_safe=c4daaf..fe839c:0 l2_unsafe=b63e8a..86069a:5 l2_time=1,712,805,994 l1_derived=d6822c..7a0078:5672369\r\nINFO [04-17|11:54:38.922] completed reset of derivation pipeline   origin=d6822c..7a0078:5672369\r\nINFO [04-17|11:54:39.221] Reset of L1Retrieval done                origin=d6822c..7a0078:5672369\r\nWARN [04-17|11:54:41.271] Derivation process temporary error       attempts=1 err=\"temp: failed to fetch receipts of L1 block 0xd6eefbc4e732b6ff282b6be3c687a5b3419c1b43fd447353fbc8305ffa7531e4:5672370 (parent: 0xd6822cafd796ddf6396a615202376630d9326c520c1dea425b3466e68c7a0078:5672369) for L1 sysCfg update: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"\r\nWARN [04-17|11:54:44.136] Derivation process temporary error       attempts=2 err=\"temp: failed to fetch receipts of L1 block 0xd6eefbc4e732b6ff282b6be3c687a5b3419c1b43fd447353fbc8305ffa7531e4:5672370 (parent: 0xd6822cafd796ddf6396a615202376630d9326c520c1dea425b3466e68c7a0078:5672369) for L1 sysCfg update: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"\r\nWARN [04-17|11:54:49.003] Derivation process temporary error       attempts=3 err=\"temp: failed to fetch receipts of L1 block 0xd6eefbc4e732b6ff282b6be3c687a5b3419c1b43fd447353fbc8305ffa7531e4:5672370 (parent: 0xd6822cafd796ddf6396a615202376630d9326c520c1dea425b3466e68c7a0078:5672369) for L1 sysCfg update: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"\r\nINFO [04-17|11:54:49.003] Received first L1 head signal            l1_head=af17f7..aa41ad:5715290\r\nINFO [04-17|11:54:49.333] creating new block                       parent=b63e8a..86069a:5 l1Origin=d6eefb..7531e4:5672370\r\nERROR[04-17|11:54:49.665] sequencer temporarily failed to start building new block err=\"temp: failed to fetch L1 block info and receipts: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"\r\nINFO [04-17|11:54:49.975] creating new block                       parent=b63e8a..86069a:5 l1Origin=d6eefb..7531e4:5672370\r\nERROR[04-17|11:54:50.333] sequencer temporarily failed to start building new block err=\"temp: failed to fetch L1 block info and receipts: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"\r\nINFO [04-17|11:54:50.794] creating new block                       parent=b63e8a..86069a:5 l1Origin=d6eefb..7531e4:5672370\r\nERROR[04-17|11:54:51.101] sequencer temporarily failed to start building new block err=\"temp: failed to fetch L1 block info and receipts: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"\r\n``` \r\ndoes anyone have some idea? Thanks!", "CLOSED", 0, "wy51084915", "2024-04-17T06:18:31Z", "2024-04-18T09:29:16Z", "2024-04-18T09:29:15Z", "ethereum-optimism/optimism", "2025-08-30 12:01:11"]
["I_kwDODjvEJM6F0HL9", 10164, "batcher will never catch up if `ErrMaxDurationReached` happens", "If `ErrMaxDurationReached` happens, channel is instancely marked full [here](https://github.com/ethereum-optimism/optimism/blob/fa19f9aa250c0f548e0fdd226114aebf2c4c3fed/op-batcher/batcher/channel_builder.go#L103), so each l2 block is going to take a l1 tx. It will never(or hardly) catch up.\r\n\r\n[Here](https://sepolia.etherscan.io/address/0x31B16ACB13F03652e3c283d39b8DF61C38065a40) is an actual instance where the batcher is 1 day behind and hopeless to catch up.\r\n\r\n```\r\nt=2024-04-17T17:26:42+0200 lvl=info msg=\"Channel closed\" id=9810acdddc361d6308c5407fe32829fc blocks_pending=0 num_frames=1 input_bytes=58 output_bytes=92 l1_origin=0x49e7efad6819825b9ed42eb742f3759333567be6a2c64066cbecc6a9d833bdaf:5718708 full_reason=\"channel full: max channel duration reached\" compr_ratio=1.5862068965517242 latest_l1_origin=0x49e7efad6819825b9ed42eb742f3759333567be6a2c64066cbecc6a9d833bdaf:5718708\r\n```", "CLOSED", 0, "zhiqiangxu", "2024-04-16T03:45:50Z", "2024-04-17T16:14:43Z", "2024-04-17T16:14:43Z", "ethereum-optimism/optimism", "2025-08-30 12:01:11"]
["I_kwDODjvEJM6FqP7k", 10145, "log.level not respected when output is not to console", "**Bug Description**\r\nThe `--log.level` argument is not respected if the output is not to a console.  Applies to at least `op-node` and `op-proposer` but given logging is shared probably to all the `op-*` services.\r\n\r\nAlso applies to the `Docker` container.  To make reproduction easier I added a couple of `Starting` log statements, one at info and one at debug level close to the start of the program to avoid needing a fully working setup and so I know a debug log is being output.  Then run directly and with a `| tee` so the output doesn't go to the console:\r\n\r\n```\r\n$ ./op-node/bin/op-node --log.level=debug --l1=http://foo --l2=http://localhost/ --l2.jwt-secret=/tmp/key --network=sepolia --l1.beacon=http://foo/\r\nINFO [04-15|10:06:19.820] Not opted in to ProtocolVersions signal loading, disabling ProtocolVersions contract now.\r\nINFO [04-15|10:06:19.867] Rollup Config                            l2_chain_id=11,155,420 l2_network=OP-Sepolia l1_chain_id=11,155,111 l1_network=sepolia l2_start_time=1,691,802,540 l2_block_hash=0x102de6ffb001480cc9b8b548fd05c34cd4f46ae4aa91759393db90ea0409887d l2_block_number=0 l1_block_hash=0x48f520cf4ddaf34c8336e6e490632ea3cf1e5e93b0b2bc6e917557e31845371b l1_block_number=4,071,408 regolith_time=\"@ genesis\" canyon_time=\"@ 1699981200 ~ Wed Nov 15 03:00:00 AEST 2023\" delta_time=\"@ 1703203200 ~ Fri Dec 22 10:00:00 AEST 2023\" ecotone_time=\"@ 1708534800 ~ Thu Feb 22 03:00:00 AEST 2024\" fjord_time=\"(not configured)\" interop_time=\"(not configured)\"\r\nINFO [04-15|10:06:19.867] Starting                                 version=untagged-c7ad0eba-1713128187\r\nDEBUG[04-15|10:06:19.867] Starting                                 version=untagged-c7ad0eba-1713128187\r\n...\r\n\r\n$ ./op-node/bin/op-node --log.level=debug --l1=foo --l2=http://localhost/ --l2.jwt-secret=/tmp/key --network=sepolia --l1.beacon=http://foo/ | tee /tmp/foo\r\nt=2024-04-15T10:06:26+1000 lvl=info msg=\"Not opted in to ProtocolVersions signal loading, disabling ProtocolVersions contract now.\"\r\nt=2024-04-15T10:06:26+1000 lvl=info msg=\"Rollup Config\" l2_chain_id=11155420 l2_network=OP-Sepolia l1_chain_id=11155111 l1_network=sepolia l2_start_time=1691802540 l2_block_hash=0x102de6ffb001480cc9b8b548fd05c34cd4f46ae4aa91759393db90ea0409887d l2_block_number=0 l1_block_hash=0x48f520cf4ddaf34c8336e6e490632ea3cf1e5e93b0b2bc6e917557e31845371b l1_block_number=4071408 regolith_time=\"@ genesis\" canyon_time=\"@ 1699981200 ~ Wed Nov 15 03:00:00 AEST 2023\" delta_time=\"@ 1703203200 ~ Fri Dec 22 10:00:00 AEST 2023\" ecotone_time=\"@ 1708534800 ~ Thu Feb 22 03:00:00 AEST 2024\" fjord_time=\"(not configured)\" interop_time=\"(not configured)\"\r\nt=2024-04-15T10:06:26+1000 lvl=info msg=Starting version=untagged-c7ad0eba-1713128187\r\nt=2024-04-15T10:06:26+1000 lvl=info msg=\"Initializing rollup node\" version=untagged-c7ad0eba-1713128187\r\n```\r\n\r\nNote the second version only has the `info` level `Starting` message and is missing the `debug` level one.", "CLOSED", 0, "ajsutton", "2024-04-15T00:10:46Z", "2024-04-15T22:58:37Z", "2024-04-15T22:58:37Z", "ethereum-optimism/optimism", "2025-08-30 12:01:11"]
["I_kwDODjvEJM6Fk6Jx", 10142, "Fix devnet with FPAC", "The matrix parameter was not previously actually triggering USE_FPAC on the devnet so it ends up broken or timing out.", "CLOSED", 0, "trianglesphere", "2024-04-12T22:13:32Z", "2024-04-15T15:52:28Z", "2024-04-15T15:52:28Z", "ethereum-optimism/optimism", "2025-08-30 12:01:11"]
["I_kwDODjvEJM6FWFZa", 10114, "Syncing deployment DisputeGameFactory: contract DisputeGameFactory.0.8.15. script failed: Error parsing version", "\r\n**Bug Description**\r\ni'm trying to build my first L2 chain in the guide of https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup,when i finished deploying the L1 contract with the command :\r\n `forge script scripts/Deploy.s.sol:Deploy --private-key $GS_ADMIN_PRIVATE_KEY --broadcast --rpc-url $L1_RPC_URL --slow`  it worked well with the output:\r\n\r\n`ONCHAIN EXECUTION COMPLETE & SUCCESSFUL.\r\nTotal Paid: 0.103279203582127804 ETH (34057669 gas * avg 3.031470256 gwei)\r\n\r\nTransactions saved to: /Users/user/optimism/packages/contracts-bedrock/broadcast/Deploy.s.sol/11155111/run-latest.json\r\n\r\nSensitive values saved to: /Users/user/optimism/packages/contracts-bedrock/cache/Deploy.s.sol/11155111/run-latest.json\r\n\r\nthen i ran \r\n`forge script scripts/Deploy.s.sol:Deploy --sig 'sync()' --rpc-url $L1_RPC_URL` \r\nto Generate contract artifacts and an error occured :\r\n\r\n**Logs:**\r\n`\\\": []\\n  },\\n  \\\"additionalContracts\\\": [],\\n  \\\"isFixedGasLimit\\\": false\\n}'\"])\r\n    \u2502   \u2514\u2500 \u2190 [Return] 0x6e756c6c\r\n    \u251c\u2500 [0] VM::ffi([\"bash\", \"-c\", \"echo DisputeGameFactory.0.8.15 | sed -E 's/[.][0-9]+\\\\.[0-9]+\\\\.[0-9]+//g'\"])\r\n    \u2502   \u2514\u2500 \u2190 [Return] 0x4469737075746547616d65466163746f7279\r\n    \u251c\u2500 [0] VM::getCode(\"DisputeGameFactory.sol:DisputeGameFactory.0.8.15\") [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 [Revert] Error parsing version\r\n    \u2514\u2500 \u2190 [Revert] Error parsing version\r\n\r\n== Logs ==\r\n  Connected to network with chainid 11155111\r\n  Storing temp deployment data in /Users/user/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy\r\n  DeployConfig: reading file /Users/user/optimism/packages/contracts-bedrock/deploy-config/getting-started.json\r\n  Deploying from Deploy\r\n  Deployment context: getting-started\r\n  Syncing 27 deployments\r\n  Using deployment artifact /Users/user/optimism/packages/contracts-bedrock/broadcast/Deploy.s.sol/11155111/run-latest.json\r\n  Syncing deployment AddressManager: contract AddressManager\r\n  Syncing deployment DisputeGameFactory: contract DisputeGameFactory.0.8.15\r\nError: \r\nscript failed: Error parsing version`\r\n\r\n**Environment Information:**\r\n - Operating System: MacOs M1\r\n - Package Version\r\n      git      2.44.0\r\n      go      1.22.1\r\n      node      21.7.1\r\n      pnpm    8.15.6\r\n      foundry       0.2.0\r\n      make      3.81\r\n      jq       1.7.1\r\n      direnv      2.34.0\r\n      solc.     0.8.15\r\n\r\nanybody can help solve this? Thx!\r\n\r\n", "CLOSED", 0, "wy51084915", "2024-04-11T08:09:58Z", "2024-04-17T07:29:09Z", "2024-04-12T08:47:20Z", "ethereum-optimism/optimism", "2025-08-30 12:01:11"]
["I_kwDODjvEJM5-bHw7", 9382, "Block height is not increasing", "I Setup the Optimism archive node 2 months back. Four day back i updated **Op-node and Op-geth** with latest version.\r\nFrom that day the Block height is not increasing. I drop the message in **discord** but no one give proper reply.\r\n\r\nI created the discussion in developers repo (https://github.com/ethereum-optimism/developers/discussions/231#discussion-6185751) But no use. See the logs\r\n\r\nCan anyone **Please** help me.\r\nThanks.\r\n\r\n\r\nFeb 05 10:27:02 fond-dingo op-node[3183045]: t=2024-02-05T10:27:02+0000 lvl=warn msg=\"Derivation process temporary error\"     attempts=265 err=\"temp: failed to fetch receipts of L1 block 0xbd8382f5be9e72fbd155da19fc5b919b6e337704a659cb3ab8c0149ae90f9815:17882072 (parent: 0xaf5c355c122ad7340e250249f845fb3d4a35410651948f6ef4e0e6b97b7d5ef4:17882071) for L1 sysCfg update: invalid receipts: log 24 of tx 0x5bb32ce62644d3aa22ef15f2d5bcb14c7c6dc51c118219315a0189015f23aaa8 has unexpected tx hash 0xf220c1329c1ae58d73454201ebb981c11c507bbefab7578e8dcecd534eafa40e\"\r\nFeb 05 10:27:03 fond-dingo op-node[3183045]: t=2024-02-05T10:27:03+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xe2b2843a2c9557835f84aad6859853b5d53332c0615c8e832e0b92b85c9e1167:115765023 peer=16Uiu2HAm7dgsqx3gtF9LKWgp5KzHRMLkRrxDaJi9t6B6yz8jxRtu\r\nFeb 05 10:27:03 fond-dingo op-node[3183045]: t=2024-02-05T10:27:03+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xe2b2843a2c9557835f84aad6859853b5d53332c0615c8e832e0b92b85c9e1167:115765023\r\nFeb 05 10:27:05 fond-dingo op-node[3183045]: t=2024-02-05T10:27:05+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x2d21c8676d3e388e1aeb1ae8865d291f5c1e2a64bd9a76b9c056b599201b9118:115765024 peer=16Uiu2HAmGQeaBiD9gEV6bc89hnC37Q9WnVPzSNCK6Msd6v8Hj1xm\r\nFeb 05 10:27:05 fond-dingo op-node[3183045]: t=2024-02-05T10:27:05+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x2d21c8676d3e388e1aeb1ae8865d291f5c1e2a64bd9a76b9c056b599201b9118:115765024\r\nFeb 05 10:27:07 fond-dingo op-node[3183045]: t=2024-02-05T10:27:07+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xb59d834b0337ef49369c66d8872bb4c7951160fb596395ddb5f3a4722a210a01:115765025 peer=16Uiu2HAmGQeaBiD9gEV6bc89hnC37Q9WnVPzSNCK6Msd6v8Hj1xm\r\nFeb 05 10:27:07 fond-dingo op-node[3183045]: t=2024-02-05T10:27:07+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xb59d834b0337ef49369c66d8872bb4c7951160fb596395ddb5f3a4722a210a01:115765025\r\nFeb 05 10:27:09 fond-dingo op-node[3183045]: t=2024-02-05T10:27:09+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x511222c2736f572ddfe4478b57602b5fa56335a92566c3829a80a95d2d24c268:115765026 peer=16Uiu2HAm7dgsqx3gtF9LKWgp5KzHRMLkRrxDaJi9t6B6yz8jxRtu\r\nFeb 05 10:27:09 fond-dingo op-node[3183045]: t=2024-02-05T10:27:09+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x511222c2736f572ddfe4478b57602b5fa56335a92566c3829a80a95d2d24c268:115765026\r\nFeb 05 10:27:11 fond-dingo op-node[3183045]: t=2024-02-05T10:27:11+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x6ae911ae4d2a1c265d1fb441d9ed0ae3e596c4cd260eb77c65465cabb878223c:115765027 peer=16Uiu2HAmGQeaBiD9gEV6bc89hnC37Q9WnVPzSNCK6Msd6v8Hj1xm\r\nFeb 05 10:27:11 fond-dingo op-node[3183045]: t=2024-02-05T10:27:11+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x6ae911ae4d2a1c265d1fb441d9ed0ae3e596c4cd260eb77c65465cabb878223c:115765027\r\nFeb 05 10:27:12 fond-dingo op-node[3183045]: t=2024-02-05T10:27:12+0000 lvl=warn msg=\"Derivation process temporary error\"     attempts=266 err=\"temp: failed to fetch receipts of L1 block 0xbd8382f5be9e72fbd155da19fc5b919b6e337704a659cb3ab8c0149ae90f9815:17882072 (parent: 0xaf5c355c122ad7340e250249f845fb3d4a35410651948f6ef4e0e6b97b7d5ef4:17882071) for L1 sysCfg update: invalid receipts: log 24 of tx 0x5bb32ce62644d3aa22ef15f2d5bcb14c7c6dc51c118219315a0189015f23aaa8 has unexpected tx hash 0xf220c1329c1ae58d73454201ebb981c11c507bbefab7578e8dcecd534eafa40e\"\r\n", "CLOSED", 0, "AmardeepSambaru", "2024-02-06T15:18:23Z", "2024-04-17T04:25:28Z", "2024-02-09T12:16:24Z", "ethereum-optimism/optimism", "2025-08-30 12:01:11"]
["I_kwDOJ_r-bs6GS9Ob", 198, "Update `scripts/add-chain.sh` to suit new version contract deployment", "**Is your feature request related to a problem? Please describe.**\r\nOp badrocks contracts has updated the way to deploy contract, while for now, it does not generate the json files in `contracts-bedrock/deployments/getting-started/`. \r\nWhile current script `scripts/add-chain.sh` still need to fetch those json in this dir:\r\n```\r\n-->$ bash scripts/add-chain.sh standard\r\nAdding standard chain to superchain-registry...\r\nChain Name                      <>\r\nSuperchain target:              mainnet\r\nReading from monrepo directory: <>/optimism\r\nWith deployments directory:     <>/optimism/packages/contracts-bedrock/deployments/getting-started\r\nRollup config:                  <>/optimism/op-node/rollup.json\r\nGenesis config:                 <>/optimism/op-node/genesis.json\r\nPublic RPC endpoint:            <>\r\nSequencer RPC endpoint:         <>\r\nBlock Explorer:                 <>\r\njq: error: Could not open file <>/optimism/packages/contracts-bedrock/deployments/getting-started/AddressManager.json: No such file or directory\r\n```\r\n\r\n**Describe the solution you'd like**\r\nOur optimism contract version is tag `op-contracts/v1.4.0-rc1` (commit: 802c283995f012805ec28f04f0716e44e22f9d6a)\r\nhttps://github.com/ethereum-optimism/optimism/releases/tag/op-contracts%2Fv1.4.0-rc.1\r\n\r\nWe hope the scripts can support this new op-contracts version. \r\n\r\nFor now the output after execute:\r\n```\r\nforge script -vvv scripts/Deploy.s.sol:Deploy --sig 'runWithStateDiff()' --rpc-url $ETH_RPC_URL --broadcast --private-key $PRIVATE_KEY\r\n```\r\nis\r\n```\r\ncontracts-bedrock\r\n\u251c\u2500\u2500 broadcast\r\n\u251c\u2500\u2500 deployments\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hardhat\r\n\u2502            \u00a0\u00a0 \u2514\u2500\u2500 .deploy\r\n\u251c\u2500\u2500 cache\r\n\u251c\u2500\u2500 forge-artifacts\r\n\r\n```\r\nI think may some files can aslo provide same operations for the script.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\n**Additional context**\r\n\r\n", "CLOSED", 0, "atenjin", "2024-04-19T14:07:43Z", "2024-04-23T15:24:40Z", "2024-04-23T15:24:40Z", "ethereum-optimism/superchain-registry", "2025-08-30 12:01:29"]
["I_kwDOJ_r-bs6FYP-Z", 168, "Declare validation expectations in a TOML file", "This should be more easily parsed by humans than baking into `_test.go` files. \r\n\r\nIf possible it should split out expectations per superchain level and possibly also testnet/prod too. ", "CLOSED", 0, "geoknee", "2024-04-11T13:26:23Z", "2024-04-23T06:03:23Z", "2024-04-23T06:03:23Z", "ethereum-optimism/superchain-registry", "2025-08-30 12:01:29"]
["I_kwDOKIwiaM6G8MUB", 653, "[DOCS] Add scaffold-op repo link to quickstart guide", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nprovide source code link: https://github.com/ethereum-optimism/scaffold-op\r\n\r\n## Description of the Documentation You'd Like\r\n\r\ntransform `Scaffold-OP` mentioned at the top into a link\r\n\r\n## Links to Related Pages\r\n- https://docs.optimism.io/builders/app-developers/quick-start\r\n\r\n## Additional Context\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-04-25T15:40:37Z", "2024-04-29T17:51:41Z", "2024-04-29T17:51:41Z", "ethereum-optimism/docs", "2025-08-30 12:01:44"]
["I_kwDOI7W0xc5_3H7x", 359, "Refer to our contributing guidelines", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "CLOSED", 0, "habibiman62", "2024-02-20T19:53:48Z", "2024-04-29T13:44:43Z", "2024-02-22T01:15:35Z", "ethereum-optimism/op-analytics", "2025-08-30 12:01:47"]
["I_kwDOH2Qg5s6FkCNz", 298, "Incorrect gasUsed in callTracer", "#### System information\r\n\r\nGeth version: `Geth/v1.101311.0-stable-e9a306ba/linux-amd64/go1.21.9`\r\nCL client & version: `op-node v1.7.3`\r\nOS & Version:Linux\r\n\r\n#### Issue\r\n\r\nGiven the following call:\r\n\r\n```json\r\n{\"id\":\"synth\",\"jsonrpc\":\"2.0\",\"method\":\"debug_traceTransaction\",\"params\":[\"0xc93e9c095619a713a1e29557d8a51a7f020844b3b97c549f6c3e1da721fba115\",{\"tracer\":\"callTracer\"}]}\r\n```\r\n\r\nop-geth is returning:\r\n\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": \"synth\",\r\n  \"result\": {\r\n    \"from\": \"0xdeaddeaddeaddeaddeaddeaddeaddeaddead0001\",\r\n    \"gas\": \"0xf4240\",\r\n    \"gasUsed\": \"0xf4240\",\r\n    \"to\": \"0x4200000000000000000000000000000000000015\",\r\n    \"input\": \"0x440a5e2000000558000c5fc500000000000000030000000066197f4b00000000012bb4050000000000000000000000000000000000000000000000000000002e4cb91cea000000000000000000000000000000000000000000000000000000000000000145a826de7841ea76c056554f1c351464a964420e8283b88a1762549f987e688c0000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f32985\",\r\n    \"calls\": [\r\n      {\r\n        \"from\": \"0x4200000000000000000000000000000000000015\",\r\n        \"gas\": \"0xe9b69\",\r\n        \"gasUsed\": \"0x3fac\",\r\n        \"to\": \"0x07dbe8500fc591d1852b76fee44d5a05e13097ff\",\r\n        \"input\": \"0x440a5e2000000558000c5fc500000000000000030000000066197f4b00000000012bb4050000000000000000000000000000000000000000000000000000002e4cb91cea000000000000000000000000000000000000000000000000000000000000000145a826de7841ea76c056554f1c351464a964420e8283b88a1762549f987e688c0000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f32985\",\r\n        \"value\": \"0x0\",\r\n        \"type\": \"DELEGATECALL\"\r\n      }\r\n    ],\r\n    \"value\": \"0x0\",\r\n    \"type\": \"CALL\"\r\n  }\r\n}\r\n```\r\n\r\nHowever, the `gasUsed` is incorrect, if you look at the receipt:\r\n\r\n```json\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": {\r\n    \"blockHash\": \"0x5cf34d3f6ec2dae3c78a5dd9e89a8dad5d139f91983ce91aa0f75ece0ada1bb9\",\r\n    \"blockNumber\": \"0x712d12d\",\r\n    \"contractAddress\": null,\r\n    \"cumulativeGasUsed\": \"0xab4b\",\r\n    \"depositNonce\": \"0xcd0eb6\",\r\n    \"depositReceiptVersion\": \"0x1\",\r\n    \"effectiveGasPrice\": \"0x0\",\r\n    \"from\": \"0xdeaddeaddeaddeaddeaddeaddeaddeaddead0001\",\r\n    \"gasUsed\": \"0xab4b\",\r\n    \"logs\": [],\r\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"status\": \"0x1\",\r\n    \"to\": \"0x4200000000000000000000000000000000000015\",\r\n    \"transactionHash\": \"0xd8fca681d83ef12ebf44a31dafad3431b5cfcb8f7490851c8d4337085a99a38d\",\r\n    \"transactionIndex\": \"0x0\",\r\n    \"type\": \"0x7e\"\r\n  }\r\n}\r\n```\r\n\r\nThis is how much gas is used: `\"cumulativeGasUsed\": \"0xab4b\",` NOT `0xf4240`\r\n\r\nBoth `op-erigon` and the [explorer](https://optimistic.etherscan.io/vmtrace?txhash=0xd8fca681d83ef12ebf44a31dafad3431b5cfcb8f7490851c8d4337085a99a38d&type=gethtrace2) say that the output of the debug_traceTransaction should be `\"gasUsed\": \"0xab4b\",`", "OPEN", 0, "quickchase", "2024-04-12T20:03:11Z", "2024-04-30T16:53:24Z", null, "ethereum-optimism/op-geth", "2025-08-30 12:01:47"]
["I_kwDOH2Qg5s6FGkDf", 294, "Synchronise full nodes via syncmode=snap", "#### System information\r\nGeth version: `v1.101308.3`, `us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:v1.101308.3`\r\nOP-Node Version: `v1.7.2`, `us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.7.2`\r\nOS & Version: `Ubuntu 22.04 Docker`\r\n\r\n#### Expected behaviour\r\nExpect to be able to synchronise a full node from zero by specifying syncmode=snap, Refer to the documentation: [Snap-Sync](https://docs.optimism.io/builders/node-operators/management/snap-sync)\r\n```bash\r\n/opt/opmain/core/op-geth --networkid=10 --gcmode=full --syncmode=snap --db.engine=pebble --state.scheme=path --datadir=/mnt/opmain/node/geth --http --http.addr=0.0.0.0 --http.port=8545 --http.vhosts=* --http.corsdomain=* --http.api=admin,eth,net,web3,personal,debug,txpool --authrpc.addr=127.0.0.1 --authrpc.port=8551 --authrpc.jwtsecret=/mnt/opmain/node/jwt.hex --authrpc.vhosts=* --rollup.disabletxpoolgossip=true --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io --nodiscover --maxpeers=0 --port=30303 --discovery.port=30303 --rpc.gascap=0 --rpc.txfeecap=0\r\n```\r\n\r\n#### Actual behaviour\r\nAs per the documentation, I did not provide a bedrock datadir and specified networkid=10, but the boot log identifies the network id as 1\r\n```log\r\nINFO [04-09|16:49:34.775] Maximum peer count                       ETH=0 total=0\r\nINFO [04-09|16:49:34.776] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\r\nINFO [04-09|16:49:34.776] Using pebble as db engine\r\nINFO [04-09|16:49:34.779] Global gas cap disabled\r\nINFO [04-09|16:49:34.779] Initializing the KZG library             backend=gokzg\r\nINFO [04-09|16:49:34.803] Allocated trie memory caches             clean=154.00MiB dirty=256.00MiB\r\nINFO [04-09|16:49:34.803] Using pebble as the backing database\r\nINFO [04-09|16:49:34.803] Allocated cache and file handles         database=/mnt/opmain/node/geth/geth/chaindata cache=512.00MiB handles=524,288\r\nINFO [04-09|16:49:34.826] Opened ancient database                  database=/mnt/opmain/node/geth/geth/chaindata/ancient/chain readonly=false\r\nINFO [04-09|16:49:34.826] State schema set to default              scheme=hash\r\nINFO [04-09|16:49:34.828] Writing default main-net genesis block\r\nINFO [04-09|16:49:35.180] Persisted trie from memory database      nodes=12356 size=1.79MiB time=61.431775ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=0 livesize=0.00B\r\nINFO [04-09|16:49:35.220]\r\nINFO [04-09|16:49:35.220] ---------------------------------------------------------------------------------------------------------------------------------------------------------\r\nINFO [04-09|16:49:35.221] Chain ID:  1 (mainnet)\r\nINFO [04-09|16:49:35.221] Consensus: Beacon (proof-of-stake), merged from Ethash (proof-of-work)\r\nINFO [04-09|16:49:35.221]\r\nINFO [04-09|16:49:35.221] Pre-Merge hard forks (block based):\r\nINFO [04-09|16:49:35.221]  - Homestead:                   #1150000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md)\r\nINFO [04-09|16:49:35.221]  - DAO Fork:                    #1920000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/dao-fork.md)\r\nINFO [04-09|16:49:35.221]  - Tangerine Whistle (EIP 150): #2463000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md)\r\nINFO [04-09|16:49:35.221]  - Spurious Dragon/1 (EIP 155): #2675000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\r\nINFO [04-09|16:49:35.221]  - Spurious Dragon/2 (EIP 158): #2675000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\r\nINFO [04-09|16:49:35.221]  - Byzantium:                   #4370000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md)\r\nINFO [04-09|16:49:35.221]  - Constantinople:              #7280000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md)\r\nINFO [04-09|16:49:35.221]  - Petersburg:                  #7280000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md)\r\nINFO [04-09|16:49:35.221]  - Istanbul:                    #9069000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md)\r\nINFO [04-09|16:49:35.221]  - Muir Glacier:                #9200000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md)\r\nINFO [04-09|16:49:35.221]  - Berlin:                      #12244000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md)\r\nINFO [04-09|16:49:35.221]  - London:                      #12965000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)\r\nINFO [04-09|16:49:35.221]  - Arrow Glacier:               #13773000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md)\r\nINFO [04-09|16:49:35.221]  - Gray Glacier:                #15050000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md)\r\nINFO [04-09|16:49:35.221]\r\nINFO [04-09|16:49:35.221] Merge configured:\r\nINFO [04-09|16:49:35.221]  - Hard-fork specification:    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md\r\nINFO [04-09|16:49:35.221]  - Network known to be merged: true\r\nINFO [04-09|16:49:35.221]  - Total terminal difficulty:  58750000000000000000000\r\nINFO [04-09|16:49:35.221]\r\nINFO [04-09|16:49:35.221] Post-Merge hard forks (timestamp based):\r\nINFO [04-09|16:49:35.221]  - Shanghai:                    @1681338455 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md)\r\nINFO [04-09|16:49:35.221]\r\nINFO [04-09|16:49:35.221] ---------------------------------------------------------------------------------------------------------------------------------------------------------\r\nINFO [04-09|16:49:35.221]\r\nINFO [04-09|16:49:35.221] Loaded most recent local block           number=0 hash=d4e567..cb8fa3 td=17,179,869,184 age=55y3w1d\r\nWARN [04-09|16:49:35.221] Failed to load snapshot                  err=\"missing or corrupted snapshot\"\r\nINFO [04-09|16:49:35.223] Rebuilding state snapshot\r\nINFO [04-09|16:49:35.225] Initialising Ethereum protocol           network=10 dbversion=<nil>\r\nINFO [04-09|16:49:35.225] Resuming state snapshot generation       root=d7f897..0f0544 accounts=0 slots=0 storage=0.00B dangling=0 elapsed=1.534ms\r\nINFO [04-09|16:49:35.225] Regenerated local transaction journal    transactions=0 accounts=0\r\nINFO [04-09|16:49:35.225] Initialized transaction indexer          limit=2,350,000\r\nINFO [04-09|16:49:35.231] Enabled snap sync                        head=0 hash=d4e567..cb8fa3\r\nINFO [04-09|16:49:35.231] Chain post-merge, sync via beacon client\r\nINFO [04-09|16:49:35.231] Gasprice oracle is ignoring threshold set threshold=2\r\nWARN [04-09|16:49:35.233] Engine API enabled                       protocol=eth\r\nINFO [04-09|16:49:35.233] Starting peer-to-peer node               instance=Geth/v0.1.0-unstable-0ff6f563/linux-amd64/go1.21.8\r\nINFO [04-09|16:49:35.245] New local node record                    seq=1,712,652,575,244 id=34462fffc99952a6 ip=127.0.0.1 udp=0 tcp=30303\r\nINFO [04-09|16:49:35.245] Started P2P networking                   self=\"enode://08656eef77771e14605aab711a05bb69f4456f774deb9ec14a1cfc85a1bcb111d32be12f22cdb1712c28068494e8cb7473d69c89fcb47e196850cdaacc6372fa@127.0.0.1:30303?discport=0\"\r\nINFO [04-09|16:49:35.245] IPC endpoint opened                      url=/mnt/opmain/node/geth/geth.ipc\r\nINFO [04-09|16:49:35.246] Loaded JWT secret file                   path=/mnt/opmain/node/jwt.hex crc32=0x223d6a08\r\nINFO [04-09|16:49:35.246] HTTP server started                      endpoint=[::]:8545 auth=false prefix= cors=* vhosts=*\r\nINFO [04-09|16:49:35.246] WebSocket enabled                        url=ws://127.0.0.1:8551\r\nINFO [04-09|16:49:35.246] HTTP server started                      endpoint=127.0.0.1:8551 auth=true  prefix= cors=localhost vhosts=*\r\nINFO [04-09|16:49:35.272] Generated state snapshot                 accounts=8893 slots=0 storage=409.64KiB dangling=0 elapsed=49.275ms\r\nWARN [04-09|16:50:10.234] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nINFO [04-09|16:51:14.627] Got interrupt, shutting down...\r\nINFO [04-09|16:51:14.627] HTTP server stopped                      endpoint=[::]:8545\r\nINFO [04-09|16:51:14.627] HTTP server stopped                      endpoint=127.0.0.1:8551\r\nINFO [04-09|16:51:14.627] IPC endpoint closed                      url=/mnt/opmain/node/geth/geth.ipc\r\nINFO [04-09|16:51:14.627] Ethereum protocol stopped\r\nINFO [04-09|16:51:14.627] Transaction pool stopped\r\n```\r\n\r\nThis causes OP-node to report an error as well.\r\n```log\r\nt=2024-04-09T16:51:12+0800 lvl=info msg=\"Not opted in to ProtocolVersions signal loading, disabling ProtocolVersions contract now.\"\r\nt=2024-04-09T16:51:12+0800 lvl=info msg=\"Rollup Config\" l2_chain_id=10 l2_network=OP-Mainnet l1_chain_id=1 l1_network=mainnet l2_start_time=1686068903 l2_block_hash=0xdbf6a80fef073de06add9b0d14026d6e5a86c85f6d102c36d3d8e9cf89c2afd3 l2_block_number=105235063 l1_block_hash=0x438335a20d98863a4c0c97999eb2481921ccd28553eac6f913af7c12aec04108 l1_block_number=17422590 regolith_time=\"@ genesis\" canyon_time=\"@ 1704992401 ~ Fri Jan 12 01:00:01 CST 2024\" delta_time=\"@ 1708560000 ~ Thu Feb 22 08:00:00 CST 2024\" ecotone_time=\"@ 1710374401 ~ Thu Mar 14 08:00:01 CST 2024\" fjord_time=\"(not configured)\" interop_time=\"(not configured)\"\r\nt=2024-04-09T16:51:12+0800 lvl=info msg=\"Initializing rollup node\" version=v0.0.0-99a53381-1710933867\r\nt=2024-04-09T16:51:12+0800 lvl=info msg=\"Connected to L1 Beacon API, ready for EIP-4844 blobs retrieval.\" version=\"Prysm/v5.0.3 (linux amd64)\"\r\nt=2024-04-09T16:51:12+0800 lvl=eror msg=\"Error initializing the rollup node\" err=\"failed to init L2: incorrect L2 RPC chain id 1, expected 10\"\r\nt=2024-04-09T16:51:12+0800 lvl=crit msg=\"Application failed\" message=\"failed to setup: unable to create the rollup node: failed to init L2: incorrect L2 RPC chain id 1, expected 10\"\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\n```bash\r\n/opt/opmain/core/op-geth --networkid=10 --gcmode=full --syncmode=snap --db.engine=pebble --state.scheme=path --datadir=/mnt/opmain/node/geth\r\n```\r\n", "CLOSED", 0, "YuXiaoCoder", "2024-04-09T10:09:56Z", "2024-04-29T12:56:22Z", "2024-04-29T12:56:22Z", "ethereum-optimism/op-geth", "2025-08-30 12:01:47"]
["I_kwDOH2Qg5s6EHl4C", 277, "Node startup log error", "How to fix it\uff1fThanks.\r\n`INFO [03-30|16:46:54.577] Starting work on payload                 id=0x2ee12e8e4aff5ccb\r\nWARN [03-30|16:46:54.584] Ignoring already known beacon payload    number=118,065,912 hash=b9b53e..640b72 age=1d3m33s\r\nERROR[03-30|16:46:54.598] Failed to create sealing context         err=\"missing trie node caaea47db6e90c838efd2567c10837d066e634ec9eebb70ed9cb29128a966362 (path ) state 0xcaaea47db6e90c838efd2567c10837d066e634ec9eebb70ed9cb29128a966362 is not available, not found\"\r\nERROR[03-30|16:46:54.599] Failed to build payload                  err=\"missing trie node caaea47db6e90c838efd2567c10837d066e634ec9eebb70ed9cb29128a966362 (path ) state 0xcaaea47db6e90c838efd2567c10837d066e634ec9eebb70ed9cb29128a966362 is not available, not found\"\r\nWARN [03-30|16:46:54.599] Served engine_forkchoiceUpdatedV3        conn=127.0.0.1:36876 reqid=45884 duration=1.419106ms err=\"Invalid payload attributes\" errdata=\"{Error:missing trie node caaea47db6e90c838efd2567c10837d066e634ec9eebb70ed9cb29128a966362 (path ) state 0xcaaea47db6e90c838efd2567c10837d066e634ec9eebb70ed9cb29128a966362 is not available, not found}\"`", "CLOSED", 0, "isReset728", "2024-03-30T16:58:21Z", "2024-04-29T12:34:48Z", "2024-04-29T12:34:48Z", "ethereum-optimism/op-geth", "2025-08-30 12:01:47"]
["I_kwDOFpg0Ns6HFzPU", 806, "Validation / CI not detecting `nonstandard` despite being present", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nCI doesn't seem to be picking up `\"nonstandard\": true` despite being present in the metadata\r\n\r\nExample: https://github.com/ethereum-optimism/ethereum-optimism.github.io/pull/695\r\n\r\n**Steps to Reproduce**\r\n\r\nTry to validate https://github.com/ethereum-optimism/ethereum-optimism.github.io/pull/695\r\n\r\n**Expected behavior**\r\n\r\nValidation should pass\r\n\r\n**Environment Information:**\r\n\r\nN/A\r\n\r\n**Configurations:**\r\n\r\nN/A\r\n\r\n**Logs:**\r\n\r\n```\r\n[ 'DF' ]\r\nerror: final token list is invalid\r\nwarning: DF on chain ethereum token 0x431ad2ff6a9C365805eBaD47Ee021148d6f7DBe0 is a nonstandard token\r\nwarning: DF on chain optimism token 0x9e5AAC1Ba1a2e6aEd6b32689DFcF62A509Ca96f3 is a nonstandard token\r\nwarning: DF on chain sepolia token 0x4ed818eDd4a0c36A3F43826A60630879b8164401 is a nonstandard token\r\nwarning: DF on chain base-sepolia token 0x0d73bEC7B116c3053b7F0fa108e45A8Ae9A038e9 is a nonstandard token\r\nwarning: DF on chain base token 0x178929287b25fe1aC9e0b112CE3899312b6d0557 is a nonstandard token\r\n```\r\n\r\n**Additional context**\r\n\r\nN/A\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "wbnns", "2024-04-26T20:16:12Z", "2024-05-03T01:00:55Z", "2024-05-03T01:00:55Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 12:01:57"]
["I_kwDOFpg0Ns6Domz2", 724, "[Base] Bridging to a different token name and ticker", "Hello, I have some questions about bridging on Base using the standard bridge. Is it possible to bridge an ethereum erc-20 to Base, where the new token on Base has a different name and ticker? I see the instructions say \"Token name, symbol, and decimals matches on-chain data (auto-reject); If overrides are used (requires manual review)\" which suggests this might be possible upon review.\r\n\r\nI'm part of a renounced contract project which was taken over by the community 2 years ago after the original dev abandoned it. We have now built a product and are in a good position at multi million mcap and with a dedicated community. However, during our evolution we decided to rebrand away from the original name and ticker. We'd like to rebrand with a new name and ticker on Base but keep it linked to our existing renounced liquidity pool so as not to adversely affect current holders. It would be perfect if this could be achieved via the standard bridge.\r\n\r\nTagging @cfluke-cb as Base reviewer. Furthermore, if this is possible, what steps could we take to be listed on the official Base bridging UI? We have a professional product which we'd like to bring to Base and it would help us a lot to be listed in the UI. I would gladly discuss our project and team further and explore options to get listed in the UI.\r\n\r\nThanks for your kind attention", "CLOSED", 0, "trador-rising", "2024-03-26T14:43:04Z", "2024-04-29T18:11:04Z", "2024-04-29T18:11:04Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 12:01:57"]
["I_kwDOFpg0Ns6DDP3N", 708, "Need more silly meme coins on Optimism / Base.", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n![bananacat-halla](https://github.com/ethereum-optimism/ethereum-optimism.github.io/assets/108703161/0b256ebb-e2ce-4f28-9f5f-ccf91a35ac32)\r\n\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm kind of bummed out that Optimism and Base don't have better meme coins.\r\n\r\n**Describe the solution you'd like**\r\nSomething funny and clever would be nice to interact with on the SuperChain.\r\n\r\n**Describe alternatives you've considered**\r\nI've considered spinning up my own memes but I'm not that funny.\r\n\r\n\r\n**Additional context**\r\n[These videos might help](https://www.youtube.com/results?search_query=banana%20cat)", "CLOSED", 0, "faces-of-eth", "2024-03-20T22:09:32Z", "2024-05-02T00:09:48Z", "2024-05-02T00:09:48Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 12:01:57"]
["I_kwDOFpg0Ns6CMZ5f", 690, "Rippling - Silent Agent Installation", "", "CLOSED", 0, "lizoplabs", "2024-03-13T15:24:59Z", "2024-04-29T18:33:26Z", "2024-04-29T18:33:26Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 12:01:57"]
["I_kwDOFpg0Ns6A20zG", 664, "Issue Title", "<!-- Edit the body of your new issue then click the \u2713 \"Create Issue\" button in the top right of the editor. The first line will be the issue title. Assignees and Labels follow after a blank line. Leave an empty line before beginning the body of the issue. -->", "CLOSED", 0, "philliprossii", "2024-02-29T18:28:18Z", "2024-04-29T18:11:34Z", "2024-04-29T18:11:34Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 12:01:57"]
["I_kwDOFpg0Ns59arhq", 632, "Where's the UI to bridge Base tokens?", "@roberto-bayardo\r\n\r\nAs I understand\r\n\r\n- The [official base bridge](https://bridge.base.org/withdraw) only supports a small number of tokens. Tokens added to this repo under Base (eg. $ALI, $TETU, $SEAM) have not been whitelisted on [bridge.base.org](https://bridge.base.org). Unlike [Optimism's bridge page](https://app.optimism.io/bridge/withdraw), the base page doesn't support custom addresses.\r\n- Bridge aggregators like [jumper.exchange](https://jumper.exchange/) and [rango.exchange](https://rango.exchange) do not support Base's standard bridge. I tested this by trying to bridge out USDbC, it gets routed via stargate.\r\n\r\nIs there a UI page, official or 3rd party to bridge custom ERC20 tokens? How are existing projects doing it? We do not want to build a custom UI.", "CLOSED", 0, "chicken-juju", "2024-01-28T12:42:07Z", "2024-04-29T18:11:22Z", "2024-04-29T18:11:22Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 12:01:57"]
["I_kwDOJ_r-bs6HrHK3", 221, "Update add-chain script to support plasma mode", "In order to support plasma mode, we need to add the DA Challenge contract to the list of contracts we read from json during `readAddressesFromJSON`.\r\n\r\nContext: [link](https://github.com/ethereum-optimism/superchain-registry/pull/204#discussion_r1586953346) to github comment\r\n\r\nAny other updates we need to make to support plasma mode?", "CLOSED", 0, "bitwiseguy", "2024-05-02T18:37:21Z", "2024-05-03T13:32:20Z", "2024-05-03T13:32:20Z", "ethereum-optimism/superchain-registry", "2025-08-30 12:02:12"]
["I_kwDOJ_r-bs6FjzDe", 177, "bug: fix error handling in `add-chain.sh`", "https://github.com/ethereum-optimism/superchain-registry/pull/162 added some new calls, and handles errors like this:\r\n\r\n```sh\r\nSuperchainConfig=$(cast call $OptimismPortalProxy \"superchainConfig()(address)\" -r $L1_RPC_URL) || \"\" # first command could fail if bedrock\r\n```\r\n\r\nHowever, the `||` syntax to catch the error does not seem to work. This may be a shell-specific syntax\r\n\r\ncc @geoknee ", "CLOSED", 0, "mds1", "2024-04-12T19:14:07Z", "2024-05-03T15:14:15Z", "2024-05-03T15:14:15Z", "ethereum-optimism/superchain-registry", "2025-08-30 12:02:12"]
["I_kwDOJ_r-bs6E1rlu", 166, "Improve hardfork timestamp override handling in add-chain.sh", "Desiderata for improvements here:\r\n* we pipe the values through `date -r <timestamp> -u ` and append this as a comment on each line, so it matches: \r\nhttps://github.com/ethereum-optimism/superchain-registry/blob/119f493760a5d2de4c9cb878dcfa03077e24d2bc/superchain/configs/sepolia/superchain.yaml#L10-L12\r\n* we iterate through all fields ending in `_time`, to catch future hardforks without needing to update the script\r\n* instead of filling with `null` when the `jq` query fails, we should use `nil` or even better just omit the entire line from the output yaml file. \r\n* EDIT: if the timestamp matches the superchain default in the neighbouring `superchain.yaml` file, we should NOT add the override at all.\r\n\r\nIMO we tackle these in a followup issue / PRs. This PR is reasonably urgent, because it will cause tests to incorrectly fail on in flight standard chain PRs. ", "CLOSED", 0, "geoknee", "2024-04-05T19:13:23Z", "2024-05-03T15:14:16Z", "2024-05-03T15:14:16Z", "ethereum-optimism/superchain-registry", "2025-08-30 12:02:12"]
["I_kwDOKIwiaM6HQ6Aq", 659, "Update proxy and guardian for OP Sepolia", "hey, we recently updated the proxy admin owner and the guardian for OP Sepolia, so <https://docs.optimism.io/chain/security/privileged-roles#mitigations|this page> needs an update. The new addresses can be found here: <https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/extra/addresses/sepolia/op.json>", "CLOSED", 0, "cpengilly", "2024-04-29T15:34:47Z", "2024-05-06T16:24:33Z", "2024-05-06T16:24:33Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6G9zAq", 654, "Feedback for \u201cTransaction Fees on OP Mainnet\u201d", "Couple smol notes:\r\n\r\nPage calls out that Ecotone hasn't yet been approved by governance, but it was approved in Mar 2024\r\n\r\n> The L1 Data Fee formula would change with the proposed Ecotone upgrade. Ecotone has not yet been approved by Optimism Governance. Refer to the [Network Upgrade Overview](https://docs.optimism.io/builders/node-operators/network-upgrades/overview) to check when the Ecotone upgrade is scheduled to activate on OP Sepolia and OP Mainnet.\r\n\r\nBullet in the Ecotone section has duplicated phrase:\r\n\r\n> Two new scalar parameters that independently scale the base fee blob base fee.\r\n\r\n", "CLOSED", 0, "OPMattie", "2024-04-25T19:30:51Z", "2024-05-06T16:24:32Z", "2024-05-06T16:24:32Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6GpLiw", 649, "[DOCS] transaction status ", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nupdate the sequencer window from 24 hours to 12 hours\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/app-developers/transactions/statuses\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "sbvegan", "2024-04-23T13:51:26Z", "2024-05-06T16:24:32Z", "2024-05-06T16:24:32Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6GgTaC", 646, "Lang fix for Rollup Protocol Overview", "On <https://docs.optimism.io/stack/protocol/overview#block-storage> it mentions\n\"blocks are submitted as transaction calldata on Ethereum\".\nShall we fix by mentioning we use EIP-4844 Blob?", "CLOSED", 0, "cpengilly", "2024-04-22T13:58:39Z", "2024-05-06T16:24:32Z", "2024-05-06T16:24:32Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6GWDzQ", 643, "[DOCS] Add additional l1.rpckind details", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nl1.rpckind details\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd a callout to the l1.rpckind that gives details on the different values: https://github.com/ethereum-optimism/optimism/blob/844cc20084a2e9716631b4092ce7eca4804a8e0a/op-service/sources/receipts_rpc.go#L239-L322\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/node-operators/management/configuration#l1rpckind\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "sbvegan", "2024-04-19T20:30:04Z", "2024-05-06T16:24:31Z", "2024-05-06T16:24:31Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6GG6mw", 640, "Feedback for \u201cDeposit Flow\u201d", "Step 7 seems to have a spelling error:\r\n\"**it will happen from the message is** relayed to L2,\"", "CLOSED", 0, "Gregory100000", "2024-04-18T07:27:40Z", "2024-05-06T16:24:31Z", "2024-05-06T16:24:31Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6DLjA0", 590, "[DOCS] get rollup config for chains in the superchain-registry", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nDocument how to get the rollup config from the op-node\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd the folling information to the node operations page under chain management:\r\n\r\nYou can do this:\r\n```\r\n./bin/op-node networks dump-rollup-config --network=sepolia   \r\n{\r\n  \"genesis\": {\r\n    \"l1\": {\r\n      \"hash\": \"0x48f520cf4ddaf34c8336e6e490632ea3cf1e5e93b0b2bc6e917557e31845371b\",\r\n      \"number\": 4071408\r\n    },\r\n    \"l2\": {\r\n      \"hash\": \"0x102de6ffb001480cc9b8b548fd05c34cd4f46ae4aa91759393db90ea0409887d\",\r\n      \"number\": 0\r\n    },\r\n    \"l2_time\": 1691802540,\r\n    \"system_config\": {\r\n      \"batcherAddr\": \"0x8f23bb38f531600e5d8fddaaec41f13fab46e98c\",\r\n      \"overhead\": \"0x00000000000000000000000000000000000000000000000000000000000000bc\",\r\n      \"scalar\": \"0x00000000000000000000000000000000000000000000000000000000000a6fe0\",\r\n      \"gasLimit\": 30000000\r\n    }\r\n  },\r\n  \"block_time\": 2,\r\n  \"max_sequencer_drift\": 600,\r\n  \"seq_window_size\": 3600,\r\n  \"channel_timeout\": 300,\r\n  \"l1_chain_id\": 11155111,\r\n  \"l2_chain_id\": 11155420,\r\n  \"regolith_time\": 0,\r\n  \"canyon_time\": 1699981200,\r\n  \"delta_time\": 1703203200,\r\n  \"ecotone_time\": 1708534800,\r\n  \"batch_inbox_address\": \"0xff00000000000000000000000000000011155420\",\r\n  \"deposit_contract_address\": \"0x16fc5058f25648194471939df75cf27a2fdc48bc\",\r\n  \"l1_system_config_address\": \"0x034edd2a225f7f429a63e0f1d2084b9e0a93b538\",\r\n  \"protocol_versions_address\": \"0x79add5713b383daa0a138d3c4780c7a1804a8090\",\r\n  \"da_challenge_address\": \"0x0000000000000000000000000000000000000000\",\r\n  \"da_challenge_window\": 0,\r\n  \"da_resolve_window\": 0,\r\n  \"use_plasma\": false\r\n}\r\n```\r\n\r\n## Additional Context\r\n\r\n- But this will only work if your chain is already in the superchain-registry (and the op-node has been updated to pull those changes in from the registry).\r\n- So this won't help any chain operator trying to generate this data in order to submit it to the registry.\r\n- The --network=sepolia flag allows the tool to pick up the appropriate data from the registry\r\n- it uses the OPChains mapping under the hood, so we have the power soon to decide whether the allowed values for --network should include frontier chains or not.\r\n\r\nthank you @geoknee!", "CLOSED", 0, "sbvegan", "2024-03-21T18:03:44Z", "2024-05-06T16:24:52Z", "2024-05-06T16:24:52Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6Crp1W", 578, "[DOCS] mark the legacy contracts", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nMark the legacy contracts in the OP Mainnet contract address page.\r\n\r\n## Description of the Documentation You'd Like\r\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/chain/addresses\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "sbvegan", "2024-03-18T15:08:09Z", "2024-05-07T12:58:46Z", "2024-05-07T12:58:46Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM6CLrHD", 560, "[DOCS] take blob info from `v1.7.2-rc.3` release notes and work them into the docs", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nThese [release notes](https://github.com/ethereum-optimism/optimism/releases/tag/op-batcher%2Fv1.7.2-rc.3) have good information that we should work into the docs.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd this content to our chain operator blob pages and probably carve out the batcher config section\r\n\r\n## Links to Related Pages\r\n\r\n- https://docs.optimism.io/builders/chain-operators/management/blobs\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "sbvegan", "2024-03-13T14:02:19Z", "2024-05-06T16:24:07Z", "2024-05-06T16:24:07Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM5_XDF9", 488, "[DOCS] clarification on unsafe transaction status description", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\n> Although the transaction is included in a block, it is still possible for the transaction to be excluded from the final blockchain if the Sequencer fails to publish the block to Ethereum in a timely manner. \r\n\r\nIts not clear what a \"timely manner\" would be. Is it longer than 10min or longer than 24 hours? Additional context would be helpful.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nClarification edits.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/dapp-developers/transactions/statuses#sequencer-confirmed--unsafe\r\n\r\n## Additional Context\r\n\r\nThis is from feedback we received in Discord\r\n", "CLOSED", 0, "sbvegan", "2024-02-15T14:58:03Z", "2024-05-07T21:38:36Z", "2024-05-07T21:38:36Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM5-S3KD", 472, "[DOCS] governance approved and audited smart contract call out", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nClearly call out the what versions of the smart contracts are production ready. We only suggest governance approved and audited versions; but this is not clear enough in the docs.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd callouts or a formal description of the contract release process so this information is more available.\r\n\r\n## Links to Related Pages\r\n\r\n- https://docs.optimism.io/stack/protocol/smart-contracts\r\n- https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#smart-contracts\r\n\r\n## Additional Context\r\n\r\nWe don't want people to deploy insecure contracts.\r\n", "CLOSED", 0, "sbvegan", "2024-02-05T15:48:47Z", "2024-05-07T21:00:39Z", "2024-05-07T21:00:39Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOKIwiaM58uzH9", 441, "Update required for Initialization via Genesis File on execution client", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nThere is `Initialization via Genesis File` option while https://docs.optimism.io/builders/node-operators/management/configuration#configuring-op-geth .\r\n\r\nOP-sepolia Genesis file is linked: https://networks.optimism.io/op-sepolia/genesis.json\r\n\r\nHowever this genesis is outdated. Canyon hard fork related values must be added. Desired json form can be referenced here. https://github.com/testinprod-io/op-erigon/issues/113#issuecomment-1868561095\r\n\r\nWhenever hard fork happens, this json should be updated. \r\n", "CLOSED", 0, "pcw109550", "2024-01-21T15:48:34Z", "2024-05-07T21:37:37Z", "2024-05-07T21:37:37Z", "ethereum-optimism/docs", "2025-08-30 13:04:25"]
["I_kwDOLB-lzc6Igx6p", 183, "Research Area: Aggregated Validity Proofs for OP Stack", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nIt should be possible to build an aggregated validity proof service for the OP Stack. A blockchain has inputs and outputs. The inputs to an OP Stack chain are all of the L1 data which is then mapped into execution payloads via the derivation pipeline. These execution payloads are inputs to the state transition function which ultimately produces the outputs, represented as the state root and execution logs.\r\n\r\nIf an aggregation service was scanning L1 to look for the inputs to the derivation function, it should be possible to identify the next set of inputs and then pass them to [kona](https://github.com/ethereum-optimism/kona) running in [sp1](https://github.com/succinctlabs/sp1) to generate a zkp. How would we know that its the full set of inputs? For example, a single `TransactionDeposited` event could be missing which would result in the wrong state. This may mean that the zkvm would need to do the full derivation process, ie actually observe all possible L1 data. This adds a lot of extra work for the zkvm to do, so what is the minimal amount of work that the zkvm actually has to do?\r\n\r\nOnce the proof is generated, then its possible to aggregate the proofs together. This could enable \"super transactions\" as noted by [Justin Drake](https://youtu.be/URCH2d1cdyg?si=1UMaP9BINbVESmfU). A super transaction is a transaction that executes across multiple rollups \"synchronously\", you can think of it as a bundle of regular transactions that are each individually signed for single chains but make up the full intention of the user. ", "OPEN", 0, "tynes", "2024-05-10T19:30:44Z", "2024-05-10T19:30:45Z", null, "ethereum-optimism/specs", "2025-08-30 13:04:43"]
["I_kwDOLB-lzc6Iemz_", 180, "Research Area: define fee scalars as static config", "this would entail dropping fee scalars from the L1 Attributes transaction and setting them through [`setConfig`](https://github.com/ethereum-optimism/specs/issues/122).\r\n\r\ncontext: https://github.com/ethereum-optimism/specs/pull/179#discussion_r1595989005", "CLOSED", 0, "0xfuturistic", "2024-05-10T13:21:10Z", "2024-05-10T15:02:15Z", "2024-05-10T15:02:15Z", "ethereum-optimism/specs", "2025-08-30 13:04:43"]
["I_kwDOLB-lzc6AQ5Kl", 61, "Fjord Hardfork Planning", "This issue is meant to create a place for coordination for the fjord hardfork. Please comment here with proposals or opinions on what should or should not be included. The tentative (but not fully accepted) list of features can be found [here](https://github.com/ethereum-optimism/specs/blob/main/specs/fjord/overview.md).\r\n\r\nBefore a feature can be considered acceptable for inclusion in a network upgrade, the feature must be specified in a pull request to this repository", "CLOSED", 0, "mslipper", "2024-02-23T22:41:03Z", "2024-05-07T20:14:17Z", "2024-05-07T20:14:17Z", "ethereum-optimism/specs", "2025-08-30 13:04:43"]
["I_kwDODjvEJM6G8nWQ", 10309, "L2 Genesis construction state dump parsing failure", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nWorking from https://github.com/ethereum-optimism/optimism/commit/b23d3f67bd5a5f9adb24d76353b8e10e3c04080d, I've encountered a panic which attempts to derive the chainId from the Permit2 preinstall. https://github.com/ethereum-optimism/optimism/blob/b23d3f67bd5a5f9adb24d76353b8e10e3c04080d/op-chain-ops/genesis/layer_two.go#L43 is the offending line and at least doesn't handle non-existence of the Permit2Addr from the state dump gracefully. \r\n\r\n```json\r\n[\r\n  \"0x019d6f4ff5e7f7479f9ad311db2adab745fff514\",\r\n  \"0x1d0e526e190d5cf464d5efb626b64beb5c0a9ffe\",\r\n  \"0x206ce7376c5f869c7230d95c269aab41cf3bd137\",\r\n  \"0x20b55a4b9c69c20052d502e0551510efc5b3fd22\",\r\n  \"0x2333114deb7ab1e78c6c7717d570c3ddd7a19432\",\r\n  \"0x253c7a62b053244a32b68977c4da8b51839c818b\",\r\n  \"0x2ae66ad450d98dc7046bbc76be45a18a90315be3\",\r\n  \"0x3374efe7ee2652bda7856789f1d167db8be5f62e\",\r\n  \"0x3bd5e6f9ae68dd1035b3a8398fc87194dea068db\",\r\n  \"0x3d5b60f668d8eb22ed7e86401fda80d1e74f80ed\",\r\n  \"0x409a393e18ebc9f02d07eac914992b526e4ccc52\",\r\n  \"0x4e59b44847b379578588920ca78fbf26c0b4956c\",\r\n  \"0x6951524d1f9a4192ccc3de6bd3db7a0c1fd05826\",\r\n  \"0x7b10d6a1d4df267ad6982843378a0fdb5c952ff4\",\r\n  \"0x7cba20a9c2662dd79d0bf9db4e4e7a6fe6990cba\",\r\n  \"0x8812efba71a611e7cb1f85bd9e58950f4fd2d6da\",\r\n  \"0x8cc78ea82c8287fc4602398aa5fc5ffa7397103f\",\r\n  \"0x8fb13d52658e7a96cf143b279de0d0fc8e6c78b8\",\r\n  \"0x9568d36e291c2c4c34fa5593fce73715abef6f9c\",\r\n  \"0x9605b422a26e7a45c690fb9e6952f56de3e9f5fd\",\r\n  \"0x9755d8db31b1f1847ab179f35d45c86e93f23d04\",\r\n  \"0x97d7b97ece30ca38db45e300b17da343540640d3\",\r\n  \"0x9baa3244565d51d9c7897c0eb6679ed4890e536e\",\r\n  \"0x9bfd6282b82b397f653e24f55627871cb14d465c\",\r\n  \"0xa3ae8f23250098bf49f22bc626c2b464a35a4131\",\r\n  \"0xa6b71e26c5e0845f74c812102ca7114b6a896ab2\",\r\n  \"0xa9c49fbab2791188fe7f46b7edfaa26e65b114a8\",\r\n  \"0xb2eb05e77dd09c60d853b07aaac391b57693f1c6\",\r\n  \"0xb361e3e9994fe2096a96659a9e1691b58f471f95\",\r\n  \"0xb459fd82b64f4c9120cdf618f2ecbf67b86d2cee\",\r\n  \"0xd8f91b839c2e79ffcaa296392503d9963bdbc7f1\",\r\n  \"0xd9db270c1b5e3bd161e8c8503c55ceabee709552\",\r\n  \"0xdd23cd146283a4f44b04a520caf370288ea5060e\",\r\n  \"0xde6e43af56a87352beef5f0d3a735f2cc54cb90f\",\r\n  \"0xe425bfa661f07b1f0d54665e2e0aaad3fc9535f0\",\r\n  \"0xed5974433baccd637ab49ebe35fda09726840cdc\",\r\n  \"0xf764a1e709d360f2d5209bed087241515759262c\"\r\n]\r\n```\r\n\r\nAbove are the keys taken from the state-dump and by would indicate that the Permit2Addr `0x000000000022D473030F116dDEE9F6B43aC78BA3` is not present \r\n\r\n\r\n**Steps to Reproduce**\r\n\r\nThe below is the configuration for the deployment on holesky. I deviated from the docs advice and ran the deployment by calling `runWithStateDump()` to output the json file for the genesis --l2-allocs arg.\r\n\r\n```json\r\n{\r\n  \"l1StartingBlockTag\": \"0x14beb91ca9994ccbc266734ce17e77f8a0bd55accf037bf1420d2ed3874e2a61\",\r\n\r\n  \"l1ChainID\": 17000,\r\n  \"l2ChainID\": 7169398,\r\n  \"l2BlockTime\": 2,\r\n  \"l1BlockTime\": 12,\r\n\r\n  \"maxSequencerDrift\": 600,\r\n  \"sequencerWindowSize\": 3600,\r\n  \"channelTimeout\": 300,\r\n\r\n  \"p2pSequencerAddress\": \"0x1cE5497aC297291623b9dd4b17d0368E27F3B59f\",\r\n  \"batchInboxAddress\": \"0xff00000000000000000000000000000000042069\",\r\n  \"batchSenderAddress\": \"0xAc60f35070E6afa67f5E56a96ad35503FA429618\",\r\n\r\n  \"l2OutputOracleSubmissionInterval\": 120,\r\n  \"l2OutputOracleStartingBlockNumber\": 0,\r\n  \"l2OutputOracleStartingTimestamp\": 1714051776,\r\n\r\n  \"l2OutputOracleProposer\": \"0xaf5506962452194d631DA5258d81d71dfB34A4F2\",\r\n  \"l2OutputOracleChallenger\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n\r\n  \"finalizationPeriodSeconds\": 12,\r\n\r\n  \"proxyAdminOwner\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n  \"baseFeeVaultRecipient\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n  \"l1FeeVaultRecipient\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n  \"sequencerFeeVaultRecipient\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n  \"finalSystemOwner\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n  \"superchainConfigGuardian\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n\r\n  \"baseFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\r\n  \"l1FeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\r\n  \"sequencerFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\r\n  \"baseFeeVaultWithdrawalNetwork\": 0,\r\n  \"l1FeeVaultWithdrawalNetwork\": 0,\r\n  \"sequencerFeeVaultWithdrawalNetwork\": 0,\r\n\r\n  \"gasPriceOracleOverhead\": 2100,\r\n  \"gasPriceOracleScalar\": 1000000,\r\n\r\n  \"enableGovernance\": true,\r\n  \"governanceTokenSymbol\": \"MEV_OP_GOV\",\r\n  \"governanceTokenName\": \"MEV Optimism Governance Token\",\r\n  \"governanceTokenOwner\": \"0xF6Ddd92616b3c837012311AdAEA7644879aB4c4A\",\r\n\r\n  \"l2GenesisBlockGasLimit\": \"0x1c9c380\",\r\n  \"l2GenesisBlockBaseFeePerGas\": \"0x3b9aca00\",\r\n  \"l2GenesisRegolithTimeOffset\": \"0x0\",\r\n\r\n  \"eip1559Denominator\": 50,\r\n  \"eip1559DenominatorCanyon\": 250,\r\n  \"eip1559Elasticity\": 6,\r\n\r\n  \"l2GenesisDeltaTimeOffset\": null,\r\n  \"l2GenesisCanyonTimeOffset\": \"0x0\",\r\n\r\n  \"systemConfigStartBlock\": 0,\r\n\r\n  \"requiredProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"recommendedProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n\r\n  \"faultGameAbsolutePrestate\": \"0x03c7ae758795765c6664a5d39bf63841c71ff191e9189522bad8ebff5d4eca98\",\r\n  \"faultGameMaxDepth\": 44,\r\n  \"faultGameClockExtension\": 0,\r\n  \"faultGameMaxClockDuration\": 600,\r\n  \"faultGameGenesisBlock\": 0,\r\n  \"faultGameGenesisOutputRoot\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"faultGameSplitDepth\": 14,\r\n\r\n  \"faultGameWithdrawalDelay\": 604800,\r\n\r\n  \"preimageOracleMinProposalSize\": 1800000,\r\n  \"preimageOracleChallengePeriod\": 86400\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe genesis.json and rollup.json files to be constructed correctly\r\n\r\n**Environment Information:**\r\n - Operating System: NixOS/Linux\r\n - Package Version https://github.com/ethereum-optimism/optimism/commit/b23d3f67bd5a5f9adb24d76353b8e10e3c04080d\r\n\r\n**Configurations:**\r\n\r\n```bash\r\ngo run cmd/main.go genesis l2 --l2-allocs ../packages/contracts-bedrock/state-dump-17000.json  --deploy-config ../packages/contracts-bedrock/deploy-config/holesky.json --l1-deployments ../packages/contracts-bedrock/240425171831_holesky_addresses.json --outfile.l2 genesis.json --outfile.rollup rollup.json --l1-rpc $L1_RPC_URL\r\n```", "CLOSED", 0, "Padraic-O-Mhuiris", "2024-04-25T16:39:32Z", "2024-04-30T13:31:12Z", "2024-04-30T13:31:12Z", "ethereum-optimism/optimism", "2025-08-30 13:06:23"]
["I_kwDODjvEJM6BXGak", 9752, "Docs: Create L2 Rollup Demo - failed to init L2: incorrect L2 RPC chain id 1, expected 42069", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nFailing at step 3 of ['Start Op Node'](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#start-op-node)\r\n\r\nAfter following through the [documentation](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup): I'm running into the following error.\r\n\r\n[Line in codebase](https://github.com/ethereum-optimism/optimism/blob/eac79900756b78374893b2a88e034f9d60d91fd7/op-node/rollup/types.go#L210)\r\n\r\nWas the `eth_chainId` updated in this test to be 1?\r\n\r\n```\r\nINFO [03-05|17:31:34.859] Not opted in to ProtocolVersions signal loading, disabling ProtocolVersions contract now.\r\nINFO [03-05|17:31:34.860] No persisted sequencer state loaded\r\nINFO [03-05|17:31:34.860] Rollup Config                            l2_chain_id=42069 l2_network=\"unknown L2\" l1_chain_id=11,155,111 l1_network=sepolia l2_start_time=1,709,673,312 l2_block_hash=0x5746de1aa18a7b68a7df895b67d6324c7c2b5fedf42a055a955edcaf0012f570 l2_block_number=0 l1_block_hash=0xbf8c2691038c3bac147d4fda7d1c4f16f8a27de28743aa1309e5fbc369bc2217 l1_block_number=5,424,053 regolith_time=\"@ genesis\" canyon_time=\"@ genesis\" delta_time=\"(not configured)\" ecotone_time=\"(not configured)\" fjord_time=\"(not configured)\" interop_time=\"(not configured)\"\r\nINFO [03-05|17:31:34.860] Initializing rollup node                 version=v0.0.0-a06cae81-1705510057\r\nWARN [03-05|17:31:35.096] No beacon endpoint configured. Configuration is mandatory for the Ecotone upgrade\r\nERROR[03-05|17:31:35.102] Error initializing the rollup node       err=\"failed to init L2: incorrect L2 RPC chain id 1, expected 42069\"\r\nCRIT [03-05|17:31:35.102] Application failed                       message=\"failed to setup: unable to create the rollup node: failed to init L2: incorrect L2 RPC chain id 1, expected 42069\"\r\n```\r\n\r\n\r\n**Steps to Reproduce**\r\n\r\nFollowed the demo to step 3 of the section titled `Start Op-Node`.\r\n\r\n**Expected behavior**\r\n\r\nExpected the op-node to boot successfully on my local machine.\r\n\r\n\r\n**Environment Information:**\r\n - Operating System: MacOS 14.2.1\r\n - Package Version (or commit hash): [a06cae81ed60c85d1566f48f45d9f9c0e48cc47c](https://github.com/ethereum-optimism/optimism/commit/a06cae81ed60c85d1566f48f45d9f9c0e48cc47c) - Branch: [tutorials/chain](https://github.com/ethereum-optimism/optimism/tree/tutorials/chain)\r\n\r\nConfiguration files that were generated as part of the setup:\r\n\r\n- [getting-started.json](https://github.com/ethereum-optimism/optimism/files/14502396/getting-started.json)\r\n- [genesis.json](https://github.com/ethereum-optimism/optimism/files/14502390/genesis.json)\r\n- [rollup.json](https://github.com/ethereum-optimism/optimism/files/14502374/rollup.json)\r\n\r\n", "CLOSED", 0, "blmalone", "2024-03-05T23:22:05Z", "2024-05-02T16:44:24Z", "2024-03-06T16:48:26Z", "ethereum-optimism/optimism", "2025-08-30 13:06:23"]
["I_kwDODjvEJM55pODM", 8614, "Cannot find `op-stack-go:devnet` image when running local chain", "I want to run a local development environment following the https://docs.optimism.io/chain/testing/dev-node guide.  After typing `make devnet-up`, run into the error:\r\n\r\n```sh\r\n#15 [ops-bedrock_l2 internal] load metadata for us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:optimism\r\n#15 CANCELED\r\n------\r\n > [us-docker.pkg.dev/oplabs-tools-artifacts/images/op-proposer:devnet internal] load metadata for us-docker.pkg.dev/oplabs-tools-artifacts/images/op-stack-go:devnet:\r\n------\r\nfailed to solve: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-stack-go:devnet: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-stack-go:devnet: not found\r\nTraceback (most recent call last):\r\n  File \"/home/bear/coding/rust-space/optimism/./bedrock-devnet/main.py\", line 9, in <module>\r\n    main()\r\n  File \"/home/bear/coding/rust-space/optimism/./bedrock-devnet/main.py\", line 5, in main\r\n    devnet.main()\r\n  File \"/home/bear/coding/rust-space/optimism/bedrock-devnet/devnet/__init__.py\", line 109, in main\r\n    run_command(['docker', 'compose', 'build', '--progress', 'plain',\r\n  File \"/home/bear/coding/rust-space/optimism/bedrock-devnet/devnet/__init__.py\", line 392, in run_command\r\n    return subprocess.run(\r\n  File \"/usr/lib/python3.10/subprocess.py\", line 526, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['docker', 'compose', 'build', '--progress', 'plain', '--build-arg', 'GIT_COMMIT=5fb16e2fb07b25212c2b2ae08d246642240f9fd6', '--build-arg', 'GIT_DATE=1702436055']' returned non-zero exit status 17.\r\nmake: *** [Makefile:124: devnet-up] Error 1\r\n```\r\nIt seems that there is no such an image called `op-stack-go:devnet` anymore in the https://console.cloud.google.com/artifacts/docker/oplabs-tools-artifacts/us/images. Any insight from the maintainers of this repo?\r\n", "CLOSED", 0, "boundless-forest", "2023-12-14T03:44:00Z", "2024-05-02T02:11:17Z", "2024-02-18T06:31:37Z", "ethereum-optimism/optimism", "2025-08-30 13:06:23"]
["I_kwDOKIwiaM6IuWXP", 687, "Update Fault Proofs Notice Page", "The changes and feedback needed are for this page:\n<https://docs.optimism.io/builders/notices/fp-changes>\n\nChanges:\nCallout at top: launch message to reflect \u201cSummer 2024\u201d. (Remove Sepolia messaging.)\nCallout at top that withdrawals put in right before the upgrade will need to be resubmitted post-upgrade.\nNew section: changes to withdrawal times and process, w.r.t. the max time is longer.\n\nNew Callout in \u201cFor Bridges and CEXes\u201d section:\nIMPORTANT NOTE FOR BRIDGES: Withdrawals that haven\u2019t finalized before the upgrade occurs will be unable to be finalized post-upgrade without resubmitting. This means these withdrawals will need to go through a new 7-day period. The time accrued before the upgrade will not count.\nThis means the withdrawal time could be as long as 13-14 days during the upgrade window. (If you submit it ~6 days before the upgrade, then must re-submit after the upgrade, you will have to wait a new seven days.)", "CLOSED", 0, "cpengilly", "2024-05-13T21:09:32Z", "2024-05-17T22:51:15Z", "2024-05-17T22:51:15Z", "ethereum-optimism/docs", "2025-08-30 13:07:05"]
["I_kwDOKIwiaM6Itntb", 684, "Delete Optimist Profile page", "Delete optimist profile page\n<https://docs.optimism.io/chain/identity/optimist-profile>\n\nset redirects to point to https://docs.optimism.io/chain/identity/overview", "CLOSED", 0, "cpengilly", "2024-05-13T19:29:51Z", "2024-05-13T21:04:58Z", "2024-05-13T21:04:58Z", "ethereum-optimism/docs", "2025-08-30 13:07:05"]
["I_kwDOKIwiaM6AeJUT", 516, "[DOCS] Split Node Config Page", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nWe'd like to clean up the [node configuration page](https://docs.optimism.io/builders/node-operators/management/configuration). With so much scrolling on this page it becomes a usability concern.\r\n\r\n## Description of the Documentation You'd Like\r\nsplit node config page into `op-node` and `op-geth` and maybe an `overview` page for how they work together:\r\n\r\n- [ ] overview with just the top section and links to the other two pages\r\n- [ ] op-geth (minimal base config + all config options)\r\n- [ ] op-node (minimal base config + all config options)\r\n\r\n", "CLOSED", 0, "cpengilly", "2024-02-27T00:01:45Z", "2024-05-15T19:39:22Z", "2024-05-15T19:39:21Z", "ethereum-optimism/docs", "2025-08-30 13:07:05"]
["I_kwDOLB-lzc6IJbal", 174, "Hardfork Names", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe have ran out of known hardfork names and it is blocking coordination and progress on new features. This issue exists to track a proposal on the next set of names. The theme is geology related and alphabetical so its obvious the order that they came in. The words should not be copyrightable to ensure that we cannot be sued in some way for using them. Picking names opens up a huge door for bikeshedding, opening an issue rather than a pull request as there is an [open PR](https://github.com/ethereum-optimism/specs/pull/145) that restructures the repo and it would clobber the diff. We should open a PR as soon as we can with the boilerplate for these so that we can easily target specific network upgrades with specs.\r\n\r\n- Granite\r\n- Holocene\r\n- Igneous\r\n- Jovian\r\n- Krypton\r\n- Lava\r\n- Monsoon\r\n- Nebula\r\n- Orogeny\r\n- Permafrost", "CLOSED", 0, "tynes", "2024-05-07T20:28:17Z", "2024-05-13T18:02:29Z", "2024-05-13T18:02:28Z", "ethereum-optimism/specs", "2025-08-30 13:07:13"]
["I_kwDOLB-lzc6F44fF", 131, "add a contributing doc to the specs repo", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nThere isn't a clear path for new contributors to ask questions or help write new specs.\r\n\r\n**Describe the solution you'd like**\r\n\r\n- Create a  `CONTRIBUTING.md` file in the root of this repo\r\n- Add an introduction \r\n- Add a way someone can ask about experimental specs\r\n- Add a way someone can start writing a new spec\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\n\r\nExample of someone being confused on how to ask about the specs: https://github.com/ethereum-optimism/developers/discussions/299#discussioncomment-8936831\r\n", "CLOSED", 0, "sbvegan", "2024-04-16T15:00:51Z", "2024-05-13T10:51:11Z", "2024-05-13T10:51:11Z", "ethereum-optimism/specs", "2025-08-30 13:07:13"]
["I_kwDODjvEJM6ITDvz", 10460, "SDK not working for Mode withdraws", "**Bug Description**\r\nI am using a bot to automate withdraws from a bunch of OP stack chains for our native minting system at ether.fi. The script workings for base and blast, but not for Mode. I have confirmed with their team that the configuration is correct. \r\n\r\nError throw by the script below\r\n```\r\nError: withdrawal index 0 out of bounds. There are 0 withdrawals\r\n    at CrossChainMessenger.toCrossChainMessage (/Users/jacobfirek/Desktop/js-bot-runner/node_modules/.pnpm/@eth-optimism+sdk@3.1.0_ethers@5.7.2/node_modules/@eth-optimism/sdk/dist/cross-chain-messenger.js:448:23)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at async CrossChainMessenger.getMessageStatus (/Users/jacobfirek/Desktop/js-bot-runner/node_modules/.pnpm/@eth-optimism+sdk@3.1.0_ethers@5.7.2/node_modules/@eth-optimism/sdk/dist/cross-chain-messenger.js:454:26)\r\n    at async checkAndProveMessage (/Users/jacobfirek/Desktop/js-bot-runner/botMode.js:45:32)\r\n```\r\n\r\n**Steps to Reproduce**\r\nHere is a simple script I have made that recreates the issue\r\n```\r\nconst ethers = require('ethers');\r\nconst optimism = require('@eth-optimism/sdk');\r\nrequire('dotenv').config();\r\n\r\n// set up RPC providers, wallets and contract addresses\r\nconst l1Provider = new ethers.providers.JsonRpcProvider('https://mainnet.infura.io/v3/3cfca4bf32d54476ae33585ba8983c52');\r\nconst modeProvider = new ethers.providers.JsonRpcProvider('https://mode-mainnet.blastapi.io/816787c6-56dc-4717-8354-5f5f4128590b');\r\nconst l1Wallet = new ethers.Wallet(process.env.PRIVATE_KEY, l1Provider);\r\nconst l2Wallet = new ethers.Wallet(process.env.PRIVATE_KEY, modeProvider);\r\n\r\n// configuring mode contracts\r\nconst AddressManager = '0x50eF494573f28Cad6B64C31b7a00Cdaa48306e15';\r\n// Proxy addresses below\r\nconst L1CrossDomainMessenger = '0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f';\r\nconst L1StandardBridge = '0x735aDBbE72226BD52e818E7181953f42E3b0FF21'; \r\nconst OptimismPortal = '0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07';\r\nconst L2OutputOracle = '0x4317ba146D4933D889518a3e5E11Fe7a53199b04';\r\n\r\n// configure the mode messenger\r\nconst modeMessenger = new optimism.CrossChainMessenger({\r\n    l1ChainId: 1,\r\n    l2ChainId: 34443,\r\n    l1SignerOrProvider: l1Wallet,\r\n    l2SignerOrProvider: l2Wallet,\r\n\r\n    contracts: {\r\n        l1: {\r\n          AddressManager,\r\n          L1CrossDomainMessenger,\r\n          L1StandardBridge,\r\n          OptimismPortal,\r\n          L2OutputOracle,\r\n     \r\n          // Need to be set to zero for this version of the SDK.\r\n          StateCommitmentChain: ethers.constants.AddressZero,\r\n          CanonicalTransactionChain: ethers.constants.AddressZero,\r\n          BondManager: ethers.constants.AddressZero,\r\n        }\r\n      }\r\n});\r\n\r\nasync function checkAndProveMessage(withdraw) {\r\n    console.log(`Checking message ${withdraw}`);\r\n    try {\r\n        let curMessageStatus = await modeMessenger.getMessageStatus(withdraw);\r\n        console.log(`Message ${withdraw} status: ${optimism.MessageStatus[curMessageStatus]}`);\r\n\r\n        if (curMessageStatus === optimism.MessageStatus.READY_TO_PROVE) {\r\n            console.log(`Proving message ${withdraw}`);\r\n            const res = await modeMessenger.proveMessage(withdraw);\r\n            console.log(`Proving result: ${res}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n// https://explorer.mode.network/tx/0x803c0fc86ad9d12a42c3cda863971c661943e8be819d353e02d8be6141ffe3e3\r\ncheckAndProveMessage('0x803c0fc86ad9d12a42c3cda863971c661943e8be819d353e02d8be6141ffe3e3');\r\n```\r\n**Expected behavior**\r\nIt identifies the transaction as a withdraw and begins the proving process.\r\n\r\n\r\n\r\n**Environment Information:**\r\npackage.json\r\n```\r\n{\r\n\t\"dependencies\": {\r\n\t\t\"ethers\": \"^5\",\r\n\t\t\"@eth-optimism/sdk\": \"3.1.0\",\r\n\t\t\"dotenv\": \"^10.0.0\"\r\n\t}\r\n}\r\n```", "CLOSED", 0, "jtfirek", "2024-05-09T00:46:11Z", "2024-05-10T02:07:12Z", "2024-05-10T02:07:12Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM6IAiCO", 10426, "Harcoded `DEFAULT_RESOURCE_CONFIG` leads to invalid `ChainAssertion` of upgraded `SystemConfig`", "The `ChainAssertions` script is, from what I know, one of the best current ways to validate state transition after protocol upgrades.  One issue appears when validating state of the `SystemConfig` after its' values have been changed.  Specifically, `ChainAssertions.checkSystemConfig()` depends on the default values provided:\r\nhttps://github.com/ethereum-optimism/optimism/blob/29c7b445e17763aee0e73676e19053d08e712821/packages/contracts-bedrock/scripts/ChainAssertions.sol#L80\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/29c7b445e17763aee0e73676e19053d08e712821/packages/contracts-bedrock/src/libraries/Constants.sol#L40-L51\r\n\r\nThis means that if a protocol deploys an op-stack and later updates their resource config, this assertion will fail as it validates state on the original value.\r\n\r\nI suggest these values are migrated from hardcoding to imports.", "CLOSED", 0, "pegahcarter", "2024-05-06T21:48:29Z", "2024-05-07T21:14:58Z", "2024-05-07T21:14:58Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM6H_W4q", 10422, "Custom gastoken  Withdraw  fail", "Deploy optimism lates develop branch with   \r\n  \"useCustomGasToken\": true,\r\n  \"customGasTokenAddress\": \"my erc20 token\"\r\ndeposit work fine but withdraw fail. L1CrossDomainMessengerProxy can't transfer ERC20 out. (got revert)\r\n![Screenshot 2567-05-07 at 01 50 48](https://github.com/ethereum-optimism/optimism/assets/322569/e1a8bf5c-7a8e-42ef-8dfd-26f3b545000c)\r\n  ", "CLOSED", 0, "dome", "2024-05-06T18:56:55Z", "2024-05-08T15:42:06Z", "2024-05-08T12:10:08Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM6G29Fp", 10303, "Function `sync()` is not implemented in your script", "when I  deploy a local node with the branch `feat/custom-gas-token`,  I got an error like this:\r\n\r\nforge script scripts/Deploy.s.sol:Deploy --sig 'sync()' --rpc-url $L1_RPC_URL\r\n\r\n[\u2806] Compiling...\r\nNo files changed, compilation skipped\r\nError: \r\nFunction `sync()` is not implemented in your script", "CLOSED", 0, "starlzy", "2024-04-25T03:04:09Z", "2024-05-09T09:38:40Z", "2024-05-09T09:38:40Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM6CaXNr", 9870, "op build error", "hello\r\nsetting branch is develop\r\ncentos7\r\nfoundry version -> 4.7.0\r\ngo version -> go version go1.22.1 linux/amd64\r\nnode version -> v20.11.1\r\npnpm version -> 8.15.4\r\nmake version -> 4.3\r\n\r\nexecute pnpm install is success but execute pnpm build is error\r\n![error](https://github.com/ethereum-optimism/optimism/assets/93653642/e2ddcb36-afe7-4134-95b5-a768177486d3)\r\n\r\nWhat should I do to compile successfully ?\r\nThs\r\n", "CLOSED", 0, "zhouhanker", "2024-03-15T08:11:10Z", "2024-05-09T09:42:40Z", "2024-05-09T09:42:40Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM570vuK", 8955, "issues after hardfork", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nCan't get node synced after the hardfordk (we missed and upgraded after)\r\n\r\ngetting in the log\r\n````\r\nt=2024-01-11T19:16:32+0000 lvl=warn msg=\"resetting back RPC preferences, please review RPC provider kind setting\" kind=standard\r\nt=2024-01-11T19:16:32+0000 lvl=warn msg=\"failed to use selected RPC method for receipt fetching, temporarily falling back to alternatives\" provider_kind=standard failed_method=\", , , , eth_getBlockReceipts\" fallback=\"eth_getTransactionReceipt (batched)\" err=\"the method eth_getBlockReceipts does not exist/is not available\"\r\nt=2024-01-11T19:16:32+0000 lvl=warn msg=\"Derivation process temporary error\"     attempts=1 err=\"temp: failed to fetch receipts of L1 block 0x1d278240f1110b4db26d720c2def6d3134fb22c27410fe0533e28ac3e86b9609:18984906 (parent: 0x01ae66d388e4aa3e0d4d828b45ce8403305ddb5a8fea9e7bdf3cf348c0403b84:18984905) for L1 sysCfg update: the method eth_getBlockReceipts does not exist/is not available\"\r\nt=2024-01-11T19:16:36+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x1d278240f1110b4db26d720c2def6d3134fb22c27410fe0533e28ac3e86b9609:18984906 originBehind=true\r\nt=2024-01-11T19:16:39+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x7aa0ebb5fb1687b237b85ed8908accb47e84e431e29ff9470b6c477c04507409:18984907 originBehind=true\r\nt=2024-01-11T19:16:42+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x8d0de37dd809297fe7d1c6652b42716a111666e32f2bc331891b81578d82d766:18984908 originBehind=true\r\nt=2024-01-11T19:16:44+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0xadd93ad6e3b398b71f4ee735fb50746c68c0d8315a37a2f2375eadd16e0a1604:18984909 originBehind=true\r\nt=2024-01-11T19:16:46+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x139b8fe5f4b4d60f5d80ff6ef24a3bd613c42c1c0a3579f932dbc880f8c2fa9e:18984910 originBehind=true\r\nt=2024-01-11T19:16:46+0000 lvl=info msg=\"created new channel\"                    origin=0x139b8fe5f4b4d60f5d80ff6ef24a3bd613c42c1c0a3579f932dbc880f8c2fa9e:18984910 channel=cfd1b6dba77c9639245d558b60a498d2 length=117,477 frame_number=0 is_last=true\r\nt=2024-01-11T19:16:46+0000 lvl=info msg=\"Reading channel\"                        channel=cfd1b6dba77c9639245d558b60a498d2 frames=1\r\nt=2024-01-11T19:16:48+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x73df738869da3c269e84b280b762995afdcfc2d162aab08607b46e2c1ba63cb6:18984911 originBehind=true\r\nt=2024-01-11T19:16:50+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x4c3d5d617898043264a63bc784436385a82a06d170cee3db5d57203b005572cb:18984912 originBehind=true\r\nt=2024-01-11T19:16:52+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x8679ceead005a9030dd4becf05816ce9852368a895aa79e3c06b53451232337b:18984913 originBehind=true\r\nt=2024-01-11T19:16:54+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x6ff1eeb858acd55696b6f8833f432f8fdb425423618735aef66ee85ac2613257:18984914 originBehind=true\r\nt=2024-01-11T19:16:56+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x118e3e3c5cf41847aa53a9d3fadb0ac8a9641706e638c924530c0cb0117535cf:18984915 originBehind=true\r\nt=2024-01-11T19:16:59+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0xeb35bdce935c60d9463644a5311a385dfaa788b648ec80f1d1b5f81f9af39347:18984916 originBehind=true\r\nt=2024-01-11T19:16:59+0000 lvl=info msg=\"created new channel\"                    origin=0xeb35bdce935c60d9463644a5311a385dfaa788b648ec80f1d1b5f81f9af39347:18984916 channel=f3dfc7ab4dd7e366d31a102b76edf30e length=116,667 frame_number=0 is_last=true\r\n...\r\nt=2024-01-11T19:18:12+0000 lvl=warn msg=\"L1 head signal indicates a possible L1 re-org\" old_l1_head=0x8fe22f9278a149e2915c57b728062c2ce661528c78c7e602454fb970c942830b:18985711 new_l1_head_parent=0x72c871599960cdbed85590610f61b5c21d584fb581baa42f7d4a9dd8dc2c8a4c new_l1_head=0xf711fba7266fcda43087721208d03d35b7b1dd6d59a679ac4b42d6b1f9787481:18985713\r\nt=2024-01-11T19:18:13+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0xf711fba7266fcda43087721208d03d35b7b1dd6d59a679ac4b42d6b1f9787481:18985713 originBehind=false\r\nt=2024-01-11T19:18:25+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x19c6d40f0faadaee8f2913f2b08974e8df1bc08b58b87a7296b0fbcbe4573bf5:18985714 originBehind=false\r\nt=2024-01-11T19:18:50+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x3d1ed19490b5e807d0d5b1375402af15c8a5616f72c96a848ee6fc5a2de1fbc4:18985715 originBehind=false\r\nt=2024-01-11T19:18:51+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0xd31fcd4b8a06db5ebd0131d7cb78427725d3fe04b2b4a42474d431c8215e81d5:18985716 originBehind=false\r\n````\r\n\r\n**To Reproduce**\r\n- using both op-node:v1.4.3-rc.3 and op-node:v1.4.0 (another node)\r\n- op-geth:v1.101304.2\r\n- l2geth:0.5.31\r\n\r\n**Expected behavior**\r\nNode is synced and on the tip\r\n", "CLOSED", 0, "tmeinlschmidt", "2024-01-11T19:19:23Z", "2024-05-09T09:42:24Z", "2024-05-09T09:42:24Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM54ZN5Q", 8382, "contracts-bedrock: initializable test coverage", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe look through the various contracts to see which have `_initialized` and then assert that they cannot be initialized again. Right now we only do this for contracts in `src/{L1,L2}` but we should instead be testing all of the contracts in `src`.\r\n\r\nSee https://github.com/ethereum-optimism/optimism/pull/8377 for more details", "CLOSED", 0, "tynes", "2023-12-01T01:43:31Z", "2024-05-09T09:40:47Z", "2024-05-09T09:40:47Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM50BLgK", 7711, "Parse Solidity Deploy Config Lazily", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nThe [DeployConfig](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/DeployConfig.s.sol) contract is used to parse the JSON deploy config files. The problem is that some deploy config values are for testnet only features, like the fault proof. Since all config is parsed in the constructor, this means that all deploy config files need to contain all of the config values even if the config values aren't used in a particular script execution. The deploy config contract should be updated to parse lazily, meaning that it no longer reads the entire JSON file in the constructor but instead it has a getter for each value and reads the JSON file inside of each getter for the particular value.", "CLOSED", 0, "tynes", "2023-10-17T03:29:04Z", "2024-05-09T09:41:09Z", "2024-05-09T09:41:09Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM5tqEM2", 6629, "feat: Create a @eth-optimism/configs package", "## Affected Packages\r\n\r\nAll TS packages\r\n\r\n## Problem\r\n\r\n- Can't reuse our base configs in other repos\r\n- Caches like nx cache are more complicated to configure to break when configs change\r\n- Root of repo is pretty noisy with configs\r\n- It's generally a bad practice in package based repos to do absolute paths to outside of the package\r\n\r\n## Proposed solution\r\n\r\n1. Create a new package `@eth-optimism/configs` in `packages/configs`\r\n2. Move tsconfig, prettier config, and eslint config to this package\r\n3. Update references to configs from `../../tsconfig.json` to `@eth-optimism/configs/tsconfig.json`\r\n4. Clean up: Remove the configs from nx.json\r\n5. Clean up: remove the configs from `checked-changed` python script", "CLOSED", 0, "roninjin10", "2023-08-07T15:39:44Z", "2024-05-09T09:39:39Z", "2024-05-09T09:39:39Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDODjvEJM5lf0ic", 5671, "op-node: allow DataFromEVMTransactions to return error", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen switching Data Availability layers, there can be a temporary connection error fetching frame data corresponding to the frame pointer posted on ethereum. Right now ethereum related temporary errors are handled by passing `TemporaryError` for e.g. in `DataSource.Next`:\r\n\r\n```\r\n// Next returns the next piece of data if it has it. If the constructor failed, this\r\n// will attempt to reinitialize itself. If it cannot find the block it returns a ResetError\r\n// otherwise it returns a temporary error if fetching the block returns an error.\r\nfunc (ds *DataSource) Next(ctx context.Context) (eth.Data, error) {\r\n                ...\r\n\t\t} else if errors.Is(err, ethereum.NotFound) {\r\n\t\t\treturn nil, NewResetError(fmt.Errorf(\"failed to open calldata source: %w\", err))\r\n\t\t} else {\r\n\t\t\treturn nil, NewTemporaryError(fmt.Errorf(\"failed to open calldata source: %w\", err))\r\n\t\t}\r\n\t}\r\n```\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nIt would be useful if `DataFromEVMTransactions` also returned an error, so that the caller could wrap it in a `TemporaryError`, similar to the above caller. This way, temporary errors from resolving the frame data from the pointer would be handled gracefully and retried. Right now there is no way for an alternate Data Availability layer resolving frame data from the pointer to signal that there's a temporary error and the caller _must_ retry. Hence, the suggestion is to simply add `error` to the function signature:\r\n\r\n`func DataFromEVMTransactions(config *rollup.Config, daCfg *rollup.DAConfig, batcherAddr common.Address, txs types.Transactions, log log.Logger) []eth.Data {`\r\n\r\nto\r\n\r\n`func DataFromEVMTransactions(config *rollup.Config, daCfg *rollup.DAConfig, batcherAddr common.Address, txs types.Transactions, log log.Logger) ([]eth.Data, error) {`\r\n\r\nand have the caller return a wrapped temporary error in case of a connection error to the Data Availability layer.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAs an alternative the Data Availability layer can maintain a fork of the same code with this error plugged in, however it would be very helpful to have this handled upstream so that an integration would be easier in the future, for e.g. with an interface.\r\n\r\n**Additional context**\r\n\r\nThis would be a small function signature change for upstream but it would be really helpful in keeping the forks easier to maintain.", "CLOSED", 0, "tuxcanfly", "2023-05-09T22:34:39Z", "2024-05-09T09:40:16Z", "2024-05-09T09:40:16Z", "ethereum-optimism/optimism", "2025-08-30 13:07:55"]
["I_kwDOH2Qg5s6JkDKe", 318, "op-geth storage update really slow", "#### System information\r\n\r\nOP-Geth version: v1.101315.0\r\nOS & Version: Ubuntu 22.04\r\n\r\n#### Issue\r\n\r\nHello I have a problem with my op-geth. I started noticing that every few blocks, some block is having lags and later all the blocks are lagged.\r\n\r\nI checked logs:\r\n```\r\nINFO [05-15|03:49:55.353] Imported new potential chain segment     number=120,073,108 hash=1a8e1c..47ceba blocks=1         txs=3          mgas=6.790   elapsed=1.782s       mgasps=3.808   snapdiffs=1.75MiB    triedirty=683.11MiB\r\nINFO [05-15|03:49:55.357] Chain head was updated                   number=120,073,108 hash=1a8e1c..47ceba root=ea42f3..df4de7 elapsed=2.894955ms\r\nINFO [05-15|03:50:00.853] Imported new potential chain segment     number=120,073,109 hash=65ae97..b4a7ab blocks=1         txs=13         mgas=21.869  elapsed=5.492s       mgasps=3.982   snapdiffs=1.80MiB    triedirty=686.77MiB\r\nINFO [05-15|03:50:02.383] Chain head was updated                   number=120,073,109 hash=65ae97..b4a7ab root=0e6af5..0c9dd8 elapsed=7.05042ms\r\n```\r\nand you can see that elapsed times are really high, even 5s.\r\n\r\nI checked also dashboard with metrics and I could see that the biggest issue is `storage update` - avg time for past 1h is almost 2s and max 3.3s.\r\n![image](https://github.com/ethereum-optimism/op-geth/assets/24922834/a00ba8b2-d646-4a60-92e1-957ecb49d365)\r\n\r\nCPU:\r\n![image](https://github.com/ethereum-optimism/op-geth/assets/24922834/9ddf73f7-c031-4e18-83a0-b7891f424eb0)\r\n\r\nMemory:\r\n![image](https://github.com/ethereum-optimism/op-geth/assets/24922834/cc7c7fc0-3001-454f-90bd-be08ea02009c)\r\n\r\nDisk:\r\n![image](https://github.com/ethereum-optimism/op-geth/assets/24922834/d71d6366-4b94-4255-9dad-2cae78b11f4d)\r\n\r\nIdeally for me would be if block processing and updating would be always less than 1s.\r\n\r\n#### Steps to reproduce the behaviour\r\nRun a node from source or docker (I tried both).\r\n", "OPEN", 0, "Rogalek", "2024-05-21T10:18:16Z", "2024-05-21T10:30:59Z", null, "ethereum-optimism/op-geth", "2025-08-30 13:09:45"]
["I_kwDOLB-lzc6JXbC8", 199, "Config: Sequencing Window Incorrect", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nPer `configurability.md`, the sequencing window is described in terms of time (hours) when the only thing that the protocol can see is in terms of \"base chain blocks\". For an L2 system, the base chain would be L1.\r\n\r\nThe following line says `12 hours`\r\n\r\nhttps://github.com/ethereum-optimism/specs/blob/4f9b6abad85a4d8cfa6a7eb653480841cc535bb0/specs/protocol/configurability.md?plain=1#L52\r\n\r\nLooking at the [mainnet deploy config](https://github.com/ethereum-optimism/optimism/blob/93891de2176f6f997da80a4de8de84466164bb25/packages/contracts-bedrock/deploy-config/mainnet.json#L10), you can see that the value is `3600` which is not 12 hours but actually 12 hours given the assumption of 12 second blocks, $3600 * 12\\ seconds \\div 60\\frac{seconds}{minute} \\div 60\\frac{minute}{hour} = 12\\ hours$.\r\n\r\nThis is an important distinction to make as it impacts L3s or chains that operate above base layers that do not have 12 second blocktime. We should be exactly particular about what is legible to the protocol so this should be updated to say \"3600 base layer blocks (12 hours for an L2 on Ethereum, assuming 12s L1 blocktime)\"\r\n", "CLOSED", 0, "tynes", "2024-05-19T13:41:20Z", "2024-05-20T17:19:44Z", "2024-05-20T17:19:44Z", "ethereum-optimism/specs", "2025-08-30 13:09:48"]
["I_kwDOLB-lzc6FTmEJ", 121, "Research Area: Interop Between Chains with Non Fungible Blockspace", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nAs new features are added to the protocol we want to enable the ability interop between chains that support different feature sets. Some applications may be opinionated about the types of features or blockspace they accept inbound messages from in the world of interop. This means that legibility is important when there is interoperability between chains that have non fungible blockspace.\r\n\r\nAn example of non fungible blockspace is a plasma chain vs a rollup. The security properties of the chains are completely different, therefore some applications may want to be able to introspect in on the properties of the originating chain to know how to treat the messages.\r\n\r\nOne way to allow for legibility into the type of blockspace is having a `bytes32` bitfield on L1 that includes all of the features for a chain. We could update `executeMessage` with a new argument `_type`. This `_type` would be made available and the protocol specifications would define particular bits being set that correspond to particular features.\r\n\r\n```solidity\r\nfunction executeMessage(address _target, bytes calldata _msg, bytes32 _type, Identifier calldata _id) public payable;\r\n```\r\n\r\nThe fork choice rule/fault proof would be able to enforce that the `_type` is exactly what is defined on L1, similar to how they currently enforce the `Identifier` to match to the `_msg` exactly.\r\n\r\nAn on chain data structure would be used to ensure that an archive node is not necessary, whether its an append only list of `(value, timestamp)` or a \"last updated blocknumber\" which would give a lookup for an emitted event that contains the value.\r\n\r\nAnother possible design would be to have multiple inbox predeploys, one for each type of blockspace. This adds complexity to consensus, as now there would have to be a special case for each of the special predeploys. There are only so many predeploy spots and it means adding a new type of blockspace or a new feature would require the addition of a new predeploy to allow for them to interop. With the `bytes32` type bitfield design, the bitfield can be updated and there is no need to fork upgrade in a new predeploy", "OPEN", 0, "tynes", "2024-04-10T22:03:34Z", "2024-05-20T11:34:56Z", null, "ethereum-optimism/specs", "2025-08-30 13:09:48"]
["I_kwDODjvEJM6J8Qn1", 10640, "`Deploy.s.sol` doesn't support re-execution", "I met a problem that the first call to deploy L1 contracts partially failed because of lack of gas.\r\n\r\nAnd when I try to deploy L1 contracts for a 2nd time, this error pops up:\r\n\r\n```solidity\r\n    \u251c\u2500 [8937393460516496946] 0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2::createProxyWithNonce(0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552, 0xb63e800dd27c805706115204e978f52f15f04b86ab60000000000000000000000000000000000000000000000000000000000000000, 57493239949579596273554895313127079449756098686046701190193136806895817983202 [5.749e76])\r\n    \u2502   \u251c\u2500 [8937393460516461789] \u2192 new <unknown>@0xCdcE8582Bd0C6cEd05f792cC076709B8C32379f1\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [CreateCollision] 0 bytes of code\r\n    \u2502   \u2514\u2500 \u2190 [Revert] revert: Create2 call failed\r\n    \u2514\u2500 \u2190 [Revert] revert: Create2 call failed\r\n```\r\n\r\nThe root cause seems to be that `Deploy.s.sol` doesn't consider some contracts may have already been deployed when running a 2nd time.", "CLOSED", 0, "zhiqiangxu", "2024-05-24T03:37:47Z", "2024-05-24T14:50:56Z", "2024-05-24T14:50:13Z", "ethereum-optimism/optimism", "2025-08-30 14:11:10"]
["I_kwDODjvEJM6JgLaS", 10596, "Decentralization over `L2OutputOracle.proposer`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nFrom my understanding, this state variable is only a single private key as a hex string:\r\nhttps://github.com/ethereum-optimism/optimism/blob/9300db95bbd721e1700211a3e795b22c8290d780/packages/contracts-bedrock/src/L1/L2OutputOracle.sol#L36-L38\r\n\r\nAre there plans to decentralize this privileged role, and if so, what are they?", "CLOSED", 0, "pegahcarter", "2024-05-20T22:37:13Z", "2024-05-21T16:49:45Z", "2024-05-21T16:49:44Z", "ethereum-optimism/optimism", "2025-08-30 14:11:10"]
["I_kwDODjvEJM6IMpti", 10448, "How to set L2_CHAIN_ID before deploying L2 using Custom Gas Token ", "CONTRACT_ADDRESSES_PATH=deployments/artifact.json \\\r\nDEPLOY_CONFIG_PATH=<PATH_TO_MY_DEPLOY_CONFIG> \\\r\nSTATE_DUMP_PATH=<PATH_TO_WRITE_L2_ALLOCS> \\\r\n  forge script scripts/L2Genesis.s.sol:L2Genesis \\\r\n  --sig 'runWithStateDump()' --chain-id $L2_CHAIN_ID\r\n\r\n", "CLOSED", 0, "starlzy", "2024-05-08T08:34:32Z", "2024-05-20T17:47:04Z", "2024-05-20T17:47:04Z", "ethereum-optimism/optimism", "2025-08-30 14:11:10"]
["I_kwDODjvEJM6BToJm", 9737, "feature: add support to initialize genesis contracts by function call", "Currently the genesis contracts can only be initialized by manually specifying the state variables [here](https://github.com/ethereum-optimism/optimism/blob/442015600f22d9a3c6453c4b4b02c0640796f734/op-chain-ops/genesis/config.go#L861).\r\n\r\nIt becomes hard if the state variable to initialize is a `mapping` or there're multiple inherits involved, it's boring to manually gather all the state variables modified .\r\n\r\nIn general, it's more feasible to allow initializing the contracts by function call instead, which is more flexible.", "CLOSED", 0, "zhiqiangxu", "2024-03-05T14:38:35Z", "2024-05-23T08:22:12Z", "2024-05-23T08:22:12Z", "ethereum-optimism/optimism", "2025-08-30 14:11:10"]
["I_kwDODjvEJM6JIOOc", 10567, "Makefile for `op-bindings` missing", "\r\n**Bug Description**\r\nThe `Makefile` for `op-bindings` is missing.\r\n\r\n**Steps to Reproduce**\r\n\r\nRun `make op-bindings` in the root dir.\r\n\r\n**Expected behavior**\r\nThe command completes and build up-to-date bindings.\r\n\r\n**Environment Information:**\r\n - Operating System: [e.g. macOS 14.5]\r\n - Package Version (or commit hash): 9047beb54\r\n", "CLOSED", 0, "palango", "2024-05-16T14:53:13Z", "2024-05-16T14:56:10Z", "2024-05-16T14:56:10Z", "ethereum-optimism/optimism", "2025-08-30 14:11:28"]
["I_kwDODjvEJM6IYwYc", 10472, "Modify rollup.Config to have a dedicated Plasma sub-config", "", "CLOSED", 0, "trianglesphere", "2024-05-09T18:00:17Z", "2024-05-16T09:44:26Z", "2024-05-16T09:44:26Z", "ethereum-optimism/optimism", "2025-08-30 14:11:28"]
["I_kwDODjvEJM6IQyyB", 10453, "op-node: Use commitment interface instead of keccak commitment", "", "CLOSED", 0, "trianglesphere", "2024-05-08T17:35:30Z", "2024-05-13T15:48:56Z", "2024-05-13T15:48:56Z", "ethereum-optimism/optimism", "2025-08-30 14:11:28"]
["I_kwDODjvEJM6HzWjw", 10399, "op-node: Add the Generic Commitment Type", "Add support for DA commitment type 1, da-service commitment inside op-node. No validation should be done. It does not need to reach out to the DA server yet.\r\n\r\nThe purpose of this ticket is to simply create the type that the op-batcher + op-node will use.\r\n\r\nhttps://github.com/ethereum-optimism/specs/blob/main/specs/experimental/plasma.md#input-commitment-submission", "CLOSED", 0, "trianglesphere", "2024-05-03T20:35:08Z", "2024-05-13T15:48:42Z", "2024-05-13T15:48:42Z", "ethereum-optimism/optimism", "2025-08-30 14:11:28"]
["I_kwDODjvEJM6HhyOl", 10365, "[op-node]  l1.rpckind=reth_db fails even when compiled with rethdb tag", "Hi there,\r\n\r\nOn my debian, I followed the instructions of this page: \r\nhttps://paradigmxyz.github.io/reth/run/optimism.html\r\nin order to compile op-node locally with the **rethdb-reader** dylib:\r\n\r\n```\r\ngit clone git@github.com:ethereum-optimism/optimism.git\r\ncd optimism/op-service/rethdb-reader && cargo build --release\r\ncd ../op-node\r\ngo build -v -tags rethdb -o ./bin/op-node ./cmd/main.go\r\nmv bin/op-node /usr/bin/op-node\r\n\r\n```\r\n Compilation went well with no issues. But when i try to run op-node with the following flags:\r\n\r\n --l1.rpckind=reth_db --l1.rethdb=/root/.local/share/reth_data/db\r\n\r\nop-node fails with the following error :\r\n\r\n>  msg=\"Application failed\" message=\"invalid value \\\"reth_db\\\" for flag -l1.rpckind: unknown rpc kind: \\\"reth_db\\\"\"\r\n\r\nIs the rethdb-reader still a thing ? is the tutorial i followed outdated ? Is there any way to precise to op-node that the l1 rpc runnng locally is reth ? What am i missing here ? \r\n\r\n\r\n", "CLOSED", 0, "olivain", "2024-05-01T16:23:45Z", "2024-05-14T15:27:51Z", "2024-05-14T15:27:51Z", "ethereum-optimism/optimism", "2025-08-30 14:11:28"]
["I_kwDODjvEJM6G90hy", 10312, "op-batcher: Use the new DA server spec", "With commitment type 0, keccak commitments, the batcher can pre-compute the commitment prior to giving it to the DA server.  With a generic DA commitment, this is not always possible. The batcher should be modified to use the new `put` method which does not pre-compute.\r\n\r\nNote: the existing centralized DA server should have to be modified. We made need a new flag here in the batcher to control this behavior.\r\n\r\n\r\nhttps://github.com/ethereum-optimism/specs/pull/156 - fixing specs\r\n\r\nspecs: https://github.com/ethereum-optimism/specs/blob/main/specs/experimental/plasma.md#da-server", "CLOSED", 0, "trianglesphere", "2024-04-25T19:34:36Z", "2024-05-16T04:10:55Z", "2024-05-16T04:10:55Z", "ethereum-optimism/optimism", "2025-08-30 14:11:28"]
["I_kwDODjvEJM59lLvy", 9249, "Calling resolveClaim() can unexpectedly fail due to non-constant gas cost of delete", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/546fb2c7a5796b7fe50b0b7edc7666d3bd281d6f/packages/contracts-bedrock/src/dispute/FaultDisputeGame.sol#L414\r\n\r\nThe line `delete subgames[_claimIndex];` will delete all subgames given _claimIndex. However, the cost of the delete operation in solidity is non-constant, where each of the items in the array will take about 5000 gas to delete. The following lists the gas cost with the number of items in the array (tested in remix Shanghai):\r\n\r\nItems | Execution Gas | Diff\r\n-- | -- | --\r\n0 | 2847 | \u00a0\r\n1 | 10702 | 7855\r\n2 | 15757 | 5055\r\n3 | 20812 | 5055\r\n4 | 25867 | 5055\r\n5 | 30922 | 5055\r\n6 | 35977 | 5055\r\n7 | 41032 | 5055\r\n\r\nGiven block limit 30e6, creating 6000 subgames of a claim will block the claim from resolving forever.\r\n\r\n\r\n**To Reproduce**\r\nThe following code can be used to check the non-constant gas cost of delete:\r\n\r\n```\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\ncontract SubgameDelete {\r\n    mapping(uint256 => uint256[]) public subgames;\r\n\r\n    function addSubgame(uint256 game, uint256 subgame) public {\r\n        subgames[game].push(subgame);\r\n    }\r\n\r\n    function removeGame(uint256 game) public {\r\n        delete subgames[game];\r\n    }\r\n\r\n    function gameLen(uint256 game) public view returns (uint256) {\r\n        return subgames[game].length;\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe gas cot of resolveClaim() should be O(1).\r\n\r\nUse another variable to check if the subgame is solved consistently (e.g., ClaimData.bond == uint128.max) without deleting the array.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS:\r\n - Package Version (or commit hash):\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "qizhou", "2024-01-30T03:53:40Z", "2024-05-16T06:23:16Z", "2024-05-16T06:23:16Z", "ethereum-optimism/optimism", "2025-08-30 14:11:28"]
["I_kwDOH2Qg5s6KavIO", 326, "Add `opel` discovery key", "Make op-geth spec compliant. Specification PR: https://github.com/ethereum-optimism/specs/pull/150", "OPEN", 0, "trianglesphere", "2024-05-29T03:13:14Z", "2024-05-29T03:13:14Z", null, "ethereum-optimism/op-geth", "2025-08-30 14:11:56"]
["I_kwDOH2Qg5s6J9890", 323, "Op-geth not able to find P2P peers", "#### System information\r\n\r\nOp-geth version: v1.101315.0 (latest at this point) \r\n\r\n#### Expected behaviour\r\n- Op-geth find P2P peers and start sync.\r\n\r\n\r\n#### Actual behaviour\r\n\r\nNever actually find any peer, the console output since days after several restart:\r\n\r\n```\r\nINFO [05-24|08:04:53.454] Looking for peers                        peercount=0 tried=67  static=0\r\nINFO [05-24|08:05:03.464] Looking for peers                        peercount=0 tried=70  static=0\r\nINFO [05-24|08:05:13.531] Looking for peers                        peercount=0 tried=119 static=0\r\nINFO [05-24|08:05:23.531] Looking for peers                        peercount=0 tried=63  static=0\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nThis Node were running since 4 months without any issue, happen like 2 days ago, when accidentally I had to restart the Node. \r\n", "OPEN", 0, "valamidev", "2024-05-24T08:10:52Z", "2024-05-27T13:04:05Z", null, "ethereum-optimism/op-geth", "2025-08-30 14:11:56"]
["I_kwDODjvEJM6Kuc8J", 10699, "DockerFiles mising in v1.76 Release", "I want to build Docker Images of op-node, op-batcher, op-proposer on local, but the DockerFiles are not present in respective op-node, op-batcher, op-proposer directories anymore. \r\nI built the image for op-stack-go on local from `ops/docker/op-stack-go/DockerFile` .\r\n", "CLOSED", 0, "nitantchhajed", "2024-05-31T09:56:25Z", "2024-06-01T00:04:06Z", "2024-06-01T00:04:06Z", "ethereum-optimism/optimism", "2025-08-30 14:12:18"]
["I_kwDODjvEJM6KPaYc", 10656, "Generate the bytecode of contracts via `snapshots` command", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nCurrently, the [snapshots script](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/autogen/generate-snapshots.ts) does not generate the bytecode of contracts. This omission causes issues in tests that rely on the deploy method in the Go bindings file, which is generated with the bytecode(via `abigen --bin <bytecode>`). \r\n\r\n**Describe the solution you'd like**\r\nI would like the snapshots script to be updated to include the generation of contract bytecode. E.g. our [PR](https://github.com/babylonchain/optimism/pull/4) updated the script.\r\n\r\n**Describe alternatives you've considered**\r\nMaybe update the test function that does not call the deploy method in the Go bindings file. E.g. for the [abi_test.go](https://github.com/babylonchain/optimism/blob/develop-babylon/op-proposer/proposer/abi_test.go#L42) in the `op-proposer`. Does anyone know if this is possible to update these test codes?\r\n\r\n**Additional context**\r\nThe previous Go bindings [generation script](https://github.com/ethereum-optimism/optimism/blob/op-bindings/v0.10.14/op-bindings/gen_bindings.sh#L41) always generates the bytecode.\r\n", "CLOSED", 0, "lesterli", "2024-05-27T14:29:41Z", "2024-05-28T00:01:43Z", "2024-05-28T00:01:43Z", "ethereum-optimism/optimism", "2025-08-30 14:12:18"]
["I_kwDODjvEJM6J6Azu", 10634, "Error while generating artifacts", "How should I resolve the below bug\r\n\r\n1. I have change the IMPL_SALT 3-4 times\r\n2. I have used below commands multiple times\r\n   forge script -vvv scripts/Deploy.s.sol:Deploy --broadcast --private-key $GS_ADMIN_PRIVATE_KEY --rpc-url $L1_RPC_URL\r\n   forge script scripts/Deploy.s.sol:Deploy --sig 'sync()' --rpc-url $L1_RPC_URL\r\n   \r\n   \r\n   \r\n   \u251c\u2500 [0] VM::envOr(\"IMPL_SALT\", \"ethers phoenix\")\r\n    \u2502   \u2514\u2500 \u2190 [Return] <env var value>\r\n    \u251c\u2500 [8937393460513673534] Create2Deployer::create2()\r\n    \u2502   \u251c\u2500 [8937393460513640213] \u2192 new <unknown>@0x3Fb409AF4E0EC3a2a49554DC82f106C315BE88F7\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [CreateCollision] 0 bytes of code\r\n    \u2502   \u2514\u2500 \u2190 [Revert] EvmError: Revert\r\n    \u2514\u2500 \u2190 [Revert] EvmError: Revert\r\n\r\n\r\n\r\n== Logs ==\r\n  Connected to network with chainid 11155111\r\n  Storing temp deployment data in /Users/mohitvashistha/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy\r\n  DeployConfig: reading file /Users/mohitvashistha/optimism/packages/contracts-bedrock/deploy-config/getting-started.json\r\n  Deploying from Deploy\r\n  Deployment context: getting-started\r\n  Deploying a fresh OP Stack including SuperchainConfig\r\n  Deploying Safe\r\n  New SystemOwnerSafe deployed at 0xba5FDa07E6Ca1697a728A65f8CbB76B3E370b952\r\n  Setting up Superchain\r\n  Deploying AddressManager\r\n  AddressManager deployed at 0x3aF5571A355e45D5473B82121993B0de618D602e\r\n  Deploying ProxyAdmin\r\n  ProxyAdmin deployed at 0x4b644d8B30c621403287726Ca6644811974b02BF\r\n  ProxyAdmin ownership transferred to Safe at: 0xba5FDa07E6Ca1697a728A65f8CbB76B3E370b952\r\n  Deploying ERC1967 proxy forSuperchainConfigProxy\r\n     at 0x1A4282176226583FB1C39B812c213f8A472A0586\r\nError: \r\nscript failed: <empty revert data>\r\n<img width=\"952\" alt=\"Screenshot 2024-05-24 at 1 02 18 AM\" src=\"https://github.com/ethereum-optimism/optimism/assets/26293267/bbd64841-58b0-42c5-8715-563101553e07\">\r\n", "CLOSED", 0, "mohit6b", "2024-05-23T19:35:23Z", "2024-05-28T18:39:34Z", "2024-05-28T13:50:43Z", "ethereum-optimism/optimism", "2025-08-30 14:12:18"]
["I_kwDODjvEJM6HzYbX", 10402, "op-node: Allow empty contract for generic comm validity in Plasma Mode", "Right now plasma mode requires a DA challenge contract. If we are in Plasma mode with generic commitments, we should delay finality by the `challenge_window`, but should allow empty DA challenge contracts. For keccak commitments, we require that the DAC contract is deployed.", "CLOSED", 0, "trianglesphere", "2024-05-03T20:40:04Z", "2024-05-28T15:08:27Z", "2024-05-28T15:08:27Z", "ethereum-optimism/optimism", "2025-08-30 14:12:18"]
["I_kwDODjvEJM6HzYak", 10401, "op-node: Add config for which commitment types to accept in Plasma Mode", "Once https://github.com/ethereum-optimism/optimism/issues/10399 is implemented, actually fetch the data from the DA server.\r\n\r\nNote: this really means adding a config to select between this & not.", "CLOSED", 0, "trianglesphere", "2024-05-03T20:40:02Z", "2024-05-28T15:08:26Z", "2024-05-28T15:08:26Z", "ethereum-optimism/optimism", "2025-08-30 14:12:18"]
["I_kwDODjvEJM6HzYZ0", 10400, "Tracking: Plasma Mode Generic Commitments", "Tickets to Complete\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10312\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10399\r\n- [x] #10453\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10401\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10402\r\n- [x] #10472\r\n", "CLOSED", 0, "trianglesphere", "2024-05-03T20:39:59Z", "2024-05-28T19:05:36Z", "2024-05-28T19:05:36Z", "ethereum-optimism/optimism", "2025-08-30 14:12:18"]
["I_kwDOLB-lzc6KETPe", 208, "Spec Feedback: Possible Initiating Message spoof?", "I haven't thought of a concrete attack yet, but my reading of the Interop Spec is that the `Message Indentifer` doesn't fully account of every byte in the initiating message event.  This reminded me of the recent Polygon Heimdal issue w/ event processing outlined here: https://www.asymmetric.re/blog/polygon-log-confusion\r\n\r\nThe TLDR of the issue is that if you don\u2019t fully account for every byte in the event when processing it you leave yourself open to an attacker possibly being able to craft a malicious event that passes your parsing logic when it shouldn\u2019t.  In the polygon example this happened off-chain in the sequencer, but the same general type of flaw could exist in a contract, or in this case possibly the `CrossL2Inbox` predeploy.\r\n\r\nMy concern is that the `Message Payload` is just a concatenation of the log fields, and that the `Message Identifer` doesn't include either a byte length or full hash or other exhaustive check of said payload.  As such, I _think_ its possible to craft an alternative message payload with say additional topics and pass that to `executeMessage` possibly leading the emission of a \"spoofed\" `ExecutingMessage` event for a different initiating message than intended.\r\n\r\nThis would involve something like a malicious user emitting two very similar looking initiating messages, say one with `LOG1` and a second using `LOG2` that contains the same first topic (due to the current payload serialization format this would only work if the event only contained topics and no data).\r\n\r\nAs I said I can't think of an actual attack with this yet, but wanted to highlight it as something that made my spider sense tingle a little when reading the spec.\r\n ", "OPEN", 0, "ryanschneider", "2024-05-24T23:05:57Z", "2024-05-27T19:45:51Z", null, "ethereum-optimism/specs", "2025-08-30 14:12:46"]
["I_kwDOH2Qg5s6LeS8o", 334, "Malformed typed transactions should not be accepted and queued by send raw transaction but discarded instead", "Cross posting\r\n\r\nhttps://github.com/ethereum/go-ethereum/issues/29951", "OPEN", 0, "emilianobonassi", "2024-06-07T09:13:15Z", "2024-06-07T09:51:57Z", null, "ethereum-optimism/op-geth", "2025-08-30 14:14:35"]
["I_kwDOLB-lzc6LcSkS", 229, "[OP Plasma] Specify commitment encoding standards for generic server types", "Alt da servers (I.e, generic commitment types) are expected to encode the type byte prefix as per the server side generated commitment for the client to decode when querying.  Additionally these servers are expected to decode the type byte when reading (i.e, /GET). \r\n\r\nThe spec should likely be updated to reflect this server side encoding/decoding requirement. Otherwise it may make sense to only do the type encoding within core OP services. Currently the commitment is decoded in the da client to then be re-encoded when setting the tx data byte resulting in a redundant encoding operation. \r\n\r\n* https://github.com/ethereum-optimism/optimism/blob/926ba71288ec558b2acc6b1b6399e66e73ab0fcc/op-plasma/daclient.go#L133-L136\r\n* https://github.com/ethereum-optimism/optimism/blob/develop/op-batcher/batcher/driver.go#L505-L513", "OPEN", 0, "ethenotethan", "2024-06-07T02:14:01Z", "2024-06-09T20:56:16Z", null, "ethereum-optimism/specs", "2025-08-30 14:15:03"]
["I_kwDOLB-lzc6LaHPV", 227, "Migrate MIPS.sol from the docs into the specs", "\r\n@benjaminion mentioned that this [MIP.sol](https://docs.optimism.io/stack/protocol/fault-proofs/mips) page in the docs might be better suited in the specs. The page can be cut down to the core specs parts and added. The docs could be replaced with a higher-level overview, like the one in the [dev blog](https://blog.oplabs.co/mips-sol/). \r\n\r\n\r\n", "OPEN", 0, "sbvegan", "2024-06-06T18:09:41Z", "2024-06-06T18:09:41Z", null, "ethereum-optimism/specs", "2025-08-30 14:15:03"]
["I_kwDOLB-lzc6LA0ul", 221, "Research Area: Event Based Batch Inclusion", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe OP Stack is designed such that there is a [single batcher key](https://github.com/ethereum-optimism/optimism/blob/c4226bf4a809006adaa7087477db466e2eda2030/packages/contracts-bedrock/src/L1/SystemConfig.sol#L104) in the L1 `SystemConfig` contract. This EOA is controlled by the [op-batcher](https://github.com/ethereum-optimism/optimism/tree/develop/op-batcher), which is responsible for publishing the data to L1. A batch is only [considered canonical](https://github.com/ethereum-optimism/optimism/blob/c4226bf4a809006adaa7087477db466e2eda2030/op-node/rollup/derive/data_source.go#L93) if it is from the batcher key and to the [batch inbox](https://github.com/ethereum-optimism/optimism/blob/c4226bf4a809006adaa7087477db466e2eda2030/packages/contracts-bedrock/src/L1/SystemConfig.sol#L187) contract.\r\n\r\nThis design is simple but is not super flexible. Since it must be an EOA, batches cannot be submitted using a smart contract wallet. It is also not possible to arbitrarily program batch validity rules. If we modified the batch inbox to be a smart contract, a canonical batch could be decided by an event emitted by the smart contract.\r\n\r\nUsing a smart contract event to determine batch validity would allow developers to permissionlessly innovate on leader election mechanisms. It could be possible to build a simple round robin scheme to enable a more decentralized sequencer, where different sequencers can be allowed to submit the next set of batches. It would also be possible to build an attestation network that can hook into the batch validity rules where a batch is only considered canonical if enough of the attesters signed off on the batch.\r\n\r\nIn practice an event definition would need to be defined that would signal to the `op-node` that the transaction includes a valid batch. As long the configured batch inbox emitted this event, then the `op-node` would know to interpret the batch as valid and attempt to process it further. This was explored in https://github.com/ethereum-optimism/ecosystem-contributions/issues/63", "OPEN", 0, "tynes", "2024-06-03T23:44:59Z", "2024-06-06T16:01:51Z", null, "ethereum-optimism/specs", "2025-08-30 14:15:03"]
["I_kwDOLB-lzc6KEHUJ", 207, "(Spec) Bug Report: Cyclic Attack Using Interop Message Passing", "Looking at the current [interop spec](https://specs.optimism.io/interop/overview.html), I believe there may be a security issue when initiating and executing messages are executed at the same timestamp. If I'm right, the problem arises from logical precedence being lost when messages are passed.\r\n\r\nPerhaps this is supposed to be addressed at a higher level of abstraction that I'm not anticipating. Apologies if that's the case - I am but a researchoor.\r\n\r\n### Example\r\nConsider two blocks produced at the same timestamp by a malicious sequencer. Block A containing transaction T_a and block B containing transaction T_b.\r\n\r\n#### Abstractly the attack runs like this:\r\n* T_b reads an initiating message, m_a, from A which is a prerequisite to it emitting an initiating message, m_b. \r\n* T_a reads m_b from B which is a prerequisite for it emitting m_a. \r\n\r\nThe transactions would not be valid if executed sequentially, but they are when done on different chains in the superchain.\r\n\r\n#### A more concrete attack:\r\nOn chain A there is a contract which allows anyone holding an NFT in collection C to mint another NFT in collection C, otherwise they can be bought for 10 Eth. Assume that no NFTs have been minted in the collection yet.\r\n* T_b reads an initiating message, m_a, from A which transfers an NFT in C to the attacker on B.\r\n* T_b emits m_b that transfers the NFT to A.\r\n* T_a reads m_b and uses ownership of the NFT to mint another NFT in C.\r\n* T_a emits m_a which bridges the new NFT to B\r\n\r\nT_a is valid since it depends on m_b which is emitted on B and similarly T_b is valid since it depends only on m_a being emitted which it is - i.e. the attacker can bridge an NFT from B to A because it received the NFT via m_a.\r\n\r\nBefore the attack, the attacker didn't own an NFT and after the attack they do despite them not paying. Without the message passing protocol this wouldn't have been possible even with loans since no NFT existed before. \r\n \r\n\r\nI realise this specific attack can be defended against at the smart contract level, but I thought I'd raise it since, from my understanding, this is a new problem opened up by synchronous message passing and might apply quite widely. \r\n\r\n", "OPEN", 0, "quintuskilbourn", "2024-05-24T22:22:35Z", "2024-06-05T19:12:23Z", null, "ethereum-optimism/specs", "2025-08-30 14:15:03"]
["I_kwDOLB-lzc6Cg6-S", 95, "Research Area: Consensus Level Tracking of Chain Revenue/Expenses", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nRight now there are various config values in the L1 system config smart contract that are related to the fees charged on L2. These values can easily be set in a way where it causes the chain to not be profitable or to overcharge users by a lot. In an ideal world, the chain operator can just specify their profit margin and the chain should be able to automatically adjust fees by introspecting the revenue and expenses as part of the derivation pipeline.\r\n\r\nThe derivation pipeline already observes all L1 transactions, it would just need to compute the gas used of the transactions sent by the batcher to know the expenses of the chain. It would need to observe all L2 receipts to learn the revenue of the chain. It could use the expenses and revenue as inputs to a deterministic function that sets the scalars/fee config in the L1 block attributes transaction instead of referencing L1 events for changes to the scalar values.\r\n\r\nThe revenue and the expenses can be included as part of the L1 block attributes transaction to make it possible to introspect on the chain's economics at the application layer. This would enable applications such as revenue sharing.\r\n\r\nThe system config on L1 would no longer hold gas config that is pushed into L2 but instead it would hold a target profit ratio.\r\n\r\nThis feature can easily be broken up into 2 parts, the first would simply enable the introspection of the revenue/expenses via the L1Block contract by pushing the values as part of the L1 attributes transaction. The second part would be completing the automatic targeting design to simplify config for chain operators.", "OPEN", 0, "tynes", "2024-03-16T00:57:45Z", "2024-06-03T23:03:24Z", null, "ethereum-optimism/specs", "2025-08-30 14:15:03"]
["I_kwDODjvEJM6J0oJx", 10626, "Document on production deployment", "[Here](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup) is the document on deploying OP Stack, but it has a [callout](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#build-the-optimism-monorepo) that says this is not for production use.\r\n\r\nSo I think there should be dedicated documents on production deployment?", "CLOSED", 0, "zhiqiangxu", "2024-05-23T08:21:15Z", "2024-06-03T16:48:52Z", "2024-06-03T16:48:52Z", "ethereum-optimism/optimism", "2025-08-30 14:15:17"]
["I_kwDODjvEJM6Cz-wL", 9905, "Deploying a contract with an initcode that is too large should not succeed.", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nThe OP-Batcher service is encountering an \"`INVALID: initcode too large`\" error and the error keeps occurring.\r\n\r\nHow to handle the \"INVALID: initcode too large\" error that keeps occurring with the OP-Batcher service? Is there a way to skip failed transactions?\r\n\r\n**Steps to Reproduce**\r\nDeploying a contract with a large initcode\r\n\r\n**Expected behavior**\r\nDeploying a contract with an initcode that is too large should not succeed.\r\n\r\n\r\n**Environment Information:**\r\n - Operating System: AWS Linux 2023\r\n - Package Version (or commit hash):  op-batcher a06cae81ed60c85d1566f48f45d9f9c0e48cc47c\r\n\r\n**Configurations:**\r\n```\r\n./bin/op-batcher \\\r\n  --l2-eth-rpc=http://localhost:8545 \\\r\n  --rollup-rpc=http://localhost:8547 \\\r\n  --poll-interval=1s \\\r\n  --sub-safety-margin=6 \\\r\n  --num-confirmations=1 \\\r\n  --safe-abort-nonce-too-low-count=3 \\\r\n  --resubmission-timeout=30s \\\r\n  --rpc.addr=0.0.0.0 \\\r\n  --rpc.port=8548 \\\r\n  --rpc.enable-admin \\\r\n  --max-channel-duration=1 \\\r\n  --l1-eth-rpc=$L1_RPC_URL \\\r\n  --private-key=$GS_BATCHER_PRIVATE_KEY\r\n```\r\n\r\n**Logs:**\r\n```\r\nt=2024-03-19T11:02:02+0000 lvl=info msg=\"bumping gas price for transaction\" service=batcher tx=0x5b63c6cfa0877b792b17b423278ea3b5437e93efc11870a9fbb73ee4ffc07771 nonce=192 gasTipCap=1,100,000,000 gasFeeCap=1,693,997,600 gasLimit=1,613,804\r\nt=2024-03-19T11:02:04+0000 lvl=eror msg=\"unable to publish transaction\"     service=batcher tx=0x15255d6d044586f3e925561213c15bf61e003f7d62bfcb8d76db4c23dded3bf7 nonce=192 gasTipCap=1,210,000,000 gasFeeCap=1,863,397,360 gasLimit=1,613,804 err=\"INVALID: initcode too large\"\r\nt=2024-03-19T11:02:32+0000 lvl=info msg=\"Publishing transaction\"            service=batcher tx=0x15255d6d044586f3e925561213c15bf61e003f7d62bfcb8d76db4c23dded3bf7 nonce=192 gasTipCap=1,210,000,000 gasFeeCap=1,863,397,360 gasLimit=1,613,804\r\nt=2024-03-19T11:02:32+0000 lvl=info msg=\"bumping gas price for transaction\" service=batcher tx=0x15255d6d044586f3e925561213c15bf61e003f7d62bfcb8d76db4c23dded3bf7 nonce=192 gasTipCap=1,210,000,000 gasFeeCap=1,863,397,360 gasLimit=1,613,804\r\nt=2024-03-19T11:02:34+0000 lvl=eror msg=\"unable to publish transaction\"     service=batcher tx=0xb5d6c0d1c76ea346a2ce2ad49c4cc7e014e6f40b230b6d8b8b4f31550cc0f6ae nonce=192 gasTipCap=1,331,000,000 gasFeeCap=2,049,737,096 gasLimit=1,613,804 err=\"INVALID: initcode too large\"\r\nt=2024-03-19T11:03:02+0000 lvl=warn msg=\"Aborting transaction submission\"   service=batcher tx=0xb5d6c0d1c76ea346a2ce2ad49c4cc7e014e6f40b230b6d8b8b4f31550cc0f6ae nonce=192\r\nt=2024-03-19T11:03:02+0000 lvl=warn msg=\"Transaction failed to send\"        frame_id=7d3dd7be862c895a2a144f74450f7f75:0 data_len=99686 err=\"aborted transaction sending\"\r\nt=2024-03-19T11:03:02+0000 lvl=warn msg=\"Transaction failed to send\"        frame_id=9ff9c030c90fb49cb1dc02f38f6e1611:0 data_len=99690 err=\"failed to create the tx: context canceled\"\r\nt=2024-03-19T11:03:02+0000 lvl=info msg=\"Publishing transaction\"            service=batcher tx=0x3963e270edd1fa2c0c3eda0cc19ba4919e18decfc452ecc75ec92e38f3fd9e11 nonce=192 gasTipCap=1,000,000,000 gasFeeCap=1,361,744,808 gasLimit=1,613,804\r\nt=2024-03-19T11:03:04+0000 lvl=eror msg=\"unable to publish transaction\"     service=batcher tx=0x3963e270edd1fa2c0c3eda0cc19ba4919e18decfc452ecc75ec92e38f3fd9e11 nonce=192 gasTipCap=1,000,000,000 gasFeeCap=1,361,744,808 gasLimit=1,613,804 err=\"INVALID: initcode too large\"\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "mrdotparasyte", "2024-03-19T11:06:13Z", "2024-06-05T13:04:26Z", "2024-06-04T09:06:27Z", "ethereum-optimism/optimism", "2025-08-30 14:15:17"]
["I_kwDODjvEJM5ZUNDv", 4496, "op-node stuck after a derivation temporary error", "**Describe the bug**\r\nFor some reason, the L1 RPC returned an invalid receipt for a tx at block 8132846 (on Goerli)\r\n\r\n```\r\nops-bedrock-op-node-1      | WARN [12-15|09:19:57.203] Derivation process temporary error       attempts=8143 err=\"temp: failed to fetch receipts of L1 block 0xd2e567dc9d620f1a17ca79c229d3f0e92200931918273580c3cc799bf662c5f6:8132846 for L1 sysCfg update: receipt 20 has unexpected tx index 0\"\r\n```\r\n\r\nI relaunched `op-node` ~24 hours later, it seemed to be stuck (no logs after startup). \r\n\r\n**To Reproduce**\r\n\r\nI don't know\r\n\r\n**Expected behavior**\r\nIt should \r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS:  Debian GNU/Linux 11 (bullseye)\r\n - Package Version (or commit hash): 0b7963ebeb5f8ba62fa365576a8a5b62686206de\r\n\r\n**Additional context**\r\n\r\nI deployed contracts on Goerli and run a batcher, proposer and node on the same server.\r\n\r\nI tried to deduce what was the problem. \r\nI fetched the faulty block using the same L1 RPC : \r\n```node\r\n  const block = await hre.ethers.provider.getBlockWithTransactions(8132846);\r\n\r\n  console.log(block.hash);\r\n  for (let i = 0; i < block.transactions.length; i++) {\r\n    const tx = block.transactions[i];\r\n    const receipt = await hre.ethers.provider.getTransactionReceipt(tx.hash);\r\n    console.log(receipt.transactionIndex, i);\r\n\r\n  }\r\n```\r\n\r\nThe transaction indexes seem to match the order.\r\n\r\nIt looks like the EthClient that fetches receipts has them in cache. I believe it cached the response of the RPC that had an error in it.\r\n\r\nWhat do you guys think ? I can also provide rollup configuration or genesis.\r\n\r\nObviously, if the cache is the problem, I'd love to propose a PR to fix the problem.", "CLOSED", 0, "Kelvyne", "2022-12-15T13:47:23Z", "2024-06-03T15:23:47Z", "2023-01-04T15:09:27Z", "ethereum-optimism/optimism", "2025-08-30 14:15:17"]
["I_kwDOH2Qg5s5_rxwj", 248, "`debug_traceBlockByNumber` and `debug_traceTransaction` returns incorrect data", "#### System information\r\n\r\nop-node v1.5.1\r\nop-geth v1.101308.0, \r\n\r\n#### Expected behaviour\r\n\r\nShould have a proper response not an error\r\n\r\n\r\n#### Actual behaviour\r\n\r\n```\r\n[\r\n  {\r\n    \"method\": \"debug_traceBlockByNumber\",\r\n    \"params\": [\r\n        \"0x660473A\",\r\n        {\r\n            \"tracer\": \"flatCallTracer\"\r\n        }\r\n    ],\r\n    \"id\": 0,\r\n    \"jsonrpc\": \"2.0\"\r\n  }\r\n]\r\n```\r\n\r\nIs returning an error\r\n\r\n```\r\n[\r\n    {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"id\": 0,\r\n        \"error\": {\r\n            \"code\": -32000,\r\n            \"message\": \"unrecognized call frame type: STOP\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\nWhen I switch to `callTracer` I can find in the trace list\r\n\r\n```\r\n            {\r\n                \"txHash\": \"0xa47277b3d92384e70906bed705723a15c91d9f0fff2fc602824d14ea201801c1\",\r\n                \"result\": {\r\n                    \"from\": \"0x0000000000000000000000000000000000000000\",\r\n                    \"gas\": \"0x0\",\r\n                    \"gasUsed\": \"0x520c\",\r\n                    \"input\": \"0x\",\r\n                    \"type\": \"STOP\"\r\n                }\r\n            }\r\n```\r\n\r\n", "CLOSED", 0, "MRabenda", "2024-02-19T11:46:27Z", "2024-06-13T17:36:42Z", "2024-06-13T17:36:41Z", "ethereum-optimism/op-geth", "2025-08-30 15:17:16"]
["I_kwDOH2Qg5s5-kIDn", 241, "Mainnet Node syncing very slow and often just stuck in an idle state", "#### System information\r\n\r\n**Geth version:** op-geth:v1.101305.0 , op-geth:v1.101305.3\r\n\r\nWe currently run 2 Op-geth. Mainnet node (Node 1/2) on separated machines, the following issues just occurred on Node 1.:\r\n\r\nDuring the whole process the Op-node was healthy and up to the latest block height, so as the Ethereum nodes.\r\n\r\n**Issues in chronological order:** \r\n- It stop syncing new blocks.\r\n- Node restarted, start syncing blocks again\r\n- After a ~30 minutes stop syncing block, no any error message, just idling.\r\n- Node restarted, not starting to sync blocks, just idling.\r\n- Node restarted, start syncing block again\r\n\r\nAnd this procedure is going on since more than a day.\r\n\r\nOverall the sync is slow too, it can take 11 second to sync a single block:\r\n\r\n```\r\nINFO [02-07|16:12:51.000] Imported new potential chain segment     number=115,839,990 hash=1bbf70..64cef6 blocks=1 txs=1 mgas=0.047 elapsed=1.572ms     mgasps=29.829  age=12h6m54s  snapdiffs=320.15KiB triedirty=1.25MiB\r\nINFO [02-07|16:12:51.001] Chain head was updated                   number=115,839,990 hash=1bbf70..64cef6 root=337418..0632d0 elapsed=\"235.384\u00b5s\" age=12h6m54s\r\nINFO [02-07|16:13:02.467] Starting work on payload                 id=0x80d3075c3fea7640\r\nINFO [02-07|16:13:02.474] Imported new potential chain segment     number=115,839,991 hash=59a4bf..85684e blocks=1 txs=1 mgas=0.050 elapsed=1.852ms     mgasps=27.252  age=12h7m3s   snapdiffs=320.46KiB triedirty=1.25MiB\r\nINFO [02-07|16:13:02.476] Chain head was updated                   number=115,839,991 hash=59a4bf..85684e root=862b49..5fb80b elapsed=\"250.603\u00b5s\" age=12h7m3s\r\n```\r\n\r\nHardware is like: 2Gbps uplink, 0.5TB Ram, NVME SSD raid, EPIC CPU\r\n\r\nDoes anyone ever experienced things like this or any idea, why this can happen?\r\n\r\n\r\n", "CLOSED", 0, "valamidev", "2024-02-07T16:19:04Z", "2024-06-11T14:06:21Z", "2024-05-24T08:05:08Z", "ethereum-optimism/op-geth", "2025-08-30 15:17:16"]
["I_kwDOLB-lzc6AdB2E", 67, "Research Area: ERC20 Token as the Gas Paying Token", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe would like to add support for the ability to use an L1 based ERC20 token as the native gas token on L2. This feature needs to specified before consideration for merge into the OP Stack.\r\n\r\nSome considerations:\r\n- Minimal diff to the existing codebase\r\n- Branching logic in the deploy script or branching logic in the smart contract?\r\n  - Is it better to deploy different L1 contracts for chains that use an ERC20 token as the L2 gas token or is it better to have the logic baked into the same contract and just use a deploy time flag to determine which code path is used?\r\n- Need to be mindful of how the design interacts with in protocol interoperability\r\n- The WETH predeploy cannot be backed by the custom gas token, it should always be WETH. This means that deposits of ether need to mint WETH at the predeploy", "CLOSED", 0, "tynes", "2024-02-26T20:47:55Z", "2024-06-13T21:08:03Z", "2024-06-13T21:08:03Z", "ethereum-optimism/specs", "2025-08-30 15:17:18"]
["I_kwDODjvEJM6MShGo", 10832, "OP-Plasma wrong `CommitmentType` with customDA", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nWhen we followed the tutorial \"How to run an OP Stack Chain in Alt-DA Mode w/ Custom DA\" for deployment, we encountered the following issue: the op-batcher can send data to the DA normally, and the DA can also receive the data properly. However, the type of commitment returned by the DA is incorrect: `Keccak256CommitmentType`. After analyzing the source code of the DA, we found that this is because the server side did not set the commitmentType correctly. We have reported this issue to the eigenda and celestia team. They have answered, and we're continue following this up. Below is the relevant code:\r\n\r\n- https://github.com/ethereum-optimism/optimism/blob/926ba71288ec558b2acc6b1b6399e66e73ab0fcc/op-plasma/daclient.go#L133-L136\r\n- https://github.com/ethereum-optimism/optimism/blob/develop/op-batcher/batcher/driver.go#L505-L513\r\n- https://github.com/celestiaorg/optimism/blob/541dbf239bb8182d05359f579831f4a9c2a64c06/op-plasma/godaserver.go#L128C30-L129C1\r\n\r\n\r\n**Environment Information:**\r\n - Package Version (or commit hash): op-node/v1.7.7-rc.2\r\n", "CLOSED", 0, "wenxingxing", "2024-06-14T15:58:33Z", "2024-06-14T16:02:47Z", "2024-06-14T16:02:47Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM6L6Cxi", 10802, "indexer has been removed, but indexer-api:test test still runs", "**Bug Description**\r\nIn the image below, indexer-api:test is still a test that is ran. However, once ran this test will stall and never complete, because #10784 removes the indexer.\r\n![image](https://github.com/ethereum-optimism/optimism/assets/68152521/33cf1ca1-c00e-47d5-8052-b6b6eb10ef07)\r\n\r\n**Steps to Reproduce**\r\n`pnpm install`\r\n`make test-unit`\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nI would assume this test would not need to run if the indexer is removed, considering it causes the tests to hang and run forever.\r\n\r\n**Environment Information:**\r\n - Operating System: Sonoma 14.5\r\n - Package Version (or commit hash): optimism deaa6fa\r\n", "CLOSED", 0, "fahimahmedx", "2024-06-11T20:29:05Z", "2024-06-11T20:47:22Z", "2024-06-11T20:47:21Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM6Ln7km", 10781, "Optimism", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nA clear and concise description of what the bug is.\n\n**Steps to Reproduce**\n\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n\n**Expected behavior**\nA clear and concise description of what you expected to happen.\n\n**Environment Information:**\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n\n**Configurations:**\nCommand line flags or environment variables you're using.\n\n**Logs:**\nLogs and/or error messages that help illustrate the issue.\n\n**Additional context**\nAdd any other context about the problem here.\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "Mortiemi", "2024-06-09T21:32:13Z", "2024-06-10T18:11:40Z", "2024-06-10T18:11:40Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM6IiOCP", 10503, "Why can't geth get up after a reboot ", "op-geth v1.101308.2\r\nop-node v1.7.5 \r\n\r\ngeth log\r\n```INFO [05-11|04:49:50.783] Starting peer-to-peer node               instance=Geth/v0.1.0-unstable-0402d543/linux-amd64/go1.22.0\r\nDEBUG[05-11|04:49:50.791] TCP listener up                          addr=[::]:30313\r\nDEBUG[05-11|04:49:50.792] IPCs registered                          namespaces=admin,debug,web3,eth,txpool,miner,net,engine\r\nINFO [05-11|04:49:50.792] IPC endpoint opened                      url=/data/optimism/bedrock/data/geth.ipc\r\nDEBUG[05-11|04:49:50.792] Allowed origin(s) for WS RPC interface [*]\r\nINFO [05-11|04:49:50.792] Loaded JWT secret file                   path=/data/optimism/bedrock/data/secrets/jwt.txt crc32=0x63867681\r\nDEBUG[05-11|04:49:50.792] Allowed origin(s) for WS RPC interface [localhost]\r\nINFO [05-11|04:49:50.792] HTTP server started                      endpoint=172.20.192.59:8555 auth=false prefix= cors=* vhosts=*\r\nINFO [05-11|04:49:50.792] WebSocket enabled                        url=ws://172.20.192.59:8556\r\nINFO [05-11|04:49:50.792] WebSocket enabled                        url=ws://[::]:8551\r\nINFO [05-11|04:49:50.792] HTTP server started                      endpoint=[::]:8551          auth=true  prefix= cors=localhost vhosts=*\r\nINFO [05-11|04:49:50.792] Legacy pool tip threshold updated        tip=0\r\nINFO [05-11|04:49:50.792] Legacy pool tip threshold updated        tip=1,000,000,000\r\nINFO [05-11|04:49:50.793] New local node record                    seq=1,686,189,154,334 id=01e23540681d3e5d ip=127.0.0.1 udp=0 tcp=30313\r\nINFO [05-11|04:49:50.793] Started P2P networking                   self=\"enode://b572c5d88bafcc5c8fb50d3a15af2f5590e6a8af504a6d4aad3428e1e93de43ad1ab974ee88c50a13972c69107a2de88e6a6d3cf014920a22103ca8f12003f31@127.0.0.1:30313?discport=0\"\r\nDEBUG[05-11|04:49:52.798] Couldn't get external IP                 err=\"no UPnP or NAT-PMP router discovered\" interface=\"UPnP or NAT-PMP\"\r\nTRACE[05-11|04:49:52.798] Attempting port mapping                  proto=TCP extport=30313 intport=30313 interface=\"UPnP or NAT-PMP\"\r\nDEBUG[05-11|04:49:52.798] Couldn't add port mapping                proto=TCP extport=30313 intport=30313 interface=\"UPnP or NAT-PMP\" err=\"no UPnP or NAT-PMP router discovered\"\r\nDEBUG[05-11|04:49:52.853] Served eth_blockNumber                   conn=172.20.192.67:40494 reqid=1 duration=\"123.989\u00b5s\"\r\nDEBUG[05-11|04:50:13.020] Served eth_blockNumber                   conn=172.20.192.67:40980 reqid=1 duration=\"91.03\u00b5s\"\r\nDEBUG[05-11|04:50:13.360] Ancient blocks frozen already            number=119,766,737 hash=bda540..ccb4ad frozen=119,676,742\r\nDEBUG[05-11|04:50:22.940] Served eth_blockNumber                   conn=172.20.192.67:41354 reqid=1 `duration=\"98.056\u00b5s\"``\r\n\r\nop-node log\r\n```t=2024-05-11T05:06:57+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x28cc607667ea0fcc85663bfdf7d8f64b37404e290964a9695d9931720f2418c6:119902620\r\nt=2024-05-11T05:07:00+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x052a1f4405ecbbb1557a364279acbe2d3b8de98015fa01aa3a4e9b4396b03e47:119902621 peer=16Uiu2HAm3HuLhyVEbwLts1LLinY9wxjCKMrfK1mcmKir1LcbC3Sn\r\nt=2024-05-11T05:07:00+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x052a1f4405ecbbb1557a364279acbe2d3b8de98015fa01aa3a4e9b4396b03e47:119902621\r\nt=2024-05-11T05:07:02+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xd84d4fa406ec737edbf4d2afc9012d50458036fa0efaf357f3df0a1855556c8c:119902622 peer=16Uiu2HAm3HuLhyVEbwLts1LLinY9wxjCKMrfK1mcmKir1LcbC3Sn\r\nt=2024-05-11T05:07:02+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xd84d4fa406ec737edbf4d2afc9012d50458036fa0efaf357f3df0a1855556c8c:119902622\r\nt=2024-05-11T05:07:03+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xde28a011b49c1818ae0180153e1daae4c55966e895abce9dd41f949abd3d195f:119902623 peer=16Uiu2HAmGQ7CXhVeGRNe8xcX5AH4jXyT6JFqA3H8gqZtL4Xc3zPQ\r\nt=2024-05-11T05:07:03+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xde28a011b49c1818ae0180153e1daae4c55966e895abce9dd41f949abd3d195f:119902623\r\nt=2024-05-11T05:07:04+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=5079 err=\"engine stage failed: temp: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0x9306d4777292148a0439feec7aa474a0e8e88a795c5e9c60afff778aec85e30a:19468150: expected 6 sidecars but got 0\"\r\nt=2024-05-11T05:07:06+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xbb190ae166da7911ea7dd5226c12a2b5a589cc264fa1810b720f9ca2b718bfc0:119902624 peer=16Uiu2HAmNuzpACfnApwqF4uSUzr78yAoYeqX8mHfDurLGqXbPcw2\r\nt=2024-05-11T05:07:06+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xbb190ae166da7911ea7dd5226c12a2b5a589cc264fa1810b720f9ca2b718bfc0:119902624\r\nt=2024-05-11T05:07:07+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x66b4feb7412326179faf89b114b70d11ba8453ff2d7d0864d3a5ba149e76f9f2:119902625 peer=16Uiu2HAm1AdeLrPrnzUAzKuF1EYiFMCg7Q3HJFJy1wE24f4aAfWi```", "CLOSED", 0, "yuanwj210", "2024-05-11T05:11:22Z", "2024-06-11T20:11:23Z", "2024-06-11T20:11:23Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM55pBEO", 8613, "How can I identify which issue is not start yet?", "Hi team, I appreciate it that you guys use issues to sync your work step and used it like milestone, I really want to do some help from these issue, but Im not sure the status of these issue. \r\nIt will be perfect if I can know which is not start yet.\r\n\r\nthanks!", "CLOSED", 0, "JohnwickBC", "2023-12-14T02:42:05Z", "2024-06-11T20:03:58Z", "2024-06-11T20:03:58Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM5wq4uZ", 7179, "Unable to deploy op-node ", "I am deploying my OP-Stack chain on the Kubernetes cluster. I am using helm charts and op-geth, op-node docker Images. my op-geth is running successfully in a pod.\r\n\r\nbut when I am trying to run the op-node I am getting RPC error. I am using op-node Docker Image from release-[1.1.4](https://us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.1.4) . \r\n\r\n**my values.yaml file -** \r\n\r\n```\r\nreplicaCount: 1\r\n\r\nimage:\r\n  repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node\r\n  pullPolicy: IfNotPresent\r\n  # Overrides the image tag whose default is the chart appVersion.\r\n  tag: d826cb018955d342779ccc0ebdf878cfa746e765\r\n\r\nnameOverride: \"\"\r\nfullnameOverride: \"\"\r\n\r\nservice:\r\n  type: LoadBalancer\r\n\r\nresources:\r\n  {}\r\n  # We usually recommend not to specify default resources and to leave this as a conscious\r\n  # choice for the user. This also increases chances charts run on environments with little\r\n  # resources, such as Minikube. If you do want to specify resources, uncomment the following\r\n  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\r\n  # limits:\r\n  #   cpu: 100m\r\n  #   memory: 128Mi\r\n  # requests:\r\n  #   cpu: 100m\r\n  #   memory: 128Mi\r\n\r\nnodeSelector: {}\r\n\r\ntolerations: []\r\n\r\naffinity: {}\r\n\r\n#######################################\r\n# op-node settings for Goerli testnet.\r\n#######################################\r\nlivenessProbe: true\r\nreadinessProbe: true\r\n\r\nsecretForVolumeMountDir: /secrets\r\nconfigmapsForVolumeMountDir: /configmaps\r\n\r\nl1:\r\n  rpcAddr: https://eth-goerli.g.alchemy.com/v2/e0CsbXjGCT0xVVFc9MyaE7-olvSVAh4S\r\n  rpcKind: alchemy\r\n\r\nl2:\r\n  rpcAddr: http://0.0.0.0:8551\r\n  jwtSecret:\r\n    file: abf3a433bfe1f8faa262ad82b3ec5fa572e9c045a4c44bd3b21998e77fd3632a\r\n    filename: jwt-secret.txt\r\n\r\nsequencer:\r\n  enabled: true\r\n # l1Confirmations: 3\r\n  p2pKey: 87ab7e053da865130601efdb8fdd22d0197bab98fb7435fadac73cab6ed94fcc\r\n\r\n#verifier:\r\n#  l1Confirmations: 3\r\n\r\np2p:\r\n  enabled: true\r\n  priv:\r\n    file:\r\n    filename: p2ppriv.txt\r\n  listen:\r\n    ip: 0.0.0.0\r\n    tcp:\r\n      name: p2p-tcp-port\r\n      containerPort: 9003\r\n      hostPort: 9003\r\n    udp:\r\n      name: p2p-udp-port\r\n      containerPort: 9003\r\n      hostPort: 9003\r\n\r\nrollupConfig:\r\n  filename: rollup.json\r\n\r\nrpc:\r\n  port:\r\n    name: rpc-port\r\n    containerPort: 8547\r\n    hostPort: 8547\r\n  addr: 0.0.0.0\r\n  enableAdmin: true\r\n\r\nmetrics:\r\n  enabled: true\r\n  addr: 0.0.0.0\r\n  port:\r\n    name: metrics-port\r\n    containerPort: 7300\r\n    hostPort: 7300\r\n\r\n# rest application arguments\r\nargs: []\r\n\r\n```\r\n**Error -**\r\n\r\n![image](https://github.com/ethereum-optimism/optimism/assets/96972634/25232562-e849-4f65-abbd-4029ea1daa0f)\r\n\r\nI checked my Alchemy RPC, it has no issues with my L1 Goerli RPC.\r\n\r\n**helm chart that I'm using -**\r\nhttps://artifacthub.io/packages/helm/op-chain-charts/op-node", "CLOSED", 0, "nitantchhajed", "2023-09-11T11:25:44Z", "2024-06-11T20:03:19Z", "2024-06-11T20:03:18Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM5uECdB", 6723, "Issue with depositETH", "I am tesing on my private chain and optimism stack. I found that when i try bridging ETH from L1 to L2 by using https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-eth, the function depositETH() failed due to eth_estimateGas because the eth_estimateGas is used without \"from\" address and the balance of zero address is 0. To overcome that, i deposited some ETH to zero address, and it works. But it seems we need include \"from\" address as a parameter when using eth_estimateGas().\r\n", "CLOSED", 0, "nguyenzung", "2023-08-11T10:05:09Z", "2024-06-11T20:01:48Z", "2024-06-11T20:01:48Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM5tOyy_", 6561, "Bridge UI for OP-Stack chain", "\r\n**Is your feature request related to a problem? Please describe.**\r\nThe OP-Stack chain tutorial doesn't provide the UI for the bridge, which makes it difficult for non-so tech users to bridge using the sdk.\r\n\r\n**Describe the solution you'd like**\r\nI would like you guys to take a look into the fuctional UI that I've made for my OP-Stack chain, then we can work together to Implement this for the universal OP-Stack chain by making the needed changes into it.\r\n\r\nhttp://testnet-bridge.raceconomy.com/\r\n\r\nhttps://github.com/nitantchhajed/op-stack-bridge.git\r\n\r\n\r\n", "CLOSED", 0, "nitantchhajed", "2023-08-02T07:22:02Z", "2024-06-11T23:06:05Z", "2024-06-11T20:01:39Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM5svm_e", 6479, "[BestPractice] improve name for L2OO_ADDRESS environment variable", "## Obtained behavior\r\n\r\nEnvironment variable  `L2OO_ADDRESS` have a high cognitive load derived of  uppercase letters O  `L2oo_`\r\n\r\n## Expected behavior\r\n\r\nEnvironment variable  `L2OO_ADDRESS` have a normal cognitive load at understanding cause renamed to `L2OUTORA_ADDRESS` , or `L2ORACLE_ADDRESS`\r\n\r\n### Notes\r\n\r\ni think the name is for\r\n\r\n* `L2` from layer 2\r\n* first `O` from \"Output\"\r\n* second `O` from \"Oracle\"\r\n* address for deployed address at Layer 2", "CLOSED", 0, "netzulo", "2023-07-27T13:50:59Z", "2024-06-11T20:01:24Z", "2024-06-11T20:01:24Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDODjvEJM5j5Z1n", 5507, "messageStatus:2 - STATE_ROOT_NOT_PUBLISHE", "Hello. I'm testing private chain with optimism stack. So I build optimism stack on top of private chain and both optimism and private l1 working separately, transactions and deployments etc all cool. I'm also experimenting with optimism sdk, anyway I have my crosschainmessenger with my the contract addresses from deployments and chain ids etc. Everything working fine deposit eth/erc20/send message fine. \r\nThe problem is: withdrawal. \r\nWhenever I do withdrawal my \"messageStatus:2 - STATE_ROOT_NOT_PUBLISHED\". \r\nWhat might be the problem at this point?? \r\n\r\nThings I've checked: I put console output on optimism sdk crosschainmessenger(node_modules/@eth-optimism/sdk/dist/cross-chain-messenger.js) getMessageBedrockOutput() function and the error is L2OutputOracle: cannot get output for a block that has not been proposed'.\r\nSo, I've checked the L2OutputOracle contract and latestBlockNumber() is 0, FINALIZATION_PERIOD_SECONDS() is 12 if it makes any difference. \r\nAnyway, clearly something is wrong because L2OutputOracle.getL2OutputIndexAfter(uint256 _l2BlockNumber) requires _l2BlockNumber <= latestBlockNumber() .\r\n\r\nSo idk what to do to fix that yet, any help would be great thanks!\r\n(In short: help me fixing my private stack withdraw, problem is always getting \"messageStatus:2 - STATE_ROOT_NOT_PUBLISHED\")\r\n", "CLOSED", 0, "wuzhanfly", "2023-04-20T04:47:52Z", "2024-06-11T20:00:50Z", "2024-06-11T20:00:50Z", "ethereum-optimism/optimism", "2025-08-30 15:17:31"]
["I_kwDOJ_r-bs6MSyfO", 273, "codegen output is not deterministic, causing CI to ficker", "", "CLOSED", 0, "geoknee", "2024-06-14T16:42:17Z", "2024-06-14T16:57:05Z", "2024-06-14T16:57:04Z", "ethereum-optimism/superchain-registry", "2025-08-30 15:17:38"]
["I_kwDOH2Qg5s6MoO8b", 338, "op-node is stuck at Walking back L1Block by hash", "I recently updated my op-node and op-geth in my archive node. for this I stopped the service, updated the binary and restart the service. \r\n\r\nbut now my node is syncing in logs I am getting Walking back L1Block by hash\r\n\r\nPlease help me to fix this issue\r\n\r\nOp-node logs :- \r\n![Screenshot from 2024-06-18 14-37-45](https://github.com/ethereum-optimism/op-geth/assets/98412293/0e878a7a-59f7-4dd0-a6b6-6659db5fe79b)\r\n\r\n\r\nOp-geth logs :- \r\n\r\n![Screenshot from 2024-06-18 14-40-24](https://github.com/ethereum-optimism/op-geth/assets/98412293/8e91c5a8-dc01-4737-83f6-fc7aefc93d05)\r\n\r\n\r\n", "OPEN", 0, "gautamjha2002", "2024-06-18T09:10:59Z", "2024-06-18T09:10:59Z", null, "ethereum-optimism/op-geth", "2025-08-30 15:19:56"]
["I_kwDOLB-lzc6CgnpI", 94, "Compatibility between interop chain ID and batch inbox convention", "Currently the interop spec allows 256 bit chain IDs. The current convention (not requirement) for the batch inbox address is `0xFF00...{chainId}`. These are not compatible, as the batch inbox address only can fit chain IDs up to 19 bytes because addresses are 20 bytes. \r\n\r\n**This is currently not a big problem, and this issue is low priority**, because:\r\n1. The batch inbox address is only a convention, so chains with chain IDs larger than 19 bytes can choose an arbitrary batch inbox address. But we don't yet spec out what requirements (if any) that address should have.\r\n2. From my research, no chain IDs are currently large enough for this to be a problem. However, some OP Stack chains do not follow the batch inbox convention anyway.\r\n\r\nSo one consideration here is: should we enforce a batch inbox convention? Doing so would be a nice property, and we may want to spec out the required work to make this convention into a requirement.\r\n\r\nRegardless, possible solutions to the existing incompatbility are discussed below:\r\n\r\n## Shrink max allowable chain ID\r\n\r\n[EIP-2294](https://eips.ethereum.org/EIPS/eip-2294) proposed a max chain ID of `floor(MAX_UINT64 / 2) - 36`. This value was chosen to prevent overflow of a uint64 when calculating the v-component of a signature as `{0,1} + CHAIN_ID * 2 + 35` per [EIP-155](https://eips.ethereum.org/EIPS/eip-155). Many popular tools, like MetaMask, [only support](https://gist.github.com/rekmarks/a47bd5f2525936c4b8eee31a16345553) chain IDs that are within the javascript `Number.MAX_SAFE_INTEGER` based on the same v-component calculation (resulting in ~4e15, below this proposed max).\r\n\r\nThis is my preferred solution because (1) it fixes the issue with minimal work, (2) mitigates the risk of OP Stack chains not supporting popular tools, and (3) can be expanded to a larger value in the future when needed.\r\n\r\nA factor in this proposal becoming stagnant was because it prevents an easy way for chains to pick a unique chain ID through a process like `keccak256(\"myUniqueChainName\")`. This is a good point, but we already do not do this, and we can expand allowable chain ID and change the convention in the future if this becomes necessary/desirable.\r\n\r\n## Change Batch Inbox Convention\r\n\r\nSince we only have 20 bytes to work with, the new batch inbox address convention have to be something like `keccak256(schemeVersion, chainId)[:20]`. This would require changes to op-node so it can read from two batch inbox addresses: the legacy address, and a new address. It also makes it harder to look at a batch inbox address and back out the chain it's for, but this can is solved by the superchain-registry anyway\r\n\r\n## Do Nothing\r\n\r\nBecause this is just a convention, and not enforced, the status quo is ok\u2014for chains that cannot meet the convention, they just choose a different, arbitrary batch inbox address. This should still be documented in the spec somewhere, e.g. in this case does the address still need to start with `0xFF`?\r\n\r\n", "CLOSED", 0, "mds1", "2024-03-15T22:59:39Z", "2024-06-20T23:30:47Z", "2024-06-20T23:30:47Z", "ethereum-optimism/specs", "2025-08-30 15:20:02"]
["I_kwDOLB-lzc6Mkd-i", 243, "feat: Store historical block hashes to `L1Block`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nWhen it comes to updating the L2, the `L1Block` is regularly called to update its' state values, including the L1 block hash.  This hash is extremely valuable as a user can create a proof for any state of the L1 at the current block hash.\r\n\r\nThe issue arises when dealing with historical data.  As we are only ever using the most-recent hash within `L1Block`, we are unable to prove L1 state at a historical point in time on-chain without deploying our own contract with manually-synced block hashes.\r\n\r\nThe value of a chain is derived by the value of its' state.  Therefore, by having the ability to prove state at a particular time in the past, we open up cross-chain communication.\r\n\r\nAn example of what this can be used for is to prove L1 token voting power at a particular point in time.\r\n\r\n**Describe the solution you'd like**\r\nHave a mapping with `L1Block` to store historical hashes.  The most simple way I've seen it done is through a [basic mapping](https://fraxscan.com/address/0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30015#code#F1#L61). ", "OPEN", 0, "pegahcarter", "2024-03-01T17:01:09Z", "2024-06-17T22:20:44Z", null, "ethereum-optimism/specs", "2025-08-30 15:20:02"]
["I_kwDOLB-lzc6MkXZ9", 242, "A question about the 'Epochs and the Sequencing Window' section in the overview.md of specs", "![image](https://github.com/ethereum-optimism/specs/assets/16211196/44fa4562-1536-4569-b47b-68325d2fd762)\r\nThe diagram describes how L2 blocks are derived from L1 blocks.I am puzzled about B1 in the diagram. Does 'B1' here stand for batch data? It seems in the diagram that the L1 origin of the L2 block  includes the batch data for this epoch.Does The L1 origin should never contain any data needed to construct sequencer batches of its epoch\uff1f", "OPEN", 0, "Nickqiaoo", "2024-01-24T10:00:54Z", "2024-06-17T22:02:47Z", null, "ethereum-optimism/specs", "2025-08-30 15:20:02"]
["I_kwDOJ_r-bs6MqzkS", 282, "Enforce consistent \"quoting\" in add-chain output", "Existing YAML configs have the strings wrapped with quotation marks: \r\n\r\nhttps://github.com/ethereum-optimism/superchain-registry/blob/dbb44f112cefc6126779e8f22a908e0decedebb4/superchain/configs/mainnet/op.yaml#L13-L20\r\n\r\nbut the add-chain tooling outputs YAML without those marks: \r\n\r\nhttps://github.com/ethereum-optimism/superchain-registry/blob/dbb44f112cefc6126779e8f22a908e0decedebb4/add-chain/testdata/superchain/configs/sepolia/expected_baseline.yaml#L12-L19\r\n\r\nWe should enforce consistency one way or another. ", "CLOSED", 0, "geoknee", "2024-06-18T14:38:19Z", "2024-06-18T17:26:41Z", "2024-06-18T17:26:41Z", "ethereum-optimism/superchain-registry", "2025-08-30 15:20:08"]
["I_kwDOJ_r-bs6LrEh1", 264, "Add `AnchorStateRegistryProxy` address for   \"sepolia-dev-0/oplabs-devnet-0\" ", "              I'm a bit stuck trying to chase down `AnchorStateRegistryProxy` address for   \"sepolia-dev-0/base-devnet-0\" and \r\n  \"sepolia-dev-0/oplabs-devnet-0\". \r\n \r\nI wonder if @clabby knows where to get this information?\r\n  \r\nSeeing as these chains are not covered by the solidity test which I am removing on this PR, I think it is reasonable to chase this down in a followup PR.\r\n\r\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/superchain-registry/pull/257#discussion_r1631703037_\r\n            ", "CLOSED", 0, "geoknee", "2024-06-10T09:02:34Z", "2024-06-18T08:31:12Z", "2024-06-18T08:31:12Z", "ethereum-optimism/superchain-registry", "2025-08-30 15:20:08"]
["I_kwDOJ_r-bs6Irr6C", 230, "Update CheckSecurityConfigs to cover all superchain targets", "It looks like the superchain targets are hard coded into that test https://github.com/security-alliance/superchain-registry/blob/f14dc47551fdc4a5b48548a1b5bc8530d74f8ecd/scripts/CheckSecurityConfigs.s.sol#L47-L59 .\r\n\r\nTo bring the test in line with the other tests in the repo, it should loop over all superchain targets (using directories as keys). ", "CLOSED", 0, "geoknee", "2024-05-13T15:31:09Z", "2024-06-18T08:31:56Z", "2024-06-18T08:31:56Z", "ethereum-optimism/superchain-registry", "2025-08-30 15:20:08"]
["I_kwDOJ_r-bs6GKgAm", 193, "Allow solidity validation checks to be filtered by chain name or id", "* update the contributing guide\r\n* allow both sets of tests to be run against a single chain or all chains with a single command (perhaps using `make`). ", "CLOSED", 0, "geoknee", "2024-04-18T14:52:18Z", "2024-06-18T08:36:03Z", "2024-06-18T08:36:03Z", "ethereum-optimism/superchain-registry", "2025-08-30 15:20:08"]
["I_kwDOJ_r-bs6DS6yd", 142, "Link to canonical definitions of frontier/standard chains", "              Guessing we don't have a public canonical definition of standard right now but it might be useful to link out to that here if we do.\r\n\r\n_Originally posted by @blmalone in https://github.com/ethereum-optimism/superchain-registry/pull/140#discussion_r1534375926_\r\n            ", "CLOSED", 0, "geoknee", "2024-03-22T15:35:15Z", "2024-06-18T08:36:42Z", "2024-06-18T08:36:42Z", "ethereum-optimism/superchain-registry", "2025-08-30 15:20:08"]
["I_kwDOJ_r-bs5_26en", 96, "Consider extracting exported data into the filesystem itself", "This will make it available to future consumers of the repo that want to access such data _not_ through the Go module.\r\n\r\nSee also #36 and #93\r\n\r\n\r\nExample: \r\n\r\nThis code was added for validation, but included in the `superchain` module in case it may be useful to consumers of that module:\r\nhttps://github.com/ethereum-optimism/superchain-registry/blob/a87e7b7a2f774051885eb9032f9d0150a4cf4746/superchain/params.go#L40\r\n\r\nIt should _either_ not be exported at all, and housed in the `validation` module, _or_ extracted into a suitable e.g. `toml` or `json` file.", "CLOSED", 0, "geoknee", "2024-02-20T19:17:58Z", "2024-06-19T15:08:04Z", "2024-06-19T15:08:04Z", "ethereum-optimism/superchain-registry", "2025-08-30 15:20:08"]
["I_kwDOKIsnqM6LKDY-", 221, "doc: update `PRESIGNED-PAUSE.md` to explain all state overrides", "The current presigned pause docs do not explain all state overrides. From https://github.com/ethereum-optimism/superchain-ops/pull/220#discussion_r1626540464:\r\n\r\n> > You will see a state override (not a state change). This is expected and its purpose is to generate a successful Safe execution simulation without collecting any signatures.\r\n> \r\n> This is what `PRESIGNED-PAUSE.md` says, but there are 4 overrides\r\n", "CLOSED", 0, "mds1", "2024-06-05T01:03:50Z", "2024-06-20T21:15:39Z", "2024-06-20T21:15:39Z", "ethereum-optimism/superchain-ops", "2025-08-30 15:20:09"]
["I_kwDODjvEJM6M-uJ6", 10969, "Interop: Update op-program driver to use only events", "", "CLOSED", 0, "protolambda", "2024-06-20T20:54:38Z", "2024-06-21T23:48:59Z", "2024-06-21T23:48:58Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6M2qnH", 10959, "Interop: encapsulate op-program claim validation", "The `ValidateClaim` function is unnecessarily attached to the `Driver` in op-program. Instead of that this should be a standalone function. Using L2Source as input, not the engine bindings, since it only reads what the safe-head is, it does not modify it.", "CLOSED", 0, "protolambda", "2024-06-19T21:16:19Z", "2024-06-19T22:38:17Z", "2024-06-19T22:38:16Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6M2qma", 10958, "Interop: instrument Engine with Reset events", "- There should be a reset-deriver that figures out where to reset to, given the L1 and L2 chains. Then emit an event to the engine that sets the forkchoice this way.\r\n- The Engine deriver should take above forkchoice event, apply it, and emit a confirmation\r\n- The derivation pipeline should block itself upon a generic reset error, and unblock itself upon reset-confirmation. Replacing the previous ConfirmEngineReset method (can do from outside derivation pipeline until #10957 is done)", "CLOSED", 0, "protolambda", "2024-06-19T21:16:16Z", "2024-06-19T23:40:42Z", "2024-06-19T23:40:42Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6M2ql5", 10957, "Interop: instrument Pipeline with events", "- The `driver.DerivationIdle` event should be emitted from the `derive` package.\r\n- The pipeline steps (trigger, completion) should have events\r\n- The `DerivedAttributes` event should be emitted from here, not the outer caller", "CLOSED", 0, "protolambda", "2024-06-19T21:16:13Z", "2024-06-20T06:29:52Z", "2024-06-20T06:29:51Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6MNcUN", 10824, "op plasma finalize stucked", "**Bug Description**\r\nfinalize won't increase when using plasma mode and set batcher max pending tx > 1\r\n\r\n**Steps to Reproduce**\r\n1. set batcher's `--max-pending-tx` > 1\r\n2. let batcher submit multiple txs in the same block\r\n3. op node finalize will stuck at this block\r\n\r\n**Environment Information:**\r\n - Package Version: op-node v1.7.6, op-batcher v1.7.6\r\n \r\n**Additional context**\r\nmore details can be found in https://github.com/ethereum-optimism/optimism/pull/10392 comments", "CLOSED", 0, "0xyjk", "2024-06-14T02:03:02Z", "2024-06-17T22:17:42Z", "2024-06-17T22:17:42Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6L6Et0", 10803, "`make test-unit` fails in latest release", "**Bug Description**\r\n5 sub-tests of 1 test fail when running `make test-unit`.\r\n\r\n**Steps to Reproduce**\r\n`pnpm install`\r\n`make test-unit`\r\n\r\n**Environment Information:**\r\n - Operating System: MacOS Sonoma 14.5\r\n - Package Version (or commit hash): optimism 384e2dc\r\n\r\n**Logs:**\r\n\r\n      Failing tests:\r\n      Encountered 1 failing test in test/Safe/DeputyGuardianModule.t.sol:DeputyGuardianModule_NoPortalCollisions_Test\r\n      [FAIL. Reason: FfiFailed(\"Command: bash -c jq '.methodIdentifiers | keys' < /Users/fahimahmed/projects/optimism/packages/contracts-bedrock/forge-artifacts/Errors.sol/Errors.json \\nError: jq: error (at <stdin>:0): null (null) has no keys\\n\")] test_noPortalCollisions_succeeds() (gas: 1054500)\r\n      \r\n      Encountered 1 failing test in test/dispute/FaultDisputeGame.t.sol:FaultDisputeGame_Test\r\n      [FAIL. Reason: expected call to 0x4ABBBC7A947c5EF1F22b604B8ed8ddF5e31Ad131 with data 0x6361506d7fa9385be102ac3eac297483dd6233d62b3e1496010000000000000000000000000000000000000000000000000000000000000ac89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc60000000000000000000000000000000000000000000000000000000000000010 to be called 1 time, but was called 0 times] test_cwiaCalldata_userCannotControlSelector_succeeds() (gas: 24611)\r\n      \r\n      Encountered 2 failing tests in test/legacy/ResolvedDelegateProxy.t.sol:ResolvedDelegateProxy_Test\r\n      [FAIL. Reason: expected call to 0x2e234DAe75C793f67A35089C9d99245E1C58470b with data 0x2fbebd389b2ea4bcffffffffffffffffffffffffffffffffffffffffffffffffffffffff to be called 1 time, but was called 0 times; counterexample: calldata=0xdee955099b2ea4bcffffffffffffffffffffffffffffffffffffffffffffffffffffffff args=[70190903477216889620958137006540445838647024586572570533902173535105653407743 [7.019e76]]] testFuzz_fallback_delegateCallFoo_succeeds(uint256) (runs: 0, \u03bc: 0, ~: 0)\r\n      [FAIL. Reason: expected call to 0x2e234DAe75C793f67A35089C9d99245E1C58470b with data 0xfebb0f7e to be called 1 time, but was called 0 times] test_fallback_delegateCallBar_reverts() (gas: 24780)\r\n      \r\n      Encountered 1 failing test in test/periphery/Transactor.t.sol:TransactorTest\r\n      [FAIL. Reason: expected call to 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f with data 0xafc874d2 to be called 1 time, but was called 0 times] test_delegateCall_succeeds() (gas: 20910)\r\n      \r\n      Encountered a total of 5 failing tests, 1364 tests succeeded\r\n", "CLOSED", 0, "fahimahmedx", "2024-06-11T20:33:23Z", "2024-06-17T21:51:46Z", "2024-06-17T21:51:46Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6MirLt", 10851, "Interop: Event-handling update of Finalizer", "Refactor the `Finalizer` driver component to interface (read/write) with the engine through events.\r\nDepends on ethereum-optimism/optimism#10854 ", "CLOSED", 0, "protolambda", "2024-06-05T16:20:25Z", "2024-06-23T23:35:22Z", "2024-06-23T23:35:22Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6MirMf", 10852, "Interop: Event-handling update of AttributesHandler", "Refactor the `AttributesHandler` driver component to interface (read/write) with the engine through events.\r\nDepends on ethereum-optimism/optimism#10854 ", "CLOSED", 0, "protolambda", "2024-06-05T16:20:20Z", "2024-06-23T22:43:52Z", "2024-06-23T22:43:52Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6MirNO", 10853, "Interop: Event-handling update of CLSync", "Refactor the `CLSync` driver component to interface (read/write) with the engine through events.\r\nDepends on ethereum-optimism/optimism#10854 ", "CLOSED", 0, "protolambda", "2024-06-05T16:20:16Z", "2024-06-19T20:25:23Z", "2024-06-19T20:25:22Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6MirN1", 10854, "Interop: Event-handling around EngineController", "Create a wrapper around `EngineController` that exposes it through an event based interface. The other driver sub-components can then use this to complete phase 2 of the driver refactor (see design doc).", "CLOSED", 0, "protolambda", "2024-06-05T16:20:13Z", "2024-06-17T18:34:33Z", "2024-06-17T18:34:33Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6LMdjE", 10746, "`make devnet-up` no longer works for latest develop branch", "This is what I got when running:\r\n\r\n```bash\r\n------\r\n > [l2 2/3] RUN apk add --no-cache jq:\r\n0.202 fetch https://dl-cdn.alpinelinux.org/alpine/v3.20/main/x86_64/APKINDEX.tar.gz\r\n0.818 281BBFBBC07F0000:error:0A000126:SSL routines::unexpected eof while reading:ssl/record/rec_layer_s3.c:687:\r\n0.820 fetch https://dl-cdn.alpinelinux.org/alpine/v3.20/community/x86_64/APKINDEX.tar.gz\r\n0.820 WARNING: fetching https://dl-cdn.alpinelinux.org/alpine/v3.20/main: Permission denied\r\n0.842 281BBFBBC07F0000:error:0A000126:SSL routines::unexpected eof while reading:ssl/record/rec_layer_s3.c:687:\r\n0.844 WARNING: fetching https://dl-cdn.alpinelinux.org/alpine/v3.20/community: Permission denied\r\n0.844 ERROR: unable to select packages:\r\n0.844   jq (no such package):\r\n0.844     required by: world[jq]\r\n------\r\nfailed to solve: process \"/bin/sh -c apk add --no-cache jq\" did not complete successfully: exit code: 1\r\nTraceback (most recent call last):\r\n  File \"/Users/alanxu/Desktop/github/optimism/./bedrock-devnet/main.py\", line 9, in <module>\r\n    main()\r\n  File \"/Users/alanxu/Desktop/github/optimism/./bedrock-devnet/main.py\", line 5, in main\r\n    devnet.main()\r\n  File \"/Users/alanxu/Desktop/github/optimism/bedrock-devnet/devnet/__init__.py\", line 118, in main\r\n    run_command(['docker', 'compose', 'build', '--progress', 'plain',\r\n  File \"/Users/alanxu/Desktop/github/optimism/bedrock-devnet/devnet/__init__.py\", line 385, in run_command\r\n    return subprocess.run(\r\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/subprocess.py\", line 528, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['docker', 'compose', 'build', '--progress', 'plain', '--build-arg', 'GIT_COMMIT=93a24327cbe64d67484b6c43715777fb64c752c7', '--build-arg', 'GIT_DATE=1717548032']' returned non-zero exit status 17.\r\nmake: *** [devnet-up] Error 1\r\n```", "CLOSED", 0, "zhiqiangxu", "2024-06-05T08:56:55Z", "2024-06-17T19:05:22Z", "2024-06-17T19:05:21Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6MirRb", 10859, "Interop: op-supervisor service skeleton setup", "", "CLOSED", 0, "protolambda", "2024-05-31T17:06:43Z", "2024-06-17T19:00:27Z", "2024-06-17T19:00:26Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6KAopC", 10644, "OP node fails to fetch receipts of L1 (Erigon v2.60.0)", "Bug Description\r\n\r\nRunning OP node **v1.7.5** with `Erigon v2.60.0` fails with the following error:\r\n\r\nLogs:\r\n```\r\nt=2024-05-24T13:11:14+0000 lvl=info msg=\"Sync progress\" reason=\"unsafe payload from sequencer\" l2_finalized=0x52af4ae14b25ad0244b544f75e0d372cd1cc3b680919305f391035e86b3a85cf:120471009 l2_safe=0x69df7f218531e1343ff740e402e13104088dafffde6e28ffc99df78cc36f2b1b:120471153 l2_pending_safe=0x69df7f218531e1343ff740e402e13104088dafffde6e28ffc99df78cc36f2b1b:120471153 l2_unsafe=0x404f94b1a6f6e41fd007c70a03a89c7c8931a17dfe0ea5f97ac04fd9369610ac:120478748 l2_backup_unsafe=0x0000000000000000000000000000000000000000000000000000000000000000:0 l2_time=1716556273 l1_derived=0x0faffbc123b3e681ee1337d1e356ba9bd7e9c03ab6d183d7cb2a98dd165c535e:19938705\r\nt=2024-05-24T13:11:14+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=1 err=\"temp: failed to fetch receipts of L1 block 0xf99ee44942d207cff1864a4eeb70ac43a6664eb86d2868b49277dffc2fb79705:19938706 (parent: 0x0faffbc123b3e681ee1337d1e356ba9bd7e9c03ab6d183d7cb2a98dd165c535e:19938705) for L1 sysCfg update: json: cannot unmarshal hex string without 0x prefix into Go struct field Receipt.blobGasPrice of type *hexutil.Big\"\r\nt=2024-05-24T13:11:15+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x665c44d86a4dcd64624ba7bc49046a17b7cbf0c724020d3fc2c20d8eb2cc7bb2:120478749 peer=16Uiu2HAmPTboFRJN5rErpQVCDfSpDYNrG57JhxzPh7r4MgZPUrHc\r\nt=2024-05-24T13:11:15+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x665c44d86a4dcd64624ba7bc49046a17b7cbf0c724020d3fc2c20d8eb2cc7bb2:120478749\r\nt=2024-05-24T13:11:16+0000 lvl=info msg=\"Sync progress\" reason=\"unsafe payload from sequencer\" l2_finalized=0x52af4ae14b25ad0244b544f75e0d372cd1cc3b680919305f391035e86b3a85cf:120471009 l2_safe=0x69df7f218531e1343ff740e402e13104088dafffde6e28ffc99df78cc36f2b1b:120471153 l2_pending_safe=0x69df7f218531e1343ff740e402e13104088dafffde6e28ffc99df78cc36f2b1b:120471153 l2_unsafe=0x665c44d86a4dcd64624ba7bc49046a17b7cbf0c724020d3fc2c20d8eb2cc7bb2:120478749 l2_backup_unsafe=0x0000000000000000000000000000000000000000000000000000000000000000:0 l2_time=1716556275 l1_derived=0x0faffbc123b3e681ee1337d1e356ba9bd7e9c03ab6d183d7cb2a98dd165c535e:19938705```", "CLOSED", 0, "cromaniuc", "2024-05-24T13:29:27Z", "2024-06-17T22:11:54Z", "2024-06-17T22:11:53Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6IkkSc", 10507, "Generate the L2 config files  error", "go run cmd/main.go genesis l2 \\\r\n  --deploy-config ../packages/contracts-bedrock/deploy-config/getting-started.json \\\r\n  --deployment-dir ../packages/contracts-bedrock/deployments/getting-started/ \\\r\n  --outfile.l2 genesis.json \\\r\n  --outfile.rollup rollup.json \\\r\n  --l1-rpc $L1_RPC_URL\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\nnow\uff1a\r\ngo run cmd/main.go genesis l2 \\\r\n  --deploy-config ../packages/contracts-bedrock/deploy-config/getting-started.json \\\r\n  --l1-deployments ../packages/contracts-bedrock/deployments/getting-started/ \\\r\n  --outfile.l2 genesis.json \\\r\n  --outfile.rollup rollup.json \\\r\n  --l1-rpc $L1_RPC_URL\r\n  --l2-allocs  ??????", "CLOSED", 0, "Soth912", "2024-05-12T11:16:08Z", "2024-06-17T22:12:54Z", "2024-06-17T22:12:54Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6IPgOp", 10450, "Separate Dynamic and Static L1 Attributes Values", "context: https://github.com/ethereum-optimism/specs/issues/122", "CLOSED", 0, "0xfuturistic", "2024-05-08T14:35:02Z", "2024-06-17T22:12:09Z", "2024-06-17T22:12:09Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6IAzV6", 10427, "Inconsistent storage location naming across repo", "Examples:\r\nhttps://github.com/ethereum-optimism/optimism/blob/c67c67a8e0781db1092bcc088a529f5195a81587/packages/contracts-bedrock/src/L1/SystemConfig.sol#L75-L78\r\nhttps://github.com/ethereum-optimism/optimism/blob/c67c67a8e0781db1092bcc088a529f5195a81587/packages/contracts-bedrock/src/L1/SuperchainConfig.sol#L19\r\n\r\n**Recommendation:** Use the same style for namespaces across contracts (ideally with ProperCase contracts and camelCase variables [[example]](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/683b6729cd061ceecf0ebdc29b00a01930fcc8e7/contracts/access/AccessControlUpgradeable.sol#L64)).", "CLOSED", 0, "pegahcarter", "2024-05-06T22:42:43Z", "2024-06-17T22:06:53Z", "2024-06-17T22:06:53Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6HO3x9", 10337, "Script failed while deploying L1 smart contracts", "Hi,\r\n Trying to deploying smart contract, always getting script failed error. Produced new IMPL_SALT whenever deploying a contract [direnv allow]\r\n \r\n \r\n![image](https://github.com/ethereum-optimism/optimism/assets/30004506/7a21adbd-865b-4cd8-94da-401fbd1a2725)\r\n\r\nHow to solve this?", "CLOSED", 0, "Karthigasrini", "2024-04-29T11:47:08Z", "2024-06-17T22:07:40Z", "2024-06-17T22:07:40Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6FYv3K", 10115, "Proposal: Proxy singleton", "## Introduction\r\nWhen deploying a new proxy, the owner is set within the constructor.  This owner has sole access to upgrade the proxy.\r\n\r\n## Description\r\nIt is impossible for a deployer to atomically initialize proxy storage upon proxy creation if the proxy is designated to be owned by another address (ie. msig).  This introduces technical debt for op-stack chains who want to follow upgrades with top notch security.\r\n\r\nBy design, every proxy is designated to be initialized with an implementation.  Therefore, we should be able to create the proxy, set the owner, AND upgrade the proxy within one execution trace.\r\n\r\nI propose the team creates a Proxy singleton which creates and initializes the proxy from a single function call.  Something like gnosis [singleton](https://github.com/safe-global/safe-singleton-factory) would probably work.\r\n\r\n## Reference\r\nhttps://github.com/ethereum-optimism/optimism/blob/c4078e54f4b5b7e068322ebce10057bf5a8a88ff/packages/contracts-bedrock/src/universal/Proxy.sol#L40-L42", "CLOSED", 0, "pegahcarter", "2024-04-11T14:23:39Z", "2024-06-17T22:13:50Z", "2024-06-17T22:13:50Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6FVuH_", 10112, "Error: withdrawal index 0 out of bounds. There are 0 withdrawals", "              ^\r\nError: withdrawal index 0 out of bounds. There are 0 withdrawals\r\n    at CrossChainMessenger.toCrossChainMessage (C:\\Users\\Asus\\Projects\\AUTOMATED-TELEGRAM-BOT\\InhumaneBot(public)\\node_modules\\@eth-optimism\\sdk\\src\\cross-chain-messenger.ts:676:15)\r\n    at processTicksAndRejections (node:internal/process/task_queues:\r\n\r\nplease any help would do", "CLOSED", 0, "ahyammona", "2024-04-11T07:15:25Z", "2024-06-17T22:14:14Z", "2024-06-17T22:14:14Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6Mirkc", 10887, "Interop: handle deposits with cross-L2 messages in derivation", "Deposits may not perform cross-L2 messages newer than the most recent sequencing-window, to ensure the synchronous validation of the deposit cross-L2 message can be verified within reasonable time and safely reproduced.\r\n\r\n\r\n", "CLOSED", 0, "protolambda", "2024-04-01T20:45:37Z", "2024-06-21T16:51:54Z", "2024-06-21T16:51:53Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6Mirl1", 10889, "Interop: devnet v1 protocol predeploys tracker", "# Overview\n\nThis is a tracking ticket for all smart contract related work for the interop devnet release.\n\n## Definition of Done\n\nThis ticket can be considered done when each implementation has been implemented per the spec with sufficient test coverage and it is possible to use a single config option when doing L1 contract deployments and L2 genesis generation to create an interop ready network.\n\nOpen issues:\n\n`L1Block`\n- [x] ethereum-optimism/protocol-quest#168\n- [x] ethereum-optimism/protocol-quest#169\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/242\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/264\n\n`OptimismPortal`\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/265\n\n`L2ToL2CrossChainMessenger`:\n- [x] ethereum-optimism/protocol-quest#162\n- [x] ethereum-optimism/protocol-quest#163\n\n`CrossL2Inbox`:\n- [x] ethereum-optimism/protocol-quest#165\n- [x] ethereum-optimism/protocol-quest#167 \n\n`SystemConfig`:\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/243 \n\n`L2 Genesis`:\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/247\n- [x] ethereum-optimism/protocol-quest#166 \n- [x] ethereum-optimism/protocol-quest#164\n\n\nOld issues:\n- [x] ethereum-optimism/protocol-quest#152\n- [x] ethereum-optimism/protocol-quest#133 \n- [x] Fix stack too deep issue with Foundary (context: https://github.com/ethereum-optimism/client-pod/issues/686 )\n- [x] Fix foundry-compiler issues with new version\n- [x] ethereum-optimism/protocol-quest#170\n\n\nPredeploys implementation (excl. tests):\n- [x] ethereum-optimism/protocol-quest#175", "CLOSED", 0, "protolambda", "2024-04-01T17:43:46Z", "2024-06-17T21:00:26Z", "2024-06-17T21:00:26Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6EEXIu", 10000, "10000", "# Congrats Monorepo!\r\n\r\n\r\n![image](https://github.com/ethereum-optimism/optimism/assets/23033765/a028f74c-38de-46ab-a5ce-fc1dd3ed9bc8)\r\n", "CLOSED", 0, "maurelian", "2024-03-29T17:21:12Z", "2024-06-17T22:07:05Z", "2024-06-17T22:07:05Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6D44ID", 9993, "VetoerSet Feature: request for PR guidance", "Hi there,\r\n\r\nI'm Baptiste from the Base team. I've been working on adding the **VetoerSet feature to the Optimism smart contracts** to allow any of its members to perform a veto across the entire Superchain. I believe this has already been discussed, and the PR is almost ready to be sent. However, since this is my first one, **I'm opening this issue for some guidance**.\r\n\r\nThe PR adds new smart contracts in `packages/contracts-bedrock` (implementation + tests). The code is available [here](https://github.com/nadir-akhtar-coinbase/optimism/tree/feat/vetoer-set).\r\n\r\nI am unsure about the following:\r\n\r\n1. Should I PR to the `develop` branch directly?\r\n2. Should I generate a changeset? (When trying for now, I encountered an error that I need to investigate further if that's needed.)\r\n3. Should I rebase on `develop` before sending the PR?", "CLOSED", 0, "xenoliss", "2024-03-28T09:18:01Z", "2024-06-17T22:03:20Z", "2024-06-17T22:03:20Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6D4Qlu", 9992, "OP node fails to derive the **finalized** state from L1", "**Bug Description**\r\n\r\n- Ever since we upgraded to a new version a month ago (the version that added `--l1.beacon`), we've noticed that **some** instances are stuck while deriving the **finalized** state from L1. They continue to be in sync (just getting the sequencers' unsafe blocks). After a restart they recover though.\r\n\r\n`--l1.beacon` is pointing to a Lighthouse beacon archive node which is in sync without having any issues\r\n\r\n**Steps to Reproduce**\r\n\r\n- When a fork occurs on L1 beacon (https://beaconscan.com/slot/8727479), some OP nodes instances fail with:\r\n\r\n`\r\nt=2024-03-28T03:58:12+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=1 err=\"engine stage failed: temp: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0xe31a552f337deb8cb4857d3acc94c98524841543a6cc6aa71f67bc1b8b222e02:19526568: failed to fetch blob sidecars for slot 8727479 block 0xe31a552f337deb8cb4857d3acc94c98524841543a6cc6aa71f67bc1b8b222e02:19526568: failed request with status 404: {\\\"code\\\":404,\\\"message\\\":\\\"NOT_FOUND: beacon block at slot 8727479\\\",\\\"stacktraces\\\":[]}\"\r\n`\r\n\r\n**Expected behavior**\r\n\r\n- OP node should handle the forked blocks gracefully and continue to derive them from L1.\r\n\r\n**Environment Information:**\r\n - Operating System:\r\nNAME=\"Ubuntu\"\r\nVERSION=\"20.04.5 LTS (Focal Fossa)\"\r\nID=ubuntu\r\nID_LIKE=debian\r\nPRETTY_NAME=\"Ubuntu 20.04.5 LTS\"\r\nVERSION_ID=\"20.04\"\r\n\r\n - Package Version (or commit hash): OP node v1.7.2, Lighthouse v5.1.2\r\n\r\n**Configurations:**\r\n`\r\n/op-node --l1 http://erigon:8545 --l1.beacon http://lighthouse:5052 --l1.rpckind erigon --l1.trustrpc --l1.max-concurrency 130 --l1.rpc-max-batch-size 160 --l2 http://localhost:8551 --l2.jwt-secret /somesecret --network mainnet --rpc.addr 0.0.0.0 --rpc.port 5052 --metrics.enabled --metrics.addr 0.0.0.0 --metrics.port 5054 --rollup.load-protocol-versions --l1.http-poll-interval 3s\r\n`\r\n\r\n**Logs:**\r\n`\r\nl2_finalized=0xb7d30640c31b920e54100135ebf9164caf351b729d059038725e1f8f0923c90e:117977219 l2_safe=0xf9d5d7fe82cf10d55f330ddf484d923c7d91a74fe52a8951abadcacc5bedc483:117977353 l2_pending_safe=0xf9d5d7fe82cf10d55f330ddf484d923c7d91a74fe52a8951abadcacc5bedc483:117977353 l2_unsafe=0x423a5d64bf964c74c05c28d77b2bf9e6d08e8209e15533900b0641232e4dd54a:117999757 l2_backup_unsafe=0x0000000000000000000000000000000000000000000000000000000000000000:0 l2_time=1711598291 l1_derived=0xe31a552f337deb8cb4857d3acc94c98524841543a6cc6aa71f67bc1b8b222e02:19526568\r\nt=2024-03-28T03:58:12+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=1 err=\"engine stage failed: temp: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0xe31a552f337deb8cb4857d3acc94c98524841543a6cc6aa71f67bc1b8b222e02:19526568: failed to fetch blob sidecars for slot 8727479 block 0xe31a552f337deb8cb4857d3acc94c98524841543a6cc6aa71f67bc1b8b222e02:19526568: failed request with status 404: {\\\"code\\\":404,\\\"message\\\":\\\"NOT_FOUND: beacon block at slot 8727479\\\",\\\"stacktraces\\\":[]}\"\r\n`", "CLOSED", 0, "cromaniuc", "2024-03-28T07:41:37Z", "2024-06-17T22:18:36Z", "2024-06-17T22:18:36Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6Dqnvh", 9974, "How to get \"Prove Transaction hash\" for a L2 withdrawal?", "Not an actual bug (I think, unless the feature is missing), but a question. According to [this](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-trace-tx#tracing-a-withdrawal), given a L2 transaction hash for a withdrawal, we can use\r\n\r\n```js\r\nconst l1Rcpt = await crossChainMessenger.getMessageReceipt(l2TxHash)\r\nconst l1TxHash = l1Rcpt.transactionReceipt.transactionHash\r\n```\r\nand `l1TxHash` will be the finalized tx hash on L1. How can we get the Tx hash of the \"Prove Withdraw\" operation in L1 ?  \r\nIf the withdrawal is not finalized, would that `l1Rcpt.transactionReceipt.transactionHash` be empty, or would it be the Prove hash? If so, how can I get both transaction hashes once the withdrawal is finalized?\r\n\r\n", "CLOSED", 0, "gndelia", "2024-03-26T18:18:08Z", "2024-06-17T22:04:15Z", "2024-06-17T22:04:14Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6DgCC_", 9965, "Help in building a superchain exchange , i have bought the domain superchain.exchange for building a dex and bridge for all the op stack chain", "Can someone from the optimism team or dev community can help in building the dex and bridge by  helping in audit and make a better ui/ux\r\n\r\ni got the catchy name and was surprised why no one has chosen that name till now ", "CLOSED", 0, "parzivalishan", "2024-03-25T16:47:11Z", "2024-06-17T22:03:41Z", "2024-06-17T22:03:41Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6DanwA", 9962, "failed to fetch blobs\uff1aexpected 1 sidecars but got 0", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nA clear and concise description of what the bug is.\r\nEver since I upgraded to a new version a month ago (the version that added --l1.beacon), I've been having issues with network sync, the l2 network is no longer syncing, I don't know if there's something wrong with my configuration, it's stuck now .\r\n\r\n**Steps to Reproduce**\r\n1. Outline the steps to reproduce the bug.\r\n2. Be specific and detailed to help developers replicate the issue.\r\nThe l1 client I used was erigon and the beacon node was lighthouse. When I upgraded optimization to 1.7.2, the problem of synchronization stagnation occurred.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\nI expect it will still sync normally like before the update\r\n**Environment Information:**\r\n - Operating System: Ubuntu 20.04.6 LTS\r\n - Package Version (or commit hash): v1.7.2\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\nlighthouse:\r\n```\r\nlighthouse --network sepolia beacon --http --http-address 0.0.0.0 --checkpoint-sync-url=https://beaconstate-sepolia.chainsafe.io --execution-endpoint=http://127.0.0.1:8551 --execution-jwt=/jwt/node_beacon/jwt.hex --http-port 8552 --port 8553\r\n```\r\noptimism:\r\n```\r\nL1URL=http://127.0.0.1:8545\r\nL1BEACONURL=http://127.0.0.1:8552\r\nL1KIND=erigon\r\nNET=op-sepolia\r\ncd /geth/optimism/op-node\r\n./bin/op-node \\\r\n        --l1=$L1URL  \\\r\n        --l1.rpckind=$L1KIND \\\r\n\t--l1.beacon=$L1BEACONURL \\\r\n        --l2=http://localhost:8561 \\\r\n        --l2.jwt-secret=/geth/optimism/op-node/jwt.txt \\\r\n        --network=$NET \\\r\n\t--network=op-sepolia \\\r\n        --rpc.addr=0.0.0.0 \\\r\n        --rpc.port=8547\r\n```\r\nop-geth:\r\n```\r\n#! /usr/bin/bash\r\n\r\nSEQUENCER_URL=https://sepolia-sequencer.optimism.io/\r\n\r\ncd /geth/op-geth\r\n\r\n./build/bin/geth \\\r\n  --op-network=op-sepolia \\\r\n  --ws \\\r\n  --ws.port=8556 \\\r\n  --ws.addr=0.0.0.0 \\\r\n  --ws.origins=\"*\" \\\r\n  --http \\\r\n  --http.port=8555 \\\r\n  --http.addr=0.0.0.0 \\\r\n  --http.vhosts=\"*\" \\\r\n  --http.corsdomain=\"*\" \\\r\n  --authrpc.addr=localhost \\\r\n  --authrpc.jwtsecret=/geth/op-geth/jwt.txt \\\r\n  --authrpc.port=8561 \\\r\n  --discovery.port=30313 \\\r\n  --port=30313 \\\r\n  --authrpc.vhosts=\"*\" \\\r\n  --verbosity=3 \\\r\n  --rpc.gascap=500000000 \\\r\n  --rollup.sequencerhttp=$SEQUENCER_URL \\\r\n  --nodiscover \\\r\n  --syncmode=full \\\r\n  --maxpeers=0 \\\r\n  --datadir=./data \\\r\n  --snapshot=false \\\r\n  --gcmode=archive\r\n```\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\nop-geth:\r\n```\r\nINFO [03-24|06:08:25.781] Loaded most recent local finalized block number=8,366,372 hash=64ceb3..276313 td=0 age=1mo1d13h\r\nINFO [03-24|06:08:25.784] Initialising Ethereum protocol           network=11,155,420 dbversion=8\r\nINFO [03-24|06:08:25.785] Loaded local transaction journal         transactions=0 dropped=0\r\nINFO [03-24|06:08:25.785] Regenerated local transaction journal    transactions=0 accounts=0\r\nINFO [03-24|06:08:25.785] Chain post-merge, sync via beacon client\r\nINFO [03-24|06:08:25.786] Gasprice oracle is ignoring threshold set threshold=2\r\nINFO [03-24|06:08:25.786] Initialized transaction indexer          limit=0\r\nWARN [03-24|06:08:25.787] Unclean shutdown detected                booted=2024-03-24T03:57:18+0000 age=2h11m7s\r\nWARN [03-24|06:08:25.787] Unclean shutdown detected                booted=2024-03-24T05:53:33+0000 age=14m52s\r\nWARN [03-24|06:08:25.789] Engine API enabled                       protocol=eth\r\nINFO [03-24|06:08:25.789] Starting peer-to-peer node               instance=Geth/v1.101308.2-stable-0402d543/linux-amd64/go1.21.6\r\nINFO [03-24|06:08:25.799] IPC endpoint opened                      url=/geth/op-geth/data/geth.ipc\r\nINFO [03-24|06:08:25.799] Loaded JWT secret file                   path=/geth/op-geth/jwt.txt crc32=0x6620d394\r\nINFO [03-24|06:08:25.800] HTTP server started                      endpoint=[::]:8555 auth=false prefix= cors=* vhosts=*\r\nINFO [03-24|06:08:25.800] WebSocket enabled                        url=ws://[::]:8556\r\nINFO [03-24|06:08:25.800] WebSocket enabled                        url=ws://127.0.0.1:8561\r\nINFO [03-24|06:08:25.800] HTTP server started                      endpoint=127.0.0.1:8561 auth=true  prefix= cors=localhost vhosts=*\r\nINFO [03-24|06:08:25.801] New local node record                    seq=1,711,096,038,590 id=ec1461c5a6df4de9 ip=127.0.0.1 udp=0 tcp=30313\r\nINFO [03-24|06:08:25.802] Started P2P networking                   self=\"enode://xxx@127.0.0.1:30313?discport=0\"\r\nINFO [03-24|07:08:25.788] Regenerated local transaction journal    transactions=0 accounts=0\r\nINFO [03-24|08:08:25.787] Regenerated local transaction journal    transactions=0 accounts=0\r\nINFO [03-24|09:08:25.788] Regenerated local transaction journal    transactions=0 accounts=0\r\n```\r\n\r\noptimism:\r\n```\r\nt=2024-03-25T03:10:02+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x11c27f0f5b47d8e5c09c60b97cc905d6972126215e70a8b6d8b67f7c9634573f:9766831\r\nt=2024-03-25T03:10:04+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x052ff56fb624794a63b49aefea8b4ea596abd52e75a38cc61e511d005738dd8e:9766832 peer=16Uiu2HAmFuhGDyx1PwgLm8gAhDufUcVEP42hAL2EN9VmmHocriZi\r\nt=2024-03-25T03:10:04+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x052ff56fb624794a63b49aefea8b4ea596abd52e75a38cc61e511d005738dd8e:9766832\r\nt=2024-03-25T03:10:06+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x0aa2c184e0120033d96860271040f64e607372efd800a0be5e5d75e4a75d40f6:9766833 peer=16Uiu2HAmFuhGDyx1PwgLm8gAhDufUcVEP42hAL2EN9VmmHocriZi\r\nt=2024-03-25T03:10:06+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x0aa2c184e0120033d96860271040f64e607372efd800a0be5e5d75e4a75d40f6:9766833\r\nt=2024-03-25T03:10:07+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=7434 err=\"engine stage failed: temp: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0x799e89369a21a862a5ae506841e56b1cd4895f5d7b7fabe66add300a6c1cb315:5335452: expected 1 sidecars but got 0\"\r\nt=2024-03-25T03:10:08+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x68b89b9c535b0d15aecaf88be92fbe918fe4aafd6c711f8f292625c703b08f99:9766834 peer=16Uiu2HAmFuhGDyx1PwgLm8gAhDufUcVEP42hAL2EN9VmmHocriZi\r\nt=2024-03-25T03:10:08+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x68b89b9c535b0d15aecaf88be92fbe918fe4aafd6c711f8f292625c703b08f99:9766834\r\nt=2024-03-25T03:10:10+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xa3e34c0054ed7456a80ad8790da5f6cce605cccc258ef04b57348c3fbfa3aa69:9766835 peer=16Uiu2HAmFuhGDyx1PwgLm8gAhDufUcVEP42hAL2EN9VmmHocriZi\r\n\r\n```", "CLOSED", 0, "harveyff", "2024-03-25T03:12:26Z", "2024-06-17T22:05:32Z", "2024-06-17T22:05:31Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6DZWfZ", 9961, "Using Subgraph to retrieve blobs", "**Is your feature request related to a problem? Please describe.**\r\nAs a node operator, I would like an option to be able to use a Subgraph to connect the `op-node` for retrieving blob data.\r\n\r\n**Describe the solution you'd like**\r\n\r\n1. Add a New Configuration Option:\r\n    - Allow users to specify a GraphQL API endpoint for retrieving blob data using either a command-line flag (`-l1.beacon-graphql`) or an environment variable (`L1_BEACON_GRAPHQL`).\r\n2. Implement Startup Validation:\r\n    - At startup, check that the provided GraphQL endpoint is compatible with your system. Use GraphQL's introspection feature to verify that the API has all the necessary fields required by `op-node`.\r\n3. Create a Method to Query the API:\r\n    - Develop a method that uses the provided GraphQL endpoint to fetch blob data for specific `block_id`s. This method should be similar to the existing `[GetBlobSidecars](https://github.com/ethereum-optimism/optimism/blob/develop/op-service/sources/l1_beacon_client.go#L221-L222)` but tailored for GraphQL.\r\n\r\nThe [Subgraph](https://thegraph.com/explorer/subgraphs/AEwmTRZrEdrmsoRLvkXmXgP2q7TvcMVcCdGQUY8Cp6Mm?view=Playground&chain=arbitrum-one) we built at the Graph returns a structure similar to the `/eth/v1/beacon/blob_sidecars/{block_id}`. Based on my research of the current implementation of `GetBlobSidecars`, the subgraph does return all the fields necessary, but let me know if there are other fields I might have missed that we need to integrate so we can update the schema. \r\n\r\n```graphql\r\ntype Blob {\r\n id: ID!\r\n index: Int!\r\n blob: Bytes!\r\n kzg_commitment: Bytes!\r\n kzg_proof: Bytes!\r\n kzg_commitment_inclusion_proof: [Bytes!]!\r\n slot: Slot!\r\n}\r\n\r\ntype Slot {\r\n id: ID!\r\n number: BigInt!\r\n spec: String!\r\n proposer_index: Int!\r\n parent_root: Bytes!\r\n state_root: Bytes!\r\n body_root: Bytes!\r\n signature: Bytes!\r\n timestamp: String!\r\n blobs(\r\n  skip: Int = 0\r\n  first: Int = 100\r\n  orderBy: Blob_orderBy\r\n  orderDirection: OrderDirection\r\n  where: Blob_filter\r\n  block: Block_height\r\n ): [Blob!]!\r\n}\r\n\r\ntype Query {\r\n  blob(\r\n    id: ID!\r\n    block: Block_height\r\n  ): Blob\r\n}\r\n```\r\n\r\n**Additional context**\r\n\r\n- Learn more about how to use The Graph for retrieving blobs https://thegraph.com/blog/eip-4844-blobs-data/\r\n- Try out this subgraph to retrieve blob data https://thegraph.com/explorer/subgraphs/AEwmTRZrEdrmsoRLvkXmXgP2q7TvcMVcCdGQUY8Cp6Mm?view=Playground&chain=arbitrum-one\r\n- I'm an engineer with The Guild, a core dev team at The Graph specializing on GraphQL API and Developer Tooling. We are happy to contribute changes the changes required to support this new configuration option. I need your help reviewing the GraphQL Schema proposed and would appreciate guidance on navigating the codebase.", "CLOSED", 0, "saihaj", "2024-03-24T17:11:32Z", "2024-06-17T22:04:27Z", "2024-06-17T22:04:27Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6CQoNp", 9859, "missing required field 'l1FeeScalar' for Receipt", "When I used the TransactionReceipt method to obtain transaction receipt, I reported a missing required field 'l1 fee scalar' for receipt error.\r\n\r\ntx: 0x682951988dd76de9b8cfcd3ecfdbad6d84663d0d6ca95fe07e9553e673249951", "CLOSED", 0, "colinisme", "2024-03-14T04:28:13Z", "2024-06-17T22:14:41Z", "2024-06-17T22:14:40Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6Bpy2i", 9790, "Stopping l2geth for using an external historical RPC", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nwhen i run a new node , i got this error ,how can i solve it ?\r\n\r\ndocker logs simple-optimism-node-l2geth-1 -f --tail 50\r\nerrexit         on\r\nnoglob          off\r\nignoreeof       off\r\nmonitor         off\r\nnoexec          off\r\nxtrace          off\r\nverbose         off\r\nnoclobber       off\r\nallexport       off\r\nnotify          off\r\nnounset         off\r\nvi              off\r\npipefail        off\r\nStopping l2geth for using an external historical RPC\r\n", "CLOSED", 0, "wetezos", "2024-03-08T03:41:52Z", "2024-06-17T22:15:39Z", "2024-06-17T22:15:39Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6AYo2n", 9656, "contracts-bedrock: Invalid format of L1_RPC_URL causes configuration in getting-started.json error", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nInvalid environment `L1_RPC_URL` (e.g. string that is not RPC URL) causes incorrect string format injected to `getting-started.json`. From `config.sh` in `packages/contracts-bedrock/scripts/getting-started/config.sh`, if `L1_RPC_URL` is not valid RPC url, it will prompt error in shell and incorrect string injected as mentioned.\r\n\r\n```bash\r\nError:\r\nNo such file or directory (os error 2)\r\n```\r\n\r\n![Screenshot 2567-02-26 at 17 48 07](https://github.com/ethereum-optimism/optimism/assets/14361087/591fc72a-a356-4194-b0ed-24c859e72ccf)\r\n\r\n**Steps to Reproduce**\r\n\r\nThis was referenced from [tutorial](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup).\r\n1. Add incorrect `L1_RPC_URL` url to `.envrc`\r\n2. Run script `packages/contracts-bedrock/scripts/getting-started/config.sh`\r\n3. This will be resulted as above.\r\n\r\n**Expected behavior**\r\n\r\nValidation in `config.sh` with an error prompt indicating that current `L1_RPC_URL` is not valid could help fellow newcomers know what's wrong and helps them follow along tutorial more easily.\r\nPS. Happy to help fixing this issue but not really sure if there are any other conditions is needed to validate.\r\n\r\n**Environment Information:**\r\n - Operating System: [e.g. Ubuntu 20.04]\r\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\r\n\r\n**Configurations:**\r\n```.env\r\n# Any of invalid RPC URL should result errors\r\nexport L1_RPC_URL=alchemy\r\n\r\n# Other configuration is the same to tutorial.\r\n```\r\n\r\n**Logs:**\r\n\r\nResult on running `packages/contracts-bedrock/scripts/getting-started/config.sh` with invalid environment variable.\r\n\r\n```bash\r\nError:\r\nNo such file or directory (os error 2)\r\n```\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "badgooooor", "2024-02-26T11:28:06Z", "2024-06-17T22:06:37Z", "2024-06-17T22:06:37Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6ACCI8", 9622, " undefined: params.ProtocolVersionV0", "Import the latest v1.6.1 package, the compilation prompts \"undefined: params.ProtocolVersionV0\"\r\n<img width=\"1048\" alt=\"image\" src=\"https://github.com/ethereum-optimism/optimism/assets/6647261/b9324519-4b4c-4b32-af1a-fe691655df22\">\r\n\r\nIn addition, the go-etherum package was also forced to upgrade, resulting in many log-related conflicts.", "CLOSED", 0, "iteyelmp", "2024-02-22T01:48:25Z", "2024-06-17T22:05:29Z", "2024-06-17T22:05:29Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5-_Q8Y", 9480, "predeploys: autogen the files with constants from a single file someplace", "this is to ensure that all the files stay in sync (context: https://github.com/cantinasec/optimism-cycle-19-review/issues/30)", "CLOSED", 0, "0xfuturistic", "2024-02-12T16:35:12Z", "2024-06-17T22:06:09Z", "2024-06-17T22:06:09Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM6Mirpl", 10893, "Interop: Configuration Library", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThere needs to be a portable library that can read config for an arbitrary number of chain ids to rpc urls. We should be sure to write this library once and up front so that everything that requires RPC URL config can be configured in the same way.\r\n\r\nIt isn't immediately obvious how this should work but seems most simple to use a file that contains key value pairs. It could potentially also work with flags or env vars.", "CLOSED", 0, "tynes", "2024-02-09T20:40:06Z", "2024-06-21T20:13:32Z", "2024-06-21T20:13:31Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5-m4m1", 9427, "Generate contract artifacts fails with missing null.json file", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nI am following the steps in the `Creating your own L2 Rollup Testnet` document and have an error at \"Generate contract artifacts\" - https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#deploy-the-l1-contracts\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\n`forge script scripts/Deploy.s.sol:Deploy --sig 'sync()' --rpc-url $L1_RPC_URL`\r\n\r\nreturns the following output:\r\n\r\n<img width=\"1599\" alt=\"image\" src=\"https://github.com/ethereum-optimism/optimism/assets/99218061/fc4a51da-e43e-430c-a833-4da9e7821081\">\r\n\r\n**System Specs:**\r\n - See required tools and versions:\r\n<img width=\"583\" alt=\"image\" src=\"https://github.com/ethereum-optimism/optimism/assets/99218061/6eac8977-a192-49d5-a5e5-669a0ab41fc9\">\r\n\r\n - OS: Apple M1 Max, macOS Sonoma, v14.2.1\r\n - Package Version (or commit hash): https://github.com/ethereum-optimism/optimism/tree/tutorials/chain\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "0x70626a", "2024-02-08T00:05:53Z", "2024-06-17T22:14:59Z", "2024-06-17T22:14:59Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5-Pc9c", 9348, "Centralized node balance query delay problem", "For example, I transferred some coins from address A to address B, and then used address B to transfer, but the result was an error message of insufficient funds.  I confirmed that the coins have been transferred to address B.\uff0cIt takes multiple attempts to broadcast later to succeed.\r\n\r\nzhenlong han, [Feb 4, 2024 at 14:16:42]:\r\nThis scenario is quite extreme. This problem occurs when I transfer and receive coins and then immediately go to trade.\r\n\r\nOP Mainnet Transaction Hash (Txhash) Details | Optimism\r\nOP Mainnet detailed transaction info for txhash 0x495a91663e7f9a948430790f52e43ea2892bfa30c100a2ae131b779b77614394. The transaction status, block confirmation, gas fee, ETH, and token transfer are shown.\r\n\r\nhttps://optimistic.etherscan.io/tx/0x495a91663e7f9a948430790f52e43ea2892bfa30c100a2ae131b779b77614394\r\n\r\n{\r\n  \"nonce\": 0,\r\n  \"gasLimit\": 150000,\r\n  \"to\": \"0x7f5c764cbc14f9669b88837ca1490cca17c31607\",\r\n  \"value\": 0,\r\n  \"data\": \"a9059cbb000000000000000000000000ebe80f029b1c02862b9e8a70a7e5317c06f62cae00000000000000000000000000000000000000000000000000000000fb881700\",\r\n  \"maxFeePerGas\": 200000000,\r\n  \"maxPriorityFeePerGas\": 100000000,\r\n  \"pubkey\": \"d91f12da46d5b12193567ca4f68b393fbbf00c1f831db04c8af813f4e933832998a21c1498312119f799cd4689f561abe0b1e8a3db7e9c1c9618eecde00430fa\",\r\n  \"from\": \"0x37760cd9532645877f1cd967dcb2c38f83e14db4\",\r\n  \"hash\": \"0x495a91663e7f9a948430790f52e43ea2892bfa30c100a2ae131b779b77614394\",\r\n  \"r\": \"0xc1788e481db9e7a2fed333ca765c70931cc19ff915881b981ba2d870cffd40d4\",\r\n  \"v\": \"0x01\",\r\n  \"s\": \"0x7cf0f8f9bf9dab9bea328c50fd13e40fcfe9b338c97d883d2935c294bfff91b7\"\r\n}", "CLOSED", 0, "hanzhenlong1314", "2024-02-05T08:46:14Z", "2024-06-17T22:16:30Z", "2024-06-17T22:16:30Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM591dEQ", 9293, "SDK update 3.1.8 broke `estimateL1GasCost` for type 0 txs", "**Describe the bug**\r\n\r\nThe fix in #8902 explicitly defines values to be serialized by ethers.\r\n\r\nFor type `0` txs, ethers will [accept the input](https://github.com/ethers-io/ethers.js/blob/v5.7.2/packages/transactions/src.ts/index.ts#L311) and [check the property keys](https://github.com/ethers-io/ethers.js/blob/v5.7.2/packages/transactions/src.ts/index.ts#L226C34-L226C56). Since type `2` properties now exist on the tx object (even if undefined), they [fail the check](https://github.com/ethers-io/ethers.js/blob/v5.7.2/packages/transactions/src.ts/index.ts#L105).\r\n\r\n**To Reproduce**\r\n\r\nCall `estimateL1GasCost()` with type `0` params on ethers 5.7.2.\r\n\r\n**Expected behavior**\r\n\r\nReturn estimated l1 gas cost.\r\n\r\n", "CLOSED", 0, "shanefontaine", "2024-01-31T23:29:05Z", "2024-06-17T22:03:05Z", "2024-06-17T22:03:05Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM59usZv", 9273, "critical rollup parameters should be read from L1", "Parameters like [`ChannelTimeout`](https://github.com/ethereum-optimism/optimism/blob/c874ecc9f195b340d9cb3ae6dc9f8f9731254e1e/op-node/rollup/types.go#L66) will affect the derivation result, but now it's directly read from local instead of from L1.\r\n\r\nIt's like missing some constraints in zk circuits, probably will cause trouble for dispute, since different setting of `ChannelTimeout` may cause the data frame treated differently(valid or ignored).", "CLOSED", 0, "zhiqiangxu", "2024-01-31T06:38:21Z", "2024-06-17T22:02:22Z", "2024-06-17T22:02:22Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM59cNsA", 9227, "There is no problem with the setting of the transaction broadcast fee, but the transaction does not go up the chain.", "broadcasttime 2024-01-29 08:37:50.710\r\n\r\n0x02f8760a831128d58411e1a3008502540be400830249f094b4472c3d895ee11a13137dd74331cad3ccdbe494877c58508723800080c001a077b9966ce1bb30ebf092ad53cf9bec75a1a4596b0b55187e55e56a12ad2abce3a0080dda7f2b3446e9f6affd716920d4ef5eff4c41fd61793b46de4b2368968168\r\n\r\n0x596f42c732caf27c0e37bb74f9cb59fcf6275cfb5c074b52df285d97cd76567b\r\n\r\noker@okerdeMacBook-Pro golandProject % curl -X POST  https://rpc.ankr.com/optimism --data '{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": \"1\",\r\n  \"method\": \"eth_sendRawTransaction\",\r\n  \"params\": [ \"0x02f8760a831128d58411e1a3008502540be400830249f094b4472c3d895ee11a13137dd74331cad3ccdbe494877c58508723800080c001a077b9966ce1bb30ebf092ad53cf9bec75a1a4596b0b55187e55e56a12ad2abce3a0080dda7f2b3446e9f6affd716920d4ef5eff4c41fd61793b46de4b2368968168\" ]\r\n}' -H \"Content-Type: application/json\"\r\n{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"error\":{\"code\":-32000,\"message\":\"already known\"}}%\r\n![image](https://github.com/ethereum-optimism/optimism/assets/25896081/db7a2780-b558-4fb5-bfc2-943ab42ace97)\r\n", "CLOSED", 0, "hanzhenlong1314", "2024-01-29T03:09:11Z", "2024-06-17T22:15:15Z", "2024-06-17T22:15:15Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM57_yfF", 8993, "Improve error message for empty payload (payload with zero transactions)", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/f2229b8b955e53408be0775a22d7f9f162b0de66/op-node/rollup/derive/engine_queue.go#L663-L666\r\n\r\nThis error can also occur if the payload is empty (deposit txs == 0)\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/f2229b8b955e53408be0775a22d7f9f162b0de66/op-node/rollup/derive/engine_queue.go#L654-L654\r\n\r\nwhether a payload with zero transactions only contains deposit txs, is semantics. But imo it would be more clear to have a different error for this case.\r\n\r\n**Describe the solution you'd like**\r\ncheck if depositCount is 0 and adjust the error message\r\n\r\n**Describe alternatives you've considered**\r\n-\r\n**Additional context**\r\nThis was highlighted by an op-reth bug:\r\n![telegram-cloud-photo-size-5-6132094275480043498-y](https://github.com/ethereum-optimism/optimism/assets/19890894/95208484-c0c4-4226-be44-07bfdfac1bad)\r\n", "CLOSED", 0, "mattsse", "2024-01-13T14:17:01Z", "2024-06-17T22:19:42Z", "2024-06-17T22:19:42Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM57u_4N", 8952, "sender address missing in sdk for deposit and withdrawal gas estimation", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\nhttps://github.com/ethereum-optimism/optimism/blob/034a993e4e3662a8a7625f0492fcf0b7b21d68e8/packages/sdk/src/cross-chain-messenger.ts#L2042\r\nGas estimation for deposit and withdrawal of ETH and ERC20 do not consider the sender's address. It uses default which is 0x0, which can cause wrong estimation or error. \r\n\r\nIn the case for OP Sepolia 0x0 address only has 1 wei. Hence, when trying to deposit any amount bigger than 1 wei from any EOA, gas estimation will fail with the following error\r\n`insufficient funds for gas * price + value: address 0x0000000000000000000000000000000000000000 have 1 want 10000000000000000 (supplied gas 30000000`\r\n\r\nThis is because gas estimation is trying to compute the gas cost of transferring 1 wei from 0x0 to recipient instead of the actual sender to recipient. \r\n\r\nFor deposit and withdrawal of ETH or ERC20, sender address should be used in the gas estimate. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to '...'\r\n2. Click on '....'\r\n3. Scroll down to '....'\r\n4. See error\r\n\r\n1. Setup a OP Stack (L3) on top of OP Sepolia\r\n2. Try bridging operation using the sdk\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS:\r\n - Package Version (or commit hash): OP SDK version 3.1.2\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "bb111189", "2024-01-11T07:10:03Z", "2024-06-17T22:21:05Z", "2024-06-17T22:21:05Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM57uGJa", 8950, "Optimism node synchronization is very slow, and the official has not yet provided a snapshot", "As the title suggests\r\n\r\nop-geth version:v1.101304.2\r\nop-node version: v1.4.0\r\n\r\n```\r\nop-geth \\\r\n  --ws \\\r\n  --ws.port=9994 \\\r\n  --ws.addr=0.0.0.0 \\\r\n  --ws.origins=\"*\" \\\r\n  --http \\\r\n  --http.port=9993 \\\r\n  --http.addr=0.0.0.0 \\\r\n  --http.vhosts=\"*\" \\\r\n  --http.corsdomain=\"*\" \\\r\n  --authrpc.addr=0.0.0.0 \\\r\n  --authrpc.jwtsecret=/opt/secrets/jwt.txt \\\r\n  --authrpc.port=8551 \\\r\n  --authrpc.vhosts=\"*\" \\\r\n  --ws.api=debug,eth,txpool,net,engine,web3 \\\r\n  --http.api=web3,debug,eth,txpool,net,engine \\\r\n  --datadir=/opt/op-geth \\\r\n  --verbosity=3 \\\r\n  --rollup.disabletxpoolgossip=true \\\r\n  --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io \\\r\n  --nodiscover \\\r\n  --syncmode=full \\\r\n  --gcmode=full \\\r\n  --txlookuplimit 0 \\\r\n  --maxpeers=0\r\n```\r\n\r\n```\r\nop-node --l1=http://127.0.0.1:8545 \\\r\n        --l2=http://127.0.0.1:8551  \\\r\n\t--network=mainnet \\\r\n\t--l1.trustrpc \\\r\n        --rpc.addr=0.0.0.0 \\\r\n        --rpc.port=9545 \\\r\n\t--l1.rpckind=basic \\\r\n        --l2.jwt-secret=/opt/secrets/jwt.txt \\\r\n```\r\n\r\n\r\n\r\nop-geth logs:\r\n\r\nINFO [01-11|03:33:33.700] Chain head was updated                   number=111,968,152 hash=0c998f..e305fa root=a47128..27b9ba elapsed=\"173.043\u00b5s\" age=2mo2d14h\r\n\r\n\r\n##I have been syncing for a month now, but I still diff 3 million block from the main network\r\n\r\nhow to fix this issues!\r\n", "CLOSED", 0, "zhy827827", "2024-01-11T03:51:38Z", "2024-06-17T22:21:54Z", "2024-06-17T22:21:54Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM57ZBu2", 8882, "Get frame_data failed on sepolia by L2 Chain Derivation Specification.", "I attempted to parse the frame_data from the input of a Batcher Transaction, and ultimately retrieved the data using zlib.inflateSync. This process works successfully on the mainnet, but fails to parse the input on the testnet. Could you please explain the differences between the mainnet and testnet that might impact this logic?\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/v1.1.4/specs/derivation.md#eager-block-derivation\r\n![image](https://github.com/ethereum-optimism/optimism/assets/145973583/747d6237-1e92-4670-825c-6168c10df29d)\r\n\r\nhttps://etherscan.io/tx/0x4eb0b76a7b55e66399729dc77e9baa0857ac614e7670dbd4176d151c1e1e3167\r\nhttps://sepolia.etherscan.io/tx/0x68f305520fee621b015b0999a4d536cecefedd9594f613f5ead107d79db33731", "CLOSED", 0, "liucan163", "2024-01-08T10:29:56Z", "2024-06-17T22:26:35Z", "2024-06-17T22:26:35Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM56jnmz", 8775, "Is it possible to add a parameter to set the home directory for the op-node software?", "**Describe the solution you'd like**\r\nIs it possible to add a parameter to set the home directory for the op-node software?\r\nFor commands, the home directory is set to the current executing command directory by default.", "CLOSED", 0, "rayn316", "2023-12-26T08:12:26Z", "2024-06-17T22:25:11Z", "2024-06-17T22:25:11Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM56Qbq3", 8705, "CI can't generate coverage", "CI seems unable to generate coverage as part of the step `contracts-bedrock-coverage`. This is important because the step is responsible for generating and uploading the coverage to Codecov, which means that changes, such as new tests, may not make it to Codecov, preventing certain PRs from passing all CI checks.\r\n\r\nTo validate whether this was due to an error from changes in my branch, I created [a fresh branch](https://github.com/ethereum-optimism/optimism/tree/ctb/immutable-tes) from [develop](https://github.com/ethereum-optimism/optimism/tree/develop). There, I slightly modified two comments as to make the system not skip generating coverage and [made a PR](https://github.com/ethereum-optimism/optimism/pull/8703). Again, CI failed, precisely at the point of running `forge coverage --report lcov`, as can be seen here: https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/37495/workflows/[%E2%80%A6]4-8d5e-c36cba321263/jobs/1687717/parallel-runs/0/steps/0-105.\r\n\r\nThere's an [issue](https://github.com/foundry-rs/foundry/issues/6442) posted in Foundry's repo that outlines a similar problem, which, as it says in the description, belongs to tests of [Optimism](https://github.com/ethereum-optimism).\r\n\r\nThe fact that I cannot replicate this error locally (macOS Sonoma 14.2.1, M3 Max) seems unlikely to be due to a mismatch in Forge versions, since my local computer and CI are using the same version: `forge 0.2.0 (53b15e6 2023-12-14T00:17:09.405850859Z)`.\r\n\r\n@tynes pointed out that the issue could originate here: https://github.com/ethereum-optimism/optimism/blob/355bdf337a9331418f1f41d8451a1a4cd56fdd94/packages/contracts-bedrock/test/setup/Setup.sol#L80 which gets wonky when 2 diff compiler versions are used. More specifically, the error could arise from the code not being able to find the artifact (where the error msg is coming from).", "CLOSED", 0, "0xfuturistic", "2023-12-20T19:13:55Z", "2024-06-17T22:24:20Z", "2024-06-17T22:24:19Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM55p2IO", 8615, "Why is the logs array empty when calling getTransactionReceipt() on the OP node?", "https://sepolia-optimism.etherscan.io/tx/0xd2d522aae3f240e4caf43dd674b2db81152c3d3928dfe566b39dafe362720e86\r\n\r\nconst result =  web3.eth.getTransactionReceipt(\"0xd2d522aae3f240e4caf43dd674b2db81152c3d3928dfe566b39dafe362720e86\")\r\n\r\nconsole.log(result)\r\n```javascript\r\n{\r\n  blockHash: '0x5acb2ab256dcc87af9a4238e5ecca69f17265830db498b70f4f60d062f0da9ac',\r\n  blockNumber: 5365553,\r\n  contractAddress: null,\r\n  cumulativeGasUsed: 67901,\r\n  effectiveGasPrice: '0x4b1a13fc',\r\n  from: '0xfa99d3ab33ed6e7ceebb051de33dd24ec72839c4',\r\n  gasUsed: 21000,\r\n  l1Fee: '0xcd487062c3f',\r\n  l1FeeScalar: '0.684',\r\n  l1GasPrice: '0x261c52ef0',\r\n  l1GasUsed: '0x7e0',\r\n  logs: [],\r\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n  status: true,\r\n  to: '0xc447247a786f6ff2e2e6e55d31214bafe2c630b4',\r\n  transactionHash: '0xd2d522aae3f240e4caf43dd674b2db81152c3d3928dfe566b39dafe362720e86',\r\n  transactionIndex: 1,\r\n  type: '0x2'\r\n}\r\n``` ", "CLOSED", 0, "liucan163", "2023-12-14T06:35:18Z", "2024-06-17T22:25:03Z", "2024-06-17T22:25:02Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM55oU9S", 8609, "Auto-generate ENV Vars from Flags names", "We currently assert that most flags follow our standard env var in https://github.com/ethereum-optimism/optimism/pull/8596. We should set aliases for env vars which don't conform to the standard & auto-generate a standardized format env var.\r\n\r\nWe should also warn users if they set both env vars or set the old env var.", "CLOSED", 0, "trianglesphere", "2023-12-13T23:21:29Z", "2024-06-17T22:24:49Z", "2024-06-17T22:24:49Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM55W9Eg", 8554, "indexer: default devnet toml configuration with local grafana instance/dashboard", "The indexer is in a mature state. Some followups:\r\n1. The default indexer configuration in the repository should be setup for the local devnet.\r\n2. The docker-compose should include a grafana instance with a default dashboard available for the indexer and api services", "CLOSED", 0, "hamdiallam", "2023-12-11T16:30:13Z", "2024-06-17T22:24:33Z", "2024-06-17T22:24:32Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM54-IXy", 8488, "Enabled golang race detector in CI/Tests", "The golang data race detector can find some bugs.\r\nUsage Guide: https://go.dev/doc/articles/race_detector\r\nIntroduction blog: https://go.dev/blog/race-detector", "CLOSED", 0, "trianglesphere", "2023-12-06T23:12:23Z", "2024-06-21T10:18:48Z", "2024-06-21T10:18:48Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM54m7U5", 8415, "Standard implementation of a custom gas token OP Stack rollup", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nWe are building a Rollup as a Service platform [Scalind](https://scalind.com/) (supported by Optimism [builders grant](https://gov.optimism.io/t/cycle-15-final-grants-roundup/6858)) and would like to add the ability to launch rollups with custom ERC-20 gas token. Many competing RaaS projects also promise similar functionality and given proliferation of new chains it'd be wise to have a standard implementation, probably as part of the main Optimism repo, rather than have many different forks each of which requires maintenance and might diverge significantly, lowering security\r\n\r\n**Describe the solution you'd like**\r\nWe've got experience running such a rollup at GTON and can help create the first implementation if needed, possibly with the collaboration from other projects like Conduit, Caldera etc. if they decide to help. Such a project needs minimal diff with the standard implementation of Optimism and full test coverage to make sure the rollup is secure\r\n\r\n**Describe alternatives you've considered**\r\nThe alternative would be for each project to maintain their own fork of the codebase but this in the end hinders security and might lead to user funds loss in case anything goes wrong\r\n\r\n**Additional context**\r\nI'd like to make this the place for discussions around the custom gas token rollups, would also try to involve more developers working on open source OP Stack implementation to get their input here\r\n", "CLOSED", 0, "drinkius", "2023-12-04T10:05:34Z", "2024-06-17T21:57:06Z", "2024-06-17T21:57:06Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM53oecB", 8245, "op-node: Handle malformed/incomplete receipt data from L1", "Bug-reports specify that Besu as L1 RPC returns receipt data with invalid log-index attributes. Since these can be inferred, rather than logging that the data is wrong, we can correct the data (if the receipts-root still matches the consensus data). This data \"hydration\" is also already happening for the raw receipts of the debug-geth RPC kind. And then, on the mismatch, just make a verbose log of what's wrong about the response exactly, so the L1 client can be fixed.\r\n", "CLOSED", 0, "protolambda", "2023-11-22T20:52:12Z", "2024-06-17T22:25:23Z", "2024-06-17T22:25:23Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM523fSp", 8178, "Error running OP Stack as a private rollup", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nHi team,\r\nI'm using OP Stack to run a local rollup, it uses Optimism Georli as L1, so I'm building a rollup upon Optimism Georli.\r\nEverything goes well at first, but it stucked on building a block. \r\nThe OPStack will check the root of receipts of L1 block, it will compute it locally , and check whether it's the same as we got from L1 RPC. here they're different, so I think there must be some difference on computing the root of receipts between Optimism Georli and current OP Stack code.\r\nHere's the err log of op-node :\r\n`t=2023-11-15T03:08:13+0800 lvl=info msg=\"creating new block\"                     parent=0x5bfc05cc50dad95ccea6fa79a37f83cb1e8a8928484ba579fed4b02063a2b9e2:16748 l1Origin=0xc7cd736cf95856a9c63578690e97fcd43133f5d7d919882d3f7e5348d1935f02:17276564\r\nt=2023-11-15T03:08:13+0800 lvl=info msg=\"sequencer started building new block\"   payload_id=0x89a2c4af9dc1d5b2 l2_parent_block=0x5bfc05cc50dad95ccea6fa79a37f83cb1e8a8928484ba579fed4b02063a2b9e2:16748 l2_parent_block_time=1,699,981,362\r\nt=2023-11-15T03:08:13+0800 lvl=info msg=\"inserted block\"                         hash=0x6bbfcb4ce1c7f5c93cc83aa709807f2583ad6832be86e1d0f5e05b04e1957286 number=16749 state_root=0xf83f005dcaba278fdccdb8f37fe9d3df37f7370cb97df3acb1ce53b910b33cb9 timestamp=1,699,981,364 parent=0x5bfc05cc50dad95ccea6fa79a37f83cb1e8a8928484ba579fed4b02063a2b9e2 prev_randao=0x3c6cfc1ee8795baaabdaa28e11f357ccb5ddea424c7f067999201161d791c11f fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\r\nt=2023-11-15T03:08:13+0800 lvl=info msg=\"sequencer successfully built a new block\" block=0x6bbfcb4ce1c7f5c93cc83aa709807f2583ad6832be86e1d0f5e05b04e1957286:16749 time=1,699,981,364 txs=1\r\nt=2023-11-15T03:08:14+0800 lvl=info msg=\"creating new block\"                     parent=0x6bbfcb4ce1c7f5c93cc83aa709807f2583ad6832be86e1d0f5e05b04e1957286:16749 l1Origin=0x88776a73adfa67a147faa64bddfad8d26ce2b01d62289f68486cb2e1cac61166:17276565\r\nt=2023-11-15T03:08:14+0800 lvl=info msg=\"sequencer started building new block\"   payload_id=0x146c8804694e92f0 l2_parent_block=0x6bbfcb4ce1c7f5c93cc83aa709807f2583ad6832be86e1d0f5e05b04e1957286:16749 l2_parent_block_time=1,699,981,364\r\nt=2023-11-15T03:08:14+0800 lvl=info msg=\"inserted block\"                         hash=0x229509ca50d41828507c6311f06c351140033ee68a00a75e11cb6070bc547d32 number=16750 state_root=0xee644daef5d805bbe855b39a591fd687111cdb2f95558f5f0da3e5d107dfc201 timestamp=1,699,981,366 parent=0x6bbfcb4ce1c7f5c93cc83aa709807f2583ad6832be86e1d0f5e05b04e1957286 prev_randao=0x3c6cfc1ee8795baaabdaa28e11f357ccb5ddea424c7f067999201161d791c11f fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\r\nt=2023-11-15T03:08:14+0800 lvl=info msg=\"sequencer successfully built a new block\" block=0x229509ca50d41828507c6311f06c351140033ee68a00a75e11cb6070bc547d32:16750 time=1,699,981,366 txs=1\r\nt=2023-11-15T03:08:14+0800 lvl=info msg=\"creating new block\"                     parent=0x229509ca50d41828507c6311f06c351140033ee68a00a75e11cb6070bc547d32:16750 l1Origin=0x401dcce2442d9f99e8fc561ce39594c36a4bc472414f996dc6850ea56e274de6:17276566\r\nt=2023-11-15T03:08:15+0800 lvl=eror msg=\"sequencer temporarily failed to start building new block\" err=\"temp: failed to fetch L1 block info and receipts: failed to fetch list of receipts: expected receipt root 0x945a28aedddb630acbdc3085c1a4f2b09e863cb2d99c25b96ff9be002a9258c8 but computed 0x65ced2cd63b31f55bc3aed4b3ebdc49feea4422e6e853c57eb97fa301759460f from retrieved receipts\"\r\nt=2023-11-15T03:08:15+0800 lvl=info msg=\"creating new block\"                     parent=0x229509ca50d41828507c6311f06c351140033ee68a00a75e11cb6070bc547d32:16750 l1Origin=0x401dcce2442d9f99e8fc561ce39594c36a4bc472414f996dc6850ea56e274de6:17276566\r\nt=2023-11-15T03:08:15+0800 lvl=eror msg=\"sequencer temporarily failed to start building new block\" err=\"temp: failed to fetch L1 block info and receipts: failed to fetch list of receipts: expected receipt root 0x945a28aedddb630acbdc3085c1a4f2b09e863cb2d99c25b96ff9be002a9258c8 but computed 0x65ced2cd63b31f55bc3aed4b3ebdc49feea4422e6e853c57eb97fa301759460f from retrieved receipts\"\r\nt=2023-11-15T03:08:15+0800 lvl=info msg=\"creating new block\"                     parent=0x229509ca50d41828507c6311f06c351140033ee68a00a75e11cb6070bc547d32:16750 l1Origin=0x401dcce2442d9f99e8fc561ce39594c36a4bc472414f996dc6850ea56e274de6:17276566\r\nt=2023-11-15T03:08:16+0800 lvl=eror msg=\"sequencer temporarily failed to start building new block\" err=\"temp: failed to fetch L1 block info and receipts: failed to fetch list of receipts: expected receipt root 0x945a28aedddb630acbdc3085c1a4f2b09e863cb2d99c25b96ff9be002a9258c8 but computed 0x65ced2cd63b31f55bc3aed4b3ebdc49feea4422e6e853c57eb97fa301759460f from retrieved receipts\"\r\n` \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nRun the OP Stack over Optimism Georli. After some time, the error happened.\r\ncode branch:TAG  op-node/v1.3.1 \r\nUsing Alchemy as L1 RPC .\r\n\r\n**Expected behavior**\r\nWish team could give out the reason why this happened, thanks.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS: Linux version 5.15.0-86-generic (buildd@lcy02-amd64-086) (gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0, GNU ld (GNU Binutils for Ubuntu) 2.38) #96-Ubuntu SMP Wed Sep 20 08:23:49 UTC 2023\r\n\r\n - Package Version (or commit hash):\r\n optimism TAG: op-node/v1.3.1\r\n\r\n**Additional context**\r\nI stored the log of op-geth, op-node, op-batcher,op-proposer, if you need any, please tell me, thanks.\r\n", "CLOSED", 0, "maodaishan", "2023-11-15T08:07:24Z", "2024-06-17T22:00:35Z", "2024-06-17T22:00:34Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM52B9ot", 8062, "Feat(indexer) - Support Bridge Tx Type Filtering in API", "**Is your feature request related to a problem? Please describe.**\r\nIndexer API endpoints for fetching withdrawal and deposits currently expose all bridge txs independent of origination type. \r\n\r\n**Describe the solution you'd like**\r\nIntroduce a lightweight classification system for bridge tx types that can be filtered by when doing API lookups. This type enum can be passed as a query param when fetching deposits or withdrawals:\r\n```\r\nGET /api/v0/withdrawals/0x6969?type=standard_bridge\r\n```\r\n\r\nType enums should be supported for `native`, `standard_bridge`, and `message` bridge transaction types. \r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "CLOSED", 0, "ethenotethan", "2023-11-06T22:53:41Z", "2024-06-17T22:00:11Z", "2024-06-17T22:00:11Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM51X9IT", 7942, "Indexer(feat) API - support withdrawal lookups by message hash", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThe Indexer API can be extended to support better specificity with an additional request query field (`message_hash`) that can be used for O(1) lookups on withdrawal. This is especially useful in circumstances when a client is trying to find indexed withdrawal metadata (balances, L2 tx, etc.) using an L1 withdrawal event (`WithdrawalProven`, `WithdrawalFinalized`). \r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "CLOSED", 0, "ethenotethan", "2023-10-30T21:00:15Z", "2024-06-17T21:59:54Z", "2024-06-17T21:59:53Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM51Hq4C", 7896, "deposit ETH cannot success", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nI've been following the [optimism-tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-eth) to attempt depositing/withdrawing ETH between L1 and L2. However, I encountered a failure due to eth_estimateGas as there was no \"from\" field in the request. \r\nThe request body is like \r\n```\r\nrequestBody: '{\"method\":\"eth_estimateGas\",\"params\":[{\"value\":\"0xe8d4a51000\",\"to\":\"0xa513e6e4b8f2a923d98304ec87f64353c4d5c853\",\"data\":\"....\"}],\"id\":46,\"jsonrpc\":\"2.0\"}'\r\n```\r\nUpon switching the eth-optimism/sdk from v3.0.0 to v2.0.0, I was able to achieve success.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Follow the optimism-tutorial/cross-dom-bridge-eth\r\n\r\n**Expected behavior**\r\n```\r\nDeposit ETH\r\nOn L1:9265774 Gwei    On L2:1000 Gwei\r\nError: processing response error (body=\"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":46,\\\"error\\\":{\\\"code\\\":-32000,\\\"message\\\":\\\"rpc error: code = Unknown desc = insufficient balance for transfer\\\"}}\\n\", error={\"code\":-32000}, requestBody=\"{\\\"method\\\":\\\"eth_estimateGas\\\",\\\"params\\\":[{\\\"value\\\":\\\"0xe8d4a51000\\\",\\\"to\\\":\\\"0xa513e6e4b8f2a923d98304ec87f64353c4d5c853\\\",\\\"data\\\":\\\"....\\\"}],\\\"id\\\":46,\\\"jsonrpc\\\":\\\"2.0\\\"}\", requestMethod=\"POST\", url=\"http://localhost:8545\", code=SERVER_ERROR, version=web/5.7.1)\r\n    at Logger.makeError (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/logger/lib/index.js:238:21)\r\n    at Logger.throwError (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/logger/lib/index.js:247:20)\r\n    at /workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:313:32\r\n    at step (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:33:23)\r\n    at Object.next (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:14:53)\r\n    at fulfilled (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:5:58)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5) {\r\n  reason: 'processing response error',\r\n  code: 'SERVER_ERROR',\r\n  body: '{\"jsonrpc\":\"2.0\",\"id\":46,\"error\":{\"code\":-32000,\"message\":\"rpc error: code = Unknown desc = insufficient balance for transfer\"}}\\n',\r\n  error: Error: rpc error: code = Unknown desc = insufficient balance for transfer\r\n      at getResult (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/providers/lib/json-rpc-provider.js:191:21)\r\n      at processJsonFunc (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:356:22)\r\n      at /workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:288:46\r\n      at step (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:33:23)\r\n      at Object.next (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:14:53)\r\n      at fulfilled (/workspace/optimism-tutorial/cross-dom-bridge-eth/node_modules/@ethersproject/web/lib/index.js:5:58)\r\n      at processTicksAndRejections (node:internal/process/task_queues:96:5) {\r\n    code: -32000,\r\n    data: undefined\r\n  },\r\n  requestBody: '{\"method\":\"eth_estimateGas\",\"params\":[{\"value\":\"0xe8d4a51000\",\"to\":\"0xa513e6e4b8f2a923d98304ec87f64353c4d5c853\",\"data\":\"....\"}],\"id\":46,\"jsonrpc\":\"2.0\"}',\r\n  requestMethod: 'POST',\r\n  url: 'http://localhost:8545'\r\n}\r\n```\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS: Mac\r\n - Package Version (or commit hash): v1.1.4\r\n\r\n**Additional context**\r\nThe same issue is https://github.com/ethereum-optimism/optimism/issues/6723", "CLOSED", 0, "170210", "2023-10-27T07:36:58Z", "2024-06-17T21:59:35Z", "2024-06-17T21:59:35Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5z_bmD", 7699, "Migrate devnet Configuration to env vars", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nA recent release of geth added the ability for geth to be configued with environment variables.\r\nWe should update the [devnet](https://github.com/ethereum-optimism/optimism/tree/develop/ops-bedrock) to use env vars instead of using the long entrypoint scripts", "CLOSED", 0, "tynes", "2023-10-16T20:10:00Z", "2024-06-17T22:25:47Z", "2024-06-17T22:25:46Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5zuGRH", 7668, "Devnet finalization rapidly falls behind head", "**Describe the bug**\r\nWhen running the op devnet, the latest block proposal on L1 falls farther and farther behind the L2 head.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Follow the directions at https://community.optimism.io/docs/developers/build/dev-node/ to start up a devnet.\r\n2. Wait an hour or so\r\n3. Check `L2OutputOracle.latestBlockNumber()` vs `eth_getBlock` on L2\r\n\r\n**Expected behavior**\r\nThe latest block number on L1 should be close to the L2 head.\r\n", "CLOSED", 0, "Arachnid", "2023-10-13T08:11:58Z", "2024-06-18T00:06:16Z", "2024-06-18T00:06:16Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5v0KBa", 7076, "Can not start new node with /usr/local/bin/op-node  command", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nLogs for opt_geth and opt_node are abnormal.\r\n\r\nssh root@172.17.0.8\r\ncd /opt\r\n\r\n\r\nroot@172.17.0.8:/opt# /usr/local/bin/geth version\r\nGeth\r\nVersion: 0.1.0-unstable\r\nGit Commit: b9c6d36ae9b84ef82430311ddf03dc16f9be505b\r\nUpstream Version: 1.12.0-stable\r\nArchitecture: amd64\r\nGo Version: go1.20.7\r\nOperating System: linux\r\nGOPATH=\r\nGOROOT=\r\n\r\nrun command :\r\n\r\n```\r\ngeth --datadir /opt \\\r\n--ws \\\r\n--ws.port=8546 \\\r\n--ws.addr=0.0.0.0 \\\r\n--ws.origins='*'  \\\r\n--ws.api=debug,eth,txpool,net,engine   \\\r\n--http.api=web3,debug,eth,txpool,net,engine \\\r\n--http \\\r\n--http.port=8545 \\\r\n--http.addr=0.0.0.0 \\\r\n--http.vhosts=\"\\*\" \\\r\n--http.corsdomain=\"\\*\" \\\r\n--authrpc.addr=0.0.0.0 \\\r\n--authrpc.jwtsecret=/opt/jwt.txt \\\r\n--authrpc.port=8551 \\\r\n--authrpc.vhosts=\"\\*\" \\\r\n--verbosity=3 \\\r\n--rollup.disabletxpoolgossip=true \\\r\n--rollup.sequencerhttp=https://mainnet-sequencer.optimism.io/ \\\r\n--nodiscover \\\r\n--syncmode=full \\\r\n--maxpeers=0\r\n```\r\n\r\nlog-info:\r\n\r\nINFO [08-31|10:27:47.450] Starting Geth on Ethereum mainnet...\r\nINFO [08-31|10:27:47.451] Bumping default cache on mainnet         provided=1024 updated=4096\r\nINFO [08-31|10:27:47.456] Maximum peer count                       ETH=0 LES=0 total=0\r\nINFO [08-31|10:27:47.458] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\r\nINFO [08-31|10:27:47.464] Set global gas cap                       cap=50,000,000\r\nINFO [08-31|10:27:47.465] Initializing the KZG library             backend=gokzg\r\nINFO [08-31|10:27:47.517] Allocated trie memory caches             clean=614.00MiB dirty=1024.00MiB\r\nINFO [08-31|10:27:47.518] Using leveldb as the backing database\r\nINFO [08-31|10:27:47.518] Allocated cache and file handles         database=/opt/geth/chaindata cache=2.00GiB handles=524,288\r\nINFO [08-31|10:27:47.546] Using LevelDB as the backing database\r\nINFO [08-31|10:27:47.548] Opened ancient database                  database=/opt/geth/chaindata/ancient/chain readonly=false\r\nINFO [08-31|10:27:47.766]\r\nINFO [08-31|10:27:47.766] ---------------------------------------------------------------------------------------------------------------------------------------------------------\r\nINFO [08-31|10:27:47.766] Chain ID:  1 (mainnet)\r\nINFO [08-31|10:27:47.766] Consensus: Beacon (proof-of-stake), merged from Ethash (proof-of-work)\r\nINFO [08-31|10:27:47.766]\r\nINFO [08-31|10:27:47.766] Pre-Merge hard forks (block based):\r\nINFO [08-31|10:27:47.766]  - Homestead:                   #1150000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md)\r\nINFO [08-31|10:27:47.766]  - DAO Fork:                    #1920000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/dao-fork.md)\r\nINFO [08-31|10:27:47.766]  - Tangerine Whistle (EIP 150): #2463000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md)\r\nINFO [08-31|10:27:47.766]  - Spurious Dragon/1 (EIP 155): #2675000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\r\nINFO [08-31|10:27:47.766]  - Spurious Dragon/2 (EIP 158): #2675000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\r\nINFO [08-31|10:27:47.766]  - Byzantium:                   #4370000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md)\r\nINFO [08-31|10:27:47.766]  - Constantinople:              #7280000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md)\r\nINFO [08-31|10:27:47.766]  - Petersburg:                  #7280000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md)\r\nINFO [08-31|10:27:47.766]  - Istanbul:                    #9069000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md)\r\nINFO [08-31|10:27:47.766]  - Muir Glacier:                #9200000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md)\r\nINFO [08-31|10:27:47.766]  - Berlin:                      #12244000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md)\r\nINFO [08-31|10:27:47.766]  - London:                      #12965000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)\r\nINFO [08-31|10:27:47.766]  - Arrow Glacier:               #13773000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md)\r\nINFO [08-31|10:27:47.767]  - Gray Glacier:                #15050000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md)\r\nINFO [08-31|10:27:47.767]\r\nINFO [08-31|10:27:47.767] Merge configured:\r\nINFO [08-31|10:27:47.767]  - Hard-fork specification:    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md\r\nINFO [08-31|10:27:47.767]  - Network known to be merged: true\r\nINFO [08-31|10:27:47.767]  - Total terminal difficulty:  58750000000000000000000\r\nINFO [08-31|10:27:47.767]\r\nINFO [08-31|10:27:47.767] Post-Merge hard forks (timestamp based):\r\nINFO [08-31|10:27:47.767]  - Shanghai:                    @1681338455 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md)\r\nINFO [08-31|10:27:47.767]\r\nINFO [08-31|10:27:47.767] ---------------------------------------------------------------------------------------------------------------------------------------------------------\r\nINFO [08-31|10:27:47.767]\r\nINFO [08-31|10:27:47.767] Loaded most recent local block           number=0 hash=d4e567..cb8fa3 td=17,179,869,184 age=54y5mo1w\r\nWARN [08-31|10:27:47.768] Loaded snapshot journal                  diffs=missing\r\nINFO [08-31|10:27:47.768] Initialising Ethereum protocol           network=1 dbversion=8\r\nINFO [08-31|10:27:47.769] Loaded local transaction journal         transactions=0 dropped=0\r\nINFO [08-31|10:27:47.769] Regenerated local transaction journal    transactions=0 accounts=0\r\nINFO [08-31|10:27:47.770] Chain post-merge, sync via beacon client\r\nINFO [08-31|10:27:47.770] Gasprice oracle is ignoring threshold set threshold=2\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-30T06:11:28+0000 age=1d4h16m\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T02:29:52+0000 age=7h57m55s\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T03:02:40+0000 age=7h25m7s\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T03:14:24+0000 age=7h13m23s\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T03:28:27+0000 age=6h59m20s\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T07:52:16+0000 age=2h35m31s\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T08:43:50+0000 age=1h43m57s\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T09:42:10+0000 age=45m37s\r\nWARN [08-31|10:27:47.770] Unclean shutdown detected                booted=2023-08-31T10:24:28+0000 age=3m19s\r\nWARN [08-31|10:27:47.770] Engine API enabled                       protocol=eth\r\nINFO [08-31|10:27:47.771] Starting peer-to-peer node               instance=Geth/v0.1.0-unstable-b9c6d36a/linux-amd64/go1.20.7\r\nINFO [08-31|10:27:47.959] IPC endpoint opened                      url=/opt/geth.ipc\r\nINFO [08-31|10:27:47.959] New local node record                    seq=1,692,716,788,856 id=16db3bc6c2f04bbb ip=127.0.0.1 udp=0 tcp=30303\r\nINFO [08-31|10:27:47.960] Started P2P networking                   self=\"enode://9ef67558b011d454ccbd8b04365a2295036e59fae88e8253cf0fe7872a1b5ed68f804a50191f81e32b0ede3db3464926996525a969a82ec03cbedcb7667b058e@127.0.0.1:30303?discport=0\"\r\nINFO [08-31|10:27:47.960] Loaded JWT secret file                   path=/opt/jwt.txt crc32=0x327f1d11\r\nINFO [08-31|10:27:47.960] HTTP server started                      endpoint=[::]:8545 auth=false prefix= cors=* vhosts=*\r\nINFO [08-31|10:27:47.960] WebSocket enabled                        url=ws://[::]:8546\r\nINFO [08-31|10:27:47.960] WebSocket enabled                        url=ws://[::]:8551\r\nINFO [08-31|10:27:47.960] HTTP server started                      endpoint=[::]:8551 auth=true  prefix= cors=localhost vhosts=*\r\nWARN [08-31|10:28:22.771] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|10:33:22.823] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|10:38:22.859] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|10:43:22.901] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|10:48:22.935] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|10:53:22.976] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|10:58:23.013] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|11:03:23.052] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|11:08:23.089] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|11:13:23.121] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\nWARN [08-31|11:18:23.161] Post-merge network, but no beacon client seen. Please launch one to follow the chain!\r\n\r\n--------------------------------------------\r\n\r\n\r\n[op_node]\r\n\r\nrun command :\r\n\r\n\top-node --l1=http://172.17.0.8:8545  --l2=http://172.17.0.8:8551 --network=mainnet --l2.jwt-secret=/opt/jwt.txt --rpc.addr=0.0.0.0 --rpc.port=8545 \r\n\r\nlog Info:\r\n\r\nt=2023-08-31T16:33:33+0000 lvl=info msg=\"Initializing Rollup Node\"\r\nINFO [08-31|16:33:33.926] Rollup Config                            l2_chain_id=10 l2_network=mainnet l1_chain_id=1 l1_network=mainnet l2_start_time=1,686,068,903 l2_block_hash=0xdbf6a80fef073de06add9b0d14026d6e5a86c85f6d102c36d3d8e9cf89c2afd3 l2_block_number=105,235,063 l1_block_hash=0x438335a20d98863a4c0c97999eb2481921ccd28553eac6f913af7c12aec04108 l1_block_number=17,422,590 regolith_time=\"@ genesis\"\r\nERROR[08-31|16:33:33.968] Error initializing the rollup node       err=\"failed to fetch header by num 17422590: not found\"\r\nERROR[08-31|16:33:33.970] Unable to create the rollup node         error=\"failed to fetch header by num 17422590: not found\"\r\nCRIT [08-31|16:33:33.970] Application failed                       message=\"failed to fetch header by num 17422590: not found\"\r\n\r\n\r\n\r\n**System Specs:**\r\n - OS: ubuntu 20.04\r\n\r\nIs there any information that can help me? pls.\r\n", "CLOSED", 0, "xt-com", "2023-08-31T17:19:51Z", "2024-06-17T21:57:58Z", "2024-06-17T21:57:58Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5vYL1o", 7026, "op-bootnode : failed to load p2p config: failed to load p2p priv key: no p2p private key path specified, cannot auto-generate key without path", "op-bootnode doesnt work out of the box and the help message doesnt contain useful information\r\n\r\n**To Reproduce** \r\nSteps to reproduce the behavior:\r\n1. clone repo\r\n2. make\r\n3. try to run it\r\n4. breaks\r\n\r\n```\r\nroot@ubuntu:~/optimism/op-bootnode# ./bin/op-bootnode --log.level debug --network op-mainnet\r\nINFO [08-27|19:39:37.128] Initializing bootnode\r\nCRIT [08-27|19:39:37.129] Application failed                       message=\"failed to load p2p config: failed to load p2p priv key: no p2p private key path specified, cannot auto-generate key without path\"\r\n```\r\n\r\n**Expected behavior**\r\nnot error\r\n\r\n**System Specs:** \r\n - OS: ubuntu\r\n - Package Version (or commit hash): latest\r\n", "CLOSED", 0, "eyooooo", "2023-08-27T19:50:08Z", "2024-06-17T19:01:31Z", "2024-06-17T19:01:31Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5vWQN4", 7023, "Synchronization hangs (due to invalid L1 transaction?)", "**Describe the bug**\r\nSynchronization hangs:\r\n```\r\n<Filtered by 'Derivation process step'>\r\nt=2023-08-26T13:36:09+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x8c6474eb116947dd4608a507db0eeb1e4453722cc8631fb71985a1d0874edc8e:17996748 attempts=35\r\nt=2023-08-26T13:36:19+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x8c6474eb116947dd4608a507db0eeb1e4453722cc8631fb71985a1d0874edc8e:17996748 attempts=36\r\nt=2023-08-26T13:36:29+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x8c6474eb116947dd4608a507db0eeb1e4453722cc8631fb71985a1d0874edc8e:17996748 attempts=37\r\nt=2023-08-26T13:36:39+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x8c6474eb116947dd4608a507db0eeb1e4453722cc8631fb71985a1d0874edc8e:17996748 attempts=38\r\nt=2023-08-26T13:36:49+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x8c6474eb116947dd4608a507db0eeb1e4453722cc8631fb71985a1d0874edc8e:17996748 attempts=39\r\n```\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Set ```op-geth``` state to 108696791 block (Aug-25-2023).\r\n2. Run ```op-node```.\r\n3. See infinite loop.\r\n\r\n**Expected behavior**\r\nSynchronization does not hang.\r\n\r\n**System Specs:**\r\n - OS: Ubuntu 22.04.3 LTS\r\n - op-node: ```us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.1.3```\r\n - op-geth: ```us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:v1.101200.1-rc.2```\r\n\r\n**Additional context**\r\n```op-node``` arguments:\r\n\r\n```\r\nexec op-node \\\r\n  --network=mainnet \\\r\n  --rpc.addr=0.0.0.0 \\\r\n  --rpc.port=9545 \\\r\n  --l2.jwt-secret=/shared/jwt.txt \\\r\n  --l1.trustrpc \\\r\n  --l1.rpckind=debug_geth \\\r\n  --l1=http://ethereum:8545 \\\r\n  --l2=http://op-geth:8551 \\\r\n  --log.level=trace \\\r\n  --p2p.disable\r\n```\r\n\r\n```op-node``` logs: \r\n```\r\nt=2023-08-26T13:26:56+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x39a699257889a3c7383883eaa8b1bcb9fde7683cd0895ac92a18572dcd1ac028:17993160 attempts=0\r\nt=2023-08-26T13:26:56+0000 lvl=trce msg=\"Sharing forkchoice-updated signal\"      state=\"&{HeadBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be SafeBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be FinalizedBlockHash:0x4a9426ff60297a09c54ac51b882f2b0c60730c802f5d5cd21662496f25982464}\" attr=\"&{Timestamp:0x64e8e2b9 PrevRandao:0x865dfbf2aebb6b217c28843894f27a838a8dc59ecba94f8911fde72577aa2c1f SuggestedFeeRecipient:0x4200000000000000000000000000000000000011 Transactions:[0x7ef90159a0de14e0d27d81778181f77b9ad5ab2ea57813a2e47561582c73a3ff1c94ddde9594deaddeaddeaddeaddeaddeaddeaddeaddead00019442000000000000000000000000000000000000158080830f424080b90104015d8eb90000000000000000000000000000000000000000000000000000000001128dbb0000000000000000000000000000000000000000000000000000000064e8e26b00000000000000000000000000000000000000000000000000000005b318e0de922147d1cf76dccc0ff7a8a225b30bfa181d8b04eab1c432f0e8e0ca2f4efe7900000000000000000000000000000000000000000000000000000000000000010000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f3298500000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000a6fe0 0x02f86b0a82f80f81848184839abd89943cd9f7912b6b04b702232fbb3f12f94145b8a0e48084fdb5a03ec001a010d1e46bdf3a3805f2afdae09f0a8c20f1d159d1111c3106e6d7dc6cf907e228a023ed359890ac1ec8b8c25e657ea80baafde8449b5b5e4a1e13e1a6e3f6fda8d1 0xf9026a46648301bb76941111111254eeb25477b68fb85ed929f73a96058280b9020812aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000009d1b4fcf84aacb8a46bbd077c934c4deb843ce35000000000000000000000000000000000000000000000000000ae4f005e17aa5000000000000000000000000000000000000000000000000000ac90c57bdf1bc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000006200003c4121420000000000000000000000000000000000000600042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000e0211111111254eeb25477b68fb85ed929f73a9605820000000000000000000ae4f005e17aa5e26b997738a0687db7054bae1417a44b65546d3c4342efe612c894728b8f529dd959ad757c71a05ef9971904aaa5441211b9d7293eb4a0f37fd1c5cac44d0f8f8302d7d4f6016d 0xf8a4054682b5219494b008aa00579c1307b0ef2c499ad98a8ce58e5880b844095ea7b3000000000000000000000000a062ae8a9c5e11aaa026fc2670b0d65ccc8b28580000000000000000000000000000000000000000000000000000000000990bb037a0303ce098f54716aa8e92d66b20b89c991a898df4a3f0484273062c1145359896a0252ed4092035156916989d15d19aede0f1c279b59a70214b9e128d88693f67ca 0x02f8cf0a8201e00681b48301d872940d36e7f4d3e8adb2df88c14883a8aabac435b9ec80b8683a1b1d5700000000000000000000000007c9f747887280a6efc930fb0fd4f36c2298f109000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000021fb3fc001a03eff70861d822c89f914d9fd65f9913160d9dbb0c089b7d73a442eb17bd841fea01185d832872f903483522f4b3233132df8d122108a327c5d08e67793b0e8ba8e 0x02f86a0a0c0681ab825208943feef921a87f6f50d72174517e37b7a5ca54661b870aa87bee53800080c001a0ef0b3ac73a504e60e31cf3fb59e0051156235b24aed15efde1be08fe179342e3a025830a8c42dfc21fe36cd8686ff8410897a72565781b9ed19df764e3e667d955] NoTxPool:true GasLimit:0x1c9c380}\"\r\nt=2023-08-26T13:26:57+0000 lvl=warn msg=\"Failed to share forkchoice-updated signal\" state=\"&{HeadBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be SafeBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be FinalizedBlockHash:0x4a9426ff60297a09c54ac51b882f2b0c60730c802f5d5cd21662496f25982464}\" attr=\"&{Timestamp:0x64e8e2b9 PrevRandao:0x865dfbf2aebb6b217c28843894f27a838a8dc59ecba94f8911fde72577aa2c1f SuggestedFeeRecipient:0x4200000000000000000000000000000000000011 Transactions:[0x7ef90159a0de14e0d27d81778181f77b9ad5ab2ea57813a2e47561582c73a3ff1c94ddde9594deaddeaddeaddeaddeaddeaddeaddeaddead00019442000000000000000000000000000000000000158080830f424080b90104015d8eb90000000000000000000000000000000000000000000000000000000001128dbb0000000000000000000000000000000000000000000000000000000064e8e26b00000000000000000000000000000000000000000000000000000005b318e0de922147d1cf76dccc0ff7a8a225b30bfa181d8b04eab1c432f0e8e0ca2f4efe7900000000000000000000000000000000000000000000000000000000000000010000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f3298500000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000a6fe0 0x02f86b0a82f80f81848184839abd89943cd9f7912b6b04b702232fbb3f12f94145b8a0e48084fdb5a03ec001a010d1e46bdf3a3805f2afdae09f0a8c20f1d159d1111c3106e6d7dc6cf907e228a023ed359890ac1ec8b8c25e657ea80baafde8449b5b5e4a1e13e1a6e3f6fda8d1 0xf9026a46648301bb76941111111254eeb25477b68fb85ed929f73a96058280b9020812aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000009d1b4fcf84aacb8a46bbd077c934c4deb843ce35000000000000000000000000000000000000000000000000000ae4f005e17aa5000000000000000000000000000000000000000000000000000ac90c57bdf1bc0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000006200003c4121420000000000000000000000000000000000000600042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000e0211111111254eeb25477b68fb85ed929f73a9605820000000000000000000ae4f005e17aa5e26b997738a0687db7054bae1417a44b65546d3c4342efe612c894728b8f529dd959ad757c71a05ef9971904aaa5441211b9d7293eb4a0f37fd1c5cac44d0f8f8302d7d4f6016d 0xf8a4054682b5219494b008aa00579c1307b0ef2c499ad98a8ce58e5880b844095ea7b3000000000000000000000000a062ae8a9c5e11aaa026fc2670b0d65ccc8b28580000000000000000000000000000000000000000000000000000000000990bb037a0303ce098f54716aa8e92d66b20b89c991a898df4a3f0484273062c1145359896a0252ed4092035156916989d15d19aede0f1c279b59a70214b9e128d88693f67ca 0x02f8cf0a8201e00681b48301d872940d36e7f4d3e8adb2df88c14883a8aabac435b9ec80b8683a1b1d5700000000000000000000000007c9f747887280a6efc930fb0fd4f36c2298f109000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000021fb3fc001a03eff70861d822c89f914d9fd65f9913160d9dbb0c089b7d73a442eb17bd841fea01185d832872f903483522f4b3233132df8d122108a327c5d08e67793b0e8ba8e 0x02f86a0a0c0681ab825208943feef921a87f6f50d72174517e37b7a5ca54661b870aa87bee53800080c001a0ef0b3ac73a504e60e31cf3fb59e0051156235b24aed15efde1be08fe179342e3a025830a8c42dfc21fe36cd8686ff8410897a72565781b9ed19df764e3e667d955] NoTxPool:true GasLimit:0x1c9c380}\" err=\"Invalid payload attributes\"\r\nt=2023-08-26T13:26:57+0000 lvl=warn msg=\"could not process payload derived from L1 data, dropping batch\" err=\"payload attributes are not valid, cannot build block: Invalid payload attributes\"\r\n\r\nt=2023-08-26T13:26:57+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x39a699257889a3c7383883eaa8b1bcb9fde7683cd0895ac92a18572dcd1ac028:17993160 attempts=0\r\n\r\n<...>\r\n\r\nt=2023-08-26T13:40:49+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x8c6474eb116947dd4608a507db0eeb1e4453722cc8631fb71985a1d0874edc8e:17996748 attempts=63\r\nt=2023-08-26T13:40:49+0000 lvl=warn msg=\"did not finish previous block building, starting new building now\" prev_onto=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607 prev_payload_id=0x5ac24eec56720906 new_onto=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607\r\nt=2023-08-26T13:40:49+0000 lvl=trce msg=\"Sharing forkchoice-updated signal\"      state=\"&{HeadBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be SafeBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be FinalizedBlockHash:0x4a9426ff60297a09c54ac51b882f2b0c60730c802f5d5cd21662496f25982464}\" attr=\"&{Timestamp:0x64e8e2b9 PrevRandao:0x3caef1b0b09bbfd3f67be9b95981cda12e076db08bc9f0b72b7d0c0ac47f97f3 SuggestedFeeRecipient:0x4200000000000000000000000000000000000011 Transactions:[0x7ef90159a0bcdb59015598dcdeee2627a68640e50323ac07acde2a09a84f76174199f59aeb94deaddeaddeaddeaddeaddeaddeaddeaddead00019442000000000000000000000000000000000000158080830f424080b90104015d8eb90000000000000000000000000000000000000000000000000000000001128dbc0000000000000000000000000000000000000000000000000000000064e8e277000000000000000000000000000000000000000000000000000000057ca8c614b84ced101ad42b5e148219f961792161fb08ad302ac9adfc6f5513a4bbe740e600000000000000000000000000000000000000000000000000000000000000000000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f3298500000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000a6fe0] NoTxPool:true GasLimit:0x1c9c380}\"\r\nt=2023-08-26T13:40:49+0000 lvl=trce msg=\"Shared forkchoice-updated signal\"       state=\"&{HeadBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be SafeBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be FinalizedBlockHash:0x4a9426ff60297a09c54ac51b882f2b0c60730c802f5d5cd21662496f25982464}\" attr=\"&{Timestamp:0x64e8e2b9 PrevRandao:0x3caef1b0b09bbfd3f67be9b95981cda12e076db08bc9f0b72b7d0c0ac47f97f3 SuggestedFeeRecipient:0x4200000000000000000000000000000000000011 Transactions:[0x7ef90159a0bcdb59015598dcdeee2627a68640e50323ac07acde2a09a84f76174199f59aeb94deaddeaddeaddeaddeaddeaddeaddeaddead00019442000000000000000000000000000000000000158080830f424080b90104015d8eb90000000000000000000000000000000000000000000000000000000001128dbc0000000000000000000000000000000000000000000000000000000064e8e277000000000000000000000000000000000000000000000000000000057ca8c614b84ced101ad42b5e148219f961792161fb08ad302ac9adfc6f5513a4bbe740e600000000000000000000000000000000000000000000000000000000000000000000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f3298500000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000a6fe0] NoTxPool:true GasLimit:0x1c9c380}\"\r\nt=2023-08-26T13:40:49+0000 lvl=trce msg=\"Received payload id\"                    state=\"&{HeadBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be SafeBlockHash:0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be FinalizedBlockHash:0x4a9426ff60297a09c54ac51b882f2b0c60730c802f5d5cd21662496f25982464}\" attr=\"&{Timestamp:0x64e8e2b9 PrevRandao:0x3caef1b0b09bbfd3f67be9b95981cda12e076db08bc9f0b72b7d0c0ac47f97f3 SuggestedFeeRecipient:0x4200000000000000000000000000000000000011 Transactions:[0x7ef90159a0bcdb59015598dcdeee2627a68640e50323ac07acde2a09a84f76174199f59aeb94deaddeaddeaddeaddeaddeaddeaddeaddead00019442000000000000000000000000000000000000158080830f424080b90104015d8eb90000000000000000000000000000000000000000000000000000000001128dbc0000000000000000000000000000000000000000000000000000000064e8e277000000000000000000000000000000000000000000000000000000057ca8c614b84ced101ad42b5e148219f961792161fb08ad302ac9adfc6f5513a4bbe740e600000000000000000000000000000000000000000000000000000000000000000000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f3298500000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000a6fe0] NoTxPool:true GasLimit:0x1c9c380}\" payloadId=0x5ac24eec56720906\r\nt=2023-08-26T13:40:49+0000 lvl=trce msg=\"getting payload\"                        payload_id=0x5ac24eec56720906\r\nt=2023-08-26T13:40:49+0000 lvl=trce msg=\"Received payload\"                       payload_id=0x5ac24eec56720906\r\nt=2023-08-26T13:40:49+0000 lvl=trce msg=\"sending payload for execution\"          block_hash=0xebac176f176cef33ed5313ec11278eddad1a3cb2e58f6fb20822a95e0c623a48\r\nt=2023-08-26T13:40:49+0000 lvl=trce msg=\"Received payload execution result\"      block_hash=0xebac176f176cef33ed5313ec11278eddad1a3cb2e58f6fb20822a95e0c623a48 status=ACCEPTED latestValidHash=nil message=<nil>\r\nt=2023-08-26T13:40:49+0000 lvl=warn msg=\"Derivation process temporary error\"     attempts=64 err=\"engine stage failed: temp: temporarily cannot insert new safe block: failed to complete building on top of L2 chain 0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607, id: 0x5ac24eec56720906, error (1): execution payload cannot be validated yet, latest valid hash is <nil>\"\r\nt=2023-08-26T13:40:49+0000 lvl=dbug msg=\"scheduling re-attempt with delay\"       attempts=64 delay=10s\r\nt=2023-08-26T13:40:52+0000 lvl=dbug msg=\"requesting sync with open-end range\"    start=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607\r\nt=2023-08-26T13:40:52+0000 lvl=dbug msg=\"ignoring request to sync L2 range, no sync method available\" start=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607 end=0x0000000000000000000000000000000000000000000000000000000000000000:0\r\nt=2023-08-26T13:40:56+0000 lvl=dbug msg=\"requesting sync with open-end range\"    start=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607\r\nt=2023-08-26T13:40:56+0000 lvl=dbug msg=\"ignoring request to sync L2 range, no sync method available\" start=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607 end=0x0000000000000000000000000000000000000000000000000000000000000000:0\r\n\r\nt=2023-08-26T13:40:59+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x8c6474eb116947dd4608a507db0eeb1e4453722cc8631fb71985a1d0874edc8e:17996748 attempts=64\r\nt=2023-08-26T13:40:59+0000 lvl=warn msg=\"did not finish previous block building, starting new building now\" prev_onto=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607 prev_payload_id=0x5ac24eec56720906 new_onto=0x6154349b84c3b97a82a537b2ebbe9c63f043d744630839b40563e13e3f1901be:108692607\r\n<...>\r\n```\r\n\r\n\r\n```op-geth``` state:\r\n\r\n```\r\nop-geth attach http://op-geth:8545\r\n> eth.getBlock('latest')\r\n{\r\n  number: 108696791,\r\n  hash: \"0x22ee7383e64d34065aa0d5117ffe15156a6fc2f37d8fc29206ab654557f8db9d\",\r\n  parentHash: \"0x21be41412d94a27fec64a989f4558bd254af52b6eec50b3de1057af2e306213b\",\r\n  <...>\r\n}\r\n```\r\n\r\n```op-geth``` logs (previous run, time is different):\r\n```\r\nDEBUG[08-26|13:19:27.798] Served engine_forkchoiceUpdatedV1        conn=127.0.0.1:59952 reqid=67189 duration=\"410.534\u00b5s\"\r\nDEBUG[08-26|13:19:27.808] Served eth_getBlockByHash                conn=127.0.0.1:59952 reqid=67190 duration=8.085513ms\r\nTRACE[08-26|13:19:27.817] Engine API request received              method=ForkchoiceUpdated head=43fe73..6f47eb finalized=4a9426..982464 safe=43fe73..6f47eb\r\nINFO [08-26|13:19:27.822] Regenerating historical state            block=108,696,792 target=108,696,792 remaining=0 elapsed=\"2.695\u00b5s\"\r\nINFO [08-26|13:19:29.386] Historical state regenerated             block=108,696,792 elapsed=1.563879259s    nodes=302.80KiB preimages=0.00B\r\nDEBUG[08-26|13:19:29.388] Dereferenced trie from memory database   nodes=641       size=236.86KiB time=2.004171ms gcnodes=641 gcsize=236.86KiB gctime=2.003129ms livenodes=0 livesize=0.00B\r\nERROR[08-26|13:19:29.393] Failed to build payload                  err=\"failed to force-include tx: 0xd2eb1dbc5b295ad71172f23d49aac9ddc86533b1b2c68c5f20674114385af650 type: 0 sender: 0x074a9eD58d11e3f0f589072c99dE86F80971A844 nonce: 266550, err: nonce too high: address 0x074a9eD58d11e3f0f589072c99dE86F80971A844, tx: 266550 state: 0\"\r\nWARN [08-26|13:19:29.393] Served engine_forkchoiceUpdatedV1        conn=127.0.0.1:59952 reqid=67191 duration=1.577288806s     err=\"Invalid payload attributes\" errdata=\"{Error:failed to force-include tx: 0xd2eb1dbc5b295ad71172f23d49aac9ddc86533b1b2c68c5f20674114385af650 type: 0 sender: 0x074a9eD58d11e3f0f589072c99dE86F80971A844 nonce: 266550, err: nonce too high: address 0x074a9eD58d11e3f0f589072c99dE86F80971A844, tx: 266550 state: 0}\"\r\nDEBUG[08-26|13:19:53.655] Ancient blocks frozen already            number=108,696,791 hash=22ee73..f8db9d frozen=108,612,213\r\n```\r\n", "CLOSED", 0, "mikhail-khalizev", "2023-08-26T13:48:46Z", "2024-06-17T18:57:22Z", "2024-06-17T18:57:21Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5vIs4e", 7000, "Unable to run OP-Node:  failed to fetch runtime config data", "I was trying to run Optimism L2 while L1 as local anvil chain. However during the setup of OP-Node, I am getting following error: \r\n![image](https://github.com/ethereum-optimism/optimism/assets/138877287/3372a0ed-aa28-461a-bcf9-8eafb9967da0)\r\nCan anyone help me solve the error?", "CLOSED", 0, "Abhijaypaliwal", "2023-08-24T07:13:16Z", "2024-06-17T21:57:35Z", "2024-06-17T21:57:35Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5t8x56", 6698, "Unable to run op-stack with local L1 layer like with ganache or anvil", "I am unable to deploy the L1 contracts, I am following the [Getting-Started doc](https://stack.optimism.io/docs/build/getting-started/#configure-your-network)\r\n\r\n\r\nI am getting this error of `script failed` while running this command `forge script scripts/Deploy.s.sol:Deploy --private-key $PRIVATE_KEY --broadcast --rpc-url $ETH_RPC_URL`\r\n\r\n> rishabhagrawal@192 contracts-bedrock % forge script scripts/Deploy.s.sol:Deploy --private-key $PRIVATE_KEY --broadcast --rpc-url $ETH_RPC_URL\r\n> [\u2803] Compiling...\r\n> No files changed, compilation skipped\r\n> Traces:\r\n>   [43008596] \u2192 new Deploy@0x5b73C5498c1E3b4dbA84de0F1833c4a029d90519\r\n>     \u2514\u2500 \u2190 214183 bytes of code\r\n> \r\n>   [3026838] Deploy::setUp() \r\n>     \u251c\u2500 [0] VM::projectRoot() [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 /Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock\r\n>     \u251c\u2500 [0] VM::envOr(DEPLOY_SCRIPT, Deploy) \r\n>     \u2502   \u2514\u2500 \u2190 <env var value>\r\n>     \u251c\u2500 [0] VM::envOr(DEPLOYMENT_CONTEXT, ) \r\n>     \u2502   \u2514\u2500 \u2190 <env var value>\r\n>     \u251c\u2500 [0] VM::envOr(DEPLOY_FILE, run-latest.json) \r\n>     \u2502   \u2514\u2500 \u2190 <env var value>\r\n>     \u251c\u2500 [0] VM::envOr(CHAIN_ID, 1337) \r\n>     \u2502   \u2514\u2500 \u2190 <env var value>\r\n>     \u251c\u2500 [0] VM::toString(1337) [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000043133333700000000000000000000000000000000000000000000000000000000\r\n>     \u251c\u2500 [0] VM::createDir(/Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deployments/getting-started, true) \r\n>     \u2502   \u2514\u2500 \u2190 ()\r\n>     \u251c\u2500 [0] VM::readFile(/Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deployments/getting-started/.chainId) [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 <file>\r\n>     \u251c\u2500 [0] VM::envOr(STRICT_DEPLOYMENT, true) \r\n>     \u2502   \u2514\u2500 \u2190 <env var value>\r\n>     \u251c\u2500 [0] VM::parseUint(1337) [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 1337\r\n>     \u251c\u2500 [0] console::log(Connected to network with chainid %s, 1337) [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 ()\r\n>     \u251c\u2500 [0] VM::readFile(/Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy) [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 <file>\r\n>     \u251c\u2500 [0] console::log(Storing temp deployment data in %s, /Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy) [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 ()\r\n>     \u251c\u2500 [0] VM::projectRoot() [staticcall]\r\n>     \u2502   \u2514\u2500 \u2190 /Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock\r\n>     \u251c\u2500 [2583705] \u2192 new <Unknown>@0xC7f2Cf4845C6db0e1a1e91ED41Bcd0FcC1b0E141\r\n>     \u2502   \u251c\u2500 [0] console::log(DeployConfig: reading file %s, /Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deploy-config/getting-started.json) [staticcall]\r\n>     \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n>     \u2502   \u251c\u2500 [0] VM::readFile(/Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deploy-config/getting-started.json) [staticcall]\r\n>     \u2502   \u2502   \u2514\u2500 \u2190 <file>\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.finalSystemOwner) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.portalGuardian) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l1ChainID) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 1337\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2ChainID) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 42069 [4.206e4]\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2BlockTime) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 2\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.maxSequencerDrift) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 600\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.sequencerWindowSize) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 3600\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.channelTimeout) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 300\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.p2pSequencerAddress) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0x7B66446cF8a193d3241bD86F95211144948E12d6\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.batchInboxAddress) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xFf00000000000000000000000000000000042069\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.batchSenderAddress) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xF511CccF2304FB1bC433a1d38C535fC655a6F6F7\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2OutputOracleSubmissionInterval) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 120\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonInt(<stringified JSON>, $.l2OutputOracleStartingTimestamp) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 1691604266\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2OutputOracleStartingBlockNumber) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.l2OutputOracleProposer) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0x65E5dD681f21D1614b12E623ebe1366543093815\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.l2OutputOracleChallenger) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.finalizationPeriodSeconds) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 12\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.proxyAdminOwner) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.baseFeeVaultRecipient) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.l1FeeVaultRecipient) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.sequencerFeeVaultRecipient) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonString(<stringified JSON>, $.governanceTokenName) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 Optimism\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonString(<stringified JSON>, $.governanceTokenSymbol) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 OP\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.governanceTokenOwner) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 0xe42a3E5D36265D5bce471b7eDa3D3fD018991fBC\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2GenesisBlockGasLimit) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 30000000 [3e7]\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2GenesisBlockBaseFeePerGas) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 1000000000 [1e9]\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.gasPriceOracleOverhead) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 2100\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.gasPriceOracleScalar) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 1000000 [1e6]\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.eip1559Denominator) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 50\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.eip1559Elasticity) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 10\r\n>     \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.systemConfigStartBlock) \r\n>     \u2502   \u2502   \u2514\u2500 \u2190 \"No matching value or array found for key $.systemConfigStartBlock\"\r\n>     \u2502   \u2514\u2500 \u2190 0 bytes of code\r\n>     \u2514\u2500 \u2190 \"No matching value or array found for key $.systemConfigStartBlock\"\r\n> \r\n> \r\n> \r\n> == Logs ==\r\n>   Connected to network with chainid 1337\r\n>   Storing temp deployment data in /Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy\r\n>   DeployConfig: reading file /Users/rishabhagrawal/Data/Workspace/Avail/optimism/packages/contracts-bedrock/deploy-config/getting-started.json\r\n> Error: \r\n> Script failed.\r\n\r\n\r\nAs per my research and understanding, In DeployerConfig.s.sol, it is trying to read systemConfigStartBlock from the getting-started.json file, but there is no such config variable given in that file.\r\n\r\n<img width=\"832\" alt=\"Screenshot 2023-08-10 at 1 02 17 PM\" src=\"https://github.com/ethereum-optimism/optimism/assets/43982251/f18708a2-24ff-4d90-b5cd-23e31264b393\">\r\n\r\nis this a recent change? Please help if anyone faces the same issue or has any solution and understanding for this.\r\n", "CLOSED", 0, "RISHABHAGRAWALZRA", "2023-08-10T08:07:28Z", "2024-06-17T21:55:00Z", "2024-06-17T21:55:00Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5ttkqs", 6639, "Is it possible to run bundler with OP-Stack chain ?", "just wanna know if it is possible to run bundler with OP-Stack chain, if yes, then how to run it ?", "CLOSED", 0, "nitantchhajed", "2023-08-08T06:41:10Z", "2024-06-17T21:54:22Z", "2024-06-17T21:54:21Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5skolw", 6450, "ERC-4337 bundler for local devnet", "I'm trying to run [this bundler](https://github.com/eth-infinitism/bundler) together with local devnet, but have no luck.\r\n\r\nI first add `--rpc.allow-unprotected-txs` flag to both entrypoint.sh files in ops-bedrock folder, since without it I get \"only replay-protected (EIP-155) transactions allowed over RPC\" error later. Then I launch the devnet using `make devnet-up` and make some adjustments in the bundler code: change all relevant target ports from 8545 to 9545 and in the 2-deploy-entrypoint.ts file comment out the code that checks that `chainId` is either 1337 or 31337, since it is actually 901.\r\n\r\nBut when I run `yarn hardhat-deploy --network localhost` to deploy the entrypoint, I get \"Insufficient funds\" error.\r\n\r\nI think I need to change some private key-related settings of the devnet, but I'm not sure which ones. I tried changing `BLOCK_SIGNER_PRIVATE_KEY` and `BLOCK_SIGNER_ADDRESS` to `0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80` and `0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266` (`test*11 junk` mnemonic account 0), since the bundler seems to be using this account for deployment, but still got the same error.\r\n\r\n**Describe the solution you'd like**\r\nIt would be great to have a local bundler out of the box, since there is already support for ERC-4337 on both OP Goerli and OP Mainnet.\r\n\r\n**Describe alternatives you've considered**\r\nCurrently I have to run the bundler on hardhat L1. It works fine without any adjustments, but since I'm developing for Optimism it's not what I ultimately need.\r\n", "CLOSED", 0, "rho-cassiopeiae", "2023-07-26T04:11:48Z", "2024-06-17T21:52:36Z", "2024-06-17T21:52:36Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5rlxbw", 6295, "sdk has an incompatible peer dependency with hardhat ethers@v5 vs ethers@v6", "**Is your feature request related to a problem? Please describe.**\r\nI am trying to use hardhat and optimism sdk, however I fall under a dependency hell with Optimism requiring ethers^5 and hardhat requiring ethers^6. \r\nMy project requires a custom L2 token, and I am using hardhat as the framework for compiling and deploying this token. So I want my project to be ran from hardhat framework, including the use of optimism sdk. \r\nIs there any reason why not updating to ethers^6? \r\n\r\n**Describe the solution you'd like**\r\nUse ethers^6\r\n\r\n**Describe alternatives you've considered**\r\nStop using this sdk or hardhat.\r\nCreate separate projects for sdk and hardhat.\r\n", "CLOSED", 0, "3esmit", "2023-07-14T15:25:09Z", "2024-06-18T22:15:31Z", "2024-06-17T21:53:37Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5pgdOe", 6107, "eth_getBlockByNumber vs eth_getBlockByHash responses discrepancies", "We are running a curl request for `eth_getBlockByNumber` vs `eth_getBlockByHash` responses, For block `46772657`, there is one transaction in the block. However, `eth_getBlockByHash` returns a `chainId` field in the transaction while eth_getBlockByNum does not return `chainId` field in the transaction.\r\n\r\nDo you know why there is a difference for this block?\r\n\r\nRPC backend version: `Geth/v0.1.0-unstable-0a77db9c/linux-amd64/go1.20.1`\r\n\r\ncurl request eth_getBlockByNumber: \r\n\r\n```\r\ncurl -s https://<QUIKNODE-ENDPOINT>/XXX -H \"Content-Type: application/json\" -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x2c9b1b1\", true] }'\r\n```\r\n\r\nresponse: \r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": {\r\n    \"difficulty\": \"0x2\",\r\n    \"extraData\": \"0xd98301090a846765746889676f312e31352e3133856c696e7578000000000000cebb9731665fbaa5bad7259f336e0e3bc3f4235bd023d41269ef1d692272ab932efd94784330c27ffeece1cb02bdd868baae3acc1684e120ce1c1545df7ad9b601\",\r\n    \"gasLimit\": \"0xe4e1c0\",\r\n    \"gasUsed\": \"0x5208\",\r\n    \"hash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"miner\": \"0x0000000000000000000000000000000000000000\",\r\n    \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"nonce\": \"0x0000000000000000\",\r\n    \"number\": \"0x2c9b1b1\",\r\n    \"parentHash\": \"0x454badb331c9cb14ae6897530011081492a3e58c47a364a6f62ce416dcf64a8c\",\r\n    \"receiptsRoot\": \"0x056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2\",\r\n    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\r\n    \"size\": \"0x2d0\",\r\n    \"stateRoot\": \"0x5307c8b991a8cf03eabfb96f1e0b8a05b0dc423734f759a39a4f9716de2bbaa0\",\r\n    \"timestamp\": \"0x6391d861\",\r\n    \"totalDifficulty\": \"0x5936363\",\r\n    \"transactions\": [\r\n      {\r\n        \"blockHash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n        \"blockNumber\": \"0x2c9b1b1\",\r\n        \"from\": \"0xb20c8dca769b63314d1965cebedb87e2a3a70715\",\r\n        \"gas\": \"0x5208\",\r\n        \"gasPrice\": \"0x10c8e0\",\r\n        \"hash\": \"0x8fb278a0ecaeaa660fd88c794dc51a1940cf9832ca543332e59ef3691d7680b7\",\r\n        \"input\": \"0x\",\r\n        \"nonce\": \"0xb\",\r\n        \"to\": \"0x6abf790d3b4a80ebfce25dccbfa07f6f8e5cab1a\",\r\n        \"transactionIndex\": \"0x0\",\r\n        \"value\": \"0x3c6568f12e8000\",\r\n        \"v\": \"0x38\",\r\n        \"r\": \"0xf4f4795c43f3699e2b2fe3fe629f11d274ed4252c6052015b9bc10182b3ab6c6\",\r\n        \"s\": \"0x68c5a331660b592d50ddd670a8df8953f75b8b71adb1dfe4febc47771f2a4e18\",\r\n        \"queueOrigin\": \"sequencer\",\r\n        \"l1TxOrigin\": null,\r\n        \"l1BlockNumber\": \"0xf646a0\",\r\n        \"l1Timestamp\": \"0x6391d861\",\r\n        \"index\": \"0x2c9b1b0\",\r\n        \"queueIndex\": null,\r\n        \"rawTransaction\": \"0xf8690b8310c8e0825208946abf790d3b4a80ebfce25dccbfa07f6f8e5cab1a873c6568f12e80008038a0f4f4795c43f3699e2b2fe3fe629f11d274ed4252c6052015b9bc10182b3ab6c6a068c5a331660b592d50ddd670a8df8953f75b8b71adb1dfe4febc47771f2a4e18\"\r\n      }\r\n    ],\r\n    \"transactionsRoot\": \"0x8917ef36a9e241c2cfc48d5fa49afef55c9638c70a73295c263d6f9283931a9a\",\r\n    \"uncles\": []\r\n  }\r\n}\r\n```\r\n\r\ncurl request eth_getBlockByHash: \r\n\r\n\r\n```\r\ncurl -s https://<QUIKNODE-ENDPOINT>/XXX -H \"Content-Type: application/json\" -d '{ \"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_getBlockByHash\", \"params\": [\"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\", true] }' \r\n```\r\n\r\nresponse: \r\n\r\n```\r\n{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"id\": 1,\r\n  \"result\": {\r\n    \"difficulty\": \"0x2\",\r\n    \"extraData\": \"0xd98301090a846765746889676f312e31352e3133856c696e7578000000000000cebb9731665fbaa5bad7259f336e0e3bc3f4235bd023d41269ef1d692272ab932efd94784330c27ffeece1cb02bdd868baae3acc1684e120ce1c1545df7ad9b601\",\r\n    \"gasLimit\": \"0xe4e1c0\",\r\n    \"gasUsed\": \"0x5208\",\r\n    \"hash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"miner\": \"0x0000000000000000000000000000000000000000\",\r\n    \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"nonce\": \"0x0000000000000000\",\r\n    \"number\": \"0x2c9b1b1\",\r\n    \"parentHash\": \"0x454badb331c9cb14ae6897530011081492a3e58c47a364a6f62ce416dcf64a8c\",\r\n    \"receiptsRoot\": \"0x056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2\",\r\n    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\r\n    \"size\": \"0x2d0\",\r\n    \"stateRoot\": \"0x5307c8b991a8cf03eabfb96f1e0b8a05b0dc423734f759a39a4f9716de2bbaa0\",\r\n    \"timestamp\": \"0x6391d861\",\r\n    \"totalDifficulty\": \"0x5936363\",\r\n    \"transactions\": [\r\n      {\r\n        \"blockHash\": \"0xf58a82de42a8b12dd5bb9e0aee47ba9512832309e629027b81b5f23dcb4b3e71\",\r\n        \"blockNumber\": \"0x2c9b1b1\",\r\n        \"from\": \"0xb20c8dca769b63314d1965cebedb87e2a3a70715\",\r\n        \"gas\": \"0x5208\",\r\n        \"gasPrice\": \"0x10c8e0\",\r\n        \"hash\": \"0x8fb278a0ecaeaa660fd88c794dc51a1940cf9832ca543332e59ef3691d7680b7\",\r\n        \"input\": \"0x\",\r\n        \"nonce\": \"0xb\",\r\n        \"to\": \"0x6abf790d3b4a80ebfce25dccbfa07f6f8e5cab1a\",\r\n        \"transactionIndex\": \"0x0\",\r\n        \"value\": \"0x3c6568f12e8000\",\r\n        \"type\": \"0x0\",\r\n        \"chainId\": \"0xa\",\r\n        \"v\": \"0x38\",\r\n        \"r\": \"0xf4f4795c43f3699e2b2fe3fe629f11d274ed4252c6052015b9bc10182b3ab6c6\",\r\n        \"s\": \"0x68c5a331660b592d50ddd670a8df8953f75b8b71adb1dfe4febc47771f2a4e18\"\r\n      }\r\n    ],\r\n    \"transactionsRoot\": \"0x8917ef36a9e241c2cfc48d5fa49afef55c9638c70a73295c263d6f9283931a9a\",\r\n    \"uncles\": []\r\n  }\r\n}\r\n```\r\n\r\nThanks for the help in advance! :) ", "CLOSED", 0, "yaanakbr", "2023-06-22T17:28:30Z", "2024-06-17T21:56:20Z", "2024-06-17T21:56:19Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5pTO4u", 6091, "`waitForMessageStatus` queries from genesis to latest (server error)", "I'm currently working with the Optimism SDK to prove withdrawals that I've initiated from a smart contract on Optimism.\r\n\r\nWhen I'm calling `waitForMessageStatus` on the `CrossChainMessenger` with my own RPC URL, I get the following error: `'{\"jsonrpc\":\"2.0\",\"error\":{\"code\":-32600,\"message\":\"block range is too wide\"},\"id\":null}'` as the SDK is querying for blocks from genesis to latest.\r\n\r\nIt would be great if the `queryFilter` below could be limited to querying over events from the past day (or a similar timeframe), so that user-defined RPCs don't error.\r\n\r\nEx. `messenger.filters.RelayedMessage(messageHash, 100, 'latest')`\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/3589cb98522481d4a9cda0b58ca042d495a6e173/packages/sdk/src/cross-chain-messenger.ts#L734-L736", "CLOSED", 0, "ratankaliani", "2023-06-21T04:18:30Z", "2024-06-17T21:53:15Z", "2024-06-17T21:53:15Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5oteb0", 6015, "BlockScout branch is not declared in EXPLORER AND INDEXER (OP-STACK docs)", "**Describe the bug**\r\nin https://stack.optimism.io/docs/build/explorer/#installation-and-configuration it is cloning the Master Branch of BlockScout which is not supported with the OP-Stack chain. Since the transaction type of OP-Stack chain is different than Layer 1 chain.\r\n\r\n**To Reproduce**\r\nfollow the tutorial https://stack.optimism.io/docs/build/explorer/#installation-and-configuration and start the explorer, but it won't work\r\n\r\n**Expected behavior**\r\nIt should run with no errors\r\n\r\n\r\n**Solution**\r\nThe master branch supports only L1 (as I was told by BlockScout support team), you have to clone the `production-optimism-stg` branch as it supports the L2 transaction type.\r\n\r\nIn OP-Stack dock it should be `git clone --branch production-optimism-stg https://github.com/blockscout/blockscout.git` instead of `git clone https://github.com/blockscout/blockscout.git`\r\n", "CLOSED", 0, "nitantchhajed", "2023-06-14T12:10:05Z", "2024-06-17T22:02:49Z", "2024-06-17T22:02:49Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5orK8M", 6014, "Are there any official public nodes available for syncing my node?", "To start my own OP node, I'll need one L1 URL for `op-geth` and one L2 URL for `op-node`. Using server from node providers (like Alchemy) may eventually reach their free trial limit, and I will have to pay a premium to keep my node running. Is there a plan to provide an official public node?", "CLOSED", 0, "VetchM", "2023-06-14T06:22:22Z", "2024-06-17T18:55:14Z", "2024-06-17T18:55:14Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5k4oBc", 5580, "NFT bridging between L1 and L2 (testnet)", "**Problem with L1 -> L2 bridging ERC721 tokens**\r\nWhen im trying to use L1ERC721Bridge im getting revert for L2 message to relay and message status - fail.\r\n\r\nHere's txns which I did\r\n\r\nhttps://goerli-optimism.etherscan.io/tx/0xe553e416e19457af65f46591148af99fd7d0a831d44b461f4be8ed70e19f4b28 - relay tx.\r\nhttps://goerli.etherscan.io/tx/0x8b284d668426f49d7d6dd39f34ec7960f958fe2896bb8fb00bbe3dfd7732527b - nft transfer to l1 bridge tx.\r\n\r\n**To Reproduce**\r\nIm using next code : \r\n`\r\n    const txBridge = await L1Bridge.connect(walletL1).bridgeERC721(\r\n        process.env.L1_NFT_ADDR,\r\n        process.env.L2_NFT_ADDR,\r\n        process.env.TOKEN_ID,\r\n        1_200_000,\r\n        ethers.utils.hexlify(ethers.utils.toUtf8Bytes(\"bridge\")),\r\n        {\r\n            gasLimit: 2_000_000\r\n        }\r\n    )\r\n`\r\n\r\nHere's .env file\r\n\r\n`\r\nL1_NFT_ADDR=0x1F359C32b5D8c9678b076eAac411A4d2Eb11E697\r\nL2_NFT_ADDR=0x5e3e2404c549E066D98c5d1C1B1ABC054c3540d6\r\n\r\nTOKEN_ID=5\r\n\r\nMINTABLE_ERC721_FACTORY_ADDRESS=0x13DcfC403eCEF3E8Eab66C00dC64e793dc40Be1d\r\n\r\n\r\nL1_BRIDGE=0x0F9C590b958002E8B10a7431979c1aF882772E88\r\nL2_BRIDGE=0x4200000000000000000000000000000000000014\r\n`\r\n\r\nL2 nft was created by MintableFactory which is deployed at L2 goerli testnet at address 0x13DcfC403eCEF3E8Eab66C00dC64e793dc40Be1d\r\n\r\n**Expected behavior**\r\nGet NFT token at L2\r\n\r\n**System Specs:**\r\n - OS: mac os\r\n - Package Version (or commit hash): latest sdk\r\n\r\n**Additional context**\r\nIm also trying to use sdk estimateL2MessageGasLimit~ method and got 27k gas  but im only able to estimate for L1 bridge because L2 bridge finalizeERc721 func callable only from MESSENGER or OTHER_BRIDGE so I found qx.app code and just saw they're using 1.2kk gas hardcoded but it didnt help me .\r\n\r\nI suppose maybe its not a bug and im just lost some details. \r\n", "CLOSED", 0, "eskrano", "2023-05-02T14:45:49Z", "2024-06-17T21:56:41Z", "2024-06-17T21:56:41Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5eQSOX", 4860, "SDK does not support Ethers.js providers that do not extend JsonRpcProvider", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\n\r\nThe [CrossChainMessenger constructor](https://github.com/ethereum-optimism/optimism/blob/develop/packages/sdk/src/cross-chain-messenger.ts#L135) accepts L1/L2 providers but some of the methods [blindly cast them to `JsonRpcProvider`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/sdk/src/cross-chain-messenger.ts#L1359\r\n) to call `send()`. As a result, it throws an error saying `provider.send` is not a function.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create an instance of CrossChainMessenger with FallbackProvider from Ethers.js\r\n2. Call `withdrawERC20()`\r\n\r\n**Expected behavior**\r\nEthers.js providers that implements `providers.Provider` interface should be supported.\r\n\r\n**Screenshots**\r\nN/A\r\n\r\n**System Specs:**\r\n - OS: MacOS\r\n - Package Version (or commit hash): \"@eth-optimism/sdk\": \"^1.10.1\"\r\n\r\n**Additional context**\r\nWe're testing Optimism ERC20 token deposit from L1 to L2 and withdraw from L2 back to L1.\r\n", "CLOSED", 0, "raymondfeng", "2023-02-12T16:48:50Z", "2024-06-17T21:52:59Z", "2024-06-17T21:52:58Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDODjvEJM5Qpp7S", 3329, "massive increase in bundle size between `@eth-optimism/contracts` versions `0.5.29` --> `0.5.33`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nSomewhere strictly after the release `0.5.29` and on-or-before the release `0.5.33`, the bundle size of [@eth-optimism/contracts](https://github.com/ethereum-optimism/optimism/releases/tag/@eth-optimism%2Fcontracts@0.5.0) increased enormously, from over 2MB to over 4.4MB.\r\n\r\nAs of now, `@eth-optimism` is essentially an order of magnitude larger than anything else in my project, which is crazy! it was already bizarrely large before this, but this is essentially not tolerable. Please look into this and address this, or I may have to downgrade. many thanks in advance.\r\n\r\n**To Reproduce**\r\nadd\r\n```javascript\r\n\"dependencies\": {\r\n    ...\r\n    \"@eth-optimism/sdk\": \"^1.2.0\",\r\n    ...\r\n}\r\n```\r\nto `package.json` of any project; then run the project through [Webpack Bundle Analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer).\r\n\r\n**Expected behavior**\r\nThe bundle size should be < 1MB.\r\n\r\n**Screenshots**\r\nthis is a screenshot of the relevant portion of Webpack Bundle Analyzer.\r\n<img width=\"1123\" alt=\"Screen Shot 2022-08-27 at 1 06 41 PM\" src=\"https://user-images.githubusercontent.com/93839494/187040623-c4ed06ba-adb3-47a7-9d75-9f1fe3225ce8.png\">\r\n\r\n**System Specs:**\r\n - OS: Mac OS 12.5.1\r\n - Package Version (or commit hash): relevant section of current `yarn.lock` file is below\r\n```javascript\r\n\"@eth-optimism/contracts-bedrock@0.5.4\":\r\n  version \"0.5.4\"\r\n  resolved \"https://registry.yarnpkg.com/@eth-optimism/contracts-bedrock/-/contracts-bedrock-0.5.4.tgz#d2dbdc7fcb7ef729d2682b898d742fd2f1482bb8\"\r\n  integrity sha512-+1dnI17DF+p3Q80qNhvfmMF0/HIb7PhAw4eJLjBWUbyGVVmUffZC4XiVYt5Rx3kFGUc50gDzPo30rUtdj4zE5w==\r\n  dependencies:\r\n    \"@eth-optimism/core-utils\" \"^0.9.3\"\r\n    \"@openzeppelin/contracts\" \"4.7.3\"\r\n    \"@openzeppelin/contracts-upgradeable\" \"4.7.3\"\r\n    ethers \"^5.6.8\"\r\n    hardhat \"^2.9.6\"\r\n\r\n\"@eth-optimism/contracts@0.5.33\":\r\n  version \"0.5.33\"\r\n  resolved \"https://registry.yarnpkg.com/@eth-optimism/contracts/-/contracts-0.5.33.tgz#1adeb902ff849152ecdb8639af5ba76dfc27c213\"\r\n  integrity sha512-lOj0psjl/7oydUXuSXhZ3P55zAXBNSgK6OzZeCW6JQ+drN+1OEdyp/MYKrSh8Cw8fW2k9MMdWbOuTa7/Blb0hA==\r\n  dependencies:\r\n    \"@eth-optimism/core-utils\" \"0.9.3\"\r\n    \"@ethersproject/abstract-provider\" \"^5.6.1\"\r\n    \"@ethersproject/abstract-signer\" \"^5.6.2\"\r\n\r\n\"@eth-optimism/core-utils@0.9.3\", \"@eth-optimism/core-utils@^0.9.3\":\r\n  version \"0.9.3\"\r\n  resolved \"https://registry.yarnpkg.com/@eth-optimism/core-utils/-/core-utils-0.9.3.tgz#40c0271f815af68e0a4715e97a045a96462df7b6\"\r\n  integrity sha512-b3V8qBgM0e85wdp3CNdJ6iSUvjT2k86F9oCAYeCIXQcQ6+EPaetjxP0T6ct6jLVepnJjoPRlW/lvWslKk1UBGg==\r\n  dependencies:\r\n    \"@ethersproject/abstract-provider\" \"^5.6.1\"\r\n    \"@ethersproject/properties\" \"^5.6.0\"\r\n    \"@ethersproject/providers\" \"^5.6.8\"\r\n    \"@ethersproject/transactions\" \"^5.6.2\"\r\n    \"@ethersproject/web\" \"^5.6.1\"\r\n    bufio \"^1.0.7\"\r\n    chai \"^4.3.4\"\r\n    ethers \"^5.6.8\"\r\n\r\n\"@eth-optimism/sdk@^1.2.0\":\r\n  version \"1.6.0\"\r\n  resolved \"https://registry.yarnpkg.com/@eth-optimism/sdk/-/sdk-1.6.0.tgz#18acaf2e9ccf0dff90e5629e8b1cd191b53e6629\"\r\n  integrity sha512-Z/NnZskaqeSHr6iQEcdOgmC4QoEGFqglkMmk0cwgN9TGbSd+gz65U6gQRh/MaX4r4ZV6uQEkOCmdHeXWfhlj+Q==\r\n  dependencies:\r\n    \"@eth-optimism/contracts\" \"0.5.33\"\r\n    \"@eth-optimism/contracts-bedrock\" \"0.5.4\"\r\n    \"@eth-optimism/core-utils\" \"0.9.3\"\r\n    lodash \"^4.17.21\"\r\n    merkletreejs \"^0.2.27\"\r\n    rlp \"^2.2.7\"\r\n```\r\n\r\n**Additional context**\r\nlet me know if i can provide any further diagnostic information. many thanks in advance.\r\n\r\n", "CLOSED", 0, "firnprotocol", "2022-08-27T17:12:13Z", "2024-06-17T18:53:38Z", "2024-06-17T18:53:37Z", "ethereum-optimism/optimism", "2025-08-30 15:20:27"]
["I_kwDOH2Qg5s6NzIxB", 343, "Out of sync due to \"Generating state snapshot\"", "#### Description\r\n\"Generating state snapshot\" is affecting node, which gets out of sync.\r\n\r\n#### System information\r\n- op_geth: \"v1.101315.2\"\r\n- op_node: \"op-node/v1.7.7\"\r\n- Ubuntu\r\n\r\n#### Expected behaviour\r\nNode should not get out of sync.\r\n\r\n#### Actual behaviour\r\nNode gets out of sync by more than 6000 blocks.\r\n\r\n#### Logs\r\n\r\nThis are the latest logs where the node is also processing blocks (\"Imported new potential chain segment\" / \"Chain head was updated\"). However for some time the node is only generating state snapshots and getting further behind the public network.\r\n\r\nop-geth\r\n````\r\nJun 27 19:57:35 m-optimism-02 geth[1263]: INFO [06-27|19:57:35.352] Generating state snapshot                root=04f327..4a689f in=da96cf..e517af at=b5e103..ba5cef accounts=119,253,539 slots=318,285,026 storage=30.36GiB  dangling=0 elapsed=3h22m40.833s eta=34m41.291s\r\nJun 27 19:57:35 m-optimism-02 geth[1263]: INFO [06-27|19:57:35.413] Imported new potential chain segment     number=121,953,090 hash=20b718..e1933a blocks=1 txs=7  mgas=2.669  elapsed=477.707ms    mgasps=5.587   age=3h41m38s triedirty=0.00B\r\nJun 27 19:57:35 m-optimism-02 geth[1263]: INFO [06-27|19:57:35.415] Chain head was updated                   number=121,953,090 hash=20b718..e1933a root=7b0c63..b5761f elapsed=1.015623ms   age=3h41m38s\r\nJun 27 19:57:35 m-optimism-02 geth[1263]: INFO [06-27|19:57:35.783] Imported new potential chain segment     number=121,953,091 hash=8fea53..930873 blocks=1 txs=7  mgas=2.111  elapsed=365.674ms    mgasps=5.774   age=3h41m36s triedirty=0.00B\r\nJun 27 19:57:35 m-optimism-02 geth[1263]: INFO [06-27|19:57:35.785] Chain head was updated                   number=121,953,091 hash=8fea53..930873 root=2d1371..874032 elapsed=\"781.358\u00b5s\"  age=3h41m36s\r\nJun 27 19:57:43 m-optimism-02 geth[1263]: INFO [06-27|19:57:43.353] Generating state snapshot                root=04f327..4a689f in=da96cf..e517af at=c11751..b4c505 accounts=119,253,539 slots=318,541,051 storage=30.38GiB  dangling=0 elapsed=3h22m48.834s eta=34m42.66s\r\nJun 27 19:57:44 m-optimism-02 geth[1263]: INFO [06-27|19:57:44.433] Imported new potential chain segment     number=121,953,092 hash=22d54a..34b31b blocks=1 txs=16 mgas=9.373  elapsed=8.646s       mgasps=1.084   age=3h41m43s triedirty=0.00B\r\nJun 27 19:57:44 m-optimism-02 geth[1263]: WARN [06-27|19:57:44.434] Ignoring already known beacon payload    number=121,953,092 hash=22d54a..34b31b age=3h41m43s\r\nJun 27 19:57:44 m-optimism-02 geth[1263]: INFO [06-27|19:57:44.437] Chain head was updated                   number=121,953,092 hash=22d54a..34b31b root=44874c..81f566 elapsed=1.917279ms   age=3h41m43s\r\nJun 27 19:57:45 m-optimism-02 geth[1263]: INFO [06-27|19:57:45.134] Imported new potential chain segment     number=121,953,093 hash=c321c6..d76921 blocks=1 txs=14 mgas=2.868  elapsed=693.580ms    mgasps=4.134   age=3h41m42s triedirty=0.00B\r\nJun 27 19:57:45 m-optimism-02 geth[1263]: INFO [06-27|19:57:45.137] Chain head was updated                   number=121,953,093 hash=c321c6..d76921 root=56df25..90bc84 elapsed=1.345763ms   age=3h41m42s\r\nJun 27 19:57:51 m-optimism-02 geth[1263]: INFO [06-27|19:57:51.371] Generating state snapshot                root=04f327..4a689f in=da96cf..e517af at=cce8b6..5d55bb accounts=119,253,539 slots=318,810,785 storage=30.40GiB  dangling=0 elapsed=3h22m56.851s eta=34m44.032s\r\nJun 27 19:57:51 m-optimism-02 geth[1263]: INFO [06-27|19:57:51.650] Imported new potential chain segment     number=121,953,094 hash=d20d58..9e51b9 blocks=1 txs=14 mgas=9.753  elapsed=6.508s       mgasps=1.499   age=3h41m46s triedirty=0.00B\r\nJun 27 19:57:52 m-optimism-02 geth[1263]: WARN [06-27|19:57:52.178] Ignoring already known beacon payload    number=121,953,094 hash=d20d58..9e51b9 age=3h41m47s\r\nJun 27 19:57:52 m-optimism-02 geth[1263]: INFO [06-27|19:57:52.182] Chain head was updated                   number=121,953,094 hash=d20d58..9e51b9 root=0b5694..997667 elapsed=2.497365ms   age=3h41m47s\r\nJun 27 19:57:52 m-optimism-02 geth[1263]: INFO [06-27|19:57:52.268] Imported new potential chain segment     number=121,953,095 hash=7217c4..12e630 blocks=1 txs=13 mgas=1.444  elapsed=83.602ms     mgasps=17.268  age=3h41m45s triedirty=0.00B\r\nJun 27 19:57:52 m-optimism-02 geth[1263]: INFO [06-27|19:57:52.270] Chain head was updated                   number=121,953,095 hash=7217c4..12e630 root=be08ae..a83b79 elapsed=\"797.269\u00b5s\"  age=3h41m45\r\n```\r\n\r\nop-node\r\n```\r\nJun 27 19:58:14 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:14+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xac234f9146c810dea6121552580a4ed4cd864ccccde907b12a09c5120b1ba426:121959758\r\nJun 27 19:58:15 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:15+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAkxHXmw5iw5amSc32mTxoTo2R2gZKrAfx143uBbZ9P6QQr\r\nJun 27 19:58:15 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:15+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xed2040c95470d3ab3c66b398b2d66387185658a2898a9151fab17a6b8b4ca553:121959759 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:15 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:15+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xed2040c95470d3ab3c66b398b2d66387185658a2898a9151fab17a6b8b4ca553:121959759\r\nJun 27 19:58:17 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:17+0000 lvl=info msg=\"Sync progress\" reason=\"new chain head block\" l2_finalized=0x22f88dea6338b4e91c6e68a4e71424b00079c36e7751a7e801a7c7499d3690f7:121952848 l2_safe=0x22f88dea6338b4e91c6e68a4e71424b00079c36e7751a7e801a7c7499d3690f7:121952848 l2_pending_safe=0x87dfd4a049bc84d2c31bd4a7dfa0b84e95ef9b7c0537253ec9277151b3b305f7:121952940 l2_unsafe=0xc97b9699f06ee17ac114e94ce2755c5aae861c6130affe754ad5883b02b7188c:121953102 l2_backup_unsafe=0x0000000000000000000000000000000000000000000000000000000000000000:0 l2_time=1719504981\r\nJun 27 19:58:17 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:17+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x999e1d918794702d659d4fa32e79beff68322863fe94385d14add76198f6de1b:121959760 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:17 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:17+0000 lvl=info msg=\"Sync progress\" reason=\"new chain head block\" l2_finalized=0x22f88dea6338b4e91c6e68a4e71424b00079c36e7751a7e801a7c7499d3690f7:121952848 l2_safe=0x22f88dea6338b4e91c6e68a4e71424b00079c36e7751a7e801a7c7499d3690f7:121952848 l2_pending_safe=0x87dfd4a049bc84d2c31bd4a7dfa0b84e95ef9b7c0537253ec9277151b3b305f7:121952940 l2_unsafe=0x55f4f8e3e37df26f8c43d58ee8c5dd7ac206d03a62a9314d08354047ae843a59:121953103 l2_backup_unsafe=0x0000000000000000000000000000000000000000000000000000000000000000:0 l2_time=1719504983\r\nJun 27 19:58:17 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:17+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x999e1d918794702d659d4fa32e79beff68322863fe94385d14add76198f6de1b:121959760\r\nJun 27 19:58:18 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:18+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAkzg2h8aN2gAq497tkHmN5hDy9EaKAkhbMScmCAbBPxNwJ\r\nJun 27 19:58:18 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:18+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm1zB9TgXxvtxjLXXJfhRw68ZMeCoiJ7BwSXKY2AbDAtVU\r\nJun 27 19:58:19 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:19+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x7ab504f8fb4452ca8c1fd749fec06de95a94ac93cfee6eab02b375a5bdb485d9:121959761 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:20 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:20+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm7v25THFJZJvkoK3bH4Wqjga9P96uWgBLRGQSYqggDA2N\r\nJun 27 19:58:20 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:20+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm1ftqsNaMCUi6JhQ6RdZrGvQ3Vt1d69xv1ZqzVMac8Cki\r\nJun 27 19:58:20 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:20+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm5Yo4tL1PnjeiVAvgKtr8vWzMTLSQs9xd7vYUC2fS4GJC\r\nJun 27 19:58:21 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:21+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmNytWmvGV1UHuUBngGFxyNsLkquzzCLeUoTLUGUrjW5Ju\r\nJun 27 19:58:21 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:21+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmFBzRPMeAkNUipyJ1DEN5d9XyvvNvEP41xotCiPhCb6Kz\r\nJun 27 19:58:21 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:21+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xaac5384d7406582c361803169b19e1f1fde1ff67f118bfe01662253675302340:121959762 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:22 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:22+0000 lvl=error msg=\"Payload execution failed\" block_hash=0xf3e2cf9db49412ae31e6d9c579c1cbd96529e9f3e3452df27eaa07a78ee084b7 err=\"Post \\\"http://127.0.0.1:8551\\\": context deadline exceeded\"\r\nJun 27 19:58:22 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:22+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=1 err=\"temp: failed to update insert payload: failed to execute payload: Post \\\"http://127.0.0.1:8551\\\": context deadline exceeded\"\r\nJun 27 19:58:22 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:22+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x7ab504f8fb4452ca8c1fd749fec06de95a94ac93cfee6eab02b375a5bdb485d9:121959761\r\nJun 27 19:58:22 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:22+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xaac5384d7406582c361803169b19e1f1fde1ff67f118bfe01662253675302340:121959762\r\nJun 27 19:58:23 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:23+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xe3607546f535e3b7b62bffecf741b044f08dac778afefe7c98f6a365349f325f:121959763 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:23 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:23+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xe3607546f535e3b7b62bffecf741b044f08dac778afefe7c98f6a365349f325f:121959763\r\nJun 27 19:58:25 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:25+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm2vXWR3ooDT3dnM9JuaHzeNysTmQV3tsqhXC8p1aFn3V7\r\nJun 27 19:58:25 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:25+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xcde7b7508a24f4e123734b96e724ff84d17f0afc73eb6f35ba77e87e3413345b:121959764 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:27 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:27+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xd4c6edd585941760e8ffc698763ed40acf3964c8176aa92ef104b39f9881ce4a:121959765 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:28 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:28+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmAPxaqqrjA8p2yUD2rma2pZoaJJaMory5af7x5vfKqBLG\r\nJun 27 19:58:29 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:29+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xb1b26df341b66bb777847bc5138605f6f222fab57d195cb6fa12a0f2ab52de57:121959766 peer=16Uiu2HAkzc1eByUyVc8tmu97dXYwehh6QTo5MxK5VFTjHH4wkj6J\r\nJun 27 19:58:29 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:29+0000 lvl=error msg=\"Payload execution failed\" block_hash=0xf3e2cf9db49412ae31e6d9c579c1cbd96529e9f3e3452df27eaa07a78ee084b7 err=\"Post \\\"http://127.0.0.1:8551\\\": context deadline exceeded\"\r\nJun 27 19:58:29 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:29+0000 lvl=warn msg=\"Derivation process temporary error\" attempts=2 err=\"temp: failed to update insert payload: failed to execute payload: Post \\\"http://127.0.0.1:8551\\\": context deadline exceeded\"\r\nJun 27 19:58:29 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:29+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xcde7b7508a24f4e123734b96e724ff84d17f0afc73eb6f35ba77e87e3413345b:121959764\r\nJun 27 19:58:29 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:29+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xd4c6edd585941760e8ffc698763ed40acf3964c8176aa92ef104b39f9881ce4a:121959765\r\nJun 27 19:58:29 m-optimism-02 op-node[1264]: t=2024-06-27T19:58:29+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xb1b26df341b66bb777847bc5138605f6f222fab57d195cb6fa12a0f2ab52de57:121959766\r\n```\r\n\r\n#### CLIs\r\n\r\nop-geth:\r\n\r\n```\r\n/usr/local/bin/geth \\\r\n    --op-network=op-mainnet \\\r\n    --datadir=/var/lib/optimism/data \\\r\n    --syncmode=snap \\\r\n    --gcmode=archive \\\r\n    --http \\\r\n    --http.addr=0.0.0.0 \\\r\n    --http.port=8545 \\\r\n    --http.vhosts=\"*\" \\\r\n    --http.corsdomain=\"*\" \\\r\n    --http.api=web3,debug,eth,net,engine,geth \\\r\n    --ws \\\r\n    --ws.port=8546 \\\r\n    --ws.addr=0.0.0.0 \\\r\n    --ws.origins=\"*\" \\\r\n    --ws.api=debug,eth,net,engine \\\r\n    --authrpc.addr=127.0.0.1 \\\r\n    --authrpc.port=8551 \\\r\n    --authrpc.jwtsecret=/var/lib/optimism/jwt.txt \\\r\n    --authrpc.vhosts=\"*\" \\\r\n    --metrics \\\r\n    --metrics.addr=0.0.0.0 \\\r\n    --metrics.port=6060 \\\r\n    --port=30303 \\\r\n    --discovery.port=30303 \\\r\n    --maxpeers=500 \\\r\n    --rollup.historicalrpc=https://mainnet.optimism.io \\\r\n    --rollup.disabletxpoolgossip=true \\\r\n    --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io \\\r\n    --rollup.superchain-upgrades \\\r\n    --rollup.halt=major \\\r\n    --verbosity=3\r\n```\r\n\r\nop-node\r\n\r\n```\r\n/usr/local/bin/op-node \\\r\n    --syncmode=execution-layer \\\r\n    --l1.trustrpc \\\r\n    --l1.rpckind=basic \\\r\n    --l1=http://ETH_ADDRESS:8545 \\\r\n    --l1.beacon=http://ETH_ADDRESS:5052 \\\r\n    --l2=http://127.0.0.1:8551 \\\r\n    --rpc.addr=127.0.0.1 \\\r\n    --rpc.port=9545 \\\r\n    --l2.jwt-secret=/var/lib/optimism/jwt.txt \\\r\n    --network=op-mainnet \\\r\n    --p2p.peerstore.path=/var/lib/optimism/data/opnode_peerstore_db \\\r\n    --p2p.priv.path=/var/lib/optimism/data/opnode_p2p_priv.txt \\\r\n    --p2p.discovery.path=/var/lib/optimism/data/opnode_discovery_db \\\r\n    --rollup.load-protocol-versions=true \\\r\n    --rollup.halt=major\r\n```", "CLOSED", 0, "andreclaro", "2024-06-27T20:00:23Z", "2024-06-27T20:06:53Z", "2024-06-27T20:06:53Z", "ethereum-optimism/op-geth", "2025-08-30 15:22:38"]
["I_kwDOH2Qg5s6NWY14", 341, "the method engine_newPayloadV3 does not exist/is not available", "Hi, I'm trying to set up a full node for Optimism. I've built the op-geth and optimism geth, and op-node binaries, and followed the guide.\r\n\r\nThe version of op-geth is 'geth version 1.101315.3-rc.1-5e9cb817-20240614' and the version of op-node is 'op-node version v1.7.7-f8143c8c-1717593043' However, I'm getting the following error in geth: the method engine_newPayloadV3 does not exist/is not available.\r\n\r\n```sh\r\nWARN [06-25|01:51:05.615] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28699 duration=\"5.751\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nWARN [06-25|01:51:07.642] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28700 duration=\"5.821\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nWARN [06-25|01:51:09.640] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28701 duration=\"7.083\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nWARN [06-25|01:51:11.836] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28702 duration=\"5.059\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nWARN [06-25|01:51:14.019] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28703 duration=\"5.941\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nWARN [06-25|01:51:15.892] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28704 duration=\"6.102\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nWARN [06-25|01:51:17.880] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28705 duration=\"6.012\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nWARN [06-25|01:51:20.321] Served engine_newPayloadV3               conn=127.0.0.1:49860 reqid=28706 duration=\"5.611\u00b5s\" err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\n```\r\n\r\n\r\nBelow is the output from op-node.\r\n\r\n```sh\r\nt=2024-06-25T01:51:16+0000 lvl=info msg=\"connected to peer\" peer=16Uiu2HAmUii5ahzrPpUw5PNU7Y4mythsLsDn6KSoAekTLGDS52Hb addr=/ip4/24.196.108.4/tcp/59728\r\nt=2024-06-25T01:51:16+0000 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAmUii5ahzrPpUw5PNU7Y4mythsLsDn6KSoAekTLGDS52Hb\r\nt=2024-06-25T01:51:16+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmUii5ahzrPpUw5PNU7Y4mythsLsDn6KSoAekTLGDS52Hb addr=/ip4/24.196.108.4/tcp/59728\r\nt=2024-06-25T01:51:17+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x70730c60e4d54996eaaa703f27319925708fee35bd9d81b4aa05a7d2233ea19c:121840750 peer=16Uiu2HAmKXLei8vs4HvQdYzb14CUHRUoTovTjju2YXxTMSypXr5E\r\nt=2024-06-25T01:51:17+0000 lvl=info msg=\"Optimistically inserting unsafe L2 execution payload to drive EL sync\" id=0x70730c60e4d54996eaaa703f27319925708fee35bd9d81b4aa05a7d2233ea19c:121840750\r\nt=2024-06-25T01:51:17+0000 lvl=error msg=\"Payload execution failed\" block_hash=0x70730c60e4d54996eaaa703f27319925708fee35bd9d81b4aa05a7d2233ea19c err=\"the method engine_newPayloadV3 does not exist/is not available\"\r\nt=2024-06-25T01:51:17+0000 lvl=warn msg=\"Failed to insert unsafe payload for EL sync\" id=0x70730c60e4d54996eaaa703f27319925708fee35bd9d81b4aa05a7d2233ea19c:121840750 err=\"temp: failed to update insert payload: failed to execute payload: the method engine_newPayloadV3 does not exist/is not available\"\r\nt=2024-06-25T01:51:18+0000 lvl=info msg=\"connected to peer\" peer=16Uiu2HAkxjpbVC8RVF3wfLYLyRo9gti4TZ8a3isQb7CsorofrtSp addr=/ip4/78.198.226.123/tcp/42806\r\nt=2024-06-25T01:51:18+0000 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAkxjpbVC8RVF3wfLYLyRo9gti4TZ8a3isQb7CsorofrtSp\r\nt=2024-06-25T01:51:19+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAkxjpbVC8RVF3wfLYLyRo9gti4TZ8a3isQb7CsorofrtSp addr=/ip4/78.198.226.123/tcp/42806\r\nt=2024-06-25T01:51:19+0000 lvl=info msg=\"connected to peer\" peer=16Uiu2HAkxAcqiW7ytRfS2C8n4qUa6c22RiwPL2biP4y7vhnTFb3T addr=/ip4/218.103.214.136/tcp/60962\r\nt=2024-06-25T01:51:19+0000 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAkxAcqiW7ytRfS2C8n4qUa6c22RiwPL2biP4y7vhnTFb3T\r\nt=2024-06-25T01:51:19+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAkxAcqiW7ytRfS2C8n4qUa6c22RiwPL2biP4y7vhnTFb3T addr=/ip4/218.103.214.136/tcp/60962\r\n```\r\n\r\n\r\ngeth start script\r\n```\r\nnohup geth \\\r\n  --http \\\r\n  --http.port=8545 \\\r\n  --http.addr=0.0.0.0 \\\r\n  --authrpc.addr=0.0.0.0 \\\r\n  --authrpc.jwtsecret=/root/optimism-bin/jwt.txt \\\r\n  --verbosity=3 \\\r\n  --syncmode=full \\\r\n  --rollup.sequencerhttp=\"https://mainnet-sequencer.optimism.io\" \\\r\n  --op-network=op-mainnet \\\r\n  --datadir=/mnt/op-geth >> /mnt/op-geth/geth.log &\r\n```\r\n\r\nop-node start script\r\n```\r\nnohup op-node \\\r\n  --l1={{ env }} \\\r\n  --l1.rpckind=standard \\\r\n  --l1.beacon={{ env }} \\\r\n  --l2=http://localhost:8545 \\\r\n  --l2.jwt-secret=/root/optimism-bin/jwt.txt \\\r\n  --network=op-mainnet \\\r\n  --syncmode=execution-layer >> /mnt/op-node/node.log &\r\n```", "CLOSED", 0, "vataops", "2024-06-25T01:55:53Z", "2024-06-25T04:35:23Z", "2024-06-25T03:23:24Z", "ethereum-optimism/op-geth", "2025-08-30 15:22:38"]
["I_kwDODjvEJM6NpkO3", 11022, "Interop: op-supervisor: Load logs from new blocks", "Listen to incoming unsafe head update events (https://github.com/ethereum-optimism/optimism/pull/11009) and fetch the logs for each block in the chain, including handling cases where the head block skips forward by more than one block.  These should be output to the next stage in the fetcher pipeline.\n\nReorgs are not handled at this stage (they'll be identified by a separate stage in the pipeline).", "CLOSED", 0, "ajsutton", "2024-06-27T00:31:44Z", "2024-06-27T23:39:02Z", "2024-06-27T23:39:01Z", "ethereum-optimism/optimism", "2025-08-30 16:23:54"]
["I_kwDODjvEJM6NdlLC", 11002, "Interop: encapsulate op-node sync-status", "", "CLOSED", 0, "protolambda", "2024-06-25T18:15:42Z", "2024-06-26T19:31:59Z", "2024-06-26T19:31:58Z", "ethereum-optimism/optimism", "2025-08-30 16:23:54"]
["I_kwDODjvEJM6NWzTD", 10999, "Interop: op-supervisor head monitor", "Update op-supervisor to monitor updates to chain heads (unsafe, safe and finalized) from each RPC node.  This will be the start of a fetching pipeline.", "CLOSED", 0, "ajsutton", "2024-06-25T03:35:49Z", "2024-06-28T00:55:15Z", "2024-06-28T00:55:15Z", "ethereum-optimism/optimism", "2025-08-30 16:23:54"]
["I_kwDODjvEJM6NMsc4", 10983, "Interop: event handling utils and syntax sugar", "### Event helper functions\r\n\r\nSee review-discussion in: https://github.com/ethereum-optimism/optimism/pull/10947#pullrequestreview-2134407555\r\n\r\nInstead of defining inline functions that help run an action-test until a certain event, we can use generics.\r\n\r\nExample:\r\n```go\r\n// in rollup package\r\n\r\n// IsEventType is syntax-sugar to do a type check as a boolean function\r\nfunc IsEventType[T Event](ev Event) bool {\r\n\t_, ok := ev.(T)\r\n\treturn ok\r\n}\r\n\r\n// IsEventAny combines different event conditions into a single function\r\nfunc IsEventAny(fns ...func(ev Event) bool) func(ev Event) bool {\r\n\treturn func(ev Event) bool {\r\n\t\tfor _, fn := range fns {\r\n\t\t\tif fn(ev) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\n// in action test package, example:\r\n\r\nsequencer.ActL2EventsUntil(rollup.IsEventEny(rollup.IsEventType[derive.DeriverIdleEvent], rollup.IsEventType[engine.PendingSafeUpdateEvent]))\r\n\r\n```\r\n\r\nGenerally the op-e2e tests, especially the action-test framework, can benefit from the new event system, and introducing some helper functions would improve future test writing.\r\n\r\n### Event metrics\r\n\r\nWe can add 2 counter metrics:\r\n- total emitted events\r\n- total processed events\r\n\r\nAnd with the stringified event type (`.String()`, no need for reflection) as `event` label.\r\n\r\nFrom these two we can then monitor a lot of the processing:\r\n- rate of events\r\n- backlogs (diff of emitted and processed)\r\n\r\nAll per event type, and the totals.\r\n\r\n### Event package\r\n\r\nWe can probably make this even more elegant, by putting all the event utils and types into its own `event` package:\r\n- helpers: `event.Is`, `event.Any`\r\n- main interface type: `event.Event`\r\n- relevant interfaces: `event.Emitter`, `event.Deriver`\r\n- core utils: `event.Loop` (the `rollup.SynchronousEvents` loop util)\r\n- future utils: `event.System` (the parallel processing system)\r\n- etc.\r\n\r\nThis way the type util/interface usage reads better.\r\n\r\n\r\n", "CLOSED", 0, "protolambda", "2024-06-23T22:23:19Z", "2024-06-28T21:25:13Z", "2024-06-28T21:25:12Z", "ethereum-optimism/optimism", "2025-08-30 16:23:54"]
["I_kwDODjvEJM58axJD", 9064, "op-conductor: Dencun ExecutionPayloadEnvelope change", "Update server-side and client-side RPC usage of posting payloads to use the execution payload envelope.\r\n\r\nThe Dencun change implemented this server-side, but may have broken more unknown client-side calls of the RPC method.\r\nSee https://github.com/ethereum-optimism/optimism/pull/8707\r\n\r\n", "CLOSED", 0, "protolambda", "2024-01-18T03:10:46Z", "2024-06-26T15:34:29Z", "2024-06-26T15:34:29Z", "ethereum-optimism/optimism", "2025-08-30 16:23:54"]
["I_kwDOJ_r-bs6EnyYD", 160, "adding a chain: allow filename to be distinct from chain name", "Here's where that constraint comes from:\r\n\r\nhttps://github.com/ethereum-optimism/superchain-registry/blob/730d61f58c4b107f96e65959d6a1895b5c48b60b/scripts/add-chain.sh#L59-L61\r\n\r\nI think we _either_:\r\n\r\n1. Allow the filename to be set by a new, separate environment variable\r\n2. (My preference) Use the incoming \"shortname\" variable (see #153, this will be checked for global uniqueness) as the filename. ", "CLOSED", 0, "geoknee", "2024-04-04T09:53:00Z", "2024-06-28T19:39:50Z", "2024-06-28T19:39:49Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:24:03"]
["I_kwDOJ_r-bs6M2SjA", 299, "SuperchainRegistry: Update chain ID check to check for global uniqueness", "Currently chain ID checks only check uniqueness against chain IDs in the registry, but we'd like the check to be global instead, using the list from https://github.com/ethereum-lists/chains. Options for pulling the data:\r\n- https://github.com/ethereum-lists/chains/tree/master/_data/chains is the folder with each chain's data\r\n- https://chainid.network/chains.json is a JSON file generated from all that data. This file is currently ~570 kb\r\n- https://chainid.network/chains_mini.json is a smaller JSON file generated from all that data (doesn't contain all fields). This file is currently ~373 kb", "CLOSED", 0, "mds1", "2024-04-01T20:13:03Z", "2024-06-28T19:39:50Z", "2024-06-28T19:39:50Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:24:03"]
["I_kwDOJ_r-bs549xqh", 37, "Support ResourceMetering contract in CheckSecurityConfigs", "**Is your feature request related to a problem? Please describe.**\r\nThe CheckSecurityConfigs implemented in https://github.com/ethereum-optimism/superchain-registry/pull/31/files lacks support for ResourceMetering. \r\n\r\n**Describe the solution you'd like**\r\nWe should figure out what security properties we need to check for ResourceMetering contract, and add these checks to CheckSecurityConfigs\r\n\r\n**Describe alternatives you've considered**\r\nNone. But happy to discuss alternatives if anybody has anything in mind.\r\n\r\n**Additional context**\r\nFrom a discussion at https://github.com/ethereum-optimism/superchain-registry/pull/31/files#r1417591316\r\n", "CLOSED", 0, "zchn", "2023-12-06T22:02:52Z", "2024-06-24T15:24:57Z", "2024-06-24T15:24:57Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:24:03"]
["I_kwDOJ_r-bs53mJyu", 33, "CheckSecurityConfigs: Check integrity of the implementations", "In https://github.com/ethereum-optimism/superchain-registry/pull/31, we automated the checking of OP Chain access control integrity. To further improve the checks, we should also check the integrity of the implementations, i.e. whether the OP Chains are using governance approved protocol implementations and whether they are using a non-deprecated version. ", "CLOSED", 0, "zchn", "2023-11-22T14:39:23Z", "2024-06-24T15:21:29Z", "2024-06-24T15:21:27Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:24:03"]
["I_kwDOJ_r-bs5x0oWv", 10, "SystemConfigProxy is present on some networks and missing on others", "OP Sepolia has this address listed but PGN does not", "CLOSED", 0, "roninjin10", "2023-09-22T23:38:13Z", "2024-06-24T15:19:28Z", "2024-06-24T15:19:28Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:24:03"]
["I_kwDOMMiGhs6NV1T8", 15, "orchestrator: vanilla genesis setup", "We need to maintain the latest genesis state from the op-stack. Through release processes which updates the monorepo dependency, the vanilla genesis state is also updated.\n\nThis ticket will require some exploration. Dumping a sample path forward\n1. From the pinned monorepo version, generate l1 devnet allocs\n2. [Use op-node to generate genesis file](https://github.com/ethereum-optimism/optimism/blob/d74848c2f6b7a146b9a972005d4e373b98eea2be/op-node/README.md?plain=1#L69)\n3. Generate L1/L2 genesis files from this. This can be checked into the repository and repeatedly used. Only needs to be refreshed when the monorepo dependency is updated\n4. Supply this to all the anvil instances as needed, **only for vanilla mode**.\n\n\n**Definition of Done**\nCan run supersim command in vanilla mode. And all the monorepo contracts are available to interact with", "CLOSED", 0, "fainashalts", "2024-06-24T23:40:18Z", "2024-06-27T18:02:28Z", "2024-06-27T18:02:28Z", "ethereum-optimism/supersim", "2025-08-30 16:24:20"]
["I_kwDOMMiGhs6NVd7s", 9, "Orchestrator: User command to display instance information in CLI", "As users develop with supersim, they will need to pull up information about their local nodes from time to time. We should create a command for that purpose, something like:\r\n\r\n`supersim get nodes` or `supersim info`\r\n\r\n** Definition of Done**\r\nUsing a single command, the user can view information about the nodes they have running, specifically at least: \r\n1. All instances running\r\n2. A process identifier for each\r\n3. The port of each instance\r\n\r\n** Stretch goal:** Attempt to identify other useful information this command could display. ", "CLOSED", 0, "fainashalts", "2024-06-24T22:27:37Z", "2024-06-25T21:00:37Z", "2024-06-25T21:00:37Z", "ethereum-optimism/supersim", "2025-08-30 16:24:20"]
["I_kwDOMMiGhs6NVcrZ", 8, "Orchestrator: Add ability to configure Anvil instances", "Anvil instances run by the Orchestrator should be configurable. The most likely way to do this is through multiple `.toml` files, one for each network. If a developer does not provide these, we should provide default configurations.\r\n\r\n_Note: forking mode will have a chain configuration loader, so this is a complementary option to the eventual use of that tool._\r\n\r\n**Definition of Done**\r\nThe orchestrator checks for and applies `.toml` files for each network that the user has specified such files for.", "CLOSED", 0, "fainashalts", "2024-06-24T22:22:13Z", "2024-06-25T20:48:33Z", "2024-06-25T20:48:31Z", "ethereum-optimism/supersim", "2025-08-30 16:24:20"]
["I_kwDOMMiGhs6NTVrB", 5, "Orchestrator: Vanilla Mode", "Vanilla mode spins up the same configuration every time. A single \"l1\" anvil instance and 2 \"l2\" anvil instances. These L2 anvil instances for now have **no** predeploy state set.\n\n** Definition of Done **\nOne CLI command can start an L1 instance and 2 L2 instances that run simultaneously. These should not be forked and do not need to do anything that differentiates the instances yet.", "CLOSED", 0, "fainashalts", "2024-06-24T16:32:19Z", "2024-06-25T20:47:17Z", "2024-06-25T20:47:15Z", "ethereum-optimism/supersim", "2025-08-30 16:24:20"]
["I_kwDOMMiGhs6NTSM8", 4, "Project: Supersim MVP ", "### High level description of project.\n\nSupersim will provide a local development environment for app developers that will simulate multiple Optimism chains running with interoperability enabled. The design for this project can be found [here](https://github.com/ethereum-optimism/design-docs/pull/34).\r\n\r\n**The goal for completion of this project is 9/15/24**\r\n\n\n### Label Checks\n\n- [ ] I have added the team label for this project (CH, TH, Contributions).\n- [X] I have added the timeline for this project to the issue.", "CLOSED", 0, "fainashalts", "2024-06-24T16:23:35Z", "2024-06-24T16:24:27Z", "2024-06-24T16:24:27Z", "ethereum-optimism/supersim", "2025-08-30 16:24:20"]
["I_kwDODjvEJM6J7QEj", 10638, "Op-node - Derivation process temporary error, failed to fetch blobs.", "**Bug Description**\r\nOp-node failed to fetch blobs: failed to get blob sidecars for L1BlockRef.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Try to sync mainet\r\n2. Op-node is stuck on this error.\r\n\r\n**Expected behavior**\r\nIt should sync without error\r\n\r\n**Environment Information:**\r\n - Op-node version is op-node/v1.7.5)\r\n - Op-geth version is v1.101315.0)\r\n\r\n**Logs:**\r\nMay 24 01:19:03 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:03+0200 lvl=warn msg=\"Derivation process temporary error\" attempts=3687 err=\"engine stage failed: temp: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0xda4d94cc0f3ebd5447c858790dcefdca4d6a39623eee4609e3f287f2501dd6dc:19429617: failed to fetch blob sidecars for slot 8629261 block 0xda4d94cc0f3ebd5447c858790dcefdca4d6a39623eee4609e3f287f2501dd6dc:19429617: failed request with status 500: {\\\"code\\\":500,\\\"message\\\":\\\"block not found\\\"}\"\r\nMay 24 01:19:03 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:03+0200 lvl=info msg=\"Received signed execution payload from p2p\" id=0x55b8901d7fac7d33122979ccf02c75801a6fbc8211f879be012021804b19492e:120453783 peer=16Uiu2HAm3HuLhyVEbwLts1LLinY9wxjCKMrfK1mcmKir1LcbC3Sn\r\nMay 24 01:19:03 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:03+0200 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x55b8901d7fac7d33122979ccf02c75801a6fbc8211f879be012021804b19492e:120453783\r\nMay 24 01:19:05 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:05+0200 lvl=info msg=\"Received signed execution payload from p2p\" id=0xd7f0324405cb05721f2c19aa44e1f1d74d21f975932acd756ee9a6cc3c8492a1:120453784 peer=16Uiu2HAm1b9sAdY2HJrx77ygq63ZnSp7EoTvXgbrPMpBspsZUnCE\r\nMay 24 01:19:05 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:05+0200 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xd7f0324405cb05721f2c19aa44e1f1d74d21f975932acd756ee9a6cc3c8492a1:120453784\r\nMay 24 01:19:07 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:07+0200 lvl=info msg=\"connected to peer\" peer=16Uiu2HAmCnUrezTVbVFnrUxGjDbBmvdjeCyk7favPzF3cUb2Zb3J addr=/ip4/192.211.52.170/tcp/9222\r\nMay 24 01:19:07 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:07+0200 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAmCnUrezTVbVFnrUxGjDbBmvdjeCyk7favPzF3cUb2Zb3J\r\nMay 24 01:19:07 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:07+0200 lvl=info msg=\"Received signed execution payload from p2p\" id=0xdd8173642ea88d90c729156de0d9c6a860e8099885fec3adb40a44eb550fc7f2:120453785 peer=16Uiu2HAkvNLhzVFnDbmxKebmy7NNaD8PiAnVdfNqKKdbuWgSXq4V\r\nMay 24 01:19:07 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:07+0200 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xdd8173642ea88d90c729156de0d9c6a860e8099885fec3adb40a44eb550fc7f2:120453785\r\nMay 24 01:19:09 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:09+0200 lvl=info msg=\"Received signed execution payload from p2p\" id=0x2cfb98f0dc0c28d5b82ac5e0a5198c278f9e43e3acb6d6ba47cb93b69cd6553a:120453786 peer=16Uiu2HAm6dFbHQ64GtCjMzoqGb7ojX1YUT3GZ9Ls5YLftYGuoivs\r\nMay 24 01:19:09 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:09+0200 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x2cfb98f0dc0c28d5b82ac5e0a5198c278f9e43e3acb6d6ba47cb93b69cd6553a:120453786\r\nMay 24 01:19:11 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:11+0200 lvl=info msg=\"Received signed execution payload from p2p\" id=0x4340fb50261e5122701254bf1d5d25c3904a98cb10274f1175e1476e588d23f9:120453787 peer=16Uiu2HAkvNLhzVFnDbmxKebmy7NNaD8PiAnVdfNqKKdbuWgSXq4V\r\nMay 24 01:19:11 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:11+0200 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x4340fb50261e5122701254bf1d5d25c3904a98cb10274f1175e1476e588d23f9:120453787\r\nMay 24 01:19:13 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:13+0200 lvl=info msg=\"Received signed execution payload from p2p\" id=0xc0b2af7bfe36d0d7a6dfe7fc7fd13081abea7085a417ba70a5876bc8f6e0be3c:120453788 peer=16Uiu2HAkvA2jWv9ehRBfJ1t29ks6NrpYiu4PCqRv7K8piuXWquFX\r\nMay 24 01:19:13 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:13+0200 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xc0b2af7bfe36d0d7a6dfe7fc7fd13081abea7085a417ba70a5876bc8f6e0be3c:120453788\r\nMay 24 01:19:14 NLDW1-1-12-37 op-node.sh[1307831]: t=2024-05-24T01:19:14+0200 lvl=warn msg=\"Derivation process temporary error\" attempts=3688 err=\"engine stage failed: temp: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0xda4d94cc0f3ebd5447c858790dcefdca4d6a39623eee4609e3f287f2501dd6dc:19429617: failed to fetch blob sidecars for slot 8629261 block 0xda4d94cc0f3ebd5447c858790dcefdca4d6a39623eee4609e3f287f2501dd6dc:19429617: failed request with status 500: {\\\"code\\\":500,\\\"message\\\":\\\"block not found\\\"}\"", "CLOSED", 0, "zainirfan13", "2024-05-23T23:22:04Z", "2024-07-02T06:52:31Z", "2024-06-17T22:08:42Z", "ethereum-optimism/optimism", "2025-08-30 16:24:51"]
["I_kwDOJ_r-bs6Es7bK", 164, "Tidy up `implementations`, `semver.yaml` and associated code.", "> Per superchain a set of canonical implementation deployments, per semver version, is tracked.\nAs default, an empty collection of deployments can be set:\n\nI think this should be tweaked to clarify that it's the \"governance approved standard implementations starting from `op-contracts/v1.3.0` and later\" (i.e. MCP and later and only applies to standard + premier chains). In which case I agree with the `/superchain/implementations @ethereum-optimism/security-reviewers` assignment\n\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/superchain-registry/pull/163#discussion_r1552187127_\n            \n\n\n---\n\nUpdate: we have no implemented an entirely new way of checking contract versions. \n\nThis ticket now covers removing cruft from the old way of doing it, as well as other files which are only referenced in the deprecated `op-upgrade` package (which also needs to be removed). ", "CLOSED", 0, "mds1", "2024-04-04T19:40:31Z", "2024-07-02T14:14:42Z", "2024-07-02T14:14:39Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:25:13"]
["I_kwDOJ_r-bs6EPyuJ", 151, "Update op-node and op-geth to understand supechainlevel (standard vs frontier)", "> I would prefer to make this change in op-node, where it can differentiate based on the new superchain level. The rationale being that I think we ultimately want to deprecate the go exports here that are consumed by op-node/op-geth/etc and instead have op-node/etc consume data from generated TOML files\u2014this should be more flexible and easier to maintain, since TOML can be consumed by other languages without the registry needing bindings/releases for every supported language\r\n\r\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/superchain-registry/pull/140#discussion_r1544584285_\r\n            ", "CLOSED", 0, "geoknee", "2024-04-01T17:38:07Z", "2024-07-02T14:11:32Z", "2024-07-02T14:11:32Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:25:13"]
["I_kwDOJ_r-bs5-Pwn6", 78, "TestGenesisHash: move genesis generation code into `validation` module", "              As we discussed during our 1:1, we should ideally move the genesis generation loading code + hardcoded genesis hashes into the Registry.\r\n\r\n_Originally posted by @mslipper in https://github.com/ethereum-optimism/superchain-registry/pull/72#pullrequestreview-1859992366_\r\n            ", "CLOSED", 0, "geoknee", "2024-02-05T09:27:19Z", "2024-07-02T14:12:10Z", "2024-07-02T14:12:09Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:25:13"]
["I_kwDOKIwiaM6JnL3_", 705, "[DOCS] Explain Node Log Levels", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nWe need to educate node operators by explaining node log levels \u2014 explain each level, when it makes sense to use, etc.\r\n\r\n## Description of the Documentation You'd Like\r\nThis could be a new guide or an addition to the [consensus layer node config page](https://docs.optimism.io/builders/node-operators/configuration/consensus-config#loglevel). Here's some basic info about the node log levels for geth: https://geth.ethereum.org/docs/fundamentals/logs\r\n\r\n## Links to Related Pages\r\nconsensus layer config page - https://docs.optimism.io/builders/node-operators/configuration/consensus-config#loglevel\r\nhow to run a node in the superchain also mentions node log levels - https://docs.optimism.io/builders/node-operators/rollup-node#run-your-node\r\n\r\n", "CLOSED", 0, "cpengilly", "2024-05-21T17:13:58Z", "2024-07-12T18:11:42Z", "2024-07-12T18:11:42Z", "ethereum-optimism/docs", "2025-08-30 16:27:25"]
["I_kwDOH2Qg5s6PCRUv", 347, "base network unable to send tx after upgrade", "#### System information\r\nOp Geth version: `op-geth version 1.101315.2-stable-7c281983`\r\nOp Node Verison\uff1a`op-node version v1.7.7-f8143c8c-1717593043`\r\nOS & Version: Linux Docker\r\n\r\n#### Expected behaviour\r\nNodes can be synchronised properly and transactions can be sent\r\n\r\n\r\n#### Actual behaviour\r\nNodes can synchronise normally, but cannot send transactions\r\n```bash\r\n/opt/base-nodemain/core/op-node --network=base-mainnet --rollup.config=/mnt/base-nodemain/conf/rollup.json --sy\r\nncmode=execution-layer --l1.trustrpc --l1=http://eth-3.eth.blocknodehub.com:8545 --l1.beacon=http://eth-3.eth.blocknodehub.com:3500 --l1.beacon-archiver=http://eth-proxy-1.eth.bl\r\nocknodehub.com:3500 --l1.epoch-poll-interval=6m24s --l1.http-poll-interval=12s --l1.max-concurrency=10 --verifier.l1-confs=3 --l2=http://127.0.0.1:8551 --l2.jwt-secret=/mnt/base-\r\nnodemain/node/jwt.hex --rpc.enable-admin --rpc.addr=127.0.0.1 --rpc.port=9545 --p2p.discovery.path=/mnt/base-nodemain/node/node/discovery_db --p2p.peerstore.path=/mnt/base-nodema\r\nin/node/node/peerstore_db --p2p.priv.path=/mnt/base-nodemain/conf/p2p_priv.txt --p2p.listen.tcp=13000 --p2p.listen.udp=12000\r\n\r\n/opt/base-nodemain/core/op-geth --op-network=base-mainnet --verbosity=4 --datadir=/mnt/base-nodemain/node/geth\r\n--gcmode=full --syncmode=full --db.engine=leveldb --state.scheme=hash --snapshot=false --http --http.addr=0.0.0.0 --http.port=8545 --http.vhosts=* --http.corsdomain=* --http.api=\r\nadmin,eth,net,web3,personal,debug,txpool --ws --ws.addr=0.0.0.0 --ws.port=8546 --ws.origins=* --ws.api=admin,eth,net,web3,personal,debug,txpool --rpc.gascap=0 --rpc.txfeecap=0 --\r\ntxpool.globalslots=10000 --txpool.globalqueue=5000 --authrpc.addr=127.0.0.1 --authrpc.port=8551 --authrpc.vhosts=* --authrpc.jwtsecret=/mnt/base-nodemain/node/jwt.hex --rollup.di\r\nsabletxpoolgossip --rollup.sequencerhttp=https://opbnb-mainnet-rpc.bnbchain.org --maxpeers=100 --port=30303 --discovery.port=30303 --bootnodes=enr:-KO4QHs5qh_kPFcjMgqkuN9dbxXT4C5\r\nCjad4SAheaUxveCbJQ3XdeMMDHeHilHyqisyYQAByfdhzyKAdUp2SvyzWeBqGAYvRDf80g2V0aMfGhHFtSjqAgmlkgnY0gmlwhDaykUmJc2VjcDI1NmsxoQJUevTL3hJwj21IT2GC6VaNqVQEsJFPtNtO-ld5QTNCfIRzbmFwwIN0Y3CCd\r\nl-DdWRwgnZf,enr:-KO4QKIByq-YMjs6IL2YCNZEmlo3dKWNOy4B6sdqE3gjOrXeKdNbwZZGK_JzT1epqCFs3mujjg2vO1lrZLzLy4Rl7PyGAYvRA8bEg2V0aMfGhHFtSjqAgmlkgnY0gmlwhDbjSM6Jc2VjcDI1NmsxoQNQhJ5pqCPnTb\r\nK92gEc2F98y-u1OgZVAI1Msx-UiHezY4RzbmFwwIN0Y3CCdl-DdWRwgnZf\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\nJust run the specified version of the node normally, Previous versions were able to synchronise and send transactions normally\r\nOld Op Geth version: `op-geth version 0.1.0-unstable-e9a306ba` tag(`v1.101311.0`)\r\nOld Op Node Verison\uff1a`op-node version v0.0.0-a3cc8f27-1712594626` tag(`op-node/v1.7.3`)\r\n\r\n#### Backtrace\r\n```log\r\nDEBUG[07-10|12:45:00.412] Dereferenced trie from memory database   nodes=2047      size=763.23KiB  time=8.120193ms    gcnodes=14,782,490 gcsize=5.21GiB    gctime=1m1.017741314s  livenodes=2,303,655 livesize=610.59MiB\r\nINFO [07-10|12:45:00.412] Imported new potential chain segment     number=16,898,676 hash=459f9b..6c2cde blocks=1   txs=65   mgas=16.752 elapsed=155.519ms    mgasps=107.716 triedirty=839.71MiB\r\nDEBUG[07-10|12:45:00.412] Served engine_newPayloadV3               conn=127.0.0.1:33730 reqid=938824 duration=157.723369ms\r\nINFO [07-10|12:45:00.415] Chain head was updated                   number=16,898,676 hash=459f9b..6c2cde root=46d758..3527b1 elapsed=1.881913ms\r\nDEBUG[07-10|12:45:00.415] Served engine_forkchoiceUpdatedV3        conn=127.0.0.1:33730 reqid=938825 duration=2.354734ms\r\nDEBUG[07-10|12:45:00.415] Reinjecting stale transactions           count=0\r\nDEBUG[07-10|12:45:00.415] Unindexed transactions                   blocks=1   txs=34   tail=14,548,677 elapsed=\"545.585\u00b5s\"\r\nDEBUG[07-10|12:45:00.437] Executing EVM call finished              runtime=8.303572ms\r\nDEBUG[07-10|12:45:00.437] Served eth_call                          conn=172.31.119.40:39048 reqid=54192 duration=8.373801ms\r\nDEBUG[07-10|12:45:00.536] Executing EVM call finished              runtime=5.328638ms\r\nDEBUG[07-10|12:45:00.536] Served eth_call                          conn=172.31.239.100:51098 reqid=54269 duration=5.407289ms\r\nDEBUG[07-10|12:45:00.739] Served eth_chainId                       conn=172.31.119.40:39064 reqid=847153 duration=\"31.209\u00b5s\"\r\nWARN [07-10|12:45:00.832] Served eth_sendRawTransaction            conn=47.92.150.73:53716 reqid=1 duration=213.52708ms err=\"invalid sender\"\r\nDEBUG[07-10|12:45:01.023] Executing EVM call finished              runtime=7.688937ms\r\nDEBUG[07-10|12:45:01.024] Served eth_call                          conn=172.31.239.100:52270 reqid=54272 duration=7.775342ms\r\nDEBUG[07-10|12:45:01.158] Executing EVM call finished              runtime=\"198.707\u00b5s\"\r\nDEBUG[07-10|12:45:01.158] Served eth_call                          conn=172.31.239.100:52588 reqid=1 duration=\"295.162\u00b5s\"\r\nDEBUG[07-10|12:45:01.234] Executing EVM call finished              runtime=\"225.834\u00b5s\"\r\nDEBUG[07-10|12:45:01.234] Served eth_call                          conn=172.31.239.100:52790 reqid=2 duration=\"317.253\u00b5s\"\r\nDEBUG[07-10|12:45:01.265] Executing EVM call finished              runtime=\"150.402\u00b5s\"\r\nWARN [07-10|12:45:01.265] Served eth_call                          conn=172.31.239.100:52832 reqid=1 duration=\"244.453\u00b5s\" err=\"missing trie node 9ecd5868af16c51fdba038eb9ee0e347cf56f1d43a844a7e0dadaf93c3724fe2 (path ) state 0x9ecd5868af16c51fdba038eb9ee0e347cf56f1d43a844a7e0dadaf93c3724fe2 is not available, not found\"\r\n```\r\n", "CLOSED", 0, "YuXiaoCoder", "2024-07-10T04:46:37Z", "2024-07-10T05:43:04Z", "2024-07-10T05:43:04Z", "ethereum-optimism/op-geth", "2025-08-30 16:27:25"]
["I_kwDOH2Qg5s59Ociw", 226, "include the L1 data fee with Capture Start", "# Rationale\r\n\r\nFrom Caleb:\r\n\r\n> Yea I think it would be great if the L1 data fee can be included with CaptureStart, helps with figuring out what the starting and ending balances of an address granular down to when a transaction is done, definitely more intuitive this way \r\n\r\n# Implementation\r\n\r\n> Do you have ideas regarding the implementation of this feature?\r\n> Are you willing to implement this feature?\r\n\r\nNot personally\r\n\r\n# Additional Context\r\n\r\nFor the folks at OP Labs, the full context is here: https://github.com/ethereum-optimism/developer-support/issues/369", "OPEN", 0, "sbvegan", "2024-01-25T18:24:16Z", "2024-07-09T16:39:48Z", null, "ethereum-optimism/op-geth", "2025-08-30 16:27:25"]
["I_kwDOH2Qg5s51XZGZ", 176, "Add validations for Optimism Chain Config", "We need to Optimism hard-forks with the ordering rules as well as validate the Optimism EIP1559 parameters based on the forks that are active.", "OPEN", 0, "trianglesphere", "2023-10-30T19:25:51Z", "2024-07-09T16:39:43Z", null, "ethereum-optimism/op-geth", "2025-08-30 16:27:25"]
["I_kwDOLB-lzc6Peih-", 276, "\"Standard config\" spec should not reference pre-fault-proofs contracts", "There is at least one example here:\r\n\r\nhttps://github.com/ethereum-optimism/specs/blob/dfa8ea9568b0e35827be763fa8e6a2eeb9d90704/specs/protocol/configurability.md?plain=1#L55C1-L56C1\r\n\r\nThe L2OutputOracle is not used in Fault Proof systems, and standard chains must be on Fault Proofs. \r\n\r\nI think in this case the parameter is defined off-chain in the rollup config. ", "OPEN", 0, "geoknee", "2024-07-13T20:04:30Z", "2024-07-13T20:04:30Z", null, "ethereum-optimism/specs", "2025-08-30 16:27:55"]
["I_kwDOJ_r-bs6N5qrO", 345, "addresses.json is out of sync", "We are not enforcing that this file is updated on CI (a regression). So running `pnpm codegen` results in a nonzero git diff. ", "CLOSED", 0, "geoknee", "2024-06-28T15:42:09Z", "2024-07-10T13:12:24Z", "2024-07-10T13:12:24Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:27:58"]
["I_kwDOJ_r-bs6EPyAS", 150, "Revisit the list of excluded chain ids hardcoded into each test", "> New Issue: Since this skips many chains, we should consider revisiting the list of excluded chain ids hardcoded into each test. Most likely those lists can be shortened or entirely removed.\r\n\r\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/superchain-registry/pull/140#discussion_r1546630917_\r\n            ", "CLOSED", 0, "geoknee", "2024-04-01T17:36:13Z", "2024-07-08T13:34:56Z", "2024-07-08T13:34:56Z", "ethereum-optimism/superchain-registry", "2025-08-30 16:27:58"]
["I_kwDOMMiGhs6PAVM3", 38, "supersim: on startup check that required version of anvil is installed", "", "CLOSED", 0, "tremarkley", "2024-07-09T21:17:34Z", "2024-07-13T00:10:03Z", "2024-07-13T00:10:03Z", "ethereum-optimism/supersim", "2025-08-30 16:28:06"]
["I_kwDOMMiGhs6NWxL9", 16, "op-simulator: basic proxy", "The prerequisite to additional work on the op-simulator is to add a basic proxy that takes RPC requests from a developer's app and pass them along to the local nodes. This initial task is to create this proxy as essentially only a pass through for now. \r\n\r\n**Definition of Done**\r\n\r\n- [ ] `op-simulator` package exists\r\n- [ ] `op-simulator` can be started from the `orchestrator`\r\n- [ ] `op-simulator` intercepts RPC calls from a user app and passes all of these calls to identified local nodes", "CLOSED", 0, "fainashalts", "2024-06-25T03:26:11Z", "2024-07-09T17:49:00Z", "2024-07-09T17:49:00Z", "ethereum-optimism/supersim", "2025-08-30 16:28:06"]
["I_kwDOMMiGhs6NVefc", 10, "orchestrator: startup logging", "When starting up supersim from #6. The starting logs should contain all the rpc url, and accounts available for the developer to interact with. \n```\n$ supersim\nL1:\n  Chain Id: 420 RPC http://localhost:8545\nL2: \n  Chain Id: 991, RPC: http://localhost:9545\n  Chain Id: 992, RPC: http://localhost:9546\n\nPre-funded Accounts on all chains:\n(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\n(1) 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\n  ...\n```\n\nAnvil logs are noisy and we don't want to suppress the above logs which is the most important for dapp developers to start testing their apps. By default we'll silence anvil and need to figure out the best way to pipe anvil logs moving forward. Some options:\n1. Anvil logs go to temporary files that the dev can pipe to watch\n2. Explore anvil config to silence noisy logs but keep important ones\n3. Add code that can detect and silence noisy logs\n\n**Definition of Done**\nStartup logs include the important info shown above for the dapp developer", "CLOSED", 0, "fainashalts", "2024-06-24T22:29:25Z", "2024-07-11T18:36:23Z", "2024-07-11T18:36:23Z", "ethereum-optimism/supersim", "2025-08-30 16:28:06"]
["I_kwDOMMiGhs6NTgTr", 6, "orchestrator: configuration & vanilla mode", "There are two modes that supersim can run in. By default, vanilla is the mode of operation\n\n# Vanilla\n\n```\n$ supersim // default vanilla mode\n```\n\n**There's no configuration**. We assert in the docs that supersim has some ports that it uses:\n * L1 Port: 8545\n * L2 Port(s): 9545,9546,954.. incrementing\n \nChain IDs are also predetermined:\n* L1: 420\n* L2(s): 991,992,993...\n\n\nVanilla mode run a single \"l1\" instance and two \"l2\" instances.\n\n\n## Forked\n\n**not implemented in this ticket**. We simply define the configuration story here in comparison to vanilla. A subcommand `fork` is available to fork from the superchain registry\n\nTODO: create ticket for this command\n\n```\n$ supersim fork\n```\n\nBy default latest L1 height. A specified height can be set as well\n```\n--fork.l1.height 420\n```\n\nBy default, the mainnet eth network is forked. A testnet can be specified\n```\n--network sepolia\n```\n\nBy default, the entire registry is forked. A subset of the superchain registry can be forked by name, delineated by commas. Fails if a name is not recognized in the registry\n```\n--chains \"mainnet,base,zora..\"\n```\n\nBy default the fork urls will use the public endpoints but this should be allowed to be specified\n```\n--fork.urls \"base=http://foo.bar,zora=http://bar.baz\"\n```\n\n**Definition of Done**\n\nVanilla mode is operational. No configuration options. Simply run the supersim command.", "CLOSED", 0, "fainashalts", "2024-06-24T16:59:38Z", "2024-07-11T18:02:14Z", "2024-07-11T18:02:14Z", "ethereum-optimism/supersim", "2025-08-30 16:28:06"]
["I_kwDODjvEJM6PMp65", 11134, "op-node: improve temporary error-recovery on block-sealing", "Currently, as sequencer and derivation pipeline, we restart/reattempt block-building from the attributes input, rather than trying to recover the existing payload-job.\r\n\r\nIn the cases of a context-timeout the block-building job has likely expired, and if the job-identifier is unknown, then it won't be retrievable either anymore.\r\n\r\nBut in some cases it (the `engine_getPayload` call) can be re-attempted, and successfully return, without redoing block-building work. This can be improved in the sequencing code.\r\n\r\nSee review comments by Adrian in https://github.com/ethereum-optimism/optimism/pull/10991 for additional context.\r\n", "OPEN", 0, "protolambda", "2024-07-11T07:23:14Z", "2024-07-11T23:36:30Z", null, "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6PJkVL", 11130, "op-node: support UnsupportedFork engine-API error code", "Currently this error-code is unrecognized, and handled as a temporary engine-API error.\r\n\r\nThis was introduced in Cancun, and can help identify unsupported data. Although execution-clients may also respond with the generic \"unrecognized RPC method\" error, if not supporting the fork at all.\r\n\r\nIdeally we update the Engine-API client to make the RPC error-codes easier to inspect; in some cases we already return an InputError type from which the type can be read, but that should be default for all errors. And then in the `engine` package we should systematically inspect it, follow the engine-API spec, and translate it to the appropriate error / event (once, no wrapped error inspection).\r\n", "OPEN", 0, "protolambda", "2024-07-10T20:31:56Z", "2025-10-01T14:36:23Z", null, "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6O1vva", 11098, "Interop: event trace diagrams [nice to have]", "On top of the event-system (see #11097 ) we can add custom event-tracing, and generate diagrams from the data.\r\nE.g. sequence-diagram, timing, dependencies, etc.", "CLOSED", 0, "protolambda", "2024-07-08T20:00:07Z", "2024-07-12T01:48:48Z", "2024-07-12T01:48:48Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6O1vro", 11097, "Interop: clean up event deriver/emitter system", "Make the event processing more manageable, and prepare for parallel event execution, by registering derivers and emitters by name. This effectively becomes the \"event system\" main component.\r\n", "CLOSED", 0, "protolambda", "2024-07-08T20:00:00Z", "2024-07-09T07:19:20Z", "2024-07-09T07:19:19Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6Oevv_", 11079, "Error on Challenger Node - Failed to progress games: failed batch-retrieval: 429 Too Many Requests", "Description:\r\n\r\nI am operating a challenger node and encountered the following error:\r\n\r\n`ERROR[07-04|18:32:35.936] Failed to progress games                 err=\"failed to load games: failed to fetch games: failed to fetch batch: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"`\r\n\r\nHere are the details of my setup:\r\n\r\nL1 & L2 ETH-RPC: Infura\r\nL1 Beacon & Rollup-RPC: QuickNode\r\n\r\nCommand Used:\r\n\r\n\r\n```\r\n./bin/op-challenger \\     \r\n   --trace-type cannon \\\r\n   --l1-eth-rpc= \\\r\n   --l1-beacon= \\\r\n   --l2-eth-rpc= \\\r\n   --rollup-rpc=/ \\\r\n   --selective-claim-resolution \\\r\n   --private-key= \\\r\n   --network=op-sepolia \\\r\n   --datadir=/data \\\r\n   --cannon-prestate=./op-program/bin/prestate.json \\\r\n   --cannon-bin=./path-to-cannon-binary/cannon \\\r\n   --cannon-server=./op-program/bin/op-program  \r\n\r\n```\r\nLogs:\r\n\r\n```\r\nINFO [07-04|18:32:21.557] Starting op-challenger                   version=v0.0.0-0fb2bb18-1718470952\r\nINFO [07-04|18:32:23.862] starting scheduler\r\nINFO [07-04|18:32:23.862] starting monitoring\r\nINFO [07-04|18:32:23.862] challenger game service start completed\r\nERROR[07-04|18:32:35.936] Failed to progress games                 err=\"failed to load games: failed to fetch games: failed to fetch batch: failed batch-retrieval: 429 Too Many Requests: {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"code\\\":-32005,\\\"message\\\":\\\"batch item count exceeded\\\"}}\"\r\n^CINFO [07-04|18:32:39.442] stopping challenger game service\r\nINFO [07-04|18:32:39.443] stopped challenger game service          err=<nil>\r\n```\r\n\r\nAny help or guidance would be greatly appreciated.\r\n\r\nThank you!", "CLOSED", 0, "AaronLee22", "2024-07-04T09:40:06Z", "2024-07-08T01:09:01Z", "2024-07-08T01:09:01Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6N1G7l", 11044, "Interop: op-supervisor: Recover from failure after some logs in block are written", "The log DB API stores a single log at a time, but receipts are fetched for a block at a time. If an error occurs after some logs from a block are written but before they are all written, the database needs to be rewound to the previous block before we can attempt to write block logs again.", "CLOSED", 0, "ajsutton", "2024-06-28T03:48:52Z", "2024-07-10T19:52:00Z", "2024-07-10T19:51:59Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6Nplph", 11025, "Interop: op-supervisor: Record logs in database", "After #11024 as logs are produced from the fetching pipeline, record them to the appropriate log db for that chain, including the log and executing message.", "CLOSED", 0, "ajsutton", "2024-06-27T00:37:03Z", "2024-07-09T02:25:49Z", "2024-07-09T02:25:49Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6Npket", 11023, "Interop: op-supervisor: Create log db for each chain", "At startup, create or reopen the log database for each chain we have an rpc endpoint for.\n\nWill need to implement a suitable disk layout to keep data for each chain separate. Suggest having a separate directory for each chain as we will likely wind up storing multiple files per chain.", "CLOSED", 0, "ajsutton", "2024-06-27T00:33:13Z", "2024-07-09T04:13:12Z", "2024-07-09T04:13:11Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6NFkHh", 10979, "Interop: update sequencer to events deriver", "The sequencer code in op-node currently shares the engine-controller state. To really separate the engine state into its own go routine, and to clean up the main op-node Driver, we need the sequencer to interact with it through events.\r\n\r\nThis would roughly look like:\r\n- a stop event to disable the sequencer\r\n- a start event to enable the sequencer\r\n- a status update event emitted by the sequencer when it turns on/off\r\n- block-build/seal trigger events\r\n- taking the sequencer-action timer out of the driver main loop and encapsulating it\r\n", "CLOSED", 0, "protolambda", "2024-06-21T18:22:52Z", "2024-07-12T02:18:38Z", "2024-07-12T02:18:38Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6Mq7ND", 10908, "txmgr: Add multi-send", "Add multi-send mode to the TxMgr. High-level idea is to allow adding multiple RPC endpoints for tx sending, then send a transaction on all endpoints, but only report errors from the primary, while logging errors (maybe only if different) from secondary endpoints.\r\n\r\nA very basic implementation could just have a static primary. A smarter implementation could have a fallback logic that sticks to new primary endpoints. (I think) we already have a generic implementation of (some of) the fallback logic for the fallback Beacon client.", "CLOSED", 0, "sebastianst", "2024-06-05T13:17:22Z", "2024-07-14T22:52:08Z", "2024-07-14T22:52:07Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDODjvEJM6MirQB", 10857, "Interop: op-supervisor logdb", "Implement a simple append-only log database for registering initiating/executing message hashes.\r\nThis can then be used by the op-supervisor backend to persist messaging links for later validation of new executing messages and block-safety.\r\n", "CLOSED", 0, "protolambda", "2024-06-04T17:50:37Z", "2024-07-08T20:57:59Z", "2024-07-08T20:57:59Z", "ethereum-optimism/optimism", "2025-08-30 16:28:10"]
["I_kwDOI7W0xc6KCKqr", 505, "My money stuck in optimism ", "My money stuck in optimism for 38 days ago please release it to my wallet.\r\n`\r\n0x0F5487D41614025d5fDe812beB0057Ca33437949\r\n]\r\n![IMG_1280](https://github.com/ethereum-optimism/op-analytics/assets/170751267/37f56a3b-c818-494f-8b04-01b95a6f5de0)\r\n", "CLOSED", 0, "Moathb", "2024-05-24T16:45:07Z", "2024-07-10T13:40:29Z", "2024-07-10T13:40:28Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5orSMV", 133, "[Request for Contributions] OP Rewards:  Arrakis/Gamma Uniswap programs", "### Project\r\nArrakis/Gamma Uniswap programs\r\n### Description\r\nBoth Arrakis and Gamma have ended their rewards programs and now it is time to dive deeper into understanding the OP rewards impact during and post incentives. \r\n- How are the DEX volume and TVL change: pre, during and post incentives\r\n- Can DEX volume be further segmented by bots, whales and retail users \r\n- What's the liquidity retention looking like\r\n- What would you recommend for future programs? \r\n\r\n### Find out more\r\nArrakis: https://www.notion.so/oplabs/OP-Uniswap-Liquidity-Managers-Arrakis-d05d172649d247a29861e6e2cbcdc0df?pvs=4\r\nGamma: https://www.notion.so/oplabs/OP-Uniswap-Liquidity-Managers-Gamma-fff4500e003b48c0aa9a16bca5b8e005?pvs=4", "CLOSED", 0, "chuxinh", "2023-06-14T06:46:19Z", "2024-07-10T13:40:51Z", "2024-07-10T13:40:51Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5orDFh", 132, "[Request for Contributions] OP Rewards: Liquidity Staking on Optimism (Lido & Rocket Pool)", "### Project\r\nLiquidity Staking on Optimism (Lido & Rocket Pool)\r\n### Description\r\nDeep dives to explore the how OP rewards are distributed to incentivise liquidity staking on Optimism, how rewards are allocated across dapps/liquidity pools and their performances, OP and LDO spend, how liquidity retention is looking like in the absence of incentives, and any other recommendations you have\r\n\r\n### Find out more\r\nLido: https://www.notion.so/oplabs/Lido-51c8f1e4a6f24bcd88ca84bba9fc8dfc?pvs=4\r\nRocketpool: https://www.notion.so/oplabs/Rocket-Pool-260afe3571434634a680d21e006839a7?pvs=4", "CLOSED", 0, "chuxinh", "2023-06-14T05:57:11Z", "2024-07-10T13:40:51Z", "2024-07-10T13:40:51Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5oq5Ck", 131, "[Request for Contributions] OP Rewards: Yearn Deep-dives", "### Project\r\nYearn\r\n### Description\r\nDeep-dive on Yearn's Optimism yVaults boosted yields which distribute 25K OP for 40 weeks. Boost currently is live on USDC, DAI, USDT, and WETH vaults. How is Yearn's program performing as compared to other similar incentive programs? How long will those TVL be kept on Optimism? Anything else you want to suggest or recommend for liquidity incentives?\r\nThere's also Yearn Coinbase Quest live at the same time, can you help differentiate that? \r\n### Find out more\r\nhttps://www.notion.so/oplabs/Yearn-3274e9ac94654fa7a84174c4cd810e2a?pvs=4", "CLOSED", 0, "chuxinh", "2023-06-14T05:15:49Z", "2024-07-10T13:40:50Z", "2024-07-10T13:40:50Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5oqvVf", 130, "[Request for Contributions] OP Rewards: Rabbithole Deep-dives", "### Project\r\nRabbithole\r\n### Description\r\nProtocol deep-dive for Rabbithole to measure the impact of its Optimism Weekly Quests, areas to explore include but not limited to how quests are onboarding users/wallets to Optimism, does amount of OP reward correlate with retention, do some quests perform better than others, what else can we learn to help Rabbithole team to design future quests on Optimism\r\n### Find out more\r\nhttps://www.notion.so/oplabs/Rabbit-Hole-d1074aa502fd415290a6cacf81fe9820?pvs=4", "CLOSED", 0, "chuxinh", "2023-06-14T04:32:10Z", "2024-07-10T13:40:50Z", "2024-07-10T13:40:50Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5jfJl_", 54, "[Request for Contributions] OP Rewards: Project Wallet Mapping", "The [op_token_distributions_optimism.transfer_mapping](https://dune.com/queries/2370566) abstraction table in Dune is generated by first identifying distribution recipient project wallets, then pulling all OP transfer transactions from those wallets.\r\n\r\nIf you notice a wallet that is not being picked up, you can add it in the [Dune spellbook here](https://github.com/duneanalytics/spellbook/blob/main/models/op/token_distributions/optimism/op_token_distributions_optimism_project_wallets.sql).\r\n- Add the wallet to the `intermediate_wallets` if the wallet represents an internal team wallet (i.e. team multisig).\r\n- Add the wallet to the `distributor_wallets` if the wallet represents a token distribution wallet (i.e. airdrop distributior, liquidity mining gauge).", "CLOSED", 0, "MSilb7", "2023-04-15T02:21:21Z", "2024-07-10T13:40:50Z", "2024-07-10T13:40:50Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5jfJVB", 53, "[Request for Contribution] OP Contract <> Project Mapping", "There currently is no onchain identification of what contracts belong to which apps. To get around this, we have a system in Dune Spellbook, where we can map contract deployer addresses to project names, and automatically associate any contracts they create.\r\n\r\nThe output of this structure - All known contract <> project mappings is in [this dashboard](https://dune.com/optimismfnd/optimism-contract-lessgreater-project-mappings).\r\n\r\nThis requires manual upkeep. If you notice any missing mappings, you can contribute by:\r\n- Adding a deployer address (address who created the contract) to project name in the [Dune spellbook here](https://github.com/duneanalytics/spellbook/blob/main/models/contracts/optimism/contracts_optimism_contract_creator_address_list.sql). *Note: Since we'll associate of their contracts to a project, check that this mapping appears to be deterministic.*\r\n- Add a one-off label to the contract in the [Dune spellbook here](https://github.com/duneanalytics/spellbook/blob/main/models/contracts/optimism/contracts_optimism_contract_overrides.sql). This is useful for when it's unclear if the deployer address belongs to the project, or other edge cases.", "CLOSED", 0, "MSilb7", "2023-04-15T02:16:55Z", "2024-07-10T13:40:49Z", "2024-07-10T13:40:49Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5jInsk", 47, "[Request for Contribution] OP Rewards - Liquidity Configuration", "The liquidity/TVL tracking for the OP rewards program tracker is controlled by [this input file](https://github.com/ethereum-optimism/op-analytics/blob/main/op_rewards_tracking/inputs/op_incentive_protocols.csv) in `op_rewards_tracking/inputs`.\r\n\r\nAs new programs launch / end / modify, this csv needs to be updated to reflect that. This includes the slug (if Defillama), program name (for joining - if there's a relevant sub-program), the start date & end date, op source, data source, contracts (if via subgraphs), and other fields.\r\n\r\nIf information needs to be updated, you can comment on this issue and/or make a PR to propose updates.", "CLOSED", 0, "MSilb7", "2023-04-11T20:57:47Z", "2024-07-10T13:40:49Z", "2024-07-10T13:40:49Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOI7W0xc5jImPF", 46, "[Request for Contribution] OP Rewards Program Tracking Update", "Notice a program with information that needs to be updated in the [OP Rewards Program Tracker](https://oplabs.notion.site/26d856d5ad7c4fda919c62e839cf6051?v=4e38174b2e994129b51dcfa127965aa4)? Please report it here:\r\n\r\n**Program Name:** *This Should match what's shown on the Tracker*\r\n\r\n**Missing/Updated Information:** *Please share the information that needs to be updated & provide links for proof if possible*", "CLOSED", 0, "MSilb7", "2023-04-11T20:52:37Z", "2024-07-10T13:40:49Z", "2024-07-10T13:40:48Z", "ethereum-optimism/op-analytics", "2025-08-30 16:28:12"]
["I_kwDOH2Qg5s6K_ZRz", 328, "Snap Sync - \"Syncing: state healing in progress\" never ends", "#### System information\r\nop_geth: \"v1.101315.0\"\r\nop_node: \"op-node/v1.7.5\"\r\n\r\n\r\nOS & Version: Linux (Ubuntu:\r\n```\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 22.04.3 LTS\r\nRelease:\t22.04\r\nCodename:\tjammy\r\n```\r\n\r\n#### Expected behaviour\r\nI was expected snap sync to take a few days not weeks or months.\r\n\r\n#### Actual behaviour\r\n\"Syncing: state healing in progress\"  is taking a lot to finish.... Op-geth is running for 7h 34min and it only download `331,784` accounts:\r\n\r\n```\r\nINFO [06-03|19:18:08.821] Syncing: state healing in progress       accounts=331,784@24.57MiB slots=839,671@59.93MiB codes=198@1.28MiB    nodes=19,919,444@6.16GiB pending=14350\r\n```\r\n\r\n#### Steps to reproduce the behaviour\r\nStart nodes with snap sync enabled\r\n\r\nExample of the command for `base mainnet`... for optimism it was used a similar command:\r\n\r\nOp-geth cli:\r\n```\r\n/usr/local/bin/geth \\\r\n    --op-network=base-mainnet \\\r\n    --datadir=/var/lib/base/data \\\r\n    --syncmode=snap \\\r\n    --gcmode=archive \\\r\n    --networkid=\"8453\" \\\r\n    --http \\\r\n    --http.addr=0.0.0.0 \\\r\n    --http.port=8545 \\\r\n    --http.vhosts=\"*\" \\\r\n    --http.corsdomain=\"*\" \\\r\n    --http.api=web3,debug,eth,net,engine,geth \\\r\n    --ws \\\r\n    --ws.port=8546 \\\r\n    --ws.addr=0.0.0.0 \\\r\n    --ws.origins=\"*\" \\\r\n    --ws.api=debug,eth,net,engine \\\r\n    --authrpc.addr=127.0.0.1 \\\r\n    --authrpc.port=8551 \\\r\n    --authrpc.jwtsecret=/var/lib/base/jwt.txt \\\r\n    --authrpc.vhosts=\"*\" \\\r\n    --metrics \\\r\n    --metrics.addr=0.0.0.0 \\\r\n    --metrics.port=6060 \\\r\n    --port=30303 \\\r\n    --discovery.port=30303 \\\r\n    --db.engine=pebble \\\r\n    --state.scheme=hash \\\r\n    --rollup.disabletxpoolgossip=true \\\r\n    --rollup.sequencerhttp=https://mainnet-sequencer.base.org \\\r\n    --rollup.superchain-upgrades \\\r\n    --rollup.halt=major \\\r\n    --verbosity=3\r\n```\r\n\r\n\r\nop-node cli:\r\n```\r\n/usr/local/bin/op-node \\\r\n    --syncmode=execution-layer \\\r\n    --l1.trustrpc \\\r\n    --l1.rpckind=basic \\\r\n    --l1=http://L1_ADDRESS:8545 \\\r\n    --l1.beacon=http://L1_ADDRESS:5052 \\\r\n    --l2=http://127.0.0.1:8551 \\\r\n    --rpc.addr=127.0.0.1 \\\r\n    --rpc.port=9545 \\\r\n    --l2.jwt-secret=/var/lib/base/jwt.txt \\\r\n    --network=base-mainnet \\\r\n    --p2p.peerstore.path=/var/lib/base/data/opnode_peerstore_db \\\r\n    --p2p.priv.path=/var/lib/base/data/opnode_p2p_priv.txt \\\r\n    --p2p.discovery.path=/var/lib/base/data/opnode_discovery_db \\\r\n    --rollup.load-protocol-versions=true \\\r\n    --rollup.halt=major\r\n```\r\n\r\n\r\n#### Logs\r\n\r\nop-geth in optimism mainnet:\r\n```\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.265] Unexpected trienode heal packet          peer=c240164a reqid=7,463,511,122,718,607,702\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.266] Unexpected trienode heal packet          peer=a17f4298 reqid=7,825,150,680,345,553,163\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.266] Unexpected trienode heal packet          peer=b930c42d reqid=6,783,511,754,014,021,662\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.301] Unexpected trienode heal packet          peer=6a241836 reqid=4,357,611,404,741,055,740\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.301] Unexpected trienode heal packet          peer=c3d317d3 reqid=3,000,766,357,146,577,673\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.301] Unexpected trienode heal packet          peer=dc230607 reqid=952,936,897,351,638,830\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.326] Unexpected trienode heal packet          peer=84525520 reqid=1,840,405,469,761,331,709\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.353] Unexpected trienode heal packet          peer=570640a3 reqid=8,746,312,551,116,258,011\r\nJun 03 19:14:29 m-optimism-02 geth[2372795]: WARN [06-03|19:14:29.380] Unexpected trienode heal packet          peer=3e724112 reqid=6,294,787,873,954,858,255\r\nJun 03 19:14:30 m-optimism-02 geth[2372795]: INFO [06-03|19:14:30.244] Syncing: chain download in progress      synced=100.00% chain=216.31GiB headers=120,921,645@47.88GiB bodies=120,921,580@74.58GiB receipts=120,921,580@93.85GiB eta=2m10.660s\r\nJun 03 19:14:31 m-optimism-02 geth[2372795]: INFO [06-03|19:14:31.122] Forkchoice requested sync to new head    number=120,921,647 hash=0a92e3..603727\r\nJun 03 19:14:33 m-optimism-02 geth[2372795]: INFO [06-03|19:14:33.131] Forkchoice requested sync to new head    number=120,921,648 hash=548d82..73986a\r\nJun 03 19:14:35 m-optimism-02 geth[2372795]: INFO [06-03|19:14:35.128] Forkchoice requested sync to new head    number=120,921,649 hash=748a58..1edb9e\r\nJun 03 19:14:37 m-optimism-02 geth[2372795]: INFO [06-03|19:14:37.123] Forkchoice requested sync to new head    number=120,921,650 hash=e8dc71..40386b\r\nJun 03 19:14:37 m-optimism-02 geth[2372795]: INFO [06-03|19:14:37.356] Syncing: state healing in progress       accounts=329,607@24.40MiB slots=838,910@59.87MiB codes=197@1.28MiB    nodes=19,901,084@6.15GiB pending=5601\r\nJun 03 19:14:38 m-optimism-02 geth[2372795]: INFO [06-03|19:14:38.261] Syncing: chain download in progress      synced=100.00% chain=216.31GiB headers=120,921,650@47.88GiB bodies=120,921,580@74.58GiB receipts=120,921,580@93.85GiB eta=2m18.609s\r\nJun 03 19:14:39 m-optimism-02 geth[2372795]: INFO [06-03|19:14:39.128] Forkchoice requested sync to new head    number=120,921,651 hash=371f33..dfa856\r\nJun 03 19:14:41 m-optimism-02 geth[2372795]: INFO [06-03|19:14:41.121] Forkchoice requested sync to new head    number=120,921,652 hash=6bbf3d..4c4b1b\r\nJun 03 19:14:43 m-optimism-02 geth[2372795]: INFO [06-03|19:14:43.123] Forkchoice requested sync to new head    number=120,921,653 hash=562e10..eb932e\r\nJun 03 19:14:45 m-optimism-02 geth[2372795]: INFO [06-03|19:14:45.123] Forkchoice requested sync to new head    number=120,921,654 hash=46816d..eac17d\r\nJun 03 19:14:45 m-optimism-02 geth[2372795]: INFO [06-03|19:14:45.360] Syncing: state healing in progress       accounts=329,607@24.40MiB slots=838,910@59.87MiB codes=197@1.28MiB    nodes=19,901,643@6.15GiB pending=7497\r\nJun 03 19:14:46 m-optimism-02 geth[2372795]: INFO [06-03|19:14:46.272] Syncing: chain download in progress      synced=100.00% chain=216.31GiB headers=120,921,654@47.88GiB bodies=120,921,580@74.58GiB receipts=120,921,580@93.85GiB eta=2m26.562s\r\nJun 03 19:14:47 m-optimism-02 geth[2372795]: INFO [06-03|19:14:47.214] Forkchoice requested sync to new head    number=120,921,655 hash=0e2739..3c3448\r\nJun 03 19:14:49 m-optimism-02 geth[2372795]: INFO [06-03|19:14:49.121] Forkchoice requested sync to new head    number=120,921,656 hash=0fc373..5a45b7\r\nJun 03 19:14:51 m-optimism-02 geth[2372795]: INFO [06-03|19:14:51.128] Forkchoice requested sync to new head    number=120,921,657 hash=dda588..46a80c\r\nJun 03 19:14:53 m-optimism-02 geth[2372795]: INFO [06-03|19:14:53.124] Forkchoice requested sync to new head    number=120,921,658 hash=4288b2..6c469c\r\n```\r\n\r\nop-geth in base mainnet:\r\n```\r\nJun 03 19:14:51 m-base-02 geth[3802696]: INFO [06-03|19:14:51.441] Forkchoice requested sync to new head    number=15,326,372 hash=ed05cf..6d9cfe\r\nJun 03 19:14:53 m-base-02 geth[3802696]: INFO [06-03|19:14:53.005] Syncing: chain download in progress      synced=100.00% chain=127.43GiB headers=15,326,371@6.60GiB bodies=15,326,261@62.24GiB receipts=15,326,261@58.60GiB eta=3m42.068s\r\nJun 03 19:14:53 m-base-02 geth[3802696]: INFO [06-03|19:14:53.524] Forkchoice requested sync to new head    number=15,326,373 hash=e7e087..0347e3\r\nJun 03 19:14:55 m-base-02 geth[3802696]: INFO [06-03|19:14:55.506] Forkchoice requested sync to new head    number=15,326,374 hash=b8bf26..619e4a\r\nJun 03 19:14:57 m-base-02 geth[3802696]: INFO [06-03|19:14:57.732] Forkchoice requested sync to new head    number=15,326,375 hash=f62c14..2dfb20\r\nJun 03 19:14:58 m-base-02 geth[3802696]: INFO [06-03|19:14:58.569] Syncing: state healing in progress       accounts=906,680@56.11MiB slots=2,981,977@219.66MiB codes=6891@41.57MiB nodes=51,574,871@13.36GiB pending=14363\r\nJun 03 19:14:59 m-base-02 geth[3802696]: INFO [06-03|19:14:59.353] Forkchoice requested sync to new head    number=15,326,376 hash=a1bbd4..249ad5\r\nJun 03 19:15:01 m-base-02 geth[3802696]: INFO [06-03|19:15:01.009] Syncing: chain download in progress      synced=100.00% chain=127.43GiB headers=15,326,376@6.60GiB bodies=15,326,261@62.24GiB receipts=15,326,261@58.60GiB eta=3m50.120s\r\nJun 03 19:15:01 m-base-02 geth[3802696]: INFO [06-03|19:15:01.702] Forkchoice requested sync to new head    number=15,326,377 hash=0ec5ad..d1106f\r\nJun 03 19:15:03 m-base-02 geth[3802696]: INFO [06-03|19:15:03.313] Forkchoice requested sync to new head    number=15,326,378 hash=d0034f..0e2825\r\nJun 03 19:15:05 m-base-02 geth[3802696]: INFO [06-03|19:15:05.521] Forkchoice requested sync to new head    number=15,326,379 hash=fa788a..d09e62\r\nJun 03 19:15:06 m-base-02 geth[3802696]: INFO [06-03|19:15:06.586] Syncing: state healing in progress       accounts=907,055@56.14MiB slots=2,982,463@219.70MiB codes=6891@41.57MiB nodes=51,577,805@13.36GiB pending=13974\r\nJun 03 19:15:07 m-base-02 geth[3802696]: INFO [06-03|19:15:07.309] Forkchoice requested sync to new head    number=15,326,380 hash=2b05ce..540f18\r\nJun 03 19:15:09 m-base-02 geth[3802696]: INFO [06-03|19:15:09.013] Syncing: chain download in progress      synced=100.00% chain=127.43GiB headers=15,326,380@6.60GiB bodies=15,326,261@62.24GiB receipts=15,326,261@58.60GiB eta=3m58.176s\r\nJun 03 19:15:09 m-base-02 geth[3802696]: INFO [06-03|19:15:09.439] Forkchoice requested sync to new head    number=15,326,381 hash=c86691..3bc202\r\nJun 03 19:15:11 m-base-02 geth[3802696]: INFO [06-03|19:15:11.433] Forkchoice requested sync to new head    number=15,326,382 hash=c4bc96..4b3011\r\nJun 03 19:15:13 m-base-02 geth[3802696]: INFO [06-03|19:15:13.361] Forkchoice requested sync to new head    number=15,326,383 hash=71e329..1c1abe\r\nJun 03 19:15:14 m-base-02 geth[3802696]: INFO [06-03|19:15:14.696] Syncing: state healing in progress       accounts=907,337@56.15MiB slots=2,983,027@219.74MiB codes=6894@41.58MiB nodes=51,581,046@13.36GiB pending=14710\r\nJun 03 19:15:14 m-base-02 geth[3802696]: WARN [06-03|19:15:14.894] Pivot seemingly stale, moving            old=15,326,262 new=15,326,319\r\nJun 03 19:15:15 m-base-02 geth[3802696]: INFO [06-03|19:15:15.223] Syncing: state healing in progress       accounts=907,343@56.16MiB slots=2,983,059@219.74MiB codes=6894@41.58MiB nodes=51,581,251@13.36GiB pending=14828\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.238] Unexpected trienode heal packet          peer=d2308a34 reqid=1,285,784,775,404,610,008\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.242] Unexpected trienode heal packet          peer=b5ae8a65 reqid=2,893,195,299,212,542,727\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.248] Unexpected trienode heal packet          peer=f2be8fb2 reqid=8,598,187,639,251,733,829\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.251] Unexpected trienode heal packet          peer=1c176021 reqid=336,205,833,007,489,592\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.256] Unexpected trienode heal packet          peer=25109c23 reqid=4,523,216,003,359,259,572\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.260] Unexpected trienode heal packet          peer=6e1963b4 reqid=7,993,713,479,880,516,988\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.266] Unexpected trienode heal packet          peer=03d4fc22 reqid=5,832,566,645,314,874,925\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.266] Unexpected trienode heal packet          peer=6ab3c255 reqid=6,332,110,799,182,848,106\r\nJun 03 19:15:15 m-base-02 geth[3802696]: WARN [06-03|19:15:15.267] Unexpected trienode heal packet          peer=73384605 reqid=68,074,781,591,380,592\r\n```\r\n", "CLOSED", 0, "andreclaro", "2024-06-03T19:22:52Z", "2024-07-18T15:04:16Z", "2024-06-05T06:59:43Z", "ethereum-optimism/op-geth", "2025-08-30 17:30:06"]
["I_kwDOJ_r-bs6Ps_ui", 390, "Make sure downstream software reads `block_time` and `seq_window_size`", "Currently these fields are being ignored / default values are being used downstream. ", "CLOSED", 0, "geoknee", "2024-07-16T11:47:57Z", "2024-07-19T17:02:32Z", "2024-07-18T15:47:15Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6PIOSL", 379, "Add `genesis-diff` tool", "Similar to the `rollup-config-diff` github action, we should create a `genesis-diff` github action that will detect changes being introduced by new prs", "CLOSED", 0, "bitwiseguy", "2024-07-10T17:19:37Z", "2024-07-19T17:02:32Z", "2024-07-10T17:20:07Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6PFORl", 375, "validation: validate batch submissions are frequent enough", "This check would work as follows: \r\n\r\nFor each standard or standard candidate chain:\r\nWalk back through every L1 transaction in every L1 block until we find a batch submission tx from that chain. If we hit 1800 blocks first, the chain fails the check. \r\n\r\nSee this spec https://specs.optimism.io/protocol/configurability.html?highlight=op%20stack#policy-parameters\r\n\r\nDifficulties:\r\nThis could be very slow (5-10 minutes) and would likely not work on \u201cfree\u201d RPC endpoints.  It would take even longer if we wanted to scan all the way back to the chains genesis. We would want to deduplicate the work querying for L1 blocks (same blocks for many L2 chains). ", "CLOSED", 0, "geoknee", "2024-07-10T11:29:41Z", "2024-07-19T17:02:31Z", "2024-07-11T11:18:19Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6PFER-", 374, "validation: track and validate sequencing window", "We do not store it in the superchain-registry at all at present, and actually override it when we load the config into op-node https://github.com/ethereum-optimism/optimism/blob/0df06759e7e4510ae3a0b027b74fa8f5cad00ed7/op-node/rollup/superchain.go#L80 (meaning it will take the value 3600 if a node is started using the \u201cnetwork flags\u201d)\r\n\r\nOne path forward is to:\r\n1. not override it\r\n2. store it in the registry, and modify op-node to read it from there\r\n3. write a validation check to ensure it is 12 hours or 3600 (need to decide what should be standard)\r\n\r\nNote that I don't think we will be able to detect any drift in this value if it is modified after the chain is inserted into the registry (and it is easily spoofed since there is no on chain check). \r\n", "CLOSED", 0, "geoknee", "2024-07-10T11:12:32Z", "2024-07-19T17:02:31Z", "2024-07-15T21:58:34Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6NuA_W", 333, "Remove MCP contract tag from standard-versions.toml and exclude legacy standard candidate chains", "The requirement from the standard config is the \"latest tagged versions\" of the contracts, which is currently `op-contracts/v1.4.0` (Fault Proofs).\r\n\r\nLegacy chains (essentially any chain currently in the registry which is a standard candidate) can be excluded from contract version checking until they become standard.", "CLOSED", 0, "geoknee", "2024-06-27T09:31:43Z", "2024-07-19T17:02:31Z", "2024-07-15T21:58:33Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6NmjnL", 331, "Remove semver.yaml, implementations dir and related code", "First we need to confirm this won't adversely affect downstream packages. ", "CLOSED", 0, "geoknee", "2024-06-26T15:45:20Z", "2024-07-19T17:02:30Z", "2024-07-08T13:29:27Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6NCKrN", 304, "Remove `sh` -> `go` indirection", "              This seems like an unnecessary indirection to me. I'd vote for calling the go script directly\r\n\r\n_Originally posted by @bitwiseguy in https://github.com/ethereum-optimism/superchain-registry/pull/279#discussion_r1647992680_\r\n            ", "CLOSED", 0, "geoknee", "2024-06-21T09:44:45Z", "2024-07-19T13:07:02Z", "2024-07-19T13:07:02Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6M-oSD", 301, "validation: Use \"Fault Proof\" terminology instead of FPAC", "", "CLOSED", 0, "geoknee", "2024-06-20T20:40:33Z", "2024-07-19T17:02:30Z", "2024-07-02T18:37:20Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6MsDvC", 295, "Use blockspace charter terminology in place of \"standard config\" terminology", "\r\n\r\nAnd link from the readme to any BC material.\r\n\r\nhttps://gov.optimism.io/t/season-6-introducing-blockspace-charters-superchain-first-governance/8133\r\n\r\n> The set of validation declaration files we have defines the first blockspace charter (standard rollup charter). These are [some TOML files at present,](https://github.com/ethereum-optimism/superchain-registry/blob/main/validation/standard/standard-config-mainnet.toml) and I think it would nice if we think of those as the specification of the charter from the validation point of view.", "CLOSED", 0, "geoknee", "2024-06-18T17:28:58Z", "2024-07-19T17:02:30Z", "2024-07-10T14:11:47Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mn61W", 280, "validation: remove dependency on `op-bindings`", "These have actually been removed from the monorepo, so depending on them blocks us from updating the `validation->optimism` dependency.\r\n\r\nWe can move bindings that we need into the `validation` package itself, or adopt a more lightweight \"cast call\" approach to scraping data from chain. ", "CLOSED", 0, "geoknee", "2024-06-18T08:30:40Z", "2024-07-19T17:02:27Z", "2024-07-08T20:15:33Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mr3Uk", 288, "SuperchainRegistry: organise and highlight critical CI checks to prevent them from being bypassed.", "Some of the CI checks in the registry are particularly important, providing protection for downstream packages `op-geth` and `op-node`.  We should add code comments or otherwise make it clear that these tests should never be skipped, not even to make a special case for a new chain being added.\r\n\r\nWe might want to remove this exclusion and bake in the necessary override to the registry:\r\nhttps://github.com/ethereum-optimism/superchain-registry/blob/d8902381f5d8f5802946851357f987d3dcd60395/validation/superchain-genesis_test.go#L40-L42\r\n\r\n\r\nhttps://www.notion.so/oplabs/Superchain-Registry-Failure-Modes-and-Recovery-Path-Analysis-f863f6e4e4bb49a5894f43d404319d8c?pvs=4#95d9994b78034bcc8ab7cf0408635163\r\n\r\n", "CLOSED", 0, "geoknee", "2024-06-14T11:59:00Z", "2024-07-19T17:02:28Z", "2024-07-02T13:43:10Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mr2vp", 285, "SuperchainRegistry: modify repo structure", "We need a compromise between the current structure, and the one[ suggested in the PRD. ](https://docs.google.com/document/d/13nFUdxksND4BzxRA-OdO6DpL888umoVgy56HikMsNW8/edit#heading=h.emx3tkspnffk)\n\nThis is because:\n*  The repo already has some of the structures that the proposal has, with slightly different names etc.\n*  We are constrained somewhat by what Go allows us to do (in terms of embedding files and so on)\n* Some level of nesting is perhaps still desired, since we would like to keep the various superchains (mainnet, sepolia, sepoilia-dev-0) separate \n\nHere is my proposal: \n* Combine \"addresses\" and \"genesis-system-configs\" with top level config file.\n*  Use TOML instead of yaml and json. \n* rename \"configs\" to \"chains\"\n\n\nWe should do this before early access launch, because after that we expect more chains to be added and it will be good to do this while things are quiet. We may want to close or merge any open PRs before doing this.", "CLOSED", 0, "geoknee", "2024-06-07T16:25:04Z", "2024-07-19T17:02:27Z", "2024-07-17T19:44:53Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mr3Kh", 287, "SuperchainRegistry: Reinsert temporarily removed conduit chains to the registry", "Potted context is as follows:\r\n\r\n- When a chain is added to the superchain-registry, hardfork times are scraped from rollup.json.\r\n- When the superchain-registry configs are pulled into op-node, the hardfork times need to be correct or else nodes which start up using the op-network will fork off.\r\n- Incorrect hardfork times in the registry can also result in a validation check on the genesis block failing.\r\n- We know that the hardfork times for mainnet/superlumio and sepolia/metal are incorrect because this check was failing\r\n- Hardfork times can be queried from a running op-node https://docs.optimism.io/builders/node-operators/json-rpc#optimism_rollupconfig\r\n\r\nFrom what I can gather from when conduit make this query it returns hardfork times which still appear to be incorrect.\r\n\r\nhttps://github.com/ethereum-optimism/superchain-registry/pull/243", "CLOSED", 0, "geoknee", "2024-05-23T13:46:42Z", "2024-07-19T17:02:28Z", "2024-07-16T16:27:31Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mr3dQ", 289, "Clarify and improve superchain registry semver validations", "Originally from https://github.com/ethereum-optimism/superchain-registry/pull/248#discussion_r1606791275:\r\n\r\n> @mds1: I still don't (and never fully did) understand the difference between this and `semver.yaml`.  In this [notion doc](https://www.notion.so/oplabs/Smart-Contract-Release-Planning-a51c1ab2413949f3a0513e42b80c0061?pvs=4) we recently defined a mapping from `op-contracts/vX.Y.Z` release to the expected semvers for each contract. Ultimately, the verification we should be doing in the superchain registry is making sure a chain's contracts is on one of those `op-contracts` tags, as determined by the semvers (and bytecode validation, since a contract can lie about its semver).\r\n> \r\n> So what exactly is supposed to be in each of these files that lists contract versions, in relation to the linked version definitions?\r\n> \r\n> > @geoknee: Thanks for raising this, I have also never really understood the role of this file. I think resolving this is very important, but somewhat outside the scope of this PR so if possible would prefer not to block on it.\r\n> > \r\n> > The document you linked is very clear and I would be happy to overhaul the validation checks and declaration files have in the registry to match it. \r\n> > \r\n> > Proposal:\r\n> > * `semver.yaml` -> `standard-contract-versions.toml` (or some better name), with now encodes the mapping from monorepo tags to a list of (contract,version) pairs as described in your doc. Lives next to the standard config toml files in the `validation` module, we no longer export that information from `superchain`. \r\n> > * validation check ensures each chain has a set of contract versions which _exactly match_ 1:1 to at least one monorepo tag mapping entry in the above file. From what I can tell this can be just a dumb string equality check, since the versions are not true semantic versions and we won't do any true semantic version comparisons.\r\n> > * bytecode validation is something which is not yet in scope for the superchain registry checks but we are looking at pulling that in to scope.\r\n> > \r\n> > The \"implementations\" yaml files are currently not referenced by any validation check in this repo. They are referenced in one place in  `op-chain-ops` https://github.com/ethereum-optimism/optimism/blob/69bb36c9ba95705cc730d1e145501a510c448775/op-chain-ops/cmd/op-upgrade/main.go#L226-L246 . You might be better placed than me to suggest how we tidy that up, I would be infavour of reducing complexity if at all possible.\r\n\r\ncc @tynes who might have insight into the original intent which would be useful for informing how to best clean this up", "CLOSED", 0, "mds1", "2024-05-21T15:12:37Z", "2024-07-19T17:02:29Z", "2024-06-26T15:47:00Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6HwpSt", 222, "Update add-chain script to support chains with fault proofs", "Currently the add-chain go module expects a single, rigid list of contract names/addresses in the `monorepo/deployments/.deploy` input file. Chains with fault proofs will have a different set of contracts: L2OO will be absent and others (e.g. Dispute Game Factory) will be present. The add-chain script should support these types of chains in addition to chains without fault proofs. The `add-chain/e2e_test.go` setup will need to be modified to test multiple types of chains and input formats.\r\n\r\nReference for a chain with fault proofs: [link](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/extra/addresses/sepolia/op.json)\r\n\r\n**Additional Context**\r\n\r\n* [Github thread](https://github.com/ethereum-optimism/superchain-registry/pull/204#discussion_r1587855333)\r\n\r\n", "CLOSED", 0, "bitwiseguy", "2024-05-03T13:22:47Z", "2024-07-19T17:02:27Z", "2024-06-24T17:33:09Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mr24i", 286, "SuperchainRegistry: test read and write preserves `genesis.json` and `rollup.json` data semantics", "We would like to enhance the `add-chain` tool to ensure:\n* the tooling used by the registry to write compressed genesis information (i.e. `registry-data` tool in `op-chain-ops`)\n* the tooling used to uncompress and rehydrate the genesis information (i.e. this invocation in `op-geth` https://github.com/ethereum-optimism/op-geth/blob/22bc5d43dee668bddb5b2df75103b3fdc20af4f8/cmd/utils/flags.go#L2215)\n\nboth work well enough to perfectly reproduce the input data (which is a raw `genesis.json` file and `rollup.json` file)\n\nFor more context see https://www.notion.so/oplabs/Superchain-Genesis-Hash-checks-60e173e9fb0c43e88a81d0666cb3d582 ", "CLOSED", 0, "geoknee", "2024-05-02T21:35:04Z", "2024-07-19T17:02:28Z", "2024-07-09T17:05:00Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mr4cz", 292, "SuperchainRegistry: establish pattern for reading data from chains with different contract deployments", "This will be useful anywhere we are reading data from chain, including in the script which adds new chains and also in the validation suite.\r\n\r\nThis could be a set of shared helper functions or data structures. It should be architected such that it as easy as possible to maintain when new contract sets are released and used.\r\n", "CLOSED", 0, "geoknee", "2024-05-02T21:05:38Z", "2024-07-19T17:02:29Z", "2024-07-08T15:45:01Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Mr5-r", 293, "SuperchainRegistry: increase validation coverage of standard config `parameters` to 100%", "~This relies on the full config (defined here in the specs https://specs.optimism.io/protocol/configurability.html?highlight=standard#op-stack-configurability)  being added to `standard-config-mainnet.toml` (and similar files for testnets and frontier chains).~\n\nThe strategy will be to add each config parameter and a validation check that covers it, proceeding line by line until all parameters are in place and covered. \n\nEach parameter should be subject to a validation check.\n\n\n\nValidation checks written for {Standard/Frontier} x {Mainnet, Testnet} chains, with minimal chain-specific exceptions . Covers all parameters in the standard config and copes with all supported contract versions and hardforks.\n\nThis may be easier to tackle if we do ethereum-optimism/superchain-registry#294 first, or else we can do a refactor after it is all done to tidy things up.  (Where possible, testing code should be deduplicated and refactored for maximum legibility. )\n\nEdit: this ticket only covers \"consensus parameters\" and \"policy parameters\" from this doc https://www.notion.so/oplabs/OP-Stack-Configurability-from-a-SuperchainRegistry-validation-POV-9c335a936007456b89777f5a84fba58d\n\nThe remaining checks are covered by this ticket ethereum-optimism/client-pod#913 ", "CLOSED", 0, "geoknee", "2024-05-02T20:59:05Z", "2024-07-19T17:02:29Z", "2024-06-26T15:57:05Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6HqXIa", 219, "Install proper branching logic for chains running Fault Proof versions of the contracts", "For instance, such chains do not have an L2OutputOracle. \r\n\r\n\r\nFrom @mds1 in slack: \r\n\r\n> I think in the [standard config] toml we can have the values for both L2OO and FP, but then in the go checks, the very first thing we do is figure out what version of the protocol they are using (based on the release -> semver mapping I'll come up with), then we run checks conditionally based on that", "CLOSED", 0, "geoknee", "2024-05-02T16:59:54Z", "2024-07-19T17:02:26Z", "2024-06-24T15:16:34Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Hpgc4", 217, "prevent 429 too many requests in validation checks", "We have some retry logic in place already, but it is scattered around and probably wants consolidating and the number of retries increasing. Also possible to use \"better\" endpoints (ones which at least authenticate).\r\n\r\nhttps://oplabs-pbc.slack.com/archives/C03N11M0BBN/p1714663021791559?thread_ts=1714662604.198199&cid=C03N11M0BBN", "CLOSED", 0, "geoknee", "2024-05-02T15:18:58Z", "2024-07-19T17:02:26Z", "2024-05-07T13:37:19Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6HNYln", 213, "Update `finalizationPeriodSeconds` in standard config toml files", "              `finalizationPeriodSeconds` on Sepolia is an obvious place to look next. I suspect being strict about `12` is not what we want to do.\r\n\r\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/superchain-registry/pull/208#discussion_r1580090585_\r\n\r\nWe should be referencing the specs here: https://specs.optimism.io/protocol/configurability.html?highlight=standard%20config#consensus-parameters\r\n            ", "CLOSED", 0, "geoknee", "2024-04-29T08:31:38Z", "2024-07-19T17:02:26Z", "2024-07-08T15:46:10Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6GLT4n", 194, "Align standard-config TOML file with specs", "              once https://github.com/ethereum-optimism/specs/pull/134 is merged, we should revisit this file to ensure everything matches\r\n\r\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/superchain-registry/pull/188#discussion_r1569445625_\r\n            ", "CLOSED", 0, "geoknee", "2024-04-18T16:29:47Z", "2024-07-19T17:02:26Z", "2024-06-24T15:14:57Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6GBOEd", 187, "Superchain GitOps - ENG implementation scoping", "We want to use this issue to track our ENG scoping work for Superchain Registry implementation \n\nCurrent ideas of the things we should cover in this implementation are, but @geoknee will extend a list in the new implementation epic we will create to track all the work:\n\n- [x] complete the set of validation checks to cover everything we care about (standard config etc)\n- [x] make test input and output easier to consume by humans and machines (e.g. future OPBeat)\n- [x] safeguard critical downstream dependencies from bloat and bugs\n- [x] pay down existing tech debt in the registry, including skipped validation checks\n\nGood docs to read while working on scoping:\n- Superchain-GitOps-Milestones: https://www.notion.so/oplabs/Superchain-GitOps-Milestones-711ee6fb0f414398a939fe32a72f40da?pvs=4\n- PRD] Superchain Registry: https://docs.google.com/document/d/13nFUdxksND4BzxRA-OdO6DpL888umoVgy56HikMsNW8/edit?usp=sharing ", "CLOSED", 0, "BlocksOnAChain", "2024-04-17T14:39:00Z", "2024-07-19T17:02:25Z", "2024-05-13T15:48:59Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6Fm8Vd", 179, "Restore `sepolia-dev-0` implementations mapping entry", "              CI did fail, but IDK if it's the related or not. I'm fine with this change as long as we document that it's the L1 chain ID & track that we need to re-enable this check at a later point.\r\n\r\n_Originally posted by @trianglesphere in https://github.com/ethereum-optimism/superchain-registry/issues/172#issuecomment-2050722841_\r\n            \r\n\r\n\r\nThe implementations mapping should be updated so it is keyed by superchain target name. Downstream dependencies will need to be updated to adapt to that (breaking change). ", "CLOSED", 0, "geoknee", "2024-04-13T14:11:20Z", "2024-07-19T17:02:25Z", "2024-04-18T15:35:49Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs6FkrZM", 178, "fix: avoid skipping checks for conduit chains", "From https://github.com/ethereum-optimism/superchain-registry/pull/107#pullrequestreview-1998488407\r\n\r\n> Approving and merging this PR, but we'll later need to investigate the Genesis test failures that are currently being skipped for Metal Sepolia, Metal Mainnet, and Superlumio Mainnet\r\n> \r\n> We also are skipping the L2OO tests for those chains + Mode Sepolia, and should confirm that's ok.", "CLOSED", 0, "mds1", "2024-04-12T21:44:45Z", "2024-07-19T17:02:25Z", "2024-05-16T17:04:10Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDOJ_r-bs5_HxzQ", 93, "feat: Standardize configs on a single format", "## Overview\r\n\r\nCurrently, we have multiple file formats in the superchain registry for configurations, which is unnecessary. This makes it more difficult to pull in the `superchain-registry` as a dependency while reading the raw files, without a wrapper [like the Golang one](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/superchain.go#L108-L131). It's also very awkward to write bindings for the `superchain-registry` because of this - in Rust, for example, needing to support `YAML` + `JSON` requires two crate dependencies.\r\n\r\nWe should standardize on a single file format.", "CLOSED", 0, "clabby", "2024-02-13T16:41:19Z", "2024-07-19T13:08:36Z", "2024-07-19T13:08:36Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:30:29"]
["I_kwDODjvEJM6Pi9pb", 11149, "Resolve discrepancy between on-chain and off-chain `elasticity_multiplier` values.", "## Off chain\r\nop-geth uses a static elasticity multiplier set in the chain config. See [here](https://github.com/ethereum-optimism/op-geth/blob/c6ea6fa09d4e7df6d1ca6b2d32bcb139f021b1e2/consensus/misc/eip1559/eip1559.go#L58-L66) and [here](https://github.com/ethereum-optimism/op-geth/blob/2306a368d2e30cdc10570b202af5bbf6143e4069/params/config.go#L911-L917). \r\n\r\n[This value is currently hardcoded to `6`. ](https://github.com/ethereum-optimism/op-geth/blob/c6ea6fa09d4e7df6d1ca6b2d32bcb139f021b1e2/params/superchain.go#L77-L78)\r\n\r\n## On chain\r\nWe also store an `elasticityMultiplier` inside the `ResourceConfig` struct:\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/d510910381d99660295f99e4eccd553df5829df6/packages/contracts-bedrock/src/L1/ResourceMetering.sol#L45-L49\r\n\r\nin the `SytemConfig` contract:\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/d510910381d99660295f99e4eccd553df5829df6/packages/contracts-bedrock/src/L1/SystemConfig.sol#L114-L118\r\n\r\nOn OP Mainnet, the parameter is actually set to 10. See[ this etherscan link.](https://etherscan.io/address/0x229047fed2591dbec1eF1118d64F7aF3dB9EB290#readProxyContract). I believe this is a historical / out-of-date value. \r\n\r\nMoreover, we are actually reading and validating this parameter in the superchain registry (see[ here](https://github.com/ethereum-optimism/superchain-registry/blob/915834745c49b2194049438d8782895666da7eab/validation/standard/standard-config-params-mainnet.toml#L8)), since [we have specified that `10` is the standard value.](https://specs.optimism.io/protocol/configurability.html?highlight=op%20stack#resource-config)\r\n\r\nFrom what I can tell this parameter is _not_ being read by the off-chain software. Here's a hint that this was once the plan: \r\nhttps://github.com/ethereum-optimism/optimism/blob/d510910381d99660295f99e4eccd553df5829df6/packages/contracts-bedrock/src/L1/SystemConfig.sol#L439-L444\r\n\r\nI propose that we should either:\r\n1. Complete that plan so that the elasticity parameter can be changed on chain and picked up off chain\r\n2. Remove the on chain parameter in the next contracts release to prevent confusion.\r\n\r\n\r\n\r\n\r\n", "CLOSED", 0, "geoknee", "2024-07-15T09:44:02Z", "2024-07-15T17:32:13Z", "2024-07-15T17:31:59Z", "ethereum-optimism/optimism", "2025-08-30 17:30:35"]
["I_kwDODjvEJM6PgO6P", 11146, "Optimism build gets stuck and then fails", "I'm trying to build the Optimism repo on a Digital Ocean droplet (2 vCPUs 4GB / 50GB Disk) and the build gets stuck and then returns an error.\r\n\r\nIs my machine not powerful enough, or is there another reason?\r\n\r\nThis is the stage I get stuck at:\r\n\r\n>  NX   Running target build for 8 projects\r\n\r\n    \u2192    Executing 1/6 remaining tasks...\r\n \r\n    \u283c    nx run @eth-optimism/contracts-bedrock:build\r\n \r\n    \u2714    2/2 succeeded [2 read from cache]\r\n\r\n\r\nThis is the error I got after a while:\r\n>  NX   Ran target build for 8 projects (15m)\r\n \r\n    \u2714    2/3 succeeded [2 read from cache]\r\n \r\n    \u2716    1/3 targets failed, including the following:\r\n         - nx run @eth-optimism/contracts-bedrock:build\r\n \r\n   View structured, searchable error logs at https://nx.app/runs/Unk4kZMGDH\r\n\r\n\u2009ELIFECYCLE\u2009 Command failed with exit code 1.\r\n    \r\n   \r\n   ", "CLOSED", 0, "ntegrals", "2024-07-14T20:50:13Z", "2024-07-15T17:08:43Z", "2024-07-15T17:08:43Z", "ethereum-optimism/optimism", "2025-08-30 17:30:35"]
["I_kwDODjvEJM6PH9oi", 11128, "`reentrantAware` modifier is not used.", "`reentrantAware` modifier is present here but does not actually do anything.\r\n\r\nI suggest changing to a regular transient reentrant protection.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/69d2d47b0f4ea0a41905b0ef52f3fa343ea7633e/packages/contracts-bedrock/src/L2/CrossL2Inbox.sol#L115", "CLOSED", 0, "pegahcarter", "2024-07-10T16:43:01Z", "2024-07-15T20:46:02Z", "2024-07-15T20:46:02Z", "ethereum-optimism/optimism", "2025-08-30 17:30:35"]
["I_kwDODjvEJM6PH8Rl", 11127, "Design motivation for reverting views?", "Quick question: what is the design motivation for creating reverting reviews over views that return null values?\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/69d2d47b0f4ea0a41905b0ef52f3fa343ea7633e/packages/contracts-bedrock/src/L2/CrossL2Inbox.sol#L74", "CLOSED", 0, "pegahcarter", "2024-07-10T16:39:38Z", "2024-07-15T14:20:25Z", "2024-07-15T14:20:25Z", "ethereum-optimism/optimism", "2025-08-30 17:30:35"]
["I_kwDODjvEJM6OhvVg", 11081, "arm64 docker images contain x86 executables", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nThe linux/arm64 docker images for op-node:v1.7.7 and op-node:1.7.6 contain x86 binaries:\r\n- v1.7.7: https://console.cloud.google.com/artifacts/docker/oplabs-tools-artifacts/us/images/op-node/sha256:cb55d3d031c4596a80d94928eec18a8779bb6608e1a4e3c2f39e84d162c4a086\r\n- v1.7.6: https://console.cloud.google.com/artifacts/docker/oplabs-tools-artifacts/us/images/op-node/sha256:a1029357658a3401970883a30f8789d47e66cb0eb841ac872146403959ca15c8\r\n\r\n**Steps to Reproduce**\r\n\r\nOn a linux/arm64 machine:\r\n1. Pull https://us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.7.7\r\n2. Run `docker images` to get the Image ID:\r\n   ```\r\n   REPOSITORY                                                TAG           IMAGE ID       CREATED        SIZE\r\n   us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node   v1.7.7        2519527b9baa   3 weeks ago    68.9MB\r\n   ```\r\n3. Run `docker image inspect <IMAGE_ID>` to confirm the linux/arm64 image was pulled\r\n   ```\r\n   ...\r\n        \"Architecture\": \"arm64\",\r\n        \"Os\": \"linux\",\r\n   ...\r\n   ```\r\n4. Launch a container of the image with shell: `docker run --rm -it <IMAGE_ID> sh`\r\n5. Running `op-node` will give the following, which is an indication of mismatching arch:\r\n   ```\r\n   /usr/local/bin/op-node: line 5: syntax error: unexpected word (expecting \")\")\r\n   ```\r\n6. Install `file` and run `file /usr/local/bin/op-node` confirms that the binary is x86:\r\n   ```\r\n   /usr/local/bin/op-node: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-x86_64.so.1, Go BuildID=8I1oiant_j9Oqp1IHafV/JODLNTMItMr0Ybxl5gKM/VHCHL6QTtgs_8EdG5kkx/akTeCPB0-t1x5AWSHI21, with debug_info, not stripped\r\n   ```\r\n\r\n**Expected behavior**\r\nExpected `op-node` binary to be arm64.\r\n\r\n**Environment Information:**\r\n - Operating System: Alpine Linux v3.18 (for the op-node v1.7.7 docker image)\r\n - Package Version (or commit hash): op-node v1.7.7 and v1.7.6\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "timweri", "2024-07-04T16:48:45Z", "2024-07-19T19:34:17Z", "2024-07-19T19:34:17Z", "ethereum-optimism/optimism", "2025-08-30 17:30:35"]
["I_kwDODjvEJM6IA3PG", 10428, "fjord: Use new large RLP limit in the batcher", "Right now we use the parameter `SafeMaxRLPBytesPerChannel` throughout the op-node channel building & op-batcher. We should remove this constant and use the chain spec instead. The specific timestamp to use is the timestamp of the L1 origin of the newest L2 block in the channel. Technically in derivation the new limit will be applied for channels that get processed after the L1 origin of the CB is past the activation time.", "CLOSED", 0, "trianglesphere", "2024-05-06T22:59:44Z", "2024-07-21T22:53:35Z", "2024-07-21T22:53:34Z", "ethereum-optimism/optimism", "2025-08-30 17:30:35"]
["I_kwDOKIsnqM6EZF9u", 120, "Add prehook for tasks/eth/006-MCP-L1", "context: https://github.com/ethereum-optimism/superchain-ops/pull/119#discussion_r1546714813\r\n\r\nThe pre hook would be the cheatcode for starting state diff recording then the post hook would stop and return the state diffs.", "CLOSED", 0, "0xfuturistic", "2024-04-02T18:33:10Z", "2024-07-18T11:47:03Z", "2024-07-18T11:47:02Z", "ethereum-optimism/superchain-ops", "2025-08-30 17:30:37"]
["I_kwDOMMiGhs6PTlWo", 46, "Initial Readme", "We need an initial readme with the following, that we can build off of as we add features:\r\n\r\n- [ ] overview\r\n- [ ]  getting started: how to download and try out the current code\r\n\r\nAs we proceed, we can add instructions and information about each piece of functionality. ", "CLOSED", 0, "fainashalts", "2024-07-11T22:35:45Z", "2024-07-16T20:36:38Z", "2024-07-16T20:36:38Z", "ethereum-optimism/supersim", "2025-08-30 17:32:13"]
["I_kwDOMMiGhs6Ne3bx", 25, "orchestrator: fork mode", "A follow up from #6 that implements the fork mode.\n\n1. Add superchain registry as a dependency\n2. Validate the fork configuration supplied from the user\n3. From the L1 height, find the latest L2 heights for all specified networks\n4. Skip any genesis application as remote state already has required contracts.\n5. Forward fork information to each anvil instance", "CLOSED", 0, "hamdiallam", "2024-06-25T21:19:06Z", "2024-07-17T16:16:27Z", "2024-07-17T16:16:27Z", "ethereum-optimism/supersim", "2025-08-30 17:32:13"]
["I_kwDOMMiGhs6NW1L_", 20, "orchestrator: fork state finder", "In order to work for forking, `orchestrator`'s l2-fork-state-finder` must acquire the L1 reference block at time of forking, and use that to determine the L2 block height and apply it to the relevant L2 instances.\r\n\r\n**Definition of Done**\r\n`orchestrator` is able to determine L2 block height and apply it to the L2 Anvil instances it spins up. ", "CLOSED", 0, "fainashalts", "2024-06-25T03:43:24Z", "2024-07-17T16:16:28Z", "2024-07-17T16:16:28Z", "ethereum-optimism/supersim", "2025-08-30 17:32:13"]
["I_kwDOMMiGhs6NWxrq", 17, "op-simulator: intercept `eth_sendRawTransaction`", "Initially, we need to build intercept functionality that identifies the RPC calls we want to intercept and does so before passing them to the Anvil instances.\r\n\r\n**Definition of Done**\r\n`eth_sendRawTransaction` is intercepted by `op-simulator` based on the RPC method being called and is then sent along to the required Anvil instance.", "CLOSED", 0, "fainashalts", "2024-06-25T03:28:40Z", "2024-07-17T23:32:50Z", "2024-07-17T23:32:50Z", "ethereum-optimism/supersim", "2025-08-30 17:32:13"]
["I_kwDOMMiGhs6NViag", 13, "Orchestrator: Add mode selection", "Users will have the option to start up supersim in \"vanilla\" or \"forking\" mode. This initial task is for adding the `--fork` flag. A future task will take the selection of `--fork` and fork the requested chains. For now, when a user indicates they wish to use `--fork` we should save that information in the orchestrator but still just spin up vanilla chains. \r\n\r\n**Definition of Done**\r\nWhen a user adds `--fork` upon starting supersim, that information is saved in orchestrator. Though it begins the local instances in vanilla mode, it is now equipped to check whether a user has indicated a desire to use forking mode. ", "CLOSED", 0, "fainashalts", "2024-06-24T22:44:47Z", "2024-07-17T16:06:18Z", "2024-07-17T16:06:16Z", "ethereum-optimism/supersim", "2025-08-30 17:32:13"]
["I_kwDOMMiGhs6NTDjc", 2, "Unit Tests for e2e", "In order to build Supersim in a collaborative and test-driven way, we need a set of tests against which to build the tool. This test suite should cover the following test cases for Supersim (where appropriate, tests should be broken down by service): \r\n\r\n- [ ] `test_environment_initialization`: It should verify that multiple Anvil instances can be started and configured correctly.\r\n- [ ] `test_genesis_state`: It should pre-deploy all smart contracts needed for testing interoperable optimism chains, when run in vanilla mode.\r\n- [ ] `test_genesis_state_fork`: It should update the genesis state for forked chains to ensure all smart contracts needed for testing interoperability are present.\r\n- [ ] `test_cross_chain_message_passing`: It should ensure that messages can be sent and received between different L2 chains running locally. \r\n- [ ] `test_invariants`: It should check for interop message invariants and fail if they are not met\r\n- [ ] `test_timestamp_invariant`: It should fail if the timestamp at the time of inclusion of the executing message is less than the timestamp of the initiating message.\r\n- [ ] `test_chainID_invariant`: It should fail if the initiating message is not in the dependency set. \r\n- [ ] `test_message_expiry_invariant`: It should fail if the timestamp at the time of inclusion of the executing message is higher than the initiating message timestamp.\r\n- [ ] `test_message_relaying`: It should ensure that messages can be \u201csent\u201d and \u201creceived\u201d between different L2 instances. \r\n- [ ] `test_initiating_message`: It should log an event when an initiating message from the source chain is created.\r\n- [ ] `test_destination_receipt`: It should ensure that destination chain can ingest source chain message`.\r\n- [ ] `test_destination_execution`: It should fire an executing message after confirming the source initiating message.\r\n- [ ] `test_cross_chain_erc20_asset_transfers`: ensures that erc20\u2019s can be transferred between chains. (The exact implementation on this is still TBD (see [this doc](https://www.notion.so/oplabs/Mirror-superc20-idea-5fa1d3b139e344bdbb4a86ce5f636b13&sa=D&source=docs&ust=1718736334304945&usg=AOvVaw2qCkqLdAfI4t0tp5ThVOhM)), so this may be out of scope for the initial set of tests.)\r\n\r\n\r\nThe above is a minimal set of tests for the Supersim MVP. Additional tests may be needed, and can be added as part of a PR closing this issue, or in subsequent PRs as needed.\r\n\r\n**Definition of Done**\r\nA contributor to Supersim can run the tests above to test the progress of the Supersim project. ", "CLOSED", 0, "fainashalts", "2024-06-24T15:52:08Z", "2024-07-17T16:04:46Z", "2024-07-17T16:04:46Z", "ethereum-optimism/supersim", "2025-08-30 17:32:13"]
["I_kwDOKIwiaM6Qg4_E", 798, "[DOCS] Improve blob configuration after ecotone upgrade", "", "CLOSED", 0, "siddharth0a", "2024-07-23T08:04:06Z", "2024-07-24T06:36:48Z", "2024-07-24T06:36:48Z", "ethereum-optimism/docs", "2025-08-30 17:32:45"]
["I_kwDOKIwiaM6PR2Af", 788, "[DOCS] improve op-conductor docs", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nThe `--rollup-rpc` section needs an additional important detail.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nThe `op-node` that is behind the `op-conductor` must have the safe head db enabled so it won\u2019t be stateless in this config. Both op-node and op-geth need data back to at least when the games start.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/tools/op-challenger#--rollup-rpc\r\n\r\n## Additional Context\r\n\r\nThis is the `op-node` help information:\r\n\r\n```\r\n--safedb.path value                                                    ($OP_NODE_SAFEDB_PATH)\r\n          File path used to persist safe head update data. Disabled if not set.\r\n```\r\n", "CLOSED", 0, "sbvegan", "2024-07-11T18:22:36Z", "2024-07-26T18:23:21Z", "2024-07-26T18:23:21Z", "ethereum-optimism/docs", "2025-08-30 17:32:45"]
["I_kwDOKIwiaM6PRoBR", 787, "[DOCS] add information about the derivation pipeline", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nOur docs site is missing a key piece of the OP Stack protocol, the derivation pipeline.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nThe OP Stack section of the docs should have a high level overview of the derivation pipeline and link to the specs to drill down deeper.\r\n\r\n## Links to Related Pages\r\n\r\n\r\n## Additional Context\r\n\r\nhttps://specs.optimism.io/protocol/derivation.html\r\n\r\nThis great explanation of the sequencer window would be a good piece in this page:\r\n\r\n> if the 12h sequencing window is exceeded without a valid batch being discovered on L1 to advance the Safe Head, the node will revert all Unsafe Blocks from the period, and will begin making forward progress using a default block, which is empty besides deposits. The network may return to health if the sequencer can start submitting batches built from this new implicitly derived head.\r\nIf a chain increases the window size to 24 hours, that network should simply operate with that higher limit. Nodes would wait twice as long before reorging out unsafe blocks, and the batcher could wait twice as long before submitting a batch. I don't think there's anything in code which makes assumptions on 12h window. Having said that, the change may have effects which are undesirable:\r\nNodes reorging out 24h of blocks could be harder on those nodes, causing more to hit resource constraints or otherwise fail\r\nBatcher submitting half as often could lead to difficulty processing large batches\r\nFor high throughput chains, the batch submission rate tends to be controlled by fullness rather than timing\r\nPerhaps other timing windows would have to be similarly adjusted? Like, maybe Fault Proofs would need a larger window? Not sure about this.\r\nThere's a question here about why someone would want a 24h sequencing window. 12h is already very large, and doubling it doesn't have any advantages I'm aware of. A chain operator does not want to flirt with the window, for risk of causing a massive unsafe head reorg, so the difference between 12h and 24h is not very meaningful to me.\r\nAs for if it's a requirement, a standard, a recommendation, or just a default, I leave that to the interpretation of our guides and you excellent solutions engineer folks.\r\nFinally, how to change the window size -- looks like sequencerWindowSize is part of deployment configurations, which are set up at the same time as things like ChainID. It's not clear to me if there's a way to modify the value in the L1 system config. I suspect this value is hard to change once set.", "CLOSED", 0, "sbvegan", "2024-07-11T18:01:54Z", "2024-07-26T18:45:30Z", "2024-07-26T18:45:30Z", "ethereum-optimism/docs", "2025-08-30 17:32:45"]
["I_kwDOLB-lzc6QWsQk", 282, "Can a specs link be added to this repo?", "**Can a `specs` link be added to this repo?**\r\nhttps://specs.optimism.io\r\n\r\nThanks\r\n![image](https://github.com/user-attachments/assets/1a548c49-9cad-4cc1-a22d-5ffa7b8c1469)\r\n", "CLOSED", 0, "nidz-the-fact", "2024-07-22T04:06:56Z", "2024-07-22T17:51:34Z", "2024-07-22T17:51:34Z", "ethereum-optimism/specs", "2025-08-30 17:32:50"]
["I_kwDOLB-lzc6QMUXv", 280, "Holocene: Planning steps for hardforks explained", "This document explains the steps we are taking while planning for Granite and subsequent hard fork upgrades to the OP stack. Since we started working [fully in public repositories](https://github.com/433ffe8427a54bb8b68a01aa45db4747?pvs=25), we have also adapted our upgrade planning process accordingly. \nFrom now on, we will share all planning updates on GitHub.\nProcess improvement can be found under this link: https://github.com/ethereum-optimism/specs/discussions/279 so we can consider this work item as done.", "CLOSED", 0, "BlocksOnAChain", "2024-07-19T14:55:07Z", "2024-07-23T12:53:03Z", "2024-07-19T14:56:25Z", "ethereum-optimism/specs", "2025-08-30 17:32:50"]
["I_kwDOJ_r-bs6QOSZ3", 410, "display eth DA / alt DA status", "### Request\r\n\r\nThe Superchain Registry currently checks whether a chain uses Alt-DA or Eth DA. We should surface this in the machine/human readable files with a new `data_availability_type` field. This field can be set to either `eth-da` or `alt-da`.\r\n\r\nFor example:\r\n\r\n`chainList.toml`: \r\n\r\n```toml\r\n[[chains]]\r\n  name = \"OP Mainnet\"\r\n  identifier = \"mainnet/op\"\r\n  chain_id = 10\r\n  rpc = [\"https://mainnet.optimism.io\"]\r\n  explorers = [\"https://explorer.optimism.io\"]\r\n  superchain_level = 2\r\n  data_availability_type = \"eth-da\"\r\n  [chains.parent]\r\n    type = \"L2\"\r\n    chain = \"mainnet\"\r\n```\r\n\r\n`chainList.json`:\r\n\r\n```json\r\n  {\r\n    \"name\": \"OP Mainnet\",\r\n    \"identifier\": \"mainnet/op\",\r\n    \"chainId\": 10,\r\n    \"rpc\": [\r\n      \"https://mainnet.optimism.io\"\r\n    ],\r\n    \"explorers\": [\r\n      \"https://explorer.optimism.io\"\r\n    ],\r\n    \"superchainLevel\": 2,\r\n    \"data_availability_type\":\"eth-da\",\r\n    \"parent\": {\r\n      \"type\": \"L2\",\r\n      \"chain\": \"mainnet\"\r\n    }\r\n  },\r\n```\r\n\r\n`superchain/configs/op.toml`:\r\n```toml\r\nname = \"OP Mainnet\"\r\nchain_id = 10\r\npublic_rpc = \"https://mainnet.optimism.io\"\r\nsequencer_rpc = \"https://mainnet-sequencer.optimism.io\"\r\nexplorer = \"https://explorer.optimism.io\"\r\nsuperchain_level = 2\r\nstandard_chain_candidate = false\r\ndata_availability_type = \"eth-da\"\r\n```\r\n\r\nThis is **not** blocking the EA launch, but we should populate this data soon after launch because our partners expect to see it.\r\n\r\n### Implementation Constraints\r\n\r\nWe are currently only checking the purple section of the following diagram. If a chain has set a `PlasmaConfig`, they are using Alt-DA Mode. Otherwise, they use Eth DA. \r\n\r\n<img src=\"https://github.com/user-attachments/assets/992803b9-03b6-4ae6-bb6d-da98e345bf62\" width=\"600\" />\r\n<br /><br />\r\n\r\nFor the gov launch, we should also:\r\n\r\n* Determine which DA provider Alt-DA chains are using (e.g., the blue boxes). See also https://github.com/ethereum-optimism/superchain-registry/issues/406\r\n* Perform an onchain check to confirm that batcher transactions are posting calldata/blobdata that matches their stated DA type. See also https://github.com/ethereum-optimism/superchain-registry/issues/400\r\n", "CLOSED", 0, "tessr", "2024-07-19T19:09:41Z", "2024-07-26T16:49:41Z", "2024-07-26T16:49:41Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:33:05"]
["I_kwDOJ_r-bs6PEfVN", 371, "validation: add drift detection on `SystemConfig.startBlock()`", "We want to\r\n* store the _original_ `startBlock` value in the superchain registry somewhere (this could be part of the add-chain tooling)\r\n  * get the `Initialized` logs from the system config contract, and use the oldest block number\r\n* have a validation check which queries the current value and ensures it is equal to the original value.", "CLOSED", 0, "geoknee", "2024-07-10T10:11:33Z", "2024-07-23T14:48:31Z", "2024-07-23T14:48:30Z", "ethereum-optimism/superchain-registry", "2025-08-30 17:33:05"]
["I_kwDOMMiGhs6PmKhi", 48, "genesis: add script to generate l1/l2 genesis files for each chain", "", "CLOSED", 0, "jakim929", "2024-07-15T16:26:09Z", "2024-07-22T12:59:58Z", "2024-07-22T12:59:58Z", "ethereum-optimism/supersim", "2025-08-30 17:33:17"]
["I_kwDOMMiGhs6Ne6eQ", 26, "op-simulator: optimism portal deposit listener", "The `OptimismPortal` contract exists on L1\n\n1. A simple log listener needs to be attached to `OptimismPortal#TransactionDeposited` event\n2. Use monorepo libs to construct the deposit transaction and forward to the underlying anvil instance", "CLOSED", 0, "hamdiallam", "2024-06-25T21:29:08Z", "2024-07-26T18:13:19Z", "2024-07-26T18:13:19Z", "ethereum-optimism/supersim", "2025-08-30 17:33:17"]
["I_kwDOMMiGhs6NTKb8", 3, "Tic Tac Toe Game                 ", "In order to test Supersim while developing, we need a reference implementation with which to try out the product. A Tic Tac Toe game provides a simple way to test out interoperability with message passing. \r\n\r\n**Contracts**\r\n- [x] Build MVP of tic tac toe without interop (https://github.com/ethereum-optimism/supersim/pull/27)\r\n- [x] Create deploy script (https://github.com/ethereum-optimism/supersim/pull/37)\r\n\r\n**Playground App**\r\n- [x] Update bridge-app to be general purpose (https://github.com/ethereum-optimism/ecosystem/pull/400)\r\n- [x] Add tic tac toe MVP implementation (https://github.com/ethereum-optimism/ecosystem/pull/402)", "CLOSED", 0, "fainashalts", "2024-06-24T16:07:42Z", "2024-07-23T16:56:33Z", "2024-07-23T16:56:33Z", "ethereum-optimism/supersim", "2025-08-30 17:33:17"]
["I_kwDODjvEJM6Qwg4E", 11229, "Use Go SSA callgraph analysis to confirm `op-program` does not call any Go functionality that Cannon is unable to handle", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nCannon doesn't have perfect MIPS compatibility, it makes sense to deprioritize anything that we know isn't contained in the compiled `op-program`. But dependency updates might contain unexpected additions of unsupported functionality, and it would be good to have a warning.\r\n\r\n**Describe the solution you'd like**\r\nA safety checker, enforcing something similar to Rust's `no_std` attribute. It could use Go [SSA](https://pkg.go.dev/golang.org/x/tools/go/ssa). @protolambda has a [Go SSA callgraph analyzer](https://github.com/protolambda/gocyto), this would be similar but suitable for CI with error output listing unexpected calls.\r\n\r\n**Describe alternatives you've considered**\r\nI haven't considered alternative solutions yet.\r\n\r\n**Additional context**\r\n\r\n", "OPEN", 0, "pauldowman", "2024-07-24T23:34:21Z", "2024-07-24T23:34:21Z", null, "ethereum-optimism/optimism", "2025-08-30 17:33:29"]
["I_kwDODjvEJM6NpnAv", 11029, "Interop: op-supervisor: Progress chain heads", "As log records and chain head updates are received, verify the existence of dependent logs and advance heads as appropriate.", "CLOSED", 0, "ajsutton", "2024-06-27T00:44:43Z", "2024-07-23T03:50:30Z", "2024-07-23T03:50:28Z", "ethereum-optimism/optimism", "2025-08-30 17:33:29"]
["I_kwDODjvEJM6Npmxm", 11028, "Interop: op-supervisor: Store chain head pointers", "Design and implement a way to track the chain heads for each chain. Need to at least work out how to ensure they are consistent with the log db, though could potentially defer implementing recovery from inconsistencies.", "CLOSED", 0, "ajsutton", "2024-06-27T00:43:14Z", "2024-07-23T03:49:37Z", "2024-07-23T03:49:37Z", "ethereum-optimism/optimism", "2025-08-30 17:33:29"]
["I_kwDODjvEJM5qIl4J", 6194, "Op-Proposer L2 Output Submitter error", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nI start `op-proposer` with the script:\r\n./bin/op-proposer \\\r\n    --poll-interval=12s \\\r\n    --rpc.port=8560 \\\r\n    --rollup-rpc=http://localhost:8547 \\\r\n    --l2oo-address=$L2OO_ADDR \\\r\n    --private-key=$PROPOSER_KEY \\\r\n    --l1-eth-rpc=$L1_RPC\r\n\r\n\r\nAnd get this error:\r\n```\r\nINFO [06-28|15:22:40.444] Initializing L2 Output Submitter \r\nERROR[06-28|15:22:40.444] Unable to create the L2 Output Submitter error=\"invalid address: \" \r\nCRIT [06-28|15:22:40.444] Application failed                       message=\"invalid address: \" \r\n```\r\n\r\n1. How do I retrieve the address for L2 Output Submitter?\r\n2. How do I set the address?\r\n\r\n**To Reproduce**\r\nRun through the getting started docs up the point of [starting op-proposer](https://stack.optimism.io/docs/build/getting-started/#op-proposer). Then run the cmd to start `op-proposer`.\r\n\r\n**Expected behavior**\r\nUpon successfully running the cmd in step 1, I would expect some logs indicating op-proposer is successfully proposing new state roots.\r\n\r\n**Additional context**\r\nMy branch is `origin/develop`.\r\nI start and run op-geth, op-node and op-batcher first, and I am trying to start op-proposer last.\r\n", "CLOSED", 0, "cspannos", "2023-06-29T11:33:33Z", "2024-07-22T19:59:10Z", "2023-06-29T13:33:15Z", "ethereum-optimism/optimism", "2025-08-30 17:33:29"]
["I_kwDOLB-lzc6Nnxlm", 260, "Create spec for `Proxy.sol`", "> nit: it would be more ideal to have a spec for `Proxy.sol` and point to that, not sure if we do\r\n\r\nAdditionally, link to it from the OP Stack Manager specs page\r\n\r\n_Originally posted by @tynes in https://github.com/ethereum-optimism/specs/pull/236#discussion_r1655285108_\r\n            ", "OPEN", 0, "mds1", "2024-06-26T18:29:06Z", "2024-07-30T02:40:44Z", null, "ethereum-optimism/specs", "2025-08-30 17:35:33"]
["I_kwDOJ_r-bs6QLd7o", 400, "validation: autodetect, store and continuously validate Data Availability mode. ", "The Data Availability mode (Ethereum vs non Ethereum) and provider (Celestia, etc) are important pieces of information to attach to each chain in the registry. \r\n\r\nWe are not able to infer the DA mode from `rollup.json` -- there are some environment variables for op-node and op-batcher which have useful information, but will not be able to reliably scrape these, either. We have a config field `PlasmaConifg` but it is not clear if this is actually the whole story with alt DA.\r\n\r\nThe remaining options are to:\r\n* ask and trust the chain contributor to declare the information\r\n* go on chain to detect and verify it. \r\n\r\nWe will go with the second option. \r\n\r\nDefinition of done:\r\n\r\n* `add-chain` tooling uses an L1 RPC client to scrape the latest batcher transaction* for the chain being added. It decodes that and infers if the chain is using alt DA (i.e. the DA mode boolean)\r\n  - ~IF the chain is using alt DA, we require them to have set an \"ALT_DA_PROVIDER_BYTE`~ \r\n*  a new field is added to the `superchain.ChainConfig` type to record the boolean from the previous step, ~as well as the identifier byte if the DA mode is not ethereum. For now, the identifier byte can be stored in a field `SelfCertifiedDAProviderByte` to emphasise that it is not yet validated on chain.~\r\n* a validation check is added, which again scrapes the latest batcher transaction*, decodes the DA mode, and\r\n  - for all chains checks it is consistent with the declared value now stored in the chain config\r\n  - for standard chains (and standard candidate chains), ensures the DA mode is Ethereum\r\n* ~This list of bytes is represented in the `superchain-registry` https://github.com/ethereum-optimism/specs/discussions/135 as an enum~\r\n\r\n---\r\n\u00a0*Scraping latest batcher transaction\r\nThis is likely a useful reusable module for many validation checks, as well as the add-chain tooling. The idea is to do a binary search on the batcher signing account's nonce. This is a very quick way of finding the latest batcher transaction. The initial lookback window could be just the sequencing window. \r\n\r\n---\r\nEDIT: cutting some things from scope, these will be dealt with in a follow up ticket\r\n\r\n", "CLOSED", 0, "geoknee", "2024-07-19T13:27:47Z", "2024-07-30T14:01:29Z", "2024-07-30T14:01:28Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:36:46"]
["I_kwDOMMiGhs6RMzEN", 68, "L1/L2 port number config", "- L1 port flag\n- L2 starting port flag (incrementing from here)\n\n`0` default binds to any port", "CLOSED", 0, "hamdiallam", "2024-07-29T18:16:15Z", "2024-07-31T03:16:29Z", "2024-07-31T03:16:29Z", "ethereum-optimism/supersim", "2025-08-30 18:36:56"]
["I_kwDOMMiGhs6Q_mdX", 64, "l2 deposit tx hash are different from what is expected", "need to look into what the cause is. Need to check\r\n\r\n- we're sending deposit tx correctly\r\n- anvil correctly generates the l2 deposit tx hash when including a tx in a block", "CLOSED", 0, "jakim929", "2024-07-26T16:43:17Z", "2024-07-31T18:21:18Z", "2024-07-31T18:21:18Z", "ethereum-optimism/supersim", "2025-08-30 18:36:56"]
["I_kwDOMMiGhs6QnbRX", 59, "Update dependency set on startup for vanilla mode", "", "CLOSED", 0, "tremarkley", "2024-07-23T23:02:05Z", "2024-07-31T16:20:21Z", "2024-07-31T16:20:21Z", "ethereum-optimism/supersim", "2025-08-30 18:36:56"]
["I_kwDOMMiGhs6PIXpm", 41, "Anvil hardcoded chain id when loading genesis", "The chain id can be apart of the `genesis.json`. When parsing the genesis file, anvil sets the default config (chain id == 1), then loads in the file and overwrites the config with the information present in the file.\r\n\r\nIf the chain id is not apart of that file, then the chain id remains 1, regardless of the `--chain-id` flag. This presents a problem as we use the flag to set chain id for the chain.\r\n\r\nThis breaks tests that assert the chain id and will also break transactions that sign over the expected chain id as well.\r\n\r\nReference:\r\nhttps://github.com/alloy-rs/alloy/blob/902d847c023d9d96d63b753028731261e0871d34/crates/genesis/src/lib.rs#L526\r\nhttps://github.com/foundry-rs/foundry/blob/72e44fb87c38b2acfa2b0b136fc1bc833f71e674/crates/anvil/src/config.rs#L935", "CLOSED", 0, "hamdiallam", "2024-07-10T17:44:50Z", "2024-07-29T18:22:07Z", "2024-07-29T18:22:06Z", "ethereum-optimism/supersim", "2025-08-30 18:36:56"]
["I_kwDOMMiGhs6PHYqB", 40, "Add better support for flag parsing + applying defaults in config", "The supersim config code should be streamlined, parsing CLI flags and applying defaults. Mentioned as a to-do item in #39. ", "CLOSED", 0, "fainashalts", "2024-07-10T15:30:47Z", "2024-07-29T18:08:09Z", "2024-07-29T18:08:09Z", "ethereum-optimism/supersim", "2025-08-30 18:36:56"]
["I_kwDOMMiGhs6NVhBM", 12, "Orchestrator: Add commands to stop instances", "We'll need a way for users to stop the Orchestrator elegantly. We should offer a command to do this: \r\n\r\n`supersim stop` or `supersim down`\r\n\r\nWe may also wish to allow users to start or stop individual instances. The flow and need for this is a bit unclear, so this initial task is for stopping all of the instances the orchestrator is running. \r\n\r\n**Definition of Done**\r\nOrchestrator is able to stop all the Anvil instances it is running when given the appropriate command by the user.", "CLOSED", 0, "fainashalts", "2024-06-24T22:38:30Z", "2024-07-29T18:06:10Z", "2024-07-29T18:06:08Z", "ethereum-optimism/supersim", "2025-08-30 18:36:56"]
["I_kwDODjvEJM6RwUch", 11335, "CrossL2Inbox: ExecutingMessage Parameter Change", "Description here: <https://github.com/ethereum-optimism/specs/pull/254>", "CLOSED", 0, "0xng", "2024-08-02T16:30:44Z", "2024-08-02T16:33:50Z", "2024-08-02T16:33:50Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6RqTWW", 11327, "About Optimism's Three-Step Process for Contract Implementation Upgrades", "I found the rule for upgrades in the [Optimism Style Guide](https://github.com/ethereum-optimism/optimism/blob/9d31040ecf8590423adf267ad24b03bc1bf7273b/packages/contracts-bedrock/STYLE_GUIDE.md). The process for upgrading the implementation is as follows:\r\n\r\n1. Upgrade the implementation to the StorageSetter contract.\r\n2. Use that to set the initialized slot (typically slot 0) to zero.\r\n3. Upgrade the implementation to the desired new implementation and initialize it.\r\n\r\nIt would be helpful if there were examples demonstrating this process.\r\n\r\n", "CLOSED", 0, "zhiqiangxu", "2024-08-02T01:29:16Z", "2024-08-02T03:05:56Z", "2024-08-02T03:05:55Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6QlPs7", 11211, "GovToken: Specify `GovernanceDelegation`", "", "CLOSED", 0, "cairoeth", "2024-07-23T16:59:46Z", "2024-08-01T19:12:49Z", "2024-08-01T14:04:29Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6MirJ8", 10848, "GovernanceDelegation: Specify Hook Call", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n# Definition of Done\r\n\r\n\r\n\r\nThe testing should ensure to cover the invariants defined in the spec\r\n\r\n", "CLOSED", 0, "0xfuturistic", "2024-06-07T21:17:28Z", "2024-08-01T19:06:52Z", "2024-07-23T14:28:27Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6MirT2", 10863, "Governance: Specify Advanced Delegation in GovToken", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n## Definition of Done\r\n\r\nThe specs include a spec for partial delegation, this should be possible after all of the parties have agreed on the design-doc in a design review meeting.", "CLOSED", 0, "tynes", "2024-05-28T20:25:11Z", "2024-08-01T19:12:37Z", "2024-06-19T04:35:43Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6Mirg-", 10882, "Interop: encapsulate message-validation types and invariants into single source-of-truth library", "This should be extracted from the superchain-backend, once the backend is in a functional form, to make reuse of these core components easier across the stack.\n\nThis is part of the superchain backend, this could be the first step of the superchain backend. This is considered done when the library exists that implements the serialization and types per the spec.", "CLOSED", 0, "protolambda", "2024-04-01T20:57:16Z", "2024-07-30T18:07:03Z", "2024-07-30T18:07:03Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6Mirhm", 10883, "Interop: cross-L2 dependency monitoring", "Extend the interop superchain backend to expose dependency information, such that we can debug and understand live cross-L2 dependency changes.\n\nThis is considered done when we define a set of metrics that we want to observe and implement grafana handlers so that we can observe and reconstruct what happened in the case of bugs, specifically in the case of an invalid interop message being included.", "CLOSED", 0, "protolambda", "2024-04-01T20:55:28Z", "2024-08-02T17:26:40Z", "2024-08-02T17:26:39Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6MirlO", 10888, "Interop: implement op-node driver refactor", "~Refactor to implement the spec changes of https://github.com/ethereum-optimism/specs/pull/96 as designed in ethereum-optimism/protocol-quest#192~\r\n\r\n~See https://github.com/ethereum-optimism/design-docs/pull/1~\r\n\r\nSee https://github.com/ethereum-optimism/design-docs/blob/main/protocol/op-node-derivers.md\r\n\r\nThis then supports the integration of cross-unsafe as safety-transition in the op-node.\r\n\r\n- Phase 1a: ethereum-optimism/protocol-quest#260\r\n- Phase 1b: ethereum-optimism/protocol-quest#261\r\n- Phase 2: ethereum-optimism/optimism#10865\r\n- Phase 3: ethereum-optimism/optimism#10864", "CLOSED", 0, "protolambda", "2024-04-01T20:42:50Z", "2024-07-30T18:09:50Z", "2024-07-30T18:09:50Z", "ethereum-optimism/optimism", "2025-08-30 18:37:14"]
["I_kwDODjvEJM6SQy7Q", 11387, " Nonce too high", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nDeployment on local hardhat sepolia fork \r\n\r\n**Steps to Reproduce**\r\n\r\n1. Start npx hardhat node --fork .... \r\n2. git clone https://github.com/ethereum-optimism/optimism.git\r\n3. git checkout tags/op-contracts/v2.0.0-beta.2 \r\n4. DEPLOYMENT_OUTFILE=deployments/artifact.json \\\r\n  DEPLOY_CONFIG_PATH=deploy-config/getting-started.json \\\r\n    forge script ./scripts/Deploy.s.sol:Deploy \\\r\n    --broadcast --private-key $PRIVATE_KEY \\\r\n    --fork-url $L1_RPC_URL\r\n5. Got server returned an error response: error code -32000: Nonce too high. Expected nonce to be 850 but got 851. Note that transactions can't be queued when automining.\r\n\r\n**Expected behavior**\r\nCompiled and deployed contracts\r\n\r\n**Environment Information:**\r\n - Operating System: Ubuntu 20.04\r\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\n\r\n**Logs:**\r\n```\r\n    },\r\n    {\r\n      \"hash\": null,\r\n      \"transactionType\": \"CALL\",\r\n      \"contractName\": \"Proxy\",\r\n      \"contractAddress\": \"0x2b7a56181cebb83f64c36b8ae2bd393280c572c4\",\r\n      \"function\": null,\r\n      \"arguments\": null,\r\n      \"transaction\": {\r\n        \"from\": \"0x15d34aaf54267db7d7c367839aaf71a00a2c6a65\",\r\n        \"to\": \"0x2b7a56181cebb83f64c36b8ae2bd393280c572c4\",\r\n        \"gas\": \"0x11d07\",\r\n        \"value\": \"0x0\",\r\n        \"input\": \"0x14f6b1a3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000055080af92aa1a85204ac5e719910848a7ed47d64\",\r\n        \"nonce\": \"0x382\",\r\n        \"chainId\": \"0x7a69\"\r\n      },\r\n      \"additionalContracts\": [],\r\n      \"isFixedGasLimit\": false\r\n    },\r\n    {\r\n      \"hash\": null,\r\n      \"transactionType\": \"CALL\",\r\n      \"contractName\": \"Proxy\",\r\n      \"contractAddress\": \"0x2b7a56181cebb83f64c36b8ae2bd393280c572c4\",\r\n      \"function\": null,\r\n      \"arguments\": null,\r\n      \"transaction\": {\r\n        \"from\": \"0x15d34aaf54267db7d7c367839aaf71a00a2c6a65\",\r\n        \"to\": \"0x2b7a56181cebb83f64c36b8ae2bd393280c572c4\",\r\n        \"gas\": \"0xbfc7\",\r\n        \"value\": \"0x0\",\r\n        \"input\": \"0xf2fde38b000000000000000000000000b122f1084ba3eca244ee1c7f9f866a10cb4ab3da\",\r\n        \"nonce\": \"0x383\",\r\n        \"chainId\": \"0x7a69\"\r\n      },\r\n      \"additionalContracts\": [],\r\n      \"isFixedGasLimit\": false\r\n    },\r\n    {\r\n      \"hash\": null,\r\n      \"transactionType\": \"CALL\",\r\n      \"contractName\": \"Proxy\",\r\n      \"contractAddress\": \"0x5782373019ee0e4f92b2d61444ce152514acfcb6\",\r\n      \"function\": null,\r\n      \"arguments\": null,\r\n      \"transaction\": {\r\n        \"from\": \"0x15d34aaf54267db7d7c367839aaf71a00a2c6a65\",\r\n        \"to\": \"0x5782373019ee0e4f92b2d61444ce152514acfcb6\",\r\n        \"gas\": \"0xb501\",\r\n        \"value\": \"0x0\",\r\n        \"input\": \"0xf2fde38b000000000000000000000000b122f1084ba3eca244ee1c7f9f866a10cb4ab3da\",\r\n        \"nonce\": \"0x384\",\r\n        \"chainId\": \"0x7a69\"\r\n      },\r\n      \"additionalContracts\": [],\r\n      \"isFixedGasLimit\": false\r\n    }\r\n  ],\r\n  \"receipts\": [],\r\n  \"libraries\": [],\r\n  \"pending\": [\r\n    \"0x8a676fc34603d0fa7fb68abec9f427ae0f7dbd61d0ca4a10bb1880ad0d7e193f\",\r\n    \"0xf9d450ce17c49e2d7c19720cc25fe30bd5783aafbe7c20e581e8fa6b1063cf26\",\r\n    \"0xf16d131869e13fb4c3ee3f743335d5fc321c0728d3247e5b4981549af880a908\"\r\n  ],\r\n  \"returns\": {},\r\n  \"timestamp\": 1723047417,\r\n  \"chain\": 31337,\r\n  \"commit\": \"363c5d7f4\"\r\n}root@VELAS:/var/op_stack_deployer#bash make_all_dev.sh \r\n/var/op_stack_deployer\r\nMake All Dev\r\nlib.sh: line 84: check_res: command not found\r\nInstall git\r\nReading package lists... Done\r\nBuilding dependency tree       \r\nReading state information... Done\r\ngit is already the newest version (1:2.25.1-1ubuntu3.13).\r\nThe following packages were automatically installed and are no longer required:\r\n  python3-attr python3-cached-property python3-docker python3-dockerpty python3-docopt python3-importlib-metadata python3-jsonschema python3-more-itertools python3-pyrsistent python3-texttable python3-websocket python3-zipp\r\nUse 'apt autoremove' to remove them.\r\n0 upgraded, 0 newly installed, 0 to remove and 251 not upgraded.\r\ngit version 2.25.1\r\nClone and Build OP_STACK\r\nOptimism folder is already available, so the assumption is that it isn't installed correctly, if it's not please remove this folder and run this command again\r\nConfigure Development\r\nInstall local blockchain\r\nLocalNode folder is already available, so the assumption is that it isn't installed correctly, if it's not please remove this folder and run this command again\r\nexport L1_CHAIN_ID=900\r\ns/export L1_CHAIN_ID=.*/export L1_CHAIN_ID=900/\r\nexport L1_CHAIN_ID=900\r\nexport L1_BLOCK_TIME=5\r\ns/export L1_BLOCK_TIME=.*/export L1_BLOCK_TIME=5/\r\nexport L1_BLOCK_TIME=5\r\nexport L1_RPC_URL=http://127.0.0.1:8545/\r\ns/export L1_RPC_URL=.*/export L1_RPC_URL=http:\\/\\/127.0.0.1:8545\\//\r\nexport L1_RPC_URL=http://127.0.0.1:8545/\r\nexport GS_ADMIN_ADDRESS=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\r\ns/export GS_ADMIN_ADDRESS=.*/export GS_ADMIN_ADDRESS=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266/\r\nexport GS_ADMIN_ADDRESS=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\r\nexport GS_ADMIN_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\r\ns/export GS_ADMIN_PRIVATE_KEY=.*/export GS_ADMIN_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80/\r\nexport GS_ADMIN_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\r\nexport GS_BATCHER_ADDRESS=0x70997970C51812dc3A010C7d01b50e0d17dc79C8\r\ns/export GS_BATCHER_ADDRESS=.*/export GS_BATCHER_ADDRESS=0x70997970C51812dc3A010C7d01b50e0d17dc79C8/\r\nexport GS_BATCHER_ADDRESS=0x70997970C51812dc3A010C7d01b50e0d17dc79C8\r\nexport GS_BATCHER_PRIVATE_KEY=0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\r\ns/export GS_BATCHER_PRIVATE_KEY=.*/export GS_BATCHER_PRIVATE_KEY=0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d/\r\nexport GS_BATCHER_PRIVATE_KEY=0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\r\nexport GS_PROPOSER_ADDRESS=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\r\ns/export GS_PROPOSER_ADDRESS=.*/export GS_PROPOSER_ADDRESS=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC/\r\nexport GS_PROPOSER_ADDRESS=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\r\nexport GS_PROPOSER_PRIVATE_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\r\ns/export GS_PROPOSER_PRIVATE_KEY=.*/export GS_PROPOSER_PRIVATE_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a/\r\nexport GS_PROPOSER_PRIVATE_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\r\nexport GS_SEQUENCER_ADDRESS=0x90F79bf6EB2c4f870365E785982E1f101E93b906\r\ns/export GS_SEQUENCER_ADDRESS=.*/export GS_SEQUENCER_ADDRESS=0x90F79bf6EB2c4f870365E785982E1f101E93b906/\r\nexport GS_SEQUENCER_ADDRESS=0x90F79bf6EB2c4f870365E785982E1f101E93b906\r\nexport GS_SEQUENCER_PRIVATE_KEY=0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6\r\ns/export GS_SEQUENCER_PRIVATE_KEY=.*/export GS_SEQUENCER_PRIVATE_KEY=0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6/\r\nexport GS_SEQUENCER_PRIVATE_KEY=0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6\r\nexport PRIVATE_KEY=0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a\r\ns/export PRIVATE_KEY=.*/export PRIVATE_KEY=0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a/\r\nexport PRIVATE_KEY=0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a\r\nDeploy L1 Contracts\r\nRun conifg.sh\r\nRun forge\r\n[\u2822] Compiling...\r\nNo files changed, compilation skipped\r\nEIP-3855 is not supported in one or more of the RPCs used.\r\nUnsupported Chain IDs: 31337.\r\nContracts deployed with a Solidity version equal or higher than 0.8.20 might not work properly.\r\nFor more information, please see https://eips.ethereum.org/EIPS/eip-3855\r\nScript ran successfully.\r\n\r\n== Logs ==\r\n  Writing artifact to deployments/artifact.json\r\n  Connected to network with chainid 31337\r\n  Commit hash: 363c5d7f4fb14180a0e2a28cc948fe2146f03dce\r\n  DeployConfig: reading file deploy-config/getting-started.json\r\n  Deploying a fresh OP Stack including SuperchainConfig\r\n  start of L1 Deploy!\r\n  Deploying safe: SystemOwnerSafe with salt 0xaaece28e7cd0fbd547284950c9797287f63fe7c60833ad852184560d04d89210\r\n  Saving SafeProxyFactory: 0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2\r\n  Saving SafeSingleton: 0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552\r\n  Saving SystemOwnerSafe: 0xE70A60324e584A93921A9b6f8160A3F8557D94c8\r\n  New safe: SystemOwnerSafe deployed at 0xE70A60324e584A93921A9b6f8160A3F8557D94c8\r\n    Note that this safe is owned by the deployer key\r\n  deployed Safe!\r\n  Setting up Superchain\r\n  Deploying AddressManager\r\n  Saving AddressManager: 0x011D4d1A3CD508139da48842Dc52CaE9c4aBDBBb\r\n  AddressManager deployed at 0x011D4d1A3CD508139da48842Dc52CaE9c4aBDBBb\r\n  Deploying ProxyAdmin\r\n  Saving ProxyAdmin: 0x189a663E41bfeEd8CED9f5AEdC30085D58abB1cA\r\n  ProxyAdmin deployed at 0x189a663E41bfeEd8CED9f5AEdC30085D58abB1cA\r\n  ProxyAdmin ownership transferred to Safe at: 0xE70A60324e584A93921A9b6f8160A3F8557D94c8\r\n  Deploying ERC1967 proxy for SuperchainConfigProxy\r\n  Saving SuperchainConfigProxy: 0x74Eb6104E3FE2bB13B9e2a20565413C6A54A6e8f\r\n     at 0x74Eb6104E3FE2bB13B9e2a20565413C6A54A6e8f\r\n  Saving SuperchainConfig: 0x604C7573e6Af026d7362fED368e856f6E93d394D\r\n  SuperchainConfig deployed at 0x604C7573e6Af026d7362fED368e856f6E93d394D\r\n  Running chain assertions on the SuperchainConfig\r\n  Deploying ERC1967 proxy for ProtocolVersionsProxy\r\n  Saving ProtocolVersionsProxy: 0x4DB17B67131B77E8BAE9E22902913Af7D97DA4C1\r\n     at 0x4DB17B67131B77E8BAE9E22902913Af7D97DA4C1\r\n  Deploying ProtocolVersions implementation\r\n  Saving ProtocolVersions: 0x3e427624d5aa1420A417984accaB8e29AC189CA1\r\n  ProtocolVersions deployed at 0x3e427624d5aa1420A417984accaB8e29AC189CA1\r\n  Running chain assertions on the ProtocolVersions\r\n  Upgrading and initializing ProtocolVersions proxy\r\n  ProtocolVersions version: 1.0.0\r\n  Running chain assertions on the ProtocolVersions\r\n  set up superchain!\r\n  Deploying OP Chain\r\n  Deploying proxies\r\n  Deploying ERC1967 proxy for OptimismPortalProxy\r\n  Saving OptimismPortalProxy: 0xaD8b7F06f460977249F143EEdDa541B9A098371C\r\n     at 0xaD8b7F06f460977249F143EEdDa541B9A098371C\r\n  Deploying ERC1967 proxy for SystemConfigProxy\r\n  Saving SystemConfigProxy: 0x061f338dF821577e882Ff8e4A1F635415aaE061E\r\n     at 0x061f338dF821577e882Ff8e4A1F635415aaE061E\r\n  Deploying proxy for L1StandardBridge\r\n  Saving L1StandardBridgeProxy: 0xFB94112cc45fB83cEE2711573a71C39682FbF977\r\n  L1StandardBridgeProxy deployed at 0xFB94112cc45fB83cEE2711573a71C39682FbF977\r\n  Deploying proxy for L1CrossDomainMessenger\r\n  Saving L1CrossDomainMessengerProxy: 0x2B7A56181CeBB83f64c36b8Ae2bD393280C572c4\r\n  L1CrossDomainMessengerProxy deployed at 0x2B7A56181CeBB83f64c36b8Ae2bD393280C572c4\r\n  Deploying ERC1967 proxy for OptimismMintableERC20FactoryProxy\r\n  Saving OptimismMintableERC20FactoryProxy: 0x94a6Be44e71aCfF019221Ef67Cc0Ae68a612f102\r\n     at 0x94a6Be44e71aCfF019221Ef67Cc0Ae68a612f102\r\n  Deploying ERC1967 proxy for L1ERC721BridgeProxy\r\n  Saving L1ERC721BridgeProxy: 0x5782373019Ee0e4F92b2d61444CE152514aCfCB6\r\n     at 0x5782373019Ee0e4F92b2d61444CE152514aCfCB6\r\n  Deploying ERC1967 proxy for DisputeGameFactoryProxy\r\n  Saving DisputeGameFactoryProxy: 0x5E5C4B2b19BeD87C0D26Cc163Ea167B7F0A73a3d\r\n     at 0x5E5C4B2b19BeD87C0D26Cc163Ea167B7F0A73a3d\r\n  Deploying ERC1967 proxy for L2OutputOracleProxy\r\n  Saving L2OutputOracleProxy: 0xC664d6e619BCfDAE0f812593e5dBb159548EA8AB\r\n     at 0xC664d6e619BCfDAE0f812593e5dBb159548EA8AB\r\n  Deploying ERC1967 proxy for DelayedWETHProxy\r\n  Saving DelayedWETHProxy: 0xb279EfbbC2de4Ffe73A68C5e3392A4AF995ebB9b\r\n     at 0xb279EfbbC2de4Ffe73A68C5e3392A4AF995ebB9b\r\n  Deploying ERC1967 proxy for AnchorStateRegistryProxy\r\n  Saving AnchorStateRegistryProxy: 0x38F8bf44E7d37a23377cEA431606a7A13D45f7CA\r\n     at 0x38F8bf44E7d37a23377cEA431606a7A13D45f7CA\r\n  Transferring AddressManager ownership to ProxyAdmin\r\n  AddressManager ownership transferred to 0x189a663E41bfeEd8CED9f5AEdC30085D58abB1cA\r\n  Deploying implementations\r\n  Deploying L1CrossDomainMessenger implementation\r\n  Saving L1CrossDomainMessenger: 0x3b049593C4646Bf91483252b3d7C8cD7cDcB3f11\r\n  L1CrossDomainMessenger deployed at 0x3b049593C4646Bf91483252b3d7C8cD7cDcB3f11\r\n  Running chain assertions on the L1CrossDomainMessenger\r\n  Deploying OptimismMintableERC20Factory implementation\r\n  Saving OptimismMintableERC20Factory: 0x607e636D087323ac1B1bFC7E06336e731c561aEB\r\n  OptimismMintableERC20Factory deployed at 0x607e636D087323ac1B1bFC7E06336e731c561aEB\r\n  Running chain assertions on the OptimismMintableERC20Factory\r\n  Deploying SystemConfig implementation\r\n  Saving SystemConfig: 0xF8Ad98ba84682FA51A7cf24837f8e44f0b38f20d\r\n  SystemConfig deployed at 0xF8Ad98ba84682FA51A7cf24837f8e44f0b38f20d\r\n  Running chain assertions on the SystemConfig\r\n  Deploying L1StandardBridge implementation\r\n  Saving L1StandardBridge: 0xbc48507ec90cAbC595101c3DE3e3e113D0d79AD7\r\n  L1StandardBridge deployed at 0xbc48507ec90cAbC595101c3DE3e3e113D0d79AD7\r\n  Running chain assertions on the L1StandardBridge\r\n  Deploying L1ERC721Bridge implementation\r\n  Saving L1ERC721Bridge: 0x05ABE4769DDD2A19C7bE7441b2461De14DEaEF9B\r\n  L1ERC721Bridge deployed at 0x05ABE4769DDD2A19C7bE7441b2461De14DEaEF9B\r\n  Running chain assertions on the L1ERC721Bridge\r\n  Deploying OptimismPortal implementation\r\n  Saving OptimismPortal: 0x34684960C8D8d9B0527E01617a5E2d843D21E7C0\r\n  OptimismPortal deployed at 0x34684960C8D8d9B0527E01617a5E2d843D21E7C0\r\n  Running chain assertions on the OptimismPortal\r\n  Guardian has no code: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\r\n  Deploying L2OutputOracle implementation\r\n  Saving L2OutputOracle: 0x96311Ca06da934f87FfB98AC797dE6a0607Ce409\r\n  L2OutputOracle deployed at 0x96311Ca06da934f87FfB98AC797dE6a0607Ce409\r\n  Running chain assertions on the L2OutputOracle\r\n  Deploying OptimismPortal2 implementation\r\n  Saving OptimismPortal2: 0x7bCf409272590122e659A698914a0f3eebFB1C3B\r\n  OptimismPortal2 deployed at 0x7bCf409272590122e659A698914a0f3eebFB1C3B\r\n  Running chain assertions on the OptimismPortal2\r\n  Guardian has no code: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\r\n  Deploying DisputeGameFactory implementation\r\n  Saving DisputeGameFactory: 0xC45Ee74640B29Cc8c9DEdF367C7627724fc5A312\r\n  DisputeGameFactory deployed at 0xC45Ee74640B29Cc8c9DEdF367C7627724fc5A312\r\n  Running chain assertions on the DisputeGameFactory\r\n  Deploying DelayedWETH implementation\r\n  Saving DelayedWETH: 0x7c1dB323F6C16980Cb8a74D24001b124C75eE455\r\n  DelayedWETH deployed at 0x7c1dB323F6C16980Cb8a74D24001b124C75eE455\r\n  Running chain assertions on the DelayedWETH\r\n  Deploying PreimageOracle implementation\r\n  Saving PreimageOracle: 0x4Fedf5Fe9306d8B8f588Da671fAf408D57417927\r\n  PreimageOracle deployed at 0x4Fedf5Fe9306d8B8f588Da671fAf408D57417927\r\n  Deploying Mips implementation\r\n  Saving Mips: 0xFd052f1745180FeC1c56D66d6c80C8eb6e948A73\r\n  MIPS deployed at 0xFd052f1745180FeC1c56D66d6c80C8eb6e948A73\r\n  Deploying AnchorStateRegistry implementation\r\n  Saving AnchorStateRegistry: 0xaF636A574ea4b62Afdf348087EeDb3b12454B401\r\n  AnchorStateRegistry deployed at 0xaF636A574ea4b62Afdf348087EeDb3b12454B401\r\n  Initializing implementations\r\n  Upgrading and initializing OptimismPortal proxy\r\n  OptimismPortal version: 2.8.1-beta.1\r\n  Running chain assertions on the OptimismPortal\r\n  Guardian has no code: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\r\n  Upgrading and initializing SystemConfig proxy\r\n  SystemConfig version: 2.3.0-beta.2\r\n  Running chain assertions on the SystemConfig\r\n  Upgrading and initializing L1StandardBridge proxy\r\n  L1StandardBridge version: 2.2.0\r\n  Running chain assertions on the L1StandardBridge\r\n  Upgrading and initializing L1ERC721Bridge proxy\r\n  L1ERC721Bridge version: 2.1.1+beta.1\r\n  Running chain assertions on the L1ERC721Bridge\r\n  Upgrading and initializing OptimismMintableERC20Factory proxy\r\n  OptimismMintableERC20Factory version: 1.9.0\r\n  Running chain assertions on the OptimismMintableERC20Factory\r\n  Upgrading and initializing L1CrossDomainMessenger proxy\r\n  L1CrossDomainMessenger version: 2.4.0\r\n  Running chain assertions on the L1CrossDomainMessenger\r\n  Upgrading and initializing L2OutputOracle proxy\r\n  L2OutputOracle version: 1.8.0\r\n  Running chain assertions on the L2OutputOracle\r\n  Upgrading and initializing DisputeGameFactory proxy\r\n  DisputeGameFactory version: 1.0.0\r\n  Running chain assertions on the DisputeGameFactory\r\n  Upgrading and initializing DelayedWETH proxy\r\n  DelayedWETH version: 1.0.0\r\n  Running chain assertions on the DelayedWETH\r\n  Upgrading and initializing AnchorStateRegistry proxy\r\n  AnchorStateRegistry version: 1.0.0\r\n  Setting Cannon FaultDisputeGame implementation\r\n  [Cannon Dispute Game] Using absolute prestate from config: 0x3c7ae758795765c6664a5d39bf63841c71ff191e9189522bad8ebff5d4eca98\r\n  DisputeGameFactoryProxy: set `FaultDisputeGame` implementation (Backend: Cannon | GameType: 0)\r\n  Setting Cannon PermissionedDisputeGame implementation\r\n  [Cannon Dispute Game] Using absolute prestate from config: 0x3c7ae758795765c6664a5d39bf63841c71ff191e9189522bad8ebff5d4eca98\r\n  DisputeGameFactoryProxy: set `FaultDisputeGame` implementation (Backend: PermissionedCannon | GameType: 1)\r\n  Transferring DisputeGameFactory ownership to Safe\r\n  DisputeGameFactory ownership transferred to Safe at: 0xE70A60324e584A93921A9b6f8160A3F8557D94c8\r\n  Running chain assertions on the DisputeGameFactory\r\n  Transferring DelayedWETH ownership to Safe\r\n  DelayedWETH ownership transferred to Safe at: 0xE70A60324e584A93921A9b6f8160A3F8557D94c8\r\n  Running chain assertions on the DelayedWETH\r\n  set up op chain!\r\n\r\n## Setting up 1 EVM.\r\n\r\n==========================\r\n\r\nChain 31337\r\n\r\nEstimated gas price: 27.101613372 gwei\r\n\r\nEstimated total gas used for script: 72470803\r\n\r\nEstimated amount required: 1.964075683664377716 ETH\r\n\r\n==========================\r\n\r\nTransactions saved to: /var/op_stack_deployer/optimism/packages/contracts-bedrock/broadcast/Deploy.s.sol/31337/run-latest.json\r\n\r\nSensitive values saved to: /var/op_stack_deployer/optimism/packages/contracts-bedrock/cache/Deploy.s.sol/31337/run-latest.json\r\n\r\nError: \r\nFailed to send transaction\r\n\r\nContext:\r\n- server returned an error response: error code -32000: Nonce too high. Expected nonce to be 850 but got 851. Note that transactions can't be queued when automining.\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "askucher", "2024-08-07T16:25:06Z", "2024-08-08T13:02:35Z", "2024-08-08T13:02:35Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDODjvEJM6SNNy1", 11384, "op-challenger: local env memory unlimited incease", "**Bug Description**\r\nAfter starting the local test environment for a while, I found that the challenger service did not seem to release memory. As the number of local blocks increased, the memory usage also increased. Using pprof to monitor, I found that the head was mainly generated by the createJob logic in the loop function.\r\n\r\nMy local computer memory is full. How should I deal with this problem? \r\nAlthough shutting down the challenger service does not affect the normal use of the chain.\r\n\r\n\r\n**Steps to Reproduce**\r\n\r\n![image](https://github.com/user-attachments/assets/615c84da-9773-4bf0-a794-86c376866806)\r\n\r\n<img width=\"721\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a8714ef3-56ab-46ff-a9e7-da286debb6d3\">\r\n\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\n - Operating System:  Ubuntu 20.04  16G\r\n - Package Version (or commit hash): lasted\r\n\r\n**Configurations:**\r\nDefault config\r\n\r\n**Logs:**\r\n\r\n**Additional context**\r\n", "CLOSED", 0, "lenny0x", "2024-08-07T08:52:39Z", "2024-08-09T08:10:16Z", "2024-08-09T08:10:16Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDODjvEJM6SGlOQ", 11365, "Interop: Add `validateMessage` to `CrossL2Inbox`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n# Overview\r\n\r\nAdd a new function to the `CrossL2Inbox` called `validateMessage(Identifier,bytes32)` that emits the `ExecutingMessage` event. This is a UX improvement for the `CrossL2Inbox`.\r\n\r\n# Definition of Done\r\n\r\nThe function is implemented and has full test coverage.", "CLOSED", 0, "tynes", "2024-08-06T15:44:51Z", "2024-08-07T21:50:30Z", "2024-08-07T21:50:30Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDODjvEJM6RwU4E", 11336, "CrossL2Inbox: ExecutingMessage Parameters Change", "Done: <https://github.com/ethereum-optimism/specs/pull/254>", "CLOSED", 0, "0xng", "2024-08-02T16:33:03Z", "2024-08-07T20:51:26Z", "2024-08-07T20:51:26Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDODjvEJM6RLr7q", 11266, "op-proposer: Retry getting output root on error", "The op-proposer doesn't currently retry getting the output root. Instead, it just waits for a full interval to retry. This affects, both the old L200 and new DGF code paths.\r\n\r\nEasy fix could be to just add a parameter like `OutputRetryInterval` to the config and retry in both L2OO and GDF loops getting the output root with this retry interval.", "CLOSED", 0, "sebastianst", "2024-07-29T15:43:13Z", "2024-08-06T12:10:09Z", "2024-08-06T12:10:08Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDODjvEJM6Mirdx", 10878, "Design doc todo: concrete deploy-config changes", "Based on ideas surfaced in ethereum-optimism/protocol-quest#221, write a concrete proposal of what attributes should go in the superchain-deployconfig and what attributes should go into a chain-deployconfig.\n\nTagging @mds1 because this is linked to the OP Stack Manager work, ideally we can clean up abstractions in the deploy config with the release of OP Stack manager\n\nhttps://www.notion.so/oplabs/Super-DeployConfig-c87aea690dce460db6b4cdbea17fc635#017b590bf4bc457e8eba5af385b4d303", "CLOSED", 0, "protolambda", "2024-04-10T17:39:29Z", "2024-08-10T00:28:33Z", "2024-08-10T00:28:33Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDODjvEJM55GdeX", 8518, "contracts-bedrock: invariant test flake", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe invariant tests can flake because they sometimes utilize contracts that they should not. This started happening after we added the ability to import L2 state using `loadAllocs(string)`. `forge-std` has a method `assumeNoPrecompiles` [here](https://github.com/foundry-rs/forge-std/blob/2f112697506eab12d433a65fdc31a639548fe365/src/StdCheats.sol#L317) that we should be using. If this doesn't fix the flakes, we may also need to implement an addition to `assumeNoPrecompiles` that also avoids calling the L2 implementations. Another solution would be to move the L1 contracts and L2 contracts into their own \"chains\" and be deliberate about switching between chains when interacting with the two. This is likely what we want to do long term, see [here](https://book.getfoundry.sh/cheatcodes/create-fork).\r\n\r\nhttps://app.circleci.com/pipelines/github/ethereum-optimism/optimism/35957/workflows/4ca544ed-faef-499b-9129-969b79d38f6d/jobs/1631834\r\n\r\n```\r\nEncountered 1 failing test in test/invariants/CrossDomainMessenger.t.sol:XDM_MinGasLimits_Succeeds\r\n[FAIL. Reason: <no data>]\r\n\t[Sequence]\r\n\t\tsender=0x000000000000000000000000000000000000017a addr=[test/invariants/CrossDomainMessenger.t.sol:RelayActor]0x1E964AC317b4cAD5E2178E3B98752f08A1d2B9E7 calldata=relay(uint8,uint8,bytes) args=[253, 0, 0x0603c07e27e7c582dd318d07332e38bf6786e06e4f970005ebd4b1a2fe4951d759d703dc47dd6c941e5526f38b41e42815a35236d22021f8f42243ba231124cc1dc4c780bfee64e1dad80fc66cf5bcef]\r\n\t\tsender=0x40fF5f219b95bF6Ac9dc48454FAD9266F0C6130a addr=[test/invariants/CrossDomainMessenger.t.sol:RelayActor]0x1E964AC317b4cAD5E2178E3B98752f08A1d2B9E7 calldata=relay(uint8,uint8,bytes) args=[101, 128, 0x0000000000000000000000000000000000000000000000000000000000002db6]\r\n\t\tsender=0x4200000000000000000000000000000000000630 addr=[test/invariants/CrossDomainMessenger.t.sol:RelayActor]0x1E964AC317b4cAD5E2178E3B98752f08A1d2B9E7 calldata=relay(uint8,uint8,bytes) args=[94, 253, 0xd06f159705442bd32ef616b12f81e2cb22393f2182add8caace4665244bdad20b9efab1eec7ffe7c1f5e4c81582179ec1ccd83e3f4548b95]\r\n\t\tsender=0x96d3F6c20EEd2697647F543fE6C08bC2Fbf39758 addr=0x4200000000000000000000000000000000000630 calldata=0x8f283970000000000000000000000000207b8adf30e1bfd8d15b99598d4116a51b70aee2 args=[]\r\n\t\tsender=0x0000000000000000000000000000000000002fFa addr=[test/invariants/CrossDomainMessenger.t.sol:RelayActor]0x1E964AC317b4cAD5E2178E3B98752f08A1d2B9E7 calldata=relay(uint8,uint8,bytes) args=[233, 255, 0x5a1b3074836bcf5f4c63632e765a3efcf516e3db7203e997663751f4b6ade57309d69ba75289751cce14bb5c8be662fc2af9520190fe5173e7ac3801]\r\n invariant_minGasLimits() (runs: 64, calls: 956, reverts: 217)\r\n```", "CLOSED", 0, "tynes", "2023-12-08T00:39:24Z", "2024-08-08T18:28:42Z", "2024-08-08T18:28:42Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDODjvEJM52utXg", 8158, "OptimismPortalResourceFuzz counter example", "Counter example found in `OptimismPortalResourceFuzz` test:\r\n\r\n```\r\nFailing tests:\r\nEncountered 1 failing test in test/OptimismPortal.t.sol:OptimismPortalResourceFuzz_Test\r\n[FAIL. Reason: EvmError: Revert Counterexample: calldata=0xf5b29dde0000000000000000000000000000000000000000000000000000000000002247000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004af003b5a00000000000000000000000000000000000000000000000000017ec1ef2c7896000000000000000000000000000000000000000000000000011828a102081ea900000000000000000000000000000000000000000000000d57b083046860bbef0000000000000000000000000000000000000000000000000000000000000001, args=[8775, 92, 2, 0, 0, 20115897178 [2.011e10], 420846383167638 [4.208e14], 78857665467915945 [7.885e16], 246126367290379254767 [2.461e20], 1]] testFuzz_systemConfigDeposit_succeeds(uint32,uint8,uint8,uint32,uint32,uint128,uint64,uint64,uint128,uint8) (runs: 387, \u03bc: 7107585, ~: 134588)\r\n```\r\n\r\nhttps://app.circleci.com/pipelines/github/ethereum-optimism/optimism/32821/workflows/13b4a2fe-d0ae-4352-9e0a-93991b53cc8a/jobs/1516445", "CLOSED", 0, "ajsutton", "2023-11-14T04:14:07Z", "2024-08-08T18:29:24Z", "2024-08-08T18:29:23Z", "ethereum-optimism/optimism", "2025-08-30 18:37:49"]
["I_kwDOJ_r-bs6QNLxd", 404, "improvements following live insertion walkthrough", "* Why is this PR failing https://github.com/ethereum-optimism/superchain-registry/pull/402 ?\r\n* We should run the contract versions check first, and if it fails we print a message and don't bother running the remaining tests which depend on the contract versions being correct", "CLOSED", 0, "geoknee", "2024-07-19T16:45:20Z", "2024-08-06T14:08:18Z", "2024-08-06T14:08:18Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:38:01"]
["I_kwDOMMiGhs6SbRZC", 92, "Make sure JSON RPC error codes for interop invariant failures match with sequencer", "https://github.com/ethereum-optimism/supersim/pull/85/files#r1709945234\n\nwhen the interop invariant checks fail for a tx, supersim should return the same error code and message as the sequencer", "CLOSED", 0, "tremarkley", "2024-08-08T21:05:55Z", "2024-08-08T23:15:37Z", "2024-08-08T23:15:37Z", "ethereum-optimism/supersim", "2025-08-30 18:38:29"]
["I_kwDOMMiGhs6SbK_G", 91, "Some deployment scripts do not work with supersim", "Hyperlane attempted to run one of their deployment scripts against supersim and it failed (https://discord.com/channels/1244729134312198194/1255653436079210496/1270498688065605742):\n\nnambrot: On a different note, I just tried to deploy Hyperlane contracts on supersim to create a prototype for relaying with supersim, but running into a pretty odd issue. Specifically, I can't seem to deploy multiple contracts, the first one will succeed, but then all subsequent ones will fail:\n```\n\u279c  solidity git:(nambrot/support-fallback-routing-in-sdk-metadata-builder) \u2717 forge create StaticAggregationIsmFactory --private-key $PKEY\n[\u280a] Compiling...\n[\u2822] Compiling 12 files with Solc 0.8.22\n[\u2806] Solc 0.8.22 finished in 132.20ms\nCompiler run successful!\nDeployer: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\nDeployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3\nTransaction hash: 0x381c9b4f6751f7b1525139e1d1b64c3f612bc25c985c043f3148abe97db530b4\n\u279c  solidity git:(nambrot/support-fallback-routing-in-sdk-metadata-builder) \u2717 forge create StaticAggregationIsmFactory --private-key \n[\u280a] Compiling...\nNo files changed, compilation skipped\nError: \nserver returned an error response: error code -32603: EVM error CreateCollision\n```\nWith a vanilla anvil node it does work:\n```\n\u279c  solidity git:(nambrot/support-fallback-routing-in-sdk-metadata-builder) \u2717 forge create StaticAggregationIsmFactory --private-key \n[\u280a] Compiling...\nNo files changed, compilation skipped\nDeployer: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\nDeployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3\nTransaction hash: 0xd7b62cab156771470cc146aeb8b17232fbdda7a52d7a5639bb408c955c782ade\n\u279c  solidity git:(nambrot/support-fallback-routing-in-sdk-metadata-builder) \u2717 forge create StaticAggregationIsmFactory --private-key \n[\u280a] Compiling...\nNo files changed, compilation skipped\nDeployer: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\nDeployed to: 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\nTransaction hash: 0x0638d1f0d6af915a7ee79c274d8114d0d1a238d57e4d340955a40e4301d3fd0a\n```\n\ntynes: EVM error CreateCollision its prob a nonce thing\nthat means there is already bytecode at the account that its trying to deploy to\nso if you script uses create2 thats prob it, since the code already exists\nthere should be a cheatcode or something vm.deployIfNotExists()\notherwise you need to do the create2 calculation in solidity and then do if (addy.code.length != 0) continue; \"do deployment\"\n\nnambrot: That's what I first thought to, but I'm not using Create2\nthis is a vanilla forge create command (which presumably just uses CREATE)\nand it does work with a vanilla anvil node i'm starting up as comparison\nWith both setups, the nonce does increase as expected\n\nMatt Solomon: This is because the deployer of 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 is an anvil default test account with a publicly known private key, so the contract addresses it deploys to with each subsequent nonce probably have code on some networks at some addresses, hence the CreateCollison\n\nnambrot: So this is off the supersim anvil nodes, but this did help me confirm that somehow there is existing contract state at the nonce 1 contract address of 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266. However the nonce is 0 for that key (since I'm not forking). However I did notice that the genesis block likely contains these overrides at 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 https://github.com/ethereum-optimism/supersim/blob/f0ef708507b521b2046b6a7646fd60a82301e167/genesis/generated/l1-allocs/901-l1-allocs.json#L1. I'm assuming y'all have a bunch of system contracts that you set this way, but I would probably recommend to set them on different addresses so that supersim users who will naturally choose the default key won't run into this\n\ntynes: This is likely a bug in genesis generation, I wonder if this nonce is being set in fresh L2 genesis states\n\nnambrot: would hypothesize that you do use that key for genesis generation, but the nonce itsn't getting set in the genesis block?\n\nproto: I believe the deployer on L1 dev genesis is a default account. And the deployed contracts would all have addresses that depend on this test deployer account and nonce. The deployer test script contract itself should wipe itself as part of the Allocs L1 output routine. Somewhere in there it also sets the pre funded accounts. And in either routine it might end up with the nonce reset. And this is the L1 dev genesis, separate from the L2 genesis (of which I believe we do check the number of generated L2 accounts matches the expectations and excludes scripts and such)\n\nnambrot: fwiw i ran into this issue on the l1 dev chain\n", "CLOSED", 0, "tremarkley", "2024-08-08T20:46:02Z", "2024-08-10T06:53:24Z", "2024-08-10T06:53:24Z", "ethereum-optimism/supersim", "2025-08-30 18:38:29"]
["I_kwDOMMiGhs6RwwSM", 79, "Error handling on batch requests ", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nRight now if an individual request within a batch request fails the interop invariant check, then the entire response sends an error. This should be updated so that the individual response returns an error but the other requests/responses still go through. More context [here](https://github.com/ethereum-optimism/supersim/pull/76#discussion_r1700680145).", "CLOSED", 0, "tremarkley", "2024-08-02T17:43:46Z", "2024-08-08T23:15:36Z", "2024-08-08T23:15:36Z", "ethereum-optimism/supersim", "2025-08-30 18:38:29"]
["I_kwDOMMiGhs6P7xr0", 55, "op-simulator: support for batch transactions", "The op-simulator will need to be able to handle batch transactions", "CLOSED", 0, "tremarkley", "2024-07-17T23:23:13Z", "2024-08-08T23:15:36Z", "2024-08-08T23:15:36Z", "ethereum-optimism/supersim", "2025-08-30 18:38:29"]
["I_kwDOMMiGhs6NW0Jy", 19, "op-simulator: invariant checks for interop messages", "`op-simulator` must check interop messages for the invariants: \r\n1. Timestamp invariant: the timestamp of inclusion of the executing message should be higher than the timestamp of the initiating message. \r\n2. ChainId invariant: The initiating message must be in the dependency set. \r\n3. Message expiry invariant: The timestamp of the executing message at the time of inclusion must be lower than the initiating message timestamp. \r\n\r\nIf any of these conditions is not met, then the user's RPC should fail.\r\n\r\n**Definition of Done**\r\n`op-simulator` checks interop messages for invariants and fails the RPC if they are not met.", "CLOSED", 0, "fainashalts", "2024-06-25T03:40:15Z", "2024-08-06T22:20:08Z", "2024-08-06T22:20:08Z", "ethereum-optimism/supersim", "2025-08-30 18:38:29"]
["I_kwDOMMiGhs6NWyvu", 18, "op-simulator: simulate `eth_sendRawTransaction` to identify interop messages", "In order to determine in all cases whether an interop message is sent, we must simulate `eth_sendRawTransaction`, likely using `debug_traceCall`. \r\n\r\n`debug_traceCall` is not currently supported by Anvil, though it seems the Anvil devs are open to supporting it. This task likely involves two parts: \r\n1. A PR into Anvil to support `debug_traceCall`\r\n2. Simulation inside of `op-simulator` to identify RPCs that result in interop messages.", "CLOSED", 0, "fainashalts", "2024-06-25T03:33:04Z", "2024-08-06T22:20:08Z", "2024-08-06T22:20:08Z", "ethereum-optimism/supersim", "2025-08-30 18:38:29"]
["I_kwDOFpg0Ns58QY7G", 624, "Update tokenlist to new zod based validation", "Complete https://github.com/ethereum-optimism/ethereum-optimism.github.io/tree/10-31-feat_Update_validation", "CLOSED", 0, "roninjin10", "2024-01-16T19:23:57Z", "2024-08-18T01:55:18Z", "2024-08-18T01:55:17Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 18:40:15"]
["I_kwDOH2Qg5s6SAUjl", 356, "Enable the GitHub Slack integration ", "Hello Team,\r\n\r\nI\u2019m reaching out on behalf of [Lisk](https://lisk.com/). We\u2019re currently a member of the [OP Superchain ecosystem](https://www.superchain.eco/ecosystem-chains/lisk).\r\n\r\nWe currently have the [lisk-node](https://github.com/LiskHQ/lisk-node) repo which currently allows operators to conveniently run their nodes on Lisk L2.\r\n\r\nTo help our integration partners operate their nodes on the Lisk L2 we currently have the [lisk-node](https://github.com/LiskHQ/lisk-node) repo. Based on our recent challenges with the Fjord upgrade, we have established an internal process to keep ourselves up-to-date based on your repo updates. An integral part of the long-term solution involves setting up notifications on our Slack channels which cannot be achieved without you enabling the integration on your GitHub repo.\r\n\r\nSo, could we please request you to enable the [GitHub Slack integration](https://github.com/integrations/slack) on your repo to help us be more efficient?\r\nFYR, the [ethereum-optimism/optimism](https://github.com/ethereum-optimism/optimism) repo already supports this integration.\r\n\r\nKindly let us know if you need any further information from our end.\r\nWe anticipate your support and thank you in advance.\r\n\r\nBest regards,\r\nLisk Team", "CLOSED", 0, "Madhulearn6", "2024-08-05T22:06:13Z", "2024-08-13T19:18:38Z", "2024-08-13T19:18:38Z", "ethereum-optimism/op-geth", "2025-08-30 18:40:34"]
["I_kwDOH2Qg5s6P0-bt", 351, "Does op-geth work with path-based state scheme?", "Path-based state scheme was introduced in geth version 1.13.0 and became the default in version 1.14.0. I understand that op-geth follows geth closely, but I'm curious if this option is also available in op-geth. Has there been any internal experimentation related to this feature?", "CLOSED", 0, "celochoi", "2024-07-17T08:46:01Z", "2024-08-13T20:56:15Z", "2024-08-13T20:56:14Z", "ethereum-optimism/op-geth", "2025-08-30 18:40:34"]
["I_kwDOJ_r-bs6S11xO", 467, "report full standard validation results for standard candidate chains to new slack channel", "These are useful to get from time to time, for an update on the question \u201cwhat blocks this chain from becoming standard\u201d?\r\n\r\nImplementation sketch:\r\n* get a list of chains which are standard_candidates (inspect chain.StandardChainCandidate)\r\n* just promote-to-standard chainID, or you could [duplicate the Go code which does that](https://github.com/ethereum-optimism/superchain-registry/blob/0cebefcddd72dc646d0c919e3983b6e65726a8af/add-chain/cmd/promote-to-standard.go#L27-L31)\r\n* invoke the full set of standard validation checks\r\n* report to new slack channel on failure (but we need a way to separate / indicate this is a special failure, maybe a new slack channel would be fine)", "CLOSED", 0, "geoknee", "2024-08-13T15:06:25Z", "2024-08-14T17:16:46Z", "2024-08-14T17:16:46Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:40:55"]
["I_kwDOJ_r-bs6SgWwH", 458, "Do not use overrides in `LoadOPStackRollupConfig`", "All information should be stored in and read from the superchain registry. \r\n\r\n* update the op-node `LoadOPStackRollupConfig` function\r\n* update the add-chain module to capture the data\r\n* possibly update existing config toml files to backport missing data\r\n\r\nWe can lean on the rollup config diff checker tool to help guide us with this (we should not have any net diff in the configs being exported, I think). \r\n\r\nMy preference would be to keep `LoadOPStackRollupConfig` very transparent and backport any necessary data into the individual config files in the registry.", "CLOSED", 0, "geoknee", "2024-08-09T13:41:54Z", "2024-08-13T22:56:59Z", "2024-08-13T22:56:59Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:40:55"]
["I_kwDOJ_r-bs6RqUW1", 432, "docs: outline config changes related to renaming plasma to alt-da ", "Since renaming the plasma feature to alt-da and replacing all references to plasma in the code will cause breaking changes, we should document how chains using the deprecated plasma feature can migrate to alt-da. Changes to document include config cli params and env vars + version of op-node that includes the breaking change.", "CLOSED", 0, "bitwiseguy", "2024-08-02T01:33:55Z", "2024-08-15T13:26:47Z", "2024-08-15T13:26:47Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:40:55"]
["I_kwDOJ_r-bs6Rl28M", 430, "superchain_level should match decentralization stage", "Currently we have the following categories:\r\n* `superchain_level` = 1 : stage 0\r\n* `superchain_level` =2 : stage 1\r\n\r\nWe should decrement the `superchain_level` by 1 so that they match, and we avoid confusion.", "CLOSED", 0, "bitwiseguy", "2024-08-01T14:26:09Z", "2024-08-15T16:12:22Z", "2024-08-15T16:12:22Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:40:55"]
["I_kwDOJ_r-bs6Rlpw1", 429, "rename plasma --> alt-da", "The name `plasma` has been deprecated and we should use `alt-da` instead. This means we should replace all references to `plasma` across the superchain-registry, monorepo, op-node, etc. \r\n\r\nSince `alt-da` is still a beta feature, we can break backwards compatibility, but should work with devrel to come up with a way to migrate chains that are already using `plasma`", "CLOSED", 0, "bitwiseguy", "2024-08-01T14:02:22Z", "2024-08-14T19:27:45Z", "2024-08-14T19:27:44Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:40:55"]
["I_kwDOJ_r-bs6Rli4W", 428, "ci: reroute validation errors/alerts caused by 3rd party components", "Currently the validation checks run as part of CI jobs that block PRs from being merged if there are failures. Also, the hourly CI job runs these same checks and reports failures to the `#notify-ci-failures` channel, which is generally used to detect failures of `ethereum-optimism` code, not external 3rd party software. Open PRs should not be blocked by issues with chains that are irrelevant to the PR.\n\nWe should make the following changes:\n1. Create a new, independent validation CI job that runs every hour and routes its notifications to a new slack channel\n2. Adjust the current \"open PR\" CI job so that it only runs validation checks on chains whose config changes as part of that PR (i.e. a new chain added, or existing chain modified). We should be able to run `git diff` to detect which chains have been changed, then leverage the `just validate <chain-id>` command to validation only those chains.\n\nSeparate standard-candidate chain validation checks:\n* Set of validation checks they must pass to join the registry - should run in CI and block pr merge if there are failures\n* Separate set of validation checks that inform what they need to fix before becoming standard\n  * perhaps manually triggered github action", "CLOSED", 0, "bitwiseguy", "2024-08-01T13:52:25Z", "2024-08-13T15:10:05Z", "2024-08-13T15:10:04Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:40:55"]
["I_kwDOJ_r-bs6Mr4CK", 291, "SuperchainRegistry: add \"mini spec\" for hardfork timestamp inheritance behaviour", "This will help with cross-language implementation.", "CLOSED", 0, "geoknee", "2024-06-14T16:38:08Z", "2024-08-13T09:35:00Z", "2024-08-13T09:35:00Z", "ethereum-optimism/superchain-registry", "2025-08-30 18:40:55"]
["I_kwDODjvEJM6TFDzu", 11491, "op-chain-ops: easy bindings for script calls", "To interact with forge-scripts in Go it would be nice to automatically infer script bindings, without code-gen or too much manual code.\r\n\r\nScripts are simple to invoke, since there are no tx options, infinite gas, no tx cost, no gas estimation, and local state.\r\nIt's mostly the ABI that needs to be inferred / smoothed out somehow.\r\n\r\nSee forge script-runner for example test, where we manually call a function, by computing the 4byte selector and running the call: https://github.com/ethereum-optimism/optimism/pull/11447\r\n\r\nOne idea is to define bindings like:\r\n```go\r\ntype MyBindings struct {\r\n  DeployThing func(foobar common.Address) error\r\n}\r\n```\r\nWith some reflection we can take the strut, and instantiate a method that does the right ABI call to the script `Host`, and decodes any return data / error.\r\nThis is very similar to what we did with the precompile ABI decoding/encoding, just the other way around.\r\n\r\nWe could also look into the ABI bindings utils of the op-challenger; we do have the ABI data of scripts, and can use that if necessary (To type check our bindings, or as part of inferring an interpretation of binding calls).\r\n", "CLOSED", 0, "protolambda", "2024-08-15T07:39:49Z", "2024-08-17T05:48:07Z", "2024-08-17T05:48:07Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6S6jdy", 11469, "Increase `MaxFrameLen` and `MaxInputSize` for alt-da", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen using alt-da, we found that these two parameters were limiting alt-da\u2019s throughput. \r\n\r\n- https://github.com/ethereum-optimism/optimism/blob/ddc37daa49558c2fb5c1a92e694eeb7de5942e00/op-batcher/batcher/service.go#L217\r\n- https://github.com/ethereum-optimism/optimism/blob/ddc37daa49558c2fb5c1a92e694eeb7de5942e00/op-node/rollup/derive/frame.go#L14\r\n\r\nWith max-l1-txbytes set to 130k, we\u2019re only able to achieve around 20 TPS on our testnet. Additionally, if max-l1-bytes exceeds maxFrameLen, the op-node will fail to parse the frame. Therefore, these two parameters need to be adjusted simultaneously.\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nWe would like to adjust the size of these two parameters or add logic specifically for alt-da, so that when using alt-da, a higher limit can be achieved, allowing for greater throughput. \r\n\r\nSpecifically, we would like to set both parameter to 4mb for altda. \r\n", "OPEN", 0, "wenxing-alt", "2024-08-14T03:36:26Z", "2024-08-14T03:39:01Z", null, "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6S3J0O", 11461, "Web3.js Plugin not working", "Hi guys, I was using the [Optimism web3.js plugin](https://www.npmjs.com/package/@eth-optimism/web3.js-plugin) and I noticed that the methods that are interacting with the L2 are not working properly (returning `0n`)\r\n```js\r\nawait web3.op.getBaseFee(); \r\n// 0n\r\nawait web3.op.getGasPrice(); \r\n// 0n \r\n```\r\nWe are hosting 3 hackathons/bounties with the [web3.js africa tour](https://x.com/web3_js/status/1822193833964195989) and we wanted to promote this plugin there as well, but I've noticed is not working properly, are you able to solve this asap so we can still include the plugin for the hackathons?\r\n\r\nThanks.", "CLOSED", 0, "SantiagoDevRel", "2024-08-13T18:10:27Z", "2024-08-14T20:26:31Z", "2024-08-14T16:52:44Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6SzfTp", 11456, "Contract verification doesn't work at the moment", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nContract verification doesn't work at the moment with foundry basic template contract.\r\n\r\n**Steps to Reproduce**\r\n\r\n```\r\n$ forge --version\r\nforge 0.2.0 (626221f 2024-08-02T00:19:31.215591698Z)\r\n```\r\n\r\n1. `cd an_empty_dir && forge init`\r\n2. `export ETHERSCAN_API_KEY=my_api_key`\r\n3.  `forge script script/Counter.s.sol:CounterScript --broadcast --verify`\r\n\r\n```\r\nNo files changed, compilation skipped\r\nEnter keystore password:\r\nScript ran successfully.\r\n\r\n## Setting up 1 EVM.\r\n\r\n==========================\r\n\r\nChain 10\r\n\r\nEstimated gas price: 0.1 gwei\r\n\r\nEstimated total gas used for script: 138713\r\n\r\nEstimated amount required: 0.0000138713 ETH\r\n\r\n==========================\r\n\r\n##### optimism\r\n\u2705  [Success]Hash: 0x6768f633740ecff9298f43133bb83b310818a1f2aeb8463d8ce864ee163c0f46\r\nContract Address: 0xeAA04CAaD3Dff5d6D8cA4994DC502bB4D69286D2\r\nBlock: 123972472\r\nPaid: 0.000001075526874251 ETH (106721 gas * 0.010077931 gwei)\r\n\r\n\u2705 Sequence #1 on optimism | Total Paid: 0.000001075526874251 ETH (106721 gas * avg 0.010077931 gwei)\r\n                                                                                                                                            \r\n\r\n==========================\r\n\r\nONCHAIN EXECUTION COMPLETE & SUCCESSFUL.\r\n##\r\nStart verification for (1) contracts\r\nStart verifying contract `0xeAA04CAaD3Dff5d6D8cA4994DC502bB4D69286D2` deployed on optimism\r\n\r\nSubmitting verification for [src/Counter.sol:Counter] 0xeAA04CAaD3Dff5d6D8cA4994DC502bB4D69286D2.\r\nSubmitted contract for verification:\r\n\tResponse: `OK`\r\n\tGUID: `msfijwrhzivsmcztue1szn6h5yrvnawivviet5sxis88n8yskb`\r\n\tURL: https://optimistic.etherscan.io/address/0xeaa04caad3dff5d6d8ca4994dc502bb4d69286d2\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nContract verification status:\r\nResponse: `NOTOK`\r\nDetails: `Pending in queue`\r\nError during verification: Checking verification result failed: Verification is still pending...\r\n\r\nTransactions saved to: /home/hellwolf/tmp/test/broadcast/Counter.s.sol/10/run-latest.json\r\n\r\nSensitive values saved to: /home/hellwolf/tmp/test/cache/Counter.s.sol/10/run-latest.json\r\n\r\nError: \r\nNot all (0 / 1) contracts were verified!\r\n```\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\n\r\n- Operating System: NixOS\r\n- forge 0.2.0 (626221f 2024-08-02T00:19:31.215591698Z)\r\n- Solc 0.8.26", "CLOSED", 0, "hellwolf", "2024-08-13T10:17:28Z", "2024-08-13T15:01:48Z", "2024-08-13T15:01:43Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6SoyGu", 11440, "Deprecated `selfdestruct` usage in `SafeSend.sol`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nThe `selfdestruct` operation used in the `SafeSend.sol` file is deprecated and its behavior has changed following the Cancun hard fork, potentially leading to unexpected behavior and security issues.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Open the `src/universal/SafeSend.sol` file.\r\n2. Navigate to line 9.\r\n3. Observe the use of the `selfdestruct` operation.\r\n\r\nwhen \r\nbuild with command \"pnpm build\"\r\n\r\n**Expected behavior**\r\nThe `selfdestruct` operation should be avoided in new contracts, and an alternative method should be used to handle Ether transfers securely.\r\n\r\n**Environment Information:**\r\n- Operating System: [e.g. Ubuntu 20.04]\r\n- Package Version (or commit hash): [e.g. op-node v1.9.0]\r\n\r\n**Configurations:**\r\n\r\n\r\n**Logs:**\r\n```plaintext\r\nWarning (5159): \"selfdestruct\" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.\r\n --> src/universal/SafeSend.sol:9:9:\r\n  |\r\n9 |         selfdestruct(_recipient);\r\n  |         ^^^^^^^^^^^^", "CLOSED", 0, "siddharth0a", "2024-08-12T06:42:06Z", "2024-08-12T15:54:55Z", "2024-08-12T15:54:30Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6Sh2Tg", 11425, "eth2-testnet-genesis: not found on v1.9.0", "If I try to run `make devnet-up` on v1.9.0 - i get this error.\r\n\r\n```\r\neth2-testnet-genesis path: \r\nl1-generate-beacon-genesis.sh: 7: eth2-testnet-genesis: not found\r\nTraceback (most recent call last):\r\n  File \"/optimism/./bedrock-devnet/main.py\", line 9, in <module>\r\n    main()\r\n  File \"/optimism/./bedrock-devnet/main.py\", line 5, in main\r\n    devnet.main()\r\n  File \"/optimism/bedrock-devnet/devnet/__init__.py\", line 118, in main\r\n    devnet_deploy(paths)\r\n  File \"/optimism/bedrock-devnet/devnet/__init__.py\", line 201, in devnet_deploy\r\n    run_command([\r\n  File \"/optimism/bedrock-devnet/devnet/__init__.py\", line 365, in run_command\r\n    return subprocess.run(\r\n           ^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.12/subprocess.py\", line 571, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['sh', 'l1-generate-beacon-genesis.sh']' returned non-zero exit status 127\r\n```\r\n\r\nI think there was some missing configuration.", "CLOSED", 0, "imnotanoob", "2024-08-09T17:18:26Z", "2024-08-14T08:19:37Z", "2024-08-09T17:47:20Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6ShKmB", 11421, "Where is the block timestamp set?", "Can someone please point me to where in the code the block timestamp is set? By block timestamp I mean the one that is returned in the 'timestamp' field after an rpc call with method 'eth_getBlockByNumber'\r\n", "CLOSED", 0, "Mattiatore", "2024-08-09T15:25:33Z", "2024-08-12T08:40:12Z", "2024-08-09T23:08:37Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6SgkvU", 11418, "Interop: chain genesis MVP through forge-script Go integration", "Implement MVP of https://github.com/ethereum-optimism/design-docs/pull/61\r\n\r\n", "CLOSED", 0, "protolambda", "2024-08-09T14:08:39Z", "2024-08-15T07:50:04Z", "2024-08-15T07:50:03Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6R_Xt9", 11360, "Interop: design doc for refactor of deployer tooling, using Go forge script execution", "Last week we drafted a design doc on \"deployment chains\", the idea of incremental builds of deployments, to integrate the forge scripts efficiently into op-e2e.\r\n\r\nA newer alternative solution is to run the forge scripts directly in Go. This might make the setup fast enough to avoid the complexity of caching, and generally improves integration (we can capture any intermediate deployment behavior/outputs as necessary).\r\n\r\nThis new idea needs a design-doc, so we can compare it against the cache based solution.\r\n", "CLOSED", 0, "protolambda", "2024-08-05T19:23:09Z", "2024-08-13T05:02:08Z", "2024-08-13T05:02:07Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6RwV4w", 11337, "SuperchainERC20: Event Tense Change", "In review: <https://github.com/ethereum-optimism/specs/pull/304>", "CLOSED", 0, "0xng", "2024-08-02T16:35:15Z", "2024-08-13T19:18:08Z", "2024-08-13T19:18:08Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6RqyIW", 11328, "op-node: Race in p2p", "Run op-node from develop with the build flag `-race`.\r\n\r\n<details>\r\n<summary>Enormous DATA RACE stack trace</summary>\r\n\r\n```\r\n==================\r\nWARNING: DATA RACE\r\nWrite at 0x00c0024a9850 by goroutine 395:\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/store.(*DecayApplicationScores).Apply()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/store/iface.go:78 +0x19c\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/store.(*recordsBook[go.shape.string,go.shape.*uint8]).SetRecord()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/store/records_book.go:137 +0x224\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/store.(*scoreBook).SetScore()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/store/scorebook.go:92 +0xc8\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/store.(*extendedStore).SetScore()\r\n      <autogenerated>:1 +0x3c\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.(*peerApplicationScorer).decayScores()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/app_scores.go:91 +0x1ac\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.(*peerApplicationScorer).decayConnectedPeerScores()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/app_scores.go:105 +0x78\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.(*peerApplicationScorer).start.func1()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/app_scores.go:120 +0x15c\r\n\r\nPrevious read at 0x00c0024a9850 by goroutine 394:\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/store.(*scoreBook).GetPeerScores()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/store/scorebook.go:80 +0x134\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/store.(*scoreBook).GetPeerScore()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/store/scorebook.go:84 +0x58\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/store.(*extendedStore).GetPeerScore()\r\n      <autogenerated>:1 +0x30\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.(*NodeP2P).GetPeerScore()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/node.go:216 +0x58\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/monitor.(*PeerMonitor).checkNextPeer()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/monitor/peer_monitor.go:85 +0x1c8\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/monitor.(*PeerMonitor).checkNextPeer-fm()\r\n      <autogenerated>:1 +0x34\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/monitor.(*PeerMonitor).background()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/monitor/peer_monitor.go:113 +0x1ac\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/monitor.(*PeerMonitor).Start.gowrap1()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/monitor/peer_monitor.go:61 +0x40\r\n\r\nGoroutine 395 (running) created at:\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.(*peerApplicationScorer).start()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/app_scores.go:111 +0x98\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.(*NodeP2P).init()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/node.go:166 +0x11ec\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.NewNodeP2P()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/node.go:60 +0x100\r\n  github.com/ethereum-optimism/optimism/op-node/node.(*OpNode).initP2P()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/node/node.go:489 +0x13c\r\n  github.com/ethereum-optimism/optimism/op-node/node.(*OpNode).init()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/node/node.go:139 +0x508\r\n  github.com/ethereum-optimism/optimism/op-node/node.New()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/node/node.go:107 +0x2d4\r\n  main.RollupNodeMain()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/cmd/main.go:95 +0x3ec\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).checkAndCleanFiles()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db_util.go:52 +0x1d0\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:137 +0x674\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x1ec\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:665 +0x138\r\n  fmt.(*ss).doScanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:1230 +0x328\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).recoverJournal()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:492 +0x84\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:132 +0x668\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:205 +0x274\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseNamePtr()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:674 +0x124\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func1()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:339 +0xb8\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func2()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:363 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:414 +0x638\r\n  github.com/syndtr/goleveldb/leveldb.(*session).recover()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/session.go:140 +0xc0\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:191 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb.OpenFile()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:227 +0x6c\r\n  github.com/ipfs/go-ds-leveldb.NewDatastore()\r\n      /Users/anacrolix/go/pkg/mod/github.com/ipfs/go-ds-leveldb@v0.5.0/datastore.go:47 +0x194\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.loadLibp2pOpts()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:273 +0x10a4\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.NewConfig()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:51 +0x294\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x1ec\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:665 +0x138\r\n  fmt.(*ss).doScanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:1230 +0x328\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).checkAndCleanFiles()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db_util.go:52 +0x1d0\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:137 +0x674\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x1ec\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:665 +0x138\r\n  fmt.(*ss).doScanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:1230 +0x328\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).recoverJournal()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:492 +0x84\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:132 +0x668\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:205 +0x274\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseNamePtr()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:674 +0x124\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func1()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:339 +0xb8\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func2()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:363 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:414 +0x638\r\n  github.com/syndtr/goleveldb/leveldb.(*session).recover()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/session.go:140 +0xc0\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:191 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb.OpenFile()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:227 +0x6c\r\n  github.com/ethereum/go-ethereum/p2p/enode.newPersistentDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101315.3-rc.1/p2p/enode/nodedb.go:100 +0x90\r\n  github.com/ethereum/go-ethereum/p2p/enode.OpenDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101315.3-rc.1/p2p/enode/nodedb.go:84 +0x64\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.loadDiscoveryOpts()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:175 +0x4ac\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.NewConfig()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:47 +0x204\r\n  github.com/ethereum-optimism/optimism/op-node.NewConfig()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/service.go:56 +0x19c\r\n  main.RollupNodeMain()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/cmd/main.go:82 +0x200\r\n  main.main.LifecycleCmd.func1()\r\n      /Users/anacrolix/optimism/src/optimism/op-service/cliapp/lifecycle.go:56 +0x1e8\r\n  github.com/urfave/cli/v2.(*Command).Run()\r\n      /Users/anacrolix/go/pkg/mod/github.com/urfave/cli/v2@v2.27.3/command.go:276 +0xeb4\r\n  github.com/urfave/cli/v2.(*App).RunContext()\r\n      /Users/anacrolix/go/pkg/mod/github.com/urfave/cli/v2@v2.27.3/app.go:333 +0xd98\r\n  main.main()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/cmd/main.go:68 +0xb38\r\n\r\nGoroutine 394 (running) created at:\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/monitor.(*PeerMonitor).Start()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/monitor/peer_monitor.go:61 +0x134\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.(*NodeP2P).init()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/node.go:164 +0x11d0\r\n  github.com/ethereum-optimism/optimism/op-node/p2p.NewNodeP2P()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/node.go:60 +0x100\r\n  github.com/ethereum-optimism/optimism/op-node/node.(*OpNode).initP2P()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/node/node.go:489 +0x13c\r\n  github.com/ethereum-optimism/optimism/op-node/node.(*OpNode).init()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/node/node.go:139 +0x508\r\n  github.com/ethereum-optimism/optimism/op-node/node.New()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/node/node.go:107 +0x2d4\r\n  main.RollupNodeMain()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/cmd/main.go:95 +0x3ec\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).checkAndCleanFiles()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db_util.go:52 +0x1d0\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:137 +0x674\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x1ec\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:665 +0x138\r\n  fmt.(*ss).doScanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:1230 +0x328\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).recoverJournal()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:492 +0x84\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:132 +0x668\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:205 +0x274\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseNamePtr()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:674 +0x124\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func1()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:339 +0xb8\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func2()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:363 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:414 +0x638\r\n  github.com/syndtr/goleveldb/leveldb.(*session).recover()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/session.go:140 +0xc0\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:191 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb.OpenFile()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:227 +0x6c\r\n  github.com/ipfs/go-ds-leveldb.NewDatastore()\r\n      /Users/anacrolix/go/pkg/mod/github.com/ipfs/go-ds-leveldb@v0.5.0/datastore.go:47 +0x194\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.loadLibp2pOpts()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:273 +0x10a4\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.NewConfig()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:51 +0x294\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x1ec\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:665 +0x138\r\n  fmt.(*ss).doScanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:1230 +0x328\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).checkAndCleanFiles()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db_util.go:52 +0x1d0\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:137 +0x674\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x1ec\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:665 +0x138\r\n  fmt.(*ss).doScanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:1230 +0x328\r\n  fmt.Fscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:143 +0x94\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).List()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:465 +0x364\r\n  github.com/syndtr/goleveldb/leveldb.(*DB).recoverJournal()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:492 +0x84\r\n  github.com/syndtr/goleveldb/leveldb.openDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:132 +0x668\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:205 +0x274\r\n  fmt.Sscanf()\r\n      /opt/homebrew/Cellar/go/1.22.5/libexec/src/fmt/scan.go:114 +0x130\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseName()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:651 +0x74\r\n  github.com/syndtr/goleveldb/leveldb/storage.fsParseNamePtr()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:674 +0x124\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func1()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:339 +0xb8\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta.func2()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:363 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb/storage.(*fileStorage).GetMeta()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/storage/file_storage.go:414 +0x638\r\n  github.com/syndtr/goleveldb/leveldb.(*session).recover()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/session.go:140 +0xc0\r\n  github.com/syndtr/goleveldb/leveldb.Open()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:191 +0xb0\r\n  github.com/syndtr/goleveldb/leveldb.OpenFile()\r\n      /Users/anacrolix/go/pkg/mod/github.com/syndtr/goleveldb@v1.0.1-0.20220614013038-64ee5596c38a/leveldb/db.go:227 +0x6c\r\n  github.com/ethereum/go-ethereum/p2p/enode.newPersistentDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101315.3-rc.1/p2p/enode/nodedb.go:100 +0x90\r\n  github.com/ethereum/go-ethereum/p2p/enode.OpenDB()\r\n      /Users/anacrolix/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101315.3-rc.1/p2p/enode/nodedb.go:84 +0x64\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.loadDiscoveryOpts()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:175 +0x4ac\r\n  github.com/ethereum-optimism/optimism/op-node/p2p/cli.NewConfig()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/p2p/cli/load_config.go:47 +0x204\r\n  github.com/ethereum-optimism/optimism/op-node.NewConfig()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/service.go:56 +0x19c\r\n  main.RollupNodeMain()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/cmd/main.go:82 +0x200\r\n  main.main.LifecycleCmd.func1()\r\n      /Users/anacrolix/optimism/src/optimism/op-service/cliapp/lifecycle.go:56 +0x1e8\r\n  github.com/urfave/cli/v2.(*Command).Run()\r\n      /Users/anacrolix/go/pkg/mod/github.com/urfave/cli/v2@v2.27.3/command.go:276 +0xeb4\r\n  github.com/urfave/cli/v2.(*App).RunContext()\r\n      /Users/anacrolix/go/pkg/mod/github.com/urfave/cli/v2@v2.27.3/app.go:333 +0xd98\r\n  main.main()\r\n      /Users/anacrolix/optimism/src/optimism/op-node/cmd/main.go:68 +0xb38\r\n==================\r\n```\r\n</details>\r\n\r\nPossibly related to https://github.com/ethereum-optimism/optimism/issues/8086#issuecomment-1804565448 but dubious.\r\n", "CLOSED", 0, "anacrolix", "2024-08-02T03:17:33Z", "2024-08-13T09:03:50Z", "2024-08-13T09:03:50Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6Rpz5H", 11323, "Remove immutable `L2_CHAIN_ID` from `FaultDisputeGame.sol`", "Remove the FDG [immutable L2 chain ID](https://github.com/ethereum-optimism/optimism/blob/b22d6d19a0f7b048fe79f53a99f2053dd4b7891a/packages/contracts-bedrock/src/dispute/FaultDisputeGame.sol#L56-L57).\r\n\r\nRemoving this would simplify and reduce cost of OP Stack Manager deploys.\r\n\r\n", "OPEN", 0, "pauldowman", "2024-08-01T23:18:23Z", "2024-08-15T00:14:02Z", null, "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6RV0rL", 11281, "Deploy-chain genesis generation MVP", "Implement MVP of https://github.com/ethereum-optimism/design-docs/pull/52\r\nThis sets up the genesis of L1 and L2, supporting multiple L2s, without in-depth configuration or more step-wise deployments.\r\n", "CLOSED", 0, "protolambda", "2024-07-30T18:17:47Z", "2024-08-15T07:50:31Z", "2024-08-15T07:50:30Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6Q_xeg", 11253, "Chain-deploys: implement caching part MVP", "See design in: https://github.com/ethereum-optimism/design-docs/pull/52\r\n\r\nThe caching part, where we store a state-diff, keyed by hash of the involved inputs and computation, is the main building block of the proposal.\r\nWe can draft this, without refactoring the allocs-generation itself, to derisk the proposal.\r\n", "CLOSED", 0, "protolambda", "2024-07-26T17:13:29Z", "2024-08-15T07:51:00Z", "2024-08-15T07:50:52Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6Q4sBx", 11244, "SuperchainERC20: OptimismSuperchainERC20 Implementation", "Implement a convert-specific implementation of the SuperchainERC20 token. It should:\n- Give `mint` and `burn` rights to the `L2StandardBridge`\n- Extend from Solady's ERC20\n- Follow the SuperchainERC20 standard, as in, have `sendERC20` and `relayERC20` functions\n- Emit the relevant events\n- Unit tests\n- Invariant tests ", "CLOSED", 0, "0xng", "2024-07-25T18:52:03Z", "2024-08-13T04:28:57Z", "2024-08-13T04:28:57Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6QkKTX", 11207, "GovDelegation: Interop Design Doc", "# Definition of Done\n\nA specification document on how the `GovernanceDelegation` will be modified to make `GovernanceToken` delegations interoperable (cross-chain).\n\nhttps://github.com/ethereum-optimism/design-docs/pull/54", "CLOSED", 0, "cairoeth", "2024-07-23T14:42:44Z", "2024-08-12T17:22:50Z", "2024-08-12T17:22:50Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6QYB7F", 11193, "op-proposer: Uniform proposal intervals across restarts", "When starting a new proposer instance, it just waits for a full proposal interval until submitting its first proposal, see `loopDGF()`.\r\n\r\nIt is better to inspect at startup when the last proposal was submitted and then adjust the first submission interval accordingly, to achieve uniform proposal intervals across proposer restarts. The [`DisputeGameFactory`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/dispute/DisputeGameFactory.sol) contains getters to get the latest game.\r\n\r\nThe op-challenger uses contract bindings to query for this. Some code duplication could be done here by moving the common code into its own reuseable package like `op-dispute-contracts` and then use it from the challenger and proposer.\r\n\r\nSince the L2OO is being deprecated, this should only be implemented for the DGF.\r\n\r\nThe value for metric `op_proposer_default_refs_number` should also be set at startup, so that there's no large gap in metrics while waiting until the next proposal.", "CLOSED", 0, "sebastianst", "2024-07-22T08:02:56Z", "2024-08-16T13:37:40Z", "2024-08-16T13:37:39Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6NUYXv", 10994, "interop: move to fault proofs based `OptimismPortal`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe interop contract deployments currently use [OptimismPortalInterop](https://github.com/ethereum-optimism/optimism/blob/31653e5e51c22a239dad1a682b931e696e1539c9/packages/contracts-bedrock/src/L1/OptimismPortalInterop.sol), based on our [smart contract feature development](https://github.com/ethereum-optimism/design-docs/blob/f9d0ea16cddc514546f97ae6db0c49a264d7a84e/smart-contract-feature-development.md) design pattern.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/31653e5e51c22a239dad1a682b931e696e1539c9/packages/contracts-bedrock/scripts/deploy/Deploy.s.sol#L644-L645\r\n\r\nIt is conditionally deployed if the interop feature is turned on.\r\n\r\n`OptimismPortalInterop` is still based on the `L2OutputOracle` optimism portal, meaning that it doesn't yet support fault proofs. We need to migrate `OptimismPortalInterop` to the new `OptimismPortal` that is based on fault proofs.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/31653e5e51c22a239dad1a682b931e696e1539c9/packages/contracts-bedrock/src/L1/OptimismPortalInterop.sol#L14\r\n\r\nTo be feature partify, we need to add the custom gas token feature into `OptimismPortal2`. This is WIP in https://github.com/ethereum-optimism/optimism/pull/10780. Once this is merged, then we can migrate `OptimismPortalInterop` to using the new `OptimismPortal` based on fault proofs. We will need to deploy the interop devnet using the `PermissionedDisputeGame` since the system will not be fault provable at start.\r\n", "CLOSED", 0, "tynes", "2024-06-24T19:18:19Z", "2024-08-13T17:33:09Z", "2024-08-13T17:33:09Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6MkDnw", 10898, "Interop: Interoperable Ether Tracking", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n# Overview\n\nThis ticket is meant to track the completion of the interoperable ether feature of the devnet. This is a critical feature for the devnet v2 milestone. This ticket can be considered done when interoperable ether is ready to be deployed as part of the devnet.\n\nWe removed support for sending ether natively as part of interop in https://github.com/ethereum-optimism/specs/pull/78. This was to derisk the ability to support interop between custom gas token chains and chains that use ether to pay for gas. We ultimately do need this feature as its a huge UX improvement, a design doc for adding it back in can be found here: https://github.com/ethereum-optimism/design-docs/pull/25", "CLOSED", 0, "tynes", "2024-06-17T21:08:19Z", "2024-08-13T14:52:46Z", "2024-08-13T14:52:45Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6MirLL", 10850, "Interop: Event-handling polishing of Driver", "Once ethereum-optimism/optimism#10854, ethereum-optimism/optimism#10853, ethereum-optimism/optimism#10852, ethereum-optimism/optimism#10851 are complete we can change the `Driver` to purely use events, by simplifying the `SyncDeriver` / state-loop.\r\nWe should be able to just trigger a pending-safe-head update, and not explicitly loop any processing. This way the events-executor can take control over when things run.", "CLOSED", 0, "protolambda", "2024-06-05T16:20:29Z", "2024-08-18T21:36:14Z", "2024-08-18T21:36:13Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6MirVU", 10865, "Driver: Incremental OnEvent adoption", "Change the `Driver` of the op-node to structure the deriver sub-processes with event-processing, as described in phase 2 of the design doc: https://github.com/ethereum-optimism/design-docs/blob/main/protocol/op-node-derivers.md#2-incremental-onevent-adoption\r\n\r\n- [x] ethereum-optimism/optimism#10854\r\n- [x] ethereum-optimism/optimism#10853\r\n- [x] #10957\r\n- [x] #10958\r\n- [x] #10959\r\n- [x] #10969\r\n- [x] ethereum-optimism/optimism#10852\r\n- [x] ethereum-optimism/optimism#10851\r\n- [x] #10979\r\n- [x] ethereum-optimism/optimism#10850\r\n- [x] #11002\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10983\r\n- [x] #11097\r\n- [x] #11098", "CLOSED", 0, "protolambda", "2024-05-27T11:34:22Z", "2024-08-18T21:36:14Z", "2024-07-30T18:08:31Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6Mirbs", 10875, "SuperchainERC20: Spike xERC20 over New Standard", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket involves spiking out what an xERC20 based superchain erc20 standard would like like compared to the one proposed in https://github.com/ethereum-optimism/specs/pull/71. The learnings of this spike should be used to drive updates to the spec. We need to update the spec including the specific reasons behind the decision to go with one standard over the other.", "CLOSED", 0, "tynes", "2024-04-29T20:24:36Z", "2024-08-14T21:20:04Z", "2024-08-14T17:05:53Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDODjvEJM6MrAYl", 10929, "txmgr: admin rpc", "We should add an admin rpc to the txmgr to help debugging and fixing tx submission issues. Some ideas\r\n* `getPendingTxs()` - would return `txHash`, nonce, `status`, timestamp, size (data or blob), type, sender, to, data/blob (only optionally by parameter), full encoded tx (optional, ready to be used by `cast publish`), gas fields, and the auxiliary attributes (tbd, like channel id), ...\r\n* `cancelSend(nonce)` - immediately drop all pending txs for the given nonce. TBD what happens to all higher nonces? \r\n* getters and setters for gas configs and other params\r\n    * threshold\r\n    * min base fee, prio fee, blob fee\r\n    * retry & bump times\r\n    * _any other parameters?_\r\n", "CLOSED", 0, "sebastianst", "2024-02-09T16:50:51Z", "2024-08-14T18:56:18Z", "2024-08-14T18:56:18Z", "ethereum-optimism/optimism", "2025-08-30 18:41:04"]
["I_kwDOMMiGhs6S5drK", 102, "Investigate how to synchronize clocks between anvil nodes", "The startup for each anvil node varies and because of this the timestamps on the blocks can vary by over 10 seconds between nodes. This causes issues with the timestamp invariant check on the CrossL2Inbox: https://github.com/ethereum-optimism/optimism/blob/db21f4aa016c536e4602b7b2f5effa4ac8cf35ba/packages/contracts-bedrock/src/L2/CrossL2Inbox.sol#L143 since the timestamp on the source chain can end up being over 10 seconds ahead of the timestamp on the destination chain. This seems especially prevalent when starting in fork mode.", "CLOSED", 0, "tremarkley", "2024-08-14T00:09:28Z", "2024-08-14T21:37:36Z", "2024-08-14T21:31:42Z", "ethereum-optimism/supersim", "2025-08-30 18:41:09"]
["I_kwDOMMiGhs6S4eym", 100, "Flaky supersim tests", "This issue is for investigating a root cause / fix.", "CLOSED", 0, "tremarkley", "2024-08-13T21:44:56Z", "2024-08-14T21:37:48Z", "2024-08-14T21:31:43Z", "ethereum-optimism/supersim", "2025-08-30 18:41:09"]
["I_kwDOMMiGhs6RM1FV", 69, "interop contracts for forked networks", "When forking, the interop predeploy contracts do not exist. We'll need to manually apply them on startup so the contracts are available\n\nIdeas:\n- Look into anvil_setCode or something at runtime to manually apply the bytecode. consider the constructor argument. If so, some storage slots to override if needed.\n- Look into genesis generation and pulling the bytecode from there\n- Set the dependency set information accordingly\n", "CLOSED", 0, "hamdiallam", "2024-07-29T18:21:18Z", "2024-08-13T21:44:31Z", "2024-08-13T21:44:31Z", "ethereum-optimism/supersim", "2025-08-30 18:41:09"]
["I_kwDOMMiGhs6RMyqZ", 67, "Supersim Group Code review", "Some areas to cover:\n- Code cleanup opportunities\n- Lifecycle management\n- Bug-bash", "CLOSED", 0, "hamdiallam", "2024-07-29T18:15:12Z", "2024-08-15T15:53:22Z", "2024-08-15T15:53:07Z", "ethereum-optimism/supersim", "2025-08-30 18:41:09"]
["I_kwDOKIwiaM6UDrWI", 851, "[FAQ] Superchain", "### FAQ Category\n\nAdd faq item to an existing page\n\n### What page will this FAQ item live?\n\nSuperchain\n\n### write the question from a developer's perspective\n\nWhat is the Superchain?\r\n\n\n### answer the question identified above as best as possible\n\nSuperchain is a set of chains that all share a software stack and have the same security properties that enable them to communicate and work together. Learn more about the Superchain.\n\n### Additional context\n\n_No response_", "CLOSED", 0, "offt0theether", "2024-08-23T22:40:30Z", "2024-08-23T23:02:17Z", "2024-08-23T23:02:17Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6QpO18", 803, "[DOCS] Improve blob configuration after ecotone upgrade ", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\r\n\r\nI suggest the manual of configuration gas config after ecotone. For latest systemconfig.sol contract has setGasConfigEcotone(uint32, uint32). So to configure BaseFeeScalar and BlobBaseFeeScalar, we have to use it. But now in the docs there is no explanation about this part.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nI suggest specific on PR\r\n\r\n## Links to Related Pages\r\n\r\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live\r\n\r\n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/management/blobs\r\n\r\nfrom DSRV\r\n", "CLOSED", 0, "siddharth0a", "2024-07-24T06:42:19Z", "2024-08-20T14:17:35Z", "2024-08-20T14:17:35Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6MuPGY", 758, "[DOCS] Add PR title", "<!-- please fill out the following the best to your ability and properly label the issue -->\n\n## Brief Description of the Docs Request\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\n\n## Description of the Documentation You'd Like\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\n\n## Links to Related Pages\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\n\n## Additional Context\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?", "CLOSED", 0, "Sade28", "2024-06-18T23:52:51Z", "2024-08-20T14:12:22Z", "2024-08-20T14:12:22Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6MtLqg", 757, "Update base fee mentions", "Flagging that throughout docs there\u2019s some mentions that the OP minimum base fee is \u201c1 gwei\u201d when it should be \u201c1 wei.\u201d Other data people are confused and think we have some in protocol base fee floor, when we don\u2019t.\n\nhttps://docs.optimism.io/builders/chain-operators/management/configuration#eip-1559-gas-algorithm\n\nhttps://docs.optimism.io/stack/transactions/fees#base-fee\n\nPer M. Silberling: \u00a0if it\u2019s initialized at 1 gwei, we should maybe call out that that\u00a0doesn\u2019t\u00a0mean\u00a0it\u2019s\u00a0the minimum", "OPEN", 0, "cpengilly", "2024-06-18T20:29:36Z", "2024-08-20T16:22:43Z", null, "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6MbUVk", 748, "[RPC PROVIDER] Add PR title", "### RPC Provider Name\n\nOptimize \n\n### RPC Provider Description & Pricing\n\n#\n\n### RPC Provider URL\n\nhttps://github.com/ethereum-optimism/developers/blob/main/community/tools/node-providers.md\n\n### Supported Networks\n\n- [X] OP Mainnet\n- [X] OP Goerli\n- [X] OP Sepolia\n\n### When did the product go live?\n\nYes\n\n### Is the product open source?\n\nYes\n\n### GitHub URL\n\nhttps://github.com/ethereum-optimism/developers/blob/main/community/tools/node-providers.md\n\n### Documentation URL\n\nhttps://github.com/ethereum-optimism/developers/blob/main/community/tools/node-providers.md\n\n### Additional context\n\n- [ ] ", "CLOSED", 0, "Sintayew4", "2024-06-16T20:46:39Z", "2024-08-20T14:30:45Z", "2024-08-20T14:30:45Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6MbUA9", 747, "[FAUCET] Add PR title", "### Faucet Name\n\nOptimize\n\n### Faucet Description\n\n#\n\n### Faucet URL\n\nhttps://github.com/ethereum-optimism/developers/blob/main/community/tools/faucets.md\n\n### Supported Networks\n\n- [X] OP Goerli\n- [X] OP Sepolia\n- [X] Base Goerli\n- [X] Base Sepolia\n- [X] Lyra Sepolia\n- [X] Mode Sepolia\n- [X] Orderly Sepolia\n- [X] PGN Sepolia\n- [X] Zora Sepolia\n\n### When did the product go live?\n\nYes\n\n### Is the product open source?\n\nYes\n\n### GitHub URL\n\nhttps://github.com/ethereum-optimism/developers/blob/main/community/tools/faucets.md\n\n### Additional context\n\n#", "CLOSED", 0, "Sintayew4", "2024-06-16T20:42:20Z", "2024-08-20T14:33:42Z", "2024-08-20T14:33:42Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6MbTix", 746, "[DOCS] Add PR title", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\nWrite a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand new docs page?\r\n\r\n## Description of the Documentation You'd Like\r\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\r\n\r\n## Links to Related Pages\r\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \r\n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "Sintayew4", "2024-06-16T20:40:15Z", "2024-08-20T14:34:30Z", "2024-08-20T14:34:30Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6MRocT", 743, "Get the op-node p2p info error", "### Troubleshooting Category\n\nAdd troubleshooting item to a brand new page\n\n### What page will this troubleshooting item live?\n\nhttps://docs.optimism.io/builders/node-operators/json-rpc#opp2p_peerstats\n\n### describe the problem from a developer's perspective, including any error message received\n\nWith cli `cast rpc opp2p_discoveryTable --rpc-url http://localhost:9545` , it return `server returned an error response: error code -32601: the method opp2p_discoveryTable does not exist/is not available`. We use `cast rpc optimism_syncStatus --rpc-url http://localhost:9545`, it will correctly get the output\n\n### explain the solution to the problem identified above, use step-by-step instructions when possible\n\nI think I maybe loss some option when start op-node,this is the start cli:\r\n./bin/op-node \\\r\n  --l2=http://localhost:8551 \\\r\n  --l2.jwt-secret=./jwt.txt \\\r\n  --sequencer.enabled \\\r\n  --sequencer.l1-confs=5 \\\r\n  --verifier.l1-confs=4 \\\r\n  --rollup.config=./rollup.json \\\r\n  --rpc.addr=0.0.0.0 \\\r\n  --rpc.port=8547 \\\r\n  --p2p.disable \\\r\n  --rpc.enable-admin \\\r\n  --p2p.sequencer.key=$GS_SEQUENCER_PRIVATE_KEY \\\r\n  --l1=$L1_RPC_URL \\\r\n  --l1.rpckind=$L1_RPC_KIND\r\n  \r\n Or how do I get the opp2p info ?\n\n### Additional context\n\n_No response_", "OPEN", 0, "shaokun11", "2024-06-14T13:50:27Z", "2024-08-20T16:08:49Z", null, "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6J_rfr", 714, "[DOCS] Explain MIPS Memory Proofs visually with a diagram", "## Brief Description of the Docs Request\r\n\r\nThe current documentation on MIPS is difficult to follow/ understand.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd a diagram to visually explain the binary Merkle tree with 27 leaf nodes used in the MIPS Memory Proofs.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/stack/protocol/fault-proofs/mips#memory-proof", "OPEN", 0, "PaulRBerg", "2024-05-24T11:32:33Z", "2024-08-20T16:08:48Z", null, "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6JmaCO", 703, "[DOCS] Callout to explain that the L2 blocks epoch are NOT the same as the Beacon Chain epochs", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nOP Stack assigns 'epochs' to L2 blocks, but these are not the same as the [Beacon Chain epochs](https://beaconcha.in/epochs).\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd an informational callout to explain that the L2 blocks epoch are NOT the same as the Beacon Chain epochs. \r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/stack/protocol/rollup/overview#block-production\r\n\r\n## Additional Context\r\n\r\nThis duplicity of meaning confused me while reading the docs, and led me to post this question:\r\n\r\nhttps://github.com/ethereum-optimism/developers/discussions/416\r\n", "OPEN", 0, "PaulRBerg", "2024-05-21T15:17:03Z", "2024-08-20T16:08:47Z", null, "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6JdYvU", 700, "Feedback for \u201cDeploying Your Contracts for Free on the Superchain\u201d", "I do not have a Coinbase account, do you support other KYC methods?", "CLOSED", 0, "rbio7", "2024-05-20T14:56:56Z", "2024-08-20T15:13:58Z", "2024-08-20T15:13:58Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6IHyft", 673, "[DOCS] OP Stack 'Components' image is out of date", "\r\n## Brief Description of the Docs Request\r\nWe received feedback that this page is becoming out of date with how it presents different components, such as for DA:\r\n\r\nhttps://docs.optimism.io/stack/components\r\n\r\n## Links to Related Pages\r\nhttps://docs.optimism.io/stack/components\r\n\r\n## Additional Context\r\nIf time allows, let's consider asking Design for an updated graphic rather than using excalidraw.\r\n\r\nSome notes that might be helpful:\r\n- Are the components flagged as \"in development\" or \"proposed\" still in that same state?\r\n- DA has new features coming out and might need revision\r\n- 4844 under DA layer is marked as proposed, but has shipped\r\n", "CLOSED", 0, "OPMattie", "2024-05-07T16:10:58Z", "2024-08-20T14:58:32Z", "2024-08-20T14:58:32Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM6DLxL5", 602, "[DOCS] Add new page about superchain-registry", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nThe superchain registry is still a wip but soon we'll be having chains making PRs. \r\n\r\n## Description of the Documentation You'd Like\r\n\r\nOverview of the registry and point to the contributing doc in the registry repo\r\n\r\n## Links to Related Pages\r\n\r\nNew page under the Op Stack section\r\n\r\n## Additional Context\r\n\r\nhttps://github.com/ethereum-optimism/superchain-registry", "CLOSED", 0, "sbvegan", "2024-03-21T18:37:38Z", "2024-08-20T18:12:24Z", "2024-08-20T15:19:25Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOKIwiaM56A7tV", 326, "[DOCS] (via Msilb) 'For Indexers & Data Providers' page/callout", "Via @MSilb7:\r\n\r\nIdea:\r\nEvery single data-related tool in crypto (i.e. Dune, Google, open-source indexers) has not known that there are extra transaction receipt fields for OP (l1Fee, l1GasUsed, l1FeeScalar, l1GasPrice)\r\nShould we have this called out in like a \u201cfor indexers & data providers\u201d page or something similar? Idk if this would completely solve the problem, but at least it\u2019s something to link to.\r\nP.S. new docs are cool\r\n\r\n## Description of the Documentation You'd Like\r\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\r\n\r\n## Links to Related Pages\r\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \r\n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "OPMattie", "2023-12-18T16:51:56Z", "2025-09-11T19:27:53Z", "2025-09-11T19:27:53Z", "ethereum-optimism/docs", "2025-08-30 19:42:56"]
["I_kwDOH2Qg5s6S4NuG", 360, "Database corruption during restarts since switching to upstream v1.14.7", "We've recently merged in upstream v1.14.7 and during a sequencer restart, the following errors popped up:\r\n```\r\nt=2024-08-13T15:18:31+0000 lvl=info msg=\"Loaded most recent local block\" number=8539128 hash=0x3cef05fd474e7e7dc7eaff71e135604e47985a394a59b8dccd4fe408f3c2888b td=0 age=7s\r\nt=2024-08-13T15:18:31+0000 lvl=info msg=\"Loaded most recent local finalized block\" number=8538465 hash=0x810a9d113721b03303e0daffd8a6e6edb62e7baf6bb1481fee6c586959d4112a td=0 age=22m13s\r\nt=2024-08-13T15:18:31+0000 lvl=warn msg=\"Head state missing, repairing\" number=8539128 hash=0x3cef05fd474e7e7dc7eaff71e135604e47985a394a59b8dccd4fe408f3c2888b snaproot=0xc8380132dab17c437b74e60250d0e854e15af86a97bd3158d79caf6eee78540e\r\nt=2024-08-13T15:18:36+0000 lvl=info msg=\"Rewound to block with state\" number=8460000 hash=0xe2d7f61e7b3f63a8e57662e28a22a0092b03fd6b5ca135ca7e9322fa9b3ca589\r\nt=2024-08-13T15:19:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8534620\"\r\nt=2024-08-13T15:20:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8530106\"\r\nt=2024-08-13T15:21:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8525615\"\r\nt=2024-08-13T15:22:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8521225\"\r\nt=2024-08-13T15:23:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8516828\"\r\nt=2024-08-13T15:24:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8512200\"\r\nt=2024-08-13T15:25:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8507555\"\r\nt=2024-08-13T15:26:29+0000 lvl=error msg=\"Error in block freeze operation\" err=\"canonical hash missing, can't freeze block 8503264\"\r\n... (repeating every minute)\r\n```\r\nSo at startup, safe and finalized are reset to genesis. The op-node will then currently walk back to genesis. This was fixed locally by shutting down op-node, and using `op-wheel engine rewind --set-head --to 8460000`, but the source for this db corruption isn't clear yet.", "CLOSED", 0, "sebastianst", "2024-08-13T20:59:47Z", "2024-08-22T18:20:02Z", "2024-08-22T18:20:02Z", "ethereum-optimism/op-geth", "2025-08-30 19:42:57"]
["I_kwDODjvEJM6T0ngW", 11566, "What is the maximum gaslimit that can be set for a locally deployed l2geth\uff1f", "I deployed an optimsm locally and set l2BlockTime to 1 second. I want to know what the maximum l2GenesisBlockGasLimit can be set to in order to get the maximum tps", "CLOSED", 0, "Delaube923", "2024-08-22T07:27:53Z", "2024-08-22T16:11:54Z", "2024-08-22T16:11:54Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6TFD0-", 11492, "op-chain-ops: generate L1 genesis by running forge script in Go", "Generate a L1 dev genesis, by instantiating a script `Host`, loading the `Deploy.s.sol`, and running the deploy functions that are applicable.\r\n\r\nThis depends on some `Deploy.s.sol` improvements, to make the right deploy functions configurable and accessible. This is being improved as part of OPSM 0.5.\r\n\r\nIn the meantime we can try and hack around it with partial `DeployConfig.s.sol` overrides and temporary script hacks/changes.\r\n", "CLOSED", 0, "protolambda", "2024-08-15T07:39:54Z", "2024-08-21T20:46:20Z", "2024-08-21T20:46:20Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6TFDZt", 11490, "op-chain-ops: Forge scripts in Go [tracker]", "- [x] https://github.com/ethereum-optimism/op-geth/pull/359\r\n- [x] #11443\r\n- [x] #11444\r\n- [x] #11445\r\n- [x] #11446\r\n- [x] https://github.com/ethereum-optimism/optimism/pull/11447\r\n- [x] https://github.com/ethereum-optimism/optimism/pull/11465\r\n- [x] #11491\r\n- [x] https://github.com/ethereum-optimism/optimism/pull/11577\r\n\r\nSee design-doc for context: \r\n\r\nThe TLDR:\r\n- we are getting rid of pre-configured allocs (too monolithic / inflexible)\r\n- we are running forge scripts in Go to generate state (during test, can fully cutomize deployment calls!)\r\n\r\nThis unblocks interop op-e2e tests / local devnet, by making incremental deploy steps onto the same state.\r\n\r\nIn parallel to this work there is the OPSM 0.5 milestone, which refactors the input/output system of deploy/genesis scripts, and makes them more modular. This then will allow us to compose a deployment (e.g. 1 L1 dev chain, 1 superchain, multiple L2 deployments, and interop extensions applied to each L2 genesis).\r\n", "CLOSED", 0, "protolambda", "2024-08-15T07:38:23Z", "2024-08-23T21:06:58Z", "2024-08-23T21:06:58Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6Shx0z", 11424, "Interop: Update OptimismMintableERC20Factory Implementation", "Implement the changes for OptimismMintableERC20Factory based on the work done in [specs](https://github.com/orgs/ethereum-optimism/projects/71/views/1?sliceBy%5Bvalue%5D=skeletor-spaceman&pane=issue&itemId=73211544)", "CLOSED", 0, "skeletor-spaceman", "2024-08-09T17:05:31Z", "2024-08-21T22:13:51Z", "2024-08-21T22:13:50Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6SR4MR", 11389, "Interop: Create a CREATE3 or CREATEX spec", "", "CLOSED", 0, "0xParti", "2024-08-07T19:14:03Z", "2024-08-23T18:22:18Z", "2024-08-23T18:22:17Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6SNa5O", 11385, "op-node|conductor: add regression test for #11380", "PR https://github.com/ethereum-optimism/optimism/pull/11380 fixes an important conductor-related bug. We still need a regression test for this fix.", "CLOSED", 0, "sebastianst", "2024-08-07T09:17:40Z", "2024-08-19T15:10:34Z", "2024-08-19T15:10:34Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6SGsA3", 11367, "Interop: Add interop start to `CrossL2Inbox`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n# Overview\r\n\r\nIn the `CrossL2Inbox` contract, we need either a blocknumber or timestamp at which interop starts. This is because OP Mainnet migrated from a legacy system that is not provable. We cannot allow for interop messages to come from unproven parts of the chain history, since interop is secured by fault proofs.\r\n\r\nThis could be a constructor that sets a storage slot to `block.timestamp` for the first interop block and then revert if `Identifier.timestamp < start of interop`\r\n\r\n# Definition of Done\r\n\r\n- [x] [Specs](https://github.com/ethereum-optimism/specs/blob/main/specs/interop/token-bridging.md#functions) are updated\r\n- [ ] Source code is updated\r\n- [ ] Full test coverage", "CLOSED", 0, "tynes", "2024-08-06T15:59:56Z", "2024-08-20T16:31:13Z", "2024-08-20T16:31:13Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6SGqQ6", 11366, "Interop: Add new role for dependency set management", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n# Overview\r\n\r\nThe `SystemConfigInterop` contract manages the interop dependency set. Right now the `owner` of the `SystemConfig` can add and remove dependencies. The owner of the `SystemConfig` is considered the chain operator. We want to allow for a different role to manage the dependency set so that in production the dependency set can be managed by governance rather than the chain operator.\r\n\r\n# Definition of Done\r\n\r\n- [ ] [Specs](https://github.com/ethereum-optimism/specs/blob/afadeea642d05eda6e111d9098c9a842c2ecf322/specs/interop/dependency-set.md) are updated with this new role\r\n  - Could follow [this](https://github.com/ethereum-optimism/specs/blob/main/specs/interop/token-bridging.md#functions) spec, how there is a \"Functions\" header and subheaders for each function \r\n  - What should this role be called?\r\n- [ ] Source code is implemented\r\n- [ ] Full test coverage", "CLOSED", 0, "tynes", "2024-08-06T15:55:54Z", "2024-08-19T17:31:48Z", "2024-08-19T17:31:47Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6Rogj3", 11311, "Interop: Update and Merge Executing-Message Data Inclusion", "https://github.com/ethereum-optimism/optimism/pull/11104\r\n\r\nThis needs to be pulled in, rebased, updated to use the hash format and merged", "CLOSED", 0, "axelKingsley", "2024-08-01T20:05:35Z", "2024-08-23T21:06:25Z", "2024-08-23T21:06:24Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6R-eAB", 11355, "Governor: Specs Doc", "# Definition of Done\n\nA specification document of the [Governor](https://github.com/voteagora/governor/blob/main/src/OptimismGovernorV6.sol) contract that defines its interface, storage, types, events, user experience, and other considerations.", "CLOSED", 0, "cairoeth", "2024-08-01T18:56:55Z", "2024-08-22T20:06:23Z", "2024-08-22T20:06:23Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6Q40Nm", 11247, "SuperchainERC20: Convert implementation", "Once the [Liquidity Migration Specs](https://github.com/ethereum-optimism/specs/pull/294) are merged we will begin with the development of the required modifications.", "CLOSED", 0, "0xParti", "2024-07-25T19:09:54Z", "2024-08-21T22:13:50Z", "2024-08-21T22:13:50Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6Q4zTc", 11246, "SuperchainERC20: Factory Design Doc", "We are currently discussing the Factory for tokens native to L1 in the following PR to the Design Docs repo:\n[https://github.com/ethereum-optimism/design-docs/blob/831fb3f3f67399eb3bed52ff7ea17d46918a7aeb/protocol/superchainerc20/L1-native-factory.md](https://github.com/ethereum-optimism/design-docs/blob/831fb3f3f67399eb3bed52ff7ea17d46918a7aeb/protocol/superchainerc20/L1-native-factory.md)", "CLOSED", 0, "0xParti", "2024-07-25T19:07:49Z", "2024-08-23T20:05:21Z", "2024-08-23T20:05:19Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6QzFcx", 11234, "Large reorganization when op-batcher stops for long time", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nIf op-batcher is left down for a long time (more than a day), a large reorganization will occur in op-node and op-geth. Also, even if I start op-batcher afterwards and let it send Batch TX, the L2 safe/finalized head does not catch up to the latest block.\r\n\r\n**Steps to Reproduce**\r\n1. Deploy OPStack v1.7.6 on Sepolia testnet\r\n1. Start op-geth, op-node, op-batcher on the L2 node\r\n1. Services will be operational for about a week. The safe head is about  300 blocks behind, and the finalized head is about 800 blocks behind.\r\n1. Stop op-batcher and wait a one day\r\n1. op-geth and op-node output the log of reorganization\r\n1. Start op-batcher\r\n1. Can confirm that safe/finalized head keeps delaying\r\n\r\n**Expected behavior**\r\nI want the safe/finalized head to catch up with the LATEST block.\r\n\r\n**Environment Information:**\r\n - Operating System: AmazonLinux 2023 (Kernel: 6.1.97-104.177)\r\n - Package Version (or commit hash): tag v1.7.6\r\n - Docker Version: 25.0.3\r\n\r\n**Configurations:**\r\nop-geth\r\n```env\r\nGETH_AUTHRPC_ADDR=0.0.0.0\r\nGETH_AUTHRPC_JWTSECRET=/assets/jwt.txt\r\nGETH_AUTHRPC_PORT=8551\r\nGETH_AUTHRPC_VHOSTS=*\r\nGETH_BLOOMFILTER_SIZE=512\r\nGETH_CACHE=512\r\nGETH_DATADIR=/data\r\nGETH_DISCOVERY_V4=true\r\nGETH_GCMODE=archive\r\nGETH_HTTP=true\r\nGETH_HTTP_ADDR=0.0.0.0\r\nGETH_HTTP_API=net,eth,web3,txpool,engine,debug\r\nGETH_HTTP_CORSDOMAIN=*\r\nGETH_HTTP_PORT=8545\r\nGETH_HTTP_VHOSTS=*\r\nGETH_MAXPEERS=10\r\nGETH_NETWORKID=2162\r\nGETH_ROLLUP_SUPERCHAIN_UPGRADES=false\r\nGETH_SYNCMODE=full\r\nGETH_TXPOOL_PRICELIMIT=0\r\nGETH_WS=true\r\nGETH_WS_ADDR=0.0.0.0\r\nGETH_WS_API=net,eth,web3,txpool,engine,debug\r\nGETH_WS_ORIGINS=*\r\nGETH_WS_PORT=8546\r\n```\r\n\r\nop-node\r\n```\r\nOP_NODE_L1_BEACON=http://10.0.1.37:3500\r\nOP_NODE_L1_EPOCH_POLL_INTERVAL=12s\r\nOP_NODE_L1_ETH_RPC=ws://10.0.1.37:8546\r\nOP_NODE_L1_HTTP_POLL_INTERVAL=15s\r\nOP_NODE_L1_RPC_KIND=basic\r\nOP_NODE_L2_ENGINE_AUTH=/assets/jwt.txt\r\nOP_NODE_L2_ENGINE_RPC=ws://op-geth:8551\r\nOP_NODE_P2P_DISCOVERY_PATH=memory\r\nOP_NODE_P2P_LISTEN_TCP_PORT=9222\r\nOP_NODE_P2P_LISTEN_UDP_PORT=9222\r\nOP_NODE_P2P_NO_DISCOVERY=true\r\nOP_NODE_P2P_PEERSTORE_PATH=memory\r\nOP_NODE_P2P_PRIV_PATH=/data/p2p_priv.txt\r\nOP_NODE_P2P_SEQUENCER_KEY=**************\r\nOP_NODE_ROLLUP_CONFIG=/assets/rollup.json\r\nOP_NODE_RPC_ADDR=0.0.0.0\r\nOP_NODE_RPC_ADMIN_STATE=/data/admin-state\r\nOP_NODE_RPC_ENABLE_ADMIN=true\r\nOP_NODE_RPC_PORT=8547\r\nOP_NODE_SEQUENCER_ENABLED=true\r\nOP_NODE_SEQUENCER_L1_CONFS=5\r\nOP_NODE_SNAPSHOT_LOG=/data/snapshotlog\r\nOP_NODE_VERIFIER_L1_CONFS=5\r\n```\r\n\r\nop-batcher\r\n```\r\nOP_BATCHER_BATCH_TYPE=1\r\nOP_BATCHER_DATA_AVAILABILITY_TYPE=blobs\r\nOP_BATCHER_L1_ETH_RPC=ws://10.0.1.37:8546\r\nOP_BATCHER_L2_ETH_RPC=ws://op-geth:8546\r\nOP_BATCHER_MAX_CHANNEL_DURATION=50\r\nOP_BATCHER_MAX_PENDING_TX=1\r\nOP_BATCHER_NUM_CONFIRMATIONS=6\r\nOP_BATCHER_PRIVATE_KEY=**************\r\nOP_BATCHER_RESUBMISSION_TIMEOUT=240s\r\nOP_BATCHER_ROLLUP_RPC=http://op-node:8547\r\nOP_BATCHER_TARGET_NUM_FRAMES=6\r\nOP_BATCHER_TXMGR_RECEIPT_QUERY_INTERVAL=12s\r\n```\r\n\r\n**Logs:**\r\nop-node\r\n```\r\nop-node-1  | t=2024-07-24T07:08:12+0000 lvl=info msg=\"creating new block\" parent=0x89a3079a1d922aced8f9e2c27e0f405c6dbf128914a11374c00dc4c960f331bb:736062 l1Origin=0xe7f9e60f981d99fdfa05\r\n8af36add190c7745dc69473de2c8ec6ff0380b80bf41:6366308\r\nop-node-1  | t=2024-07-24T07:08:12+0000 lvl=info msg=\"sequencer started building new block\" payload_id=0x03fd9f42dfd96255 l2_parent_block=0x89a3079a1d922aced8f9e2c27e0f405c6dbf128914a113\r\n74c00dc4c960f331bb:736062 l2_parent_block_time=1721804892\r\nop-node-1  | t=2024-07-24T07:08:13+0000 lvl=info msg=\"Advancing bq origin\" origin=0x41bf556e44e9245673813046871164e4206d39e70aa2d8377c48c4022083e427:6366309 originBehind=false\r\nop-node-1  | t=2024-07-24T07:08:13+0000 lvl=info msg=\"Generating next batch\" epoch=0x3a6168484afb3752652af9f807008aec78223cb699a9db44cb72790127bcf490:6362709 timestamp=1721750342\r\nop-node-1  | t=2024-07-24T07:08:13+0000 lvl=info msg=\"generated attributes in payload queue\" txs=1 timestamp=1721750342\r\nop-node-1  | t=2024-07-24T07:08:13+0000 lvl=warn msg=\"L2 reorg: existing unsafe block does not match derived attributes from L1\" err=\"random field does not match. expected: 0x1087752f1ea\r\n9e7695154b530d2eb694b1c7921f3b6e3124f311e2de61ad973bd. got: 0x71cda902415a3b0f6a959800d78528644fb50d63038c0a5ec9bd6455503792bb\" unsafe=0x89a3079a1d922aced8f9e2c27e0f405c6dbf128914a11374c\r\n00dc4c960f331bb:736062 pending_safe=0x414de0f56d0b1866abb8b2cbc111b3cf280d6a1599b18e754f122d0dc211845b:708786 safe=0x414de0f56d0b1866abb8b2cbc111b3cf280d6a1599b18e754f122d0dc211845b:7087\r\n86\r\nop-node-1  | t=2024-07-24T07:08:13+0000 lvl=warn msg=\"did not finish previous block building, starting new building now\" prev_onto=0x89a3079a1d922aced8f9e2c27e0f405c6dbf128914a11374c00dc\r\n4c960f331bb:736062 prev_payload_id=0x03fd9f42dfd96255 new_onto=0x414de0f56d0b1866abb8b2cbc111b3cf280d6a1599b18e754f122d0dc211845b:708786\r\nop-node-1  | t=2024-07-24T07:08:13+0000 lvl=warn msg=\"engine is building block that reorgs previous unsafe head\" onto=0x414de0f56d0b1866abb8b2cbc111b3cf280d6a1599b18e754f122d0dc211845b:7\r\n08786 unsafe=0x89a3079a1d922aced8f9e2c27e0f405c6dbf128914a11374c00dc4c960f331bb:736062\r\nop-node-1  | t=2024-07-24T07:08:14+0000 lvl=info msg=\"inserted block\" hash=0x46cce9416e5f3d72a5609b73fdc9a800e6f85fd90276b13308f51851e2703ad7 number=708787 state_root=0xce61fa21a8b2e95e8\r\n1d2e8f2aa9c5b84cec1f7b48f6cf361b7c2f7256acefca1 timestamp=1721750342 parent=0x414de0f56d0b1866abb8b2cbc111b3cf280d6a1599b18e754f122d0dc211845b prev_randao=0x1087752f1ea9e7695154b530d2eb6\r\n94b1c7921f3b6e3124f311e2de61ad973bd fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=true\r\nop-node-1  | t=2024-07-24T07:08:14+0000 lvl=info msg=\"Sync progress\" reason=\"processed safe block derived from L1\" l2_finalized=0x414de0f56d0b1866abb8b2cbc111b3cf280d6a1599b18e754f122d0d\r\nc211845b:708786 l2_safe=0x46cce9416e5f3d72a5609b73fdc9a800e6f85fd90276b13308f51851e2703ad7:708787 l2_pending_safe=0x46cce9416e5f3d72a5609b73fdc9a800e6f85fd90276b13308f51851e2703ad7:70878\r\n7 l2_unsafe=0x46cce9416e5f3d72a5609b73fdc9a800e6f85fd90276b13308f51851e2703ad7:708787 l2_backup_unsafe=0x0000000000000000000000000000000000000000000000000000000000000000:0 l2_time=172175\r\n0342 l1_derived=0x41bf556e44e9245673813046871164e4206d39e70aa2d8377c48c4022083e427:6366309\r\nop-node-1  | t=2024-07-24T07:08:14+0000 lvl=info msg=\"creating new block\" parent=0x46cce9416e5f3d72a5609b73fdc9a800e6f85fd90276b13308f51851e2703ad7:708787 l1Origin=0x40829702a81b65f03830\r\n967be6aaa6d9d2e4226e7a4b3ae992de6bf4e5509a54:6362710\r\n```\r\n\r\nop-geth\r\n```\r\nop-geth-1  | INFO [07-24|07:08:12.004] Updated payload                          id=0x03fd9f42dfd96255 number=736,063 hash=8a2aa1..a4617d txs=1 withdrawals=0 gas=43866 fees=0 root=21dd36.\r\n.06b516 elapsed=\"561.664\u00b5s\"\r\nop-geth-1  | INFO [07-24|07:08:13.773] Starting work on payload                 id=0x03f152964ee55062\r\nop-geth-1  | INFO [07-24|07:08:13.783] Imported new potential chain segment     number=708,787 hash=46cce9..703ad7 blocks=1 txs=1 mgas=0.050 elapsed=7.482ms     mgasps=6.714  age=15h9m11\r\ns  snapdiffs=1.37MiB    triedirty=0.00B\r\nop-geth-1  | INFO [07-24|07:08:14.004] Stopping work on payload                 id=0x03fd9f42dfd96255 reason=near-timeout elapsed=2.000s\r\nop-geth-1  | WARN [07-24|07:08:14.452] Large chain reorg detected               number=708,786 hash=414de0..11845b drop=27276 dropfrom=89a307..f331bb add=1 addfrom=46cce9..703ad7\r\nop-geth-1  | INFO [07-24|07:08:14.944] Chain head was updated                   number=708,787 hash=46cce9..703ad7 root=ce61fa..cefca1 elapsed=1.157082503s age=15h9m12s\r\nop-geth-1  | INFO [07-24|07:08:15.147] Starting work on payload                 id=0x03c487eb170732a1\r\nop-geth-1  | INFO [07-24|07:08:15.154] Updated payload                          id=0x03c487eb170732a1 number=708,788 hash=93810e..e5da4b txs=1 withdrawals=0 gas=52254 fees=0 root=b9185b.\r\n.250209 elapsed=6.458ms\r\n```\r\n\r\n**Additional context**\r\nThe safe head and the finalized head are approximately as far apart as the number of reorganized blocks. Also, We're running replica nodes, but they're lagging as well.\r\n```shell\r\n$ cast block --rpc-url 127.0.0.1:8545 | grep number\r\nnumber               780405\r\n\r\n$ cast block --rpc-url 127.0.0.1:8545 safe | grep number\r\nnumber               753515\r\n\r\n$ expr 780405 - 753515\r\n26890\r\n```\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "ak-akiyama", "2024-07-25T08:05:11Z", "2024-08-21T12:15:45Z", "2024-08-18T03:44:06Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6QGbL6", 11180, "Interop-ready Go e2e test setup", "## Current test setup\r\n\r\n`genesis.DeployConfig`\r\n- includes:\r\n  - L1 config params\r\n  - L2 config params\r\n  - superchain params\r\n- used for chain-creation\r\n\r\n`e2eutils.TestParams`\r\n- basic L2 params (max seq drift, seq window size, etc.)\r\n\r\n`e2eutils.DeployParams`\r\n- includes:\r\n  - `genesis.DeployConfig`\r\n  - `e2eutils.MnemonicConfig`\r\n  - `e2eutils.Secrets`\r\n  - `e2eutils.Addresses`\r\n- created by `MakeDeployParams`, from `e2eutils.TestParams`\r\n    - `TestParams` overwrite deploy-config parts\r\n    - `ApplyDeployConfigForks` applies e2e env-vars to activate fjord\r\n\r\n`e2eutils.AllocParams`\r\n- includes:\r\n  - L1 allocs (geth type)\r\n  - L2 allocs (geth type)\r\n  - prefund-test-users bool\r\n\r\n`e2eutils.SetupData`\r\n- includes:\r\n  - L1 genesis: `core.Genesis`\r\n  - L2 genesis: `core.Genesis`\r\n  - Rollup config: `rollup.Config`\r\n  - Chain spec: `rollup.ChainSpec`\r\n  - DeploymentsL1 `genesis.L1Deployments`\r\n- created by `Setup`, from `e2eutils.DeployParams` and `e2eutils.AllocParams`\r\n  - `DeployConfig` is taken from `DeployParams`\r\n  - L1 genesis time is overridden\r\n  - calls `genesis.BuildL1DeveloperGenesis`\r\n  - calls `genesis.BuildL2Genesis`\r\n  - `rollup.Config` is manually created\r\n\r\nThe action-tests stop here, and use `DeployConfig`/`SetupData`\r\nto instantiate actors as desired, per test, with some helpers for common combinations.\r\n\r\nThe op-e2e system tests expand on this, and ignore some of it (especially `SetupData` is bypassed):\r\n\r\n`e2e.SystemConfig`\r\n- includes: a lot!\r\n  - `e2eutils.Secrets`\r\n  - some enshrined L1 addresses [duplicate]\r\n  - `genesis.DeployConfig`\r\n  - genesis.L1Deployments\r\n  - JWT stuff that should be global\r\n  - L1 stuff:\r\n    - Blobs db-path\r\n  - Premine override\r\n  - Rollup configs per node, only to slightly customize sequencer/verifier\r\n  - Loggers for nodes, services, etc.\r\n  - Geth options (mixed L1 and L2)\r\n  - ExternalL2Shim hack\r\n  - P2P-topology\r\n  - Lots of batcher configuration\r\n- Created by `DefaultSystemConfig()`\r\n  - Every test instantiates this, and then modified some things before calling `.Start()`\r\n\r\n`e2e.GethInstance`:\r\n- bundle of geth internals, to make it fit an `EthInstance` interface\r\n\r\n`e2e.System`\r\n- includes:\r\n  - Original `e2e.SystemConfig`\r\n  - L2 `rollup.Config`\r\n  - L2 `core.Genesis`\r\n  - References to each service: eth instances,\r\n    RPC clients of different types, op-nodes, proposer, batcher\r\n  - Mocknet for P2P tests\r\n  - L1 beacon API address, for HTTP client to fake blobs L1\r\n  - Simulated clock for L1 node only\r\n- created by `e2e.SystemConfig.Start`\r\n- difficult/impossible to add/remove services from during test\r\n\r\n\r\n## Proposal\r\n\r\n- Split `DeployConfig` into smaller sub-configs\r\n  - Embed the configs, JSON-embed,\r\n    to make a backwards-compatible `DeployConfig`.\r\n  - Deprecate usage, encourage separate configs for L1, superchain, L2s.\r\n- Cleanup a few building blocks; drop stale legacy things like the \"clique signer\" from keys/addresses etc.\r\n- Introduce a `BatcherParams` that supports the `e2e.SystemConfig` batcher params\r\n  and turns it into an actual op-batcher config. \r\n- Update `SetupData` to host named L2s.\r\n  - Legacy tests will just use a single \"default\" L2.\r\n  - Use generics, to make the L2 chain config type customizable.\r\n- Modify `e2eutils.Setup` to:\r\n  - drop the `AllocParams` (since it's not really customized)\r\n  - generate the new generic `SetupData[E]`\r\n  - Take an `Option` pattern for customization.\r\n    - L1 params, superchain params, etc. options.\r\n    - Create Option-builders that can make N L2 chains\r\n      (with different chainID, secrets, etc.) from a config template.\r\n- Organize `e2e.SystemConfig` to be a customizable collection\r\n    of `Setup` options, that can then be used to generate a `GenesisSetup`.\r\n- Split `e2e.System` into:\r\n  - A `GenesisSetup`, that fully utilizes `SetupData` and\r\n    with an L2 config type that embeds the one used in action-tests,\r\n    and adds configuration like P2P topology.\r\n    This represents the instantiated genesis, but no active services.\r\n  - `System` that contains:\r\n    - A `L1System` to host L1 services\r\n    - A `SuperchainSystem` to host superchain services\r\n      (e.g. bindings to superchain contracts, with L1 RPC connection),\r\n      as well as future `op-supervisor`.\r\n    - Named `L2System`s to host L2 chains, bundling L2 services.\r\n\r\nAnd pay attention to log-labeling and proper resource-cleanup of all instantiated test data.\r\n", "CLOSED", 0, "protolambda", "2024-07-19T00:34:37Z", "2024-08-23T21:08:14Z", "2024-08-23T21:08:12Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6NplUn", 11024, "Interop: op-supervisor: Extract executing messages from logs", "After #11022, add a stage to the fetcher pipeline that identifies any `ExecutingMessage` logs coming from the `CrossL2Inbox` and decode them so the executing message details can be added to the log to record.", "CLOSED", 0, "ajsutton", "2024-06-27T00:35:58Z", "2024-08-23T21:02:20Z", "2024-08-23T21:02:19Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDODjvEJM6Mirab", 10873, "SuperchainERC20: Factory Spec", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe specs need to be updated with the `SuperchainERC20Factory` spec. We know some things about this factory but still need to make some decisions. This factory should make it really easy to spin up interoperable tokens across the superchain\r\n\r\n- Is is a predeploy, what is its address?\r\n- It should be create3 based to prevent coupling to bytecode\r\n- Where should the bytecode live that ends up being deployed? A predeploy?\r\n- The salt should commit to the unique erc20 properties - name, symbol, decimals\r\n- Should the salt also commit to a version? Leaves open to add extensions to the interface in the future", "CLOSED", 0, "tynes", "2024-04-29T21:17:42Z", "2024-08-21T22:02:16Z", "2024-08-21T22:02:16Z", "ethereum-optimism/optimism", "2025-08-30 19:43:15"]
["I_kwDOJ_r-bs6TyMd5", 501, "Add `BatchSubmitter` to `AddressList`", "On the contract addresses page, the `batchSubmitter` is listed for each chain's deployment (https://docs.optimism.io/chain/addresses), but a corresponding entry doesn't exist in the Rust bindings.\r\n\r\n\r\nIt'd be great if the corresponding `batchSubmitter` (& other fields) could be added here: https://github.com/ethereum-optimism/superchain-registry/blob/main/bindings/rust-primitives/src/addresses.rs", "CLOSED", 0, "ratankaliani", "2024-08-21T23:16:52Z", "2024-08-21T23:18:17Z", "2024-08-21T23:17:52Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:43:29"]
["I_kwDOJ_r-bs6Tho3M", 493, "Perform L1 Bytecode checking for contracts with immutables", "These contracts are not checked for bytecode match \r\n```\r\n\t\t\"AnchorStateRegistryProxy\",\r\n\t\t\"DelayedWETHProxy\",\r\n\t\t\"FaultDisputeGame\",\r\n\t\t\"MIPS\",\r\n```\r\nbecause of their use of immutables, we cannot use a static bytecode hash across all chains to do the validation. \r\n\r\nSuggested fix is to declare the `immutableReferences` for the contract version in question (we get this from the relevant op-contracts tag compiler artifacts) as well as the hash of the _masked_ bytecode (masking here means replacing all immutable references with zeros. Then, the validation check pulls the bytecode from chain, masks it using the immutable references, hashes the result and compares against the expectation. ", "CLOSED", 0, "geoknee", "2024-08-20T08:46:13Z", "2024-08-22T20:05:07Z", "2024-08-22T19:55:29Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:43:29"]
["I_kwDOJ_r-bs6QlGyU", 415, "fix(codegen): De-duplicate Rust Bindings chainList TOML", "**Description**\r\n\r\nhttps://github.com/ethereum-optimism/superchain-registry/pull/412 merged an update to codegen that duplicates the `chainList.toml` file into the `rust-bindings`. This is so the file can be included in the crate release.\r\n\r\nThis should be de-duplicated so that the rust-bindings can somehow use the `<repo-root>/chainList.toml` file.", "CLOSED", 0, "refcell", "2024-07-23T16:41:03Z", "2024-08-21T22:23:34Z", "2024-08-21T22:23:34Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:43:29"]
["I_kwDOJ_r-bs6QNZVk", 405, "bytecode validation for L1 contracts", "at the moment we are checking the contract version, but that is not a final solution for this check.\r\nSo we want to check contract logic and do the bytecode validation for L1 contracts we are using.", "CLOSED", 0, "geoknee", "2024-07-19T17:03:08Z", "2024-08-20T08:53:13Z", "2024-08-20T08:53:12Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:43:29"]
["I_kwDOJ_r-bs6Mr3qm", 290, "SuperchainRegistry: replicate read/write rountrip check in Rust", "This would mean that we add some data using the `add-chain` tool, and then read it out with both Go and Rust bindings (which will each serialize to JSON). We compare those outputs with each other, as well as with the input JSON file. ", "CLOSED", 0, "geoknee", "2024-06-14T17:05:37Z", "2024-08-19T11:21:33Z", "2024-08-19T11:21:33Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:43:29"]
["I_kwDOMMiGhs6TB8sZ", 107, "Do not start L1 anvil with --optimism flag", "", "CLOSED", 0, "tremarkley", "2024-08-14T20:22:06Z", "2024-08-21T20:33:45Z", "2024-08-21T20:33:44Z", "ethereum-optimism/supersim", "2025-08-30 19:43:49"]
["I_kwDOMMiGhs6TB7Oo", 106, "Thread through CloseApp to sub processes so things shutdown correctly if there is an issue bringing up a process", "", "CLOSED", 0, "tremarkley", "2024-08-14T20:18:06Z", "2024-08-21T21:31:47Z", "2024-08-21T21:31:46Z", "ethereum-optimism/supersim", "2025-08-30 19:43:49"]
["I_kwDOMMiGhs6TB5CI", 105, "Orchestrator Improvements", "Make orchestrator only manage processes and not be blockchain aware.", "CLOSED", 0, "tremarkley", "2024-08-14T20:12:26Z", "2024-08-19T17:35:26Z", "2024-08-19T17:35:26Z", "ethereum-optimism/supersim", "2025-08-30 19:43:49"]
["I_kwDOMMiGhs6RyaYl", 82, "Handle Asset Transfer in Supersim", "Asset transfer should not be particularly difficult to handle as simulating interop message transfer is likely to meet the same architectural goal. Nevertheless, there are some ways the DevX team has identified to support developer comfort with how asset transfer works in interop for Super ERC20 tokens.  This issue compiles the efforts we've identified. \r\n\r\n- [ ] Highlight logs for token transfers so that they stand out more. \r\n- [ ] Add Super ERC20 token contracts to anvil nodes as part of genesis and airdrop tokens to users that they can play with. Include permissionless minting so they can get more. This should accompany notes/documentation about the process of implementing the interop token standard. \r\n- [ ] Determine whether a migration tool is expected for Super ERC20 tokens, and if so ensure that it can be tested in Supersim. ", "CLOSED", 0, "fainashalts", "2024-08-03T00:26:42Z", "2024-08-22T17:31:51Z", "2024-08-22T17:31:51Z", "ethereum-optimism/supersim", "2025-08-30 19:43:49"]
["I_kwDOMMiGhs6RZGLb", 73, "deposit tx fails at the anvil validation step if account has 0 balance", "## repro\r\n\r\nsend a deposit tx from the L1 with a `from` that does not have any eth balance on the L2. It will fail the check `account.balance > gas * price + value`, because the sender doesn't have any balance to cover the gas costs\r\n\r\nWe haven't been running into this because our tests use the prefunded accounts, not accounts that have 0 balance. As stated [here](https://specs.optimism.io/protocol/deposits.html#execution), we need to increase the balance of the account **before** running balance validation. It should also skip gas cost checks since gas is prepaid on the L1\r\n\r\n## fix\r\nif the tx is a deposit tx, skip this check https://github.com/foundry-rs/foundry/blob/26a7559758c192911dd39ce7d621a18ef0d419e6/crates/anvil/src/eth/backend/mem/mod.rs#L2567, and instead check that \r\n\r\n`tx.value > account.balance + tx.mint`", "CLOSED", 0, "jakim929", "2024-07-31T06:52:09Z", "2024-08-21T20:55:33Z", "2024-08-21T20:55:33Z", "ethereum-optimism/supersim", "2025-08-30 19:43:49"]
["I_kwDOMMiGhs6Qt3k1", 60, "Block timestamp not updating properly", "Supersim's nodes are not properly updating the block timestamp, making this issue to ensure we look into it. ", "CLOSED", 0, "fainashalts", "2024-07-24T15:52:45Z", "2024-08-22T15:36:53Z", "2024-08-22T15:36:53Z", "ethereum-optimism/supersim", "2025-08-30 19:43:49"]
["I_kwDOH2Qg5s6O-M7p", 346, "`LoadOPStackChainConfig`: read `OptimismConfig` from superchain-registry", "At the moment, the following fields are neither stored in nor read from the superchain-registry:\r\n\r\nhttps://github.com/ethereum-optimism/op-geth/blob/c6ea6fa09d4e7df6d1ca6b2d32bcb139f021b1e2/params/superchain.go#L76-L79\r\n\r\nThis means that a chain can omit an **optional*** field such as `OptimismConfig.EIP1559DenominatorCanyon` when starting up \"normally\", but will have this field overridden if starting us the network cli flags (i.e. via the superchain-registry). \r\n\r\nThis ticket also covers adding the fields to the registry here:\r\n\r\nhttps://github.com/ethereum-optimism/superchain-registry/blob/0ef731eae1251994f08107d7aa8b9e492cde7c0a/superchain/superchain.go#L85-L86\r\n\r\n---\r\n* we recently made this field optional #345, because chains which did not activate canyon at genesis will not have set it, and we want to maintain backwards compatibility with those chains. \r\n", "CLOSED", 0, "geoknee", "2024-07-09T16:35:24Z", "2024-08-28T15:01:47Z", "2024-08-28T15:01:47Z", "ethereum-optimism/op-geth", "2025-08-30 19:45:37"]
["I_kwDOLB-lzc6UTIbi", 355, "Research Area: Configurable Max Bytecode Size", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThere is a desire to make the max bytecode size configurable by the chain operator. This would allow chains in increase or decrease their max bytecode size by calling the `SystemConfig`, similar to how other protocol level constants are tweaked. We would want to ensure that there is a max bytecode size enforced in the `SystemConfig`, to prevent denial of service attacks during jumpdest analysis. We would also want a way to not use this feature for chains that want Ethereum compatibility, meaning that the OP Stack override wouldn't apply and the L1 consensus rules would take precedent. An easy way to do this is to use `uint256(0)` as a magic number that means off. It is possible that we would also want a min size to prevent the chain operator from turning off code, unless that is a desired feature.", "OPEN", 0, "tynes", "2024-08-27T00:54:37Z", "2024-08-27T07:39:13Z", null, "ethereum-optimism/specs", "2025-08-30 19:45:38"]
["I_kwDOLB-lzc6BNGov", 79, "Research Area: Validity Proofs to Improve Interop Scalability", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nCan validity proofs be utilized to improve the scalability of the interop protocol? It isn't immediately clear if they can without first shipping the devnet and then seeing how much throughput the system can handle safely. After that, it should be more clear where the bottlenecks are and then we can benchmark various ways of integrating zkps into the protocol if necessary.\r\n\r\nRight now it is assumed that there will be heavy load in unsafe to safe progression described in the [derivation pipeline](https://github.com/ethereum-optimism/specs/blob/main/specs/interop/verifier.md#derivation-pipeline) - the problem can be modeled using a [graph](https://github.com/ethereum-optimism/specs/blob/main/specs/interop/messaging.md#message-graph). There will also be heavy load for the sequencer when accepting incoming transactions to [build blocks](https://github.com/ethereum-optimism/specs/blob/main/specs/interop/sequencer.md#block-building).\r\n\r\nThese are two different problems and zkps can be applied for both.\r\n\r\nFor unsafe to safe progression, the sequencer could send proofs via the p2p network so that the derivation pipeline doesn't need to query for as much remote data. This idea has been explored in by adding a [commitment](https://github.com/ethereum-optimism/specs/pull/259) to the L2 blocks themselves and sending the proofs via [p2p](https://github.com/ethereum-optimism/specs/blob/main/specs/interop/rollup_node_p2p.md). This solution doesn't require zkps but there could be a way to improve our current thinking with them.\r\n\r\nFor the sequencer accepting transactions, the a zkp could be given to the sequencer along with the user's transaction that removes the need for the sequencer to verify the existence of the initiating message before including in a block. This seems like a more promising application, although it isn't immediately clear if this would be a huge gain given the state of zkp proof generation times. Given slight spec changes, it may be possible to make the proof generation times fast enough for this to work. Instead of using an absolute log index, a tx index + relative log index can be used in the identifier and it will greatly speed up zkp proof generation time.\r\n\r\nAn example of using sp1 for the sort of proof that is required for these solutions can be found here: https://github.com/puma314/verified-logs/\r\n\r\nWe also need to be very mindful of the downsides if people are able to create fraudulent proofs. No user funds can ever be at risk if a fraudulent proof can be generated.\r\n", "OPEN", 0, "tynes", "2024-03-04T20:34:37Z", "2024-08-27T02:27:46Z", null, "ethereum-optimism/specs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM6UcNF2", 863, "[DOCS] Remove op-heartbeat parts of docs", "We are removing the op-heartbeat service (non-default stale functionality). See https://github.com/ethereum-optimism/optimism/pull/11622\r\n\r\nThe effect on op-node is that the following CLI flags are no longer functional, and should be removed from docs: `heartbeat.url`, `heartbeat.moniker`, `heartbeat.enabled`\r\n", "CLOSED", 0, "protolambda", "2024-08-27T21:39:08Z", "2024-08-27T22:40:01Z", "2024-08-27T22:40:01Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM6UQo3l", 859, "Add social reviews to docs links", "FYI our docs have no social previews, <https://socialsharepreview.com/?url=https://docs.optimism.io>\n\n[Slack Message](https://oplabs-pbc.slack.com/archives/C0214EMUUJ3/p1724690968609909?thread_ts=1724690968.609909&cid=C0214EMUUJ3)", "CLOSED", 0, "krofax", "2024-08-26T17:33:01Z", "2024-08-26T18:40:35Z", "2024-08-26T18:40:35Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM6T3Dzu", 842, "[DOCS] Update FAQ", "https://docs.optimism.io/chain/security/faq#does-op-mainnet-have-fault-proofs\r\n", "CLOSED", 0, "prestwich", "2024-08-22T12:37:23Z", "2024-08-27T13:48:40Z", "2024-08-27T13:48:40Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM6Nxfnr", 772, "[DOCS] expected internal reverts for withdrawal transactions", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nExplain the expected internal reverts that etherscan shows in withdrawal transactions. This is a common point of confusion.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nI don't have the exact description but I believe because we use a non-standard proxy, the chugsplash proxy. Withdrawals sometimes show reverts on etherscan. The yellow reverts on the UI cause a sense of worry that something went wrong. It would be helpful to have something to point to say this is expected.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/stack/protocol/rollup/smart-contracts\r\nhttps://docs.optimism.io/stack/protocol/rollup/withdrawal-flow#withdrawal-initiating-transaction\r\n\r\n## Additional Context\r\n\r\n\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-06-27T16:06:44Z", "2024-08-26T15:43:36Z", "2024-08-26T15:43:36Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM6K_C0d", 725, "[DOCS] Add Chain Operator Feature: Span Batches", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nWe should have span batches documented and instructions on how to enable it in our docs.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nPage in Chain Operators > Chain Features > Span Batches\r\n\r\n## Links to Related Pages\r\n\r\nhttps://specs.optimism.io/protocol/delta/span-batches.html#span-batches\r\nhttps://op-tip.notion.site/Span-Batch-Design-Docs-b85e599a47774dcdb8171cc84cab2476\r\n\r\n## Additional Context\r\n\r\n- It was added in Delta\r\n", "CLOSED", 0, "sbvegan", "2024-06-03T18:25:11Z", "2024-08-27T13:11:41Z", "2024-08-27T13:11:41Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM6CNpg4", 563, "[DOCS] Add callout on the cap for sequencer.l1-confs and verifier.l1-confs", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nAdd a callout to the sequencer.l1-confs and verifier.l1-confs for the max values. Can't be higher than the sequencer drift which is set to 10 minutes.\r\n\r\n## Description of the Documentation You'd Like\r\nExplain what the final documentation page or pages should look like. Do you need a guide, tutorial, FAQ, troubleshooting page or more than one page? Do you have any source/content information to provide for the requested page(s)?\r\n\r\n## Links to Related Pages\r\nProvide links to any related content pages for this documentation request. This will help us to determine where the page(s) from your docs request should live  \r\n(e.g. a new node operators resource will likely link to other pages in the node operators section of the docs).\r\n\r\n## Additional Context\r\n\r\nProbably need to loop in eng for specifics\r\n", "CLOSED", 0, "sbvegan", "2024-03-13T18:14:00Z", "2024-08-28T21:41:02Z", "2024-08-28T21:41:02Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM6AsA44", 519, "[DOCS] Add `rollup.sequencerhttp` to node operation docs", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nAdd a callout on step 7, making sure people configure `--rollup.sequencerhttp` to their sequencer node. \r\n\r\n> HTTP endpoint of the sequencer. `op-geth` will route `eth_sendRawTransaction` calls to this URL. The OP Stack does not currently have a public mempool, so this is required if you want your node to support transaction submission.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAdd callout to this page\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/management/operations#adding-nodes\r\n\r\n## Additional Context\r\nProvide any additional context about this documentation request. What problems did you run into that caused you to make this request? \r\nWhich existing documentation pages did you already try as a solution to your problem? Why do you think the requested page(s) will be beneficial to developers in the Optimism Collective?\r\n", "CLOSED", 0, "sbvegan", "2024-02-28T13:51:25Z", "2024-08-28T21:18:49Z", "2024-08-28T21:18:49Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM58SErz", 430, "[DOCS] ProtocolVersions contract address is missing", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nThe contract address page is automatically updated by the super chain registry repo, but its missing the `ProtocolVersions` contract. \r\n\r\n## Description of the Documentation You'd Like\r\n\r\nUpdate with the address included.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/chain/addresses\r\n\r\n## Additional Context\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/develop/specs/superchain-upgrades.md#protocol-version\r\n", "CLOSED", 0, "sbvegan", "2024-01-16T23:09:50Z", "2024-08-27T19:26:21Z", "2024-08-27T19:26:19Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM57-AP9", 426, "Feedback for \u201cSmart Contract Overview\u201d", "Page is out of data / non-comprehensive. Should include all contracts in [Contract Addresses](https://docs.optimism.io/chain/addresses). Should also probably be moved out of the OP Stack documentation and into OP Mainnet with Contract Addresses or vice versa.", "CLOSED", 0, "Sabnock01", "2024-01-12T23:05:39Z", "2024-08-27T19:27:39Z", "2024-08-27T19:27:39Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM57D4-e", 366, "[DOCS] Details on the sequencer fee vault", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nI think we need to add information about the fee vault and where transaction fees collected by the sequencer go. Generally the overview of that whole process should be added. This might be dipping into an area better served by the community docs, but there are technical aspects to it.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nAddition to the transaction fees page or a new page that the transaction fees page references.\r\n\r\n## Links to Related Pages\r\n\r\n- https://docs.optimism.io/stack/transactions/transaction-fees\r\n\r\n## Additional Context\r\n\r\nThis [question](https://github.com/ethereum-optimism/developers/discussions/160) on the developer support forum highlighted that this information isn't easily visible.\r\n", "CLOSED", 0, "sbvegan", "2024-01-03T20:38:15Z", "2024-08-28T21:51:27Z", "2024-08-28T21:51:27Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDOKIwiaM56KhPt", 341, "[DOCS] Add information about `proxyd`", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nAdd information about the `proxyd` service: https://github.com/ethereum-optimism/optimism/tree/develop/proxyd\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nI think our OP Stack section would benefit from a sub-section dedicated to operators. \r\n\r\n## Links to Related Pages\r\n\r\nDoesn't exist, but I think this should go under OP Stack, in its own subsection.\r\n\r\n## Additional Context\r\n\r\nWe're going to want to add more OP Stack operator run books and documentation. I think this would be a good opportunity to start carving out that space.\r\n", "CLOSED", 0, "sbvegan", "2023-12-19T23:17:59Z", "2024-08-29T20:52:50Z", "2024-08-29T20:52:50Z", "ethereum-optimism/docs", "2025-08-30 19:45:38"]
["I_kwDODjvEJM6Ua3cl", 11615, "op-heartbeat: Running op-heartbeat is quite challenging", "1. There is a lack of guidance documentation for op-heartbeat.\r\n\r\n2. It seems to fail during the default startup due to a configuration issue with the pprof flag, showing the error: `Error -> panic: interface conversion: interface {} is nil, not *flags.PathFlag.`\r\n\r\n3. It's difficult to determine the expected results of the operation.", "CLOSED", 0, "joohhnnn", "2024-08-27T18:31:27Z", "2024-08-27T22:12:06Z", "2024-08-27T22:12:05Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi0V", 11634, "cannon: Build some test tools to make testing more robust", "## Description\r\n\r\nThere are a few gaps in the current Cannon test coverage:\r\n- Many parts of the state are initialized to 0 values, so we may not be able to detect or assert on changes where we expect a value to be set to zero\r\n- There are a lot of fields in our state structs and we are not consistently validating all of the expected values.\r\n\r\nAdd some test utilities to:\r\n- Randomize test states so we are not always working with zero'd out fields\r\n- Add tools to help with asserting / setting expectations for all of the fields on our state structs", "CLOSED", 0, "mbaxter", "2024-08-22T17:32:18Z", "2024-08-28T23:47:15Z", "2024-08-23T17:26:33Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Twm5A", 11556, "Interop: CreateX Preinstall Implementation", "Implement CreateX Preinstall, as defined in this [PR](https://github.com/ethereum-optimism/specs/pull/341)", "CLOSED", 0, "skeletor-spaceman", "2024-08-21T20:09:56Z", "2024-08-30T21:55:23Z", "2024-08-30T21:55:23Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6UmjGl", 11655, "Add tests for new syscalls", "", "CLOSED", 0, "Inphi", "2024-08-20T15:18:28Z", "2024-08-30T18:23:45Z", "2024-08-29T14:53:22Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6UmjG1", 11656, "Test edgecase where we move into wakeup traversal when the left thread stack is empty", "", "CLOSED", 0, "Inphi", "2024-08-20T15:18:04Z", "2024-08-29T14:53:22Z", "2024-08-29T14:53:22Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6UmjHF", 11657, "Add tests for traversal behavior (normal and wakeup)", "Need to add theses for the differential tests.", "CLOSED", 0, "Inphi", "2024-08-20T15:17:13Z", "2024-08-29T14:53:23Z", "2024-08-29T14:53:23Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6UmjHf", 11659, "Test edgecase where we pop the last thread due to exit syscall", "", "CLOSED", 0, "Inphi", "2024-08-20T15:15:01Z", "2024-08-29T14:53:22Z", "2024-08-29T14:53:22Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Roxp2", 11319, "Interop: Poll Unverified Events for Head Pointer Advancement", "Once the Event Data is in the event DB, we are able to check if they are executing messages, and then verify the messages. As this happens we can advance the head pointer.\r\n\r\nWe need to develop the routine within the Supervisor which handles this processing and keeps the Head Pointer up to date.", "CLOSED", 0, "axelKingsley", "2024-08-01T20:45:58Z", "2024-08-27T15:44:26Z", "2024-08-27T15:44:26Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Rof10", 11310, "CrossL2Inbox: add alternative `validateMessage` implementation", "We need to add a function in charge of validating a message to the CrossL2Inbox. It should perform all the required checks to ensure a given message is valid. Here's a possible implementation:\n```solidity\n/// @notice Validates a cross chain message.\n/// @param _id      Identifier of the message.\n/// @param _messageHash Message payload to call target with.\nfunction validateMessage(Identifier calldata _id, bytes32 _messageHash) external {\n  if (_id.timestamp > block.timestamp) revert InvalidTimestamp();\n  if (!IDependencySet(Predeploys.L1_BLOCK_ATTRIBUTES).isInDependencySet(_id.chainId)) {\n    revert InvalidChainId();\n  }\n\n  emit ExecutingMessage(_id, _messageHash);\n}\n```\nThe flow would be:\n\nA user sends a message on ChainA, which emits an initiating message. Then the user calls a contract, let's say the relayMessage function in the L2CrossDomainMessenger directly, and this function validates the message being passed to it by calling this validateMessage function in the CrossL2Inbox\n\nThis is an alternative we want to ADD to what we now have which is ALWAYS using the CrossL2Inbox as the unique entry-point.\nWe think this will allow for more experimentation and potentially better ux/dx on both the on&off-chain parts.", "CLOSED", 0, "skeletor-spaceman", "2024-08-01T20:03:58Z", "2024-08-26T17:26:20Z", "2024-08-26T17:26:18Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6RoVp-", 11308, "Interop: API to use Heads Database", "Calls into the supervisor currently do not consult the Heads Database, which is needed for accuracy when responding to message-safety checks.\r\n\r\nContexts:\r\n* https://github.com/ethereum-optimism/optimism/pull/11009\r\n* https://github.com/ethereum-optimism/optimism/pull/11139\r\n\r\nThese PRs demonstrate the implementation of the Head Persistence which needs to be incorporated into message-safety.\r\n\r\nThe head pointers should be used when responding to API requests", "CLOSED", 0, "axelKingsley", "2024-08-01T19:41:37Z", "2024-08-30T16:59:45Z", "2024-08-30T16:59:45Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6UmjH0", 11660, "Offchain MTCannon: Clean up memprofile handling", "## Description\r\n\r\nClean up our approach to disabling memory profiling for go programs loaded into Cannon. \r\n\r\nAs part of https://github.com/ethereum-optimism/optimism/pull/11188, we reworked our approach to disabling memory profiling.  For details, see commits [here](https://github.com/ethereum-optimism/optimism/pull/11188/commits/4fd9c3917baf9c17d1642576d73eea53616cc440) and [here](https://github.com/ethereum-optimism/optimism/pull/11188/commits/9e80acf4a653b068d490e187baa2e3cf1c38c672).  The original approached directly overwrote the`MemProfileRate` symbol in the compiled MIPS bytecode in order to disable memory profiling for performance reasons.  The current approach sets `runtime.MemProfileRate` in the op-program itself, which is less hacky, but has the disadvantage that any go program we want to run needs to separately ensure that mem profiling is disabled. \r\n\r\nThe suggested approach is to move the memprofile handling back to `patch.go` and out of op-program, but to handle this in a cleaner way by setting an envar on the initial program stack.  You can see where the initial stacks envars are set up in `PatchStack()` [here](https://github.com/ethereum-optimism/optimism/blob/05a9c478264302a257f30daad877449a31b0aaeb/cannon/mipsevm/program/patch.go#L74).  For documentation on the initial stack see this [MIPS ABI documentation](https://refspecs.linuxfoundation.org/elf/mipsabi.pdf) \"Figure 3-26: Initial Process Stack\" . The envar set is currently empty, but we can push the value `GODEBUG=memprofilerate=0` in order to inform the runtime to disable mem profiling.  Documentation on go runtime envars is available [here](https://pkg.go.dev/runtime#hdr-Environment_Variables).  ", "CLOSED", 0, "mbaxter", "2024-07-30T16:03:32Z", "2024-08-29T02:50:21Z", "2024-08-29T02:50:21Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi0i", 11635, "Panic upon unrecognized syscall numbers", "Ensure that MT-Cannon VM panics/reverts when encountering an unrecognized syscalls. While there are several syscalls that MT-Cannon doesn't support, these should be explicitly handled as a no-op (return and errno zeroed). Unexpected syscalls should result in a VM panic.", "CLOSED", 0, "Inphi", "2024-07-12T21:26:59Z", "2024-08-28T23:47:17Z", "2024-08-20T15:26:15Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi05", 11636, "Implement load-elf subcommand for multi-threaded programs", "Relies on https://github.com/ethereum-optimism/optimism/issues/11637.", "CLOSED", 0, "Inphi", "2024-07-08T18:34:04Z", "2024-08-28T23:47:18Z", "2024-08-20T15:23:38Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi1M", 11637, "Introduce MT Cannon types", "This unblocks work on the op-challenger to use the new VM. Specifically we want types analogous to the `mipsevm.State`. The `mipsevm.StepWitness.MemProof` will be prefixed with the thread witness. Also a good idea to rename the `MemProof` field appropriately.", "CLOSED", 0, "Inphi", "2024-07-08T18:05:32Z", "2024-08-28T23:47:19Z", "2024-07-17T19:21:18Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6NpnS7", 11031, "Interop: op-supervisor: Implement backend CheckBlock", "https://github.com/ethereum-optimism/optimism/blob/cc86dc18424c0cb69abc0804a5e56c7ee70c4c90/op-supervisor/supervisor/backend/backend.go#L90-L93", "CLOSED", 0, "ajsutton", "2024-06-27T00:46:17Z", "2024-08-30T17:02:35Z", "2024-08-30T17:02:34Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6NpnOF", 11030, "Interop: op-supervisor: Implement backend CheckMessage", "https://github.com/ethereum-optimism/optimism/blob/cc86dc18424c0cb69abc0804a5e56c7ee70c4c90/op-supervisor/supervisor/backend/backend.go#L85-L88", "CLOSED", 0, "ajsutton", "2024-06-27T00:45:52Z", "2024-08-30T17:00:52Z", "2024-08-30T17:00:51Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi1h", 11638, "FPVM Go interface", "The cannon CLI will have to be able to run both the existing FPVM and the upcoming MT-FPVM. This would be easier to do with a common FPVM interface.", "CLOSED", 0, "Inphi", "2024-06-03T15:16:30Z", "2024-08-28T23:47:21Z", "2024-07-08T18:23:24Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi12", 11639, "Refactor mips.go and MIPS.sol", "The MT-FPVM will be implemented in source control as a separate VM. This is so we can continue to support the existing VM until we've fully upgraded all FP deployments.\r\n\r\nmips.go and MIPS.sol should be refactored so that common code (such as instruction decode and logic and arithmetic instruction execution) can be reused across both VM implementations. Care should be taken not to introduce stateful constructs in the refactor as it would be inconvenient to do so in solidity.", "CLOSED", 0, "Inphi", "2024-06-03T15:13:22Z", "2024-08-28T23:47:23Z", "2024-06-27T15:42:17Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi2G", 11640, "Differential Testing of MT-FPVM Implementations", "Ensure both MT-FPVM implementations are functionally identical. We have existing [differential tests](https://github.com/ethereum-optimism/optimism/blob/0dcb1b2c7dadec98a24f47e2e2d781a25800d9e1/packages/contracts-bedrock/test/cannon/MIPS.t.sol) for single-threaded Cannon that would need to be ported over. Additional tests for state transitions specific to multi-threaded execution would need to be added.\r\n\r\nRelies on ethereum-optimism/optimism#11642 and ethereum-optimism/optimism#11641.", "CLOSED", 0, "Inphi", "2024-05-30T19:07:34Z", "2024-08-28T23:16:14Z", "2024-08-20T15:22:44Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi2X", 11641, "Implement onchain MT-FPVM", "This should be implemented as a new VM implementation, rather than replace `MIPS.sol`. `MIPS.sol` will be needed until mainnet is upgraded to use the new VM.", "CLOSED", 0, "Inphi", "2024-05-30T19:01:42Z", "2024-08-28T23:47:20Z", "2024-08-20T15:22:07Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi3C", 11643, "Cannon Execution Benchmark", "Create benchmarks for Cannon execution of the op-program. The benchmark will be used to evaluate the relative performance of the current FPVM to the MT FPVM. The benchmark should also cover the worst case compute and memory requirements to generate a full trace of a single block derivation.\r\n\r\nIt'll be great to have benchmarks for the following, preferably:\r\n- Cannon trace of deriving a full L2 block (i.e. at 30M gas for mainnet)\r\n- Cannon trace of deriving an L2 block with the maximum L1 data retrieval.\r\n\r\nThe benchmark can be adjusted temporarily if the current FPVM is unable to successfully generate a trace. Most important thing is to figure out the performance limits of the FPVM so we can measure improvements later.", "CLOSED", 0, "Inphi", "2024-05-30T17:38:09Z", "2024-08-28T23:16:18Z", "2024-06-19T19:40:22Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi3W", 11644, "MT Cannon Specification Draft", "Write up a spec for MT Cannon. We can start with a rough sketch of MT Cannon. Then finalize this with a draft spec in the specs repo.", "CLOSED", 0, "Inphi", "2024-05-28T23:04:33Z", "2024-08-28T23:47:25Z", "2024-06-20T17:09:28Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi3s", 11645, "Project Initiation Doc", "Write up a PID for the Cannon Performance Improvement project.", "CLOSED", 0, "Inphi", "2024-05-28T22:57:59Z", "2024-08-28T23:47:26Z", "2024-06-20T17:08:09Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6Umi4H", 11646, "SPIKE: Investigate Multi-threaded FPVM", "Investigate ways for the FPVM to support multi-threading, including proto's draft implementation - https://github.com/ethereum-optimism/optimism/pull/7281. \r\n\r\nWhile proto's draft PR is promising, we should spend a little bit of time looking into other possible solutions.\r\nThe goal is to write a doc that briefly outlines how a MT FPVM could work. \r\n\r\nSWAG timebox: 2 days", "CLOSED", 0, "Inphi", "2024-05-21T22:35:14Z", "2024-08-28T23:16:23Z", "2024-05-28T22:59:39Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDODjvEJM6MrBfs", 10936, "op-node: Improve shutdown behavior", "* Add (more) info-logging on shutdown\n* Revisit order in which components are shut down\n    *  e.g. the we may want to stop sequencing before stopping p2p distribution of blocks\n* Fix https://github.com/ethereum-optimism/optimism/issues/8086", "CLOSED", 0, "sebastianst", "2023-11-09T17:51:46Z", "2024-08-29T16:17:07Z", "2024-08-29T16:17:07Z", "ethereum-optimism/optimism", "2025-08-30 19:46:11"]
["I_kwDOJ_r-bs6Usf4g", 532, "Add `optimism` config values to inflight PRs adding chains", "Since #510 , we store more information in chain config toml files. But PRs created before that change will not have those fields. \r\n\r\nI propose we write a test which requires the fields exist (we can do this via the Go bindings, although they will use default values for the non pointer types, so 0 for `uints`). Then PRs will be forced to add the data before being merged to main:\r\n\r\nMost chains will just add:\r\n\r\n\r\n```toml\r\n[optimism]\r\n  eip1559_elasticity = 6\r\n  eip1559_denominator = 50\r\n  eip1559_denominator_canyon = 250\r\n```\r\n\r\nPerhaps we could use any config validation helpers from op-geth to check the values?", "CLOSED", 0, "geoknee", "2024-08-29T14:43:25Z", "2024-08-30T18:26:25Z", "2024-08-30T18:26:24Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:46:14"]
["I_kwDOJ_r-bs6Ti_7I", 494, "Allow testnets to have contract deployments greater than standard (even if not yet governance approved) ", "Testnets can specify a minimum version (e.g., the latest gov-approved version) but should be allowed to be on any later version.\r\n\r\nWe are sailing validation failures presently for OP Sepolia, because we rollout proposed contracts there before the governance vote. So we need to build the validation checks against that pattern. ", "CLOSED", 0, "geoknee", "2024-08-20T11:38:43Z", "2024-08-28T14:54:24Z", "2024-08-28T14:54:22Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:46:14"]
["I_kwDOJ_r-bs6TcL4Q", 487, "Stop hardcoding EIP1559Elasticity (and store in the registry)", "Chains which use a value other than 6 will fail the automated checks in `add-chain` and cannot be added to the registry (at present). \r\n\r\nop-geth function which defaults this to 6:\r\n\r\nhttps://github.com/ethereum-optimism/op-geth/blob/0f5b9dcfd2ac66f6fd8faae526b1549721f5f392/params/superchain.go#L78-L81\r\n\r\n\r\n\r\nop-node function which defaults to 10 but allows the deploy config to override it: \r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/2d32f8bfea15ad131bc7b98f732886b5bb9dcff6/op-chain-ops/genesis/genesis.go#L38-L41\r\n\r\n", "CLOSED", 0, "geoknee", "2024-08-19T15:29:11Z", "2024-08-28T14:49:52Z", "2024-08-28T14:49:52Z", "ethereum-optimism/superchain-registry", "2025-08-30 19:46:14"]
["I_kwDOLB-lzc6Vaa8p", 362, "On Solving the Interop Withdrawal Liquidity Problem", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n# Overview\r\n\r\nAs interop is currently specified, there is a problem with withdrawal liquidity. What does this mean in practice?\r\n\r\nUsers can deposit `ether` between an arbitrary number of `OptimismPortal` contracts into the set of interoperable chains. The current scope of interop does not unify this liquidity on L1. Users are able to send the `ether` between various L2 chains and must check that there is liquidity in the `OptimismPortal` that corresponds to their L2 before withdrawing to L1. A race condition exists in which the user initiates their withdrawal and then is frontran by another withdrawal that removes the liquidity from the `OptimismPortal`. The cannot get their funds back to L2 and must wait for more deposits until their withdrawal can be processed.\r\n\r\nIf we want to guarantee solvency of withdrawals, there are 2 known approaches:\r\n- L2 reverts on no liquidity\r\n- L1 unified liquidity\r\n\r\n## L2 Reverts\r\n\r\nThis solution involves tracking the balance of the `OptimismPortal` in L2 and incrementing and decrementing the value as there are deposits and withdrawals. A one time upgrade transaction is included in a hardfork that uses the balance of the `OptimismPortal` as an input to generate an upgrade transaction that sets the value in an L2 storage slot. The L1 attributes transaction then includes a sum of the `mint` fields in all deposits and that increments the balance. When a user calls `L2ToL1MessagePasser.initiateWithdrawal`, it decrements the balance and reverts on underflow. This prevents withdrawals on L2 by a revert if there is insufficient liquidity.\r\n\r\nThis balance accumulator on L2 is not an accurate counter for the amount of `ether` on the L2. It is just meant to observe the liquidity for withdrawals. The invariant `address(OptimismPortal).balance >= L2 view of balance` must hold.\r\n- It is possible to transfer `ether` to the `OptimismPortal` without minting it on L2 by calling the `donateETH` function or by using `SELFDESTRUCT` to move `ether` without EVM execution.\r\n- L2 to L2 cross chain messaging of `ether` will not modify the balance\r\n\r\nThe semantics here also need to account for custom gas token chains, which could be solved by coupling an `eth_call` to `OptimismPortal.balance` rather than reading its balance from the state directly, but that would require L1 EVM execution to be in the fault proof.\r\n\r\n## L1 Unified Liquidity\r\n\r\nThe most minimal version of a L1 unified bridge is one where there is a shared lockbox. This involves each `OptimismPortal` migrating its `ether` balance to a single contract. Any new deposit would forward the `ether` here and any withdrawal would remove `ether` from here. This creates a shared liquidity pool for the set of interoperable chains.\r\n\r\nThere are open questions around the specific design of the shared lockbox. It cannot be permissionless to join unless the contracts were deployed by OP Stack Manager or older systems have had history integrity checks, then we know for a fact that the L2 system doesn't have a backdoor in its contracts.\r\n\r\n## Known Issues\r\n\r\nThese solutions do not solve for ERC20 tokens.", "OPEN", 0, "tynes", "2024-09-05T04:18:07Z", "2024-09-06T01:57:39Z", null, "ethereum-optimism/specs", "2025-08-30 19:48:19"]
["I_kwDOLB-lzc5_EHI0", 42, "Update the `predeploys.md` file to include description of the `GovernanceToken` and `L2ERC721Bridge`.", "**Is your feature request related to a problem? Please describe.**\r\nThe [predeploys.md](https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/predeploys.md) is an excellent summary of all the Predeploys for any L2 based on OP Stack. However, it doesn't include the description of the `GovernanceToken` and `L2ERC721Bridge` contracts. \r\n\r\n**Describe the solution you'd like**\r\nA reader looking at the aforementioned README will have to dig deeper into the `.sol` files of these contracts and as a member of the Lisk team, we also are relying on an up to date `predeploys.md` for our documentation needs. I request that the description of the aforementioned should be added so that we can reference them in our docs.\r\n\r\n", "CLOSED", 0, "TalhaMaliktz", "2024-02-13T08:42:03Z", "2024-09-05T10:01:33Z", "2024-09-05T10:01:33Z", "ethereum-optimism/specs", "2025-08-30 19:48:19"]
["I_kwDOFpg0Ns6FppN6", 788, "The \"Generate Token List\" action keeps failing", "The \"Generate Token List\" action (https://github.com/ethereum-optimism/ethereum-optimism.github.io/actions/workflows/generate.yml) has been failing for two weeks. I believe this results in no new tokens being added to `optimism.tokenlist.json`. Is someone working on fixing this?\r\n\r\n![image](https://github.com/ethereum-optimism/ethereum-optimism.github.io/assets/15076450/cbfcfd34-2e86-495d-9e63-d585d4d2da5a)\r\n", "CLOSED", 0, "kerkelae", "2024-04-14T17:52:40Z", "2024-09-03T19:34:12Z", "2024-09-03T19:34:12Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 19:48:20"]
["I_kwDODjvEJM6VYAwK", 11741, "EVM Engineering: verify interfaces use correct compiler version", "All interfaces should be using `^0.8.0`.", "CLOSED", 0, "smartcontracts", "2024-09-04T19:16:03Z", "2024-09-04T20:53:28Z", "2024-09-04T20:53:28Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6VRMyl", 11729, "Standardization Request: use one of `generic`/`da-service` commitment type everywhere ", "Right now both of these names are used interchangeably, both in the spec\r\n<img width=\"771\" alt=\"image\" src=\"https://github.com/user-attachments/assets/7abe6f4d-b5a7-43b5-9f83-0ba0bbb4a244\">\r\nand in the code.\r\n\r\nThis leads to [redundant variables](https://github.com/ethereum-optimism/optimism/blob/5a1a18d0ceedc40aad99baf4359e06f09fc7b718/bedrock-devnet/devnet/__init__.py#L278) that literally have the same function:\r\n```\r\n    if GENERIC_ALTDA:\r\n        docker_env['ALTDA_GENERIC_DA'] = 'true'\r\n        docker_env['ALTDA_SERVICE'] = 'true'\r\n    else:\r\n        docker_env['ALTDA_GENERIC_DA'] = 'false'\r\n        docker_env['ALTDA_SERVICE'] = 'false'\r\n```\r\nBoth ALTDA_GENERIC_DA and ALTDA_SERVICE are used for the exact same purpose, but in different services (op-batcher/node use da-service, whereas da-server uses generic).\r\n\r\nWould be preferable to use a single variable, as well as flag naming convention everywhere. I like `generic` better, but open to either. I can make a PR to refactor this if needed.", "OPEN", 0, "samlaf", "2024-09-04T05:02:50Z", "2024-09-04T20:52:46Z", null, "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6VPj-f", 11726, "EVM Engineering: remove Kontrol summaries from PRs", "Kontrol summaries are slow and make the PR cycle painful. We can get rid of them by generating them in CI when Kontrol runs rather than having them be committed every time.", "CLOSED", 0, "smartcontracts", "2024-09-03T22:07:08Z", "2024-09-04T00:11:57Z", "2024-09-04T00:11:57Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6U5KeG", 11694, "Improve Cannon state snapshot performance", "## Description\r\n\r\nIntroduce a more space efficient and performant format for state snapshots.  \r\n\r\nWhen running a program in Cannon, state snapshots are [periodically persisted to disk](https://github.com/ethereum-optimism/optimism/blob/7373ce7615b3607b328ad22672b1adb3c7cf3701/cannon/cmd/run.go#L436-L441) to allow the program to resume quickly by starting from an intermediate state. State snapshots can be very large when, for example, a large program [has been loaded](https://github.com/ethereum-optimism/optimism/blob/d520441b008833d8ee8ee69bbe2e8158366279d0/cannon/mipsevm/program/load.go#L20) into [memory](https://github.com/ethereum-optimism/optimism/blob/d520441b008833d8ee8ee69bbe2e8158366279d0/cannon/mipsevm/iface.go#L11).  The current implementation stores [these state snapshots](https://github.com/ethereum-optimism/optimism/blob/d520441b008833d8ee8ee69bbe2e8158366279d0/cannon/mipsevm/singlethreaded/state.go#L19-L38) as [JSON files](https://github.com/ethereum-optimism/optimism/blob/7373ce7615b3607b328ad22672b1adb3c7cf3701/cannon/cmd/run.go#L436-L441).  This is not a very compact format.  It is also slow and uses a large amount of memory when serializing large snapshots as the full state is encoded in memory before writing to disk. \r\n\r\nThe new implementation should avoid using excessive memory when serializing snapshots: we'll likely want to be able to stream the snapshot rather than encoding entirely in memory before writing.", "CLOSED", 0, "mbaxter", "2024-08-30T19:09:19Z", "2024-09-06T03:23:48Z", "2024-09-06T03:23:48Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6U4cDY", 11692, "EVM Engineering: bump foundry version", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n- Bump the foundry version in `versions.json` to a nightly release that includes the following commit: https://github.com/foundry-rs/foundry/pull/8775\r\n- Do a release of `ci-builder`, bumping the minor version\r\n- Update the version of `ci-builder` in CI", "CLOSED", 0, "tynes", "2024-08-30T17:10:57Z", "2024-09-04T21:45:02Z", "2024-09-04T21:45:02Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6UxjIw", 11684, "EVM Engineering: move existing interfaces into subfolders", "All interfaces will live inside `interface` subfolders within each main contracts package. For example, interfaces for L1 contracts will live inside `src/L1/interfaces`. We need to move all interfaces that do not currently conform to this pattern into their respective `interfaces` folders.", "CLOSED", 0, "smartcontracts", "2024-08-30T02:43:03Z", "2024-09-08T02:41:32Z", "2024-09-08T02:41:32Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6Uxc-5", 11680, "EVM Engineering: add interfaces for legacy contracts", "Tracking issue for adding interfaces for legacy contracts.", "CLOSED", 0, "smartcontracts", "2024-08-30T02:19:00Z", "2024-09-04T19:17:19Z", "2024-09-04T19:17:19Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6Uxcs0", 11679, "EVM Engineering: interface validation checks", "Need to add a new script to CI that verifies that the interfaces being used within this repository correctly represent the contracts that they refer to. Contracts and interfaces should have the same ABI.", "CLOSED", 0, "smartcontracts", "2024-08-30T02:17:52Z", "2024-09-04T01:21:42Z", "2024-09-04T01:21:42Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6TvPGP", 11554, "OP  Stack release for Granite mainnet", "- Finalize release candidates\n- Create GitHub releases for op-stack and op-geth\n- Publicize/communicate with Superchain partners", "CLOSED", 0, "pauldowman", "2024-08-21T17:47:34Z", "2024-09-04T17:22:58Z", "2024-09-04T17:22:58Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6UmjFl", 11652, "Port audit fixes to MTCannon", "## Description\r\n\r\nMake sure all [audit fixes](https://github.com/ethereum-optimism/optimism/pull/11503/files) and additional tests have been applied to MTCannon contracts.", "CLOSED", 0, "mbaxter", "2024-08-21T17:28:00Z", "2024-09-06T15:49:18Z", "2024-09-06T15:49:18Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6RokOk", 11312, "Interop: make `op-node` check cross-L2 block safety", "For Devnet-1, we want a predictable behavior when an invalid message is included in a block.\n\n`op-node` should check validity of interop messages and if a message is invalid, the node should ~halt.~ not promote block safety.\n\nFull halting requires reorg-detection, see: https://github.com/ethereum-optimism/optimism/issues/11693", "CLOSED", 0, "axelKingsley", "2024-08-01T20:13:34Z", "2024-09-05T23:53:17Z", "2024-09-05T23:53:17Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDODjvEJM6Mirjo", 10886, "Interop: produce unsafe block from safe attributes, for cross-unsafe dependency validation", "The receipts emitted by the generated block may be consumed as dependencies, intra-block with other chains. Thus we need to produce the block before resolving safety, to not deadlock.\r\n", "CLOSED", 0, "protolambda", "2024-04-01T20:48:06Z", "2024-09-05T23:53:18Z", "2024-09-05T23:53:17Z", "ethereum-optimism/optimism", "2025-08-30 20:49:32"]
["I_kwDOJ_r-bs6VXKvx", 548, "hourly and nightly CI jobs not running", "I think since #489 and the reconfiguring of CI to be a dynamic configuration. ", "CLOSED", 0, "geoknee", "2024-09-04T17:00:04Z", "2024-09-05T10:03:00Z", "2024-09-05T10:03:00Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:49:46"]
["I_kwDOJ_r-bs6Tbmuh", 486, "Pretty print the diff when a chain fails `Genesis.allocs` validation", "If we end up implementing the validation via a simple bytes / string comparison only, then we want to avoid printing obscure / unreadable diffs to the console. ", "CLOSED", 0, "geoknee", "2024-08-19T14:20:17Z", "2024-09-03T15:57:51Z", "2024-09-03T15:57:51Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:49:46"]
["I_kwDOJ_r-bs6PE-Rq", 372, "validation: check genesis predeploys against standard config", "\r\nPredeploy spec: https://specs.optimism.io/protocol/predeploys.html\r\n\r\n[Standard config spec states ](https://specs.optimism.io/protocol/configurability.html?highlight=op%20stack#op-stack-configurability)\r\n\r\n> [Genesis state should have] Only standard predeploys and preinstalls, no additional state.", "CLOSED", 0, "geoknee", "2024-07-10T11:02:55Z", "2024-09-03T15:57:51Z", "2024-09-03T15:57:51Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:49:46"]
["I_kwDOKIsnqM6TJcEo", 299, "`just simulate/sign` prints an invalid tenderly simulation URL", "**Bug Description**\r\n\r\nIn some user's environments but not others, the `just sign` and `just simulate` scripts are outputting tenderly simulation URLs with invalid URL escaping. \r\n\r\n**Steps to Reproduce**\r\n\r\n1. Be me on my machine (or one of the other people who are affected).  \r\n2. ```\r\n\tcd tasks/eth/015-fallback-permissioned-game\r\n\tSIMULATE_WITHOUT_LEDGER=1 just \\\r\n   --dotenv-path $(pwd)/.env \\\r\n   --justfile ../../../single.just \\\r\n   simulate\r\n   ```\r\n3. This will print: \r\n   ```\r\n\t  https://dashboard.tenderly.co/oplabs/op-mainnet/simulator/new?network=1&contractAddress=0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A&from=0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64&stateOverrides=%5%7\"contractAddress\":\"0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A\",\"storage\":%5%7\"key\":\"0x0000000000000000000000000000000000000000000000000000000000000004\",\"value\":\"0x0000000000000000000000000000000000000000000000000000000000000001\"%7%5%7,%7\"contractAddress\":\"0x0000000000000000000000000000000000000000\",\"storage\":%5%5%7%5&rawFunctionInput=0x6a761202000000000000000000000000ca11bde05977b3631167028862be2a173976cac0000000000000000000000000000000000000000000000000000000000000014482ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005dc91d01290af474ce21de14c17335a6dee4d2a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a1155ed9000000000000000000000000beb5fc579115071764c7423a4f12edde41f106ed00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004100000000000000000000000042d27eea1ad6e22af6284f609847cb3cd56b9c6400000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000\r\n```\r\n\r\nNote that the escape characters used should be %5B and %5D (open/closed square brackets) but the script prints %5 and %5. The same case is with %7B and %7D (curly brackets).\r\n\r\n**Expected behavior**\r\n\r\nThe scripts should print a properly escaped URL.", "CLOSED", 0, "maurelian", "2024-08-15T18:51:18Z", "2024-09-05T12:47:15Z", "2024-09-05T12:47:15Z", "ethereum-optimism/superchain-ops", "2025-08-30 20:49:52"]
["I_kwDOKIwiaM6VW8ki", 883, "Fix broken links", "Fix all broken links in the docs.", "CLOSED", 0, "krofax", "2024-09-04T16:27:27Z", "2024-09-06T22:40:54Z", "2024-09-06T22:40:54Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6VWBmx", 882, "[DOCS] Action Items for Plasma to Alt-da Renaming", "<!-- Please fill out the following to the best of your ability and properly label the issue -->\r\n\r\n## Action Items for Plasma to Alt-da Renaming\r\n\r\n- [x] Make it clear that the Alt-da feature is still in beta.\r\n- [x] Update the documentation to reference the latest version of the OP-stack software.\r\n- [x] Add information to [this page](https://docs.optimism.io/builders/chain-operators/features/alt-da-mode) about breaking changes in the configuration and instructions for manual updates.\r\n\r\n## Description\r\n\r\n1. **Make it Clear That the Alt-da Feature is Still in Beta**\r\n\r\n   - Add a prominent beta flag in the Alt-da section of the documentation example ([here](https://docs.optimism.io/stack/protocol/features/alt-da-mode)).\r\n\r\n2. **Update the Documentation to Reference the Latest Version of the OP-stack Software**\r\n\r\n   - Update the prerequisites [here](https://docs.optimism.io/builders/chain-operators/features/alt-da-mode#prerequisite) to use [v1.9.1](https://github.com/ethereum-optimism/optimism/releases/tag/v1.9.1).\r\n   ![image](https://github.com/user-attachments/assets/c06dce5a-6809-4aea-9cca-450a49d119cb)\r\n\r\n3. **Add Information to [This Page](https://docs.optimism.io/builders/chain-operators/features/alt-da-mode) About Breaking Changes and Manual Updates**\r\n\r\n   - Include a section on [this page](https://docs.optimism.io/builders/chain-operators/features/alt-da-mode) discussing the breaking changes and providing instructions for manual updates.\r\n\r\nBelow are the steps required to update a previous chain:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# Migrating plasma users \u2014> altda\r\n\r\n## Modify rollup.json config file:\r\n\r\nThe `plasma` config could have been specified in one of two ways:\r\n\r\n1. legacy `plasma` config:\r\n\r\n```json\r\n\"use_plasma\": true,\r\n\"da_commitment_type\": \"GenericCommitment\",\r\n\"da_challenge_contract_address\": \"0xAAA\",\r\n\"da_challenge_window\": 1000,\r\n\"da_resolve_window\": 2000,\r\n```\r\n\r\n1. recent `plasma` config:\r\n\r\n```json\r\n\"plasma_config\": {\r\n\t\"da_commitment_type\": \"GenericCommitment\",\r\n\t\"da_challenge_contract_address\": \"0xAAA\",\r\n\t\"da_challenge_window\": 1000,\r\n\t\"da_resolve_window\": 2000\r\n}\r\n```\r\n\r\nRemove those fields and instead create the new `altda` config (omitting any fields not present in the old config):\r\n\r\n```json\r\n\"alt_da\": {\r\n\t\"da_commitment_type\": \"GenericCommitment\",\r\n\t\"da_challenge_contract_address\": \"0xAAA\",\r\n\t\"da_challenge_window\": 1000,\r\n\t\"da_resolve_window\": 2000\r\n}\r\n```\r\n\r\n## Repo commits to use\r\n\r\nUse the commits below (or any one more recent) to pull in the latest `op-stack` code that is compatible with the new `altda` config.\r\n\r\n- monorepo: [commit](https://github.com/ethereum-optimism/optimism/commit/0bb2ff57c8133f1e3983820c0bf238001eca119b)\r\n- superchain-registry: [commit](https://github.com/ethereum-optimism/superchain-registry/commit/0c96567855b9a605bd8028b63d86b7296e6ec305)\r\n\r\n## Update op-stack runtime config params\r\n\r\nCLI params (for both `op-node` and `op-batcher`)\r\n\r\n| Former CLI param | Current CLI param |\r\n| --- | --- |\r\n| \u2014plasma.enabled | \u2014altda.enabled |\r\n| \u2014plasma.da-server | \u2014altda.da-server |\r\n| \u2014plasma.verify-on-read | \u2014altda.verify-on-read |\r\n| \u2014plasma.da-service | \u2014altda.da-service |\r\n\r\n`op-node` env vars\r\n\r\n| Former env var | Current env var |\r\n| --- | --- |\r\n| OP_NODE_PLASMA_ENABLED | OP_NODE_ALTDA_ENABLED |\r\n| OP_NODE_PLASMA_DA_SERVER | OP_NODE_ALTDA_DA_SERVER |\r\n| OP_NODE_PLASMA_VERIFY_ON_READ | OP_NODE_ALTDA_VERIFY_ON_READ |\r\n| OP_NODE_PLASMA_DA_SERVICE | OP_NODE_ALTDA_DA_SERVICE |\r\n\r\n`op-batcher` env vars\r\n\r\n| Former env var | Current env var |\r\n| --- | --- |\r\n| OP_BATCHER_PLASMA_ENABLED | OP_BATCHER_ALTDA_ENABLED |\r\n| OP_BATCHER_PLASMA_DA_SERVER | OP_BATCHER_ALTDA_DA_SERVER |\r\n| OP_BATCHER_PLASMA_VERIFY_ON_READ | OP_BATCHER_ALTDA_VERIFY_ON_READ |\r\n| OP_BATCHER_PLASMA_DA_SERVICE | OP_BATCHER_ALTDA_DA_SERVICE |\r\n\r\n`op-alt-da` (formerly `op-plasma`) `daserver` env vars\r\n\r\n| Former env var | Current env var |\r\n| --- | --- |\r\n| OP_PLASMA_DA_SERVER_ADDR | OP_ALTDA_SERVER_ADDR |\r\n| OP_PLASMA_DA_SERVER_PORT | OP_ALTDA_SERVER_PORT |\r\n| OP_PLASMA_DA_SERVER_FILESTORE_PATH | OP_ALTDA_SERVER_FILESTORE_PATH |\r\n| OP_PLASMA_DA_SERVER_GENERIC_COMMITMENT | OP_ALTDA_SERVER_GENERIC_COMMITMENT |\r\n| OP_PLASMA_DA_SERVER_S3_BUCKET | OP_ALTDA_SERVER_S3_BUCKET |\r\n| OP_PLASMA_DA_SERVER_S3_ENDPOINT | OP_ALTDA_SERVER_S3_ENDPOINT |\r\n| OP_PLASMA_DA_SERVER_S3_ACCESS_KEY_ID | OP_ALTDA_SERVER_S3_ACCESS_KEY_ID |\r\n| OP_PLASMA_DA_SERVER_S3_ACCESS_KEY_SECRET | OP_ALTDA_SERVER_S3_ACCESS_KEY_SECRET |\r\n", "CLOSED", 0, "brokewhale", "2024-09-04T14:45:59Z", "2024-09-06T22:46:04Z", "2024-09-06T22:46:04Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6VM1yc", 881, "Migrating tutorials with sdk-optimism to viem-opstack", "Migrating tutorials with sdk-optimism to viem-opstack ", "CLOSED", 0, "krofax", "2024-09-03T15:26:48Z", "2024-09-03T17:13:26Z", "2024-09-03T17:13:26Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6VK7mM", 880, "Creating Your Own L2 Rollup Testnet: Cannot start op-proposer", "When I run the op-proposer I get the following output:\r\n\r\n![image](https://github.com/user-attachments/assets/0288866c-5d95-4b3d-8074-020fb5a85e51)\r\n\r\n(I have added 2 info lines to the code so I can see the contract address.)\r\n\r\nThis is the third time I have run through the whole process and each time it is the wrong contract address.\r\n\r\nI am not publishing my own contract and am tying to get the system to talk to the OP Sepolia Testnet contract 0x4e59b44847b379578588920cA78FbF26c0B4956C.\r\n\r\nI think the issue is with the .deploy file I am generating, that contains:\r\n\"L2OutputOracleProxy\": \"0x5D94CA1257D8d54bC4e97918E6bFB21510bFCd87\"\r\n\r\nHow do I generate this file to point to the 0x4e59b44847b379578588920cA78FbF26c0B4956C address?\r\n\r\n", "CLOSED", 0, "bwakabats", "2024-09-03T11:50:12Z", "2024-09-05T23:02:12Z", "2024-09-05T16:01:48Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6Umhlv", 867, "[TUTORIAL] Creating Your Own L2 Rollup Testnet Deploy the L1 contracts", "### Tutorial title\r\n\r\nCreating Your Own L2 Rollup Testnet\r\n\r\n### Tutorial description\r\n\r\n## Tutorial\r\n- Creating Your Own L2 Rollup Testnet\r\n\r\n---\r\n\r\n## Tag\r\n- Deploy the L1 contracts\r\n\r\n`forge script scripts/Deploy.s.sol:Deploy --private-key $GS_ADMIN_PRIVATE_KEY --broadcast --rpc-url $L1_RPC_URL --slow`\r\nError: No such file or directory (os error 2)\ud83d\udc48scripts/Deploy.s.sol:Deploy\r\n\r\n---\r\n\r\n## Question\r\n\r\nscripts/Deploy.s.sol:Deploy **Error**\r\nscripts/deploy/Deploy.s.sol:Deploy \ud83d\udc48Is this correct?\r\n\r\n\r\n### Tutorial tags\r\n\r\nDeploy the L1 contracts\r\n\r\n### Skill level\r\n\r\nIntermediate\r\n\r\n### Hosted on Optimism.io or hosted elsewhere?\r\n\r\nHosted on optimism.io\r\n\r\n### For tutorials to be hosted on Optimism.io: Tutorial Content\r\n\r\n_No response_\r\n\r\n### For tutorials hosted elsewhere: URL to tutorial\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#deploy-the-l1-contracts\r\n\r\n### Additional context\r\n\r\n_No response_", "CLOSED", 0, "fuku-j", "2024-08-28T23:10:09Z", "2024-09-06T11:26:15Z", "2024-09-05T16:02:21Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6UDu1p", 852, "[FAQ] Delegation", "### FAQ Category\n\nAdd faq item to a brand new page\n\n### What page will this FAQ item live?\n\nDelegation\n\n### write the question from a developer's perspective\n\nWhat is delegation?\n\n### answer the question identified above as best as possible\n\nParticipating in governance of the Optimism Token House will require a serious time commitment. For this reason, we will strongly encourage people to delegate the voting power of their tokens to a community member who has explicitly volunteered to play an active role in Token House governance. These volunteers are called delegates. When you delegate your voting power, you retain 100% ownership of your tokens, and can use them however you want. You may change your delegate selection at any time.\n\n### Additional context\n\n_No response_", "CLOSED", 0, "offt0theether", "2024-08-23T22:59:19Z", "2024-09-06T22:34:02Z", "2024-09-06T22:34:02Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6UCJx0", 849, "[ERROR] Tutorials\uff1aCreating Your Own L2 Rollup Testnet   issue", "**Description:**\r\n\r\nWhen running `op-geth`, I encountered the following error:\r\n\r\n```\r\ngeth/datadir/geth/chaindata/ancient/chain readonly=false\r\nFatal: Failed to register the Ethereum service: incompatible state scheme, stored: path, provided: hash\r\n```\r\n\r\nThis error was resolved by performing the following steps:\r\n\r\n1. Remove the existing `datadir`:\r\n   ```bash\r\n   rm -rf datadir\r\n   ```\r\n2. Recreate the `datadir`:\r\n   ```bash\r\n   mkdir datadir\r\n   ```\r\n3. Reinitialize with the following command:\r\n   ```bash\r\n   build/bin/geth init --datadir=datadir --state.scheme=hash genesis.json\r\n   ```\r\n\r\nDuring the execution of the `build/bin/geth init --datadir=datadir --state.scheme=hash genesis.json` command, I encountered another error:\r\n\r\n```log\r\nERROR[08-23|17:11:15.047] Head block is not reachable\r\nINFO [08-23|17:11:15.362] Persisted trie from memory database      nodes=3137 size=453.32KiB time=17.070932ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=0 livesize=0.00B\r\nINFO [08-23|17:11:15.535] Successfully wrote genesis state         database=chaindata hash=fb7ed5..9b1a0f\r\nINFO [08-23|17:11:15.535] Defaulting to pebble as the backing database\r\nINFO [08-23|17:11:15.535] Allocated cache and file handles         database=/root/op-geth/datadir/geth/lightchaindata cache=16.00MiB handles=16\r\nINFO [08-23|17:11:15.572] Opened ancient database                  database=/root/op-geth/datadir/geth/lightchaindata/ancient/chain readonly=false\r\nINFO [08-23|17:11:15.572] State scheme set by user                 scheme=hash\r\nINFO [08-23|17:11:15.572] Writing custom genesis block\r\nERROR[08-23|17:11:15.588] Head block is not reachable\r\n```\r\n\r\nI chose to ignore this error for now, as it didn\u2019t seem to affect subsequent operations. However, I believe this issue should be investigated to determine its cause and to ensure that it does not lead to further problems down the line.\r\n\r\n**Steps to Reproduce:**\r\n\r\n1. Run `op-geth` with the specified configurations.\r\n2. Execute the above steps to resolve the initial error.\r\n3. Observe the output for the \"Head block is not reachable\" error during `geth init`.\r\n\r\n**Expected Behavior:**\r\n\r\nThe `geth init` command should complete without any errors, ensuring that the system is correctly initialized.\r\n\r\n**Actual Behavior:**\r\n\r\nAn error stating \"Head block is not reachable\" is thrown during the initialization process.\r\n\r\n**Environment:**\r\n- op-geth version: commit 641e996a2dcf1f81bac9416cb6124f86a69f1de7 \r\n- Operating System: ubuntu 24.04\r\n\r\n\r\n**Additional Context:**\r\n\r\nI suggest investigating the root cause of the \"Head block is not reachable\" error and determining whether it might affect future operations. After that, modify the `geth init` command of the document.\r\n", "CLOSED", 0, "opfocus", "2024-08-23T17:41:25Z", "2024-09-05T16:03:10Z", "2024-09-05T16:03:10Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6T69iV", 846, "[TUTORIAL] Problem in the Build the Source Code section in create op rollup tutorial", "### Tutorial title\n\nIssues when executing make command\n\n### Tutorial description\n\nI followed the OP stack Docs to [create a rollup](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup) on Sepolia Testnet\r\n\r\nIn section  **6 -Build the various packages inside of the Optimism Monorepo**  i encounter the following error \r\n\r\n![screen1](https://github.com/user-attachments/assets/c9b7e453-0ecb-4353-8108-69c32f45344e)\r\n\r\n\n\n### Tutorial tags\n\ntutorial\n\n### Skill level\n\nIntermediate\n\n### Hosted on Optimism.io or hosted elsewhere?\n\nHosted on optimism.io\n\n### For tutorials to be hosted on Optimism.io: Tutorial Content\n\n_No response_\n\n### For tutorials hosted elsewhere: URL to tutorial\n\n_No response_\n\n### Additional context\n\ni am using the branch tutorials/chain", "CLOSED", 0, "Hazem-dh", "2024-08-22T20:54:00Z", "2024-09-04T15:39:51Z", "2024-09-04T15:39:51Z", "ethereum-optimism/docs", "2025-08-30 20:50:12"]
["I_kwDOKIwiaM6WaTA8", 898, "Update network upgrade page with granite HF", "Flagging the <https://docs.optimism.io/builders/node-operators/network-upgrades|network upgrade> page needs updates\u2014fjord gov approval dates + granite HF info", "CLOSED", 0, "cpengilly", "2024-09-12T22:36:26Z", "2024-09-13T01:54:04Z", "2024-09-13T01:54:04Z", "ethereum-optimism/docs", "2025-08-30 20:50:28"]
["I_kwDOKIwiaM6VieKm", 887, "Update the smart contract release page for `op-contracts/v1.6.0`", "## Description\n\nA new L1 contract release has just been published [op-contracts/v1.6.0](https://github.com/ethereum-optimism/optimism/releases/tag/op-contracts%2Fv1.6.0). We need to update the [smart contracts overview](https://docs.optimism.io/stack/smart-contracts) page with the latest details. \n\n- [x] changelog is updated\n- [x] governance post is included\n- [x] description of the release is added\n- [x] official release page is linked", "CLOSED", 0, "sbvegan", "2024-09-05T22:00:36Z", "2024-09-13T01:54:04Z", "2024-09-13T01:54:04Z", "ethereum-optimism/docs", "2025-08-30 20:50:28"]
["I_kwDOKIwiaM6U9Wek", 878, "2024-08-01..2024-08-31 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 42 days, 11:50:00 | 50 days, 6:30:52 | 79 days, 3:00:41 |\n| Time to close | 100 days, 1:10:45 | 64 days, 17:54:15 | 227 days, 20:22:00 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 21 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [DOCS] Remove op-heartbeat parts of docs | https://github.com/ethereum-optimism/docs/issues/863 | [protolambda](https://github.com/protolambda) | None | 1:00:53 | None |\n| Add social reviews to docs links | https://github.com/ethereum-optimism/docs/issues/859 | [krofax](https://github.com/krofax) | None | 1:07:34 | None |\n| [FAQ] Superchain | https://github.com/ethereum-optimism/docs/issues/851 | [offt0theether](https://github.com/offt0theether) | None | 0:21:47 | None |\n| [DOCS] Update FAQ | https://github.com/ethereum-optimism/docs/issues/842 | [prestwich](https://github.com/prestwich) | 5:07:42 | 5 days, 1:11:17 | None |\n| [DOCS] Improve blob configuration after ecotone upgrade | https://github.com/ethereum-optimism/docs/issues/803 | [siddharth0a](https://github.com/siddharth0a) | 27 days, 7:35:16 | 27 days, 7:35:16 | None |\n| [DOCS] Improve search ability for docker images | https://github.com/ethereum-optimism/docs/issues/785 | [sbvegan](https://github.com/sbvegan) | None | 24 days, 1:09:00 | None |\n| [DOCS] expected internal reverts for withdrawal transactions | https://github.com/ethereum-optimism/docs/issues/772 | [sbvegan](https://github.com/sbvegan) | None | 59 days, 23:36:52 | None |\n| [DOCS] Add PR title | https://github.com/ethereum-optimism/docs/issues/758 | [Sade28](https://github.com/Sade28) | None | 62 days, 14:19:31 | None |\n| [RPC PROVIDER] Add PR title | https://github.com/ethereum-optimism/docs/issues/748 | [Sintayew4](https://github.com/Sintayew4) | 64 days, 17:44:06 | 64 days, 17:44:06 | None |\n| [FAUCET] Add PR title | https://github.com/ethereum-optimism/docs/issues/747 | [Sintayew4](https://github.com/Sintayew4) | 64 days, 17:51:22 | 64 days, 17:51:22 | None |\n| [DOCS] Add PR title | https://github.com/ethereum-optimism/docs/issues/746 | [Sintayew4](https://github.com/Sintayew4) | 64 days, 17:54:15 | 64 days, 17:54:15 | None |\n| [DOCS] Add Chain Operator Feature: Span Batches | https://github.com/ethereum-optimism/docs/issues/725 | [sbvegan](https://github.com/sbvegan) | 82 days, 17:17:18 | 84 days, 18:46:30 | None |\n| Feedback for \u201cDeploying Your Contracts for Free on the Superchain\u201d | https://github.com/ethereum-optimism/docs/issues/700 | [rbio7](https://github.com/rbio7) | 1 day, 2:21:44 | 92 days, 0:17:02 | None |\n| [DOCS] OP Stack 'Components' image is out of date | https://github.com/ethereum-optimism/docs/issues/673 | [OPMattie](https://github.com/OPMattie) | 0:17:58 | 104 days, 22:47:34 | None |\n| [DOCS] Add new page about superchain-registry | https://github.com/ethereum-optimism/docs/issues/602 | [sbvegan](https://github.com/sbvegan) | 33 days, 12:24:43 | 151 days, 20:41:47 | None |\n| [DOCS] Add callout on the cap for sequencer.l1-confs and verifier.l1-confs | https://github.com/ethereum-optimism/docs/issues/563 | [sbvegan](https://github.com/sbvegan) | 53 days, 1:17:06 | 168 days, 3:27:02 | None |\n| [DOCS] Add `rollup.sequencerhttp` to node operation docs | https://github.com/ethereum-optimism/docs/issues/519 | [sbvegan](https://github.com/sbvegan) | None | 182 days, 7:27:24 | None |\n| [DOCS] ProtocolVersions contract address is missing | https://github.com/ethereum-optimism/docs/issues/430 | [sbvegan](https://github.com/sbvegan) | 50 days, 6:30:52 | 223 days, 20:16:29 | None |\n| Feedback for \u201cSmart Contract Overview\u201d | https://github.com/ethereum-optimism/docs/issues/426 | [Sabnock01](https://github.com/Sabnock01) | 0:03:06 | 227 days, 20:22:00 | None |\n| [DOCS] Details on the sequencer fee vault | https://github.com/ethereum-optimism/docs/issues/366 | [sbvegan](https://github.com/sbvegan) | 109 days, 23:24:34 | 238 days, 1:13:12 | None |\n| [DOCS] Add information about `proxyd` | https://github.com/ethereum-optimism/docs/issues/341 | [sbvegan](https://github.com/sbvegan) | None | 253 days, 21:34:51 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-08-01..2024-08-31 -reason:\"not planned\" -label:monthly-report`\n", "CLOSED", 0, "github-actions", "2024-09-01T00:30:14Z", "2024-09-13T00:06:13Z", "2024-09-13T00:06:13Z", "ethereum-optimism/docs", "2025-08-30 20:50:28"]
["I_kwDOKIwiaM6U9Wd8", 877, "2024-08-01..2024-08-31 metrics report for opened issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 2 days, 8:11:08 | 19:42:03 | 4 days, 22:55:20 |\n| Time to close | 1 day, 6:55:23 | 1:04:14 | 3 days, 13:10:10 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 6 |\n| Number of items closed | 4 |\n| Total number of items created | 10 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [TUTORIAL] Creating Your Own L2 Rollup Testnet Deploy the L1 contracts | https://github.com/ethereum-optimism/docs/issues/867 | [fuku-j](https://github.com/fuku-j) | None | None | None |\n| [DOCS] Remove op-heartbeat parts of docs | https://github.com/ethereum-optimism/docs/issues/863 | [protolambda](https://github.com/protolambda) | None | 1:00:53 | None |\n| Add social reviews to docs links | https://github.com/ethereum-optimism/docs/issues/859 | [krofax](https://github.com/krofax) | None | 1:07:34 | None |\n| [FAQ] Delegation | https://github.com/ethereum-optimism/docs/issues/852 | [offt0theether](https://github.com/offt0theether) | None | None | None |\n| [FAQ] Superchain | https://github.com/ethereum-optimism/docs/issues/851 | [offt0theether](https://github.com/offt0theether) | None | 0:21:47 | None |\n| [ERROR] Tutorials\uff1aCreating Your Own L2 Rollup Testnet   issue | https://github.com/ethereum-optimism/docs/issues/849 | [opfocus](https://github.com/opfocus) | None | None | None |\n| [TUTORIAL] Problem in the Build the Source Code section in create op rollup tutorial | https://github.com/ethereum-optimism/docs/issues/846 | [Hazem-dh](https://github.com/Hazem-dh) | 19:42:03 | None | None |\n| [DOCS] Update FAQ | https://github.com/ethereum-optimism/docs/issues/842 | [prestwich](https://github.com/prestwich) | 5:07:42 | 5 days, 1:11:17 | None |\n| Forced Withdrawal for OP stack rollup | https://github.com/ethereum-optimism/docs/issues/840 | [krofax](https://github.com/krofax) | 5 days, 23:43:39 | None | None |\n| Remove pnpm/Javascript references | https://github.com/ethereum-optimism/docs/issues/828 | [cpengilly](https://github.com/cpengilly) | None | None | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue created:2024-08-01..2024-08-31 -reason:\"not planned\" -label:monthly-report`\n", "CLOSED", 0, "github-actions", "2024-09-01T00:30:08Z", "2024-09-13T00:06:13Z", "2024-09-13T00:06:12Z", "ethereum-optimism/docs", "2025-08-30 20:50:28"]
["I_kwDOKIsnqM6WD5G_", 328, "Nonce overrides not picked up in nested ceremony", "In the 018 ceremony, the Foundation [nonce override](https://github.com/ethereum-optimism/superchain-ops/blob/main/tasks/eth/018-granite-upgrade/.env#L9) was not respected. \r\n\r\nThe signers who signed after the 016 ceremony were unaffected, as the actual nonce matched the setting in the `.env` file (`7`), however those who signed earlier, signed on the current nonce at the time (`6`).\r\n\r\nHere is output from one signer at the time, which shows the correct nonces, but crucially does not include [this line](https://github.com/base-org/contracts/blob/main/script/universal/NestedMultisigBuilder.sol#L67): `Creating transaction with nonce:`.\r\n\r\n```\r\n== Logs ==\r\n  Reading transaction bundle /Users/k/Projects/work/superchain-ops/tasks/eth/018-granite-upgrade/input.json\r\n  Safe 0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A current nonce: 5\r\n  Safe 0x847B5c174615B1B7fDF770882256e2D3E95b9D92 current nonce: 7\r\n  Safe 0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A current nonce: 5\r\n  ---\r\nNested hash:\r\n  0x09fd703ab1d8117f8436d4d43e921136a28fd49fb439f37ef991a0249f6045b0\r\n  Safe 0x847B5c174615B1B7fDF770882256e2D3E95b9D92 current nonce: 7\r\n  ---\r\nIf submitting onchain, call Safe.approveHash on 0x847B5c174615B1B7fDF770882256e2D3E95b9D92 with the following hash:\r\n  0xb0fd1c9e0540bd6ae27151cf9c497d8bb4f1fd1710e3516f6e2eaf5e0e8908ad\r\n  Safe 0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A current nonce: 5\r\n  Safe 0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A current nonce: 5\r\n  Safe 0x847B5c174615B1B7fDF770882256e2D3E95b9D92 current nonce: 7\r\n```\r\n\r\n## Repro\r\n\r\nThis can be repro'd with the following steps:\r\n\r\n1. `cd tasks/eth/018-granite-upgrade`\r\n2. Edit the `.env` file to update `SAFE_NONCE_0X847B5c174615B1B7fDF770882256e2D3E95b9D92=9` (or any value other than the current nonce.\r\n3. run \r\n  ```\r\n  SIMULATE_WITHOUT_LEDGER=1 just \\\r\n   --dotenv-path $(pwd)/.env \\\r\n   --justfile ../../../nested.just \\\r\n   simulate foundation\r\n   ```", "CLOSED", 0, "maurelian", "2024-09-10T19:53:56Z", "2024-09-10T21:13:52Z", "2024-09-10T21:13:52Z", "ethereum-optimism/superchain-ops", "2025-08-30 20:50:30"]
["I_kwDOJ_r-bs6VzqV-", 557, "`add-chain` should detect legacy rollup.json formats using \"plasma\"", "And direct the user to instructions for migrating the `rollup.json`. \r\n\r\nWe should add a test case for a legacy rollup.json, we can use the one from redstone as a guide:\r\n\r\n```json\r\n{\r\n  \"genesis\": {\r\n    \"l1\": {\r\n      \"hash\": \"0xb9ec694afdde2e2ed661ed8ec56dace5cf8723801342fa1229e693f2a98af672\",\r\n      \"number\": 19578374\r\n    },\r\n    \"l2\": {\r\n      \"hash\": \"0xa4f55631013577464810893a05b18f07fe483885a6ef93e0060e7128bdf4ca3b\",\r\n      \"number\": 0\r\n    },\r\n    \"l2_time\": 1712185091,\r\n    \"system_config\": {\r\n      \"batcherAddr\": \"0xa31cb9bc414601171d4537580f98f66c03aecd43\",\r\n      \"overhead\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\r\n      \"scalar\": \"0x0000000000000000000000000000000000000000000000000000000000001def\",\r\n      \"gasLimit\": 100000000\r\n    }\r\n  },\r\n  \"block_time\": 2,\r\n  \"max_sequencer_drift\": 600,\r\n  \"seq_window_size\": 3600,\r\n  \"channel_timeout\": 300,\r\n  \"l1_chain_id\": 1,\r\n  \"l2_chain_id\": 690,\r\n  \"regolith_time\": 0,\r\n  \"canyon_time\": 0,\r\n  \"delta_time\": 0,\r\n  \"ecotone_time\": 0,\r\n  \"batch_inbox_address\": \"0xff00000000000000000000000000000000000690\",\r\n  \"deposit_contract_address\": \"0xc7bcb0e8839a28a1cfadd1cf716de9016cda51ae\",\r\n  \"l1_system_config_address\": \"0x8f2428f7189c0d92d1c4a5358903a8c80ec6a69d\",\r\n  \"protocol_versions_address\": \"0x0000000000000000000000000000000000000000\",\r\n  \"da_challenge_address\": \"0x97a2da87d3439b172e6dd027220e01c9cb565b80\",\r\n  \"da_challenge_window\": 3600,\r\n  \"da_resolve_window\": 3600,\r\n  \"use_plasma\": true\r\n}\r\n```\r\n\r\nIn the current behaviour, this results in `alt_da = Ethda` being set in the chain config. Presumably the add-chain consistency checks fail at runtime for a config like this, so at least we would have some kind of warning that something is not right. \r\n", "CLOSED", 0, "geoknee", "2024-09-09T08:54:56Z", "2024-09-10T14:54:27Z", "2024-09-10T14:54:27Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:50:53"]
["I_kwDOJ_r-bs6UtTCk", 533, "Get OP Sepolia genesis validation working ", "We have a branch up with the deply-config and a (probably incorrect) commit here https://github.com/ethereum-optimism/superchain-registry/compare/gk/gen-lisk...gk/gen-opsep?expand=1.\r\n\r\nThe task is to debug why the validation is not working correctly at present. \r\n\r\nWe should dogfood this guide https://www.notion.so/oplabs/How-to-troubleshoot-genesis-validation-for-standard-OPChains-in-the-superchain-registry-21cfc19131e34c4aa2817dd74c0e64ec", "CLOSED", 0, "geoknee", "2024-08-29T15:38:43Z", "2024-09-13T13:10:09Z", "2024-09-13T13:10:09Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:50:53"]
["I_kwDOJ_r-bs6UabyL", 513, "Get genesis validation checks running in CI. ", "Prereq for merging #489 \r\n\r\nThe checks for genesis validation require a specific set of tool versions to be installed in the docker image in which the validation script runs - some of these tool versions are known at build time, whereas some other tool versions such as `go` is derived from the `go.mod` file  at the commit at which the validation runs. We currently use the image `ci-builder:v0.49.0` for running the all jobs in superchain registry. The image is built from this [Dockerfile](https://github.com/ethereum-optimism/optimism/blob/develop/ops/docker/ci-builder/Dockerfile). So far, we have explored two options to install the correct tool versions to get the genesis validation checks to run on CI runner:\r\n\r\n* Install the required tool versions (nvm, go etc.) as pre-req steps in the Circle CI job that is being executed. With this approach, we are observing that the tool versions/settings aren't taking effect when running the actual validation.\r\n\r\n* Modify the base image dockerfile to install the required tools in to the base image. I have been unable to build the image locally so far, even without changes (hitting timeout errors and such).\r\n\r\nContinuing to explore both options.", "CLOSED", 0, "geoknee", "2024-08-27T17:22:08Z", "2024-09-10T09:27:41Z", "2024-09-10T09:27:41Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:50:53"]
["I_kwDOJ_r-bs6S_8ZZ", 478, "Capture genesis creation metadata into the registry", "- `deploy-config.json`\r\n- monorepo commit hash where genesis command was invoked\r\n- command invocation and parameters for the genesis generation command\r\n\r\nSo that we can validate the genesis for standard chains.\r\n\r\nWe may as well store it for all chains, in case they want to become standard in the future. ", "CLOSED", 0, "geoknee", "2024-08-14T15:56:48Z", "2024-09-10T09:37:43Z", "2024-09-10T09:37:43Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:50:53"]
["I_kwDOKSJyfM6Wq21k", 472, "dapp-console priby logo", "Invalid logo on console.optimism.io sign-in privy popup\r\n\r\n<img width=\"849\" alt=\"image\" src=\"https://github.com/user-attachments/assets/40772fb9-6391-4785-939f-738b5862533b\">\r\n", "CLOSED", 0, "kelreel", "2024-09-16T08:25:46Z", "2024-09-16T19:21:28Z", "2024-09-16T19:21:27Z", "ethereum-optimism/ecosystem", "2025-08-30 20:53:05"]
["I_kwDOH2Qg5s6WTweo", 376, "Node data synchronization exception", "\r\n**Bug Description**\r\nData synchronization has been abnormal in the past 2 days, often getting stuck and out of sync, and there have been no errors reported\r\n\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\n - Operating System:Ubuntu 20.04\r\n - Package Version:\r\n op-geth:v1.101408.0\r\n op-node:v1.9.0\r\n\r\n\r\n---\r\n", "CLOSED", 0, "wetezos", "2024-09-12T08:47:45Z", "2024-09-19T11:41:45Z", "2024-09-19T11:41:45Z", "ethereum-optimism/op-geth", "2025-08-30 20:53:07"]
["I_kwDOH2Qg5s6U5d1d", 374, "Full node latest snapshot", "# Rationale\r\n\r\nFull syncing from year-old snapshot is too slow and archive snapshot is too heavy. Please, provide latest full non-archival snapshot in https://datadirs.optimism.io/.\r\n", "CLOSED", 0, "circus0988", "2024-08-30T20:04:37Z", "2024-09-16T22:45:00Z", "2024-09-16T22:44:59Z", "ethereum-optimism/op-geth", "2025-08-30 20:53:07"]
["I_kwDOLB-lzc6TxTjb", 350, "L2 Genesis Simplification (L2 MCP)", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\nRight now there is not a great way to do L2 contracts releases because there is network specific configuration in the L2 genesis allocs in the form of storage and bytecode (immutables). This makes it difficult to release an `allocs.json` artifact as a release of the L2 genesis, as well as ensuring that no malicious code has been set in the genesis state of a chain. Ideally there should be a single deterministic L2 genesis state per hardfork and all network specific config should be sourced from L1.\r\n\r\nThis project involves moving all of the network specific configuration in the L2 predeploys to be sourced from L1. We want a system similar to interop's `setConfig` as described [here](https://github.com/ethereum-optimism/specs/issues/122#issuecomment-2272191134) that sets the network specific values into storage via deposit transactions when the `SystemConfig` is initialized.\r\n\r\nExamples of this network specific config:\r\n- [L2StandardBridge.otherBridge](https://github.com/ethereum-optimism/optimism/blob/1dbe9d829361b65320c64a8512b0e82898bd6b05/packages/contracts-bedrock/src/L2/L2StandardBridge.sol#L65)\r\n- [L2CrossDomainMessenger.otherMessenger](https://github.com/ethereum-optimism/optimism/blob/1dbe9d829361b65320c64a8512b0e82898bd6b05/packages/contracts-bedrock/src/L2/L2CrossDomainMessenger.sol#L31)\r\n- [FeeVault config](https://github.com/ethereum-optimism/optimism/blob/1dbe9d829361b65320c64a8512b0e82898bd6b05/packages/contracts-bedrock/src/L2/L1FeeVault.sol#L21), for each of the 3 fee vaults\r\n- L2 ProxyAdmin owner\r\n\r\nInstead of reading these values from storage on L2, they could be exposed via getters on the `L1Block` contract and then read from a single source of truth. The L1 `setConfig` path would be able to issue deposit transactions that can modify these values. This would decouple the L2 genesis state from network specific config and simplify the process of spinning up a new chain because all chains can use the same `allocs.json`", "CLOSED", 0, "tynes", "2024-08-21T21:32:30Z", "2024-09-18T16:17:04Z", "2024-09-18T16:17:04Z", "ethereum-optimism/specs", "2025-08-30 20:53:12"]
["I_kwDOLB-lzc6S3gw8", 330, "Research Area: Introduce Nonce with each Consensus Influencing Event", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe should consider introducing a nonce with each log that influences consensus. This would allow for an optimization within the proof programs where they no longer need to observe and filter all logs to guarantee that they have the full set of logs. A witness can be used to populate the logs and the program can check that the nonces all line up to guarantee that the complete set of logs are present within the program.\r\n\r\nThere are currently 2 logs that impact consensus:\r\n- `TransactionDeposited` from the `OptimismPortal`\r\n- `ConfigUpdated` from the `SystemConfig`\r\n\r\n## TransactionDeposited\r\n\r\nWe could have a nonce on L1 and on L2 and keep them up to date, this could be generally useful to know how many deposits have yet to be processed by offchain software. If we want to hold the invariant that $$L1nonce <= L2nonce$$ then we would need to add the number of deposits inbound in the L1 attributes transaction, since there would be a race condition with upgrading the contracts for existing chains if we simply incremented on L2. This would require a new deposit version and the accumulator would in the L1 attributes transaction would only count deposits that are of the new version\r\n\r\n## ConfigUpdated\r\n\r\nI think that these events can be removed completely from consensus given we follow the pattern designed in https://github.com/ethereum-optimism/specs/issues/122 and a generic form of [this](https://github.com/ethereum-optimism/specs/blob/b0363e747bd1b3411e72aef07de4de41ddbd6773/specs/experimental/custom-gas-token.md#setgaspayingtoken)", "OPEN", 0, "tynes", "2024-08-13T19:04:52Z", "2024-09-17T00:46:17Z", null, "ethereum-optimism/specs", "2025-08-30 20:53:12"]
["I_kwDOLB-lzc6FZWWo", 122, "Potential Research Area: Separate Dynamic and Static L1 Attributes Values", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nAs of Ecotone, the L1 Attributes transaction includes the following information:\r\n\r\n- baseFeeScalar\r\n- blobBaseFeeScalar\r\n- sequenceNumber\r\n- l1BlockTimestamp\r\n- l1BlockNumber \u00a0\r\n- basefee\r\n- blobBaseFee\r\n- l1BlockHash\r\n- batcherHash\r\n\r\nNot all of this information changes every L2 block, which is the reasoning behind [Diff Based L1 Attributes Transactions](https://github.com/ethereum-optimism/specs/blob/main/specs/experimental/diff-based-attributes-tx.md). Some fields are guaranteed to change every L2 block like the sequence number, some fields change every time the L1 origin updates (L1 blocknumber, L1 timestamp, etc) and some fields only change based on chain operator input (batcher hash). \r\n\r\nFor the fields that change automatically based on the L1 origin, we can call those dynamic values. For the values that only change based on chain operator input, we can call those static values.\r\n\r\nThe custom gas token spec adds a new static value which is the address of the ERC20 that represents the gas paying asset for the L2. A new design pattern is followed where the value is set in the system config and then it triggers a special deposit transaction that is able to set the address directly in the L2's L1Block predeploy. This pattern can be made more generic to work with all static values.\r\n\r\nThe next time that we need to add a static value to the L1 Attributes transaction, we should:\r\n- Make a generic pipeline that is very similar to the way that custom gas token deposits its information into L2\r\n- Remove all static values from the L1 attributes transaction and instead allow them to be configured \"just in time\" by the generic pipeline\r\n\r\nThis would allow us to easily allow for the configuration of the batch inbox for example", "OPEN", 0, "tynes", "2024-04-11T15:29:39Z", "2024-09-17T01:09:54Z", null, "ethereum-optimism/specs", "2025-08-30 20:53:12"]
["I_kwDOJ_r-bs6WxRsU", 590, "Deduplicate `ContractBytecodeHashes` and `ContractVersions`", "              Maybe outside the scope of this pr, but related to the cleanup in this pr: is there a way to combine the `ContractBytecodeHashes` and `ContractVersions` structs into one? It seems they are tracking the same list of contracts, so there is a lot of duplicate code with struct fields and toml tags.\r\n\r\nAlso the comment describing `ContractBytecodeHashes` looks like a copy/paste error: https://github.com/ethereum-optimism/superchain-registry/blob/gk/simpler-version-check/superchain/superchain.go#L343-L345\r\n\r\n_Originally posted by @bitwiseguy in https://github.com/ethereum-optimism/superchain-registry/pull/589#discussion_r1761465298_\r\n            ", "CLOSED", 0, "geoknee", "2024-09-16T21:06:07Z", "2024-09-17T08:43:38Z", "2024-09-17T08:43:38Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:53:26"]
["I_kwDOJ_r-bs6V9mAf", 560, "`Data_Availability_Type` test often fails on PRs from forked repos", "See for example here https://app.circleci.com/pipelines/github/ethereum-optimism/superchain-registry/7480/workflows/b88ef5ef-3cd2-44dc-b626-84719e3fc5e9/jobs/23511/parallel-runs/0/steps/0-104\r\n\r\n```\r\n === FAIL: github.com/ethereum-optimism/superchain-registry/validation TestValidation/Lisk_Sepolia_Testnet_(4202)/Data_Availability_Type (0.48s)\r\n    data-availability-type_test.go:52: \r\n                Error Trace:    /home/circleci/project/validation/data-availability-type_test.go:52\r\n                                                        /home/circleci/project/validation/validation_test.go:42\r\n                Error:          Received unexpected error:\r\n                                failed to retrieve previous nonce: missing trie node ca90aa20f2d249344364c8edde61abc21f97a63dbf6b37f54b757c5cbbe03511 (path ) state 0xca90aa20f2d249344364c8edde61abc21f97a63dbf6b37f54b757c5cbbe03511 is not available\r\n                Test:           TestValidation/Lisk_Sepolia_Testnet_(4202)/Data_Availability_Type\r\n                Messages:       failed when checking chain for recent batcher txs from 0x246E119a5BcC2875161b23E4e602e25cEcE96E37\r\n```\r\n\r\nThe failure is due to the L1 RPC endpoint not being an archive node. Typically there would only be an archive node if it is a paid-for endpoint; we use such an endpoint in CI for PRs in our own org's repo (sharing via secret env vars). Sharing the env vars to forked repos is a security risk, so we need to think about possible ways forward without doing that. ", "CLOSED", 0, "geoknee", "2024-09-10T09:46:27Z", "2024-09-18T13:45:43Z", "2024-09-18T13:45:42Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:53:26"]
["I_kwDOJ_r-bs6O0rLp", 362, "Include contract addresses against semantic versions for L1 smart contracts", "https://github.com/ethereum-optimism/superchain-registry/blob/main/validation/standard/standard-versions.toml has been used in favor of https://github.com/ethereum-optimism/superchain-registry/blob/188917d0bfbd62cbb2d3262391cc8335195c050d/superchain/implementations/networks/mainnet.yaml. \r\n\r\nDo we want to include the addresses in the mapping in this repo? What is it useful for going forward? ", "CLOSED", 0, "blmalone", "2024-07-08T17:25:46Z", "2024-09-16T15:41:12Z", "2024-09-16T15:41:12Z", "ethereum-optimism/superchain-registry", "2025-08-30 20:53:26"]
["I_kwDODjvEJM6WgfI1", 11907, "Contract Versioning Tool", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe pretty consistently have issues with semantic versioning of the smart contracts. A tool that can be used to manage semver would be very helpful here, it should be expected to be able to list the semver of all of the contracts as well as automatically bump semver of contracts in different ways (patch, minor, major, beta).\r\n\r\nThere would be a few commands like `list`, `bump <contract name> <type>` where it would automatically modify the source code of the contract directly and `release` where it would accept a list of candidate contracts to release and automatically remove the `beta` tag.\r\n\r\nThere are a few ways to think about the `list` command. My thinking is that it should work on the foundry artifacts rather than the source code, since we publish artifacts as releases. This command has a few ways that it could operate. All solutions likely involve a first step where the ABIs are scanned through, looking for contracts that implement `IVersion`\r\n- ~~Look through the source code directly of the contracts for the `IVersion` and use string parsing to pull out the version.~~ The source code is not included in the artifacts, perhaps the `build-info` but its difficult to work with that file\r\n- Embed the deployed bytecode in a stateless EVM and perform a single call to get the version\r\n- Look at the natspec docs in the compiler output\r\nI think its best to not look at the natspec since a bug could result in 2 different values, plus this will not work for the feature contracts that extend the base contracts since the real semver lives in the base. Running a simple call makes the most sense.\r\n\r\nFor the `bump` command, we will want to operate on the source code itself. We could reuse infra for the `list` command to determine the version and then use string manipulation to update the file directly.\r\n\r\nFor the `release` command, we will want to provide a list of contracts and then use the same infra as the `bump` command but instead trim any `beta` tags.\r\n\r\nThe snapshots could be ran after this and then CI should pass easily.", "OPEN", 0, "tynes", "2024-09-13T15:23:22Z", "2024-09-13T17:34:32Z", null, "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6WX3eu", 11879, "OptimismMintableERC20: Migrate to solady from oz", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nMigrating to solady from oz for the `OptimismMintableERC20` is a net scalability improvement for the network as deposited tokens will use less gas.\r\n\r\nSome considerations:\r\n- The storage layout is modified. This should not be a problem as these are not upgradable contracts. We will never be able to perform a storage migration on these contracts. As long as the public ABI is preserved, it should be perfectly fine for the storage layout to change.\r\n- The ABI changes via the removal of `increaseAllowance` and `decreaseAllowance`. These methods are not recommended to be used and are not part of the ERC20 standard, see discussion in https://github.com/OpenZeppelin/openzeppelin-contracts/issues/4583. We could easily port the removed code and tests from solady to the implementation of `OptimismMintableERC20` token from https://github.com/Vectorized/solady/pull/602\r\n- Audit coverage: The solady ERC20 implementation has been audited [here](https://github.com/Vectorized/solady/blob/main/audits/cantina-solady-report.pdf). The version used by the monorepo has no diff in the ERC20 implementation compared to the audit\r\n- CREATE2 usage when deploying `OptimismMintableERC20` tokens will result in different address creation. This is a known issue already as the bytecode has changed many times in the past. This is why we are using CREATE3 for the `OptimismMintableSuperchainERC20`. Our mental models around management of the factory deployed tokens already takes into account non standard create2 usage\r\n\r\nThe following diff is on top of https://github.com/ethereum-optimism/optimism/pull/11868 and shows what is required for the implementation:\r\n\r\n```diff\r\ndiff --git a/packages/contracts-bedrock/snapshots/abi/OptimismMintableERC20.json b/packages/contracts-bedrock/snapshots/abi/OptimismMintableERC20.json\r\nindex 7787b0754..c8e7d16f5 100644\r\n--- a/packages/contracts-bedrock/snapshots/abi/OptimismMintableERC20.json\r\n+++ b/packages/contracts-bedrock/snapshots/abi/OptimismMintableERC20.json\r\n@@ -49,7 +49,7 @@\r\n     \"outputs\": [\r\n       {\r\n         \"internalType\": \"bytes32\",\r\n-        \"name\": \"\",\r\n+        \"name\": \"result\",\r\n         \"type\": \"bytes32\"\r\n       }\r\n     ],\r\n@@ -86,12 +86,12 @@\r\n     \"inputs\": [\r\n       {\r\n         \"internalType\": \"address\",\r\n-        \"name\": \"owner\",\r\n+        \"name\": \"_owner\",\r\n         \"type\": \"address\"\r\n       },\r\n       {\r\n         \"internalType\": \"address\",\r\n-        \"name\": \"spender\",\r\n+        \"name\": \"_spender\",\r\n         \"type\": \"address\"\r\n       }\r\n     ],\r\n@@ -134,7 +134,7 @@\r\n     \"inputs\": [\r\n       {\r\n         \"internalType\": \"address\",\r\n-        \"name\": \"account\",\r\n+        \"name\": \"owner\",\r\n         \"type\": \"address\"\r\n       }\r\n     ],\r\n@@ -142,7 +142,7 @@\r\n     \"outputs\": [\r\n       {\r\n         \"internalType\": \"uint256\",\r\n-        \"name\": \"\",\r\n+        \"name\": \"result\",\r\n         \"type\": \"uint256\"\r\n       }\r\n     ],\r\n@@ -193,54 +193,6 @@\r\n     \"stateMutability\": \"view\",\r\n     \"type\": \"function\"\r\n   },\r\n-  {\r\n-    \"inputs\": [\r\n-      {\r\n-        \"internalType\": \"address\",\r\n-        \"name\": \"spender\",\r\n-        \"type\": \"address\"\r\n-      },\r\n-      {\r\n-        \"internalType\": \"uint256\",\r\n-        \"name\": \"subtractedValue\",\r\n-        \"type\": \"uint256\"\r\n-      }\r\n-    ],\r\n-    \"name\": \"decreaseAllowance\",\r\n-    \"outputs\": [\r\n-      {\r\n-        \"internalType\": \"bool\",\r\n-        \"name\": \"\",\r\n-        \"type\": \"bool\"\r\n-      }\r\n-    ],\r\n-    \"stateMutability\": \"nonpayable\",\r\n-    \"type\": \"function\"\r\n-  },\r\n-  {\r\n-    \"inputs\": [\r\n-      {\r\n-        \"internalType\": \"address\",\r\n-        \"name\": \"spender\",\r\n-        \"type\": \"address\"\r\n-      },\r\n-      {\r\n-        \"internalType\": \"uint256\",\r\n-        \"name\": \"addedValue\",\r\n-        \"type\": \"uint256\"\r\n-      }\r\n-    ],\r\n-    \"name\": \"increaseAllowance\",\r\n-    \"outputs\": [\r\n-      {\r\n-        \"internalType\": \"bool\",\r\n-        \"name\": \"\",\r\n-        \"type\": \"bool\"\r\n-      }\r\n-    ],\r\n-    \"stateMutability\": \"nonpayable\",\r\n-    \"type\": \"function\"\r\n-  },\r\n   {\r\n     \"inputs\": [],\r\n     \"name\": \"l1Token\",\r\n@@ -310,7 +262,7 @@\r\n     \"outputs\": [\r\n       {\r\n         \"internalType\": \"uint256\",\r\n-        \"name\": \"\",\r\n+        \"name\": \"result\",\r\n         \"type\": \"uint256\"\r\n       }\r\n     ],\r\n@@ -411,7 +363,7 @@\r\n     \"outputs\": [\r\n       {\r\n         \"internalType\": \"uint256\",\r\n-        \"name\": \"\",\r\n+        \"name\": \"result\",\r\n         \"type\": \"uint256\"\r\n       }\r\n     ],\r\n@@ -502,7 +454,7 @@\r\n       {\r\n         \"indexed\": false,\r\n         \"internalType\": \"uint256\",\r\n-        \"name\": \"value\",\r\n+        \"name\": \"amount\",\r\n         \"type\": \"uint256\"\r\n       }\r\n     ],\r\n@@ -565,11 +517,46 @@\r\n       {\r\n         \"indexed\": false,\r\n         \"internalType\": \"uint256\",\r\n-        \"name\": \"value\",\r\n+        \"name\": \"amount\",\r\n         \"type\": \"uint256\"\r\n       }\r\n     ],\r\n     \"name\": \"Transfer\",\r\n     \"type\": \"event\"\r\n+  },\r\n+  {\r\n+    \"inputs\": [],\r\n+    \"name\": \"AllowanceOverflow\",\r\n+    \"type\": \"error\"\r\n+  },\r\n+  {\r\n+    \"inputs\": [],\r\n+    \"name\": \"AllowanceUnderflow\",\r\n+    \"type\": \"error\"\r\n+  },\r\n+  {\r\n+    \"inputs\": [],\r\n+    \"name\": \"InsufficientAllowance\",\r\n+    \"type\": \"error\"\r\n+  },\r\n+  {\r\n+    \"inputs\": [],\r\n+    \"name\": \"InsufficientBalance\",\r\n+    \"type\": \"error\"\r\n+  },\r\n+  {\r\n+    \"inputs\": [],\r\n+    \"name\": \"InvalidPermit\",\r\n+    \"type\": \"error\"\r\n+  },\r\n+  {\r\n+    \"inputs\": [],\r\n+    \"name\": \"PermitExpired\",\r\n+    \"type\": \"error\"\r\n+  },\r\n+  {\r\n+    \"inputs\": [],\r\n+    \"name\": \"TotalSupplyOverflow\",\r\n+    \"type\": \"error\"\r\n   }\r\n ]\r\n\\ No newline at end of file\r\ndiff --git a/packages/contracts-bedrock/snapshots/storageLayout/OptimismMintableERC20.json b/packages/contracts-bedrock/snapshots/storageLayout/OptimismMintableERC20.json\r\nindex 2ad020cb1..ee4b3e6bd 100644\r\n--- a/packages/contracts-bedrock/snapshots/storageLayout/OptimismMintableERC20.json\r\n+++ b/packages/contracts-bedrock/snapshots/storageLayout/OptimismMintableERC20.json\r\n@@ -1,51 +1,16 @@\r\n [\r\n   {\r\n     \"bytes\": \"32\",\r\n-    \"label\": \"_balances\",\r\n+    \"label\": \"NAME\",\r\n     \"offset\": 0,\r\n     \"slot\": \"0\",\r\n-    \"type\": \"mapping(address => uint256)\"\r\n-  },\r\n-  {\r\n-    \"bytes\": \"32\",\r\n-    \"label\": \"_allowances\",\r\n-    \"offset\": 0,\r\n-    \"slot\": \"1\",\r\n-    \"type\": \"mapping(address => mapping(address => uint256))\"\r\n-  },\r\n-  {\r\n-    \"bytes\": \"32\",\r\n-    \"label\": \"_totalSupply\",\r\n-    \"offset\": 0,\r\n-    \"slot\": \"2\",\r\n-    \"type\": \"uint256\"\r\n-  },\r\n-  {\r\n-    \"bytes\": \"32\",\r\n-    \"label\": \"_name\",\r\n-    \"offset\": 0,\r\n-    \"slot\": \"3\",\r\n     \"type\": \"string\"\r\n   },\r\n   {\r\n     \"bytes\": \"32\",\r\n-    \"label\": \"_symbol\",\r\n+    \"label\": \"SYMBOL\",\r\n     \"offset\": 0,\r\n-    \"slot\": \"4\",\r\n+    \"slot\": \"1\",\r\n     \"type\": \"string\"\r\n-  },\r\n-  {\r\n-    \"bytes\": \"32\",\r\n-    \"label\": \"_nonces\",\r\n-    \"offset\": 0,\r\n-    \"slot\": \"5\",\r\n-    \"type\": \"mapping(address => struct Counters.Counter)\"\r\n-  },\r\n-  {\r\n-    \"bytes\": \"32\",\r\n-    \"label\": \"_PERMIT_TYPEHASH_DEPRECATED_SLOT\",\r\n-    \"offset\": 0,\r\n-    \"slot\": \"6\",\r\n-    \"type\": \"bytes32\"\r\n   }\r\n ]\r\n\\ No newline at end of file\r\ndiff --git a/packages/contracts-bedrock/src/universal/OptimismMintableERC20.sol b/packages/contracts-bedrock/src/universal/OptimismMintableERC20.sol\r\nindex 978a06325..30e441b78 100644\r\n--- a/packages/contracts-bedrock/src/universal/OptimismMintableERC20.sol\r\n+++ b/packages/contracts-bedrock/src/universal/OptimismMintableERC20.sol\r\n@@ -1,8 +1,7 @@\r\n // SPDX-License-Identifier: MIT\r\n pragma solidity 0.8.15;\r\n \r\n-import { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n-import { ERC20Permit } from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\r\n+import { ERC20 } from \"@solady/tokens/ERC20.sol\";\r\n import { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n import { ILegacyMintableERC20, IOptimismMintableERC20 } from \"src/universal/interfaces/IOptimismMintableERC20.sol\";\r\n import { ISemver } from \"src/universal/interfaces/ISemver.sol\";\r\n@@ -13,19 +12,28 @@ import { ISemver } from \"src/universal/interfaces/ISemver.sol\";\r\n ///         use an OptimismMintablERC20 as the L2 representation of an L1 token, or vice-versa.\r\n ///         Designed to be backwards compatible with the older StandardL2ERC20 token which was only\r\n ///         meant for use on L2.\r\n-contract OptimismMintableERC20 is IOptimismMintableERC20, ILegacyMintableERC20, ERC20Permit, ISemver {\r\n+contract OptimismMintableERC20 is IOptimismMintableERC20, ILegacyMintableERC20, ERC20, ISemver {\r\n     /// @notice Address of permit2 on this network.\r\n     address public constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\r\n \r\n+    /// @custom:legacy\r\n     /// @notice Address of the corresponding version of this token on the remote chain.\r\n     address public immutable REMOTE_TOKEN;\r\n \r\n+    /// @custom:legacy\r\n     /// @notice Address of the StandardBridge on this network.\r\n     address public immutable BRIDGE;\r\n \r\n+    /// @custom:legacy\r\n     /// @notice Decimals of the token\r\n     uint8 private immutable DECIMALS;\r\n \r\n+    /// @notice Name of the token.\r\n+    string private NAME;\r\n+\r\n+    /// @notice Symbol of the token.\r\n+    string private SYMBOL;\r\n+\r\n     /// @notice Emitted whenever tokens are minted for an account.\r\n     /// @param account Address of the account tokens are being minted for.\r\n     /// @param amount  Amount of tokens minted.\r\n@@ -56,13 +64,46 @@ contract OptimismMintableERC20 is IOptimismMintableERC20, ILegacyMintableERC20,\r\n         string memory _name,\r\n         string memory _symbol,\r\n         uint8 _decimals\r\n-    )\r\n-        ERC20(_name, _symbol)\r\n-        ERC20Permit(_name)\r\n-    {\r\n+    ) {\r\n         REMOTE_TOKEN = _remoteToken;\r\n         BRIDGE = _bridge;\r\n         DECIMALS = _decimals;\r\n+        NAME = _name;\r\n+        SYMBOL = _symbol;\r\n+    }\r\n+\r\n+    /// @dev Returns the name of the token.\r\n+    function name() public view override returns (string memory) {\r\n+        return NAME;\r\n+    }\r\n+\r\n+    /// @dev Returns the symbol of the token.\r\n+    function symbol() public view override returns (string memory) {\r\n+        return SYMBOL;\r\n+    }\r\n+\r\n+    /// @dev Returns the number of decimals used to get its user representation.\r\n+    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n+    /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n+    /// NOTE: This information is only used for _display_ purposes: it in\r\n+    /// no way affects any of the arithmetic of the contract, including\r\n+    /// {IERC20-balanceOf} and {IERC20-transfer}.\r\n+    function decimals() public view override returns (uint8) {\r\n+        return DECIMALS;\r\n+    }\r\n+\r\n+    /// @notice Returns the amount which _spender is still allowed to withdraw\r\n+    /// from _owner. Permit2 is by default automatically approved for max allowance.\r\n+    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n+        if (_spender == PERMIT2) {\r\n+            return type(uint256).max;\r\n+        }\r\n+        return super.allowance(_owner, _spender);\r\n+    }\r\n+\r\n+    /// @notice Getter for the bridge.\r\n+    function bridge() public view returns (address) {\r\n+        return BRIDGE;\r\n     }\r\n \r\n     /// @notice Allows the StandardBridge on this network to mint tokens.\r\n@@ -126,27 +167,4 @@ contract OptimismMintableERC20 is IOptimismMintableERC20, ILegacyMintableERC20,\r\n     function remoteToken() public view returns (address) {\r\n         return REMOTE_TOKEN;\r\n     }\r\n-\r\n-    /// @custom:legacy\r\n-    /// @notice Legacy getter for BRIDGE.\r\n-    function bridge() public view returns (address) {\r\n-        return BRIDGE;\r\n-    }\r\n-\r\n-    /// @dev Returns the number of decimals used to get its user representation.\r\n-    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n-    /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n-    /// NOTE: This information is only used for _display_ purposes: it in\r\n-    /// no way affects any of the arithmetic of the contract, including\r\n-    /// {IERC20-balanceOf} and {IERC20-transfer}.\r\n-    function decimals() public view override returns (uint8) {\r\n-        return DECIMALS;\r\n-    }\r\n-\r\n-    function allowance(address owner, address spender) public view override returns (uint256) {\r\n-        if (spender == PERMIT2) {\r\n-            return type(uint256).max;\r\n-        }\r\n-        return super.allowance(owner, spender);\r\n-    }\r\n }\r\ndiff --git a/packages/contracts-bedrock/test/L2/L2StandardBridge.t.sol b/packages/contracts-bedrock/test/L2/L2StandardBridge.t.sol\r\nindex 6f794c175..fcba7daac 100644\r\n--- a/packages/contracts-bedrock/test/L2/L2StandardBridge.t.sol\r\n+++ b/packages/contracts-bedrock/test/L2/L2StandardBridge.t.sol\r\n@@ -413,7 +413,7 @@ contract PreBridgeERC20To is Bridge_Initializer {\r\n     // so they should share the same setup and expectEmit calls\r\n     function _preBridgeERC20To(bool _isLegacy, address _l2Token) internal {\r\n         deal(_l2Token, alice, 100, true);\r\n-        assertEq(ERC20(L2Token).balanceOf(alice), 100);\r\n+        assertEq(L2Token.balanceOf(alice), 100);\r\n         uint256 nonce = l2CrossDomainMessenger.messageNonce();\r\n         bytes memory message = abi.encodeWithSelector(\r\n             StandardBridge.finalizeBridgeERC20.selector, address(L1Token), _l2Token, alice, bob, 100, hex\"\"\r\ndiff --git a/packages/contracts-bedrock/test/setup/Bridge_Initializer.sol b/packages/contracts-bedrock/test/setup/Bridge_Initializer.sol\r\nindex 6b9317129..410213a09 100644\r\n--- a/packages/contracts-bedrock/test/setup/Bridge_Initializer.sol\r\n+++ b/packages/contracts-bedrock/test/setup/Bridge_Initializer.sol\r\n@@ -2,7 +2,7 @@\r\n pragma solidity 0.8.15;\r\n \r\n import { CommonTest } from \"test/setup/CommonTest.sol\";\r\n-import { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n+import { MockERC20 } from \"solmate/test/utils/mocks/MockERC20.sol\";\r\n import { OptimismMintableERC20 } from \"src/universal/OptimismMintableERC20.sol\";\r\n import { LegacyMintableERC20 } from \"src/legacy/LegacyMintableERC20.sol\";\r\n \r\n@@ -10,18 +10,18 @@ import { LegacyMintableERC20 } from \"src/legacy/LegacyMintableERC20.sol\";\r\n /// @dev This contract extends the CommonTest contract with token deployments\r\n ///      meant to be used with the bridge contracts.\r\n contract Bridge_Initializer is CommonTest {\r\n-    ERC20 L1Token;\r\n-    ERC20 BadL1Token;\r\n+    MockERC20 L1Token;\r\n+    OptimismMintableERC20 BadL1Token;\r\n     OptimismMintableERC20 L2Token;\r\n     LegacyMintableERC20 LegacyL2Token;\r\n-    ERC20 NativeL2Token;\r\n-    ERC20 BadL2Token;\r\n+    MockERC20 NativeL2Token;\r\n+    OptimismMintableERC20 BadL2Token;\r\n     OptimismMintableERC20 RemoteL1Token;\r\n \r\n     function setUp() public virtual override {\r\n         super.setUp();\r\n \r\n-        L1Token = new ERC20(\"Native L1 Token\", \"L1T\");\r\n+        L1Token = new MockERC20(\"Native L1 Token\", \"L1T\", 18);\r\n \r\n         LegacyL2Token = new LegacyMintableERC20({\r\n             _l2Bridge: address(l2StandardBridge),\r\n@@ -48,7 +48,7 @@ contract Bridge_Initializer is CommonTest {\r\n             )\r\n         );\r\n \r\n-        NativeL2Token = new ERC20(\"Native L2 Token\", \"L2T\");\r\n+        NativeL2Token = new MockERC20(\"Native L2 Token\", \"L2T\", 18);\r\n \r\n         RemoteL1Token = OptimismMintableERC20(\r\n             l1OptimismMintableERC20Factory.createStandardL2Token(\r\ndiff --git a/packages/contracts-bedrock/test/universal/OptimismMintableERC20.t.sol b/packages/contracts-bedrock/test/universal/OptimismMintableERC20.t.sol\r\nindex 8a5c874ef..a98be57cf 100644\r\n--- a/packages/contracts-bedrock/test/universal/OptimismMintableERC20.t.sol\r\n+++ b/packages/contracts-bedrock/test/universal/OptimismMintableERC20.t.sol\r\n@@ -46,7 +46,7 @@ contract OptimismMintableERC20_Test is Bridge_Initializer {\r\n         assertEq(L2Token.balanceOf(alice), 100);\r\n     }\r\n \r\n-    function test_allowance_permit2_max() external {\r\n+    function test_allowance_permit2_max() view external {\r\n         assertEq(L2Token.allowance(alice, L2Token.PERMIT2()), type(uint256).max);\r\n     }\r\n```", "OPEN", 0, "tynes", "2024-09-12T16:21:44Z", "2024-09-12T16:21:44Z", null, "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6WTctV", 11873, "OPSM - Move OPStackManager behind a proxy", "Move OPSM behind a proxy so we can upgrade it. This may be a breaking change to the interop team due to the initializer, so let\u2019s keep them in the loop here.", "CLOSED", 0, "blmalone", "2024-09-12T08:15:29Z", "2024-09-14T00:36:47Z", "2024-09-14T00:36:47Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6WOoMI", 11847, "Add MT-Cannon e2e tests for the op-challenger", "Extend the e2e tests running an MT-Cannon FaultDisputeGame devnet with the op-challenger integrated.", "CLOSED", 0, "Inphi", "2024-09-11T18:09:24Z", "2024-09-13T04:25:04Z", "2024-09-13T04:25:04Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6V62mN", 11821, "Supporting genesis inbox contract as a first step", "Previously I submitted a proposal for inbox contract [here](https://github.com/ethereum-optimism/specs/pull/284), it turns out the diff will be too big for FP if we want to support dynamic updates.\r\n\r\nInstead I think we can support genesis inbox contract as a first step, which only requires minimal changes:\r\n\r\n1. The [`BatchInboxAddress`](https://github.com/ethereum-optimism/optimism/blob/db107794c0b755bc38a8c62f11c49320c95c73db/op-chain-ops/genesis/config.go#L77) can now be set to either an Externally Owned Account (EOA) or a smart contract. When a contract is used, it assumes responsibility for verifying and enforcing batch submission conditions.\r\n2. Modification of the `op-node` derivation process: The `op-node` will be updated to exclude failed batch transactions during the derivation process. This change ensures that only successfully executed batch transactions are processed and included in the derived state. \r\n3. Modification of the op-batcher submission process: The op-batcher will be updated to [call `recordFailedTx`](https://github.com/blockchaindevsh/optimism/blob/02e3b7248f1b590a2adf1f81488829760fa2ba03/op-batcher/batcher/driver.go#L537) for failed batch transactions. This modification ensures that the data contained in failed transactions will be resubmitted automatically.\r\n   1. Most failures will be detected during the [`EstimateGas`](https://github.com/ethereum-optimism/optimism/blob/8f516faf42da416c02355f9981add3137a3db190/op-service/txmgr/txmgr.go#L266) call. However, under certain race conditions, failures may occur after the transaction has been included in a block.\r\n\r\n(extracted from the original [proposal](https://github.com/ethereum-optimism/specs/pull/284))\r\n\r\nWe've deployed the genesis inbox contract feature and tested sufficiently in our devnet/testnet .\r\n\r\nThis approach seems to align with the current practices of other rollups. We could defer implementation of dynamic inbox contracts to future updates.", "OPEN", 0, "blockchaindevsh", "2024-09-10T01:55:15Z", "2024-09-10T02:19:17Z", null, "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6VpyzG", 11783, "OPSM: Refactor to better support features with different inputs", "Support the `initialize` call of the `SystemConfigInterop` that is deployed in `DeployImplementationsInterop`, by introducing an `OPStackManagerInterop` and figuring out how to approach an input-struct that is compatible between interop and the inherited stack-manager (e.g. through composition, or dropping the struct pattern).\r\n", "CLOSED", 0, "protolambda", "2024-09-06T16:05:36Z", "2024-09-12T22:28:16Z", "2024-09-12T22:28:16Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6VkEQN", 11778, "L2 Contracts Release", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe need to do a release of the L2 contracts and communicate that all new chains should be using this commit to generate the L2 genesis.\r\n\r\nI recommend we use the following commit: https://github.com/ethereum-optimism/optimism/tree/3dbcee1c312881166bd544fa857f25d86a20bcd2\r\n\r\nThis is a fairly recent commit\r\n- It will have the alt da config naming. If we need plasma config naming, then we should consider an older commit\r\n- It has createx as a preinstall\r\n- It has the mintable token permit2 integration\r\n\r\n", "OPEN", 0, "tynes", "2024-09-06T01:53:01Z", "2024-09-13T03:15:17Z", null, "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6VjC54", 11775, "Make the outputPath handling in WriteJSON/WriteSerializedBinary less surprising", "In [WriteJSON](https://github.com/ethereum-optimism/optimism/blob/98e1cf267aa149de21ee82aa36950d4adcd5f9ce/op-service/jsonutil/json.go#L35) the `outputPath` is treated as more than just a file path - empty string means don't output anything and `-` means to output to stdout.  This is useful but surprising given the `WriteJSON` method name. This behaviour is mirrored in cannon's `WriteSerializedBinary`.  Need to investigate how to make it less surprising and deduplicate the code.", "CLOSED", 0, "ajsutton", "2024-09-05T23:10:17Z", "2024-09-09T23:38:28Z", "2024-09-09T23:38:28Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6VX0Pn", 11738, "EVM Engineering: reduce number of flakes merged into CI", "We've seen a number of disruptive flakes being merged into CI lately. Flakes are most disruptive when they happen with a high probability. If we say that a flake probability of 5% is considered \"disruptive\" then we want to make sure that tests that will typically flake at a probability of 5% (with 512 fuzz runs) then we can reduce the number of disruptive flakes significantly by increasing the number of CI runs on merge ONLY when a new fuzz test is added.\r\n\r\nAssuming that the probability of catching a flake is the same on every fuzz test run, some basic probability math shows that setting the fuzz runs to `512 * 90 = 46080` when a new fuzz test is added will catch an error with 99% probability.\r\n\r\nMaking this change will increase CI time only when adding new fuzz tests.", "CLOSED", 0, "smartcontracts", "2024-09-04T18:43:52Z", "2024-09-11T21:26:47Z", "2024-09-11T21:26:47Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6UxdMb", 11681, "EVM Engineering: add interfaces for L1 contracts", "Tracking issue for adding interfaces for L1 contracts.", "CLOSED", 0, "smartcontracts", "2024-08-30T02:19:52Z", "2024-09-12T01:01:32Z", "2024-09-12T01:01:32Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6UtCf4", 11669, "L2StandardBridgeInterop tiny TODO Removal", "on: `packages/contracts-bedrock/test/L2/L2StandardBridgeInterop.t.sol`\n```solidity\n// TODO: Remove it once the `OptimismSuperchainERC20Factory` is added to predeploys.\n// Ensure OPTIMISM_SUPERCHAIN_ERC20_FACTORY's code is not empty.\nvm.etch(Predeploys.predeployToCodeNamespace(Predeploys.OPTIMISM_SUPERCHAIN_ERC20_FACTORY), address(this).code);\n```", "CLOSED", 0, "skeletor-spaceman", "2024-08-29T15:18:53Z", "2024-09-12T14:26:54Z", "2024-09-12T14:26:54Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6UmjHX", 11658, "Debug alloc test", "Ensure the alloc test does not exceed a maximum amount of memory for allocations.", "CLOSED", 0, "Inphi", "2024-08-20T15:15:21Z", "2024-09-12T02:38:36Z", "2024-09-12T02:38:36Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6TFD14", 11493, "op-chain-ops: generate L1 and L2 genesis by running forge script in Go", "Generate a L1 and a L2 dev genesis, by instantiating a script `Host`, loading the `Deploy.s.sol` and `L2Genesis.s.sol`, and running the deploy functions that are applicable.\r\n\r\nThis depends on some `Deploy.s.sol` improvements, to make the right deploy functions configurable and accessible. This is being improved as part of OPSM 0.5.\r\n\r\nThis can also improve with `L2genesis.s.sol` changes, to make the right deploy functions configurable and accessible. This might be part of OPSM 0.5 (focused more on L1 deployment however).\r\n\r\nIn the meantime we can try and hack around it with partial `DeployConfig.s.sol` overrides and temporary script hacks/changes to the genesis script.\r\n", "CLOSED", 0, "protolambda", "2024-08-15T07:39:56Z", "2024-09-13T20:17:19Z", "2024-09-13T20:17:18Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6TDX4e", 11487, "op-dispute-mon: Incorrectly reporting unclaimed funds", "In the game https://sepolia.etherscan.io/address/0x5e0264dB3CA589C028c89644bAaF6692Ec2598C8 dispute-mon was warning about unclaimed bonds as early as 2024-08-09T06:22:03.703315019Z and they were actually claimed on Aug-10-2024 07:31:48 AM UTC.\r\n\r\nThe claims were resolved as soon as possible and bonds claimed as soon as possible, just the warning from dispute-mon is incorrect.\r\n\r\nThis occurs when a proposal is countered with the incorrect warning lasting for the amount of time used on the challengers clock.  Currently it assumes that claims can be resolved after `MaxClockDuration` and then bonds claimed after the DelayedWETH delay completes.  However that identifies the minimum possible time for any bonds to be reclaimed.  If the proposal is challenged the full `MaxClockDuration` has to elapse for the defenders claims, but the defender's clock is paused while the challenger's clock runs so the claim resolution is delayed by the time taken by the challenger.\r\n\r\nWe will need to keep tracking the minimum possible time for bonds to be claimed to alert on early withdrawal of bonds but need a better system for identifying unclaimed bonds - simplest version would be `2 * MaxClockDuration + WethDelay` which would work for everything except games that use clock extension.  Alternatively since this check is primarily about identifying faults with op-challenger not claiming honest bonds back, it would be reasonable to use the actual `WithdrawalRequest` information and trust it to be accurate.  The early withdrawal alert avoids depending on this data as its design to detect bugs where the withdrawal delay is calculated incorrectly.", "CLOSED", 0, "ajsutton", "2024-08-15T01:43:05Z", "2024-09-09T20:22:18Z", "2024-09-09T20:22:18Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6QMMWa", 11185, "When use `GenericCommitment` in alt-da, some logic is useless or incorrect in op-node", "**Bug Description**\r\nFrom previous version, op add the feature for da named op-plasma and then renames it to alt-da in 1.8.0-rc.2 version.\r\n\r\nBut in my view, the design target for alt-da is different with op-plasma now. In op-plasma stage, there is a commitment type named `KeccakCommitment` and add DaChallenge contracts in layer1, but when comes to alt-da, op side sugguests us to use `GenericCommitment`.\r\n\r\nBut the behaivor for `KeccakCommitment` and `GenericCommitment` is different, so that maybe some old logic has not been removed of refactored.\r\n\r\nWe discuss the following part based on version v1.8.0-rc.2 version\r\n\r\n**Steps to Reproduce**\r\nWe do not need to reproduce the problem, I provide the code which we doubt it may need to change:\r\n\r\nBefore we disscuss the following part, we need to ensure the following part:\r\n1. `KeccakCommitment` has the concept related challengewindow, but `GenericCommitment` do not need the \"Challenge\" anymore\r\n2. Challenge window logic will affect the finality, if `GenericCommitment` does not need \"Challenge\", then the finality should not affect by the logic of `KeccakCommitment`.\r\n3. We hope for a running rollup with `KeccakCommitment`, it can switch to `GenericCommitment` in a smooth way\r\n\r\nThen I think the following 3 parts may have some problem:\r\n1. challengewindow can not be zero when we choose `GenericCommitment`:\r\n    1. I mentioned this before, then I saw there is a pr related to this: #11171 \r\n    2. but in the above pr, it just modify the checking stage for deploy-config, when load the rollup.json file, the checking is still existing, it still requires the challengewindow can not be zero:\r\n        https://github.com/ethereum-optimism/optimism/blob/ddc37daa49558c2fb5c1a92e694eeb7de5942e00/op-node/rollup/types.go#L503-L508\r\n2. In op-node logic, it still uses all code related to `KeccakCommitment` even for now we already use `GenericCommitment`, even the \"challenge\" concept is not existed for `GenericCommitment`:\r\n    https://github.com/ethereum-optimism/optimism/blob/ddc37daa49558c2fb5c1a92e694eeb7de5942e00/op-plasma/damgr.go#L193-L260\r\n    When we choose `GenericCommitment`, in deploy script it would not deploy the DaChallenge Contract, but the following logic is strange:\r\n    1. in L198, the contract should empty or some unexisted address, but it does not need to fetch the challenge status, those logic comes from `KeccakCommitment`, and also for the following check like L200, and L207 op also does not need to add the commitment into track for we do not need to wait challenge time.\r\n    2. for L198, this logic can work when use `KeccakCommitment`, is more like a trick. it can work just because it return `ChallengeUninitialized`, so the following logic give green light and not return error. But those logic is related to `KeccakCommitment`, for `GenericCommitment` is semantic ambiguity\r\n    As a conclusion, if `GenericCommitment` does not have the concept related to \"ChallengeDA\", this part need to refactor.\r\n3. When try to migrate from `KeccakCommitment` to `GenericCommitment`:\r\n    For L195, we see it check the commitment type with the value from `rollup.json`. For exsiting seqeuencer and fullnode, but be we can see the fianlity is stuck, then we can modify the rollup.json, change type from `KeccakCommitment` to `GenericCommitment` and set challengewindow/resolvewindow to 0 and restart.\r\n    But when new syncing node from genesis, especially when syncing mode is `consensus-layer` in op-node, it must require the guy to set `keccakCommitment` in rollup.json first, and when he see the finality is stuck can contain those error log, then recover to `GenericCommitment` and restart. \r\n    So it's necessary for this check at here, can we consider to remove it so that for migration is more smooth?\r\n\r\n**Expected behavior**\r\n1. we hope the challengewindow can be 0 when choose `GenericCommitment`\r\n2. when use `GenericCommitment`, do not be involved into the challenge da logic.\r\n3. for migration from  `KeccakCommitment` to `GenericCommitment`, we do not hope the new syncing node need to modify rollup.json and restart, just use the newest rollup.json is ok.\r\n\r\n**Environment Information:**\r\n - Operating System: Ubuntu 20.04\r\n - Package Version (or commit hash): op-node v1.8.0-rc.2\r\n\r\n", "OPEN", 0, "atenjin", "2024-07-19T14:43:08Z", "2024-09-11T14:10:37Z", null, "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6UmjJL", 11665, "op-challenger: Integrate MT Cannon", "Follow up on ethereum-optimism/optimism#11641 and ethereum-optimism/optimism#11642 to add MT Cannon support to the op-challenger.", "CLOSED", 0, "Inphi", "2024-06-26T03:20:50Z", "2024-09-10T00:11:06Z", "2024-09-10T00:11:06Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6NWK-F", 10997, "op-challenger memory leak", "The memory usage of `op-challenger` is gradually increasing the longer it runs.  While the rate of increase is slow and going to cause any actual issues, particularly for networks that have been running fault proofs for a fair while like op-sepolia, its expected the system should be in a fairly steady state.\r\n\r\nWe should investigate the increase in memory and either understand why it's happening (and that it will flatten out given more time) or fix whatever memory leak is causing it.", "CLOSED", 0, "ajsutton", "2024-06-25T01:13:03Z", "2024-09-10T01:34:01Z", "2024-09-10T01:34:01Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6MirWc", 10867, "Interop: Ban Deposits that Trigger Executing Messages for Devnet", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n## Problem Statement\nIt is possible to include a deposit that has an invalid executing message. Deposits are force include and invalid executing messages are reorg'd out, so this means an attacker would be able to force reorgs on the chain. There are a [few solutions](https://github.com/ethereum-optimism/optimism/issues/10867#issuecomment-2183111697) to this problem, but we need to research them and there are higher priority things in the short term.\n\n## Design\nWe want to ban deposit transactions completely from triggering executing messages to prevent this attack in the short term. We can reenable them in the future (after mainnet release via another hardfork). The design that we have come to consensus on is as follows:\n- add an `isDeposit()(bool)` function to `L1Block`\n- add a new function `L1Block.setL1BlockValuesInterop` that sets `isDeposit = true` then calls `setL1BlockValuesEcotone`\n- add a new function `depositsComplete()` which sets `isDeposit = false`\n- add a new deposit tx to derivation pipeline that calls `depositsComplete()`\n- the `CrossL2Inbox` does `require(L1Block.isDeposit() == false)` \n\n~~It was determined in https://github.com/ethereum-optimism/optimism/issues/10870 that there was a missing edge case with deposit handling in the context of interop without the \"only EOA\" invariant. The semantics are being defined in https://github.com/ethereum-optimism/design-docs/pull/13 but it was decided that we should not implement this as part of the devnet release and instead just ban deposits that trigger executing messages completely.~~\n\n~~The only way to do this reliably is by hacking into the state transition function. Since we don't have an explicit goal of being multiclient and we want to run the devnet to see how stable our software is, we can modify the STF temporarily to ban deposits and then remove this hack when we have a proper solution implemented.~~\n\n~~An easy way to hack this solution is to hook into someplace around [applyTransaction](https://github.com/ethereum-optimism/op-geth/blob/5838916e90da70c6c28f6a80d5042156ca6e2a74/core/state_processor.go#L108) and revert deposit transactions that trigger an executing message event.~~\n\n~~While this code is temporary and not going to live forever, it will help us in the short term be able to reliably test the end to end flow of the system on a devnet.~~\n\n", "CLOSED", 0, "tynes", "2024-05-20T18:50:05Z", "2024-09-11T03:22:26Z", "2024-09-11T03:22:26Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDODjvEJM6MirZw", 10872, "SuperchainERC20: Factory Implementation", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket can be considered done when there is an implementation of the `SuperchainERC20Factory` that has sufficient test coverage.", "CLOSED", 0, "tynes", "2024-04-29T21:22:49Z", "2024-09-12T14:26:54Z", "2024-09-12T14:26:53Z", "ethereum-optimism/optimism", "2025-08-30 20:53:59"]
["I_kwDOMMiGhs6XG4ER", 158, "Suggestion: ask for foundry version in bug reports", "Seems like some bugs might be the result of specific foundry versions, I recommend asking for it in the template for bug reports.", "CLOSED", 0, "smartcontracts", "2024-09-19T02:55:43Z", "2024-09-19T18:29:53Z", "2024-09-19T18:29:53Z", "ethereum-optimism/supersim", "2025-08-30 20:53:59"]
["I_kwDOMMiGhs6XGo7L", 155, "Bug: error running first step in README tutorial", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nI ran the very first `cast` command in the README. I got the following error:\r\n\r\n```\r\nERROR[09-18|19:46:56.396] failed to submit deposit tx to chain: %w chain.id=901 err=\"Insufficient funds for gas * price + value\"\r\n```\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Use the latest binary from `0.1.0-alpha.2`\r\n2. Start Supersim\r\n3. Run first `cast` command\r\n4. See error\r\n\r\n**Expected behavior**\r\nIt doesn't error\r\n\r\n**Environment Information:**\r\n - Operating System: MacOS 14.6.1", "CLOSED", 0, "smartcontracts", "2024-09-19T01:50:44Z", "2024-09-19T02:53:28Z", "2024-09-19T02:53:28Z", "ethereum-optimism/supersim", "2025-08-30 20:53:59"]
["I_kwDOMMiGhs6XD-MU", 152, "Incorrect SuperchainERC20 address in README (at least when building locally)", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nThe README says the predeployed SuperERC20 address is `0x61a6eF395d217eD7C79e1B84880167a417796172` but when I investigated it seemed to be getting deployed to `0xA301B4dbc64c5BDA1f128186B1D084246E964F13`\r\n\r\n**Steps to Reproduce**\r\n\r\n**Building and running supersim**\r\n\r\n1. `git clone ...supersim...`\r\n2. `just generate-genesis`\r\n3. `just build-go`\r\n4. `just build-contracts`\r\n5. `go build cmd/main.go`\r\n6. `./main --interop.autorelay`\r\n```\r\n$ ./main --interop.autorelay \r\nINFO [09-18|11:15:27.229] starting supersim\r\nINFO [09-18|11:15:27.401] configuring interop contracts\r\nINFO [09-18|11:15:27.401] starting L2ToL2CrossDomainMessenger autorelayer\r\nINFO [09-18|11:15:27.408] supersim is ready\r\nINFO [09-18|11:15:27.413] \r\n...\r\n```\r\n\r\n**Testing [Example B](https://github.com/ethereum-optimism/supersim?tab=readme-ov-file#example-b-l2-to-l2-send-an-interoperable-superchainerc20-token-from-chain-901-to-902)**\r\n\r\nI try to follow the tutorial and run\r\n```\r\ncast send 0x61a6eF395d217eD7C79e1B84880167a417796172 \"mint(address _to, uint256 _amount)\"  0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 1000  --rpc-url http://127.0.0.1:9545 --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\r\n```\r\nHowever, there is no code at this contract address. Tested this with:\r\n```\r\ncast code 0x61a6eF395d217eD7C79e1B84880167a417796172 --rpc-url http://127.0.0.1:9546\r\n0x\r\n```\r\n\r\nBut when I use `cast send 0xA301B4dbc64c5BDA1f128186B1D084246E964F13 ...` the tutorial works as expected.\r\n\r\n**Expected behavior**\r\nExpected the tutorial to work!\r\n\r\n\r\n**Environment Information:**\r\n - Operating System: OSX\r\n - Package Version daa397a6b2058b2001ad49b7502a4ebcbe08a260\r\n\r\n**Additional context**\r\nI would love to have a section in the readme on building & running Supersim locally. It used to have that info but it got removed recently it seems.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "karlfloersch", "2024-09-18T18:28:51Z", "2024-09-18T22:26:43Z", "2024-09-18T22:26:43Z", "ethereum-optimism/supersim", "2025-08-30 20:53:59"]
["I_kwDOMMiGhs6V4hji", 132, "Delete logs by default", "Users probably don't expect their logs to be persisted when they shut down Supersim, so the default should be deletion with an option to persist if they wish. \r\n\r\n**Definition of Done**\r\n\r\n- [ ] Logs are deleted by default upon exiting Supersim\r\n- [ ] A config flag is available to persist logs if desired (possible use case: a dev is building something with someone else and wants to share their logs)\r\n", "CLOSED", 0, "fainashalts", "2024-09-09T18:19:27Z", "2024-09-19T19:45:35Z", "2024-09-19T19:45:35Z", "ethereum-optimism/supersim", "2025-08-30 20:53:59"]
["I_kwDOKSJyfM6VOYtP", 447, "Add ops genie alerting for faucet", "Created 4 grafana alerts for the faucet:\n- L1 Sepolia: Faucet Admin Wallet Balance\n  - Triggered when admin wallet drops below 0.1 eth\n- L1 Sepolia: Faucet Contract Balance\n  - Triggered when faucet balance drops below 10 eth\n- L1 Sepolia: Faucet Drippie Contract Balance\n  - Triggered when drippie contract drops below 1000 eth\n- Spike in faucet claim tx failures\n  - Triggered when > 20 faucet drip txs have failed in the last hour\n\nFor now these alerts will ping in the #pod-devx slack channel. Next step is getting the alerts integrated into ops genie so that the alerts get sent to the on call engineer. \n\nIf you're curious, the alerts can be found here: https://optimistic.grafana.net/alerting/list?search=dashboard:ebc95cfa-3368-410f-9d72-ca240f4e2831", "CLOSED", 0, "tremarkley", "2024-09-03T19:06:53Z", "2024-09-25T23:35:01Z", "2024-09-25T23:35:00Z", "ethereum-optimism/ecosystem", "2025-08-30 21:55:46"]
["I_kwDOH2Qg5s6Xx9Rz", 387, "How to Merge Upstream go-ethereum", "# Updating op-geth with Upstream geth Changes\n\nPulling upstream geth changes into op-geth is a multistep process - first updating op-geth and then pulling that into the monorepo.  The complication is that most of the tests are in the monorepo and we want to see them passing before actually merging the update into op-geth optimism branch.\n\n## Prep op-geth PR\n\nCreate a new branch from the latest `optimism` branch in `op-geth` same as usual for a PR.\n\nMerge in the changes from the new upstream release, e.g:\n\n```bash\ngit remote add upstream \"https://github.com/ethereum/go-ethereum.git\"\ngit fetch upstream\ngit merge \"v1.11.5\" # Adjust for whatever the latest geth release tag is\n```\n\nResolve any merge conflicts and create a draft PR.\n\n### Update fork.yaml\n\nIn the op-geth repo, update the `base` \u2192 `hash` value in `fork.yaml` so that [https://op-geth.optimism.io/](https://op-geth.optimism.io/) only shows differences from the new upstream commit. The new hash is the commit hash of the upstream tag that was just merged in.\n\nInclude this change as part of the PR to merge changes into op-geth.\n\n## Prep Monorepo PR\n\nCreate a new branch in the `optimism` monorepo off the `develop` branch same as usual for a PR.\n\nUpdate the version of `op-geth` used. While you can do this by changing the `replace` line in `./go.mod` to point to your local checkout of `op-geth` we want to take advantage of CI to run some tests so we\u2019ll temporarily update it to point to the branch we created the PR from in `op-geth`.\n\n### With go mod edit\n\n```bash\ngo mod edit \\\n  -replace github.com/ethereum/go-ethereum@v1.11.4=github.com/ethereum-optimism/op-geth@<COMMIT>\ngo mod tidy\n```\n\nReplace  `<COMMIT>` with the commit hash of the latest commit from your `op-geth` branch. Run this again in the `indexer` directory to also update op-geth in the indexer module. You can use the branch name instead of the commit hash but only if the branch name doesn\u2019t contain any special characters (like `/`).\n\nCommit this and create a draft PR. Then review the CI results and fix any issues.\n\n### Manually Modifying go.mod\n\nI find it easier to just manually modify go.mod.  Find the existing entry for [`github.com/ethereum/go-ethereum`](http://github.com/ethereum/go-ethereum) and update the current version with the new version of upstream geth. So upgrading from go-ethereum 1.13.4 to 1.13.5:\n\n```jsx\n- github.com/ethereum/go-ethereum v1.13.4\n+ github.com/ethereum/go-ethereum v1.13.5\n```\n\nThen update the `replace` directive for geth at the bottom of the file:\n\n```jsx\n- replace github.com/ethereum/go-ethereum v1.13.4 => github.com/ethereum-optimism/op-geth v1.101304.2-0.20231114215743-0289fd0504a0\n+ replace github.com/ethereum/go-ethereum v1.13.5 => github.com/ethereum-optimism/op-geth <COMMIT>\n```\n\nReplace  `<COMMIT>` with the commit hash of the latest commit from your `op-geth` branch. Run this again in the `indexer` directory to also update op-geth in the indexer module. You can use the branch name instead of the commit hash but only if the branch name doesn\u2019t contain any special characters (like `/`).\n\nThen run `go mod tidy`\n\nCommit this and create a draft PR. Then review the CI results and fix any issues.\n\n## Identify relevant changes to command line flags\n\nIf there are any changes to how op-geth must be invoked in our infrastructure, document these in the PR and make devinfra aware of the necessary changes. Be sure that the flag changes are tested in running infrastructure.\n\n## Merge op-geth PR\n\nGet the `op-geth` PR reviewed and merge into the `optimism` branch.\n\n## Update Monorepo PR\n\nNow that the changes are actually merged into op-geth properly, update the `go.mod` in the monorepo again to point to the latest commit on the `optimism` branch of op-geth. The best way to do this is to first create a tag in `op-geth`  and then update the monorepo to use that tag:\n\n```bash\ngit tag v1.101308.0-rc.1\ngit push origin v1.101308.0-rc.1\n# head over to Circle CI to approve the docker build\n```\n\nand\n\n```go\ngo mod edit -replace github.com/ethereum/go-ethereum@v1.13.8=github.com/ethereum-optimism/op-geth@v1.101308.0-rc.1\n```\n\nThen run `go mod tidy`.\n\nPush that change up (consider amending the previous commit pointing to the branch as we don\u2019t need that in the final history).\n\n## Merge Monorepo PR\n\nFinally, get the monorepo reviewed and merge it in.  Geth is now updated. \ud83c\udf89", "OPEN", 0, "tynes", "2024-09-24T21:50:04Z", "2024-09-24T21:50:04Z", null, "ethereum-optimism/op-geth", "2025-08-30 21:55:46"]
["I_kwDOKIwiaM6Xxr_r", 923, "[DOCS] Remove \"Paymaster\" from #cross-chain-message diagram", "Per @jakim929 , the term \"Paymaster\" on https://docs.optimism.io/stack/protocol/interop/cross-chain-message could lead to confusion for someone reading the Interop overview.\r\n\r\nAsk: Please update the visual to only use \"Relayer\" \r\n\r\n![image](https://github.com/user-attachments/assets/c0fc86dd-96c0-47b0-8689-af2cc7ab5afa)\r\n", "CLOSED", 0, "zainbacchus", "2024-09-24T20:58:50Z", "2024-09-25T20:18:01Z", "2024-09-25T20:18:01Z", "ethereum-optimism/docs", "2025-08-30 21:55:47"]
["I_kwDOKIwiaM6WuUJW", 904, "[TUTORIAL] Alternate snippets for the Bridging ETH to OP Mainnet With the Optimism SDK Tutorial using Viem", "### Tutorial title\r\n\r\nBridging ETH to OP stack With the Viem SDK\r\n\r\n### Tutorial description\r\n\r\nThis tutorial explains how you can use the Viem to bridge ETH from L1 (Ethereum or Sepolia) to L2 (OP Mainnet or OP Sepolia). The Optimism SDK is an easy way to add bridging functionality to your JavaScript-based application. It also provides some safety rails to prevent common mistakes that could cause ETH or ERC-20 tokens to be made inaccessible.\r\n\r\n### This is just the code snippet\r\n\r\n\r\n### Tutorial tags\r\n\r\nbridging\r\n\r\n### Skill level\r\n\r\nBeginner\r\n\r\n### Hosted on Optimism.io or hosted elsewhere?\r\n\r\nHosted on optimism.io\r\n\r\n### For tutorials to be hosted on Optimism.io: Tutorial Content\r\n\r\n1) ` mkdir op-sample-project`\r\n\r\n2) `cd op-sample-project`\r\n\r\n3) `pnpm init`\r\n\r\n4) `pnpm i viem`\r\n\r\n5) `node`\r\n\r\n``` js\r\n// STEP 1\r\nconst { createPublicClient, http, createWalletClient, parseEther } =\r\n  await import('viem');\r\nconst {sepolia, optimismSepolia } = await import(\"viem/chains\"); /* baseSepolia, liskSepolia, zoraSepolia, modeTestnet etc..... */\r\n\r\nconst { privateKeyToAccount } = await import('viem/accounts');\r\nconst { getL2TransactionHashes, publicActionsL2, walletActionsL1 } =\r\n  await import('viem/op-stack');\r\n\r\n```\r\n``` js\r\n// STEP 2\r\nconst account = privateKeyToAccount(\r\n  '0x....'\r\n);\r\n```\r\n\r\n``` js\r\n\r\n// STEP 3\r\nconst publicClientL1 = createPublicClient({\r\n  chain: sepolia, /* or mainnet */\r\n  transport: http(),\r\n});\r\n```\r\n``` js\r\n// STEP 4\r\nconst walletClientL1 = createWalletClient({\r\n  account,\r\n  chain: sepolia, /* or mainnet */\r\n  transport: http(),\r\n}).extend(walletActionsL1());\r\n```\r\n``` js\r\n\r\n// STEP 5\r\nconst publicClientL2 = createPublicClient({\r\n  chain: optimismSepolia, /* or baseSepolia, liskSepolia, zoraSepolia, modeTestnet etc..... */\r\n  transport: http(\r\n    'https://opt-sepolia.g.alchemy.com/v2/keyyyyy'\r\n  ),\r\n}).extend(publicActionsL2());\r\n```\r\n\r\n``` js\r\n\r\n// Build parameters for the transaction on the L2.\r\nconst args = await publicClientL2.buildDepositTransaction({\r\n  mint: parseEther('0.5'),\r\n  to: account.address,\r\n});\r\n```\r\n\r\n```js\r\n// Execute the deposit transaction on the L1.\r\nconst hash = await walletClientL1.depositTransaction(args);\r\n```\r\n\r\n```js\r\n// Wait for the L1 transaction to be processed.\r\nconst receipt = await publicClientL1.waitForTransactionReceipt({ hash });\r\n```\r\n\r\n```js\r\n// Get the L2 transaction hash from the L1 transaction receipt.\r\nconst [l2Hash] = getL2TransactionHashes(receipt);\r\n\r\n```\r\n```js\r\n// Wait for the L2 transaction to be processed.\r\nconst l2Receipt = await publicClientL2.waitForTransactionReceipt({\r\n  hash: l2Hash,\r\n});\r\n```\r\n\r\n\r\n\r\n\r\n### For tutorials hosted elsewhere: URL to tutorial\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nThis is just a snippet, the wordings will need to be modified  to suit the doc spec", "CLOSED", 0, "brokewhale", "2024-09-16T14:59:43Z", "2024-09-24T14:24:41Z", "2024-09-24T14:24:41Z", "ethereum-optimism/docs", "2025-08-30 21:55:47"]
["I_kwDOKIwiaM6Tvajk", 840, "Forced Withdrawal for OP stack rollup", "Is forced withdrawal possible for OP stack rollups?\n\n[Slack Message](https://oplabs-pbc.slack.com/archives/C02KCKY69ST/p1724084774174379?thread_ts=1724061766.742199&cid=C02KCKY69ST)", "CLOSED", 0, "krofax", "2024-08-21T18:06:46Z", "2024-09-26T21:54:53Z", "2024-09-26T21:54:53Z", "ethereum-optimism/docs", "2025-08-30 21:55:47"]
["I_kwDOKIwiaM6E_ZiG", 627, "[TUTORIAL] Improve L2 Testnet Tutorial", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nThe, \"Creating Your Own L2 Rollup Testnet\" tutorial is currently pinned at an older branch so the tutorial doesn't break with the latest changes to `develop`. We should update it to be more recent.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nTwo approaches:\r\n\r\n1. Update the `tutorials/chain` in the monorepo, verify the tutorial works as expected\r\n2. Update the tutorial to be more evergreen. Explain that you need to deploy the contracts from `op-contracts-vX.X.X`, and run the client software from a different branch. Also check that the genesis and rollup config generation is solid.\r\n\r\n## Links to Related Pages\r\n\r\nhttps://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup\r\n\r\n## Additional Context\r\n\r\nFeedback in this comment and thread from a chain operator: https://github.com/ethereum-optimism/superchain-registry/pull/125#issuecomment-2041415502\r\nMore feedback: https://github.com/ethereum-optimism/developers/discussions/329#discussioncomment-9016221\r\n", "CLOSED", 0, "sbvegan", "2024-04-08T13:20:29Z", "2024-09-23T21:43:06Z", "2024-09-23T21:43:05Z", "ethereum-optimism/docs", "2025-08-30 21:55:47"]
["I_kwDOKIwiaM6BwlaU", 549, "[TUTORIAL] Docs tutorials out of sync on/after v1.7.0", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\nPlease update docs to reflect latest changes in new builds.\r\nsince version 1.7.0 hardhat artifacts are no longer used in a few places in the build / run process:\r\nhttps://github.com/ethereum-optimism/optimism/commit/082d075dcef809ebb940129ff17de8b0f5ec3451\r\nmain.go call will need to be changed... currently in the tutorial:\r\n<img width=\"849\" alt=\"image\" src=\"https://github.com/ethereum-optimism/docs/assets/982747/f933b325-9792-4831-bffe-24e750a77373\">\r\n\r\nbut should look more like:\r\ngo run cmd/main.go genesis l2 \\\r\n    --deploy-config ../packages/contracts-bedrock/deploy-config/getting-started.json \\\r\n    --l1-deployments ../packages/contracts-bedrock/deployments/getting-started/.deploy \\\r\n    --outfile.l2 genesis.json \\\r\n    --outfile.rollup rollup.json \\\r\n    --l1-rpc $L1_RPC_URL\r\n    \r\nalso any references to json files in getting-started should likely require the contents of .deploy.\r\nso for running proposer:\r\n<img width=\"869\" alt=\"image\" src=\"https://github.com/ethereum-optimism/docs/assets/982747/4ecd0692-5b21-43ea-81a9-336f0e7954b7\">\r\n\r\nshould look more like:\r\nfor -l2oo-address...  in ()\r\ncat ../packages/contracts-bedrock/deployments/getting-started/.deploy | jq -r '.L2OutputOracleProxy'\r\n\r\nand also:\r\n<img width=\"788\" alt=\"image\" src=\"https://github.com/ethereum-optimism/docs/assets/982747/ee477659-c118-4f33-ab31-d4775ad1c19e\">\r\n\r\nagain... we'll find the address in the .deploy file mentioned above.\r\n\r\n    \r\n", "CLOSED", 0, "astro44", "2024-03-09T01:41:29Z", "2024-09-23T21:43:59Z", "2024-09-23T21:43:59Z", "ethereum-optimism/docs", "2025-08-30 21:55:47"]
["I_kwDOI7W0xc5z_AmV", 249, "[Idea Discussion] Open-Source OP Chain & OP Stack Forks Metadata Source", "Opening up discussion for requirements / ideas for creating an open-source registry for any and all OP Chains & OP Stack Forks.\r\n\r\n**Problem:**\r\nCrypto data teams have a super hard time keeping track of deployed OP Chains & OP Stack Forks. Some chain deployers attempt to get in touch with OP Labs / OP Foundation, but otherwise this requires sleuthing through Twitter, blog posts, news aggregators, etc. Many people maintain their own lists with varying degrees of comprehensiveness (nobody knows how many production mainnet chains actually exist)\r\n\r\nTo solve for this, want to create a shared open-source resource for analysts, developers, educators, etc to identify OP Chains & OP Stack Forks with the relevant information about them.\r\n\r\nSee [Key Definitions for Chain Segments](https://community.optimism.io/docs/contribute/important-terms/#the-superchain)\r\n\r\n**Goals:**\r\n- Be the best \"source of truth\" for identifying metadata for OP Chains & OP Stack Forks\r\n- Store relevant information for analysts (i.e. Name, RPC, Block Explorer, L1 Contracts, Chain Configuration)\r\n- Make it SUPER easy to contribute to (i.e. easy to add new chains, easy to modify data, easy to add bespoke attributes)\r\n- Make it SUPER easy to read from (i.e. if we input in yml, outputs are available in csv, json, sql, etc)\r\n- Provide the necessary metadata for analysts to create chain segments (i.e. RAAS provider, DA Layer, other Config Changes, potential superchain compatibility)\r\n- Be scalable, we don't want to have to re-do this if/when there are thousands of chains\r\n\r\n**Existing Version(s):**\r\n- op-analytics Repo [`chain_metadata`](https://github.com/ethereum-optimism/op-analytics/blob/main/op_chains_tracking/inputs/chain_metadata.csv)\r\n- Dune Upload from OP Labs CRM [`dataset_op_stack_chain_metadata`](https://dune.com/queries/3109219)\r\n- [superchain-registry](https://github.com/ethereum-optimism/superchain-registry) repo\r\n- [superchain.eco](https://www.superchain.eco/ecosystem/chains)\r\n\r\n**Other Inspiration / Attempts:**\r\n- [L2Beat](https://l2beat.com/scaling/summary)\r\n- [growthepie](https://www.growthepie.xyz/)\r\n- [Kofi's Rollup Economics](https://dune.com/niftytable/rollup-economics)\r\n- [OP Stack Data Dashboard](https://dune.com/oplabspbc/op-stack-chains-l1-activity)\r\n- [ethereum-lists/chains](https://github.com/ethereum-lists/chains)\r\n\r\n**Open Questions:**\r\n- What are the top use cases for this? (_Non-Labs teams, please share!_)\r\n- What fields do we need to track? What \"requirements\" should this have?\r\n--\r\n- What's the best input format (i.e. csv, yml), output formats to be available (i.e. csv, json, sql cte)?\r\n- What is the right organizational structure? (i.e. one ecosystem/chain deployer can have multiple chains, there may be a gazillion chains)\r\n--\r\n- How can we \"automate\" parts of this? (i.e. identify new L2s via L1 contracts - somehow tie that back to metadata)\r\n- What could/should be onchain?\r\n--\r\n- What's the process for accepting/rejecting/verifying changes?\r\n- How do we incentivize chain deployers to \"register\"?", "OPEN", 0, "MSilb7", "2023-10-16T18:59:20Z", "2024-09-25T14:52:52Z", null, "ethereum-optimism/op-analytics", "2025-08-30 21:55:48"]
["I_kwDODjvEJM6XO4H_", 12013, "Error Starting op-geth Node with Archive Mode: \"incompatible state scheme", "I am following the Optimism documentation to set up a Layer 2 Rollup testnet and have encountered an issue while running my `op-geth` node. Here\u2019s what I have done so far:\r\n\r\n1. **Initialized the `op-geth` node:**\r\n   I used the following command to initialize the node with the genesis block:\r\n   ```\r\n   ./build/bin/geth init --datadir=datadir genesis.json\r\n   ```\r\n   This command executed successfully.\r\n\r\n2. **Started the Sequencer node:**\r\n   I used the following command to start the Sequencer node with archive mode enabled:\r\n   ```\r\n   ./build/bin/geth \\\r\n     --datadir ./datadir \\\r\n     --http \\\r\n     --http.corsdomain=\"*\" \\\r\n     --http.vhosts=\"*\" \\\r\n     --http.addr=0.0.0.0 \\\r\n     --http.api=web3,debug,eth,txpool,net,engine \\\r\n     --ws \\\r\n     --ws.addr=0.0.0.0 \\\r\n     --ws.port=8546 \\\r\n     --ws.origins=\"*\" \\\r\n     --ws.api=debug,eth,txpool,net,engine \\\r\n     --syncmode=full \\\r\n     --gcmode=archive \\\r\n     --nodiscover \\\r\n     --maxpeers=0 \\\r\n     --networkid=42069 \\\r\n     --authrpc.vhosts=\"*\" \\\r\n     --authrpc.addr=0.0.0.0 \\\r\n     --authrpc.port=8551 \\\r\n     --authrpc.jwtsecret=./jwt.txt \\\r\n     --rollup.disabletxpoolgossip=true\r\n   ```\r\n\r\n   However, I am getting the following error:\r\n   ```\r\n   INFO [09-11|14:23:55.024] Maximum peer count                       ETH=0 total=0\r\n   INFO [09-11|14:23:55.025] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\r\n   INFO [09-11|14:23:55.038] Enabling recording of key preimages since archive mode is used\r\n   WARN [09-11|14:23:55.039] Disabled transaction unindexing for archive node\r\n   WARN [09-11|14:23:55.039] Forcing hash state-scheme for archive mode   \r\n   INFO [09-11|14:23:55.039] Set global gas cap                       cap=50,000,000\r\n   INFO [09-11|14:23:55.040] Initializing the KZG library             backend=gokzg\r\n   INFO [09-11|14:23:55.126] Allocated trie memory caches             clean=307.00MiB dirty=0.00B\r\n   INFO [09-11|14:23:55.138] Using pebble as the backing database\r\n   INFO [09-11|14:23:55.138] Allocated cache and file handles         database=/mnt/c/Users/HP/Desktop/Lisk/Lisk/op-geth/datadir/geth/chaindata cache=512.00MiB handles=524,288\r\n   INFO [09-11|14:23:55.280] Opened ancient database                  database=/mnt/c/Users/HP/Desktop/Lisk/Lisk/op-geth/datadir/geth/chaindata/ancient/chain readonly=false\r\n   Fatal: Failed to register the Ethereum service: incompatible state scheme, stored: path, provided: hash\r\n   ```\r\n\r\n**Details:**\r\n- I\u2019ve ensured that I initialized the `op-geth` node with the correct genesis block.\r\n- I\u2019m running the node with `--gcmode=archive` because it needs to act as the Sequencer.\r\n- I followed the setup instructions from the Optimism documentation, but this error persists.\r\n\r\n**Questions:**\r\n1. What could be causing the \"incompatible state scheme\" error?\r\n2. Are there specific steps or configurations I might be missing?\r\n3. How can I resolve this issue to successfully start my `op-geth` node?\r\n\r\nAny guidance or troubleshooting tips would be greatly appreciated!", "CLOSED", 0, "WhizIkem", "2024-09-19T19:57:47Z", "2024-09-20T09:27:53Z", "2024-09-20T09:27:53Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6XFEGs", 11990, "op-node: Give `admin_startSequencer` a chance to sync to requested head", "The sequencer admin rpc `admin_startSequencer` currently directly calls `Sequencer.Start`. But if the candidate sequencer is still processing the requested head, this will fail. This could be improved by giving the sequencer a chance to sync up to the head first, within a short timeout window.", "OPEN", 0, "sebastianst", "2024-09-18T20:40:03Z", "2024-09-18T20:45:51Z", null, "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6XEZKt", 11987, "Missing input checks to GetInput on alt-da", "**Bug Description**\r\nThere is no nil checks for the input `comm CommitmentData` which causes the panics when being used. Would be good to have checks against the input.\r\n\r\n**Steps to Reproduce**\r\n```\r\nvar commit op_plasma.CommitmentData\r\n_, err := daClient.GetInput(ts.Ctx, commit)\r\n```\r\n\r\n**Expected behavior**\r\nShould return an error as \"MalformedData\" or something similar\r\n\r\n**Environment Information:**\r\nAny environment\r\n\r\n**Configurations:**\r\nN/A\r\n\r\n**Logs:**\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\r\n\tpanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x2 addr=0x20 pc=0x1019f2fe8]\r\n```\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "anupsv", "2024-09-18T19:23:05Z", "2024-09-18T19:23:05Z", null, "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6W74h6", 11959, "interop: decouple op-supervisor endpoints availability", "There is a cyclic dependency in RPCs:\r\n- op-geth needs the op-supervisor to check log events safety\r\n- op-supervisor needs op-geth to fetch log events and block data\r\n\r\nThe op-supervisor should decouple the notion of an \"L2 endpoint\" from an \"L2 monitor / DB\". If the endpoint is unavailable, offline, etc. then the existing DB should still be discovered, and the existing data should be served.\r\n\r\nAn L2 endpoint should be possible to add/remove from the op-supervisor without restarting the L2 monitor, or the backend as a whole.\r\n\r\nOnce it's more decoupled, the op-supervisor can be started, op-geth can connect to it, and then we can make the op-supervisor connect to op-geth when available.\r\n\r\nIdeally we also make op-supervisor retry connection attempts of existing configured endpoints, without blocking startup of the op-supervisor, so that we don't have to call the op-supervisor RPC after all the things start up.\r\n", "CLOSED", 0, "protolambda", "2024-09-17T22:23:41Z", "2024-09-20T03:41:03Z", "2024-09-20T03:41:03Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6W6qe7", 11949, "Fix TODO tags, properly fail CI on invalid TODO tags", "We have a scheduled job in CI that checks for TODO tags. I don't think this job is particularly useful because the job doesn't error out if the TODO tag format is invalid. \r\n\r\nWe should introduce a new script to verify TODO tag formats. This script should NOT check if the corresponding issues exist because that would cause CI to randomly fail on unrelated PRs and we don't want that. Use this PR to also fix any existing TODO tags.", "CLOSED", 0, "smartcontracts", "2024-09-17T19:41:06Z", "2024-09-19T17:35:37Z", "2024-09-19T17:35:37Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6WZHyk", 11893, "Enable op-e2e tests for MT-Cannon", "Ensure that we're running MT-Cannon regularly in the `develop-fault-proofs` circleci workflow.", "CLOSED", 0, "Inphi", "2024-09-12T19:16:15Z", "2024-09-16T20:24:21Z", "2024-09-16T20:24:21Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6V4sat", 11807, "EVM Engineering: update L1 contracts to inherit interfaces", "We are adding interfaces for L1 contracts in #11627. For simplicity we are not yet updating the L1 contracts to actually use these interfaces. We will need to update the L1 contracts to use these interfaces.", "CLOSED", 0, "smartcontracts", "2024-09-09T18:45:07Z", "2024-09-18T16:48:41Z", "2024-09-18T16:48:41Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Vd7tH", 11757, "Correctly emulate ll and sc instructions", "Load-linked (`ll`) and store-conditional (`sc`) are currently treated as regular loads and stores. This only makes sense in ST-Cannon without threading as the `sc` is guaranteed to always succeed in a single thread of execution.\n\nThis changes with MT-Cannon as `sc` can fail if multiple threads race on writing to the same address.", "CLOSED", 0, "Inphi", "2024-09-05T12:29:51Z", "2024-09-16T18:37:02Z", "2024-09-16T18:37:02Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6VaB0p", 11753, "op-program panics in MT-Cannon", "While running the op-program within MT-Cannon (see https://github.com/ethereum-optimism/optimism/pull/11587), I observed a Go runtime panic in the guest program. This issue isn't reproducible and I've seen panics occurring in other areas in the Go runtime. Here are a couple stack traces of the panic:\r\n\r\n<details><summary>Example 1</summary>\r\n<pre>\r\n    logw.go:50:                 INFO [09-04|22:06:38.870]                                          module=client stream=stdout text=\"t=1970-05-13T13:45:17+0000 lvl=info msg=\\\"Current hardfork version detected\\\" forkName=canyon\"\r\n    logw.go:50:                 INFO [09-04|22:06:39.072]                                          module=client stream=stdout text=\"t=1970-05-13T13:45:17+0000 lvl=info msg=\\\"Rewinding derivation-pipeline L1 traversal to handle reset\\\"\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.930]                                          module=client stream=stderr text=\"wirep: p->m=35461408(0) p->status=1\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.931]                                          module=client stream=stderr text=\"fatal error: wirep: invalid p state\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.933]                                          module=client stream=stderr text=\"\\nruntime stack:\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.936]                                          module=client stream=stderr text=\"runtime.throw({0x100b907, 0x16})\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.938]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/panic.go:1077 +0x54 fp=0x40445ed4 sp=0x40445ec0 pc=0x631ac\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.942]                                          module=client stream=stderr text=runtime.wirep(0x40426000)\r\n    logw.go:50:                 INFO [09-04|22:06:40.945]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:5359 +0x150 fp=0x40445ef0 sp=0x40445ed4 pc=0x761cc\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.947]                                          module=client stream=stderr text=runtime.acquirep(0x40426000)\r\n    logw.go:50:                 INFO [09-04|22:06:40.949]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:5328 +0x40 fp=0x40445f10 sp=0x40445ef0 pc=0x75ffc\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.980]                                          module=client stream=stderr text=runtime.findRunnable()\r\n    logw.go:50:                 INFO [09-04|22:06:40.983]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:3208 +0xe80 fp=0x40445fa8 sp=0x40445f10 pc=0x6f060\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.985]                                          module=client stream=stderr text=runtime.schedule()\r\n    logw.go:50:                 INFO [09-04|22:06:40.988]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:3582 +0xd8 fp=0x40445fc4 sp=0x40445fa8 pc=0x70954\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.993]                                          module=client stream=stderr text=runtime.park_m(0x40403c00)\r\n    logw.go:50:                 INFO [09-04|22:06:40.995]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:3745 +0x194 fp=0x40445fe0 sp=0x40445fc4 pc=0x711ac\"\r\n    logw.go:50:                 INFO [09-04|22:06:40.998]                                          module=client stream=stderr text=runtime.mcall()\r\n    logw.go:50:                 INFO [09-04|22:06:41.000]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/asm_mipsx.s:141 +0x50 fp=0x40445fe8 sp=0x40445fe0 pc=0xac6a0\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.000]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [09-04|22:06:41.001]                                          module=client stream=stderr text=\"goroutine 1 [runnable]:\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.003]                                          module=client stream=stderr text=internal/poll.(*FD).Read.func1()\r\n    logw.go:50:                 INFO [09-04|22:06:41.005]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/internal/poll/fd_unix.go:144 +0x1c fp=0x406be780 sp=0x406be780 pc=0xf99ac\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.017]                                          module=client stream=stderr text=\"internal/poll.(*FD).Read(0x4067db40, {0x40603128, 0xbe, 0xbe})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.019]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/internal/poll/fd_unix.go:170 +0x3c8 fp=0x406be7d4 sp=0x406be780 pc=0xf9968\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.022]                                          module=client stream=stderr text=os.(*File).read(...)\r\n    logw.go:50:                 INFO [09-04|22:06:41.023]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/os/file_posix.go:29\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.027]                                          module=client stream=stderr text=\"os.(*File).Read(0x406e0890, {0x40603128, 0xbe, 0xbe})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.030]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/os/file.go:118 +0xb0 fp=0x406be7f8 sp=0x406be7d4 pc=0x1047d8\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.034]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-preimage.(*ReadWritePair).Read(0x406e08a0, {0x40603128, 0xbe, 0xbe})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.036]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-preimage/filechan.go:28 +0x5c fp=0x406be818 sp=0x406be7f8 pc=0xb7c5b8\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.042]                                          module=client stream=stderr text=\"io.ReadAtLeast({0x93bc120, 0x406e08a0}, {0x40603080, 0x166, 0x166}, 0x166)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.045]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/io/io.go:335 +0xc8 fp=0x406be844 sp=0x406be818 pc=0xf1f4c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.047]                                          module=client stream=stderr text=io.ReadFull(...)\r\n    logw.go:50:                 INFO [09-04|22:06:41.048]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/io/io.go:354\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.052]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-preimage.(*OracleClient).Get(0x406e08c0, {0x1a533e0, 0x40731900})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.055]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-preimage/oracle.go:33 +0x258 fp=0x406be8c8 sp=0x406be844 pc=0xb7d9dc\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.063]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/l2.(*PreimageOracle).LoadTransactions.func1({0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, 0xf5, 0x6e, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.055]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-preimage/oracle.go:33 +0x258 fp=0x406be8c8 sp=0x406be844 pc=0xb7d9dc\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.063]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/l2.(*PreimageOracle).LoadTransactions.func1({0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, 0xf5, 0x6e, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.065]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/l2/oracle.go:76 +0xa4 fp=0x406be908 sp=0x406be8c8 pc=0xdef998\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.069]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/mpt.ReadTrie.func1({0x407318e0, 0x20, 0x20})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.072]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/mpt/trie.go:24 +0xa0 fp=0x406be968 sp=0x406be908 pc=0xcc5d48\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.076]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/mpt.(*DB).Get(0x40737200, {0x407318e0, 0x20, 0x20})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.079]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/mpt/db.go:21 +0x5c fp=0x406be984 sp=0x406be968 pc=0xcc4d70\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.087]                                          module=client stream=stderr text=\"github.com/ethereum/go-ethereum/core/rawdb.ReadLegacyTrieNode({0x93bd060, 0x40737200}, {0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.090]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/core/rawdb/accessors_trie.go:130 +0x9c fp=0x406be9b0 sp=0x406be984 pc=0x9f9218\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.100]                                          module=client stream=stderr text=\"github.com/ethereum/go-ethereum/triedb/hashdb.(*Database).node(0x404c9550, {0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, 0xf5, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.102]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/triedb/hashdb/database.go:205 +0x228 fp=0x406bea30 sp=0x406be9b0 pc=0xc9dbf0\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.110]                                          module=client stream=stderr text=\"github.com/ethereum/go-ethereum/triedb/hashdb.(*Database).Reader(0x404c9550, {0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, 0xf5, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.113]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/triedb/hashdb/database.go:622 +0x68 fp=0x406bea84 sp=0x406bea30 pc=0xca2888\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.121]                                          module=client stream=stderr text=\"github.com/ethereum/go-ethereum/triedb.(*Database).Reader(0x40737220, {0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, 0xf5, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.123]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/triedb/database.go:129 +0x74 fp=0x406beabc sp=0x406bea84 pc=0xcc2ed0\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.132]                                          module=client stream=stderr text=\"github.com/ethereum/go-ethereum/trie.newTrieReader({0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, 0xf5, 0x6e, ...}, ...)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.135]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/trie/trie_reader.go:42 +0x1c4 fp=0x406beb28 sp=0x406beabc pc=0xa6eef8\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.139]                                          module=client stream=stderr text=\"github.com/ethereum/go-ethereum/trie.New(0x4073ab40, {0x1a53c64, 0x40737220})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.141]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/trie/trie.go:83 +0xf8 fp=0x406bec00 sp=0x406beb28 pc=0xa68b18\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.151]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/mpt.ReadTrie({0x2b, 0xbc, 0xb0, 0x2c, 0x14, 0x7, 0x33, 0xf7, 0xf5, 0x6e, ...}, ...)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.154]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/mpt/trie.go:52 +0x200 fp=0x406bec98 sp=0x406bec00 pc=0xcc5650\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.163]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/l2.(*PreimageOracle).LoadTransactions(0x4067f5b0, {0x5e, 0xab, 0x3d, 0x47, 0x83, 0xa2, 0x62, 0x1a, 0x2c, ...}, ...)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.166]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/l2/oracle.go:75 +0x124 fp=0x406becf4 sp=0x406bec98 pc=0xdef824\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.180]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/l2.(*PreimageOracle).BlockByHash(0x4067f5b0, {0x5e, 0xab, 0x3d, 0x47, 0x83, 0xa2, 0x62, 0x1a, 0x2c, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.183]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/l2/oracle.go:67 +0x100 fp=0x406beda0 sp=0x406becf4 pc=0xdef608\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.195]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/l2.(*CachingOracle).BlockByHash(0x4063b8f0, {0x5e, 0xab, 0x3d, 0x47, 0x83, 0xa2, 0x62, 0x1a, 0x2c, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.198]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/l2/cache.go:63 +0xe0 fp=0x406bedd8 sp=0x406beda0 pc=0xdea374\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.207]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/l2.(*OracleBackedL2Chain).GetBlockByHash(0x40599b20, {0x5e, 0xab, 0x3d, 0x47, 0x83, 0xa2, 0x62, 0x1a, 0x2c, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.210]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/l2/engine_backend.go:121 +0xc4 fp=0x406bee04 sp=0x406bedd8 pc=0xded86c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.219]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client/l2.(*OracleEngine).L2BlockRefByHash(0x4067ff90, {0x1a587dc, 0x21e6bc0}, {0x5e, 0xab, 0x3d, 0x47, 0x83, 0xa2, 0x62, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.221]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/l2/engine.go:131 +0x94 fp=0x406bef1c sp=0x406bee04 pc=0xdec10c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.234]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-node/rollup/derive.(*DerivationPipeline).initialReset(0x4066d800, {0x1a587dc, 0x21e6bc0}, {{0x87, 0x8e, 0x71, 0xe1, 0xc9, 0xe9, 0x5a, ...}, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.237]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-node/rollup/derive/pipeline.go:216 +0x418 fp=0x406bf464 sp=0x406bef1c pc=0xc749f0\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.247]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-node/rollup/derive.(*DerivationPipeline).Step(0x4066d800, {0x1a587dc, 0x21e6bc0}, {{0x87, 0x8e, 0x71, 0xe1, 0xc9, 0xe9, 0x5a, ...}, ...})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.250]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-node/rollup/derive/pipeline.go:157 +0x220 fp=0x406bf858 sp=0x406bf464 pc=0xc73ac0\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.256]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-node/rollup/derive.(*PipelineDeriver).OnEvent(0x407327b0, {0x1a531ec, 0x404f5080})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.259]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-node/rollup/derive/deriver.go:99 +0x2a8 fp=0x406bfd70 sp=0x406bf858 pc=0xc69890\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.263]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-node/rollup/event.(*DeriverMux).OnEvent(0x4067ffe0, {0x1a531ec, 0x404f5080})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.266]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-node/rollup/event/events.go:47 +0x84 fp=0x406bfd94 sp=0x406bfd70 pc=0xa90918\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.269]                                          module=client stream=stderr text=github.com/ethereum-optimism/optimism/op-program/client/driver.(*Driver).RunComplete(0x4071c4b0)\r\n    logw.go:50:                 INFO [09-04|22:06:41.271]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/driver/driver.go:91 +0x164 fp=0x406bfdbc sp=0x406bfd94 pc=0xc9599c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.283]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client.runDerivation({0x1a5c24c, 0x406e0868}, 0x404d0dc0, 0x405a15f0, {0x3, 0x91, 0x5b, 0xb6, 0x4b, 0x9a, ...}, ...)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.285]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/program.go:74 +0x428 fp=0x406bfe28 sp=0x406bfdbc pc=0xdf7650\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.295]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client.RunProgram({0x1a5c24c, 0x406e0868}, {0x93bc108, 0x406e08a0}, {0x93bc108, 0x406e08b8})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.297]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/program.go:49 +0x48c fp=0x406bff38 sp=0x406bfe28 pc=0xdf7208\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.301]                                          module=client stream=stderr text=\"github.com/ethereum-optimism/optimism/op-program/client.Main({0x1a5c24c, 0x406e0868})\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.303]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/program.go:28 +0x100 fp=0x406bff74 sp=0x406bff38 pc=0xdf6b54\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.305]                                          module=client stream=stderr text=main.main()\r\n    logw.go:50:                 INFO [09-04|22:06:41.307]                                          module=client stream=stderr text=\"\\t/home/inphi/optimism/optimism/op-program/client/cmd/main.go:21 +0xd4 fp=0x406bffa4 sp=0x406bff74 pc=0xdf7a7c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.313]                                          module=client stream=stderr text=runtime.main()\r\n    logw.go:50:                 INFO [09-04|22:06:41.316]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:267 +0x394 fp=0x406bffec sp=0x406bffa4 pc=0x67400\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.317]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [09-04|22:06:41.320]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x406bffec sp=0x406bffec pc=0xaea60\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.320]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [09-04|22:06:41.321]                                          module=client stream=stderr text=\"goroutine 2 [force gc (idle)]:\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.329]                                          module=client stream=stderr text=\"runtime.gopark(0x190dbf4, 0x21ce9e8, 0x11, 0x14, 0x1)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.331]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:398 +0x128 fp=0x40430fd4 sp=0x40430fc8 pc=0x67a4c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.335]                                          module=client stream=stderr text=runtime.goparkunlock(...)\r\n    logw.go:50:                 INFO [09-04|22:06:41.336]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:404\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.339]                                          module=client stream=stderr text=runtime.forcegchelper()\r\n    logw.go:50:                 INFO [09-04|22:06:41.341]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:322 +0x128 fp=0x40430fec sp=0x40430fd4 pc=0x67828\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.343]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [09-04|22:06:41.345]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x40430fec sp=0x40430fec pc=0xaea60\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.346]                                          module=client stream=stderr text=\"created by runtime.init.5 in goroutine 1\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.348]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:310 +0x44\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.348]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [09-04|22:06:41.349]                                          module=client stream=stderr text=\"goroutine 3 [GC sweep wait]:\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.357]                                          module=client stream=stderr text=\"runtime.gopark(0x190dbf4, 0x21d03f0, 0xc, 0x14, 0x1)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.360]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:398 +0x128 fp=0x404317c4 sp=0x404317b8 pc=0x67a4c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.363]                                          module=client stream=stderr text=runtime.goparkunlock(...)\r\n    logw.go:50:                 INFO [09-04|22:06:41.363]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:404\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.366]                                          module=client stream=stderr text=runtime.bgsweep(0x40446000)\r\n    logw.go:50:                 INFO [09-04|22:06:41.368]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mgcsweep.go:280 +0xe8 fp=0x404317e4 sp=0x404317c4 pc=0x48934\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.370]                                          module=client stream=stderr text=runtime.gcenable.func1()\r\n    logw.go:50:                 INFO [09-04|22:06:41.372]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mgc.go:200 +0x64 fp=0x404317ec sp=0x404317e4 pc=0x35f08\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.374]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [09-04|22:06:41.376]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x404317ec sp=0x404317ec pc=0xaea60\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.377]                                          module=client stream=stderr text=\"created by runtime.gcenable in goroutine 1\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.379]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mgc.go:200 +0xb4\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.379]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [09-04|22:06:41.380]                                          module=client stream=stderr text=\"goroutine 4 [GC scavenge wait]:\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.391]                                          module=client stream=stderr text=\"runtime.gopark(0x190dbf4, 0x21d0b60, 0xd, 0x14, 0x2)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.393]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:398 +0x128 fp=0x40431fbc sp=0x40431fb0 pc=0x67a4c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.396]                                          module=client stream=stderr text=runtime.goparkunlock(...)\r\n    logw.go:50:                 INFO [09-04|22:06:41.397]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:404\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.400]                                          module=client stream=stderr text=runtime.(*scavengerState).park(0x21d0b60)\r\n    logw.go:50:                 INFO [09-04|22:06:41.402]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mgcscavenge.go:425 +0x98 fp=0x40431fd0 sp=0x40431fbc pc=0x44c10\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.404]                                          module=client stream=stderr text=runtime.bgscavenge(0x40446000)\r\n    logw.go:50:                 INFO [09-04|22:06:41.407]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mgcscavenge.go:653 +0x74 fp=0x40431fe4 sp=0x40431fd0 pc=0x45600\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.408]                                          module=client stream=stderr text=runtime.gcenable.func2()\r\n    logw.go:50:                 INFO [09-04|22:06:41.411]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mgc.go:201 +0x64 fp=0x40431fec sp=0x40431fe4 pc=0x35e94\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.412]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [09-04|22:06:41.415]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x40431fec sp=0x40431fec pc=0xaea60\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.416]                                          module=client stream=stderr text=\"created by runtime.gcenable in goroutine 1\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.418]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mgc.go:201 +0x114\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.418]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [09-04|22:06:41.419]                                          module=client stream=stderr text=\"goroutine 5 [finalizer wait]:\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.427]                                          module=client stream=stderr text=\"runtime.gopark(0x190da90, 0x21e6c14, 0x10, 0x14, 0x1)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.429]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:398 +0x128 fp=0x40430794 sp=0x40430788 pc=0x67a4c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.433]                                          module=client stream=stderr text=runtime.runfinq()\r\n    logw.go:50:                 INFO [09-04|22:06:41.436]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mfinal.go:193 +0x164 fp=0x404307ec sp=0x40430794 pc=0x34aa8\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.437]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [09-04|22:06:41.440]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x404307ec sp=0x404307ec pc=0xaea60\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.441]                                          module=client stream=stderr text=\"created by runtime.createfing in goroutine 1\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.443]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/mfinal.go:163 +0x98\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.443]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [09-04|22:06:41.444]                                          module=client stream=stderr text=\"goroutine 8 [chan receive]:\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.453]                                          module=client stream=stderr text=\"runtime.gopark(0x190da74, 0x4067d570, 0xe, 0x17, 0x2)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.455]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/proc.go:398 +0x128 fp=0x40432758 sp=0x4043274c pc=0x67a4c\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.473]                                          module=client stream=stderr text=\"runtime.chanrecv(0x4067d540, 0x404327e0, 0x1)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.476]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/chan.go:583 +0x5c8 fp=0x40432794 sp=0x40432758 pc=0x1a374\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.479]                                          module=client stream=stderr text=\"runtime.chanrecv2(0x4067d540, 0x404327e0)\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.481]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/chan.go:447 +0x2c fp=0x404327a8 sp=0x40432794 pc=0x19d94\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.484]                                          module=client stream=stderr text=github.com/ethereum/go-ethereum/core.(*txSenderCacher).cache(0x406e0340)\r\n    logw.go:50:                 INFO [09-04|22:06:41.487]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/core/sender_cacher.go:63 +0x60 fp=0x404327e4 sp=0x404327a8 pc=0xd88750\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.489]                                          module=client stream=stderr text=github.com/ethereum/go-ethereum/core.newTxSenderCacher.func1()\r\n    logw.go:50:                 INFO [09-04|22:06:41.491]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/core/sender_cacher.go:55 +0x64 fp=0x404327ec sp=0x404327e4 pc=0xd886e0\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.493]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [09-04|22:06:41.495]                                          module=client stream=stderr text=\"\\t/home/inphi/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x404327ec sp=0x404327ec pc=0xaea60\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.498]                                          module=client stream=stderr text=\"created by github.com/ethereum/go-ethereum/core.newTxSenderCacher in goroutine 1\"\r\n    logw.go:50:                 INFO [09-04|22:06:41.502]                                          module=client stream=stderr text=\"\\t/home/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240827042333-110c433a2469/core/sender_cacher.go:55 +0xc4\"\r\n</pre>\r\n</details>\r\n\r\n<details><summary>Example 2</summary>\r\n<pre>\r\n  logw.go:50:                 INFO [08-24|21:59:18.244]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x40\r\n42e7ec sp=0x4042e7ec pc=0xaf0fc\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.245]                                          module=client stream=stderr text=\"created by runtime.createfing in goroutine 1\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.246]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/mfinal.go:163 +0x98\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.246]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [08-24|21:59:18.247]                                          module=client stream=stderr text=\"goroutine 8 [chan receive]:\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.252]                                          module=client stream=stderr text=\"runtime.gopark(0x1908a14, 0x4051f570, 0xe, 0x17, 0x2)\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.253]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/proc.go:398 +0x128 fp=0x4043\r\n0758 sp=0x4043074c pc=0x68080\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.261]                                          module=client stream=stderr text=\"runtime.chanrecv(0x4051f540, 0x404307e0, 0x1)\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.263]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/chan.go:583 +0x5c8 fp=0x4043\r\n0794 sp=0x40430758 pc=0x1a60c\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.264]                                          module=client stream=stderr text=\"runtime.chanrecv2(0x4051f540, 0x404307e0)\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.265]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/chan.go:447 +0x2c fp=0x40430\r\n7a8 sp=0x40430794 pc=0x1a02c\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.267]                                          module=client stream=stderr text=github.com/ethereum/go-ethereum/core.(*txSenderCacher).ca\r\nche(0x406f0330)\r\n    logw.go:50:                 INFO [08-24|21:59:18.268]                                          module=client stream=stderr text=\"\\t/Users/inphi/go/pkg/mod/github.com/ethereum-optimism/o\r\np-geth@v1.101408.0-rc.4.0.20240822213944-6c8de76e0720/core/sender_cacher.go:63 +0x60 fp=0x404307e4 sp=0x404307a8 pc=0xd863b8\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.269]                                          module=client stream=stderr text=github.com/ethereum/go-ethereum/core.newTxSenderCacher.fu\r\nnc1()\r\n    logw.go:50:                 INFO [08-24|21:59:18.271]                                          module=client stream=stderr text=\"\\t/Users/inphi/go/pkg/mod/github.com/ethereum-optimism/o\r\np-geth@v1.101408.0-rc.4.0.20240822213944-6c8de76e0720/core/sender_cacher.go:55 +0x64 fp=0x404307ec sp=0x404307e4 pc=0xd86348\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.272]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [08-24|21:59:18.273]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x40\r\n4307ec sp=0x404307ec pc=0xaf0fc\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.274]                                          module=client stream=stderr text=\"created by github.com/ethereum/go-ethereum/core.newTxSen\r\nderCacher in goroutine 1\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.275]                                          module=client stream=stderr text=\"\\t/Users/inphi/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101408.0-rc.4.0.20240822213944-6c8de76e0720/core/sender_cacher.go:55 +0xc4\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.276]                                          module=client stream=stderr text=\r\n    logw.go:50:                 INFO [08-24|21:59:18.276]                                          module=client stream=stderr text=\"goroutine 9 [GC worker (idle)]:\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.281]                                          module=client stream=stderr text=\"runtime.gopark(0x1908a44, 0x4073cde0, 0x1a, 0x14, 0x0)\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.282]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/proc.go:398 +0x128 fp=0x40430f94 sp=0x40430f88 pc=0x68080\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.284]                                          module=client stream=stderr text=runtime.gcBgMarkWorker()\r\n    logw.go:50:                 INFO [08-24|21:59:18.286]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/mgc.go:1295 +0x124 fp=0x40430fec sp=0x40430f94 pc=0x392cc\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.287]                                          module=client stream=stderr text=runtime.goexit()\r\n    logw.go:50:                 INFO [08-24|21:59:18.288]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/asm_mipsx.s:641 +0x4 fp=0x40430fec sp=0x40430fec pc=0xaf0fc\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.289]                                          module=client stream=stderr text=\"created by runtime.gcBgMarkStartWorkers in goroutine 1\"\r\n    logw.go:50:                 INFO [08-24|21:59:18.290]                                          module=client stream=stderr text=\"\\t/usr/local/go/src/runtime/mgc.go:1219 +0x4c\"\r\n</pre>\r\n</details>\r\n\r\nThis needs to be debugged before MT-Cannon is ready for the op-program.", "CLOSED", 0, "Inphi", "2024-09-05T02:19:33Z", "2024-09-16T19:09:33Z", "2024-09-16T19:09:31Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6VNBBs", 11721, "Holocene: spike Withdrawals-root feature", "Adding the withdrawals-contract storage-root to the block-header, e.g. in place of the L1 beacon withdrawals-root, would enable proposers to function without archive-node requirement.\r\n\r\nSee original specs by @clabby here: https://github.com/ethereum-optimism/specs/pull/374\r\n\r\nThis might become part of the Holocene upgrade, if we can agree on specs, and if the implementation scope is reasonable.\r\n\r\nThis issue tracks the idea of doing a quick 1-3 day spike, to review where the specs are at, and what implementation/testing of this feature would take.\r\n", "CLOSED", 0, "protolambda", "2024-09-03T15:45:03Z", "2024-09-21T22:44:06Z", "2024-09-21T22:44:06Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6U4Rj2", 11689, "EVM Engineering: validate natspec version strings", "Contracts that inherit from `ISemver` define a version string as a string constant but also define a natspec `@custom:semver <version string>`. We currently have no validation that the version string defined as a constant is the same as the version string in natspec. Natspec version string is only useful if it can be guaranteed to be the same as the string constant (which is the source of truth). CI should verify that this is the case.", "CLOSED", 0, "smartcontracts", "2024-08-30T16:47:00Z", "2024-09-19T20:01:54Z", "2024-09-19T20:01:54Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6UxdUg", 11682, "EVM Engineering: add interfaces for L2 contracts", "Tracking issue for adding interfaces for L2 contracts.", "CLOSED", 0, "smartcontracts", "2024-08-30T02:20:22Z", "2024-09-20T03:04:03Z", "2024-09-20T03:04:03Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6UmjEU", 11648, "Implement getpid(2)", "This is needed when disabling Go patches for prometheus module to work.", "CLOSED", 0, "Inphi", "2024-08-28T18:13:48Z", "2024-09-16T18:24:56Z", "2024-09-16T18:24:56Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6UmjE8", 11650, "Handle unaligned futex addresses", "## Description\r\n\r\nFollowing up on https://github.com/ethereum-optimism/optimism/pull/11605, we should add additional tests that validate FPVM behavior when a futex operation has an unaligned address argument (argument a0 [here](https://github.com/ethereum-optimism/optimism/blob/develop/cannon/mipsevm/multithreaded/mips.go#L102-L102)).  \r\n\r\nCurrently, the VM will panic when we try to access unaligned memory, but we should consider either silently aligning the futex address argument [as we do](https://github.com/ethereum-optimism/optimism/blob/45e129c8ca4b44fdf9c7dadb10c620684371146d/cannon/mipsevm/exec/mips_syscalls.go#L248-L248) for memory reads and writes, or else explicitly panicking if this address is not aligned. ", "CLOSED", 0, "mbaxter", "2024-08-27T20:17:42Z", "2024-09-16T21:54:12Z", "2024-09-16T21:54:12Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6UmjFK", 11651, "cannon: Add more robust validation in Cannon fuzz tests", "## Description\r\n\r\nFollowing up on https://github.com/ethereum-optimism/optimism/issues/11634, there are a few fuzz tests that don't fully validate the post-state updates on the FPVMState.  Creating this ticket to address some TODOs added in ethereum-optimism/optimism#11634 to make these tests more robust.  \r\n\r\nTODOs can be seen here: https://github.com/ethereum-optimism/optimism/pull/11573/commits/b9917d6459559e4ed6e3dd7eb1c7c6016d3885b0", "CLOSED", 0, "mbaxter", "2024-08-22T17:35:29Z", "2024-09-19T18:16:32Z", "2024-09-19T18:16:32Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6UmjGO", 11654, "Rework go patching for MTCannon", "## Description \r\n\r\nCurrently, we're skipping most of the go-specific patching for mtCannon. We'll probably want to break up this patching into GC/threading-related patching and performance-related patching so we can selectively apply the performance-related patching to MTCannon programs", "CLOSED", 0, "Inphi", "2024-08-20T15:20:40Z", "2024-09-17T15:37:43Z", "2024-09-17T15:37:41Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Ruo15", 11331, "Interop: Update OptimismMintableERC20Factory specs", "Update the following md\nhttps://github.com/ethereum-optimism/specs/blob/main/specs/protocol/predeploys.md\n\nWith the CREATE3 information that was presented in the liquidity migration Spec\nhttps://github.com/ethereum-optimism/specs/pull/294", "CLOSED", 0, "0xParti", "2024-08-02T13:03:50Z", "2024-09-17T01:48:50Z", "2024-09-17T01:48:49Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6RV0mj", 11280, "Interop: setup interop tests in op-e2e", "Run multiple L2s, attached to the same L1, with an op-supervisor, in op-e2e.\r\n\r\nPre-requisites:\r\n- [x] Forge deployment code lands #11490 \r\n- [x] Deploy-config organization (Go side): https://github.com/ethereum-optimism/optimism/pull/11189\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/11493\r\n- [x] ~https://github.com/ethereum-optimism/optimism/pull/11591~\r\n- [x] https://github.com/ethereum-optimism/optimism/pull/11850\r\n\r\n", "CLOSED", 0, "protolambda", "2024-07-30T18:17:35Z", "2024-09-16T15:58:16Z", "2024-09-16T15:58:15Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Q_kTP", 11252, "SuperchainERC20: RelayERC20 Parameters Spec", "", "CLOSED", 0, "0xng", "2024-07-26T16:36:39Z", "2024-09-17T01:48:42Z", "2024-09-17T01:48:41Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Q6OA3", 11251, "EVM Engineering: remove autogenerated invariant docs", "I don't think our autogenerated invariant docs are referenced frequently by many people, and they are also not a comprehensive list of invariants\u2014some invariants get tested with standard fuzz tests as opposed to invariant tests. As a result we should consider simplifying things by removing these autogenerated docs\r\n\r\nInspired by discussion with @smartcontracts and @tynes in https://github.com/ethereum-optimism/optimism/pull/11042#discussion_r1690575031", "CLOSED", 0, "mds1", "2024-07-26T00:31:51Z", "2024-09-19T23:20:46Z", "2024-09-19T23:20:46Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Q4x-b", 11245, "Interop: Migrated Liquidity Design Doc", "The Final Design Doc was merged to main:\r\n[https://github.com/ethereum-optimism/design-docs/pull/46#discussion_r1678444097](https://github.com/ethereum-optimism/design-docs/pull/46#discussion_r1678444097)", "CLOSED", 0, "0xParti", "2024-07-25T19:04:54Z", "2024-09-17T01:48:33Z", "2024-09-17T01:48:32Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6QdiCy", 11199, "interop: Prevent logs from Unprovable Chain History ", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe will want to make sure that logs that are too old (ie pre bedrock) cannot be consumed as part of interop. These logs are not provable. For OP Mainnet, technically anything after bedrock went live *could* be proven, but we do have a \"start height\" for the fault proof system. Since interop depends on a shared proof system, no logs before the start of proofs can be consumed.\r\n\r\nWe want to have a generic way of handling this, as some chains may have proofs and interop at genesis. The way to do this would be to add a \"interop start\" timestamp to the `CrossL2Inbox`. Any `Identifier` with a timestamp before the \"interop start\" timestamp would result in a revert.\r\n\r\nThe timestamp could be set in the constructor or with a specific setter, meaning that it would capture the activation timestamp on existing networks. If a setter is used, then we would need to have an additional upgrade deposit tx that calls the setter. The L2 genesis generation script could make sure that its set to 0 if interop is active at genesis. ", "CLOSED", 0, "tynes", "2024-07-22T19:55:53Z", "2024-09-17T01:55:39Z", "2024-09-17T01:55:38Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6UmjID", 11661, "Port applicable MIPS.t.sol tests to the new VM", "Port all the tests in [MIPS.t.sol](https://github.com/ethereum-optimism/optimism/blob/0dcb1b2c7dadec98a24f47e2e2d781a25800d9e1/packages/contracts-bedrock/test/cannon/MIPS.t.sol) to the multi-threaded MIPS solidity VM.", "CLOSED", 0, "Inphi", "2024-07-12T21:13:02Z", "2024-09-19T17:50:41Z", "2024-09-19T17:50:41Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6UmjIU", 11662, "Periodically run MTCannon on real-world data", "## Description\r\n\r\nCreate a job that periodically runs op-program on MTCannon with real-world data.  \r\n\r\nWe have a similar recurring job that runs cannon natively that we can use as a model.  See the[ circleci fpp-verify job](https://github.com/ethereum-optimism/optimism/blob/69d2d47b0f4ea0a41905b0ef52f3fa343ea7633e/.circleci/config.yml#L1424-L1435).", "CLOSED", 0, "mbaxter", "2024-07-10T19:27:32Z", "2024-09-17T19:12:27Z", "2024-09-17T19:12:26Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Oui20", 11091, "Interop: op-supervisor: Handle large number of blocks between logs", "The log db format doesn't currently have a way to skip more than 255 blocks without recording a log: https://github.com/ethereum-optimism/optimism/blob/f3da9a539a0789dd7f7e014cb3b1ae298c5f0cb8/op-supervisor/supervisor/backend/db/entries.go#L94-L97\n\nWe need to add support for a new event type:\n```\ntype 5: \"set block num\" <type><uint64 block number: 8 bytes> = 9 bytes\n```\n\nThis may be inserted prior to a \"search checkpoint\" or \"initiating event\" entry when there is a span of more than 255 blocks with no logs.  The `logContext` is updated to set `blockNum` to the block number from the entry and `logIdx` to 0.  Typically this would only be inserted before an initiating event entry, but it may wind up immediately before a search checkpoint if there is only one entry remaining before the next search checkpoint.", "CLOSED", 0, "ajsutton", "2024-07-08T04:01:44Z", "2024-09-20T23:40:59Z", "2024-09-20T23:40:58Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6MkK5s", 10899, "Interop: Migrated Liquidity", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nIt is important to have a clear upgrade path for deposited ERC20 tokens so that they are interop enabled. This means that any `OptimismMintableERC20Token` should have a migration path. \r\n", "CLOSED", 0, "tynes", "2024-06-17T21:27:45Z", "2024-09-17T01:48:58Z", "2024-09-17T01:48:58Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Umi2p", 11642, "Implement offchain MT FPVM ", "Provide an offchain implementation of the [MT FPVM spec](https://github.com/ethereum-optimism/optimism/issues/11644).\n\nAssuming all development is done on develop, this should be done as a new VM implementation, rather than replace the current one. We'll still need the old one around until the MT FPVM is deployed to mainnet. \n\nTODOs:\n- [x] Update cannon commands so we are able to run mtCannon through the CLI\n- [ ] Add more testing\n  - [x] ethereum-optimism/optimism#11659\n  - [x] ethereum-optimism/optimism#11658\n  - [x] ethereum-optimism/optimism#11657\n  - [x] ethereum-optimism/optimism#11656\n  - [x] ethereum-optimism/optimism#11655\n- [ ] Finalize patching approach for mtCannon.  \n  - [x] ethereum-optimism/optimism#11654\n  - [ ] Decide on an approach for disabling memory profiling in go programs\n    - See this [comment](https://github.com/ethereum-optimism/optimism/pull/11188#discussion_r1692011483) and [this commit](https://github.com/ethereum-optimism/optimism/pull/11188/commits/4fd9c3917baf9c17d1642576d73eea53616cc440).\n    - Created a separate issue for this: https://github.com/ethereum-optimism/optimism/issues/11660\n", "CLOSED", 0, "Inphi", "2024-05-30T17:46:12Z", "2024-09-17T15:37:42Z", "2024-08-20T15:21:56Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6MirYe", 10870, "Interop: handle deposit-tx invalid executing message (post-3074)", "With the changes for 3074 executing messages are now log-events. This prevents us from filtering the deposit-txs upfront during derivation, and instead the execution-engine has to filter/handle the transactions.\r\n\r\nDeposit-txs may only consume initiating messages that are older than the sequencer-window, to guarantee the inclusion of the initiating message side *synchronously* (sequencer cannot censor deposit txs).\r\n\r\nWith a filtering approach of deposits, the message-consolidation will also mismatch.\r\nInstead we may want to change the deposit-tx to \"failed\" status, to revert the changes but retain the tx, such that block-consolidation can stay the same. And no assumptions around L1 bridge to L2 deposit-tx lookups will break.\r\n\r\n", "CLOSED", 0, "protolambda", "2024-05-16T10:35:32Z", "2024-09-16T20:54:28Z", "2024-09-16T20:54:27Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6MirbC", 10874, "SuperchainERC20: Baseline implementation", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nImplement a base superchain erc20 token that can be imported and extended by other projects.\r\n\r\nIt should\r\n- be built on top of a rock solid erc20 implementation\r\n- have `virtual` functions so its easy to extend\r\n- have its specific functionality unit tested", "CLOSED", 0, "tynes", "2024-04-29T20:27:47Z", "2024-09-16T20:59:16Z", "2024-09-16T20:59:16Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6MircU", 10876, "SuperchainERC20: Spec", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe need to clearly specify the SuperchainERC20. This ticket is considered done when we have a spec that we are confident in merged into the specs repo. This is being interated on as part of https://github.com/ethereum-optimism/specs/pull/71", "CLOSED", 0, "tynes", "2024-04-29T20:22:27Z", "2024-09-16T20:40:54Z", "2024-09-16T20:40:54Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDODjvEJM6Mirm5", 10890, "Interop: op-geth transaction pool validation", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nImplement transaction pool validation so that only valid executing messages are included in the transaction pool", "CLOSED", 0, "tynes", "2024-02-09T21:41:49Z", "2024-09-17T01:54:11Z", "2024-09-17T01:54:10Z", "ethereum-optimism/optimism", "2025-08-30 21:56:03"]
["I_kwDOLB-lzc6YOJ4P", 399, "SuperchainERC20Bridge: Support ERC-6909", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe [ERC-6909](https://eips.ethereum.org/EIPS/eip-6909) token standard is a new token standard that was adopted by Uniswap v4. As specified, the `SuperchainERC20` bridge will not work well with ERC-6909 tokens. We do want a world where it is possible to bridge these tokens across the superchain natively.\r\n\r\nPerhaps an easy solution is to rename the `SuperchainERC20Bridge` to the `SuperchainTokenBridge` and then add the following functions:\r\n\r\n```solidity\r\nfunction sendERC6909(address _tokenAddress, address _to, uint256 _id uint256 _amount, uint256 _chainId) external;\r\nfunction relayERC6909(address _tokenAddress, address _from, address _to, uint256 id, uint256 _amount) external;\r\n```\r\n\r\nThis is not a blocker for going to production but could be a pretty straight forward addition to the contract during a future upgrade. \r\n\r\nRenaming the contract to be a more generic token bridge would also make it possible to support ERC721 tokens or really any token standard without needing to introduce new predeploys.", "OPEN", 0, "tynes", "2024-09-27T22:47:23Z", "2024-09-27T22:47:24Z", null, "ethereum-optimism/specs", "2025-08-30 21:56:13"]
["I_kwDOLB-lzc6VZjZf", 361, "Feat: Decoupled `OptimismPortal`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe `OptimismPortal` currently enshrines the proof system in its implementation. You can observe this fact with the following links:\r\n- https://github.com/ethereum-optimism/optimism/blob/3f7a8ad1b8030a3d01d44bc57bf0553a249eae23/packages/contracts-bedrock/src/L1/OptimismPortal.sol#L71\r\n- https://github.com/ethereum-optimism/optimism/blob/3f7a8ad1b8030a3d01d44bc57bf0553a249eae23/packages/contracts-bedrock/src/L1/OptimismPortal2.sol#L90\r\n\r\nWe should move the proof system outside of the `OptimismPortal` and instead only enshrine the concept of an authorized caller that can pass through a `Types.WithdrawalTransaction` to execute. It would be assumed that this other caller did verify the proof.\r\n\r\nThis will help to reduce the size of the `OptimismPortal` contract, as it is right at the codesize limits. We do not want to be in a position where we need to move quickly and cannot due to the code being too large. This problem was hit when porting custom gas token to the `OptimismPortal2`.\r\n\r\nThis will also help to make it easier to maintain things like [op-succinct](https://github.com/succinctlabs/op-succinct/blob/main/README.md). This will unblock us from removing the `L2OutputOracle` from the codebase without breaking other integrations.\r\n\r\nThe upgrade path can be straight forward for tooling like `viem`, if the semver is above a certain version then `viem` can grab the address of the authorized caller contract from the portal and then send its transaction to the authorized caller rather than the portal. The authorized caller can maintain the same ABI of the portal for simplicity.\r\n\r\nThe name for the authorized caller could be \"verifier\" as its role would be to verify proofs.", "OPEN", 0, "tynes", "2024-09-05T00:01:19Z", "2024-09-29T21:01:30Z", null, "ethereum-optimism/specs", "2025-08-30 21:56:13"]
["I_kwDOKIsnqM6GDorC", 152, "feat: make postCheck hook required", "Currently the default `_postCheck` hook just logs a warning, to encourage people to implement it when creating tasks (example [here](https://github.com/ethereum-optimism/superchain-ops/blob/651056909a606e0f6a2b7bdbaf9e61ff1c67e002/script/SignFromJson.s.sol#L39)). It would be ideal to have a `require(false, \"_postCheck not implemented\")` instead to force an implementation.\r\n\r\nHowever, this is not currently implemented because it breaks the `sc_rehearsal_1`, `sc_rehearsal_2`, and `sc_rehearsal_4` tasks which we want to keep in CI. Therefore the scope of this issue is:\r\n1. Give those tasks their own local solidity file, and have them implement an empty post-check.\r\n2. Change all `_postCheck` hooks to have a reverting, default implementation (using `require(false)` because this prevents solidity from emitting \"unreachable code\" warnings)", "CLOSED", 0, "mds1", "2024-04-17T19:29:29Z", "2024-09-27T22:41:46Z", "2024-09-27T22:41:45Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:56:15"]
["I_kwDOMMiGhs6XnNYw", 170, "L2 to L2 Message Passing appears broken", "**Environment information**\r\n - Operating System: macOS Sonoma 14.5\r\n - Supersim Version: 0.1.0-alpha.9\r\n\r\n**Foundry version.**\r\nforge 0.2.0 (ea3ba89 2024-09-05T00:22:21.218185000Z)\r\n\r\n**Describe the bug**\r\n`cast send` L2 <> L2 ERC20 transfer appears to be broken. \r\n\r\n**Steps to reproduce**\r\n\r\n1. Follow the steps [here](https://supersim.pages.dev/getting-started/first-steps) for \"Send an interoperable SuperchainERC20 token from chain 901 to 902 (L2 to L2 message passing)\"\r\n\r\n**Observed behavior**: `cast balance --erc20 0x0bEa8920a4FfB1888Ec3Ac1BC0D23f414B0a28cA 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 --rpc-url http://127.0.0.1:9546` yields 0\r\n\r\n**Expected behavior**: balance should be 1000. \r\n\r\n", "CLOSED", 0, "fainashalts", "2024-09-23T20:52:19Z", "2024-09-24T16:56:52Z", "2024-09-24T16:56:52Z", "ethereum-optimism/supersim", "2025-08-30 21:56:41"]
["I_kwDODjvEJM6X2jC4", 12105, "bug: L2Genesis generation", "Hey, I'm trying to deploy a rollup an stuck on L2 genesis generation because of an error:\r\n\r\nI do next command: \r\n```\r\nforge script scripts/L2Genesis.s.sol:L2Genesis --chain-id $CHAIN_ID --sig \"runWithAllUpgrades()\" --private-key $GS_ADMIN_PRIVATE_KEY\r\n```\r\n\r\nand got next result\r\n```\r\n{\\\"finalSystemOwner\\\":\\\"0x982dBBD4304747f49fA8D50402E02b1C680a126B\\\",\\\"superchainConfigGuardian\\\":\\\"0x982dBBD4304747f49fA8D50402E02b1C680a126B\\\"}\"\r\n    \u251c\u2500 [0] VM::writeJson(\"<stringified JSON>\", \"/Users/nilmedvedev/Projects/DLL/optimism/packages/contracts-bedrock/deployments/9496-deploy.json\")\r\n    \u2502   \u2514\u2500 \u2190 [Return]\r\n    \u251c\u2500 [0] VM::parseJsonAddress(\"<stringified JSON>\", \"$.l1StartingBlockTag\") [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 [Revert] vm.parseJsonAddress: failed parsing \"0x91a59a89c0e9d2a5f763e5c9f1e9bec737a1f93f2afbb1055b881754617e16ad\" as type `address`: parser error:\r\n0x91a59a89c0e9d2a5f763e5c9f1e9bec737a1f93f2afbb1055b881754617e16ad\r\n^\r\nInvalid string length\r\n    \u2514\u2500 \u2190 [Revert] vm.parseJsonAddress: failed parsing \"0x91a59a89c0e9d2a5f763e5c9f1e9bec737a1f93f2afbb1055b881754617e16ad\" as type `address`: parser error:\r\n0x91a59a89c0e9d2a5f763e5c9f1e9bec737a1f93f2afbb1055b881754617e16ad\r\n^\r\nInvalid string length\r\n\r\n```\r\n\r\nI've also tried \r\n```\r\njust genesis\r\n```\r\n\r\nthe result is the same\r\n\r\nI think that's cause this function from Artifacts.s.sol is called underneath:\r\n```\r\n    /// @notice Setup function. The arguments here\r\n    function setUp() public virtual {\r\n        deploymentOutfile = Config.deploymentOutfile();\r\n        console.log(\"Writing artifact to %s\", deploymentOutfile);\r\n        ForgeArtifacts.ensurePath(deploymentOutfile);\r\n\r\n        uint256 chainId = Config.chainID();\r\n        console.log(\"Connected to network with chainid %s\", chainId);\r\n\r\n        // Load addresses from a JSON file if the CONTRACT_ADDRESSES_PATH environment variable\r\n        // is set. Great for loading addresses from `superchain-registry`.\r\n        string memory addresses = Config.contractAddressesPath();\r\n        if (bytes(addresses).length > 0) {\r\n            console.log(\"Loading addresses from %s\", addresses);\r\n            _loadAddresses(addresses);\r\n        }\r\n    }\r\n```\r\n\r\n_loadAddresses(addresses);\r\nl1StartingBlockTag - is parsed as an address\r\n\r\nthx!", "CLOSED", 0, "allnil", "2024-09-25T10:55:56Z", "2024-09-26T08:34:42Z", "2024-09-26T08:34:42Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6X2OQP", 12103, "MTCannon: Create more operator related tests", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThis is a sub task of the https://github.com/ethereum-optimism/optimism/issues/12032\r\n\r\n**Describe the solution you'd like**\r\nAdd sub/subu/and/andi/or/ori/xor/xori/nor/slt/sltu tests\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Additional context**\r\n", "CLOSED", 0, "GrapeBaBa", "2024-09-25T10:17:10Z", "2024-09-26T15:35:34Z", "2024-09-26T15:35:34Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6XvPeY", 12084, "MTCannon: Create add/addi/addu/addiu opcodes test", "This is a sub task of the #12032 ", "CLOSED", 0, "GrapeBaBa", "2024-09-24T15:34:59Z", "2024-09-25T04:27:52Z", "2024-09-25T04:27:52Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6Xl-xx", 12062, "Cannon version multiplexer", "Create a cannon CLI that can multiplex commands to different versions of `cannon`.", "CLOSED", 0, "Inphi", "2024-09-23T18:07:45Z", "2024-09-27T01:35:43Z", "2024-09-27T01:35:43Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6XZfla", 12041, "Sequencer stops producing blocks on L1 error", "**Bug Description**\r\nWhen the sequencer starts building a block and encounters a temporary error while fetching receipts, it does not get scheduled again, requiring a stop/start through the admin API or a restart of `op-node`.\r\n\r\nThe problem stems from the fact that the sequencer does not update the `nextAction` if it encounters a temporary error from the `PreparePayloadAttributes()` call [here](https://github.com/ethereum-optimism/optimism/blob/c5007bb4be66e08b9e4db51c72096912d69eeb0c/op-node/rollup/sequencing/sequencer.go#L509-L512).\r\nWhile it emits a `rollup.EngineTemporaryErrorEvent`, it will not schedule a new time in its handler since the first if statement is true and it returns immediately [here](https://github.com/ethereum-optimism/optimism/blob/c5007bb4be66e08b9e4db51c72096912d69eeb0c/op-node/rollup/sequencing/sequencer.go#L384-L387).\r\n\r\nI'm not entirely sure if removing the `if d.latest == (BuildingState{})` check in `onEngineTemporaryError()` is a good idea or if this has unintended side effects.\r\n\r\n**Steps to Reproduce**\r\n1. Add the following failure simulation to the code [here](https://github.com/ethereum-optimism/optimism/blob/c5007bb4be66e08b9e4db51c72096912d69eeb0c/op-node/rollup/derive/attributes.go#L60)\r\n```\r\nif rand.Int() % 15 == 0 {\r\n\treturn nil, NewTemporaryError(fmt.Errorf(\"failed to fetch L1 block info and receipts: Simulating failure\"))\r\n}\r\n```\r\n2. Run `make devnet-up`\r\n3. The sequencer will stop building new blocks at some point\r\n\r\nSee grepped output from `docker logs ops-bedrock-op-node-1 | rg \"sequencer action|simulating\" -i`\r\n<details>\r\n\r\n```\r\nt=2024-09-21T06:48:50+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-131.129\u00b5s\r\nt=2024-09-21T06:48:50+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.99987939s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-9.118\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-44.905\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-3.937\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-37.07\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-4.429\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-60.565\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-4.819\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-41.839\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-3.457\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-33.745\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-3.737\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-58.13\u00b5s\r\nt=2024-09-21T06:48:52+0000 lvl=info msg=\"Scheduled sequencer action\" delta=336.503204ms\r\nt=2024-09-21T06:48:53+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-31.991\u00b5s\r\nt=2024-09-21T06:48:53+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.932702071s\r\nt=2024-09-21T06:48:55+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-49.414\u00b5s\r\nt=2024-09-21T06:48:55+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.933645244s\r\nt=2024-09-21T06:48:57+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-24.357\u00b5s\r\nt=2024-09-21T06:48:57+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.936828968s\r\nt=2024-09-21T06:48:59+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-31.951\u00b5s\r\nt=2024-09-21T06:48:59+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.93056257s\r\nt=2024-09-21T06:49:01+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-51.839\u00b5s\r\nt=2024-09-21T06:49:01+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.935661018s\r\nt=2024-09-21T06:49:03+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-36.45\u00b5s\r\nt=2024-09-21T06:49:03+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.937822347s\r\nt=2024-09-21T06:49:05+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-35.257\u00b5s\r\nt=2024-09-21T06:49:05+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.93067585s\r\nt=2024-09-21T06:49:07+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-36.579\u00b5s\r\nt=2024-09-21T06:49:07+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.936753368s\r\nt=2024-09-21T06:49:09+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-36.079\u00b5s\r\nt=2024-09-21T06:49:09+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.93781555s\r\nt=2024-09-21T06:49:11+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-42.601\u00b5s\r\nt=2024-09-21T06:49:11+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.930113622s\r\nt=2024-09-21T06:49:13+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-52.249\u00b5s\r\nt=2024-09-21T06:49:13+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.935989201s\r\nt=2024-09-21T06:49:15+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-46.819\u00b5s\r\nt=2024-09-21T06:49:15+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.934585379s\r\nt=2024-09-21T06:49:16+0000 lvl=info msg=\"Scheduled sequencer action\" delta=898.317\u00b5s\r\nt=2024-09-21T06:49:17+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.938675581s\r\nt=2024-09-21T06:49:18+0000 lvl=info msg=\"Scheduled sequencer action\" delta=6.420491ms\r\nt=2024-09-21T06:49:19+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.935855176s\r\nt=2024-09-21T06:49:21+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-125.668\u00b5s\r\nt=2024-09-21T06:49:21+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.939025182s\r\nt=2024-09-21T06:49:23+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-39.385\u00b5s\r\nt=2024-09-21T06:49:23+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.915524009s\r\nt=2024-09-21T06:49:25+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-47.359\u00b5s\r\nt=2024-09-21T06:49:25+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.937121449s\r\nt=2024-09-21T06:49:27+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-30.007\u00b5s\r\nt=2024-09-21T06:49:27+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.939010621s\r\nt=2024-09-21T06:49:29+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-40.356\u00b5s\r\nt=2024-09-21T06:49:29+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.930717014s\r\nt=2024-09-21T06:49:31+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-43.002\u00b5s\r\nt=2024-09-21T06:49:31+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.934422395s\r\nt=2024-09-21T06:49:33+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-29.065\u00b5s\r\nt=2024-09-21T06:49:33+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.93796296s\r\nt=2024-09-21T06:49:35+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-38.653\u00b5s\r\nt=2024-09-21T06:49:35+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.930540346s\r\nt=2024-09-21T06:49:37+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-58.471\u00b5s\r\nt=2024-09-21T06:49:37+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.934734164s\r\nt=2024-09-21T06:49:39+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-29.285\u00b5s\r\nt=2024-09-21T06:49:39+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.9373236s\r\nt=2024-09-21T06:49:41+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-44.344\u00b5s\r\nt=2024-09-21T06:49:41+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.930593914s\r\nt=2024-09-21T06:49:43+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-43.302\u00b5s\r\nt=2024-09-21T06:49:43+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.934000038s\r\nt=2024-09-21T06:49:45+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-40.136\u00b5s\r\nt=2024-09-21T06:49:45+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.936952513s\r\nt=2024-09-21T06:49:45+0000 lvl=warn msg=\"Engine temporary error\" err=\"derivation failed: temp: failed to fetch L1 block info and receipts: Simulating failure\"\r\nt=2024-09-21T06:49:45+0000 lvl=error msg=\"Engine failed temporarily, backing off sequencer\" err=\"derivation failed: temp: failed to fetch L1 block info and receipts: Simulating failure\"\r\nt=2024-09-21T06:49:45+0000 lvl=info msg=\"Scheduled sequencer action\" delta=999.981635ms\r\nt=2024-09-21T06:49:46+0000 lvl=info msg=\"Scheduled sequencer action\" delta=826.297186ms\r\nt=2024-09-21T06:49:47+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.928519083s\r\nt=2024-09-21T06:49:49+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-34.936\u00b5s\r\nt=2024-09-21T06:49:49+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.936302756s\r\nt=2024-09-21T06:49:51+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-39.825\u00b5s\r\nt=2024-09-21T06:49:51+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.935653828s\r\nt=2024-09-21T06:49:53+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-48.231\u00b5s\r\nt=2024-09-21T06:49:53+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.875738597s\r\nt=2024-09-21T06:49:55+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-37.932\u00b5s\r\nt=2024-09-21T06:49:55+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.935375503s\r\nt=2024-09-21T06:49:57+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-41.498\u00b5s\r\nt=2024-09-21T06:49:57+0000 lvl=info msg=\"Scheduled sequencer action\" delta=1.937977728s\r\nt=2024-09-21T06:49:59+0000 lvl=info msg=\"Scheduled sequencer action\" delta=-38.774\u00b5s\r\nt=2024-09-21T06:49:59+0000 lvl=warn msg=\"Engine temporary error\" err=\"temp: failed to fetch L1 block info and receipts: Simulating failure\"\r\n```\r\n\r\n</details>\r\n\r\n**Expected behavior**\r\nThe sequencer should retry building the block after the temporary error.\r\n\r\n**Environment Information:**\r\n - Operating System: linux\r\n - Package Version (or commit hash): latest develop (`9936803afdc2848836eb1d69ecb68cef769b4288`)\r\n", "OPEN", 0, "bearpebble", "2024-09-21T07:23:19Z", "2024-09-24T10:44:04Z", null, "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6XQxQi", 12023, "EVM Engineering: unify vm.getCode deploy functions", "We're adding a new deploy function for `vm.getCode` in #12022 which makes three different functions for deploying things. We should unify this into:\r\n\r\n- `DeployUtils.create1`\r\n- `DeployUtils.create2`\r\n- `DeployUtils.create1AndSave`\r\n- `DeployUtils.create2AndSave`", "CLOSED", 0, "smartcontracts", "2024-09-20T03:13:14Z", "2024-09-27T13:56:56Z", "2024-09-27T13:56:56Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6XQvZS", 12021, "EVM Engineering: add pseudo-constructor function to interfaces", "We're using interfaces and `vm.getCode` in our deployments now which breaks type checking. I'd like to add a `__constructor__` function to our interfaces so that we can (1) export the interface of the constructor and (2) use `abi.encodeCall` to retain type safety.", "CLOSED", 0, "smartcontracts", "2024-09-20T03:03:48Z", "2024-09-27T13:57:03Z", "2024-09-27T13:57:03Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6XNFEv", 12008, "OPSM: Add default values when reading input toml files.", "This feature request comes from a [comment](https://github.com/ethereum-optimism/optimism/pull/11975#discussion_r1765730126) in a recent PR.\r\n\r\nWe should figure out what the default values should be for each of the input properties of our TOML files. Keep in might what safe default values should be and then also which values shouldn't have defaults. ", "CLOSED", 0, "blmalone", "2024-09-19T16:09:32Z", "2024-09-27T17:53:43Z", "2024-09-27T17:53:43Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6XL1F_", 12004, "interop: fix empty log-db starting point edge-case", "NextLog appears to sometimes (always?) return 0 for the index value. I haven't had time to look into this specific issue, and I've been able to work around it by using the iterator's `Index()`, which should be equal to the returned index.\r\n\r\n@protolambda is also making changes to the iterator system which may resolve this bug incidentally.", "CLOSED", 0, "axelKingsley", "2024-09-19T14:08:05Z", "2024-09-25T16:11:28Z", "2024-09-25T16:11:28Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6XDTy8", 11983, "interop: local head tracking", "It appears that the Chain Monitors, while tracking new log events, *do not* track the head pointers in a way that is usable by the rest of the system. Here I write as much context as I can:\r\n\r\n## Cross Safe Maintenance\r\nThe ChainsDB currently has a routine which runs Cross-Safety Maintenance. It attempts to advance the x-safety pointer as far as possible, and updates the value when its done. The x-safety pointer can't go beyond the local-safety pointer.\r\n\r\nIt was here we noticed that cross safety was never advancing, and it appears to be due to the local heads never advancing either.\r\n\r\n## Local Head Pointers\r\nWe expect/desire that there are pointers into the database which represent the local safety of a block of messages. We would want this data to write into the Heads Storage, which holds all these pointers as `index` values into the database (which is why I'm calling them pointers)\r\n\r\nThe current flow is:\r\n\r\n`Chain Monitor` ->\r\n`Head Monitor` ->\r\n`Update Processor` \"callback\"\r\n\r\n** Issue 1**: The Update Processor only has one underlying processor at the moment, the Unsafe Processor. We will need to add processors to the Safe and Finalized stages in order to process those updates *at all*.\r\n\r\nInside this underlying `unsafeBlockProcessor` (of type `HeadUpdateProcessor`) we have a notion of which *block number* we are on for the sake of making the right data requests. Once we get all the blocks, we unroll them into their receipts and logs, and append them all to the database.\r\n\r\n**Issue 2**: Appending to the database happens in a space where the Heads Storage is totally untracked. Chain Monitors have a `store` (underlying is a `ChainsDB`), so maybe we can use that directly...\r\n\r\nAnother potential solution would be for ChainsDB to maintain local heads asynchronously, in the same way as it maintains x-heads. If every block left a checkpoint in the database, the local update routine could just use the Monitor's \"latest\" block number, resolve that to an index, and use that as the local head.", "CLOSED", 0, "axelKingsley", "2024-09-18T16:49:42Z", "2024-09-24T04:53:41Z", "2024-09-24T04:53:41Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6V5356", 11815, "OPSM: Finish adding all OPStackManager Implementation Setters", "As per PR discussion: https://github.com/ethereum-optimism/optimism/pull/11623#discussion_r1750759110 \r\n\r\nMore contracts need to be added to the OPStackManager. Namely, `DelayedWETH` and `DisputeGameFactory`. This issue is tracking that work so it doesn't get lost amidst all the other feature requests. ", "CLOSED", 0, "blmalone", "2024-09-09T21:41:53Z", "2024-09-25T22:23:36Z", "2024-09-25T22:23:35Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6Uxk8M", 11686, "EVM Engineering: convert deploy script to use interfaces", "`Deploy.s.sol` and `ChainAssertions.sol` are the two biggest offenders in blowing up the compilation time for rebuilds since they cause all of the tests to get rebuilt via `CommonTest`. We're going to fix this by converting these scripts to refer to interfaces which means that they'll no longer deploy contracts via `new Contract(...)` and will instead use `vm.getCode(...)`.\r\n\r\nPlease note that this work does NOT replace the ongoing work to update the deployment system via OP Stack Manager and is simply a short-term solution that will allow us to speed up compilation times before OP Stack Manager is ready.", "CLOSED", 0, "smartcontracts", "2024-08-30T02:50:02Z", "2024-09-27T15:31:31Z", "2024-09-27T15:31:31Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6Uxjlw", 11685, "EVM Engineering: add interfaces for straggler contracts", "Catch-all issue for adding interfaces to any contracts that aren't covered by the other open issues (#11680, #11681, #11682). Ideally there shouldn't be very many of these but we'll see.", "CLOSED", 0, "smartcontracts", "2024-08-30T02:44:52Z", "2024-09-27T15:33:55Z", "2024-09-27T15:33:55Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6UmjEo", 11649, "Setup op-challenger-runner for MT-cannon", "blocked by: https://github.com/ethereum-optimism/optimism/issues/11665", "CLOSED", 0, "Inphi", "2024-08-28T17:00:58Z", "2024-09-23T14:56:36Z", "2024-09-23T14:56:36Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6UZ7t5", 11612, "op-supervisor: track every block hash", "Today, the logs database in op-supervisor tracks all logs as fixed-width structures, and inserts a \"Checkpoint\" every 256 entries.\r\n\r\nUsing an iterator to get the next Log gets you:\r\n* The index within the database\r\n* The block number of the event\r\n* The hash *of the event*\r\n\r\nThere is no included hash *of the block*. Because of that, calls to `CheckBlock` on the supervisor currently have no way of validating the block hash.\r\n\r\nThis is only a problem when tracking and responding to reorgs, as the block number and log index are sufficient to determine the presence and validity of an executing message. However, we want to be able to consider the block hash when responding to these calls.\r\n\r\n### The Task:\r\nAdd Search Checkpoints *always* at the end of a block when writing it into the database. We would still include checkpoints every 256 entries, but now there would be an additional set of markers at the end of each block which reveal the block hash.\r\nThen, when `CheckBlock` runs, it scans through to the end of the block, using the index to determine safety, and also uses the newly included block hash checkpoint to consider potential reorg happenings.", "CLOSED", 0, "axelKingsley", "2024-08-27T16:14:06Z", "2024-09-24T04:54:45Z", "2024-09-24T04:54:39Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6TaV9E", 11515, "Holocene-PSBV: Perform risk assessment (FMA)", "", "CLOSED", 0, "sebastianst", "2024-08-19T11:43:45Z", "2024-09-25T18:42:59Z", "2024-09-25T18:42:04Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6TaVTV", 11514, "Holocene-PSBV: Spike scope of changes", "Relevant sources\r\n- [Handling invalid span batches](https://www.notion.so/oplabs/Handling-Invalid-Batches-48bb972368ce409c84bd9189eddd0577) (_internal_)\r\n- https://github.com/ethereum-optimism/optimism/issues/11228", "CLOSED", 0, "sebastianst", "2024-08-19T11:42:12Z", "2024-09-25T18:43:04Z", "2024-09-25T18:40:16Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6TaVJD", 11513, "Holocene-D: Write Partial Span Batch Validity specs", "", "CLOSED", 0, "sebastianst", "2024-08-19T11:41:49Z", "2024-09-25T18:43:10Z", "2024-09-19T21:39:32Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6TOSfT", 11499, "Spec and implementation disagree about URL", "The [OP alt-DA spec](https://specs.optimism.io/experimental/alt-da.html#da-server) requires\r\n```\r\nRequest:\r\n  POST /put\r\n  Content-Type: application/octet-stream\r\n  Body: <preimage_bytes>\r\n\r\nResponse:\r\n  200 OK\r\n  Content-Type: application/octet-stream\r\n  Body: <hex_encoded_commitment>\r\n```\r\n\r\nBut the [implementation](https://github.com/ethereum-optimism/optimism/blob/5a5dd8f44161e8e05093d92b32e102eb38fe78b6/op-alt-da/daserver.go#L56) only listens at the URL `/put/` (with trailing slash). Should the implementation change or the spec?", "CLOSED", 0, "karlb", "2024-08-16T10:37:07Z", "2024-09-27T02:10:27Z", "2024-09-27T02:10:27Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6RosWp", 11315, "Holocene-SBD: Derive invalid batches from the `BatchQueue` as deposit-only blocks", "", "CLOSED", 0, "sebastianst", "2024-08-01T20:34:22Z", "2024-09-25T18:19:19Z", "2024-09-25T18:18:17Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6RosVn", 11314, "Holocene-D: Spike to identify scope of derivation changes and risks", "", "CLOSED", 0, "sebastianst", "2024-08-01T20:34:19Z", "2024-09-25T18:35:38Z", "2024-09-18T13:53:55Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDODjvEJM6RosSG", 11313, "Holocene-D: Write Steady Batch Derivation Specs", "Write specs, based on [design doc](https://github.com/ethereum-optimism/design-docs/pull/20).", "CLOSED", 0, "sebastianst", "2024-08-01T20:34:10Z", "2024-09-25T18:35:32Z", "2024-09-19T21:39:33Z", "ethereum-optimism/optimism", "2025-08-30 21:58:12"]
["I_kwDOEf1bQc6PBrfv", 1034, "[missing doc link] The link to Retro PGF is missing", "<!--\r\nThis repository only accepts issues related to the documentation here https://community.optimism.io/ \r\n\r\nIf you have a support problem, [join our discord](https://discord.com/invite/optimism) and post it in the appropriate channel, either `#user-support` or `#dev-support`.\r\n\r\n-->\r\n\r\n\r\n\r\nThe link `https://community.optimism.io/docs/governance/retropgf-3/` returns a 404 not found issue.\r\n\r\n## Reproduce\r\n\r\n1. Go to `https://round3.optimism.io/projects?after=undefined&display=grid&sort=mostAwarded&search=&seed=1720572026561&categories=` \r\n\r\n2. Click `view docs` \r\n![image](https://github.com/ethereum-optimism/community-hub/assets/22848576/dbd3badf-e6d3-4852-9a10-f77f6233f5fe)\r\n\r\n3. It shows the following\r\n\r\n![image](https://github.com/ethereum-optimism/community-hub/assets/22848576/a2b25dc8-751c-4ff8-9174-46ae01b7f346)\r\n\r\n\r\n## Fix\r\n\r\nI'm not sure where the correct document is, if we know, a simple url change should fix this problem. Let me know if I can help creating a PR~ \r\n\r\n", "OPEN", 0, "imaffe", "2024-07-10T02:26:41Z", "2024-10-04T01:26:03Z", null, "ethereum-optimism/community-hub", "2025-08-30 21:58:24"]
["I_kwDOEf1bQc4-YgHx", 248, "Add directions to the Remix tutorial to use a development node", "This requires several steps:\r\n\r\n1. Explain how to open the cloud provider's firewall (GCP, for example) to allow access to the development node from the outside\r\n2. Explain how to connect to that access from a local wallet (Metamask, for example)\r\n3. Explain how to use it from Remix (identical to how you'd use an existing network)", "OPEN", 0, "qbzzt", "2021-11-06T22:29:59Z", "2024-10-03T18:26:17Z", null, "ethereum-optimism/community-hub", "2025-08-30 21:58:24"]
["I_kwDOKIwiaM6Y1-Lq", 953, "Improve Developer FAQs", "Description:Update the FAQ section with more relevant questions based on common developer issues.  \n\n- Gather common questions from the developer community.\n- Add clear and concise answers to the documentation.", "CLOSED", 0, "Samykoke09", "2024-10-03T14:57:13Z", "2024-10-03T15:11:27Z", "2024-10-03T15:11:27Z", "ethereum-optimism/docs", "2025-08-30 21:58:26"]
["I_kwDOKIwiaM6Y16bq", 952, "Add  Example Projects for Onboarding", "Description:Provide sample projects to guide developers through using Optimism tools and APIs\n\n- Create a simple dApp to demonstrate Optimism integration.\n- Document step-by-step how to build and deploy the dApp.\n\nhttps://community.optimism.io/docs/developers/build/overview/", "CLOSED", 0, "Samykoke09", "2024-10-03T14:51:45Z", "2024-10-03T15:12:13Z", "2024-10-03T15:12:13Z", "ethereum-optimism/docs", "2025-08-30 21:58:26"]
["I_kwDOKIwiaM6Y1y04", 950, "Superchain Awareness Programs & Events", "Description:\n     Plan and execute both physical and virtual awareness events to educate the community about the Superchain's capabilities and potential. These events should aim to increase user engagement and help the community understand the benefits of building and interacting with the Superchain.  \n\nGoal:Create a roadmap for conferences, meetups, and webinars that explain how the Superchain works, the developer opportunities it provides, and how users can benefit from its interoperability features.  \n\n- Identify key locations and groups for physical events.\n- Plan a series of virtual meetups or webinars.\n- Collaborate with community members to co-host events.\n- Develop materials (presentations, guides) for educating users and developers.", "CLOSED", 0, "Samykoke09", "2024-10-03T14:39:26Z", "2024-10-03T15:16:37Z", "2024-10-03T15:16:36Z", "ethereum-optimism/docs", "2025-08-30 21:58:26"]
["I_kwDOKIwiaM6Y1vy6", 949, "Building a Superchain trading bot", "building a maestro esque bot on the Superchain would be very much worth it. Particularly a unique one that would allow a user to trade on any L2 chain compatible on the Superchain without having to bridge or move from one chain to another.e.g you wanna buy a base meme coin and you only have optimism tokens Available in your portfolio/wallet, the bot is meant to be done a way that lets users buy the token regardless the token on their portfolio as long as the chains they are trading on are both superchain compatible.\n\n -Research trading bot frameworks (e.g., Maestro).\n - Outline how Superchain compatibility can eliminate the need for bridging.\n - Develop a prototype for the cross-chain trading bot.\n - Test the bot on Optimism and other compatible L2s.", "CLOSED", 0, "Samykoke09", "2024-10-03T14:34:03Z", "2024-10-03T15:15:43Z", "2024-10-03T15:15:43Z", "ethereum-optimism/docs", "2025-08-30 21:58:26"]
["I_kwDOKIwiaM6Y1p3t", 948, "Provide Examples of Superchain Implementations", "Description:Add specific case studies or practical examples showing the usage of the Superchain in real-world applications \n\n-Research and document at least two use cases.\n-Add a section to the docs highlighting these examples.", "CLOSED", 0, "Samykoke09", "2024-10-03T14:23:46Z", "2024-10-03T15:18:56Z", "2024-10-03T15:18:55Z", "ethereum-optimism/docs", "2025-08-30 21:58:26"]
["I_kwDOKIwiaM6Yof6g", 943, "Refine Superchain Overview", "Enhance the existing Superchain overview by adding more clarity to its design principles and vision for scaling decentralized applications across multiple chains.  \r\nIllustrate how the Superchain connects to the broader blockchain ecosystem\r\nadd more details about Superchain's architecture.\r\n\r\nhttps://community.optimism.io/docs/superchain/overview/", "CLOSED", 0, "Samykoke09", "2024-10-02T06:20:48Z", "2024-10-03T15:14:11Z", "2024-10-03T15:14:11Z", "ethereum-optimism/docs", "2025-08-30 21:58:26"]
["I_kwDOKIwiaM6S_G7z", 828, "Remove pnpm/Javascript references", "flagging that <https://oplabs-pbc.slack.com/archives/CQZ0U9FAN/p1723164980130389|this> results in the need for some doc updates. For example <https://docs.optimism.io/chain/testing/dev-node#installation|here> we still reference pnpm.  The summary is that commands of the form `pnpm foo:bar` are now of the form `just foo-bar`, located in `justfile`s in the repo, though some may have changed names slightly", "CLOSED", 0, "cpengilly", "2024-08-14T14:29:21Z", "2024-10-03T15:19:44Z", "2024-10-03T15:19:44Z", "ethereum-optimism/docs", "2025-08-30 21:58:26"]
["I_kwDOH2Qg5s6Vs4H2", 375, "Failed to register the Ethereum service: incompatible state scheme, stored: path, provided: hash", "#### System information\r\n\r\nGeth version: geth version 1.13.5-stable\r\nOS & Version: Mac OS Sonomo 14.6 M1\r\nCommit hash : `5c2e75862239c77d2873de1888ba52ee84c83178`\r\n\r\n#### Expected behaviour\r\nThe OP-Geth node should start a new chain from genesis.\r\n\r\n#### Actual behaviour\r\n\r\nSetup fails with the message:\r\n\r\n`Fatal: Failed to register the Ethereum service: incompatible state scheme, stored: path, provided: hash`\r\n\r\n\r\n#### Steps to reproduce the behaviour\r\n\r\nStandard chain setup procedure:\r\n\r\n1.  Inside `contracts-bedrock` run:\r\n\r\n```\r\nNote: Alt DA mode is enabled during deployment i.e. at the end of `getting- \r\n   started.json`:  \r\n    \"useAltDA\": true,\r\n    \"daCommitmentType\": \"GenericCommitment\",\r\n    \"daChallengeWindow\": 160,\r\n    \"daResolveWindow\": 160,\r\n    \"daBondSize\": 1000000,\r\n    \"daResolverRefundPercentage\": 0\r\n    \r\n The same behaviour is replicated if using the default getting-started.json ( i.e. without altda configs above ) file or any other default config files available.\r\n```\r\n\r\n```\r\nDEPLOYMENT_OUTFILE=deployments/artifact.json \\DEPLOY_CONFIG_PATH=deploy-config/getting-started.json forge script -vvv scripts/deploy/Deploy.s.sol:Deploy --sig 'runWithStateDiff()' --rpc-url $L1_RPC_URL --broadcast --private-key $GS_ADMIN_PRIVATE_KEY --slow\r\n```\r\n2.  Next:\r\n```\r\nCONTRACT_ADDRESSES_PATH=deployments/artifact.json DEPLOY_CONFIG_PATH=deploy-config/getting-started.json STATE_DUMP_PATH=deploy-config/statedump.json forge script scripts/L2Genesis.s.sol:L2Genesis --sig 'runWithStateDump()' --chain 11155420\r\n```\r\n\r\n3. Now go inside op-node:\r\n\r\n```\r\ngo run cmd/main.go genesis l2 \\\r\n--deploy-config ../packages/contracts-bedrock/deploy-config/getting-started.json \\\r\n--l1-deployments ../packages/contracts-bedrock/deployments/artifact.json \\\r\n--outfile.l2 genesis.json \\\r\n--outfile.rollup rollup.json \\\r\n--l1-rpc $L1_RPC_URL \\\r\n--l2-allocs ../packages/contracts-bedrock/deploy-config/statedump.json\r\n```\r\n\r\n5. Copy `genesis.json` and `jwt.txt` (generated using openssl) to `op-geth`\r\n6.  Inside `op-geth` folder: \r\n     ```\r\n     make geth\r\n     mkdir datadir\r\n     build/bin/geth init --datadir=datadir genesis.json\r\n     ```\r\n     \r\nOutput:\r\n\r\n```\r\n build/bin/geth init --datadir=datadir genesis.json \r\nINFO [09-07|15:49:58.308] Maximum peer count                       ETH=50 total=50\r\nINFO [09-07|15:49:58.312] Set global gas cap                       cap=50,000,000\r\nINFO [09-07|15:49:58.312] Initializing the KZG library             backend=gokzg\r\nINFO [09-07|15:49:58.329] Defaulting to pebble as the backing database\r\nINFO [09-07|15:49:58.329] Allocated cache and file handles         database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/chaindata cache=16.00MiB handles=16\r\nINFO [09-07|15:49:58.423] Opened ancient database                  database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/chaindata/ancient/chain readonly=false\r\nINFO [09-07|15:49:58.423] State schema set to default              scheme=path\r\nERROR[09-07|15:49:58.423] Head block is not reachable\r\nINFO [09-07|15:49:58.492] Opened ancient database                  database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/chaindata/ancient/state readonly=false\r\nINFO [09-07|15:49:58.492] Writing custom genesis block\r\nINFO [09-07|15:49:58.822] Successfully wrote genesis state         database=chaindata hash=c593d2..5418c4\r\nINFO [09-07|15:49:58.822] Defaulting to pebble as the backing database\r\nINFO [09-07|15:49:58.822] Allocated cache and file handles         database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/lightchaindata cache=16.00MiB handles=16\r\nINFO [09-07|15:49:58.943] Opened ancient database                  database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/lightchaindata/ancient/chain readonly=false\r\nINFO [09-07|15:49:58.943] State schema set to default              scheme=path\r\nERROR[09-07|15:49:58.943] Head block is not reachable\r\nINFO [09-07|15:49:58.995] Opened ancient database                  database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/lightchaindata/ancient/state readonly=false\r\nINFO [09-07|15:49:58.995] Writing custom genesis block\r\nINFO [09-07|15:49:59.300] Successfully wrote genesis state         database=lightchaindata hash=c593d2..5418c4\r\n```\r\n\r\n\r\n7.  Now run the `op-geth`:\r\n```\r\ncd ~/op-geth\r\n./build/bin/geth \\\r\n  --datadir ./datadir \\\r\n  --http \\\r\n  --http.corsdomain=\"*\" \\\r\n  --http.vhosts=\"*\" \\\r\n  --http.addr=0.0.0.0 \\\r\n  --http.port=9545 \\\r\n  --http.api=web3,debug,eth,txpool,net,engine \\\r\n  --ws \\\r\n  --ws.addr=0.0.0.0 \\\r\n  --ws.port=9546 \\\r\n  --ws.origins=\"*\" \\\r\n  --ws.api=debug,eth,txpool,net,engine \\\r\n  --syncmode=full \\\r\n  --gcmode=archive \\\r\n  --nodiscover \\\r\n  --maxpeers=0 \\\r\n  --networkid=42069 \\\r\n  --authrpc.vhosts=\"*\" \\\r\n  --authrpc.addr=0.0.0.0 \\\r\n  --authrpc.port=9551 \\\r\n  --authrpc.jwtsecret=./jwt.txt \\\r\n  --rollup.disabletxpoolgossip=truecd ~/op-geth\r\n./build/bin/geth \\\r\n  --datadir ./datadir \\\r\n  --http \\\r\n  --http.corsdomain=\"*\" \\\r\n  --http.vhosts=\"*\" \\\r\n  --http.addr=0.0.0.0 \\\r\n  --http.port=9545 \\\r\n  --http.api=web3,debug,eth,txpool,net,engine \\\r\n  --ws \\\r\n  --ws.addr=0.0.0.0 \\\r\n  --ws.port=9546 \\\r\n  --ws.origins=\"*\" \\\r\n  --ws.api=debug,eth,txpool,net,engine \\\r\n  --syncmode=full \\\r\n  --gcmode=archive \\\r\n  --nodiscover \\\r\n  --maxpeers=0 \\\r\n  --networkid=42069 \\\r\n  --authrpc.vhosts=\"*\" \\\r\n  --authrpc.addr=0.0.0.0 \\\r\n  --authrpc.port=9551 \\\r\n  --authrpc.jwtsecret=./jwt.txt \\\r\n  --rollup.disabletxpoolgossip=true\r\n  ```\r\n  \r\n#### Logs\r\n\r\n```\r\n./build/bin/geth \\\r\n  --datadir ./datadir \\\r\n  --http \\\r\n  --http.corsdomain=\"*\" \\\r\n  --http.vhosts=\"*\" \\\r\n  --http.addr=0.0.0.0 \\\r\n  --http.port=9545 \\\r\n  --http.api=web3,debug,eth,txpool,net,engine \\\r\n  --ws \\\r\n  --ws.addr=0.0.0.0 \\\r\n  --ws.port=9546 \\\r\n  --ws.origins=\"*\" \\\r\n  --ws.api=debug,eth,txpool,net,engine \\\r\n  --syncmode=full \\\r\n  --gcmode=archive \\\r\n  --nodiscover \\\r\n  --maxpeers=0 \\\r\n  --networkid=42069 \\\r\n  --authrpc.vhosts=\"*\" \\\r\n  --authrpc.addr=0.0.0.0 \\\r\n  --authrpc.port=9551 \\\r\n  --authrpc.jwtsecret=./jwt.txt \\\r\n  --rollup.disabletxpoolgossip=true\r\ncd: no such file or directory: /Users/rachitsrivastava/op-geth\r\nINFO [09-07|15:16:49.245] Maximum peer count                       ETH=0 total=0\r\nINFO [09-07|15:16:49.248] Enabling recording of key preimages since archive mode is used\r\nWARN [09-07|15:16:49.248] Disabled transaction unindexing for archive node\r\nWARN [09-07|15:16:49.248] Forcing hash state-scheme for archive mode\r\nINFO [09-07|15:16:49.249] Set global gas cap                       cap=50,000,000\r\nINFO [09-07|15:16:49.249] Initializing the KZG library             backend=gokzg\r\nINFO [09-07|15:16:49.269] Allocated trie memory caches             clean=307.00MiB dirty=0.00B\r\nINFO [09-07|15:16:49.269] Using pebble as the backing database\r\nINFO [09-07|15:16:49.269] Allocated cache and file handles         database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/chaindata cache=512.00MiB handles=5120\r\nINFO [09-07|15:16:49.330] Opened ancient database                  database=/Volumes/Personal/Avail/optimism-plasma-3/op-geth/datadir/geth/chaindata/ancient/chain readonly=false\r\nFatal: Failed to register the Ethereum service: incompatible state scheme, stored: path, provided: hash\r\n```\r\n", "CLOSED", 0, "rac-sri", "2024-09-07T09:48:20Z", "2024-10-03T12:31:17Z", "2024-10-03T12:31:17Z", "ethereum-optimism/op-geth", "2025-08-30 21:58:28"]
["I_kwDOLB-lzc6Y4gju", 416, "Batched L1 Origin Updates", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe problem statement is that OP Stack L3s cannot work well with L2s that have a 1 second block time. The solution is to allow for batched L1 origin updates, which can be thought of as deriving L2 blocks in batches rather than one by one.\r\n\r\nRight now the L2 derivation pipeline ingests L1 data by observing every L1 block and every L1 transaction in that block. It then builds a set of L2 blocks that \"correspond\" to an L1 block. This set of L2 blocks is called an epoch. The L2 derivation pipeline needs to observe all L1 transactions and logs to make sure that it processed all of the information required for the L2 to correctly sync. This adds a bit of extra overhead to the proof system, but works fine when we consider L1 at 12 second block time and L2 at 2 second block time.\r\n\r\nDue to this epoch based design, there is an assumption that the L2 block time is smaller than the L1 block time. The OP Stack does not currently support sub second block times. \r\n\r\nThis means for the case of L3s deployed on chains with a 1 second block time, they will have trouble operating because of the assumption that the L3 block time is smaller than the L3 block time. If there is any hiccup in the L3 system, it will fall behind due to needing to process each L2 block individually. The way to fix this is to ingest L2 blocks in chunks during L3 derivation rather than one by one. This will allow the system to keep up with 1 second block times. What this looks like in practice is \"batched L1 origin updates\". This could be similar to span batches but for L1 origin updates.\r\n\r\nSome discussion:\r\n- https://github.com/ethereum-optimism/specs/discussions/241#discussioncomment-10052249\r\n- https://github.com/ethereum-optimism/specs/discussions/158#discussioncomment-9240485\r\n\r\nDepends on https://github.com/ethereum-optimism/specs/pull/82\r\n\r\nNice to have:\r\n- https://github.com/ethereum-optimism/specs/issues/330\r\n- https://github.com/ethereum-optimism/specs/issues/415", "OPEN", 0, "tynes", "2024-10-03T20:30:42Z", "2024-10-03T20:30:42Z", null, "ethereum-optimism/specs", "2025-08-30 21:58:30"]
["I_kwDOLB-lzc6Y4f_o", 415, "Research Area: Stateless Derivation", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nStateless execution is the idea of not needing to maintain a state database when doing execution. A witness can be sent over p2p that includes a commitment to each state access can be used to populate an in memory memory state db during execution and a comparison to the post state state root in the block header can guarantee that the correct.\r\n\r\nIt would be nice to have a stateless derivation pipeline, where we no longer need to observe all L1 transactions/logs and instead include witnesses to an L1 header chain to populate the derivation pipeline. This idea has been explored with logs in https://github.com/ethereum-optimism/specs/issues/330 but has not yet been fully explored for batches. We could use a similar nonce idea in the batch serialization to enable this. It is also possible it could be done by turning the batch inbox into a very simple contract that simple increments a nonce and/or emits an event with metadata about the batch itself.\r\n\r\nThis would be a good improvement to the proof programs, as it would remove a lot of work iterating over blocks during the proof, and we could just include the data with witnesses instead.", "OPEN", 0, "tynes", "2024-10-03T20:29:11Z", "2024-10-03T20:29:11Z", null, "ethereum-optimism/specs", "2025-08-30 21:58:30"]
["I_kwDOLB-lzc6Y31_z", 414, "Document superchain contract types", "We need to clearly document which contracts are Proxies or not, which are singletons, which are MCP ready, etc. \r\n\r\nThis can be used as a reference: https://github.com/ethereum-optimism/optimism/blob/13d116acfa528f57082976ee1be0ed1ba98c9823/packages/contracts-bedrock/scripts/DeployImplementations.s.sol#L817-L827\r\n\r\nIt should go into https://specs.optimism.io/protocol/overview.html#core-l1-smart-contracts", "OPEN", 0, "maurelian", "2024-10-03T18:48:44Z", "2024-10-03T18:48:44Z", null, "ethereum-optimism/specs", "2025-08-30 21:58:30"]
["I_kwDOLB-lzc6Ycaby", 402, "Interop: Message Expiry", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nIt would be nice to be able to recover messages when they are sent to remote chains that are not able to process them. There are generally 2 ways of thinking about this. Messages can be expired after some amount of time and be rolled back or they can revert up front if they are going to a chain that cannot accept the incoming message.", "OPEN", 0, "tynes", "2024-09-30T20:32:09Z", "2024-09-30T20:32:09Z", null, "ethereum-optimism/specs", "2025-08-30 21:58:30"]
["I_kwDOLB-lzc6YN0hh", 397, "SuperchainERC20: Add `mint` and `burn` to the spec", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nSince the `SuperchainERC20Bridge` is going to be calling `mint` and `burn` on the token, we should explicitly define that the token must implement the exact ABI that the bridge will be calling out to the token with. This is an important part of the spec that ensures that the tokens actually work ", "CLOSED", 0, "tynes", "2024-09-27T21:30:13Z", "2024-10-01T22:22:13Z", "2024-10-01T22:22:13Z", "ethereum-optimism/specs", "2025-08-30 21:58:30"]
["I_kwDOLB-lzc6Xpmke", 388, "On Handling the L2 Proxy Admin Owner", "The goal is to remove all network specific configuration from the L2 genesis state so that there is a deterministic L2 genesis for all chains. This enables the authentication of a standard L2 chain by simply referencing the root hash. Each release of the L2 contracts would correspond to a hardfork. The network specific configuration would be pushed via deposit transactions to the L2 as the first transactions that the system processes via deposit transactions that are sent via `SystemConfig.initialize`. All of the getters for this configuration would be fetched from the `L1Block` contract. This follows the same design pattern for the L1 contracts where all immutables were removed in favor of storage so that the same contract implementations could be used by multiple chains.\n\nThere is an open question on how to handle the L2 `ProxyAdmin` owner. Right now, a standard stage 1 OP Stack chain should set the L2 `ProxyAdmin` owner to be the aliased account of the L1 security council/foundation multisig.\n\nThe following options explore the design spaces.\n\n## SystemConfig can set owner\n\nThis would follow the same pattern for all other network specific config, the `SystemConfig` would be able to deposit and set the owner in the `L1Block` contract. This would essentially mix roles in some cases unless we had more expressive RBAC in the `SystemConfig` as it would mix the security council and the chain operator in both having the ability to change the owner, since you can change the owner by calling `transferOwner` on the `ProxyAdmin` or have the owner of the `SystemConfig` initiate a deposit transaction that modifies the ownership. The way to solve this is only allow setting this value by the `SystemConfig` if the initial owner is `address(0)`, and then only the existing owner would be able to modify the value in the `L1Block` contract.\n\n## Depositor Account is owner\n\nEnshrine a new call path that emits a `TransactionDeposited` event in the `OptimismPortal` from the `DEPOSITOR_ACCOUNT` that calls the `ProxyAdmin`. The caller of this function could be fetched from the `SuperchainConfig`, allowing a single source of truth to be defined for which account can create an L2 `ProxyAdmin` action. This is a nice design because it enables both the protocol and the security council to take action on behalf of the L2 `ProxyAdmin`. Longer term we may want to remove this function as the OP Stack matures and only let the protocol act on behalf of the `ProxyAdmin`", "OPEN", 0, "tynes", "2024-09-24T04:18:27Z", "2024-10-01T18:07:38Z", null, "ethereum-optimism/specs", "2025-08-30 21:58:30"]
["I_kwDOLB-lzc6SIJF0", 317, "CrossL2Inbox: Renaming Bikeshed", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nSince the removal of the [only eoa](https://github.com/ethereum-optimism/specs/discussions/128#discussioncomment-9196105) invariant from the interop spec, the `CrossL2Inbox` no longer needs to be thought of as an inbox. Previously, we enforced an eoa to send a transaction to the `CrossL2Inbox` with calldepth == 0 by enforcing `require(msg.sender == tx.origin)`. This made the executing message data be in the calldata rather than an event. The nice property here is that you can statically analyze cross chain transactions to check the correctness of an executing message (the identifier references the message). After the removal of the only eoa invariant, now execution is required to check the correctness of an executing message.\r\n\r\nSince the `CrossL2Inbox` is no longer the entrypoint for a cross chain message, should it be renamed? This issue is meant to collect a list of names and we can decide on Aug 16th if we ultimately want to rename the contract.\r\n", "CLOSED", 0, "tynes", "2024-08-06T20:06:25Z", "2024-09-30T21:45:58Z", "2024-09-30T21:45:58Z", "ethereum-optimism/specs", "2025-08-30 21:58:30"]
["I_kwDOKIsnqM6QhqFx", 268, "Wrong state diff checks during nested approval calls", "Nested approval calls seem to run the same state diff checks as the actual task execution. This lead to failing checks during the `DGF.setImplementation` task executions for Fjord.\r\n\r\nIt was locally mitigated by removing the task-specific checks and adding code-less address exceptions to the validation script (letting `getCodeExceptions()` return the `SC.getOwners()` array). The exceptions were necessary because the SC multisig records all member addresses in a timestamp mapping, and members are mostly EOAs, thus failing the generic code exception checks, that values of state changes that are addresses must contain code.", "CLOSED", 0, "sebastianst", "2024-07-23T09:41:28Z", "2024-09-30T18:30:17Z", "2024-09-30T18:30:17Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOKIsnqM6CXCTe", 112, "Clarify output logs when simulating", "> feedback on nested task: this log is a little confusing where it says `signer: [not my address]`.  I think it\u2019s just because it\u2019s nested because it simulates from my EOA correctly, but maybe a different word than \u201csigner\u201d would be better\r\n\r\nIn `nested.just` we have code like this:\r\n\r\n```\r\nif [ t\"{{whichSafe}}\" == t\"foundation\" ]; then\r\n  safe=\"${foundationSafe}\"\r\n  signer=\"${foundationOwner0}\"\r\n  echo \"signer: ${signer}\"\r\n  echo \"safe: ${safe}\"\r\nfi\r\n```\r\n\r\nbut we only use that signer as the `--sender` if `SIMULATE_WITHOUT_LEDGER` is not equal to 1, so we should clarify that log. cc @maurelian \r\n", "CLOSED", 0, "mds1", "2024-03-14T18:59:30Z", "2024-10-01T21:36:12Z", "2024-10-01T21:36:11Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOKIsnqM6AmyHR", 91, "SAFE_NONCE detection issues", "In the 003 ceremony, one of the signers initially signed the wrong data, because the script set the SAFE_NONCE to `0`. \r\n\r\nie. the output included this line: \r\n\r\n```\r\nSafe current nonce: 89\r\nCreating transaction with nonce: 0\r\n```\r\n\r\nWhile debugging, we identified that this was fixed by removing [this line](https://github.com/ethereum-optimism/superchain-ops/blob/main/tasks/eth/003-protocol-versions-delta/.env#L3) from the `.env` file:\r\n\r\n```\r\nSAFE_NONCE=\"\"\r\n```\r\n\r\nIt seems that an empty string results in this `try` statement passing:\r\n\r\nhttps://github.com/base-org/contracts/blob/3a566fcc0e01535cf93dbcef6704640cbde222aa/script/universal/MultisigBase.sol#L32-L35\r\n\r\nHowever this is only observed on one signers' computer, whereas other signers, although using the same .env file, did not have this issue. \r\n\r\nThis signer has also had the same issue before.", "CLOSED", 0, "maurelian", "2024-02-27T21:38:43Z", "2024-10-02T00:39:41Z", "2024-10-02T00:39:41Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOKIsnqM5-j81R", 60, "Update and clarify the task naming system", "From https://github.com/ethereum-optimism/superchain-ops/pull/55#discussion_r1480554452\r\n\r\n> The PR calls this upgrade 4 but this file is called `2-*`, which feels confusing. Should those match at all? Or are the 0/1/2 number prefixes for existing task folder names just communicating the order they were added to the repo for some reason?\r\n> \r\n>\r\n> > They are meant to indicate the order in which they are executed, not map to the upgrade numbering.\r\n> > There have been several upgrades which did not involve contracts, so they aren't reflected here.\r\n> > We should clarify/improve on this system when we get a chance.\r\n", "CLOSED", 0, "mds1", "2024-02-07T15:57:36Z", "2024-10-02T00:40:14Z", "2024-10-02T00:40:13Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOKIsnqM59MydP", 49, "Make SignFromJson compatible with Safe Web UI", "Currently, the SignFromJson script always use Multicall3.aggregate3 to generate the transaction to be signed, example: https://dashboard.tenderly.co/k-oplabs/project/simulator/4e4efb85-acfc-4210-9a8d-55785e0b65a1\r\n\r\nThe safe web UI uses MultiSendCallOnly.multiSend to generate the transaction to be signed if there are multiple calls: https://dashboard.tenderly.co/public/safe/safe-apps/simulator/3be84dfc-96d6-4069-bae6-6f64a6da5dbf, and no multicall at all if there is a single call: https://dashboard.tenderly.co/public/safe/safe-apps/simulator/d2177dce-db8a-4999-8ac0-38d2bebe3fd4\r\n\r\nThis FR is about changing SignFromJson so it behaves just like safe web UI, so different signers can choose to use either SignFromJson or Safe Web UI and they would still see the same domain hash and message hash.", "CLOSED", 0, "zchn", "2024-01-25T14:21:33Z", "2025-09-24T19:47:48Z", "2025-09-24T19:47:47Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOKIsnqM58fUL6", 38, "Superchain ops upgrade safety implementaiton", "", "CLOSED", 0, "maurelian", "2024-01-18T15:55:42Z", "2024-10-02T13:02:36Z", "2024-10-02T13:02:36Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOKIsnqM58fNzR", 37, "Automating Superchain-ops Upgrade Execution Safety", "## Goals:\r\n\r\nImprove the safety and ergonomics of L1 on-chain actions by:\r\n\r\n1. checking the full set of state accesses and changes\r\n2. checking the post action state of the system\r\n\r\n## Non Goals:\r\n\r\n- Implementing this functionality for L2 upgrades\r\n\r\n## Spec\r\n\r\n### Enabling L1 upgrade safety while maintaining flexibility in the tooling of the repo\r\n\r\nThis work will introduce a new contract `L1SignJson`, which inherits from `SignJson`.  The original `SignJson` contract will thus remain mostly unchanged and can be used in ceremonies that don't require or are not supported by the added checks.\r\n\r\n\r\n### Superchain Registry access\r\n\r\nIn order to obtain the addresses of the system contracts required for this work, the Superchain Registry will be added as a submodule. The required commit of the superchain registry can be provided as an env var to ensure the right one is used.\r\n\r\nThe json utilities provided for forge-std will be used to parse this information. This is considered less error prone than providing the local address of the superchain registry.\r\n\r\n\r\n### Post Checking\r\n\r\nThe ChainAssertions library will be imported and the post checks will be called. These of course will not run on-chain, but will be executed during the pre-broadcast simulation.\r\n\r\n### State diff checking\r\n\r\nCeremonies using this additional safety will require a new `diff.json` file. This file will provide an array of objects which correspond to the format of the state accesses struct returned by foundry's `vm.stopAndReturnStateDiff()`.\r\n\r\nAll diffs in the JSON file MUST be includes in the state diffs, and no state diffs will be allowed which are not included there.\r\n\r\nAn alternative to the `diff.json` file may be to define the state diffs in a `Diff.sol`. This option will be explored during implementation.\r\n", "CLOSED", 0, "maurelian", "2024-01-18T15:42:34Z", "2024-10-02T00:56:13Z", "2024-10-02T00:56:12Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOKIsnqM5zyRsq", 18, "Forked Network Tests", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nHaving tests against a forked network would be very helpful for ensuring that any spell is correct. \r\n\r\nThe forge scripting framework that we are using has a convenience `_postCheck` [method](https://github.com/base-org/contracts/blob/e961e8638874d571aa63a6e35507e3779131d1eb/script/universal/MultisigBuilder.sol#L23) that can be implemented with assertions about the upgrade. Each script should implement the `_postCheck` method with application specific assertions and should be ran before performing an upgrade.\r\n\r\nThere are 2 options for how these tests can be implemented:\r\n- Spin up anvil and run the script exactly as is against a forked network. This may not work ideally with multisigs unless coupled with the RPC `hardhat_setStorageAt` (there is also an anvil prefixed alias) to overwrite the signer threshold.\r\n- Do all of the execution in memory as a simulation, so call the forge script without the `--broadcast` flag, pin the command to a particular blocknumber and pass a URL to fork state from. We would want to make a solidity library that can be used for overwriting the signer threshold, this is easy to do with the cheatcode `vm.store`.\r\n\r\nThe second option seems a bit easier to me.\r\n\r\nThe `justfile` could be updated with a `test` command that CI can consume. We could choose to stop running tests for upgrades that we have already performed after some time if we wanted to.\r\n\r\nWe may also want to consider if we want to have a `_preCheck` function that can be implemented as well.", "CLOSED", 0, "tynes", "2023-10-13T19:58:01Z", "2024-10-02T04:12:11Z", "2024-10-02T04:12:11Z", "ethereum-optimism/superchain-ops", "2025-08-30 21:58:47"]
["I_kwDOMMiGhs6XzScT", 174, "publish supersim on npm", "# Feature\r\n\r\nPublish the binaries on NPM\r\n\r\n# Why?\r\n\r\nPublishing on NPM would allow users to use supersim with npx\r\n\r\n```bash\r\nnpx supersim\r\n```\r\n\r\nInstall with NPM\r\n\r\n```typescript\r\nnpm i --global supersim\r\n```\r\n\r\nOr list supersim as a subdependency in a package.json. This is my use case. I'm making a testing library called `tevm test` soon and I would like to enable interop support with supersim.\r\n\r\n# How\r\n\r\nAdding a go binary to npm is straightforward. You need a package.json\r\n\r\n```typescript\r\n{\r\n  \"name\": \"supersim\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Example package.json\",\r\n  \"bin\": {\r\n    \"supersim\": \"./bin/supersim\"\r\n  },\r\n  \"scripts\": {\r\n    \"postinstall\": \"node install.js\"\r\n  },\r\n  \"author\": \"Your Name\",\r\n  \"license\": \"MIT\"\r\n}\r\n```\r\n\r\nAnd then you need a simple postinstall script. This install script simply downloads the correct binary based on the platform to bin/supersim.\r\n\r\n```typescript\r\n// Detect platform and architecture\r\nconst platform = os.platform();\r\nconst arch = os.arch();\r\nlet fileName = '';\r\n\r\nif (platform === 'darwin' && arch === 'arm64') fileName = 'supersim_Darwin_arm64.tar.gz';\r\nelse if (platform === 'darwin' && arch === 'x64') fileName = 'supersim_Darwin_x86_64.tar.gz';\r\nelse if (platform === 'linux' && arch === 'arm64') fileName = 'supersim_Linux_arm64.tar.gz';\r\nelse if (platform === 'linux' && arch === 'x64') fileName = 'supersim_Linux_x86_64.tar.gz';\r\nelse if (platform === 'win32' && arch === 'arm64') fileName = 'supersim_Windows_arm64.zip';\r\nelse if (platform === 'win32' && arch === 'x64') fileName = 'supersim_Windows_x86_64.zip';\r\nelse {\r\n  console.error('Unsupported platform/architecture');\r\n  process.exit(1);\r\n}\r\n\r\nconst downloadUrl = `https://github.com/ethereum-optimism/supersim/releases/download/0.1.0-alpha.12/${fileName}`;\r\nconst outputPath = path.join(__dirname, 'bin', fileName);\r\n\r\n// Create bin directory if it doesn't exist\r\nif (!fs.existsSync(path.join(__dirname, 'bin'))) fs.mkdirSync(path.join(__dirname, 'bin'));\r\n\r\n// Download the binary\r\nhttps.get(downloadUrl, (response) => {\r\n  const file = fs.createWriteStream(outputPath);\r\n  response.pipe(file);\r\n  file.on('finish', () => {\r\n    file.close(() => {\r\n      console.log(`Downloaded ${fileName}`);\r\n      const extractCmd = fileName.endsWith('.tar.gz') ? `tar -xzf ${outputPath} -C ./bin` : `unzip ${outputPath} -d ./bin`;\r\n      exec(extractCmd, (err) => {\r\n        if (err) console.error('Extraction error:', err);\r\n        else console.log('Extraction complete.');\r\n      });\r\n    });\r\n  });\r\n}).on('error', (err) => {\r\n  console.error(`Download error: ${err.message}`);\r\n  process.exit(1);\r\n});\r\n```", "CLOSED", 0, "roninjin10", "2024-09-25T03:16:14Z", "2024-10-01T14:23:45Z", "2024-10-01T14:04:24Z", "ethereum-optimism/supersim", "2025-08-30 21:59:16"]
["I_kwDODjvEJM6Y5CRG", 12305, "Standard L2 Genesis: `SuperchainConfig` Upgrader Role", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket represents the addition of the `UPGRADER` role to the `SuperchainConfig`. Only the account set to this role is allowed to call the `OptimismPortal.upgrade` function which deposits as the `DEPOSITOR_ACCOUNT`, calling the L2 `ProxyAdmin`", "OPEN", 0, "tynes", "2024-10-03T22:16:33Z", "2024-10-03T22:16:33Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Y4-WU", 12304, "Standard L2 Genesis: `OptimismMintableERC721Factory` Modifications", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis updates the `OptimismMintableERC721Factory` to match the standard L2 genesis spec by removing network specific config from its storage and has it read it from `L1Block` instead.", "OPEN", 0, "tynes", "2024-10-03T22:01:39Z", "2024-10-03T22:02:37Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Y4-A_", 12303, "Standard L2 Genesis: L2 `ProxyAdmin`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket represents the work required to update the `ProxyAdmin` on L2 to match the spec for standard L2 genesis. This looks like making the owner of the `ProxyAdmin` be the `DEPOSITOR_ACCOUNT`", "OPEN", 0, "tynes", "2024-10-03T22:00:32Z", "2024-10-03T22:00:32Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Y49gN", 12301, "Standard L2 Genesis: `StandardBridge` Changes", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket represents the changes to the `StandardBridge` per the standard L2 genesis spec. What this looks like in practice is removing the base `StandardBridge` from being `initializable` and instead only making the `L1StandardBridge` `initializable`. The network specific config in the `L2StandardBridge` is fetched from the `L1Block` contract rather than its storage. Given the `L2StandardBridge` is no longer `initializable`, doing upgrades with hardfork based transactions becomes more simple", "OPEN", 0, "tynes", "2024-10-03T21:58:38Z", "2024-10-03T21:58:45Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Y49LT", 12300, "Standard L2 Genesis: `CrossDomainMessenger` Changes", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket represents the changes to the `CrossDomainMessenger` per the standard L2 genesis spec. What this looks like in practice is removing the base `CrossDomainMessenger` from being `initializable` and instead only making the `L1CrossDomainMessenger` `initializable`. The network specific config in the `L2CrossDomainMessenger` is fetched from the `L1Block` contract rather than its storage. Given the `L2CrossDomainMessenger` is no longer `initializable`, doing upgrades with hardfork based transactions becomes more simple", "OPEN", 0, "tynes", "2024-10-03T21:57:26Z", "2024-10-03T21:59:04Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Y47bW", 12299, "Standard L2 Genesis: `SystemConfig` Modifications", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket represents the modifications to the `SystemConfig` per the standard L2 genesis spec. This involves adding a `setConfig` function to the `SystemConfig` with higher level functions that wrap `setConfig` that are only callable by the chain operator.", "OPEN", 0, "tynes", "2024-10-03T21:51:09Z", "2024-10-03T21:51:09Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Y46TE", 12298, "Standard L2 Genesis: `OptimismPortal` Modifications", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket represents the modifications to the `OptimismPortal` per the standard L2 genesis spec. This involves updating the ABI such that it adds 2 new functions that can issue deposit transactions from the `DEPOSITOR_ACCOUNT`\r\n\r\n- `setConfig(uint8,bytes)`\r\n- `upgrade(uint256,bytes)`\r\n\r\nThe `setConfig` function can set chain specific config in the `L1Block` contract and MUST only be callable by the `SystemConfig`. The `upgrade` function can call the `L2ProxyAdmin` as the `DEPOSITOR_ACCOUNT` and MUST only be callable by the `SuperchainConfig` `UPGRADER` role.", "OPEN", 0, "tynes", "2024-10-03T21:47:17Z", "2024-10-03T21:47:17Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Y44Rw", 12296, "Standard L2 Genesis: Create Failure Mode Analysis", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket is complete when there is a full failure mode analysis document for the standard L2 genesis project that is written and reviewed by the security team.", "OPEN", 0, "tynes", "2024-10-03T21:40:44Z", "2024-10-03T21:40:44Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6YtRyE", 12254, "Make FaultDisputeGame constructor types more accurate for  'maxGameDepth'  and 'splitDepth'", "This issue was created based on the following discussion: https://github.com/ethereum-optimism/optimism/pull/12228#discussion_r1783449535 \r\n\r\n`maxGameDepth` should be `uint64` and `splitDepth` should be `uint32` and not `uint256`. ", "OPEN", 0, "blmalone", "2024-10-02T15:26:30Z", "2024-10-02T15:31:01Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Ys5eq", 12245, "Emulate syscalls for Linux/MIPS64", "64-bit syscall emulation is mostly done. All that's left is to define the 64-bit syscall table, and a couple tweaks to unify the supported syscalls of 32-bit and 64-bit MT-Cannon.", "CLOSED", 0, "Inphi", "2024-10-02T14:53:28Z", "2024-10-03T16:33:11Z", "2024-10-02T17:54:31Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Ys4cm", 12244, "Fix memory.go for the 64-bit VM", "`Memory` is currently broken on cannon64.", "CLOSED", 0, "Inphi", "2024-10-02T14:52:07Z", "2024-10-03T22:26:23Z", "2024-10-03T22:26:23Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6YPXbz", 12195, "MTCannon: Create load/store opcodes tests", "This is a sub task of the https://github.com/ethereum-optimism/optimism/issues/12032", "CLOSED", 0, "GrapeBaBa", "2024-09-28T11:01:45Z", "2024-10-02T14:57:30Z", "2024-10-02T14:57:30Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6YHJZ1", 12168, "op-node can't create genesis.json ", "op-node can't create genesis.json \r\nin Step 3 Generating L2 Genesis\r\nhttps://docs.optimism.io/builders/chain-operators/features/custom-gas-token\r\n\r\ngot error \r\nlvl=crit msg=\"Application failed\" message=\"failed to fetch startBlock from SystemConfig: failed to call startBlock: failed to fetch batch: execution reverted\"", "CLOSED", 0, "dome", "2024-09-27T05:09:54Z", "2024-10-06T14:11:42Z", "2024-09-27T12:48:34Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6YCSx6", 12146, "MT-Cannon: Support go1.22", "Ensure Go programs compiled by Go 1.22 are compatible with MT-Cannon. Compatibility includes syscall interface and ensuring that the go gc works as expected (see [alloc tests](https://github.com/ethereum-optimism/optimism/blob/develop/cannon/mipsevm/multithreaded/instrumented_test.go#L60)). \n\nNote: Early an implementation of MT-Cannon had issues with the Go 1.22 gc. Though this may no longer be the case.", "CLOSED", 0, "Inphi", "2024-09-26T14:17:08Z", "2024-10-03T16:33:05Z", "2024-09-30T22:32:54Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Xekzr", 12049, "cannon/op-program: Support building on go1.22", "if you build op-program using go 1.22 instead of go 1.21, it fails to run in cannon with:\r\n```\r\nruntime: unexpected error while checking standard file descriptor\r\nfatal error:\r\ncannot open standard fds\r\n```\r\n\r\nThis isn't a blocker currently because you need to build the exact same op-program as is used in our deployments and CI is using go 1.21 which works (you can build this locally with make reproducible-prestate).  But it does mean we're blocked from upgrading to go 1.22 until we fix it.\r\n\r\n\r\nThe problem function in go is:\r\n```\r\nfunc checkfds() {\r\n        if islibrary || isarchive {\r\n                // If the program is actually a library, presumably being consumed by\r\n                // another program, we don't want to mess around with the file\r\n                // descriptors.\r\n                return\r\n        }\r\n\r\n        const (\r\n                // F_GETFD, EBADF, O_RDWR are standard across all unixes we support, so\r\n                // we define them here rather than in each of the OS specific files.\r\n                F_GETFD = 0x01\r\n                EBADF   = 0x09\r\n                O_RDWR  = 0x02\r\n        )\r\n\r\n        devNull := []byte(\"/dev/null\\x00\")\r\n        for i := 0; i < 3; i++ {\r\n                ret, errno := fcntl(int32(i), F_GETFD, 0)\r\n                if ret >= 0 {\r\n                        continue\r\n                }\r\n\r\n                if errno != EBADF {\r\n                        print(\"runtime: unexpected error while checking standard file descriptor \", i, \", errno=\", errno, \"\\n\")\r\n                        throw(\"cannot open standard fds\")\r\n                }\r\n\r\n                if ret := open(&devNull[0], O_RDWR, 0); ret < 0 {\r\n                        print(\"runtime: standard file descriptor \", i, \" closed, unable to open /dev/null, errno=\", errno, \"\\n\")\r\n                        throw(\"cannot open standard fds\")\r\n                } else if ret != int32(i) {\r\n                        print(\"runtime: opened unexpected file descriptor \", ret, \" when attempting to open \", i, \"\\n\")\r\n                        throw(\"cannot open standard fds\")\r\n                }\r\n        }\r\n}\r\n```\r\n\r\nwhich seems to be checking the standard file descriptors (stdin, stdout and stderr) by calling `fcntl(I, F_GETFD, 0)` but cannon doesn't currently support `F_GETFD`, only `F_GETFL`.\r\n\r\nIt did work with the patch below, but we'd at minimum need to apply the same change to the solidity version, but we should also check it's actually a sensible implementation.  From [what I can tell](https://www.man7.org/linux/man-pages/man2/fcntl.2.html) `FD_CLOEXEC` is the only supported flag that can be returned so 0 seems like a sensible option.\r\n\r\n```\r\ndiff --git a/cannon/mipsevm/mips.go b/cannon/mipsevm/mips.go\r\nindex 95ab8d75d..d45647d71 100644\r\n--- a/cannon/mipsevm/mips.go\r\n+++ b/cannon/mipsevm/mips.go\r\n@@ -156,7 +156,15 @@ func (m *InstrumentedState) handleSyscall() error {\r\n \t\t}\r\n \tcase sysFcntl:\r\n \t\t// args: a0 = fd, a1 = cmd\r\n-\t\tif a1 == 3 { // F_GETFL: get file descriptor flags\r\n+\t\tif a1 == 1 { // F_GETFD: get file descriptor flags\r\n+\t\t\tswitch a0 {\r\n+\t\t\tcase fdStdin, fdStdout, fdStderr:\r\n+\t\t\t\tv0 = 0\r\n+\t\t\tdefault:\r\n+\t\t\t\tv0 = 0xFFffFFff\r\n+\t\t\t\tv1 = MipsEBADF\r\n+\t\t\t}\r\n+\t\t} else if a1 == 3 { // F_GETFL: get file status flags\r\n \t\t\tswitch a0 {\r\n \t\t\tcase fdStdin, fdPreimageRead, fdHintRead:\r\n \t\t\t\tv0 = 0 // O_RDONLY\r\n\r\n```", "CLOSED", 0, "ajsutton", "2024-09-23T01:05:21Z", "2024-10-04T22:46:36Z", "2024-10-04T22:46:35Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6W8Czy", 11960, "Sequencer: Derive L1 origin and attributes asynchronously", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThe sequencer synchronously determines the [next L1 origin](https://github.com/ethereum-optimism/optimism/blob/9179225da1e0b594686c16d5d8101fa7e03a013f/op-node/rollup/sequencing/sequencer.go#L490) and its associated [payload attributes](https://github.com/ethereum-optimism/optimism/blob/9179225da1e0b594686c16d5d8101fa7e03a013f/op-node/rollup/sequencing/sequencer.go#L509C30-L509C54) as part of the block production process even though this is not particularly time sensitive with a large max sequencer drift tolerance. This means that blocking L1 RPC calls may significantly slow down or prevent block production in the worst case, while still consuming some of the sequencer's block time (typically 2 seconds) even in the best case.\r\n\r\n**Describe the solution you'd like**\r\nThe L1 origin should be derived asynchronously and concurrently with respect to L2 block production, and this origin should only be selected if the payload attributes for this origin have also been derived.\r\n\r\nPractically speaking, we can attempt to derive both of these pairs of L1Origin and PayloadAttributes in parallel each time the fork choice is updated, and then select the \"best\" origin when we start building the next block. We will need to select the next origin if and only if the max sequencer drift has been exceeded. In all other cases, it should be fine to fall back to the existing origin in order to avoid delaying block production.\r\n\r\n**Describe alternatives you've considered**\r\nWe may wish to implement the L1Origin and PayloadAttributes generation as a single [Deriver](https://github.com/ethereum-optimism/optimism/pull/11099) or even two Deriver's (AttributesWIthNextOrigin and AttributesWithCurrentOrigin), or perform these concurrent derivations as a subroutine within the sequencer.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "OPEN", 0, "BrianBland", "2024-09-17T22:57:10Z", "2024-10-04T19:40:30Z", null, "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6UXtTV", 11609, "op-batcher: Assess da-type choice when submitting a channel", "## Context\r\n\r\nSince https://github.com/ethereum-optimism/optimism/pull/11219 the batcher can dynamically switch between calldata and blobs, depending on the economically best option _at the time of starting a new channel_. This works reasonably well for high-throughput chains, where the delay between starting and submitting a channel is usually only a few minutes. But it is still not optimal, as the most economical option might have changed since building up the channel. Furthermore, for low-throughput chains, this behavior is useless, as a da-type decision delay of multiple hours is ineffective. And lastly, the decision is currently made under the assumption that the channel will be full to its size limit. But the channel may not be full, e.g. using less frames (=blobs) with a half-empty last frame because of a short max-channel-duration setting that closed it (especially relevant on testnets).\r\n\r\n## Change Description\r\n\r\nTo address these shortcomings, the batcher should perform a second/the check at the time that it would start submitting a channel (i.e., when starting to post the first batcher transaction for that channel (almost always a channel fits into a single batcher transaction, unless the first block added to it doesn't fit into the `target-num-frames` frames)), and possibly rebuild the channel using different da-type settings.\r\n\r\nThe goal of this improvement is to always select the best da-type for a channel at the time of tx submission, and make the dynamic da-type selection feature useable for low-throughput chains.\r\n\r\n## Implementation Hints\r\n\r\nIt probably makes most sense to _move_ the channel config retrieval via the `ChannelConfigProvider` from the point at which a new channel is created (https://github.com/ethereum-optimism/optimism/blob/a36291dc345382094ba971ffd4cd5987e84b989f/op-batcher/batcher/channel_manager.go#L206) to the point at which the first frame of any channel is submitted (places where we return non-empty `txData` inside [`channelManager.TxData()`](https://github.com/ethereum-optimism/optimism/blob/a36291dc345382094ba971ffd4cd5987e84b989f/op-batcher/batcher/channel_manager.go#L152C10-L152C32)), and then reuse that config for the following channel. This has two advantages. \r\n1. This adds the check for the correct channel config at the point when submission happens. Most of the time this check will confirm the current configuration.\r\n2. The channel config of the previous channel is the best estimator for the correct channel config of the following channel, when the exact data content isn't known yet.\r\n\r\nNote that a special case is a fresh batcher restart, at which point an estimated configuration has to be retrieved once before the first channel. But this could happen in the batcher's initialization path.\r\n\r\n### Channel Rebuilding\r\n\r\nIf the check doesn't confirm the channel config that's currently in use, the channel should be rebuilt using the new config. One good option to accomplish this may be to reinsert the blocks into the L2 blocks queue inside the `channelManager`, so that the existing code path is then used to build the channel with the new channel config. This has the advantage that e.g. if switching from calldata to blobs, the channel would suddenly have more space, so it wouldn't be immediately submitted and just continue to fill up regularly.\r\n\r\n### `ChannelConfigProvider`\r\n\r\nIt's important to note that the current [`ChannelConfigProvider`](https://github.com/ethereum-optimism/optimism/blob/develop/op-batcher/batcher/channel_config_provider.go) has a single method to retrieve the next estimated channel config, and the implementation of the dynamic provider always assumes full channels. This is not optimal for the proposed change, as we will know the exact channel data at the point of submission, so we can make an exact fee calculation. To enable this, I suggest we add a second method to the `ChannelConfigProvider` to make its interface look similar to the following:\r\n```go\r\ntype ChannelConfigProvider interface {\r\n\tChannelConfigFull() ChannelConfig // note: renamed old method that estimates full channels, would be used only at startup\r\n\tChannelConfig(data []byte) ChannelConfig // new method, takes exact data\r\n}\r\n```\r\nThe new method can take as a parameter the exact data and use `core.IntrinsicGas` to exactly calculate the calldata gas in the dynamic provider, instead of this manual calculation:\r\nhttps://github.com/ethereum-optimism/optimism/blob/a36291dc345382094ba971ffd4cd5987e84b989f/op-batcher/batcher/channel_config_provider.go#L66-L68\r\n\r\nOtherwise, the existing cost comparison code at `DynamicEthChannelConfig.ChannelConfig()` should be as much reused between the two new methods as possible.\r\n\r\n### Channel Config Immutability\r\n\r\nOne important rule that should be observed is to not change the DA-type and channel configuration once the first frame of a channel started being submitted. This is important a) because otherwise we might end up trying to replace a transaction with a different tx type, which is not allowed and would get the batcher into a blocked tx recovery mode and b) in view of the upcoming Holocene features regarding [Strict Batch Ordering](https://github.com/ethereum-optimism/optimism/issues/11318) would invalidate future batcher transactions that might already be in the tx-pool because of parallel transaction sending.\r\n\r\nHardening the batcher's behavior during restarts should be done as a separate task, possibly introducing some form of persistence of in-flight transactions.", "CLOSED", 0, "sebastianst", "2024-08-27T12:39:28Z", "2024-10-02T17:41:08Z", "2024-09-25T13:40:45Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6TB0M5", 11485, "SuperchainERC20: Custom Implementation Factory", "", "CLOSED", 0, "skeletor-spaceman", "2024-08-14T19:59:45Z", "2024-10-01T14:59:22Z", "2024-10-01T14:59:21Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6RpLWY", 11321, "Holocene-D: Write Failure Mode Analysis", "", "CLOSED", 0, "sebastianst", "2024-08-01T21:25:10Z", "2024-10-03T11:32:40Z", "2024-10-03T11:32:39Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Mq8xB", 10912, "op-proposer: Check most recent proposal at startup", "When the proposer starts up, it just waits for the full configured proposal interval before sending its first proposal. However, this means that the actual interval between proposals will be longer in general, because the time that has passed since the last proposal before the restart occurred is added to the total interval.\r\n\r\nWe can check the DGF at startup for the submission time of the latest proposal at startup to shorten the initial interval accordingly. This is similar to how the batcher at startup now queries the sync status and uses the latest safe head's L1 origin timestamp as starting point for the next channel's max. duration.\r\n\r\nFrom a conversation with @ajsutton \r\n> https://github.com/ethereum-optimism/optimism/blob/5a829ce756c1616137999217fc67546bfa15c5d5/op-challenger/game/fault/contracts/gamefactory.go#L88 is the method I had in mind.  Those contracts are currently in `op-challenger` which we probably don't want a direct dependency from `op-program` on, though it wouldn't be a problem necessarily, just a bit ick.  The contracts are already shared by `op-challenger` and `op-dispute-mon` so pulling them out to a shared module would be quite reasonable. I just haven't done it yet because I'm not sure where it should live or what it should be called - I don't think it should be in `op-service` because its far too fault proof specific.\r\n\r\nThe idea behind the above is that we can query `GetGamesAtOrAfter` at startup for the configured interval and take the latest game into account to calculate the duration until submitting the next proposal. If the returned list is empty, we can propose immediately.\r\n\r\nI think it's not very urgent, but a fine improvement to make to guarantee more steady proposal intervals.", "CLOSED", 0, "sebastianst", "2024-06-12T13:41:40Z", "2024-10-04T00:22:01Z", "2024-10-04T00:22:01Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM6Jegyv", 10592, "[Tracker] Release: Upgrade #10", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis ticket is meant to operate as a changelog for tracking modifications to smart contracts so that it is easier to create releases. There should be a section for each contract and a table that includes the PR that modifies the contract, the version the contract is updated to as well as a small description of the change.\r\n\r\n## Contract Versions\r\n\r\nThese are the versions of contracts that will be included as part of the release.\r\n\r\n| Name       | Version        |\r\n|------------|------------|\r\n| `SystemConfig` | `2.3.0` |\r\n| `OptimismPortal` | `2.8.1` |\r\n| `L1ERC721Bridge` | `2.1.1` |\r\n\r\n\r\n## SystemConfig\r\n\r\n| PR       | Version        | Description         |\r\n|------------|------------|--------------------|\r\n| https://github.com/ethereum-optimism/optimism/pull/10226    | `2.3.0-beta.1`         | Clean Ecotone API           |\r\n\r\n## OptimismPortal\r\n\r\n| PR       | Version        | Description         |\r\n|------------|------------|--------------------|\r\n| https://github.com/ethereum-optimism/optimism/pull/10585   | `2.8.1-beta.1`         | Overridable `version()`          |\r\n\r\n## L1ERC721Bridge\r\n\r\n| PR       | Version        | Description         |\r\n|------------|------------|--------------------|\r\n| https://github.com/ethereum-optimism/optimism/pull/10755   | `2.1.1-beta.1`         | Minor type fix          |", "CLOSED", 0, "tynes", "2024-05-20T17:54:44Z", "2024-10-01T22:41:18Z", "2024-10-01T22:41:18Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDODjvEJM59vYLE", 9274, "Failed to fetch L1 block info and receipts endlessly when get null from eth_getBlockReceipts API once", "**Describe the bug**\r\nI am now wrapping several nodes into one L1 endpoint to ensure the high availability,  in this situation the request will be handled by any node in this pool. Sometimes i found the op-node will stop working and print this over and over again:\r\n**failed to fetch L1 block info and receipts: invalid receipts: got 0 receipts but expected 68**\r\nI think it's because some of the nodes in the pool have not synchronized the newest block. But, it will not recover even if all of the nodes have already synced the block. After troubleshoot I think it is because the cache mechanism of FetchReceipts:\r\n\r\n\r\n\tfunc (p *CachingReceiptsProvider) FetchReceipts(ctx context.Context, block eth.BlockID, txHashes []common.Hash) (types.Receipts, error) {\r\n\tif r, ok := p.cache.Get(block.Hash); ok {\r\n\t\treturn r, nil\r\n\t}\r\n\r\n\tmu := p.getOrCreateFetchingLock(block.Hash)\r\n\tmu.Lock()\r\n\tdefer mu.Unlock()\r\n\t// Other routine might have fetched in the meantime\r\n\tif r, ok := p.cache.Get(block.Hash); ok {\r\n\t\t// we might have created a new lock above while the old\r\n\t\t// fetching job completed.\r\n\t\tp.deleteFetchingLock(block.Hash)\r\n\t\treturn r, nil\r\n\t}\r\n\r\n\tr, err := p.inner.FetchReceipts(ctx, block, txHashes)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tp.cache.Add(block.Hash, r)\r\n\t// result now in cache, can delete fetching lock\r\n\tp.deleteFetchingLock(block.Hash)\r\n\treturn r, nil\r\n\r\n\r\nThe response should not be put into cache if the length of receipts is 0, because we don't know if it's real response or it's beacuse the block has not arrived.\r\nCurrently I can only fix this by restart the op-node.", "CLOSED", 0, "LilkkJerry", "2024-01-31T08:40:21Z", "2024-10-06T23:30:15Z", "2024-02-20T23:25:26Z", "ethereum-optimism/optimism", "2025-08-30 22:00:33"]
["I_kwDOKIwiaM6ZwFI-", 977, "[TUTORIAL] Add PR title", "", "CLOSED", 0, "Marzena590", "2024-10-10T18:11:52Z", "2024-10-10T18:55:43Z", "2024-10-10T18:55:43Z", "ethereum-optimism/docs", "2025-08-30 22:01:09"]
["I_kwDOKIwiaM6Y2CLq", 954, "Need for Multilingual Support", "Expanding the Optimism documentation to include multiple languages would significantly enhance accessibility, fostering inclusivity within the global developer community. This effort would lower language barriers, encourage diverse participation, and facilitate the adoption of Optimism in regions with growing blockchain interest, ultimately driving wider usage and innovation.", "CLOSED", 0, "Samykoke09", "2024-10-03T15:03:56Z", "2024-10-08T16:12:31Z", "2024-10-08T16:12:31Z", "ethereum-optimism/docs", "2025-08-30 22:01:09"]
["I_kwDOKIwiaM6Y13aG", 951, "Streamline Developer Setup Guide", "Description:Revise the setup guide to ensure that new developers can get started easily. Add clearer steps, troubleshoot common issues, and update outdated information.  \n\n - Revamp installation steps for dependencies.\n - Provide troubleshooting tips for common errors.", "CLOSED", 0, "Samykoke09", "2024-10-03T14:46:36Z", "2024-10-08T16:11:51Z", "2024-10-08T16:11:50Z", "ethereum-optimism/docs", "2025-08-30 22:01:09"]
["I_kwDOKIwiaM6YdrlZ", 941, "2024-09-01..2024-09-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 5 days, 15:04:29 | 5 days, 23:43:39 | 10 days, 1:46:30 |\n| Time to close | 30 days, 8:43:11 | 7 days, 20:08:35 | 102 days, 6:05:22 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 16 |\n| Total number of items created | 16 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [DOCS] Remove \"Paymaster\" from #cross-chain-message diagram | https://github.com/ethereum-optimism/docs/issues/923 | [zainbacchus](https://github.com/zainbacchus) | None | 23:19:11 | None |\n| [TUTORIAL] Alternate snippets for the Bridging ETH to OP Mainnet With the Optimism SDK Tutorial using Viem | https://github.com/ethereum-optimism/docs/issues/904 | [brokewhale](https://github.com/brokewhale) | None | 7 days, 23:24:58 | None |\n| Update network upgrade page with granite HF | https://github.com/ethereum-optimism/docs/issues/898 | [cpengilly](https://github.com/cpengilly) | None | 3:17:38 | None |\n| Update the smart contract release page for `op-contracts/v1.6.0` | https://github.com/ethereum-optimism/docs/issues/887 | [sbvegan](https://github.com/sbvegan) | None | 7 days, 3:53:28 | None |\n| Fix broken links | https://github.com/ethereum-optimism/docs/issues/883 | [krofax](https://github.com/krofax) | None | 2 days, 6:13:27 | None |\n| [DOCS] Action Items for Plasma to Alt-da Renaming | https://github.com/ethereum-optimism/docs/issues/882 | [brokewhale](https://github.com/brokewhale) | None | 2 days, 8:00:05 | None |\n| Migrating tutorials with sdk-optimism to viem-opstack | https://github.com/ethereum-optimism/docs/issues/881 | [krofax](https://github.com/krofax) | None | 1:46:38 | None |\n| Creating Your Own L2 Rollup Testnet: Cannot start op-proposer | https://github.com/ethereum-optimism/docs/issues/880 | [bwakabats](https://github.com/bwakabats) | 23:38:02 | 2 days, 4:11:36 | None |\n| 2024-08-01..2024-08-31 metrics report for opened issues | https://github.com/ethereum-optimism/docs/issues/877 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 11 days, 23:36:04 | None |\n| [TUTORIAL] Creating Your Own L2 Rollup Testnet Deploy the L1 contracts | https://github.com/ethereum-optimism/docs/issues/867 | [fuku-j](https://github.com/fuku-j) | 7 days, 16:52:12 | 7 days, 16:52:12 | None |\n| [FAQ] Delegation | https://github.com/ethereum-optimism/docs/issues/852 | [offt0theether](https://github.com/offt0theether) | None | 13 days, 23:34:43 | None |\n| [ERROR] Tutorials\uff1aCreating Your Own L2 Rollup Testnet   issue | https://github.com/ethereum-optimism/docs/issues/849 | [opfocus](https://github.com/opfocus) | 12 days, 22:21:21 | 12 days, 22:21:45 | None |\n| [TUTORIAL] Problem in the Build the Source Code section in create op rollup tutorial | https://github.com/ethereum-optimism/docs/issues/846 | [Hazem-dh](https://github.com/Hazem-dh) | 19:42:03 | 12 days, 18:45:51 | None |\n| Forced Withdrawal for OP stack rollup | https://github.com/ethereum-optimism/docs/issues/840 | [krofax](https://github.com/krofax) | 5 days, 23:43:39 | 36 days, 3:48:07 | None |\n| [TUTORIAL] Improve L2 Testnet Tutorial | https://github.com/ethereum-optimism/docs/issues/627 | [sbvegan](https://github.com/sbvegan) | 8 days, 4:03:16 | 168 days, 8:22:36 | None |\n| [TUTORIAL] Docs tutorials out of sync on/after v1.7.0 | https://github.com/ethereum-optimism/docs/issues/549 | [astro44](https://github.com/astro44) | 2 days, 19:10:51 | 198 days, 20:02:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-09-01..2024-09-30 -reason:\"not planned\" -label:monthly-report`\n", "CLOSED", 0, "github-actions", "2024-10-01T00:29:57Z", "2024-10-08T23:05:46Z", "2024-10-08T23:05:45Z", "ethereum-optimism/docs", "2025-08-30 22:01:09"]
["I_kwDOKIwiaM6Ydrjc", 940, "2024-09-01..2024-09-30 metrics report for opened issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 12:53:50 | 12:53:50 | 21:29:12 |\n| Time to close | 3 days, 21:31:27 | 2 days, 6:13:27 | 8 days, 18:39:11 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 8 |\n| Number of items closed | 9 |\n| Total number of items created | 17 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Feedback for \u201cNetwork Upgrades\u201d [Add Bedrock Date?] | https://github.com/ethereum-optimism/docs/issues/927 | [MSilb7](https://github.com/MSilb7) | 2:09:37 | None | None |\n| [DOCS] Remove \"Paymaster\" from #cross-chain-message diagram | https://github.com/ethereum-optimism/docs/issues/923 | [zainbacchus](https://github.com/zainbacchus) | None | 23:19:11 | None |\n| [2024 Q4 Audit] builders/chain-operators/configuration/rollup.mdx | https://github.com/ethereum-optimism/docs/issues/922 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| [2024 Q4 Audit] builders/chain-operators/configuration/proposer.mdx | https://github.com/ethereum-optimism/docs/issues/921 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| [2024 Q4 Audit] builders/chain-operators/configuration/batcher.mdx | https://github.com/ethereum-optimism/docs/issues/920 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| [2024 Q4 Audit] builders/chain-operators/configuration/overview.md | https://github.com/ethereum-optimism/docs/issues/919 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| [2024 Q4 Audit] builders/chain-operators/architecture.mdx | https://github.com/ethereum-optimism/docs/issues/918 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| [2024 Q4 Audit] builders/chain-operators/tutorials/create-l2-rollup.mdx | https://github.com/ethereum-optimism/docs/issues/917 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| [TUTORIAL] Alternate snippets for the Bridging ETH to OP Mainnet With the Optimism SDK Tutorial using Viem | https://github.com/ethereum-optimism/docs/issues/904 | [brokewhale](https://github.com/brokewhale) | None | 7 days, 23:24:58 | None |\n| Update network upgrade page with granite HF | https://github.com/ethereum-optimism/docs/issues/898 | [cpengilly](https://github.com/cpengilly) | None | 3:17:38 | None |\n| Update the smart contract release page for `op-contracts/v1.6.0` | https://github.com/ethereum-optimism/docs/issues/887 | [sbvegan](https://github.com/sbvegan) | None | 7 days, 3:53:28 | None |\n| [RPC PROVIDER] Add PR title | https://github.com/ethereum-optimism/docs/issues/885 | [JoGetBlock](https://github.com/JoGetBlock) | None | None | None |\n| Fix broken links | https://github.com/ethereum-optimism/docs/issues/883 | [krofax](https://github.com/krofax) | None | 2 days, 6:13:27 | None |\n| [DOCS] Action Items for Plasma to Alt-da Renaming | https://github.com/ethereum-optimism/docs/issues/882 | [brokewhale](https://github.com/brokewhale) | None | 2 days, 8:00:05 | None |\n| Migrating tutorials with sdk-optimism to viem-opstack | https://github.com/ethereum-optimism/docs/issues/881 | [krofax](https://github.com/krofax) | None | 1:46:38 | None |\n| Creating Your Own L2 Rollup Testnet: Cannot start op-proposer | https://github.com/ethereum-optimism/docs/issues/880 | [bwakabats](https://github.com/bwakabats) | 23:38:02 | 2 days, 4:11:36 | None |\n| 2024-08-01..2024-08-31 metrics report for opened issues | https://github.com/ethereum-optimism/docs/issues/877 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 11 days, 23:36:04 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue created:2024-09-01..2024-09-30 -reason:\"not planned\" -label:monthly-report`\n", "CLOSED", 0, "github-actions", "2024-10-01T00:29:51Z", "2024-10-08T23:05:45Z", "2024-10-08T23:05:45Z", "ethereum-optimism/docs", "2025-08-30 22:01:09"]
["I_kwDOKIwiaM6YdopE", 939, "2024-09-01..2024-09-30 metrics report for closed prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 4 days, 14:29:32 | 3:00:16 | 9 days, 4:10:17 |\n| Time to close | 2 days, 15:01:31 | 8:17:16 | 6 days, 8:58:14 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 41 |\n| Total number of items created | 41 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| removing issue templates | https://github.com/ethereum-optimism/docs/pull/937 | [sbvegan](https://github.com/sbvegan) | 0:38:40 | 0:43:24 | None |\n| Update to correct security council threshold | https://github.com/ethereum-optimism/docs/pull/935 | [bradleycamacho](https://github.com/bradleycamacho) | 0:21:21 | 5:10:37 | None |\n| Update cross-chain-message.mdx | https://github.com/ethereum-optimism/docs/pull/932 | [zainbacchus](https://github.com/zainbacchus) | 0:03:45 | 0:14:32 | None |\n| Add ETH and ERC-20 transfer clarification | https://github.com/ethereum-optimism/docs/pull/930 | [bradleycamacho](https://github.com/bradleycamacho) | 1:07:08 | 1:07:17 | None |\n| Fix contract addresses | https://github.com/ethereum-optimism/docs/pull/929 | [squdgy](https://github.com/squdgy) | None | None | None |\n| Change from fixed to static | https://github.com/ethereum-optimism/docs/pull/926 | [bradleycamacho](https://github.com/bradleycamacho) | 13:56:48 | 15:00:56 | None |\n| Make callouts fixed instead of sticky | https://github.com/ethereum-optimism/docs/pull/925 | [bradleycamacho](https://github.com/bradleycamacho) | 0:00:44 | 0:06:54 | None |\n| Update cross-chain-messaging image | https://github.com/ethereum-optimism/docs/pull/924 | [bradleycamacho](https://github.com/bradleycamacho) | 18:32:08 | 22:52:29 | None |\n| adding the content eval back | https://github.com/ethereum-optimism/docs/pull/916 | [sbvegan](https://github.com/sbvegan) | 0:32:54 | 0:35:07 | None |\n| Update json-rpc.mdx | https://github.com/ethereum-optimism/docs/pull/915 | [sbvegan](https://github.com/sbvegan) | 0:24:48 | 19:14:24 | None |\n| Remove broken snapshot links | https://github.com/ethereum-optimism/docs/pull/911 | [bradleycamacho](https://github.com/bradleycamacho) | 15:55:27 | 15:55:39 | None |\n| Update CODEOWNERS | https://github.com/ethereum-optimism/docs/pull/910 | [cpengilly](https://github.com/cpengilly) | 0:08:50 | 8:17:16 | None |\n| fixing formatting issues.mdx | https://github.com/ethereum-optimism/docs/pull/909 | [C-Emily-Furlong](https://github.com/C-Emily-Furlong) | 1:29:34 | 1:43:43 | None |\n| Update explainer.mdx | https://github.com/ethereum-optimism/docs/pull/907 | [zainbacchus](https://github.com/zainbacchus) | 0:07:36 | 0:07:43 | None |\n| docs: Update README | https://github.com/ethereum-optimism/docs/pull/905 | [Olexandr88](https://github.com/Olexandr88) | 8 days, 1:23:56 | 8 days, 1:24:04 | None |\n| Add Allnodes snapshots | https://github.com/ethereum-optimism/docs/pull/903 | [3eph1r0th](https://github.com/3eph1r0th) | 22:15:44 | 3 days, 1:51:52 | None |\n| Add Geth freezer feature callout for storage optimization | https://github.com/ethereum-optimism/docs/pull/902 | [hash1go](https://github.com/hash1go) | 23:50:02 | 23:50:39 | None |\n| Update create-l2-rollup.mdx | https://github.com/ethereum-optimism/docs/pull/901 | [cpengilly](https://github.com/cpengilly) | 0:01:59 | 0:07:07 | None |\n| altda: soften beta warning wording | https://github.com/ethereum-optimism/docs/pull/900 | [bitwiseguy](https://github.com/bitwiseguy) | 1:31:07 | 1:31:13 | None |\n| making updates after the granite activation | https://github.com/ethereum-optimism/docs/pull/899 | [sbvegan](https://github.com/sbvegan) | 0:48:03 | 2:14:13 | None |\n| feat: add superchain contract address table | https://github.com/ethereum-optimism/docs/pull/897 | [smartcontracts](https://github.com/smartcontracts) | 0:01:47 | 0:41:46 | None |\n| Added link and pointers to use Superchain Faucet to get the required fund for spinning up an OP Stack testnet chain | https://github.com/ethereum-optimism/docs/pull/896 | [nickbalestra](https://github.com/nickbalestra) | 1:42:22 | 1:42:32 | None |\n| contracts: update standard version to v1.6.0, CGT to v2.0.0-beta.3 | https://github.com/ethereum-optimism/docs/pull/895 | [bitwiseguy](https://github.com/bitwiseguy) | 0:35:04 | 2:08:38 | None |\n| [DO NOT MERGE] Update brand assets | https://github.com/ethereum-optimism/docs/pull/894 | [jvmi7](https://github.com/jvmi7) | None | None | None |\n| formatting the page header thing | https://github.com/ethereum-optimism/docs/pull/893 | [sbvegan](https://github.com/sbvegan) | 1 day, 5:26:13 | 1 day, 6:51:13 | None |\n| updated callout info | https://github.com/ethereum-optimism/docs/pull/892 | [brokewhale](https://github.com/brokewhale) | 0:09:40 | 0:09:50 | None |\n| adding audit template | https://github.com/ethereum-optimism/docs/pull/891 | [sbvegan](https://github.com/sbvegan) | 0:40:58 | 1 day, 0:03:14 | None |\n| Add Granite to network upgrades page. | https://github.com/ethereum-optimism/docs/pull/890 | [pauldowman](https://github.com/pauldowman) | 7:22:25 | 17:58:40 | None |\n| updating notice to have info on breaking changes | https://github.com/ethereum-optimism/docs/pull/889 | [sbvegan](https://github.com/sbvegan) | 0:14:43 | 0:24:04 | None |\n| docs: fjord upgrade completed. | https://github.com/ethereum-optimism/docs/pull/888 | [blmalone](https://github.com/blmalone) | 3:00:16 | 3:20:14 | None |\n| Rename Plasma to Alt-da, Add Breaking Changes | https://github.com/ethereum-optimism/docs/pull/886 | [krofax](https://github.com/krofax) | 14:19:07 | 1 day, 5:08:05 | None |\n| fix broken links | https://github.com/ethereum-optimism/docs/pull/884 | [krofax](https://github.com/krofax) | 1 day, 9:21:12 | 1 day, 9:21:18 | None |\n| updating the day from tu to wed | https://github.com/ethereum-optimism/docs/pull/879 | [sbvegan](https://github.com/sbvegan) | 11:10:04 | 16:13:42 | None |\n| Add new voting badge schema.mdx | https://github.com/ethereum-optimism/docs/pull/873 | [C-Emily-Furlong](https://github.com/C-Emily-Furlong) | 3 days, 20:19:22 | 3 days, 20:19:29 | None |\n| Added force withdrawal guide | https://github.com/ethereum-optimism/docs/pull/872 | [krofax](https://github.com/krofax) | 11:19:23 | 27 days, 11:04:54 | None |\n| added a glosary term | https://github.com/ethereum-optimism/docs/pull/871 | [krofax](https://github.com/krofax) | 8 days, 1:24:32 | 8 days, 1:24:37 | None |\n| Migrate pnpm to just | https://github.com/ethereum-optimism/docs/pull/850 | [krofax](https://github.com/krofax) | 13 days, 15:13:19 | None | None |\n| Remove deployment rebate | https://github.com/ethereum-optimism/docs/pull/822 | [nitaliano](https://github.com/nitaliano) | 29 days, 18:51:28 | 29 days, 18:51:51 | None |\n| added docs for the graph | https://github.com/ethereum-optimism/docs/pull/761 | [alinobrasil](https://github.com/alinobrasil) | 84 days, 2:00:40 | None | None |\n| feat: add superchain-registry | https://github.com/ethereum-optimism/docs/pull/699 | [estheroche](https://github.com/estheroche) | 22 days, 4:27:12 | None | None |\n| Rollup tutorial | https://github.com/ethereum-optimism/docs/pull/657 | [sbvegan](https://github.com/sbvegan) | 22:21:20 | None | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr closed:2024-09-01..2024-09-30`\n", "CLOSED", 0, "github-actions", "2024-10-01T00:17:57Z", "2024-10-08T23:05:45Z", "2024-10-08T23:05:45Z", "ethereum-optimism/docs", "2025-08-30 22:01:09"]
["I_kwDOKIwiaM6YdoZg", 938, "2024-09-01..2024-09-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 1 day, 0:32:45 | 1:31:07 | 4 days, 6:53:31 |\n| Time to close | 17:37:10 | 3:20:14 | 1 day, 6:51:13 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 9 |\n| Number of items closed | 33 |\n| Total number of items created | 42 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| removing issue templates | https://github.com/ethereum-optimism/docs/pull/937 | [sbvegan](https://github.com/sbvegan) | 0:38:40 | 0:43:24 | None |\n| Updated Triggering OP Mainnet Transactions Tutorial | https://github.com/ethereum-optimism/docs/pull/936 | [krofax](https://github.com/krofax) | None | None | None |\n| Update to correct security council threshold | https://github.com/ethereum-optimism/docs/pull/935 | [bradleycamacho](https://github.com/bradleycamacho) | 0:21:21 | 5:10:37 | None |\n| op-deployer + opcm documentation | https://github.com/ethereum-optimism/docs/pull/934 | [sbvegan](https://github.com/sbvegan) | 1:40:37 | None | None |\n| feat: added close callout btn | https://github.com/ethereum-optimism/docs/pull/933 | [brokewhale](https://github.com/brokewhale) | 0:07:04 | None | None |\n| Update cross-chain-message.mdx | https://github.com/ethereum-optimism/docs/pull/932 | [zainbacchus](https://github.com/zainbacchus) | 0:03:45 | 0:14:32 | None |\n| Embed calculator | https://github.com/ethereum-optimism/docs/pull/931 | [blahkheart](https://github.com/blahkheart) | 3 days, 22:16:09 | None | None |\n| Add ETH and ERC-20 transfer clarification | https://github.com/ethereum-optimism/docs/pull/930 | [bradleycamacho](https://github.com/bradleycamacho) | 1:07:08 | 1:07:17 | None |\n| Fix contract addresses | https://github.com/ethereum-optimism/docs/pull/929 | [squdgy](https://github.com/squdgy) | None | None | None |\n| Added banner and notice page for SDK deprecation | https://github.com/ethereum-optimism/docs/pull/928 | [krofax](https://github.com/krofax) | None | None | None |\n| Change from fixed to static | https://github.com/ethereum-optimism/docs/pull/926 | [bradleycamacho](https://github.com/bradleycamacho) | 13:56:48 | 15:00:56 | None |\n| Make callouts fixed instead of sticky | https://github.com/ethereum-optimism/docs/pull/925 | [bradleycamacho](https://github.com/bradleycamacho) | 0:00:44 | 0:06:54 | None |\n| Update cross-chain-messaging image | https://github.com/ethereum-optimism/docs/pull/924 | [bradleycamacho](https://github.com/bradleycamacho) | 18:32:08 | 22:52:29 | None |\n| adding the content eval back | https://github.com/ethereum-optimism/docs/pull/916 | [sbvegan](https://github.com/sbvegan) | 0:32:54 | 0:35:07 | None |\n| Update json-rpc.mdx | https://github.com/ethereum-optimism/docs/pull/915 | [sbvegan](https://github.com/sbvegan) | 0:24:48 | 19:14:24 | None |\n| Add tutorial for devnet | https://github.com/ethereum-optimism/docs/pull/914 | [mslipper](https://github.com/mslipper) | 4 days, 19:49:35 | None | None |\n| Estimate cost tut | https://github.com/ethereum-optimism/docs/pull/913 | [krofax](https://github.com/krofax) | None | None | None |\n| Add block numbers of network upgrades | https://github.com/ethereum-optimism/docs/pull/912 | [fvictorio](https://github.com/fvictorio) | 7 days, 2:50:46 | None | None |\n| Remove broken snapshot links | https://github.com/ethereum-optimism/docs/pull/911 | [bradleycamacho](https://github.com/bradleycamacho) | 15:55:27 | 15:55:39 | None |\n| Update CODEOWNERS | https://github.com/ethereum-optimism/docs/pull/910 | [cpengilly](https://github.com/cpengilly) | 0:08:50 | 8:17:16 | None |\n| fixing formatting issues.mdx | https://github.com/ethereum-optimism/docs/pull/909 | [C-Emily-Furlong](https://github.com/C-Emily-Furlong) | 1:29:34 | 1:43:43 | None |\n| Update explainer.mdx | https://github.com/ethereum-optimism/docs/pull/907 | [zainbacchus](https://github.com/zainbacchus) | 0:07:36 | 0:07:43 | None |\n| Bridging ETH to OP Mainnet With Viem | https://github.com/ethereum-optimism/docs/pull/906 | [krofax](https://github.com/krofax) | 5 days, 8:12:52 | None | None |\n| docs: Update README | https://github.com/ethereum-optimism/docs/pull/905 | [Olexandr88](https://github.com/Olexandr88) | 8 days, 1:23:56 | 8 days, 1:24:04 | None |\n| Add Allnodes snapshots | https://github.com/ethereum-optimism/docs/pull/903 | [3eph1r0th](https://github.com/3eph1r0th) | 22:15:44 | 3 days, 1:51:52 | None |\n| Add Geth freezer feature callout for storage optimization | https://github.com/ethereum-optimism/docs/pull/902 | [hash1go](https://github.com/hash1go) | 23:50:02 | 23:50:39 | None |\n| Update create-l2-rollup.mdx | https://github.com/ethereum-optimism/docs/pull/901 | [cpengilly](https://github.com/cpengilly) | 0:01:59 | 0:07:07 | None |\n| altda: soften beta warning wording | https://github.com/ethereum-optimism/docs/pull/900 | [bitwiseguy](https://github.com/bitwiseguy) | 1:31:07 | 1:31:13 | None |\n| making updates after the granite activation | https://github.com/ethereum-optimism/docs/pull/899 | [sbvegan](https://github.com/sbvegan) | 0:48:03 | 2:14:13 | None |\n| feat: add superchain contract address table | https://github.com/ethereum-optimism/docs/pull/897 | [smartcontracts](https://github.com/smartcontracts) | 0:01:47 | 0:41:46 | None |\n| Added link and pointers to use Superchain Faucet to get the required fund for spinning up an OP Stack testnet chain | https://github.com/ethereum-optimism/docs/pull/896 | [nickbalestra](https://github.com/nickbalestra) | 1:42:22 | 1:42:32 | None |\n| contracts: update standard version to v1.6.0, CGT to v2.0.0-beta.3 | https://github.com/ethereum-optimism/docs/pull/895 | [bitwiseguy](https://github.com/bitwiseguy) | 0:35:04 | 2:08:38 | None |\n| [DO NOT MERGE] Update brand assets | https://github.com/ethereum-optimism/docs/pull/894 | [jvmi7](https://github.com/jvmi7) | None | None | None |\n| formatting the page header thing | https://github.com/ethereum-optimism/docs/pull/893 | [sbvegan](https://github.com/sbvegan) | 1 day, 5:26:13 | 1 day, 6:51:13 | None |\n| updated callout info | https://github.com/ethereum-optimism/docs/pull/892 | [brokewhale](https://github.com/brokewhale) | 0:09:40 | 0:09:50 | None |\n| adding audit template | https://github.com/ethereum-optimism/docs/pull/891 | [sbvegan](https://github.com/sbvegan) | 0:40:58 | 1 day, 0:03:14 | None |\n| Add Granite to network upgrades page. | https://github.com/ethereum-optimism/docs/pull/890 | [pauldowman](https://github.com/pauldowman) | 7:22:25 | 17:58:40 | None |\n| updating notice to have info on breaking changes | https://github.com/ethereum-optimism/docs/pull/889 | [sbvegan](https://github.com/sbvegan) | 0:14:43 | 0:24:04 | None |\n| docs: fjord upgrade completed. | https://github.com/ethereum-optimism/docs/pull/888 | [blmalone](https://github.com/blmalone) | 3:00:16 | 3:20:14 | None |\n| Rename Plasma to Alt-da, Add Breaking Changes | https://github.com/ethereum-optimism/docs/pull/886 | [krofax](https://github.com/krofax) | 14:19:07 | 1 day, 5:08:05 | None |\n| fix broken links | https://github.com/ethereum-optimism/docs/pull/884 | [krofax](https://github.com/krofax) | 1 day, 9:21:12 | 1 day, 9:21:18 | None |\n| updating the day from tu to wed | https://github.com/ethereum-optimism/docs/pull/879 | [sbvegan](https://github.com/sbvegan) | 11:10:04 | 16:13:42 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2024-09-01..2024-09-30`\n", "CLOSED", 0, "github-actions", "2024-10-01T00:17:00Z", "2024-10-08T23:05:44Z", "2024-10-08T23:05:44Z", "ethereum-optimism/docs", "2025-08-30 22:01:09"]
["I_kwDOLB-lzc591Zx5", 18, "OP Stack Protocol Version timeline needs to be updated now gov has approved Canyon + Delta", "https://github.com/ethereum-optimism/specs/blob/main/specs/superchain-upgrades.md#op-stack-protocol-versions needs to be updated because the governance proposals have been passed and Canyon is live on OP Mainnet.", "CLOSED", 0, "sbvegan", "2024-01-31T23:18:26Z", "2024-10-11T22:37:40Z", "2024-10-11T22:37:40Z", "ethereum-optimism/specs", "2025-08-30 22:01:09"]
["I_kwDOKIsnqM6kRbAT", 436, "[FPS] Remove etch from proposal simulation", "Currently a multisig proposal is simulated by etching multicall bytecode to the safe address. This way the resulting simulation doesn't increment the safe nonce. Remove etch and simulate proposal such that safe nonce is incremented.", "CLOSED", 0, "prat-gpt", "2024-12-23T13:00:47Z", "2025-09-24T19:55:27Z", "2025-09-24T19:55:21Z", "ethereum-optimism/superchain-ops", "2025-08-30 22:55:45"]
["I_kwDOLB-lzc6A2Nmv", 73, "Research Area: L1 Fee Abstraction", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nRight now, the L1 portion of the fee is defined in native code. With various hardforks, the fee calculations are changed. This adds tech debt to the state transition function as there becomes more branching logic depending on the currently active chain spec. For example, ecotone introduces a new fee formula and fjord may introduce a new fee formula. This means that every op stack execution client needs to support this branching logic.\r\n\r\nIt is possible to use EVM bytecode instead to define the L1 portion of the fee. A solidity interface could be defined that accepts the RLP encoded transaction and potentially some other data and it is expected to return a `uint256` that represents the L1 fee or the L1 gas used. This would remove altering the fee logic from being a hardfork and increase the social scalability of fee logic discussions as any team working on the OP Stack can choose to use their own fee formulas that work best for them. There should be some standard EVM bytecode that comes with the OP Stack that can do a good job of this fee charging so that teams don't need to think about this problem unless they really want to.\r\n\r\nThere are some performance considerations of this approach. Benchmarking is required to learn how much of an impact this would have on syncing. Spinning up an EVM instance to do this calculation will always be slower than running the calculation in native code. It is likely that it should be a `STATICCALL` context, ie no writing of state because that could result in some strange side effects. The only application of writing state would be to write the L1 fee to transient storage such that smart contracts would be able to access the value only during the execution of the particular transaction, this could be useful for meta tx relaying.\r\n\r\nAnother concern is how the L1 portion of the fee isn't committed to by the user's signature. There may have been some work done to attempt to standardize a \"multidimensional fee transaction for L2s\" that could help with this problem. If the smart contract can be swapped very quickly, then it may be possible for the network to overcharge end users for their L1 fee because they cannot express a \"max amount of L1 fee\" they are willing to pay. It is possible that this logic could exist in the smart contract doing the L1 fee charging itself, this could work well with smart contract wallets. This is already an issue for what its worth, as the chain operator can bump the L1 fee params in the `SystemConfig` arbitrarily. ", "OPEN", 0, "tynes", "2024-02-29T16:51:41Z", "2024-12-27T03:45:44Z", null, "ethereum-optimism/specs", "2025-08-30 22:55:46"]
["I_kwDODjvEJM6jyN4a", 13463, "Syncing op-node from Erigon3 L1 node", "Some L1 exec nodes like Erigon3 or Reth doesn't support the calls well, and it is not a requirement for Arbitrum nodes as well.\n\nWould be great if we could skip calls while syncing the OP L2s", "CLOSED", 0, "tornadocontrib", "2024-12-18T13:39:28Z", "2024-12-23T15:57:12Z", "2024-12-23T15:57:11Z", "ethereum-optimism/optimism", "2025-08-30 22:55:50"]
["I_kwDODjvEJM6jk8uI", 13438, "[Conductor] two sequencer could be active in one cluster", "## TLDR\n\n- conductor system is not stable\n- two sequencer be active status itself\n\n### Log\n```\n-----------K8S--------------\nSeq0\nCheck Sequencer Active\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n\nCheck Leadership\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":false}\n\nCheck Sequencer Healthy\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n\nSeq1\nCheck Sequencer Active\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n\nCheck Leadership\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n\nCheck Sequencer Healthy\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n\nSeq2\nCheck Sequencer Active\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":false}\n\nCheck Leadership\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":false}\n\nCheck Sequencer Healthy\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n```\n\n## situation\nI setup 3 sequencer set with conductor and make cluster of them. \nstatus: seq-2 active, and seq-1, seq-0 are follwer.\n\nAfter some time goes on, there was two sequencer active status. this situation is not proper for conductor purpose.\nstatus: seq-1, seq-2 active, and seq-0 is follwer.\n\nAlthough the second sequencer cannot commit block on conductor cluster, it could makes disorder to cluster\n\nI'm analyzing the specific logic for this disorder.\n\nLet's make solution for this fail situation.", "CLOSED", 0, "siddharth0a", "2024-12-17T09:21:09Z", "2024-12-22T22:05:44Z", "2024-12-22T22:05:43Z", "ethereum-optimism/optimism", "2025-08-30 22:55:50"]
["I_kwDODjvEJM6iK1fb", 13262, "op-proposer: create new game fail if outputRoot is unchanged", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\nIn a staging environment with permissioned fault proofs, when no transactions are received for a period longer than `proposal-interval`, the proposer transaction fails with `GameAlreadyExists`. The op-proposer logs show this error repeating every proposal-interval:\n\n```shell\nmsg=\"Failed to send proposal transaction\" err=\"failed to create the tx: operation failed permanently after 30 attempts: failed to estimate gas: execution reverted, reason: 0x014f6fe5b1915a2b357e091ddbe16c95c0ca28488326b894aa1dbc7ca249712ce2ba619a\" l1blocknum=7210390 l1blockhash=0x443ccd38f29b4971458d4519c56ef7eae1cdc0e2375bba58581638ec78f7ed8b l1head=7210400\n```\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\nRun `op-prosposer` with permissioned fault proof and don't send transactions.\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\nThe op-proposer should:\n\n1. Check if the new outputRoot matches the latest output from DGF\n2. If they match:\n- Log a debug message \n- return `shouldPropose = false`\n3. Skip proposal attempt instead of failing with GameAlreadyExists\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\nI've committed a potential fix here: [Commit](https://github.com/PierreOssun/optimism/commit/da7a97023d0e713ee9ee79a177f538e310442d07#diff-80c3f3adf66ddb226563d36a0cd6bcd1220d22e123364eefa3fb624377730372L87)\nPlease have a look and I will add tests and open PR after your first look\n\nThanks", "CLOSED", 0, "PierreOssun", "2024-12-05T15:41:11Z", "2024-12-23T23:05:05Z", "2024-12-23T23:05:05Z", "ethereum-optimism/optimism", "2025-08-30 22:55:50"]
["I_kwDODjvEJM6h0YK7", 13180, "interop: Snap Sync", "From this document: https://github.com/ethereum-optimism/design-docs/pull/171/files\n\nDecomposed into: https://www.notion.so/oplabs/tasks-to-make-150f153ee162809e981ac7d30c0bfae2?showMoveTo=true&saveParent=true\n\n# What\nThe Supervisor should be able to bootstrap off another supervisor's database\n\n# Why\nThe Supervisor database is easy to transport, has no variance, and can fully eliminate sync time if it were able to be copied into a new host.\n\n# How\n* Make the Supervisor support an optional HTTP endpoint which allows a fetch of the supervisor's datadir. All data can be zipped and shipped, and the databases should be atomically writing so any moment is safe to serve.\n* Maybe make the HEAD call to this endpoint return the height, or size of the database?\n* Add a new config flag for Supervisor Startup which sets a bootstrap endpoint. On startup, the Supervisor will call the endpoint created in the first bullet point, downloading and extracting the databases into the datadir. If the database is already present, either skip the download, or use a heuristic to decide how to handle it\n* Optional fanciness: use HTTP chunking so that even when the database is up to date, chunks can be used to extend the file. We should check if trimming the database (rewind) makes chunks not work in some way?", "CLOSED", 0, "axelKingsley", "2024-12-02T22:26:53Z", "2024-12-23T16:42:02Z", "2024-12-23T16:42:02Z", "ethereum-optimism/optimism", "2025-08-30 22:55:50"]
["I_kwDODjvEJM6arL9J", 12509, "EPIC: Audit for Asterisc", "Work that needs to be completed before the audit is tracked in https://github.com/ethereum-optimism/asterisc/issues/86\r\ncodebase repository is here: https://github.com/ethereum-optimism/asterisc", "CLOSED", 0, "BlocksOnAChain", "2024-10-17T15:02:58Z", "2024-12-23T11:24:39Z", "2024-12-23T11:24:39Z", "ethereum-optimism/optimism", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6lAh4T", 1211, "Project: letsgooo OP Project", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "CLOSED", 0, "rizkyy702", "2025-01-04T02:43:51Z", "2025-01-04T02:49:30Z", "2025-01-04T02:49:30Z", "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6lAh2H", 1210, "Project: Op Airdrop", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "CLOSED", 0, "rizkyy702", "2025-01-04T02:43:32Z", "2025-01-04T02:49:30Z", "2025-01-04T02:49:30Z", "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6lAh0D", 1209, "Project: Optimism", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "CLOSED", 0, "rizkyy702", "2025-01-04T02:43:14Z", "2025-01-04T02:49:29Z", "2025-01-04T02:49:29Z", "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6lAhxn", 1208, "Project:", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "CLOSED", 0, "rizkyy702", "2025-01-04T02:42:55Z", "2025-01-04T02:49:29Z", "2025-01-04T02:49:29Z", "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6lAhwc", 1207, "Project:", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "CLOSED", 0, "rizkyy702", "2025-01-04T02:42:45Z", "2025-01-04T02:49:28Z", "2025-01-04T02:49:28Z", "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6k-Rp6", 1199, "Build our own \"Assets Onchain\" Data Pull", "Today, we rely on L2Beat's API for assets onchain. This is good for coverage of the wide L2/3 market, but it often lags behind internal needs for chains in the Superchain - which can lead to misunderstandings (i.e. Swell is still not listed after being live for weeks. This results in us showing 0 assets onchain, when they publicly celebrate 200m+).\n\nSteps:\n1. Collect L1 Bridge contracts #1063 \n2. Get token balance and prices each day #934 (TODO: Prices issue - maybe DFL API)\n3. Develop methodology for L2 Native / externally bridged tokens (both should appear minted from the null address)", "OPEN", 0, "MSilb7", "2025-01-03T15:45:15Z", "2025-01-03T15:45:15Z", null, "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6k4A-8", 1195, "Token Transfer and DEX Volume - Bad Metric Case", "On metrics to be cautious of - why raw token transfer volume (with stablecoin transfer volume as a subset) is a bad metric, and raw DEX volume may also be:\n- A new DEX heavily inflated stablecoin transfer volumes (2nd time this has happened to my knowledge): https://x.com/artemis/status/1874526932479644035\n- Blockworks is filtering this DEX out, identified that it has 0 fees, so people just wash on it: https://x.com/smyyguy/status/1873461468886454394\n\n- For token transfers: It's tough to make a \"better version,\" because there can be 0 cost to inflate it. It's arguably easier to fake than active addresses. I'd be against any metric to do with this.\n\n- For DEXs: Maybe a better metric would be to just look at DEX fees, rather than DEX volume. I think Defillama has this.\n\nTag #1190 ", "OPEN", 0, "MSilb7", "2025-01-02T14:42:15Z", "2025-01-02T14:42:29Z", null, "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6kSvbr", 1190, "Defillama DEX Volume and App Fees Pulls", "API gives 24h and 30d, so we'll pull this raw as-is and generate daily/monthly metrics from here.\n\nMaybe also manually add in the [monthly charts](https://defillama.com/dexs/chains) by each chain for DEX volume", "CLOSED", 0, "MSilb7", "2024-12-23T16:27:00Z", "2025-01-03T16:46:08Z", "2025-01-03T16:46:08Z", "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOI7W0xc6hvPoM", 1093, "Migrate Growthepie Daily Chain Data", "Notebook: https://github.com/ethereum-optimism/op-analytics/blob/main/other_chains_tracking/pull_l2_activity.ipynb\n\nGTP Utils: https://github.com/ethereum-optimism/op-analytics/blob/main/helper_functions/growthepieapi_utils.py", "CLOSED", 0, "MSilb7", "2024-12-02T22:19:43Z", "2025-01-03T15:25:25Z", "2025-01-03T15:25:25Z", "ethereum-optimism/op-analytics", "2025-08-30 22:55:50"]
["I_kwDOFpg0Ns6NbByM", 881, "Mode USDC is not FiatToken but OptimismMintableERC20", "**Bug Description**\r\n\r\nThe Mode entry for USDC is invalid, it should live in the `BridgedUSDC` folder. \r\n", "OPEN", 0, "AlexBHarley", "2024-06-25T13:14:36Z", "2025-01-05T21:51:55Z", null, "ethereum-optimism/ethereum-optimism.github.io", "2025-08-30 23:43:05"]
["I_kwDOKIwiaM6kyp6h", 1210, "2024-12-01..2024-12-31 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 1 day, 12:24:38 | 21:40:17 | 3 days, 1:26:35 |\n| Time to close | 1 day, 19:09:40 | 2 days, 21:34:14 | 2 days, 21:46:56 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 11 |\n| Number of items closed | 14 |\n| Number of most active mentors | 0 |\n| Total number of items created | 25 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Wrong address for Challenger | https://github.com/ethereum-optimism/docs/issues/1208 | [Maar-io](https://github.com/Maar-io) | None | None | None |\n| Broken link | https://github.com/ethereum-optimism/docs/issues/1204 | [KyryloKilin](https://github.com/KyryloKilin) | None | None | None |\n| 2024-11-01..2024-11-30 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1200 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:34:10 | None |\n| 2024-11-01..2024-11-30 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1199 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:34:17 | None |\n| 2024-11-01..2024-11-30 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1198 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:40:16 | None |\n| 2024-11-01..2024-11-30 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1197 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:40:22 | None |\n| 2024-11-01..2024-11-30 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1196 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:44:44 | None |\n| 2024-11-01..2024-11-30 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1195 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:44:49 | None |\n| 2024-11-01..2024-11-30 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1194 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:47:50 | None |\n| 2024-11-01..2024-11-30 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1193 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 2 days, 21:47:56 | None |\n| 2024-11-01..2024-11-30 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1192 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 5:28:11 | None |\n| 2024-11-01..2024-11-30 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1191 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 5:35:10 | None |\n| 2024-11-01..2024-11-30 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1190 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 5:38:30 | None |\n| Update \"Chain Differences\" page with post-holocene info | https://github.com/ethereum-optimism/docs/issues/1188 | [ZakAyesh](https://github.com/ZakAyesh) | None | None | None |\n| Section for Standard Config | https://github.com/ethereum-optimism/docs/issues/1187 | [ZakAyesh](https://github.com/ZakAyesh) | 3 days, 14:23:10 | None | None |\n| Holocene upgrade script 404 not found | https://github.com/ethereum-optimism/docs/issues/1178 | [Chomtana](https://github.com/Chomtana) | None | None | None |\n| [2024 Q4 Audit] [Review and update the focus and scope sections across all audit reports] | https://github.com/ethereum-optimism/docs/issues/1177 | [krofax](https://github.com/krofax) | None | None | None |\n| [2024 Q4 Audit] [Update focus and scope] | https://github.com/ethereum-optimism/docs/issues/1176 | [krofax](https://github.com/krofax) | None | None | None |\n| [DOCS] Superchain Interop Explainer 404 | https://github.com/ethereum-optimism/docs/issues/1165 | [parseb](https://github.com/parseb) | 21:40:17 | 21:40:17 | None |\n| Feedback for \u201cBridging your standard ERC-20 token using the Standard Bridge\u201d | https://github.com/ethereum-optimism/docs/issues/1163 | [plamarque](https://github.com/plamarque) | None | 7:08:22 | None |\n| [GLOSSARY] Add PR title | https://github.com/ethereum-optimism/docs/issues/1155 | [Tanimola50](https://github.com/Tanimola50) | 1:10:27 | 1:10:27 | None |\n| 2024-11-01..2024-11-30 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1153 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | None | None |\n| 2024-11-01..2024-11-30 metrics report for opened issues | https://github.com/ethereum-optimism/docs/issues/1152 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | None | None |\n| 2024-11-01..2024-11-30 metrics report for closed prs | https://github.com/ethereum-optimism/docs/issues/1151 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | None | None |\n| 2024-11-01..2024-11-30 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1150 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | None | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2024-12-01..2024-12-31`", "CLOSED", 0, "unknown", "2025-01-01T00:21:09Z", "2025-01-01T22:33:22Z", "2025-01-01T22:33:22Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6kyp5m", 1209, "2024-12-01..2024-12-31 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 53 days, 4:20:10 | 18 days, 16:46:33 | 140 days, 19:31:04 |\n| Time to close | 54 days, 20:47:26 | 48 days, 9:28:20 | 98 days, 10:24:05 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 10 |\n| Number of most active mentors | 0 |\n| Total number of items created | 10 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [DOCS] Superchain Interop Explainer 404 | https://github.com/ethereum-optimism/docs/issues/1165 | [parseb](https://github.com/parseb) | 21:40:17 | 21:40:17 | None |\n| Feedback for \u201cBridging your standard ERC-20 token using the Standard Bridge\u201d | https://github.com/ethereum-optimism/docs/issues/1163 | [plamarque](https://github.com/plamarque) | None | 7:08:22 | None |\n| [GLOSSARY] Add PR title | https://github.com/ethereum-optimism/docs/issues/1155 | [Tanimola50](https://github.com/Tanimola50) | 1:10:27 | 1:10:27 | None |\n| [UI issue]Footer Navigation Links Mismatch | https://github.com/ethereum-optimism/docs/issues/1133 | [opfocus](https://github.com/opfocus) | 0:15:19 | 12 days, 2:59:58 | None |\n| [2024 Q4 Audit] builders/chain-operators/management/operations.mdx | https://github.com/ethereum-optimism/docs/issues/1041 | [sbvegan](https://github.com/sbvegan) | None | 60 days, 7:03:51 | None |\n| [ERROR] Tutorials\uff1aCreating Your Own L2 Rollup Testnet issue #849 | https://github.com/ethereum-optimism/docs/issues/1029 | [AgiletechDev](https://github.com/AgiletechDev) | 36 days, 11:52:49 | 36 days, 11:52:49 | None |\n| [2024 Q4 Audit] /chain/testing/dev-node | https://github.com/ethereum-optimism/docs/issues/984 | [sbvegan](https://github.com/sbvegan) | None | 78 days, 9:47:15 | None |\n| [2024 Q4 Audit] builders/chain-operators/configuration/overview.md | https://github.com/ethereum-optimism/docs/issues/919 | [sbvegan](https://github.com/sbvegan) | None | 78 days, 11:09:18 | None |\n| [RPC PROVIDER] Add PR title | https://github.com/ethereum-optimism/docs/issues/885 | [JoGetBlock](https://github.com/JoGetBlock) | 87 days, 20:07:20 | 87 days, 20:07:20 | None |\n| Getting error: Failed to get EIP-1559 fees | https://github.com/ethereum-optimism/docs/issues/709 | [mohit6b](https://github.com/mohit6b) | 193 days, 18:54:47 | 193 days, 18:54:47 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-12-01..2024-12-31 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "unknown", "2025-01-01T00:21:02Z", "2025-01-01T22:33:15Z", "2025-01-01T22:33:15Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6kbCX8", 1204, "Broken link", "A broken link on this page: https://docs.optimism.io/builders/app-developers\n![Image](https://github.com/user-attachments/assets/c6303cd0-0e19-4092-8dd2-42c4a2cff7d9)\n", "CLOSED", 0, "KyryloKilin", "2024-12-25T06:43:52Z", "2025-01-03T16:30:47Z", "2025-01-03T16:30:46Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6hbVG9", 1153, "2024-11-01..2024-11-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 12 days, 9:05:04 | 4 days, 12:31:10 | 31 days, 19:02:07 |\n| Time to close | 43 days, 18:55:56 | 4 days, 12:31:10 | 225 days, 10:14:41 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 21 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1047 | [Saraeutsza](https://github.com/Saraeutsza) | None | 2 days, 2:54:52 | None |\n| Add Blocknative Gas API and Tenderly Tool to Gas Oracle section | https://github.com/ethereum-optimism/docs/issues/1046 | [krofax](https://github.com/krofax) | None | 13 days, 0:11:45 | None |\n| Faucet Error Occurs Frequently at Certain Times | https://github.com/ethereum-optimism/docs/issues/1030 | [fujianggara10](https://github.com/fujianggara10) | 4 days, 12:31:10 | 4 days, 12:31:10 | None |\n| [DOCS] Clean up breadcrumb overview pages | https://github.com/ethereum-optimism/docs/issues/1026 | [krofax](https://github.com/krofax) | None | 18 days, 5:46:20 | None |\n| Feedback for \u201cFjord Fee Parameter Calculator\u201d | https://github.com/ethereum-optimism/docs/issues/1002 | [sashagood](https://github.com/sashagood) | 1:12:16 | 25 days, 1:43:41 | None |\n| [2024 Q4 Audit] stack/differences.mdx | https://github.com/ethereum-optimism/docs/issues/1000 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:13:16 | None |\n| [2024 Q4 Audit] chain/differences.mdx | https://github.com/ethereum-optimism/docs/issues/999 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:14:54 | None |\n| [DOCS] Explain tx finality, fault proof window, and sequencer policy | https://github.com/ethereum-optimism/docs/issues/942 | [zainbacchus](https://github.com/zainbacchus) | 12 days, 17:26:12 | 37 days, 20:04:27 | None |\n| Feedback for \u201cNetwork Upgrades\u201d [Add Bedrock Date?] | https://github.com/ethereum-optimism/docs/issues/927 | [MSilb7](https://github.com/MSilb7) | 2:09:37 | 40 days, 7:21:13 | None |\n| [TUTORIAL] update bridging eth with the sdk to use viem | https://github.com/ethereum-optimism/docs/issues/591 | [sbvegan](https://github.com/sbvegan) | None | 225 days, 10:14:41 | None |\n| [DOCS] Add caveat for the priority fee | https://github.com/ethereum-optimism/docs/issues/559 | [sbvegan](https://github.com/sbvegan) | None | 237 days, 2:36:27 | None |\n| [DOCS] add eip1559 Canyon configurations | https://github.com/ethereum-optimism/docs/issues/444 | [sbvegan](https://github.com/sbvegan) | 44 days, 12:06:03 | 284 days, 10:39:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-11-01..2024-11-30 -reason:\"not planned\" -label:monthly-report`\n", "CLOSED", 0, "github-actions", "2024-12-01T00:35:07Z", "2025-01-03T17:28:44Z", "2025-01-03T17:28:44Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6hbVGN", 1152, "2024-11-01..2024-11-30 metrics report for opened issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 17:10:11 | 0:51:34 | 1 day, 23:03:25 |\n| Time to close | 1:53:36 | 0:34:04 | 3:17:34 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 6 |\n| Number of items closed | 9 |\n| Total number of items created | 15 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [UI issue]Footer Navigation Links Mismatch | https://github.com/ethereum-optimism/docs/issues/1133 | [opfocus](https://github.com/opfocus) | 0:15:19 | None | None |\n| [2024 Q4 Audit] builders/chain-operators/features/preinstalls.mdx | https://github.com/ethereum-optimism/docs/issues/1109 | [ZakAyesh](https://github.com/ZakAyesh) | None | None | None |\n| Refactor architecture for Interop section | https://github.com/ethereum-optimism/docs/issues/1095 | [zainbacchus](https://github.com/zainbacchus) | 1:12:40 | None | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] builders/tools/overview.mdx | https://github.com/ethereum-optimism/docs/issues/1072 | [Wazabie](https://github.com/Wazabie) | None | None | None |\n| Asterisc & Kona Documentation | https://github.com/ethereum-optimism/docs/issues/1067 | [pauldowman](https://github.com/pauldowman) | 0:30:27 | None | None |\n| Docs updates for 64-bit multi-threaded Cannon | https://github.com/ethereum-optimism/docs/issues/1066 | [pauldowman](https://github.com/pauldowman) | 2 days, 18:42:19 | None | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue created:2024-11-01..2024-11-30 -reason:\"not planned\" -label:monthly-report`\n", "CLOSED", 0, "github-actions", "2024-12-01T00:35:01Z", "2025-01-03T17:28:44Z", "2025-01-03T17:28:43Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6hbTDr", 1151, "2024-11-01..2024-11-30 metrics report for closed prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 22:13:53 | 1:52:26 | 2 days, 19:44:50 |\n| Time to close | 1 day, 23:36:34 | 6:21:49 | 4 days, 18:25:45 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 74 |\n| Total number of items created | 74 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Cleanup | https://github.com/ethereum-optimism/docs/pull/1149 | [squdgy](https://github.com/squdgy) | None | None | None |\n| Corrected Hyphenation Issues in Documentation | https://github.com/ethereum-optimism/docs/pull/1147 | [Dimitrolito](https://github.com/Dimitrolito) | 1:59:08 | 1:59:52 | None |\n| Fixed typoes in dev-node.mdx | https://github.com/ethereum-optimism/docs/pull/1146 | [gologo13](https://github.com/gologo13) | 15:20:39 | 15:21:41 | None |\n| Add clarification re L1Admin | https://github.com/ethereum-optimism/docs/pull/1145 | [zainbacchus](https://github.com/zainbacchus) | 0:31:48 | 11:18:29 | None |\n| op-deployer: Remove source build instructions | https://github.com/ethereum-optimism/docs/pull/1143 | [mslipper](https://github.com/mslipper) | 2:14:40 | 2:14:48 | None |\n| Fixing broken proxyd link | https://github.com/ethereum-optimism/docs/pull/1141 | [praetoriansentry](https://github.com/praetoriansentry) | 14:15:56 | 14:17:05 | None |\n| Clarify Comment on Removing Duplicate L1 Tokens Update TokenListTable\u2026 | https://github.com/ethereum-optimism/docs/pull/1140 | [0xminds](https://github.com/0xminds) | 1 day, 23:06:09 | 1 day, 23:11:20 | None |\n| Code optimization Update AddressTable.tsx | https://github.com/ethereum-optimism/docs/pull/1139 | [0xminds](https://github.com/0xminds) | 2 days, 1:32:51 | None | None |\n| Typo Update Loader.tsx | https://github.com/ethereum-optimism/docs/pull/1138 | [0xminds](https://github.com/0xminds) | 1 day, 23:18:01 | None | None |\n| Typo README.md | https://github.com/ethereum-optimism/docs/pull/1137 | [Danyylka](https://github.com/Danyylka) | 2:33:33 | 2:36:07 | None |\n| Fix typos and remove duplicate entries Changes Made | https://github.com/ethereum-optimism/docs/pull/1136 | [Madmaxs2](https://github.com/Madmaxs2) | 1:18:46 | 1:21:41 | None |\n| holocene-changes: Link to latest upgrade script | https://github.com/ethereum-optimism/docs/pull/1135 | [sebastianst](https://github.com/sebastianst) | 0:03:02 | 0:03:10 | None |\n| holocene-changes: Update Sepolia MIPS address | https://github.com/ethereum-optimism/docs/pull/1134 | [sebastianst](https://github.com/sebastianst) | 0:06:42 | 0:06:51 | None |\n| fix: incompatible state scheme | https://github.com/ethereum-optimism/docs/pull/1132 | [chuwt](https://github.com/chuwt) | 21:01:23 | 21:32:24 | None |\n| docs: Correct thirdweb capitalization and updating links. | https://github.com/ethereum-optimism/docs/pull/1130 | [Joe-Thirdweb](https://github.com/Joe-Thirdweb) | 6:39:11 | 6:40:11 | None |\n| Documentation Text Fixes Changes Made | https://github.com/ethereum-optimism/docs/pull/1128 | [Hopium21](https://github.com/Hopium21) | 1:45:44 | 2:59:01 | None |\n| Update rollup.mdx | https://github.com/ethereum-optimism/docs/pull/1127 | [brokewhale](https://github.com/brokewhale) | 0:18:46 | 4:29:02 | None |\n| Update oracles.mdx tags | https://github.com/ethereum-optimism/docs/pull/1126 | [brokewhale](https://github.com/brokewhale) | 1:06:55 | 6:45:46 | None |\n| Fix grammatical errors in documentation | https://github.com/ethereum-optimism/docs/pull/1123 | [Hopium21](https://github.com/Hopium21) | None | None | None |\n| Typo Update OpProposerDescriptionShort.md | https://github.com/ethereum-optimism/docs/pull/1122 | [0xbryer](https://github.com/0xbryer) | 22:55:23 | 22:55:29 | None |\n| fix op-deployer commands | https://github.com/ethereum-optimism/docs/pull/1121 | [zhiqiangxu](https://github.com/zhiqiangxu) | 3 days, 11:32:43 | 4 days, 0:55:31 | None |\n| docs: update SuperchainERC20 deployment guide link | https://github.com/ethereum-optimism/docs/pull/1120 | [codeesura](https://github.com/codeesura) | 2 days, 14:40:07 | 2 days, 14:40:13 | None |\n| Automate Internal Link Updates Using Redirects File | https://github.com/ethereum-optimism/docs/pull/1119 | [krofax](https://github.com/krofax) | 1:24:22 | 2:05:46 | None |\n| Fix invalid stroke-width attribute Update Loader.tsx | https://github.com/ethereum-optimism/docs/pull/1118 | [voronor](https://github.com/voronor) | 0:02:21 | 0:15:56 | None |\n| Refactor JSDoc for WipCallout to Improve Clarity and Precision Update\u2026 | https://github.com/ethereum-optimism/docs/pull/1117 | [0xbryer](https://github.com/0xbryer) | 0:01:56 | 0:19:56 | None |\n| Typo Update content-reuse.md | https://github.com/ethereum-optimism/docs/pull/1115 | [voronor](https://github.com/voronor) | 0:02:26 | 0:15:24 | None |\n| Superchain ERC20 starter kit | https://github.com/ethereum-optimism/docs/pull/1114 | [krofax](https://github.com/krofax) | 7:27:41 | 7:27:49 | None |\n| Collapsing walkthrough section and disabling changed file summary | https://github.com/ethereum-optimism/docs/pull/1113 | [bradleycamacho](https://github.com/bradleycamacho) | 1 day, 0:44:01 | 1 day, 2:02:19 | None |\n| Provide an interop value-prop in more plain terms | https://github.com/ethereum-optimism/docs/pull/1112 | [bradleycamacho](https://github.com/bradleycamacho) | 2:57:39 | 5 days, 20:41:07 | None |\n| Fix breadcrumb and title casing | https://github.com/ethereum-optimism/docs/pull/1111 | [bradleycamacho](https://github.com/bradleycamacho) | 0:01:37 | 0:51:13 | None |\n| Update home page capitalization | https://github.com/ethereum-optimism/docs/pull/1110 | [bradleycamacho](https://github.com/bradleycamacho) | 0:04:14 | 1:11:52 | None |\n| holocene upgrade notice page and docs updates | https://github.com/ethereum-optimism/docs/pull/1108 | [sbvegan](https://github.com/sbvegan) | 0:05:59 | 15:14:12 | None |\n| Clean up explainer | https://github.com/ethereum-optimism/docs/pull/1107 | [zainbacchus](https://github.com/zainbacchus) | 0:15:41 | 1:57:45 | None |\n| Added Getblock RPC Details | https://github.com/ethereum-optimism/docs/pull/1106 | [krofax](https://github.com/krofax) | 9 days, 12:32:56 | 10 days, 1:59:19 | None |\n| Replace the SDK link with viem | https://github.com/ethereum-optimism/docs/pull/1105 | [krofax](https://github.com/krofax) | 1 day, 2:25:04 | 2 days, 18:37:19 | None |\n| Typo Update CONTRIBUTING.md | https://github.com/ethereum-optimism/docs/pull/1104 | [mdqst](https://github.com/mdqst) | 2:16:59 | 2:17:06 | None |\n| Update cross-chain-message.mdx | https://github.com/ethereum-optimism/docs/pull/1103 | [zainbacchus](https://github.com/zainbacchus) | 3:22:14 | 8:45:10 | None |\n| Add OP Scan Block Explorer | https://github.com/ethereum-optimism/docs/pull/1102 | [saimeunt](https://github.com/saimeunt) | 1 day, 7:26:21 | None | None |\n| Fix Spelling and Grammar Issues in Tutorial Suggestion Template | https://github.com/ethereum-optimism/docs/pull/1101 | [donatik27](https://github.com/donatik27) | 1 day, 23:17:42 | 1 day, 23:19:23 | None |\n| Update docs files with errors | https://github.com/ethereum-optimism/docs/pull/1100 | [Anon-im](https://github.com/Anon-im) | 3 days, 1:01:03 | 3 days, 1:05:18 | None |\n| Remove devnet configs | https://github.com/ethereum-optimism/docs/pull/1099 | [zainbacchus](https://github.com/zainbacchus) | 0:06:46 | 2:49:23 | None |\n| Add ref to SuperchainERC20 starter kit | https://github.com/ethereum-optimism/docs/pull/1098 | [zainbacchus](https://github.com/zainbacchus) | 0:00:59 | 0:02:30 | None |\n| Add more spacing within content | https://github.com/ethereum-optimism/docs/pull/1097 | [bradleycamacho](https://github.com/bradleycamacho) | 0:22:50 | 0:25:26 | None |\n| Add Devnet callout | https://github.com/ethereum-optimism/docs/pull/1096 | [zainbacchus](https://github.com/zainbacchus) | 0:01:43 | 0:02:55 | None |\n| Update devnet.mdx | https://github.com/ethereum-optimism/docs/pull/1094 | [zainbacchus](https://github.com/zainbacchus) | 0:00:28 | 0:02:47 | None |\n| Added extra spacing | https://github.com/ethereum-optimism/docs/pull/1093 | [krofax](https://github.com/krofax) | 3:26:12 | None | None |\n| Deploy the L1 contract command path updated | https://github.com/ethereum-optimism/docs/pull/1092 | [BalrajHariharanA](https://github.com/BalrajHariharanA) | 4 days, 22:32:30 | 6 days, 22:19:40 | None |\n| deleting sdk page | https://github.com/ethereum-optimism/docs/pull/1091 | [sbvegan](https://github.com/sbvegan) | 0:07:24 | 0:08:27 | None |\n| Remove node squad and other codeowners | https://github.com/ethereum-optimism/docs/pull/1089 | [bradleycamacho](https://github.com/bradleycamacho) | 0:04:19 | 0:07:37 | None |\n| Public interop devnet details | https://github.com/ethereum-optimism/docs/pull/1087 | [sbvegan](https://github.com/sbvegan) | 0:27:25 | 15:49:06 | None |\n| SendRawTransactionConditional: remove reference to authentication | https://github.com/ethereum-optimism/docs/pull/1086 | [hamdiallam](https://github.com/hamdiallam) | 0:00:57 | 0:30:56 | None |\n| dropping OPM down | https://github.com/ethereum-optimism/docs/pull/1085 | [sbvegan](https://github.com/sbvegan) | 0:51:35 | 1:29:12 | None |\n| How to connect/use the public devnet | https://github.com/ethereum-optimism/docs/pull/1084 | [krofax](https://github.com/krofax) | 10:07:52 | None | None |\n| removing out of date files | https://github.com/ethereum-optimism/docs/pull/1082 | [sbvegan](https://github.com/sbvegan) | 0:05:33 | 0:10:08 | None |\n| remove wallet & cex section | https://github.com/ethereum-optimism/docs/pull/1081 | [sbvegan](https://github.com/sbvegan) | 0:00:29 | 0:12:25 | None |\n| fix: Typo Corrections in Documentation | https://github.com/ethereum-optimism/docs/pull/1074 | [cypherpepe](https://github.com/cypherpepe) | 0:03:06 | 0:04:33 | None |\n| Updated Calculator endpoints | https://github.com/ethereum-optimism/docs/pull/1073 | [krofax](https://github.com/krofax) | 0:05:02 | 0:08:47 | None |\n| Add caveat for the priority fee | https://github.com/ethereum-optimism/docs/pull/1071 | [richardgreg](https://github.com/richardgreg) | 6:17:51 | 6:21:49 | None |\n| Update style-guide.mdx | https://github.com/ethereum-optimism/docs/pull/1070 | [Nicca42](https://github.com/Nicca42) | 0:01:44 | 0:04:48 | None |\n| adding bedrocks activation time | https://github.com/ethereum-optimism/docs/pull/1069 | [sbvegan](https://github.com/sbvegan) | 2 days, 20:18:42 | 2 days, 20:24:14 | None |\n| update audit issue template | https://github.com/ethereum-optimism/docs/pull/1068 | [sbvegan](https://github.com/sbvegan) | 0:18:15 | 0:18:40 | None |\n| remove-wip-callout | https://github.com/ethereum-optimism/docs/pull/1065 | [cpengilly](https://github.com/cpengilly) | 0:09:11 | 0:09:41 | None |\n| viem updates | https://github.com/ethereum-optimism/docs/pull/1064 | [cpengilly](https://github.com/cpengilly) | 0:12:25 | 0:12:31 | None |\n| Update oracles.mdx | https://github.com/ethereum-optimism/docs/pull/1063 | [aseoconnor](https://github.com/aseoconnor) | 3 days, 1:37:44 | 3 days, 1:37:50 | None |\n| Update monthly-issue-metircs.yml | https://github.com/ethereum-optimism/docs/pull/1062 | [sbvegan](https://github.com/sbvegan) | 0:00:54 | 3 days, 9:13:53 | None |\n| SuperchainERC20 best practices | https://github.com/ethereum-optimism/docs/pull/1061 | [bradleycamacho](https://github.com/bradleycamacho) | 6 days, 2:27:51 | 6 days, 10:45:51 | None |\n| Updated Breadcrumb script | https://github.com/ethereum-optimism/docs/pull/1060 | [krofax](https://github.com/krofax) | 0:07:32 | 3 days, 2:20:27 | None |\n| Documentation Improvements: Grammar, Structure, and Readability Fixes | https://github.com/ethereum-optimism/docs/pull/1057 | [zoomyzo](https://github.com/zoomyzo) | 11:45:43 | 3 days, 12:39:30 | None |\n| Deploy assets using Superchain ERC20 | https://github.com/ethereum-optimism/docs/pull/1050 | [bradleycamacho](https://github.com/bradleycamacho) | 1 day, 0:58:33 | 1 day, 8:47:21 | None |\n| How to use general message passing | https://github.com/ethereum-optimism/docs/pull/1032 | [krofax](https://github.com/krofax) | 21:55:28 | 3 days, 3:22:36 | None |\n| Port internal knowledge base info to doc | https://github.com/ethereum-optimism/docs/pull/998 | [bradleycamacho](https://github.com/bradleycamacho) | 0:22:07 | 15 days, 9:29:59 | None |\n| Communicating Between OP Mainnet and Ethereum in Solidity | https://github.com/ethereum-optimism/docs/pull/989 | [krofax](https://github.com/krofax) | 10 days, 0:43:06 | 16 days, 18:49:49 | None |\n| Transaction Finality Explainer | https://github.com/ethereum-optimism/docs/pull/987 | [krofax](https://github.com/krofax) | 1 day, 3:46:50 | 25 days, 2:40:23 | None |\n| Add tutorial for devnet | https://github.com/ethereum-optimism/docs/pull/914 | [mslipper](https://github.com/mslipper) | 11:19:07 | 16:11:10 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr closed:2024-11-01..2024-11-30`\n", "CLOSED", 0, "github-actions", "2024-12-01T00:19:04Z", "2025-01-03T17:28:43Z", "2025-01-03T17:28:43Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6hbS1W", 1150, "2024-11-01..2024-11-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 22:30:30 | 1:52:26 | 2 days, 20:46:56 |\n| Time to close | 1 day, 3:42:46 | 2:49:23 | 3 days, 9:13:53 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 7 |\n| Number of items closed | 68 |\n| Total number of items created | 75 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Cleanup | https://github.com/ethereum-optimism/docs/pull/1149 | [squdgy](https://github.com/squdgy) | None | None | None |\n| Added new page for Data Indexers under pages/builders/tools/monitor | https://github.com/ethereum-optimism/docs/pull/1148 | [alinobrasil](https://github.com/alinobrasil) | None | None | None |\n| Corrected Hyphenation Issues in Documentation | https://github.com/ethereum-optimism/docs/pull/1147 | [Dimitrolito](https://github.com/Dimitrolito) | 1:59:08 | 1:59:52 | None |\n| Fixed typoes in dev-node.mdx | https://github.com/ethereum-optimism/docs/pull/1146 | [gologo13](https://github.com/gologo13) | 15:20:39 | 15:21:41 | None |\n| Add clarification re L1Admin | https://github.com/ethereum-optimism/docs/pull/1145 | [zainbacchus](https://github.com/zainbacchus) | 0:31:48 | 11:18:29 | None |\n| Added holocene upgrade for unichain | https://github.com/ethereum-optimism/docs/pull/1144 | [krofax](https://github.com/krofax) | None | None | None |\n| op-deployer: Remove source build instructions | https://github.com/ethereum-optimism/docs/pull/1143 | [mslipper](https://github.com/mslipper) | 2:14:40 | 2:14:48 | None |\n| Fixing broken proxyd link | https://github.com/ethereum-optimism/docs/pull/1141 | [praetoriansentry](https://github.com/praetoriansentry) | 14:15:56 | 14:17:05 | None |\n| Clarify Comment on Removing Duplicate L1 Tokens Update TokenListTable\u2026 | https://github.com/ethereum-optimism/docs/pull/1140 | [0xminds](https://github.com/0xminds) | 1 day, 23:06:09 | 1 day, 23:11:20 | None |\n| Code optimization Update AddressTable.tsx | https://github.com/ethereum-optimism/docs/pull/1139 | [0xminds](https://github.com/0xminds) | 2 days, 1:32:51 | None | None |\n| Typo Update Loader.tsx | https://github.com/ethereum-optimism/docs/pull/1138 | [0xminds](https://github.com/0xminds) | 1 day, 23:18:01 | None | None |\n| Typo README.md | https://github.com/ethereum-optimism/docs/pull/1137 | [Danyylka](https://github.com/Danyylka) | 2:33:33 | 2:36:07 | None |\n| Fix typos and remove duplicate entries Changes Made | https://github.com/ethereum-optimism/docs/pull/1136 | [Madmaxs2](https://github.com/Madmaxs2) | 1:18:46 | 1:21:41 | None |\n| holocene-changes: Link to latest upgrade script | https://github.com/ethereum-optimism/docs/pull/1135 | [sebastianst](https://github.com/sebastianst) | 0:03:02 | 0:03:10 | None |\n| holocene-changes: Update Sepolia MIPS address | https://github.com/ethereum-optimism/docs/pull/1134 | [sebastianst](https://github.com/sebastianst) | 0:06:42 | 0:06:51 | None |\n| fix: incompatible state scheme | https://github.com/ethereum-optimism/docs/pull/1132 | [chuwt](https://github.com/chuwt) | 21:01:23 | 21:32:24 | None |\n| Update rollup operators under chain management | https://github.com/ethereum-optimism/docs/pull/1131 | [richardgreg](https://github.com/richardgreg) | 1 day, 13:51:28 | None | None |\n| docs: Correct thirdweb capitalization and updating links. | https://github.com/ethereum-optimism/docs/pull/1130 | [Joe-Thirdweb](https://github.com/Joe-Thirdweb) | 6:39:11 | 6:40:11 | None |\n| Add OP Scan block explorer to Optimism Docs | https://github.com/ethereum-optimism/docs/pull/1129 | [saimeunt](https://github.com/saimeunt) | 9 days, 19:42:21 | None | None |\n| Documentation Text Fixes Changes Made | https://github.com/ethereum-optimism/docs/pull/1128 | [Hopium21](https://github.com/Hopium21) | 1:45:44 | 2:59:01 | None |\n| Update rollup.mdx | https://github.com/ethereum-optimism/docs/pull/1127 | [brokewhale](https://github.com/brokewhale) | 0:18:46 | 4:29:02 | None |\n| Update oracles.mdx tags | https://github.com/ethereum-optimism/docs/pull/1126 | [brokewhale](https://github.com/brokewhale) | 1:06:55 | 6:45:46 | None |\n| Superchain Registry docs | https://github.com/ethereum-optimism/docs/pull/1125 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Handling beta | https://github.com/ethereum-optimism/docs/pull/1124 | [brokewhale](https://github.com/brokewhale) | 1 day, 1:02:08 | None | None |\n| Fix grammatical errors in documentation | https://github.com/ethereum-optimism/docs/pull/1123 | [Hopium21](https://github.com/Hopium21) | None | None | None |\n| Typo Update OpProposerDescriptionShort.md | https://github.com/ethereum-optimism/docs/pull/1122 | [0xbryer](https://github.com/0xbryer) | 22:55:23 | 22:55:29 | None |\n| fix op-deployer commands | https://github.com/ethereum-optimism/docs/pull/1121 | [zhiqiangxu](https://github.com/zhiqiangxu) | 3 days, 11:32:43 | 4 days, 0:55:31 | None |\n| docs: update SuperchainERC20 deployment guide link | https://github.com/ethereum-optimism/docs/pull/1120 | [codeesura](https://github.com/codeesura) | 2 days, 14:40:07 | 2 days, 14:40:13 | None |\n| Automate Internal Link Updates Using Redirects File | https://github.com/ethereum-optimism/docs/pull/1119 | [krofax](https://github.com/krofax) | 1:24:22 | 2:05:46 | None |\n| Fix invalid stroke-width attribute Update Loader.tsx | https://github.com/ethereum-optimism/docs/pull/1118 | [voronor](https://github.com/voronor) | 0:02:21 | 0:15:56 | None |\n| Refactor JSDoc for WipCallout to Improve Clarity and Precision Update\u2026 | https://github.com/ethereum-optimism/docs/pull/1117 | [0xbryer](https://github.com/0xbryer) | 0:01:56 | 0:19:56 | None |\n| Typo Update content-reuse.md | https://github.com/ethereum-optimism/docs/pull/1115 | [voronor](https://github.com/voronor) | 0:02:26 | 0:15:24 | None |\n| Superchain ERC20 starter kit | https://github.com/ethereum-optimism/docs/pull/1114 | [krofax](https://github.com/krofax) | 7:27:41 | 7:27:49 | None |\n| Collapsing walkthrough section and disabling changed file summary | https://github.com/ethereum-optimism/docs/pull/1113 | [bradleycamacho](https://github.com/bradleycamacho) | 1 day, 0:44:01 | 1 day, 2:02:19 | None |\n| Provide an interop value-prop in more plain terms | https://github.com/ethereum-optimism/docs/pull/1112 | [bradleycamacho](https://github.com/bradleycamacho) | 2:57:39 | 5 days, 20:41:07 | None |\n| Fix breadcrumb and title casing | https://github.com/ethereum-optimism/docs/pull/1111 | [bradleycamacho](https://github.com/bradleycamacho) | 0:01:37 | 0:51:13 | None |\n| Update home page capitalization | https://github.com/ethereum-optimism/docs/pull/1110 | [bradleycamacho](https://github.com/bradleycamacho) | 0:04:14 | 1:11:52 | None |\n| holocene upgrade notice page and docs updates | https://github.com/ethereum-optimism/docs/pull/1108 | [sbvegan](https://github.com/sbvegan) | 0:05:59 | 15:14:12 | None |\n| Clean up explainer | https://github.com/ethereum-optimism/docs/pull/1107 | [zainbacchus](https://github.com/zainbacchus) | 0:15:41 | 1:57:45 | None |\n| Added Getblock RPC Details | https://github.com/ethereum-optimism/docs/pull/1106 | [krofax](https://github.com/krofax) | 9 days, 12:32:56 | 10 days, 1:59:19 | None |\n| Replace the SDK link with viem | https://github.com/ethereum-optimism/docs/pull/1105 | [krofax](https://github.com/krofax) | 1 day, 2:25:04 | 2 days, 18:37:19 | None |\n| Typo Update CONTRIBUTING.md | https://github.com/ethereum-optimism/docs/pull/1104 | [mdqst](https://github.com/mdqst) | 2:16:59 | 2:17:06 | None |\n| Update cross-chain-message.mdx | https://github.com/ethereum-optimism/docs/pull/1103 | [zainbacchus](https://github.com/zainbacchus) | 3:22:14 | 8:45:10 | None |\n| Add OP Scan Block Explorer | https://github.com/ethereum-optimism/docs/pull/1102 | [saimeunt](https://github.com/saimeunt) | 1 day, 7:26:21 | None | None |\n| Fix Spelling and Grammar Issues in Tutorial Suggestion Template | https://github.com/ethereum-optimism/docs/pull/1101 | [donatik27](https://github.com/donatik27) | 1 day, 23:17:42 | 1 day, 23:19:23 | None |\n| Update docs files with errors | https://github.com/ethereum-optimism/docs/pull/1100 | [Anon-im](https://github.com/Anon-im) | 3 days, 1:01:03 | 3 days, 1:05:18 | None |\n| Remove devnet configs | https://github.com/ethereum-optimism/docs/pull/1099 | [zainbacchus](https://github.com/zainbacchus) | 0:06:46 | 2:49:23 | None |\n| Add ref to SuperchainERC20 starter kit | https://github.com/ethereum-optimism/docs/pull/1098 | [zainbacchus](https://github.com/zainbacchus) | 0:00:59 | 0:02:30 | None |\n| Add more spacing within content | https://github.com/ethereum-optimism/docs/pull/1097 | [bradleycamacho](https://github.com/bradleycamacho) | 0:22:50 | 0:25:26 | None |\n| Add Devnet callout | https://github.com/ethereum-optimism/docs/pull/1096 | [zainbacchus](https://github.com/zainbacchus) | 0:01:43 | 0:02:55 | None |\n| Update devnet.mdx | https://github.com/ethereum-optimism/docs/pull/1094 | [zainbacchus](https://github.com/zainbacchus) | 0:00:28 | 0:02:47 | None |\n| Added extra spacing | https://github.com/ethereum-optimism/docs/pull/1093 | [krofax](https://github.com/krofax) | 3:26:12 | None | None |\n| Deploy the L1 contract command path updated | https://github.com/ethereum-optimism/docs/pull/1092 | [BalrajHariharanA](https://github.com/BalrajHariharanA) | 4 days, 22:32:30 | 6 days, 22:19:40 | None |\n| deleting sdk page | https://github.com/ethereum-optimism/docs/pull/1091 | [sbvegan](https://github.com/sbvegan) | 0:07:24 | 0:08:27 | None |\n| Remove node squad and other codeowners | https://github.com/ethereum-optimism/docs/pull/1089 | [bradleycamacho](https://github.com/bradleycamacho) | 0:04:19 | 0:07:37 | None |\n| proposing to combine these interop messaging pages | https://github.com/ethereum-optimism/docs/pull/1088 | [sbvegan](https://github.com/sbvegan) | 3:23:58 | None | None |\n| Public interop devnet details | https://github.com/ethereum-optimism/docs/pull/1087 | [sbvegan](https://github.com/sbvegan) | 0:27:25 | 15:49:06 | None |\n| SendRawTransactionConditional: remove reference to authentication | https://github.com/ethereum-optimism/docs/pull/1086 | [hamdiallam](https://github.com/hamdiallam) | 0:00:57 | 0:30:56 | None |\n| dropping OPM down | https://github.com/ethereum-optimism/docs/pull/1085 | [sbvegan](https://github.com/sbvegan) | 0:51:35 | 1:29:12 | None |\n| How to connect/use the public devnet | https://github.com/ethereum-optimism/docs/pull/1084 | [krofax](https://github.com/krofax) | 10:07:52 | None | None |\n| removing out of date files | https://github.com/ethereum-optimism/docs/pull/1082 | [sbvegan](https://github.com/sbvegan) | 0:05:33 | 0:10:08 | None |\n| remove wallet & cex section | https://github.com/ethereum-optimism/docs/pull/1081 | [sbvegan](https://github.com/sbvegan) | 0:00:29 | 0:12:25 | None |\n| fix: Typo Corrections in Documentation | https://github.com/ethereum-optimism/docs/pull/1074 | [cypherpepe](https://github.com/cypherpepe) | 0:03:06 | 0:04:33 | None |\n| Updated Calculator endpoints | https://github.com/ethereum-optimism/docs/pull/1073 | [krofax](https://github.com/krofax) | 0:05:02 | 0:08:47 | None |\n| Add caveat for the priority fee | https://github.com/ethereum-optimism/docs/pull/1071 | [richardgreg](https://github.com/richardgreg) | 6:17:51 | 6:21:49 | None |\n| Update style-guide.mdx | https://github.com/ethereum-optimism/docs/pull/1070 | [Nicca42](https://github.com/Nicca42) | 0:01:44 | 0:04:48 | None |\n| adding bedrocks activation time | https://github.com/ethereum-optimism/docs/pull/1069 | [sbvegan](https://github.com/sbvegan) | 2 days, 20:18:42 | 2 days, 20:24:14 | None |\n| update audit issue template | https://github.com/ethereum-optimism/docs/pull/1068 | [sbvegan](https://github.com/sbvegan) | 0:18:15 | 0:18:40 | None |\n| remove-wip-callout | https://github.com/ethereum-optimism/docs/pull/1065 | [cpengilly](https://github.com/cpengilly) | 0:09:11 | 0:09:41 | None |\n| viem updates | https://github.com/ethereum-optimism/docs/pull/1064 | [cpengilly](https://github.com/cpengilly) | 0:12:25 | 0:12:31 | None |\n| Update oracles.mdx | https://github.com/ethereum-optimism/docs/pull/1063 | [aseoconnor](https://github.com/aseoconnor) | 3 days, 1:37:44 | 3 days, 1:37:50 | None |\n| Update monthly-issue-metircs.yml | https://github.com/ethereum-optimism/docs/pull/1062 | [sbvegan](https://github.com/sbvegan) | 0:00:54 | 3 days, 9:13:53 | None |\n| SuperchainERC20 best practices | https://github.com/ethereum-optimism/docs/pull/1061 | [bradleycamacho](https://github.com/bradleycamacho) | 6 days, 2:27:51 | 6 days, 10:45:51 | None |\n| Updated Breadcrumb script | https://github.com/ethereum-optimism/docs/pull/1060 | [krofax](https://github.com/krofax) | 0:07:32 | 3 days, 2:20:27 | None |\n| Documentation Improvements: Grammar, Structure, and Readability Fixes | https://github.com/ethereum-optimism/docs/pull/1057 | [zoomyzo](https://github.com/zoomyzo) | 11:45:43 | 3 days, 12:39:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2024-11-01..2024-11-30`\n", "CLOSED", 0, "github-actions", "2024-12-01T00:17:29Z", "2025-01-03T17:28:43Z", "2025-01-03T17:28:42Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6cwdDs", 1067, "Asterisc & Kona Documentation", "There is a second fault proof system under development: \n- Asterisc, a new fault proof VM which is equivalent to Cannon\n- Kona, a new fault proof program which is equivalent to op-program\n\nThese will need documentation.", "CLOSED", 0, "pauldowman", "2024-11-01T22:09:25Z", "2025-01-03T17:36:37Z", "2025-01-03T17:36:37Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6aBeT9", 984, "[2024 Q4 Audit] /chain/testing/dev-node", "<!-- this template is intended for internal OP Labs usage -->\r\n\r\n## Description of the updates required\r\n\r\nThis devnet method is no longer what we're using on the protocol development side. The EF put together a tool called krotosis that we'll utilize. Slipper already has a draft [PR](https://github.com/ethereum-optimism/docs/pull/914) for updating the devnet. However it is aimed at the testnet page so it should be adjusted for this page.\r\n\r\nUpdates it needs:\r\n\r\n- add references to devnet because thats what folks are familiar with\r\n- remove the hosted development node link sentence\r\n- update this from OP Mainnet to OP Stack\r\n- take the information from slipper's PR and update this page\r\n\r\n## Github issue label criteria\r\n\r\n> Choose the appropriate github issue labels for each page.\r\n\r\n<details>\r\n\r\n<summary>Priority</summary>\r\n\r\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\r\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\r\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\r\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\r\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>T-shirt size</summary>\r\n\r\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\r\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\r\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\r\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \r\n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Content evaluation</summary>\r\n- `a-delete`: don't need this page \r\n- `a-duplicate`: some content lives elsewhere \r\n- `a-minor`: needs small revisions \r\n- `a-moderate`: needs moderate revisions \r\n- `a-critical`: needs a lot of work\r\n</details>\r\n\r\n## MDX Metadata format\r\n\r\n> We will be adding better metadata to the header of each page. \r\n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\r\n> Parse the component and feature tags to add.\r\n\r\n```mdx\r\ntags: [\"devnets\", \"eng-platforms\", \"eng-protocol\"]\r\n```\r\n\r\n```mdx\r\n---\r\ntitle: \"Your Title Here\"\r\ntags: [\"tag1\", \"tag2\"]\r\ndescription: \"A short description of the content.\"\r\n---\r\n```\r\n\r\n<details>\r\n<summary>Component tags</summary>\r\n\r\n```\r\nop-node\r\nop-geth\r\nop-reth\r\nop-erigon\r\nop-nethermind\r\nbatcher\r\nstandard-bridge\r\nsequencer\r\nl1-contracts\r\nl2-contracts\r\nprecompiles\r\npredeploys\r\npreinstalls\r\nop-proposer\r\nop-challenger\r\nop-gov-token\r\nop-supervisor\r\nop-conductor\r\nfp-contracts\r\ncannon\r\nop-program\r\nasterisc\r\nkona\r\nsuperchain-registry\r\nsupersim\r\ndev-console\r\nopsm\r\nmcp\r\nmcp-l2\r\ndeputy-guardian\r\nliveness-guard\r\ndispute-mon\r\nop-beat\r\nop-signer\r\nmonitorism\r\nblockspace-charters\r\nop-workbench\r\nkubernetes-infrastructure\r\ndevops-tooling\r\nartifacts-packaging\r\nsequencer-in-a-box\r\ndevnets\r\nop-supervisor\r\nperformance-tooling\r\npeer-management-service\r\nproxyd\r\nzdd-service\r\nsnapman\r\nsecurity-tools\r\nsuperchain-ops\r\nop-deployer\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Engineering tags</summary>\r\n\r\n```\r\neng-platforms\r\neng-growth\r\neng-devx\r\neng-protocol\r\neng-proofs\r\neng-evm\r\neng-security\r\n```\r\n</details>\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-10-13T15:58:59Z", "2024-12-31T01:46:16Z", "2024-12-31T01:46:14Z", "ethereum-optimism/docs", "2025-08-30 23:43:06"]
["I_kwDOKIwiaM6kGx2B", 1200, "2024-11-01..2024-11-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 17:10:11 | 0:51:34 | 1 day, 23:03:25 |\n| Time to close | 1 day, 3:04:24 | 0:59:04 | 14:45:15 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 5 |\n| Number of items closed | 13 |\n| Number of most active mentors | 0 |\n| Total number of items created | 18 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [UI issue]Footer Navigation Links Mismatch | https://github.com/ethereum-optimism/docs/issues/1133 | [opfocus](https://github.com/opfocus) | 0:15:19 | 12 days, 2:59:58 | None |\n| [2024 Q4 Audit] builders/chain-operators/features/preinstalls.mdx | https://github.com/ethereum-optimism/docs/issues/1109 | [ZakAyesh](https://github.com/ZakAyesh) | None | None | None |\n| Refactor architecture for Interop section | https://github.com/ethereum-optimism/docs/issues/1095 | [zainbacchus](https://github.com/zainbacchus) | 1:12:40 | None | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] builders/tools/overview.mdx | https://github.com/ethereum-optimism/docs/issues/1072 | [Wazabie](https://github.com/Wazabie) | None | None | None |\n| Asterisc & Kona Documentation | https://github.com/ethereum-optimism/docs/issues/1067 | [pauldowman](https://github.com/pauldowman) | 0:30:27 | None | None |\n| Docs updates for 64-bit multi-threaded Cannon | https://github.com/ethereum-optimism/docs/issues/1066 | [pauldowman](https://github.com/pauldowman) | 2 days, 18:42:19 | None | None |\n| 2024-10-01..2024-10-31 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1059 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:10 | None |\n| 2024-10-01..2024-10-31 metrics report for opened issues | https://github.com/ethereum-optimism/docs/issues/1058 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:22 | None |\n| 2024-10-01..2024-10-31 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1056 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:48:13 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2024-11-01..2024-11-30`", "CLOSED", 0, "unknown", "2024-12-20T18:16:11Z", "2024-12-23T15:50:21Z", "2024-12-23T15:50:21Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6kGxzD", 1199, "2024-11-01..2024-11-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 12 days, 9:05:04 | 4 days, 12:31:10 | 31 days, 19:02:07 |\n| Time to close | 43 days, 18:55:56 | 4 days, 12:31:10 | 225 days, 10:14:41 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 21 |\n| Number of most active mentors | 0 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1047 | [Saraeutsza](https://github.com/Saraeutsza) | None | 2 days, 2:54:52 | None |\n| Add Blocknative Gas API and Tenderly Tool to Gas Oracle section | https://github.com/ethereum-optimism/docs/issues/1046 | [krofax](https://github.com/krofax) | None | 13 days, 0:11:45 | None |\n| Faucet Error Occurs Frequently at Certain Times | https://github.com/ethereum-optimism/docs/issues/1030 | [fujianggara10](https://github.com/fujianggara10) | 4 days, 12:31:10 | 4 days, 12:31:10 | None |\n| [DOCS] Clean up breadcrumb overview pages | https://github.com/ethereum-optimism/docs/issues/1026 | [krofax](https://github.com/krofax) | None | 18 days, 5:46:20 | None |\n| Feedback for \u201cFjord Fee Parameter Calculator\u201d | https://github.com/ethereum-optimism/docs/issues/1002 | [sashagood](https://github.com/sashagood) | 1:12:16 | 25 days, 1:43:41 | None |\n| [2024 Q4 Audit] stack/differences.mdx | https://github.com/ethereum-optimism/docs/issues/1000 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:13:16 | None |\n| [2024 Q4 Audit] chain/differences.mdx | https://github.com/ethereum-optimism/docs/issues/999 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:14:54 | None |\n| [DOCS] Explain tx finality, fault proof window, and sequencer policy | https://github.com/ethereum-optimism/docs/issues/942 | [zainbacchus](https://github.com/zainbacchus) | 12 days, 17:26:12 | 37 days, 20:04:27 | None |\n| Feedback for \u201cNetwork Upgrades\u201d [Add Bedrock Date?] | https://github.com/ethereum-optimism/docs/issues/927 | [MSilb7](https://github.com/MSilb7) | 2:09:37 | 40 days, 7:21:13 | None |\n| [TUTORIAL] update bridging eth with the sdk to use viem | https://github.com/ethereum-optimism/docs/issues/591 | [sbvegan](https://github.com/sbvegan) | None | 225 days, 10:14:41 | None |\n| [DOCS] Add caveat for the priority fee | https://github.com/ethereum-optimism/docs/issues/559 | [sbvegan](https://github.com/sbvegan) | None | 237 days, 2:36:27 | None |\n| [DOCS] add eip1559 Canyon configurations | https://github.com/ethereum-optimism/docs/issues/444 | [sbvegan](https://github.com/sbvegan) | 44 days, 12:06:03 | 284 days, 10:39:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-11-01..2024-11-30 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "unknown", "2024-12-20T18:16:04Z", "2024-12-23T15:50:21Z", "2024-12-23T15:50:21Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6kGvOz", 1198, "2024-11-01..2024-11-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 17:10:11 | 0:51:34 | 1 day, 23:03:25 |\n| Time to close | 1 day, 3:04:24 | 0:59:04 | 14:45:15 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 5 |\n| Number of items closed | 13 |\n| Number of most active mentors | 0 |\n| Total number of items created | 18 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [UI issue]Footer Navigation Links Mismatch | https://github.com/ethereum-optimism/docs/issues/1133 | [opfocus](https://github.com/opfocus) | 0:15:19 | 12 days, 2:59:58 | None |\n| [2024 Q4 Audit] builders/chain-operators/features/preinstalls.mdx | https://github.com/ethereum-optimism/docs/issues/1109 | [ZakAyesh](https://github.com/ZakAyesh) | None | None | None |\n| Refactor architecture for Interop section | https://github.com/ethereum-optimism/docs/issues/1095 | [zainbacchus](https://github.com/zainbacchus) | 1:12:40 | None | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] builders/tools/overview.mdx | https://github.com/ethereum-optimism/docs/issues/1072 | [Wazabie](https://github.com/Wazabie) | None | None | None |\n| Asterisc & Kona Documentation | https://github.com/ethereum-optimism/docs/issues/1067 | [pauldowman](https://github.com/pauldowman) | 0:30:27 | None | None |\n| Docs updates for 64-bit multi-threaded Cannon | https://github.com/ethereum-optimism/docs/issues/1066 | [pauldowman](https://github.com/pauldowman) | 2 days, 18:42:19 | None | None |\n| 2024-10-01..2024-10-31 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1059 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:10 | None |\n| 2024-10-01..2024-10-31 metrics report for opened issues | https://github.com/ethereum-optimism/docs/issues/1058 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:22 | None |\n| 2024-10-01..2024-10-31 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1056 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:48:13 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2024-11-01..2024-11-30`", "CLOSED", 0, "unknown", "2024-12-20T18:10:04Z", "2024-12-23T15:50:21Z", "2024-12-23T15:50:20Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6kGvMz", 1197, "2024-11-01..2024-11-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 12 days, 9:05:04 | 4 days, 12:31:10 | 31 days, 19:02:07 |\n| Time to close | 43 days, 18:55:56 | 4 days, 12:31:10 | 225 days, 10:14:41 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 21 |\n| Number of most active mentors | 0 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1047 | [Saraeutsza](https://github.com/Saraeutsza) | None | 2 days, 2:54:52 | None |\n| Add Blocknative Gas API and Tenderly Tool to Gas Oracle section | https://github.com/ethereum-optimism/docs/issues/1046 | [krofax](https://github.com/krofax) | None | 13 days, 0:11:45 | None |\n| Faucet Error Occurs Frequently at Certain Times | https://github.com/ethereum-optimism/docs/issues/1030 | [fujianggara10](https://github.com/fujianggara10) | 4 days, 12:31:10 | 4 days, 12:31:10 | None |\n| [DOCS] Clean up breadcrumb overview pages | https://github.com/ethereum-optimism/docs/issues/1026 | [krofax](https://github.com/krofax) | None | 18 days, 5:46:20 | None |\n| Feedback for \u201cFjord Fee Parameter Calculator\u201d | https://github.com/ethereum-optimism/docs/issues/1002 | [sashagood](https://github.com/sashagood) | 1:12:16 | 25 days, 1:43:41 | None |\n| [2024 Q4 Audit] stack/differences.mdx | https://github.com/ethereum-optimism/docs/issues/1000 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:13:16 | None |\n| [2024 Q4 Audit] chain/differences.mdx | https://github.com/ethereum-optimism/docs/issues/999 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:14:54 | None |\n| [DOCS] Explain tx finality, fault proof window, and sequencer policy | https://github.com/ethereum-optimism/docs/issues/942 | [zainbacchus](https://github.com/zainbacchus) | 12 days, 17:26:12 | 37 days, 20:04:27 | None |\n| Feedback for \u201cNetwork Upgrades\u201d [Add Bedrock Date?] | https://github.com/ethereum-optimism/docs/issues/927 | [MSilb7](https://github.com/MSilb7) | 2:09:37 | 40 days, 7:21:13 | None |\n| [TUTORIAL] update bridging eth with the sdk to use viem | https://github.com/ethereum-optimism/docs/issues/591 | [sbvegan](https://github.com/sbvegan) | None | 225 days, 10:14:41 | None |\n| [DOCS] Add caveat for the priority fee | https://github.com/ethereum-optimism/docs/issues/559 | [sbvegan](https://github.com/sbvegan) | None | 237 days, 2:36:27 | None |\n| [DOCS] add eip1559 Canyon configurations | https://github.com/ethereum-optimism/docs/issues/444 | [sbvegan](https://github.com/sbvegan) | 44 days, 12:06:03 | 284 days, 10:39:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-11-01..2024-11-30 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "unknown", "2024-12-20T18:09:58Z", "2024-12-23T15:50:20Z", "2024-12-23T15:50:20Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6kGtcF", 1196, "2024-11-01..2024-11-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 17:10:11 | 0:51:34 | 1 day, 23:03:25 |\n| Time to close | 1 day, 3:04:24 | 0:59:04 | 14:45:15 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 5 |\n| Number of items closed | 13 |\n| Number of most active mentors | 0 |\n| Total number of items created | 18 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [UI issue]Footer Navigation Links Mismatch | https://github.com/ethereum-optimism/docs/issues/1133 | [opfocus](https://github.com/opfocus) | 0:15:19 | 12 days, 2:59:58 | None |\n| [2024 Q4 Audit] builders/chain-operators/features/preinstalls.mdx | https://github.com/ethereum-optimism/docs/issues/1109 | [ZakAyesh](https://github.com/ZakAyesh) | None | None | None |\n| Refactor architecture for Interop section | https://github.com/ethereum-optimism/docs/issues/1095 | [zainbacchus](https://github.com/zainbacchus) | 1:12:40 | None | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] builders/tools/overview.mdx | https://github.com/ethereum-optimism/docs/issues/1072 | [Wazabie](https://github.com/Wazabie) | None | None | None |\n| Asterisc & Kona Documentation | https://github.com/ethereum-optimism/docs/issues/1067 | [pauldowman](https://github.com/pauldowman) | 0:30:27 | None | None |\n| Docs updates for 64-bit multi-threaded Cannon | https://github.com/ethereum-optimism/docs/issues/1066 | [pauldowman](https://github.com/pauldowman) | 2 days, 18:42:19 | None | None |\n| 2024-10-01..2024-10-31 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1059 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:10 | None |\n| 2024-10-01..2024-10-31 metrics report for opened issues | https://github.com/ethereum-optimism/docs/issues/1058 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:22 | None |\n| 2024-10-01..2024-10-31 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1056 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:48:13 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2024-11-01..2024-11-30`", "CLOSED", 0, "unknown", "2024-12-20T18:05:36Z", "2024-12-23T15:50:20Z", "2024-12-23T15:50:20Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6kGtZ5", 1195, "2024-11-01..2024-11-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 12 days, 9:05:04 | 4 days, 12:31:10 | 31 days, 19:02:07 |\n| Time to close | 43 days, 18:55:56 | 4 days, 12:31:10 | 225 days, 10:14:41 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 21 |\n| Number of most active mentors | 0 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1047 | [Saraeutsza](https://github.com/Saraeutsza) | None | 2 days, 2:54:52 | None |\n| Add Blocknative Gas API and Tenderly Tool to Gas Oracle section | https://github.com/ethereum-optimism/docs/issues/1046 | [krofax](https://github.com/krofax) | None | 13 days, 0:11:45 | None |\n| Faucet Error Occurs Frequently at Certain Times | https://github.com/ethereum-optimism/docs/issues/1030 | [fujianggara10](https://github.com/fujianggara10) | 4 days, 12:31:10 | 4 days, 12:31:10 | None |\n| [DOCS] Clean up breadcrumb overview pages | https://github.com/ethereum-optimism/docs/issues/1026 | [krofax](https://github.com/krofax) | None | 18 days, 5:46:20 | None |\n| Feedback for \u201cFjord Fee Parameter Calculator\u201d | https://github.com/ethereum-optimism/docs/issues/1002 | [sashagood](https://github.com/sashagood) | 1:12:16 | 25 days, 1:43:41 | None |\n| [2024 Q4 Audit] stack/differences.mdx | https://github.com/ethereum-optimism/docs/issues/1000 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:13:16 | None |\n| [2024 Q4 Audit] chain/differences.mdx | https://github.com/ethereum-optimism/docs/issues/999 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:14:54 | None |\n| [DOCS] Explain tx finality, fault proof window, and sequencer policy | https://github.com/ethereum-optimism/docs/issues/942 | [zainbacchus](https://github.com/zainbacchus) | 12 days, 17:26:12 | 37 days, 20:04:27 | None |\n| Feedback for \u201cNetwork Upgrades\u201d [Add Bedrock Date?] | https://github.com/ethereum-optimism/docs/issues/927 | [MSilb7](https://github.com/MSilb7) | 2:09:37 | 40 days, 7:21:13 | None |\n| [TUTORIAL] update bridging eth with the sdk to use viem | https://github.com/ethereum-optimism/docs/issues/591 | [sbvegan](https://github.com/sbvegan) | None | 225 days, 10:14:41 | None |\n| [DOCS] Add caveat for the priority fee | https://github.com/ethereum-optimism/docs/issues/559 | [sbvegan](https://github.com/sbvegan) | None | 237 days, 2:36:27 | None |\n| [DOCS] add eip1559 Canyon configurations | https://github.com/ethereum-optimism/docs/issues/444 | [sbvegan](https://github.com/sbvegan) | 44 days, 12:06:03 | 284 days, 10:39:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-11-01..2024-11-30 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "unknown", "2024-12-20T18:05:30Z", "2024-12-23T15:50:19Z", "2024-12-23T15:50:19Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6kGsQx", 1194, "2024-11-01..2024-11-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 17:10:11 | 0:51:34 | 1 day, 23:03:25 |\n| Time to close | 1 day, 3:04:24 | 0:59:04 | 14:45:15 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 5 |\n| Number of items closed | 13 |\n| Number of most active mentors | 0 |\n| Total number of items created | 18 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [UI issue]Footer Navigation Links Mismatch | https://github.com/ethereum-optimism/docs/issues/1133 | [opfocus](https://github.com/opfocus) | 0:15:19 | 12 days, 2:59:58 | None |\n| [2024 Q4 Audit] builders/chain-operators/features/preinstalls.mdx | https://github.com/ethereum-optimism/docs/issues/1109 | [ZakAyesh](https://github.com/ZakAyesh) | None | None | None |\n| Refactor architecture for Interop section | https://github.com/ethereum-optimism/docs/issues/1095 | [zainbacchus](https://github.com/zainbacchus) | 1:12:40 | None | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] builders/tools/overview.mdx | https://github.com/ethereum-optimism/docs/issues/1072 | [Wazabie](https://github.com/Wazabie) | None | None | None |\n| Asterisc & Kona Documentation | https://github.com/ethereum-optimism/docs/issues/1067 | [pauldowman](https://github.com/pauldowman) | 0:30:27 | None | None |\n| Docs updates for 64-bit multi-threaded Cannon | https://github.com/ethereum-optimism/docs/issues/1066 | [pauldowman](https://github.com/pauldowman) | 2 days, 18:42:19 | None | None |\n| 2024-10-01..2024-10-31 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1059 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:10 | None |\n| 2024-10-01..2024-10-31 metrics report for opened issues | https://github.com/ethereum-optimism/docs/issues/1058 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:33:22 | None |\n| 2024-10-01..2024-10-31 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1056 | [github-actions[bot]](https://github.com/github-actions[bot]) | None | 14:48:13 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2024-11-01..2024-11-30`", "CLOSED", 0, "unknown", "2024-12-20T18:02:29Z", "2024-12-23T15:50:19Z", "2024-12-23T15:50:19Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6kGsPG", 1193, "2024-11-01..2024-11-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 12 days, 9:05:04 | 4 days, 12:31:10 | 31 days, 19:02:07 |\n| Time to close | 43 days, 18:55:56 | 4 days, 12:31:10 | 225 days, 10:14:41 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 21 |\n| Number of most active mentors | 0 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Testing error with Op-deployer on Holesky | https://github.com/ethereum-optimism/docs/issues/1142 | [ZakAyesh](https://github.com/ZakAyesh) | None | 0:13:33 | None |\n| [2024 Q4 Audit] /builders/chain-operators/tutorials/sdk | https://github.com/ethereum-optimism/docs/issues/1090 | [sbvegan](https://github.com/sbvegan) | None | 0:13:46 | None |\n| [DOCS]Remove/update using the optimism SDK page | https://github.com/ethereum-optimism/docs/issues/1083 | [krofax](https://github.com/krofax) | None | 12:09:24 | None |\n| [2024 Q4 Audit] /builders/cex-wallet-developers/wallet-support | https://github.com/ethereum-optimism/docs/issues/1080 | [sbvegan](https://github.com/sbvegan) | None | 0:25:12 | None |\n| [2024 Q4 Audit] builders/cex-wallet-developers/cex-support | https://github.com/ethereum-optimism/docs/issues/1079 | [sbvegan](https://github.com/sbvegan) | None | 0:26:20 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/optimization | https://github.com/ethereum-optimism/docs/issues/1078 | [sbvegan](https://github.com/sbvegan) | None | 0:34:04 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/system-contracts | https://github.com/ethereum-optimism/docs/issues/1077 | [sbvegan](https://github.com/sbvegan) | None | 0:56:24 | None |\n| [2024 Q4 Audit] /builders/app-developers/contracts/compatibility | https://github.com/ethereum-optimism/docs/issues/1076 | [sbvegan](https://github.com/sbvegan) | None | 0:59:04 | None |\n| [2024 Q4 Audit] builders/app-developers/tutorials/first-contract.mdx | https://github.com/ethereum-optimism/docs/issues/1075 | [sbvegan](https://github.com/sbvegan) | None | 1:04:37 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1047 | [Saraeutsza](https://github.com/Saraeutsza) | None | 2 days, 2:54:52 | None |\n| Add Blocknative Gas API and Tenderly Tool to Gas Oracle section | https://github.com/ethereum-optimism/docs/issues/1046 | [krofax](https://github.com/krofax) | None | 13 days, 0:11:45 | None |\n| Faucet Error Occurs Frequently at Certain Times | https://github.com/ethereum-optimism/docs/issues/1030 | [fujianggara10](https://github.com/fujianggara10) | 4 days, 12:31:10 | 4 days, 12:31:10 | None |\n| [DOCS] Clean up breadcrumb overview pages | https://github.com/ethereum-optimism/docs/issues/1026 | [krofax](https://github.com/krofax) | None | 18 days, 5:46:20 | None |\n| Feedback for \u201cFjord Fee Parameter Calculator\u201d | https://github.com/ethereum-optimism/docs/issues/1002 | [sashagood](https://github.com/sashagood) | 1:12:16 | 25 days, 1:43:41 | None |\n| [2024 Q4 Audit] stack/differences.mdx | https://github.com/ethereum-optimism/docs/issues/1000 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:13:16 | None |\n| [2024 Q4 Audit] chain/differences.mdx | https://github.com/ethereum-optimism/docs/issues/999 | [sbvegan](https://github.com/sbvegan) | None | 15 days, 9:14:54 | None |\n| [DOCS] Explain tx finality, fault proof window, and sequencer policy | https://github.com/ethereum-optimism/docs/issues/942 | [zainbacchus](https://github.com/zainbacchus) | 12 days, 17:26:12 | 37 days, 20:04:27 | None |\n| Feedback for \u201cNetwork Upgrades\u201d [Add Bedrock Date?] | https://github.com/ethereum-optimism/docs/issues/927 | [MSilb7](https://github.com/MSilb7) | 2:09:37 | 40 days, 7:21:13 | None |\n| [TUTORIAL] update bridging eth with the sdk to use viem | https://github.com/ethereum-optimism/docs/issues/591 | [sbvegan](https://github.com/sbvegan) | None | 225 days, 10:14:41 | None |\n| [DOCS] Add caveat for the priority fee | https://github.com/ethereum-optimism/docs/issues/559 | [sbvegan](https://github.com/sbvegan) | None | 237 days, 2:36:27 | None |\n| [DOCS] add eip1559 Canyon configurations | https://github.com/ethereum-optimism/docs/issues/444 | [sbvegan](https://github.com/sbvegan) | 44 days, 12:06:03 | 284 days, 10:39:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2024-11-01..2024-11-30 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "unknown", "2024-12-20T18:02:22Z", "2024-12-23T15:50:18Z", "2024-12-23T15:50:18Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKIwiaM6cJbbe", 1041, "[2024 Q4 Audit] builders/chain-operators/management/operations.mdx", "<!-- this template is intended for internal OP Labs usage -->\r\n\r\n## Description of the updates required\r\n\r\n- the title of this page in the _meta.json should be rollup operations\r\n- the proposer and batcher should be added to the stopping and starting your rollup\r\n- This should have `--network=op-sepolia` as an example: https://docs.optimism.io/builders/chain-operators/management/operations#check-the-flags\r\n\r\n> Write a description of the current state of the page.\r\n\r\n## Github issue label criteria\r\n\r\n> Choose the appropriate github issue labels for each page.\r\n\r\n<details>\r\n\r\n<summary>Priority</summary>\r\n\r\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\r\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\r\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\r\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\r\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>T-shirt size</summary>\r\n\r\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\r\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\r\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\r\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \r\n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Content evaluation</summary>\r\n- `a-delete`: don't need this page \r\n- `a-duplicate`: some content lives elsewhere \r\n- `a-minor`: needs small revisions \r\n- `a-moderate`: needs moderate revisions \r\n- `a-critical`: needs a lot of work\r\n</details>\r\n\r\n## MDX Metadata format\r\n\r\n> We will be adding better metadata to the header of each page. \r\n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\r\n> Parse the component and feature tags to add.\r\n\r\n```mdx\r\ntags: [\"op-node\", \"op-geth\", \"op-proposer\", \"op-batcher\", \"op-challenger\", \"eng-platforms\"]\r\n```\r\n\r\n```mdx\r\n---\r\ntitle: \"Your Title Here\"\r\ntags: [\"tag1\", \"tag2\"]\r\ndescription: \"A short description of the content.\"\r\n---\r\n```\r\n\r\n<details>\r\n<summary>Component tags</summary>\r\n\r\n```\r\nop-node\r\nop-geth\r\nop-reth\r\nop-erigon\r\nop-nethermind\r\nbatcher\r\nstandard-bridge\r\nsequencer\r\nl1-contracts\r\nl2-contracts\r\nprecompiles\r\npredeploys\r\npreinstalls\r\nop-proposer\r\nop-challenger\r\nop-gov-token\r\nop-supervisor\r\nop-conductor\r\nfp-contracts\r\ncannon\r\nop-program\r\nasterisc\r\nkona\r\nsuperchain-registry\r\nsupersim\r\ndev-console\r\nopsm\r\nmcp\r\nmcp-l2\r\ndeputy-guardian\r\nliveness-guard\r\ndispute-mon\r\nop-beat\r\nop-signer\r\nmonitorism\r\nblockspace-charters\r\nop-workbench\r\nkubernetes-infrastructure\r\ndevops-tooling\r\nartifacts-packaging\r\nsequencer-in-a-box\r\ndevnets\r\nop-supervisor\r\nperformance-tooling\r\npeer-management-service\r\nproxyd\r\nzdd-service\r\nsnapman\r\nsecurity-tools\r\nsuperchain-ops\r\nop-deployer\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Engineering tags</summary>\r\n\r\n```\r\neng-platforms\r\neng-growth\r\neng-devx\r\neng-protocol\r\neng-proofs\r\neng-evm\r\neng-security\r\n```\r\n</details>\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-10-28T22:44:42Z", "2024-12-28T05:48:33Z", "2024-12-28T05:48:33Z", "ethereum-optimism/docs", "2025-08-30 23:43:09"]
["I_kwDOKSJyfM6lMfVw", 612, "POC/Research Spike: Kapa.ai docs integration", "", "OPEN", 0, "fainashalts", "2025-01-06T21:56:48Z", "2025-01-06T21:57:08Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:13:21"]
["I_kwDOKSJyfM6kBFkP", 599, "Dev Console: Login & Profile", "We need to ensure our login flow creates a user profile that can store a user's API key for access to the faucet and potentially other services we offer in the future. \n\nRequirements (from[ Dev Console PRD](https://docs.google.com/document/d/1HQkgJP3eETHGQy3rm18X3suu2taaJ3UjYILaqXzhLTo/edit?tab=t.0)): \n\n- [ ] User should be required to first connect a wallet to the console for authentication\n- [ ] Connection session should persist even after closing the window when user returns\n- [ ] User should be required to sign a message authorizing access to their profile\n- [ ] Once connected, user should have access to profile where they can configure the rest of their information (aligned to retrofunding)\n- [ ] User should also have access to disconnect existing wallet\n- [ ] User Profile\n- [ ] User should be able to connect farcasterID\n- [ ] If user has existing retrofunding login, this information should be automatically fetched\n- [ ] If not, then fields relevant to retrofunding should be able to be shown via an expandable section\n- [ ] If user has connected from wallet that already has verified RPGF profile, should be able to bring this in without FID\n\n\n**Blocked By:** #598 ", "OPEN", 0, "fainashalts", "2024-12-20T01:43:41Z", "2025-01-06T23:25:44Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:13:21"]
["I_kwDOKSJyfM6ahH-N", 506, "Interop Prediction Market Reference App", "This is the parent issue for Interop reference examples to share for Devcon. Tic Tac Toe is definitely on the list, a SuperchainERC20 implementation and crosschain loan implementation would be a great trifecta. \r\n\r\nIssues related to this task should be made child issues.\r\n\r\nDesign support is likely needed for any reference implementations that contain a frontend.", "CLOSED", 0, "fainashalts", "2024-10-16T16:13:21Z", "2025-01-09T21:48:56Z", "2025-01-09T21:48:56Z", "ethereum-optimism/ecosystem", "2025-08-31 00:13:21"]
["I_kwDOKIwiaM6lCHwj", 1214, "[DOCS] Missing href in Link: ./OP_STACK/Superchain_explainer", "There is a broken link in the documentation related to OP Stack. The link referred to \"```Superchain explainer```\" is missing an href attribute, so it does not redirect to any resource. \n\nThis makes it impossible for users to access the intended explanation.\n\n\n<img width=\"1917\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/121306b2-a9cd-4b10-9077-84a8932496d9\" />\n\n", "CLOSED", 0, "AGMASO", "2025-01-04T11:28:10Z", "2025-01-08T21:14:15Z", "2025-01-08T21:14:15Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOKIwiaM6jG8LL", 1176, "[2024 Q4 Audit] [Update focus and scope]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\nUpdate the focus and scope on each audits reports\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n", "CLOSED", 0, "krofax", "2024-12-12T17:31:28Z", "2025-01-06T11:35:20Z", "2025-01-06T11:35:20Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOKIwiaM6dF3Kw", 1072, "[2024 Q4 Audit] builders/tools/overview.mdx", "<!-- this template is intended for internal OP Labs usage -->\r\n\r\n## Description of the updates required\r\n\r\nDue to the SDK deprecation, the link under \"OP tools\" should be updated to either:\r\n\r\n1. Redirect to Viem, replacing the SDK link entirely, or\r\n2. Add a link to Viem alongside the SDK link for now, with plans to remove the SDK link later.\r\n\r\nChoose the approach that best aligns with our documentation direction and SDK deprecation.\r\n\r\n## MDX Metadata format\r\n\r\n> We will be adding better metadata to the header of each page. \r\n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\r\n> Parse the component and feature tags to add.\r\n\r\n```mdx\r\ntags: [\"devops-tooling\", \"performance-tooling\", \"eng-devx\"]\r\n```\r\n\r\n```mdx\r\n---\r\ntitle: \"Your Title Here\"\r\ntags: [\"tag1\", \"tag2\"]\r\ndescription: \"A short description of the content.\"\r\n---\r\n```\r\n\r\n<details>\r\n<summary>Component tags</summary>\r\n\r\n```\r\nop-node\r\nop-geth\r\nop-reth\r\nop-erigon\r\nop-nethermind\r\nbatcher\r\nstandard-bridge\r\nsequencer\r\nl1-contracts\r\nl2-contracts\r\nprecompiles\r\npredeploys\r\npreinstalls\r\nop-proposer\r\nop-challenger\r\nop-gov-token\r\nop-supervisor\r\nop-conductor\r\nfp-contracts\r\ncannon\r\nop-program\r\nasterisc\r\nkona\r\nsuperchain-registry\r\nsupersim\r\ndev-console\r\nopsm\r\nmcp\r\nmcp-l2\r\ndeputy-guardian\r\nliveness-guard\r\ndispute-mon\r\nop-beat\r\nop-signer\r\nmonitorism\r\nblockspace-charters\r\nop-workbench\r\nkubernetes-infrastructure\r\ndevops-tooling\r\nartifacts-packaging\r\nsequencer-in-a-box\r\ndevnets\r\nop-supervisor\r\nperformance-tooling\r\npeer-management-service\r\nproxyd\r\nzdd-service\r\nsnapman\r\nsecurity-tools\r\nsuperchain-ops\r\nop-deployer\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Engineering tags</summary>\r\n\r\n```\r\neng-platforms\r\neng-growth\r\neng-devx\r\neng-protocol\r\neng-proofs\r\neng-evm\r\neng-security\r\n```\r\n</details>\r\n\r\nsoyboy edit: I updated the engineering org to devx because its closer related to application developer and less on the infrastructure side\r\n", "CLOSED", 0, "Wazabie", "2024-11-05T14:03:27Z", "2025-01-08T21:14:35Z", "2025-01-08T21:14:35Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOKIwiaM6cwcZE", 1066, "Docs updates for 64-bit multi-threaded Cannon", "Cannon is undergoing a major refactor, it will support multi-threading and will become a 64-bit architecture instead of 32-bit. \n\nThis won't introduce any new sections into the docs but changes some details of sections that reference Cannon and op-challenger.\n\nHere's a list of things that will be affected (incomplete - TODO)\n- [ ] Details on the Cannon page (e.g. contract names), reference to single thread context\n- [ ] Challenger command-line options (?)\n- [ ] Breaking changes doc similar to [this one](https://deploy-preview-1108--docs-optimism.netlify.app/builders/notices/holocene-changes)\n- [ ] TODO what else", "CLOSED", 0, "pauldowman", "2024-11-01T21:43:43Z", "2025-01-06T18:14:47Z", "2025-01-06T18:14:46Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOKIwiaM6DLkO7", 595, "[TUTORIAL] update estimating transaction costs (with the sdk) to viem", "Optimism SDK is now in maintenance mode and we want to start sending developers to viem instead since it supports fault proofs. This means all the sdk tutorials will need to revised for viem. This issue if for 1 of 7 SDK tutorials that needs to be rewritten for [viem](https://viem.sh/) \ud83d\udc9f ", "CLOSED", 0, "sbvegan", "2024-03-21T18:06:35Z", "2025-01-06T18:29:28Z", "2025-01-06T18:29:27Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOKIwiaM6DLkNq", 594, "[TUTORIAL] tracing deposits and withdrawals (with the sdk) to viem", "Optimism SDK is now in maintenance mode and we want to start sending developers to viem instead since it supports fault proofs. This means all the sdk tutorials will need to revised for viem. This issue if for 1 of 7 SDK tutorials that needs to be rewritten for [viem](https://viem.sh/) \ud83d\udc9f ", "CLOSED", 0, "sbvegan", "2024-03-21T18:06:32Z", "2025-01-06T18:26:44Z", "2025-01-06T18:26:43Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOKIwiaM6DLkMa", 593, "[TUTORIAL] update viewing deposits and withdrawals (with the sdk) to viem", "Optimism SDK is now in maintenance mode and we want to start sending developers to viem instead since it supports fault proofs. This means all the sdk tutorials will need to revised for viem. This issue if for 1 of 7 SDK tutorials that needs to be rewritten for [viem](https://viem.sh/) \ud83d\udc9f ", "CLOSED", 0, "sbvegan", "2024-03-21T18:06:30Z", "2025-01-06T18:28:42Z", "2025-01-06T18:28:41Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOKIwiaM6B8BOa", 555, "[DOCS] Protocol Versions", "<!-- please fill out the following the best to your ability and properly label the issue -->\r\n\r\n## Brief Description of the Docs Request\r\n\r\nAdd info about protocol version signaling.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nA place to point node operators to, to understand what the protocol version is, and how it affects their nodes. Also how to configure their nodes to halt or not halt on unsupported required versions.\r\n\r\n## Links to Related Pages\r\n\r\n[specs](https://specs.optimism.io/protocol/superchain-upgrades.html#superchain-version-signaling)\r\n\r\n\r\n", "CLOSED", 0, "sebastianst", "2024-03-11T19:03:14Z", "2025-01-06T17:46:19Z", "2025-01-06T17:46:18Z", "ethereum-optimism/docs", "2025-08-31 00:13:24"]
["I_kwDOLB-lzc6lf0na", 491, "Add default label `S-needs-triage` to issues", "Add label `S-needs-triage` to issue template.\n\n**Additional context**\n`S-needs-triage` label is an indication to devs that this issue is from an external contributor and has not yet been read by any other dev on the team.\n\nRef https://github.com/paradigmxyz/reth/blob/28d52312acd46be2bfc46661a7b392feaa2bd4c5/.github/ISSUE_TEMPLATE/feature.yml?plain=1#L3", "OPEN", 0, "emhane", "2025-01-09T00:14:54Z", "2025-01-09T00:15:45Z", null, "ethereum-optimism/specs", "2025-08-31 00:13:29"]
["I_kwDOLB-lzc6lftgd", 490, "Stale issue workflow", "Add ci workflow to run on cronjob for labelling stale issues and closing issues labelled `S-stale` 7 days later.\n\n**Additional context**\n\nIf issue also has `S-prevent-stale` label it should be left open\n\nRef: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/stale.yml", "OPEN", 0, "emhane", "2025-01-08T23:49:39Z", "2025-01-09T00:21:51Z", null, "ethereum-optimism/specs", "2025-08-31 00:13:29"]
["I_kwDOLB-lzc6inRsP", 477, "Interop Naming", "Opening this issue for discussion\n\nThere is often confusion around the term \"message\" as it is in practice it is a log. The original name was chosen to be generic over the data structure. We should consider renaming things so that its more clear exactly what data structures are used.\n\nFor example we could rename the `validateMessage` function to `validateLog` and rename `executeMessage` to `executeLog`.\n\nWe could also rename the more generic terms \"initiating message\" and \"executing message\".\n\nThis is a heavily breaking change and should be done sooner rather than later", "OPEN", 0, "tynes", "2024-12-09T20:35:00Z", "2025-01-08T23:16:19Z", null, "ethereum-optimism/specs", "2025-08-31 00:13:29"]
["I_kwDOLB-lzc6boPuG", 440, "On Scaling Interop with zk Proofs", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe optimistic based interop scheme has this concept of dependencies, where a chain can depend on another chain. When a chain is defined as a dependency, it means that the dependent chain's outputs are required as inputs to the chain. All L2 OP Stack chains consider L1 as a dependency, this means that all L1 receipts and transactions are used as inputs to creating the L2 chain.\r\n\r\nThe special property of L1 as a dependency is that it has the ability to originate **force include** transactions, also known as deposit transactions. To have deterministic deposit transactions, there is a synchrony assumption with the L2's progression being dependent on the liveness and ability to connect to the L1. From time to time, the L2's connection to a L1 node is lost.\r\n\r\nIn the world of OP Stack interop, it is possible to define a dependency on another L2 chain. Between L2s, there is no concept of force include transactions. If there was, it would create massive synchrony issues - if a single remote chain falls out of being in sync at the tip, it could cause a cascading reorg or chain halt across all of the interoperable chains as the chain notices that it doesn't have all of the inputs required to progress correctly.\r\n\r\nIt is not scalable to require the outputs of another chain as inputs to a chain. In the longer term, we need some sort of succinct proof to reduce the need to fully execute dependent chains. One way to do this is to update the interop scheme so that it allows inbound messages from chains in the dependency set OR chains that have been zk proven. This can happen 100% at the application layer.\r\n\r\nThe solution involves 2 types of proofs that together are able to enable a backwards compatible API so that from the point of view of a developer, the exact same tooling for sending cross chain messages will just work.\r\n- Remote safe output extension proof\r\n- Log inclusion proof\r\n\r\nThe remote safe output extension proof exists to extend the \"finalized\" view of a remote chain. This can be thought about like how a light client syncs the headers of a chain. The proof program would need to handle committing to all of the execution of a chain between two points.\r\n\r\nThe log inclusion proof exists to bind an identifier + log hash as correctly paired and part of the canonical chain. This could in theory be a merkle proof, but we do not have access to every historical block header on chain. The proof program would need to walk back from a finalized anchor point and show that the log does exist in the chain at the given identifier.\r\n\r\nThis scheme is meant to remove the need to fully sync all chains that are interoperable. As long as one person is creating a zk proof for a chain, then that zk proof can be used to process inbound messages from that chain. This scheme still depends on governance, as you do not want to interop with chains that are not stage 1/2 or have backdoors in their system.\r\n\r\nWe may want to consider the possibility of requiring multiproof for this scheme and having a \"maturation period\" before the proofs can be considered finalized. During this maturation period, it could be possible to overturn the results of a proof. In a stage 2 like system, if there is a disagreement between the multiproof then it would result in the interop protocol being paused and only restartable by a security council.\r\n\r\nThe following pseudocode shows how this can be possible to implement. This does not include all possible details and is meant more as an exercise to show what could be possible. Modified from [here](https://github.com/ethereum-optimism/optimism/blob/196613d916bbb866f87391b43bc76cb2259abd4a/packages/contracts-bedrock/src/L2/CrossL2Inbox.sol#L176).\r\n\r\n```solidity\r\n    // the L2 block number of remote chains by chain id, the block number that they have been proven up to\r\n    mapping safeOutputs(uint256 _chainId => uint256 _blockNumber);\r\n    // log hashes that have been proven to be included are in here\r\n    mapping provenLogs(bytes32 _hash => bool _proven);\r\n\r\n    function _checkIdentifier(Identifier calldata _id, bytes32 _logHash) internal view {\r\n        if (_id.timestamp > block.timestamp || _id.timestamp <= interopStart()) revert InvalidTimestamp();\r\n        bool isInDependencySet = IDependencySet(Predeploys.L1_BLOCK_ATTRIBUTES).isInDependencySet(_id.chainId);\r\n        bool isZkProven = checkZkProven(_id, _logHash);\r\n        if (!isInDependencySet && !isZkProven) {\r\n          revert Invalid();\r\n        }\r\n    }\r\n\r\n    function checkZkProven(Identifier calldata _id, bytes32 _logHash) internal {\r\n       uint256 viewHeight = safeOutputs[_id.chainId];\r\n       bool proven = provenLogs[_logHash];\r\n       if (_id.blockNumber <= viewHeight && proven) return true;\r\n       return false;\r\n    }\r\n\r\n    function proveChain(uint256 _chainId, uint256 _blockHeight, bytes memory _proof) external {\r\n       bool verified = verifyProof(_chainId ,_blockHeight, _proof); \r\n       if (!verified) revert InvalidProof();\r\n       safeOutputs[_chainId] = Math.max(_blockHeight, safeOutputs[_chainId]);\r\n    }\r\n\r\n    function proveLog(bytes32 _logHash, Identifier memory _id, bytes memory _proof) external {\r\n        bool verified = verifyLogInclusion(_logHash, _id, _proof);\r\n        if (!verified) revert InvalidProof();\r\n        if (safeOutputs[_id.chainId] < _id.blockNumber) revert InvalidProof();\r\n        // TODO: it may be required to hash together the identifier and the log hash for safety purposes\r\n        provenLogs[_logHash] = true;\r\n    }\r\n```", "OPEN", 0, "tynes", "2024-10-24T09:36:48Z", "2025-01-08T23:18:11Z", null, "ethereum-optimism/specs", "2025-08-31 00:13:29"]
["I_kwDOLB-lzc6Zdogc", 420, "On Cross Chain State Consumption", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nAs specified, the interop protocol is able to reliably observe the logs of remote chains. This is done using a single invariant, every `ExecutingMessage` event tuple from a specific predeploy must contain an `Identifier` that correctly references its log. This reference is made up of a chain id, block number and log index - all of the information required to point to a specific log on a specific chain.\r\n\r\n```solidity\r\n// no need to emit the entire log, just need its hash\r\nevent ExecutingMessage(bytes32 indexed logHash, Identifier identifier);\r\n\r\nstruct Identifier {\r\n    address origin;\r\n    uint256 blocknumber;\r\n    uint256 logIndex;\r\n    uint256 timestamp;\r\n    uint256 chainid;\r\n}\r\n```\r\n\r\nNotice the `ExecutingMessage` event contains the log hash - this means the log itself is observable from within the EVM. This can be thought of as being similar to multicast UDP for logs.\r\n\r\nIf a block is included that contains an `ExecutingMessage` where its tuple doesn't match, the block is reorg'd out as part of the L2 fork choice rule. This gives users the integrity to trust all cross chain messages at the application layer.\r\n\r\nIt is also possible to do interop using storage slots rather than just logs. The `Identifier` would just look a little bit different.\r\n\r\n```solidity\r\nevent ExecutingMessage(bytes32 indexed storageValue, Identifier identifier);\r\n\r\nstruct Identifier {\r\n    address origin;\r\n    uint256 blocknumber;\r\n    bytes32 storageKey;\r\n    uint256 timestamp;\r\n    uint256 chainid;\r\n}\r\n```\r\n\r\nThis design was discarded due to the archival state requirement for verifying that a storage slot key value pair match on a particular chain at a given block number. If we add a history accumulator to the L2 block header, then we can solve the problem of infrastructure cost by running a single instance of a data pipeline that indexes a set of composable witnesses that are able to prove any storage slot at any height and use this to feed into the fork choice rule and proof system.", "OPEN", 0, "tynes", "2024-10-09T04:00:32Z", "2025-01-08T23:18:34Z", null, "ethereum-optimism/specs", "2025-08-31 00:13:29"]
["I_kwDOLB-lzc6WUU-t", 371, "Make OP Stack spec executable", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nMake the spec executable like Ethereum.\r\n\r\n**Describe the solution you'd like**\r\nSuch as [pyspec](https://github.com/ethereum/consensus-specs/blob/dev/tests/core/pyspec/README.md)\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Additional context**\r\n\r\n", "OPEN", 0, "GrapeBaBa", "2024-09-12T09:52:02Z", "2025-01-08T23:54:56Z", null, "ethereum-optimism/specs", "2025-08-31 00:13:29"]
["I_kwDOI7W0xc6jUwU1", 1168, "Build Enriched Traces & Aggregation Model", "Variant of #1160 but for traces", "CLOSED", 0, "MSilb7", "2024-12-14T20:14:08Z", "2025-01-08T15:34:25Z", "2025-01-08T15:34:25Z", "ethereum-optimism/op-analytics", "2025-08-31 00:13:33"]
["I_kwDOI7W0xc6jHEVB", 1160, "Build Enriched Transactions & Aggregation Model", "While we're here - build enriched transactions table that do our gas calculations. \n\nThen aggregate at from / to / method combinations, similar to what we're doing with #1055 ", "CLOSED", 0, "MSilb7", "2024-12-12T17:48:43Z", "2025-01-08T15:34:25Z", "2025-01-08T15:34:25Z", "ethereum-optimism/op-analytics", "2025-08-31 00:13:33"]
["I_kwDOKIsnqM6lr9kx", 457, "Discussion: explicitly use Safe address for `SIGNATURES_<SAFE-ADDR>` env var", "Do we want to start appending the affected Safe address that signatures are for for the `just approve` command, like `SIGNATURES_<SAFE-ADDR>`? This is similar to how we specify nonce overrides with `SAFE_NONCE_<SAFE-ADDR>`.\n\nThen all sigs can be exported at once for a nested task and there's less chance of accidentally using wrong sigs and thinking that sigs are wrong.\n\n\n", "OPEN", 0, "sebastianst", "2025-01-10T09:56:49Z", "2025-01-10T10:04:56Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 00:13:46"]
["I_kwDOKIsnqM6lREbA", 444, "`DisputeGameUpgrade`: move some post- to pre-checks", "              It also looks to me like most of the post-checks could be pre-checks?  If so, would be nice to clean that up, but can be for a future PR.\r\n\r\n_Originally posted by @mbaxter in https://github.com/ethereum-optimism/superchain-ops/pull/442#discussion_r1904362817_\r\n            ", "OPEN", 0, "sebastianst", "2025-01-07T12:23:31Z", "2025-01-07T12:23:31Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 00:13:46"]
["I_kwDOMMiGhs6kk_3-", 310, "Nice Job", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n\n**Describe the solution you'd like**\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n", "CLOSED", 0, "mghazni", "2024-12-27T18:23:51Z", "2025-01-06T17:57:25Z", "2025-01-06T17:57:25Z", "ethereum-optimism/supersim", "2025-08-31 00:13:57"]
["I_kwDODjvEJM6lmx46", 13663, "op-program: Prevent recursive block execution", "The op-program [introduces a new hint route](https://github.com/ethereum-optimism/optimism/pull/13631) to derive a client-chosen block. The hint route is implemented in the host by calling into the same client program that requested the hint, using different boot parameters.\n\nAs a sanity check, we should prevent client from using the hint recursively. The client program invocation should not be hinting for block execution while it is currently being used for block execution. The only usecase to not restrict this behavior is if the client is in a deep optimistic chain and it needs to rebuild up to the common canonical parent in order to fault prove a reorg'd chain. However, this scenario isn't possible as we expect the op-program, in the context of the fault dispute game, to be concerned with a single block execution.", "OPEN", 0, "Inphi", "2025-01-09T17:38:24Z", "2025-01-09T17:44:51Z", null, "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6lfzmq", 13647, "Add default label `M-needs-triage` to issues", "Add label `M-needs-triage` to issue template.\n\n**Additional context**\n`M-needs-triage` label is an indication to devs that this issue is from an external contributor and has not yet been read by any other dev on the team.\n\nRef https://github.com/paradigmxyz/reth/blob/28d52312acd46be2bfc46661a7b392feaa2bd4c5/.github/ISSUE_TEMPLATE/feature.yml?plain=1#L3", "OPEN", 0, "emhane", "2025-01-09T00:10:43Z", "2025-01-09T00:11:59Z", null, "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6lfvbD", 13646, "Workflow to label stale issues", "Add ci workflow to run on cronjob for labelling stale issues `S-stale`\n\n**Additional context**\nhttps://github.com/paradigmxyz/reth/blob/main/.github/workflows/stale.yml\n\nVerify existing workflow for closing issues labelled `S-stale` or add it if doesn't exist", "OPEN", 0, "emhane", "2025-01-08T23:58:09Z", "2025-01-09T16:18:30Z", null, "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6lUWfx", 13618, "Remove makeDCIIsthmus code", "There's a bunch of code that crafts a special call for Isthmus in opchain/opcm.go. This code should be removed: it's confusing and doesn't actually match what we'll need to do for Isthmus.", "CLOSED", 0, "mslipper", "2025-01-07T19:26:00Z", "2025-01-09T21:20:35Z", "2025-01-09T21:20:35Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6lJnGd", 13590, "Create and ship new op-contracts release with MT cannon updates for Gov Cycle 32 release", "", "CLOSED", 0, "BlocksOnAChain", "2025-01-06T14:18:30Z", "2025-01-08T12:20:24Z", "2025-01-08T12:20:23Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6lH9aT", 13587, "Project: ETH", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "CLOSED", 0, "datisistanbul77", "2025-01-06T10:16:52Z", "2025-01-06T10:17:10Z", "2025-01-06T10:17:10Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6j-xAg", 13482, "Delete L2OutputOracle and legacy OptimismPortal", "The `L2OutputOracle.sol` contract is no longer needed since it has been replaced by fault proofs in the system. We should remove this legacy contract to reduce maintenance burden and avoid confusion.\n\n## Steps to Remove\n\n1. Delete the contract file\n2. Update Setup.sol and Deploy.s.sol to remove L2OutputOracle-related code\n3. Delete or Update any test files that import or reference L2OutputOracle\n4. Remove L2OutputOracle references from deployment configs and scripts\n5. Remove go tests that use the legacy config, or do not use fault proofs.", "CLOSED", 0, "maurelian", "2024-12-19T18:20:28Z", "2025-01-06T10:13:33Z", "2024-12-24T17:14:00Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6jRHac", 13391, "Fix labelling of addresses in Setup.sol", "The address labelling in [this section](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/test/setup/Setup.sol#L147-L183) of the code is incorrect. \n\n**Specifically:** \n\n1. Proxy addresses are labelled twice, as both the proxy and the impl. The code should change as follows to correctly label the proxy and impl:\n\t```diff\n\toptimismPortal = IOptimismPortal(deploy.mustGetAddress(\"OptimismPortalProxy\"));\n\t\n\t...\n\t\n\t- vm.label(address(optimismPortal), \"OptimismPortal\");\n\t+ vm.label(address(optimismPortal), \"OptimismPortalProxy\");\n\t- vm.label(deploy.mustGetAddress(\"OptimismPortalProxy\"), \"OptimismPortalProxy\");\n\t+ vm.label(EIP1967Helper.getImplementation(address(optimismPortal)), \"OptimismPortalImpl\");\n\t```\n2. Check for missing addresses, ie. the AnchorStateRegistry is not labelled at all. \n\t\n", "CLOSED", 0, "maurelian", "2024-12-13T20:36:36Z", "2025-01-08T05:35:54Z", "2025-01-08T05:35:54Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6iyV9W", 13336, "Interop: implement ManagedMode in op-node", "Managed mode allows the op-supervisor to use the op-node to sync new blocks, while having the driver control over which L2 block and from what L1 data the node will derive.\n\n`op-node/rollup/interop/managed.go`:\n- start/stop RPC server, with websocket-enabled, and JWT enabled.\n- implement missing API methods of `ManagedMode`\n- make it attach to the rest of the op-node as a deriver/emitter\n- implement API methods:\n  - `SubscribeUnsafeBlocks`\n  - `UpdateCrossUnsafe`\n  - `UpdateCrossSafe`\n  - `UpdateFinalized`\n  - `AnchorPoint`\n  - `Reset`\n  - `TryDeriveNext`\n  - `FetchReceipts`\n  - `BlockRefByNumber`\n  - `ChainID`\n", "CLOSED", 0, "protolambda", "2024-12-10T20:19:35Z", "2025-01-07T17:23:10Z", "2025-01-07T17:23:10Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6iEWC1", 13253, "EVM Engineering: transition snapshots script to common framework", "Same as the other issues, tracking issue for the work to transition the `snapshots` script over to the common framework for running these scripts.", "CLOSED", 0, "smartcontracts", "2024-12-05T00:21:28Z", "2025-01-08T20:24:07Z", "2025-01-08T20:24:07Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6gOdvX", 13054, "Proofs: update Drippie monitoring service", "We have an existing Drippie monitoring service but it has not been maintained in quite a while. We need to make sure that the Drippie monitoring service is refreshed to our latest standards for monitoring.\n\nSub-tasks:\n- [x] Specify behavior for Drippie monitoring service\n- [x] Update service to conform to specified behavior\n- [x] Add unit tests to the service\n- [ ] #13610\n- [ ] Define alerting thresholds\n- [ ] Test alerts in production\n- [ ] Write runbooks to handle the alerts\n- [ ] Deploy the service into production", "CLOSED", 0, "smartcontracts", "2024-11-24T18:34:59Z", "2025-01-08T20:14:26Z", "2025-01-08T20:14:26Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6fUQvH", 12974, "op-node: Log on SystemConfig update events", "When the op-node processes SystemConfig update events in `ProcessSystemConfigUpdateLogEvent`, it does so silently. We should add log messages for each event so system config updates can be identified through the logs.", "OPEN", 0, "sebastianst", "2024-11-19T17:01:49Z", "2025-01-08T19:09:10Z", null, "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6eJOWN", 12905, "interop: `panic` Condition When Supervisor is Uninitialized", "# Summary\nWhen in need of sync, the Supervisor hits `panic` crash conditions if `op-node` or `op-geth` resources are up.\n\n# `panic`\nThe basic `panic` is well known: `panic: invalid parent block 0x0000000000000000000000000000000000000000000000000000000000000000:0 to combine with BlockSeal(hash:0xb35d69e90f747e8cd6be0a6822cadd306a14fd592f7967da7769da4f63246652, number:4689, time:1731440267)`.\nIn this, message, we see that we attempt to combine Block Number 4689 with Parent Block Number 0. Of course, that would be the wrong thing to do, so this panic indicates real error.\n\nThe full trace for the faulting goroutine:\n```\ngoroutine 105 [running]:\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/types.BlockSeal.MustWithParent(...)\n        /app/op-supervisor/supervisor/types/types.go:254\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/db.(*ChainsDB).CandidateCrossSafe(0x400069f320, {0xdbc68, 0x0, 0x0, 0x0})\n        /app/op-supervisor/supervisor/backend/db/query.go:253 +0x11cc\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/cross.scopedCrossSafeUpdate({0xf5dcb8, 0x40004f8f70}, {0xdbc68, 0x0, 0x0, 0x0}, {0xf5c940, 0x400069f320})\n        /app/op-supervisor/supervisor/backend/cross/safe_update.go:73 +0x6c\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/cross.CrossSafeUpdate({0xbb044c?, 0x39?}, {0xf5dcb8, 0x40004f8f70}, {0xdbc68, 0x0, 0x0, 0x0}, {0xf5c940, 0x400069f320})\n        /app/op-supervisor/supervisor/backend/cross/safe_update.go:33 +0x80\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/cross.NewCrossSafeWorker.func1({0xf55148?, 0x40000938b0?})\n        /app/op-supervisor/supervisor/backend/cross/safe_update.go:106 +0x44\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/cross.(*Worker).worker(0x4000093900)\n        /app/op-supervisor/supervisor/backend/cross/worker.go:68 +0x94\ncreated by github.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/cross.(*Worker).StartBackground in goroutine 1\n        /app/op-supervisor/supervisor/backend/cross/worker.go:51 +0x70\npanic: invalid parent block 0x0000000000000000000000000000000000000000000000000000000000000000:0 to combine with BlockSeal(hash:0xb35d69e90f747e8cd6be0a6822cadd306a14fd592f7967da7769da4f63246652, number:4689, time:1731440267)\n```\n\nIn this, we can see that the fault is happening during `scopedCrossSafeUpdate`\n\n# Root Cause and Conceptual Fix\nThis issue happens when a Supervisor is syncing from scratch while the network is already running. It appears that when the `fromda` database is empty, callers (I think `op-geth`) ask for updates to Cross-Safety. This in turn makes its way all the way to `scopedCrossSafeUpdate`.\n\nThe supervisor should be able to detect and deny requests to the database which are obviously beyond the sync'd scope. This particular codepath is triggering because it's being identified as the \"first\" block in the database. It is obviously incorrect, but we should stop the call from even getting this far if the database is empty.\n\n# Reproduction Steps\n- Launch `local-devnet` (guides are lacking @axelKingsley can make one)\n- Allow the network to progress for a few moments\n- `sh` into the Supervisor container and run `rm -rf /db/* && killall op-supervisor` to destroy the database and immediately stop the supervisor.\n- Relaunch the supervisor, and observe the logs\n- After a few moments of runtime, the `panic` should occur.\n", "CLOSED", 0, "axelKingsley", "2024-11-12T20:13:22Z", "2025-01-10T07:38:07Z", "2025-01-10T07:38:05Z", "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDODjvEJM6AwcKY", 9697, "Should IOptimismMintableERC20.bridge be a view function?", "**Bug Description**\r\n\r\nI think `IOptimismMintableERC20.bridge` should be a read-only `view` function\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/34779f7dd720bcf70a67da0f9e8525780b9cdfa8/packages/contracts-bedrock/src/universal/IOptimismMintableERC20.sol#L13\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/34779f7dd720bcf70a67da0f9e8525780b9cdfa8/packages/contracts-bedrock/src/universal/OptimismMintableERC20.sol#L127-L129\r\n", "OPEN", 0, "t4sk", "2024-02-29T01:41:09Z", "2025-01-08T19:09:19Z", null, "ethereum-optimism/optimism", "2025-08-31 00:14:16"]
["I_kwDOKSJyfM6loVno", 614, "automatic viem chain definitions for all members in the registry", "## Runtime Fetching\n* Avoids the need for users to continually bump package versions as members are added to the superchain\n\n* We don't want a github outage to result in an outage in superchain dapps. We can have 2/3 CDNs used as a fallback to github\n\n## Compile time inclusion\n * To avoid complete runtime fetching, we could fallback to a maintained set of chains known at compile time. This set can be managed and consumers can just be encouraged to continually update their dependency but not strictly depend on it", "CLOSED", 0, "hamdiallam", "2025-01-09T21:53:07Z", "2025-01-16T23:28:32Z", "2025-01-16T23:28:32Z", "ethereum-optimism/ecosystem", "2025-08-31 00:15:38"]
["I_kwDOKSJyfM6fUfDw", 575, "Eng Tracking: End to end Multichain Faucet Implementation", "This will serve as the engineering tracking issue for the end to end Multichain Faucet Implementation. More information in the parent issue here: https://github.com/ethereum-optimism/ecosystem/issues/505\n\n- [x] #576\n- [x] #577 \n- [x] #580\n- [x] #578\n- [x] #581\n- [x] #579 \n- [x] #582\n- [x] #589\n- [x] #590\n- [x] #591\n- [ ] #592 \n- [x] Modify the feature flag here: https://github.com/ethereum-optimism/ecosystem-private/blob/8d1f04ba042608dec5b915a1e7c65b30cfc0309a/apps/dev-console-interface/src/pages/FaucetPage/components/AuthenticatedHeader.tsx#L82", "CLOSED", 0, "tarunkhasnavis", "2024-11-19T17:30:11Z", "2025-01-13T18:14:12Z", "2025-01-13T18:14:12Z", "ethereum-optimism/ecosystem", "2025-08-31 00:15:38"]
["I_kwDOH2Qg5s6mBnvL", 464, "Decouple Superchain Registry", "We sometimes need to make quick releases of `op-geth` because a new chain was added to the `superchain-registry`. This can be unsafe and create weird dependencies across different teams. We should decouple the `superchain-registry` as a dependency to fix this issue. One easy way to do this is to do releases of the registry similarly to how we do releases of the smart contracts and then allow for a CLI flag pointing to the appropriate config accept both a file on the local fs and also a remote HTTP URL. Then we can release the `superchain-registry` without needing to update `op-geth`.\n\nThe same issue can also result in a different `absolutePrestate` being created depending on an updated `superchain-registry`. The solution proposed here will not fix the problem for the proof, see https://github.com/ethereum-optimism/design-docs/pull/153 and https://github.com/ethereum-optimism/design-docs/pull/161.\n\n", "OPEN", 0, "tynes", "2025-01-13T21:19:21Z", "2025-01-13T21:41:29Z", null, "ethereum-optimism/op-geth", "2025-08-31 00:15:40"]
["I_kwDOH2Qg5s6M7MHv", 339, "Cannot sync block data from an op-geth instance to another", "First, I deployed a local chain with such instances:\r\none op-geth\r\none op-node\r\none op-batcher\r\none op-proposer\r\n\r\nThe deploy command for op-geth is this:\r\n./build/bin/geth --datadir ./datadir --http --http.corsdomain=* --http.vhosts=* --http.addr=0.0.0.0 --http.port=8545 --http.api=web3,debug,eth,txpool,net,engine,admin --ws --ws.addr=0.0.0.0 --ws.port=8546 --ws.origins=* --ws.api=debug,eth,txpool,net,engine,admin --syncmode=full --gcmode=archive --maxpeers=10 --networkid=242069 --authrpc.vhosts=* --authrpc.addr=0.0.0.0 --authrpc.port=8521 --authrpc.jwtsecret=./jwt.txt --rollup.disabletxpoolgossip=true  --nat=none  --verbosity=5 --port=8503\r\n\r\nIt can work well, I can transfer eth from admin account to another account by metamask wallet.\r\n\r\nSecond, I want to deploy another op-geth which can link to the same chain that deployed in my first step.\r\nThe deploy command for another op-geth is this:\r\n./build/bin/geth --datadir ./datadir2 --http --http.corsdomain=* --http.vhosts=* --http.addr=0.0.0.0 --http.port=8555 --http.api=web3,debug,eth,txpool,net,engine,admin --ws --ws.addr=0.0.0.0 --ws.port=8556 --ws.origins=* --ws.api=debug,eth,txpool,net,engine --syncmode=full --maxpeers=10 --networkid=242069 --authrpc.vhosts=* --authrpc.addr=0.0.0.0 --authrpc.port=8531 --authrpc.jwtsecret=./jwt.txt --rollup.disabletxpoolgossip=true --port 8504 --bootnodes=enode://839402d8a0110125ce98b3d10b79be9f6398f69611294f7df33743afb7c42c92e1e34eb4c1508234be770d7d1bbee70f1f251620289b1617eb117519962eaec4@127.0.0.1:8503  --rollup.sequencerhttp=http://127.0.0.1:8545  --verbosity=5 --nat=none\r\n\r\nI can get one object response from the api of admin.peers for each other( Results are right \uff09. But it cannot sync data from the bootnode. and also I cannot get same balance from the two rpc endpoints of the two op-geth instances. It means they are not in same chain.\r\n\r\n> eth.syncing\r\n{\r\n  currentBlock: 0,\r\n  healedBytecodeBytes: 0,\r\n  healedBytecodes: 0,\r\n  healedTrienodeBytes: 0,\r\n  healedTrienodes: 0,\r\n  healingBytecode: 0,\r\n  healingTrienodes: 0,\r\n  highestBlock: 0,\r\n  startingBlock: 0,\r\n  syncedAccountBytes: 0,\r\n  syncedAccounts: 0,\r\n  syncedBytecodeBytes: 0,\r\n  syncedBytecodes: 0,\r\n  syncedStorage: 0,\r\n  syncedStorageBytes: 0,\r\n  txIndexFinishedBlocks: 0,\r\n  txIndexRemainingBlocks: 1\r\n}\r\n\r\nI already checked the parameter of --bootnodes, make sure that it's right value. Both instances are deployed in one machine. I make sure that the data directories are  initialized by same genesis.json\r\nCan you help me find the reason?  \r\n\r\n", "OPEN", 0, "DavidCoder88", "2024-06-20T12:31:05Z", "2025-01-15T07:37:05Z", null, "ethereum-optimism/op-geth", "2025-08-31 00:15:40"]
["I_kwDOKIwiaM6l2t7j", 1240, "[DOCS] Potential errors in \"Bridging ETH to OP Mainnet with Viem\u201d - Deposit ETH part", "\nIn the [Deposit ETH](https://docs.optimism.io/builders/app-developers/tutorials/cross-dom-bridge-eth#deposit-eth), \n\n1. **Potential issue with the description**:  \n   The following description might be problematic:\n   > \"Now that you have some ETH on L1, you can deposit that ETH into the L1StandardBridge contract. You'll then receive the same number of ETH on L2 in return.\"\n\n   **Problem**: This statement doesn't seem to match the actual steps described below. It appears that the process does not use the `L1StandardBridge`. Instead, it directly calls the `OptimismPortalProxy`.\n\n2. **Potential issue with code execution**:  \n   The following line might not execute as expected:\n   ```js\n   const depositReceipt = await publicClientL1.waitForTransactionReceipt({ depositHash });\n   ```\n\n   In my tests, this continuously returned the following error:\n   ```\n   depositReceipt = await publicClientL1.waitForTransactionReceipt({ depositHash });\n   Uncaught TypeError: Cannot convert undefined to a BigInt\n       at BigInt (<anonymous>)\n       at numberToHex (/home/simple8720/cross-dom/node_modules/viem/_cjs/utils/encoding/toHex.js:44:19)\n       at getTransaction (/home/simple8720/cross-dom/node_modules/viem/_cjs/actions/public/getTransaction.js:26:77)\n   ```\n\n   When changing it to:\n   ```js\n   depositReceipt = await publicClientL1.waitForTransactionReceipt({ hash: depositHash });\n   ```\n   The error no longer appeared.\n\nThank you very much for any clarification on these issues!\n\n", "CLOSED", 0, "opfocus", "2025-01-12T16:56:11Z", "2025-01-16T15:54:47Z", "2025-01-16T15:54:47Z", "ethereum-optimism/docs", "2025-08-31 00:15:41"]
["I_kwDOKIwiaM6aaiFh", 991, "[2024 Q4 Audit] builders/chain-operators/deploy/overview.md", "<!-- this template is intended for internal OP Labs usage -->\r\n\r\n## Description of the updates required\r\n\r\n- Update the first paragraph and remove the reference to L3s. Instead mention that this is meant for deploying standard OP Stack chains\r\n- Remove the direnv dependency because we're going to default to recommending the op-deployer\r\n- Add a subsection on the challenger\r\n\r\n## Github issue label criteria\r\n\r\n> Choose the appropriate github issue labels for each page.\r\n\r\n<details>\r\n\r\n<summary>Priority</summary>\r\n\r\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\r\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\r\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\r\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\r\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>T-shirt size</summary>\r\n\r\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\r\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\r\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\r\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \r\n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Content evaluation</summary>\r\n- `a-delete`: don't need this page \r\n- `a-duplicate`: some content lives elsewhere \r\n- `a-minor`: needs small revisions \r\n- `a-moderate`: needs moderate revisions \r\n- `a-critical`: needs a lot of work\r\n</details>\r\n\r\n## MDX Metadata format\r\n\r\n> We will be adding better metadata to the header of each page. \r\n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\r\n> Parse the component and feature tags to add.\r\n\r\n```mdx\r\ntags: [\"sequencer\", \"l1-contracts\", \"l2-contracts\", \"op-proposer\", \"op-challenger\", \"predeploys\", \"batcher\", \"eng-platforms\", \"eng-protocol\"]\r\n```\r\n\r\n```mdx\r\n---\r\ntitle: \"Your Title Here\"\r\ntags: [\"tag1\", \"tag2\"]\r\ndescription: \"A short description of the content.\"\r\n---\r\n```\r\n\r\n<details>\r\n<summary>Component tags</summary>\r\n\r\n```\r\nop-node\r\nop-geth\r\nop-reth\r\nop-erigon\r\nop-nethermind\r\nbatcher\r\nstandard-bridge\r\nsequencer\r\nl1-contracts\r\nl2-contracts\r\nprecompiles\r\npredeploys\r\npreinstalls\r\nop-proposer\r\nop-challenger\r\nop-gov-token\r\nop-supervisor\r\nop-conductor\r\nfp-contracts\r\ncannon\r\nop-program\r\nasterisc\r\nkona\r\nsuperchain-registry\r\nsupersim\r\ndev-console\r\nopsm\r\nmcp\r\nmcp-l2\r\ndeputy-guardian\r\nliveness-guard\r\ndispute-mon\r\nop-beat\r\nop-signer\r\nmonitorism\r\nblockspace-charters\r\nop-workbench\r\nkubernetes-infrastructure\r\ndevops-tooling\r\nartifacts-packaging\r\nsequencer-in-a-box\r\ndevnets\r\nop-supervisor\r\nperformance-tooling\r\npeer-management-service\r\nproxyd\r\nzdd-service\r\nsnapman\r\nsecurity-tools\r\nsuperchain-ops\r\nop-deployer\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Engineering tags</summary>\r\n\r\n```\r\neng-platforms\r\neng-growth\r\neng-devx\r\neng-protocol\r\neng-proofs\r\neng-evm\r\neng-security\r\n```\r\n</details>\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-10-16T05:11:50Z", "2025-01-13T10:25:13Z", "2025-01-13T10:25:13Z", "ethereum-optimism/docs", "2025-08-31 00:15:41"]
["I_kwDOI7W0xc6mqXNk", 1269, "Debug Base estimated_size Calculation", "Current query logic ~seems to overstate estimated_size for some Base transactions. Debug this & backfill when resolved:\n\n![Image](https://github.com/user-attachments/assets/86fa38c0-008e-4467-933c-f8162bda152c)", "OPEN", 0, "MSilb7", "2025-01-17T19:02:27Z", "2025-01-17T19:02:27Z", null, "ethereum-optimism/op-analytics", "2025-08-31 00:15:42"]
["I_kwDOI7W0xc6gd86f", 1063, "Read Chain Metadata from Superchain Registry", "If chains are in the superchain-registry:\n\n1. Read their available metadata from there (i.e. L1 contracts), rather than maintaining our own.\n2. Calculate a field for OP Governed chains `ProxyAdminOwner = \"0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A\"`\n\nEventually, only include chains in dashboards if they appear in the registry, to incentivize listings and remove the manual effort of managing multiple registries.\n\nLinks\n- [Superchain Registry](https://github.com/ethereum-optimism/superchain-registry)\n- [OP Analytics Manual Metadata](https://github.com/ethereum-optimism/op-analytics/blob/main/op_chains_tracking/inputs/chain_metadata_raw.csv)\n\nIdeally we also have some indication of when the registry changed, so we can mark when some configurations changed (i.e. when chains become \"op governed\")", "OPEN", 0, "MSilb7", "2024-11-25T20:50:37Z", "2025-01-14T21:57:53Z", null, "ethereum-optimism/op-analytics", "2025-08-31 00:15:42"]
["I_kwDOLB-lzc6mpc5E", 522, "Holocene: list in upgrades list", "Holocene appears to be missing from the upgrades list in https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/superchain-upgrades.md\nIt only lists up to Granite currently.\n", "CLOSED", 0, "protolambda", "2025-01-17T16:41:46Z", "2025-01-17T17:32:26Z", "2025-01-17T17:32:26Z", "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6mUwAi", 513, "EIP-7840: EL Blob Schedule", "### Description\n\n[EIP-7840](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7840.md) adds a blobs schedule to the EL config. Since EIP-4844 is _not_ enabled for L2, this doesn't apply.\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435", "CLOSED", 0, "refcell", "2025-01-15T17:40:42Z", "2025-01-15T17:43:01Z", "2025-01-15T17:43:00Z", "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6mUtRG", 512, "EIP-7691: Blob Throughput Increase", "### Description\n\n[EIP-7691](https://github.com/ethereum/EIPs/blob/d96625a4dcbbe2572fa006f062bd02b4582eefd5/EIPS/eip-7691.md) proposes to increase the blob throughput.\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435", "CLOSED", 0, "refcell", "2025-01-15T17:34:50Z", "2025-01-15T17:41:44Z", "2025-01-15T17:41:42Z", "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6mUIpZ", 504, "EIP-6110: Supply validator deposits on chain", "https://eips.ethereum.org/EIPS/eip-6110\n\nwon't fix: applies to L1 withdrawals", "CLOSED", 0, "emhane", "2025-01-15T16:28:02Z", "2025-01-15T16:28:05Z", "2025-01-15T16:28:05Z", "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6mUFai", 501, "EIP-7549: Move committee index outside Attestation", "https://eips.ethereum.org/EIPS/eip-7549", "CLOSED", 0, "emhane", "2025-01-15T16:21:43Z", "2025-01-15T16:33:17Z", "2025-01-15T16:33:15Z", "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6mUFSs", 500, "EIP-7742: Uncouple Blob Count Between CL and EL", "### Description\n\nExpected to be included in the Pectra L1 Hardfork, [EIP-7742](https://eips.ethereum.org/EIPS/eip-7742) updates the blob maximum and target count verification from [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844).\n\nFrom @protolambda:\n- This extends the Engine API with a \"target\" and \"max\" blobs per block.\n- We need to change the `op-node` to use the new Engine API, and then specify 0 for these fields.\n- The engine-API change has not landed yet: https://github.com/ethereum/execution-apis/pull/574\n\n\n### References\n\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435\n", "CLOSED", 0, "refcell", "2025-01-15T16:21:28Z", "2025-01-15T17:29:20Z", "2025-01-15T17:29:20Z", "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6mUB6u", 498, "EIP-7691: Blob throughput increase", "https://eips.ethereum.org/EIPS/eip-7691\n\nwon't fix: Blobs not supported on Optimism", "CLOSED", 0, "emhane", "2025-01-15T16:14:56Z", "2025-01-15T16:16:58Z", "2025-01-15T16:16:58Z", "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6mBcGp", 495, "Interop: Dependency Manager + New Lockbox Spec", "We want to progress the decentralization roadmap at the same time as shipping interop. We also have a bottleneck at multisig operations, it is a lot of overhead for every new upgrade that is put together in [superchain-ops](https://github.com/ethereum-optimism/superchain-ops). We should optimize for reducing the multisig rather than adding to it.\n\nThe `SharedLockbox` smart contract was originally designed such that it required multisig operations to update which chains are part of the dependency set and therefore have the ability to withdraw from the `SharedLockbox`. To move away from the multisig operations here, we decided to move the dependency set offchain. This means that an addition to the dependency set can be considered a *hardfork*. On the first block past the hardfork height, the derivation pipeline will create a system tx that calls the `DependencyManager` contract with the new chains added to the dep set which then triggers a withdrawal that authorizes the chain to be able to withdraw from the `SharedLockbox`.\n\nWe know that ethereum is \"decentralized\" and they do upgrades via releases of new software that people opt into running. We should focus on making OP Stack upgrades more similar to that over time. If we can remove the multisig through this mechanism, that would be ideal.", "OPEN", 0, "tynes", "2025-01-13T21:01:04Z", "2025-01-15T16:12:08Z", null, "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOLB-lzc6VOw3y", 360, "feat: Easy Game Rotation", "## Overview\r\n\r\nCurrently, the `OptimismPortal2` contract respects a single dispute game type at a time, as outlined in the [specification](https://specs.optimism.io/fault-proof/stage-one/bridge-integration.html#fpac-optimismportal-mods-specification) for the `OptimismPortal` modifications made as a part of the Stage 1 fault proofs release.\r\n\r\nThe issue with this is that changing the respected game type issues a large user experience burden to the users of the chain by delaying their withdrawals for a week. This process happens in [this codepath](https://github.com/ethereum-optimism/optimism/blob/375b9766bdf4678253932beae8234cc52f1f46ee/packages/contracts-bedrock/src/L1/OptimismPortal2.sol#L655-L665), where during withdrawal finalization, the dispute game that the withdrawal was proven against is checked to both be of the current respected game type and created after the most recent time the respected game type was updated.\r\n\r\n```solidity\r\n// The game type of the dispute game must be the respected game type. This was also checked in\r\n// `proveWithdrawalTransaction`, but we check it again in case the respected game type has changed since\r\n// the withdrawal was proven.\r\nif (disputeGameProxy.gameType().raw() != respectedGameType.raw()) revert InvalidGameType();\r\n\r\n// The game must have been created after `respectedGameTypeUpdatedAt`. This is to prevent users from creating\r\n// invalid disputes against a deployed game type while the off-chain challenge agents are not watching.\r\nrequire(\r\n    createdAt >= respectedGameTypeUpdatedAt,\r\n    \"OptimismPortal: dispute game created before respected game type was updated\"\r\n);\r\n```\r\n\r\n### Desired Change\r\n\r\nThe new behavior here should be such that the `Guardian` can _optionally_ invalidate, rather than always having to invalidate, the proofs of ongoing user withdrawals.\r\n\r\nThe behavior should enable a \"rollover period,\" where withdrawals proven against dispute games of the previous game type are allowed, if the Guardian did not specify that old games were to be invalidated. No functionality around the rest of the withdrawal path should change.", "OPEN", 0, "clabby", "2024-09-03T19:58:38Z", "2025-01-15T18:02:46Z", null, "ethereum-optimism/specs", "2025-08-31 00:15:43"]
["I_kwDOJ_r-bs6mBrCk", 828, "Decouple from `op-geth` and `op-node`", "See https://github.com/ethereum-optimism/op-geth/issues/464\n\nSometimes we need to make a quick release of the software when a chain is launching by bumping the version of the `superchain-registry` that is pulled into the monorepo and `op-geth`. This is unsafe because there may be features that are not ready to be released yet that have been merged. If we decouple `superchain-registry` releases from the rest of the releases so that the latest `superchain-registry` release is pulled in via HTTP URL, then we no longer need to cut a release of the client software when there is a registry release.\n\nThis URL can be configurable with a default, so that users can serve their own if they don't want to trust the default source for configs.", "CLOSED", 0, "tynes", "2025-01-13T21:24:22Z", "2025-01-13T21:40:59Z", "2025-01-13T21:40:59Z", "ethereum-optimism/superchain-registry", "2025-08-31 00:15:53"]
["I_kwDOKIsnqM6lUl1s", 451, "Add execution dry-run just commands", "We can run a full simulation of a task with `just simulate` and then, after exporting all sigs to `SIGNATURES`, `execute` the task. It'd be great to have an intermediate dry-run command like `just dry-run` that does everything as close as possible to what `execute` does, but then doesn't broadcast. So it would use the actual sigs and wouldn't do any nonce or other state overrides etc.", "OPEN", 0, "sebastianst", "2025-01-07T20:03:02Z", "2025-01-14T14:15:42Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDOKIsnqM6lUBAC", 447, "Simulated Multiples Tasks in the same batches", "A big pain point for now is we can't simulate multiples tasks.\nThe idea would be to help us simulate multiples tasks and see if there are all not causing any issues. \nThis PRs are the first efforts to fix this and can be helpful as example: \n-  https://github.com/ethereum-optimism/superchain-ops/pull/437 \n-  https://github.com/ethereum-optimism/superchain-ops/pull/438\n", "CLOSED", 0, "Ethnical", "2025-01-07T18:32:13Z", "2025-01-14T14:21:50Z", "2025-01-14T14:21:48Z", "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDOKIsnqM6lT08P", 445, "`simulate` without override and the signatures", "For now, to simulate with the signatures we need to remove the lines into the nested/single.just files. \nThis is really tidious and can lead to unwanted issues. \nIt would be nice to have an option to simulate the task on a local fork with the signature to make sure the signatures are correct. \nTo do so we need to remove the `--ledger` + `hd-paths` like this would be nice to have an option to do that. \n```diff\n forge script --fork-url ${ETH_RPC_URL} ${script} \\\n --sig \"runJson(string,bytes)\" ${bundlePath} ${SIGNATURES} \\\n-  --ledger --hd-paths \"m/44'/60'/{{hdPath}}'/0/0\" --broadcast \\\n --sender ${sender}\n```", "CLOSED", 0, "Ethnical", "2025-01-07T18:01:51Z", "2025-01-14T14:16:16Z", "2025-01-14T14:16:15Z", "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDOKIsnqM6kICSD", 432, "[FPS] Run Multiple Proposals with Single Command", "Create a config file system and runner file that allows running multiple tasks back to back to simulate multiple tasks where task `B` depends on task `A`.\n\nThis task runner should smoothly integrate with the integration tests, allowing the monorepo tests to be run against the latest tasks in the repository.", "OPEN", 0, "ElliotFriedman", "2024-12-20T22:23:09Z", "2025-01-13T19:11:35Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDOKIsnqM6itMBJ", 395, "Ledger Flex seems to not be recognized", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\nThe ledger *flex* is not recognized and thus will cause simulation to use overrides and will likely fail. \n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n1. Connect the ledger flex\n2. Sign the task -> https://github.com/ethereum-optimism/superchain-ops/tree/main/tasks/sep/021-refresh-signers-fakeFoS \n\nThis will show this message error 'legder not found':\n\nand then simulated with the overrides an fail. \n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\nTo detect the ledger and simulate correctly the task. \n\n\nWorth noting that: Recently, we upgrade eip712sign to v0.0.8 to fix some ARM problem (see there:https://github.com/ethereum-optimism/superchain-ops/issues/375)\nBut doesn't seems to help there..", "CLOSED", 0, "Ethnical", "2024-12-10T10:49:10Z", "2025-01-13T18:58:49Z", "2025-01-13T18:58:48Z", "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDOKIsnqM6ip_i1", 394, "Bug in SystemConfig Holocene Upgrade", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\nThe [Holocene SystemConfig upgrade](https://github.com/ethereum-optimism/superchain-ops/blob/main/tasks/sep/020-holocene-system-config-upgrade-multi-chain/input.json) simply modified the implementations of the `SystemConfig` contracts rather than calling `initialize` on them. This means that there are two functions that currently do not work as expected. \n\n- [basefeeScalar()](https://github.com/ethereum-optimism/optimism/blob/34d5f66ade24bd1f3ce4ce7c0a6cfc1a6540eca1/packages/contracts-bedrock/src/L1/SystemConfig.sol#L117)\n- [blobBasefeeScalar()](https://github.com/ethereum-optimism/optimism/blob/34d5f66ade24bd1f3ce4ce7c0a6cfc1a6540eca1/packages/contracts-bedrock/src/L1/SystemConfig.sol#L120)\n\nThis is because these values are their own storage slots rather than functions that read from a single source of truth (the `scalar`). Without calling `initialize` or calling `setGasConfigEcotone`, they will return `0`.\n\nWe have a few options:\n- redo the upgrade and call `initialize` as part of the upgrade\n- do a new task that calls `setGasConfigEcotone` to set the values equal to what they are currently\n- leave them as 0 and update the implementation of the `SystemConfig` to parse from the `scalar` value when calling these functions\n\nThese functions would implement the inverse of this:\n\n```solidity\nscalar = (uint256(0x01) << 248) | (uint256(_blobbasefeeScalar) << 32) | _basefeeScalar;\n```\n\nSo the `basefeeScalar` function would sload the `scalar`, and mask out the least significant 32 bits. The `blobBasefeeScalar` function would mask out the next least most significant 32 bits.", "CLOSED", 0, "tynes", "2024-12-10T03:48:54Z", "2025-01-13T15:39:53Z", "2025-01-13T15:39:53Z", "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDOKIsnqM6iUvFx", 392, "Signing does not work on a ledger wallet", "**Bug Description**\n\nI'm on unable to sign a nested safe transaction for task execution(e.g. [this](https://github.com/ethereum-optimism/superchain-ops/pull/390)).\n\n```\n\u276f just --dotenv-path $(pwd)/.env  --justfile ../../../nested.just sign council\n\nRunning script with assertions\nUsing script /Users/inphi/optimism/superchain-ops/tasks/sep/021-stage-1-4/NestedSignFromJson.s.sol\nUsing council safe at 0xf64bc17485f0B4Ea5F06A96514182FC4cB561977\ngetting signer address...\nError:\nCould not connect to Ledger device.\nMake sure it's connected and unlocked, with no other desktop wallet apps open.\n\nContext:\n- received an unexpected empty response\nSigning with:\n\n[\u280a] Compiling...\nNo files changed, compilation skipped\n2024/12/05 19:10:27 Warning: signer creation failed: error deriving ledger account (have you unlocked?): reply lacks public key entry\nRunning 'forge script /Users/inphi/optimism/superchain-ops/tasks/sep/021-stage-1-4/NestedSignFromJson.s.sol --rpc-url https://ethereum-sepolia.publicnode.com --sig signJson(string,address) /Users/inphi/optimism/superchain-ops/tasks/sep/021-stage-1-4/input.json 0xf64bc17485f0B4Ea5F06A96514182FC4cB561977\nNo files changed, compilation skipped\n```\n\nThis seems to be a more general bug in both `eip712sign` and `cast` on macos:\n```\n\u276f eip712sign --address --hd-paths \"m/44'/60'/0'/0/0\" --ledger            12s 09:33:31\n2024/12/06 09:33:32 Warning: signer creation failed: error deriving ledger account (have you unlocked?): reply lacks public key entry\n\n\u276f cast wallet address --ledger --mnemonic-derivation-path \"m/44'/60'/0'/0/0\"\nError:\nCould not connect to Ledger device.\nMake sure it's connected and unlocked, with no other desktop wallet apps open.\n\nContext:\n- received an unexpected empty response\n```\n\n**Debugging**\n\nA recent change in behavior that I've noticed is that I'm required to launch the \"Ethereum\" app on my ledger wallet in order to interact with the ethereum account it using various CLI tools. This is a requirement to use the `ledger-live` CLI and also `cast`. Reading the Ethereum address works fine using `cast`, using the same above command, once I launch the Ethereum app. However, `eip712sign` fails with the same above error.  I recently updated my Nano S Plus firmware to 1.3.0 in an attempt to fix the issue, but I'm unsure if this requirement is due to the firmware update.\n\n**Environment Information:**\n\n- Operating System: MacOS Sonoma 14.7.1 - Apple Silicon\n- Foundry Versions Used: `143abd6a`, `e5dbb7a3`, and `626221f5`.\n- Device: Ledger Nano S Plus", "CLOSED", 0, "Inphi", "2024-12-06T15:42:53Z", "2025-01-14T20:38:14Z", "2025-01-14T20:38:12Z", "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDOKIsnqM6gTKml", 377, "Generic DGF implementation update validation script", "The pre- and post checks of DGF implementation updates are identical, just with slightly different parameters. We could save a lot of boilerplate, copy-pasting and repetition of the same review discussions if there was a generic abstract `DGFImplementationUpdate` contract that could just be instantiated with a few parameters (chain id, new FDG and PDG implementations) and then everything else is read from the superchain-registry or queried on-chain. It would also incrementally increase the quality of the checks and save work for the Security reviewers.\n\nThe same could probably be done for encapsulating the generic storage access allowances and code exceptions for nested Safe multi-sig tasks. This is all currently just always copy-pasted.\n\nThis recently became apparent again when we were executing the DGF updates for Sepolia [OP](https://github.com/ethereum-optimism/superchain-ops/pull/374) and [Base](https://github.com/ethereum-optimism/superchain-ops/pull/376).", "CLOSED", 0, "sebastianst", "2024-11-25T06:41:10Z", "2025-01-13T19:10:19Z", "2025-01-13T19:10:18Z", "ethereum-optimism/superchain-ops", "2025-08-31 00:16:02"]
["I_kwDODjvEJM6mRfmj", 13782, "balance eth sepolia not detected", "<!--\nNeed help?\nRefer\n\n![Image](https://github.com/user-attachments/assets/8fd688ed-d22c-4250-b2cb-780f7a3ed409)\n\n![Image](https://github.com/user-attachments/assets/cedbe725-db1a-438d-90a9-b0cc3725da31)\n\n to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "dananganjy", "2025-01-15T11:52:53Z", "2025-01-16T02:04:29Z", "2025-01-16T02:04:20Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6lmEAS", 13658, "Interop: Do dependency set check offchain", "We have decided to move more code offchain rather than having it onchain. The new design involves putting the dependency set check and the start time check in the fork choice rule, block builder and proof rather than onchain. It is the responsibility of the block builder to not include blocks that include transactions that are invalid per these rules, otherwise the block will be reorg'd out and replaced with a deposits only block.\n\nhttps://github.com/ethereum-optimism/optimism/pull/13626 deletes the following code:\n\n```solidity\n    function _checkIdentifier(Identifier calldata _id) internal view {\n        if (_id.timestamp > block.timestamp || _id.timestamp <= interopStart()) revert InvalidTimestamp();\n        if (!IDependencySet(Predeploys.L1_BLOCK_ATTRIBUTES).isInDependencySet(_id.chainId)) {\n            revert InvalidChainId();\n        }\n    }\n```", "CLOSED", 0, "tynes", "2025-01-09T16:03:54Z", "2025-01-13T15:58:50Z", "2025-01-13T15:58:28Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6je-6V", 13413, "Review the audits report and decide on our approach for all the findings", "We will review the audits report and triage the findings so we can work on the fixes.", "CLOSED", 0, "BlocksOnAChain", "2024-12-16T16:12:55Z", "2025-01-13T20:09:53Z", "2025-01-13T20:09:51Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6jdwta", 13409, "op-node: Make max cache size of L1 client configurable", "## Description\n\nMake the max cache size of op-node configurable. It's currently hard-coded to 1000. Also increase the default cache limit to 4000, which covers 5h of blocks.\n\nThe ideal default cache size for receipts needs to be investigated too.\n\n## Context\n\nThe L1 client used by op-node currently limits its cache size to 1000. This may cause low-throughput chains with channel durations > 3h (3h * 60 min/h * 5 block/min = 900 blocks) to experience sequencer stalls up to a few minutes when the sequencer imports a batcher tx every few hours, because the cache won't contain the blocks and receipts for derivation any more. Even worse, the LRU cache will invalidate forwards for each newly queried block & receipt, so there won't be any cache hits.", "CLOSED", 0, "sebastianst", "2024-12-16T14:06:13Z", "2025-01-14T22:04:38Z", "2025-01-14T22:04:38Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6i60C7", 13356, "update public \"safe head stall\" runbook", "With anything new we have learned with the recent batcher changes and Holocene work.\n\nKnown mitigations may include: \n- restart\n- switch from span batches to singular batches\n- tx_concurrency = 1\n- short channel duration", "CLOSED", 0, "geoknee", "2024-12-11T15:43:28Z", "2025-01-14T16:49:28Z", "2025-01-14T16:49:27Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6i6v1X", 13355, "op-e2e/system: add a test for the batcher which reorgs the sequencer", "Using `debug_setHead`.", "CLOSED", 0, "geoknee", "2024-12-11T15:36:04Z", "2025-01-16T12:20:46Z", "2025-01-16T12:20:46Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6i3TCA", 13354, "Holocene: Mainnet Tracker", "Tracking Holocene Mainnet tasks.\n\nSee also [public checklist](https://oplabs.notion.site/Holocene-activation-mainnet-130f153ee16280a881cbc0906541efd7).", "CLOSED", 0, "sebastianst", "2024-12-11T09:48:30Z", "2025-01-15T17:08:56Z", "2025-01-15T17:08:56Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6iHv1H", 13258, "Include Custom Gas Token code", "Placeholder to get this onto the [Isthmus project board](https://github.com/orgs/ethereum-optimism/projects/84/views/8).\n\n[Initial proposal](https://github.com/ethereum-optimism/specs/discussions/373#discussioncomment-11078937) for inclusion in Isthmus.\n\nComment from @mds1:\n> From a contracts perspective, CGT and Standard L2 Genesis can be moved to \u201cIncluded\u201d\u2014they have been audited and are part of the develop branch that we are already building on top of. It would be significantly more work to remove them from Isthmus scope at this point.\n", "CLOSED", 0, "benjaminion", "2024-12-05T10:03:48Z", "2025-01-17T02:34:03Z", "2025-01-17T02:34:02Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6h4DvF", 13192, "Holocene hardfork test (kurtosis)", "When running a multi-client chain, there was a reported chain-spit that occurred when Holocene was activated. For more info, see [PR](https://github.com/paradigmxyz/reth/pull/13060). This issue is written to outline a plan for testing Holocene hard fork in Kurtosis using both `op-geth` and `op-reth` that includes the linked fix and ensure there is no chain-split.\n\n## Prerequisites\n\nSince we are testing a fix that was implemented in `reth`, we will use the latest images for all components except `op-reth`, for which we will use a locally built image for testing.\n\n* Latest docker images for:\n  * `op-geth`\n  * `op-node`\n* Docker image for `op-reth:holocene-fix` built from:\n  * https://github.com/paradigmxyz/reth/releases/tag/v1.1.2 - which should let us reproduce the reported chain split.\n  *  this [commit](https://github.com/paradigmxyz/reth/commit/6cea9955b6d510d830510c6331e1a076d70bb7e6), which has the fix and we shouldn't observe the chain split.\n* Kurtosis run config yaml file as follows:\n\n```\noptimism_package:\n  chains:\n    - participants:\n      - el_type: op-geth\n        cl_type: op-node\n      - el_type: op-reth\n        el_image: \"ghcr.io/paradigmxyz/reth:holocene-fix\"\n        cl_type: op-node\n      network_params:\n        fjord_time_offset: 0\n        granite_time_offset: 0\n        holocene_time_offset: 4\n```\n\n## Tests\n\nWe will execute the first test below with `reth:v1.1.2` and check that we are able to reproduce the issue. Subsequently, we will a reth image which has the [fix](https://github.com/paradigmxyz/reth/pull/13060) and make sure there is no chain split.\n\n* Without Transactions\n  * Start the chain in kurtosis with 2 EL/CL nodes using `kurtosis run . --args-file <file path>`, as outlined in the config yaml above -- without sending any transactions.\n  * Test for consistent block hashes on both EL nodes, at the holocene activation block.\n  * Test for consistent block hashes on a few subsequent block on both `op-geth` and `op-reth` endpoints.\n  * Invoke `SystemConfig.setEIP1559Params` using [w3](https://github.com/lmittmann/w3?tab=readme-ov-file#abi-bindings)\n* With Transactions\n  * Wipe existing enclaves/data using `kurtosis clean -a`\n  * Start the chain in kurtosis with 2 EL/CL nodes using `kurtosis run . --args-file <file path>`, as outlined in the config yaml above -- without sending any transactions.\n  * Start the transaction fuzzer as an additional service in Kurtosis to send transactions.\n  * Test for consistent block hashes on both EL nodes, at the holocene activation block.\n  * Test for consistent block hashes on a few subsequent block on both `op-geth` and `op-reth` endpoints.\n  * Invoke `SystemConfig.setEIP1559Params` using [w3](https://github.com/lmittmann/w3?tab=readme-ov-file#abi-bindings)\n\nIn both cases, we need to ensure that there is no divergence between the hashes reported by `op-geth` and `op-reth`.\n\n### Script to check and dump block hashes\n\n```\n#!/bin/bash\n\n# Check if the correct number of arguments is provided\nif [ \"$#\" -ne 2 ]; then\n  echo \"Usage: $0 <port1-geth> <port2-reth>\"\n  exit 1\nfi\n\n# Assign arguments to variables\nPORT1=$1\nPORT2=$2\n\n# Hard-coded block numbers - a few before holocene activation, holocene activation block (4) and a couple blocks after\nBLOCK_NUMBERS=(0 1 3 4 5 100)\n\n# Iterate through the hard-coded block numbers\nfor BLOCK in \"${BLOCK_NUMBERS[@]}\"; do\n  echo \"Checking block hash for $BLOCK...\"\n\n  # Run the cast command for both ports\n  HASH1=$(cast block $BLOCK --rpc-url 127.0.0.1:$PORT1 --json | jq -r .hash)\n  HASH2=$(cast block $BLOCK --rpc-url 127.0.0.1:$PORT2 --json | jq -r .hash)\n\n  # Display results\n  echo \"Geth RPC $PORT1 - Block $BLOCK Hash: $HASH1\"\n  echo \"Reth RPC $PORT2 - Block $BLOCK Hash: $HASH2\"\n  echo \"\"\ndone\n```", "CLOSED", 0, "vdamle", "2024-12-03T19:25:19Z", "2025-01-16T12:19:49Z", "2025-01-16T12:19:49Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6gOeVV", 13055, "Proofs: define complete Drippie configuration", "We need to make sure that Drippie is configured properly. We must clearly specify the exact drip conditions to maintain Drippie's operations. We can do this first with a Notion document or similar that can be shared with relevant teams to confirm that everything is considered. Once this is implemented, we can add the proper configuration into the monorepo. Chat with @smartcontracts to understand all of the various drips that we'll need to implement.", "CLOSED", 0, "smartcontracts", "2024-11-24T18:37:59Z", "2025-01-14T18:38:00Z", "2025-01-14T18:38:00Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6f-c9o", 13033, "Holocene: Sepolia FP upgrade tasks", "", "CLOSED", 0, "sebastianst", "2024-11-22T17:12:54Z", "2025-01-13T16:26:45Z", "2025-01-13T16:26:45Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6f6QcI", 13029, "Holocene: Sepolia `SystemConfig` upgrades", "* Use [holocene upgrade script](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/upgrades/holocene) to create task(s) for all Sepolia chains that we manage (OP, Base (?), MMZ)\n    * For OP Seb has already done it, will upload output tasks.\n    * For Base TBD, probably Seb will generate it too.\n    * For other chains, can use tool, but with FPs disabled.\n* Possibly bundle all upgrade transactions into a single `input.json` bundle and task\n* Add validation Solitidy script (can copy another proxy upgrade script as a starting point, e.g. https://github.com/ethereum-optimism/superchain-ops/tree/main/tasks/sep-dev-0/006-holocene-sys-cfg is close, but without the manual MCP upgrade via the `StorageSetter`, only the last tx in the bundle)\n* Execute soon after Holocene activation on 11/26", "CLOSED", 0, "sebastianst", "2024-11-22T11:16:37Z", "2025-01-13T18:53:11Z", "2025-01-13T18:53:09Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6ft2iH", 13009, "Holocene: Sepolia tracker", "Tracking OP Sepolia tasks\n\nSee also the [public check list](https://oplabs.notion.site/Holocene-activation-testnet-130f153ee1628086a7daece76789d550)", "CLOSED", 0, "sebastianst", "2024-11-21T14:01:41Z", "2025-01-13T18:53:21Z", "2025-01-13T18:53:21Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6boVN9", 12620, "Fault Dispute Game Fork Deactivation", "Before the activation of any hardfork, the on-chain FDG implementation has to be updated to contain that fork's new features and activation times for the given network. In an emergency situation where a fork fails to properly activate, or activates in a way where it is desirable to deactivate it again, a last-resort response is to rewind the network to the block before the fork activation and restart nodes with the fork deactivated.\r\n\r\nThis works for any node software. However, there are open questions around how this would play out with fault proofs. Any dispute games that were started right after the activation would still require access to the FDG with the fork activated. So simply calling `setImplementation` on the dispute game factory to revert to the old implementation would leave a game coverage gap. We need to decide how to deal with such a scenario.\r\n\r\nNote that this is a generic failure scenario which came up discussion failure modes for the upcoming Holocene fork.", "CLOSED", 0, "sebastianst", "2024-10-24T09:47:00Z", "2025-01-13T16:41:22Z", "2025-01-13T16:41:22Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6bfgi5", 12593, "Build Error: Invalid Reference to runtime.stopTheWorld in github.com/fjl/memsize", "\r\n### Description\r\nI'm encountering a build error while trying to compile the `op-node` component of the Optimism project. The following error message appears during the `make` process:\r\n\r\n```\r\nlink: github.com/fjl/memsize: invalid reference to runtime.stopTheWorld\r\nmake[1]: *** [Makefile:12: op-node] Error 1\r\n```\r\n\r\n### Steps to Reproduce\r\n1. Clone the Optimism repository:\r\n   ```bash\r\n   git clone https://github.com/ethereum-optimism/optimism.git\r\n   ```\r\n2. Navigate to the project directory:\r\n   ```bash\r\n   cd optimism\r\n   ```\r\n3. Run the build command:\r\n   ```bash\r\n   make op-node op-batcher op-proposer\r\n   ```\r\n\r\n### Expected Behavior\r\nThe build should complete without errors, and the `op-node` binary should be created successfully.\r\n\r\n### Environment\r\n- **OS**: [Your Operating System, e.g., Windows 10]\r\n- **Go Version**: [Your Go version, e.g., go version go1.19.3 windows/amd64]\r\n- **Optimism Version**: [The version of the Optimism project you are using, if applicable]\r\n\r\n### Additional Information\r\nI have tried the following troubleshooting steps:\r\n- Verified that I am using a compatible version of Go.\r\n- Updated all dependencies with `go get -u ./...`.\r\n- Cleaned the Go module cache using `go clean -modcache`.\r\n- Consulted existing issues but found no relevant solutions.\r\n\r\n### Suggested Resolution\r\nIf anyone has encountered this issue before or can provide guidance on resolving it, your assistance would be greatly appreciated.\r\n\r\n", "CLOSED", 0, "amirhoseinsh", "2024-10-23T13:58:38Z", "2025-01-13T15:59:47Z", "2025-01-13T15:59:47Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6Xms6T", 12067, "Change how standard-versions.toml is used in op-deployer", "`op-deployer` should avoid any patterns that use file IO. For `standard-versions.toml` in particular, this isn't a user defined file and it should be included as part of the `op-deployer` compilation step. \r\n\r\nOne possible solution which is cleaner would be to use a codegen tool to create a static Solidity contract from the `standard-versions.toml` file. \r\n\r\nSome tech debt was introduced to `op-deployer` in this PR: https://github.com/ethereum-optimism/optimism/pull/12035 \r\n\r\nSummary comment from Slipper: https://github.com/ethereum-optimism/optimism/pull/12035#discussion_r1772258525 ", "OPEN", 0, "blmalone", "2024-09-23T19:42:40Z", "2025-01-17T22:26:58Z", null, "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6Wsm9X", 11923, "Holocene: OP-Reth support for Holocene", "@roberto-bayardo feel free to add more details to this and edit it how you like, as the future owner for it. \nWhat I got from our conversation about it is:\n\"the main op-reth changes for Holocene will be:\n-  (1) the 1559 parameter customization (incl. effects on tx-pool) and \n- (2) the block-sealing will set the withdrawal-root by retrieving a storage-root of the withdrawals", "CLOSED", 0, "BlocksOnAChain", "2024-09-16T12:05:10Z", "2025-01-13T16:35:55Z", "2025-01-13T16:35:55Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6V52SV", 11814, "OPSM: Improved architecture assertions", "As per comment raised in the following PR:\r\nhttps://github.com/ethereum-optimism/optimism/pull/11623/files#r1750461307\r\n\r\nWe should add stricter checking to ensure that proxies definitely have their implementations set before they're returned to a user.\r\n", "CLOSED", 0, "blmalone", "2024-09-09T21:37:02Z", "2025-01-14T18:15:43Z", "2025-01-14T18:15:43Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6RosdC", 11318, "Holocene-D: Strict Frame & Batch Ordering", "Strict Frame & Batch Ordering requires batches within and across channels, and within span batches, to be strictly ordered by L2 block number. This would allow the derivation pipeline to skip the buffering (worst case for up to a whole sequencing window) of higher batches in case of gaps, and instead immediately drop out of order frames and batches.\n\nThese strict ordering requirements would simplify some rules in the DP, but need to live alongside the old rules for backwards compatibility. Additionally, the batcher would need to get hardened to guarantee the new strict ordering requirements under all circumstances.\n\n# Sub-Tasks\n\n- [x] Write Strict Batch Ordering specs (already done as part of Holocene Derivation specs)\n- [x] #12118\n- [x] #12333\n- [x] #12119\n- [x] #12120", "CLOSED", 0, "sebastianst", "2024-08-01T20:34:40Z", "2025-01-13T16:22:14Z", "2025-01-13T16:22:13Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6Pu2wk", 11155, "Holocene-D: Holocene Derivation Changes", "# Summary\r\n\r\nThe Holocene hardfork introduces several changes to block derivation rules that render the derivation pipeline mostly stricter and simpler, improve worst-case scenarios for Fault Proofs and Interop. The changes are:\r\n\r\n- **Strict Batch Ordering** required batches within and across channels to be strictly ordered.\r\n- **Partial Span Batch Validity** determines the validity of singular batches from a span batch individually, only invalidating the remaining span batch upon the first invalid singular batch.\r\n- **Fast Channel Invalidation**, similarly to Partial Span Batch Validity applied to the channel layer, forward-invalidates a channel upon finding an invalid batch.\r\n- **Steady Block Derivation** derives invalid payload attributes immediately as deposit-only blocks.\r\nThe combined effect of these changes is that the impact of an invalid batch is contained to the block number at hand, instead of propagating forwards or backwards in the safe chain, while also containing invalid payloads at the engine stage to the engine, not propagating backwards in the derivation pipeline.\r\n\r\n_Specs:_ https://specs.optimism.io/protocol/holocene/derivation.html\r\n_Owner:_ @sebastianst \r\n\r\n## DoD\r\n\r\nThis consensus change is set to be included in the next hardfork **Holocene**. The project is done when\r\n- All invalid payloads are derived as deposit-only blocks, starting with Holocene activation.\r\n- All out of oder frames and batches are discarded.\r\n- Holocene is activated on mainnet.\r\n- Possible downstream effects of this change have been derisked with Proofs and Interop teams.\r\n\r\n# Tasks\r\n\r\nSee individual task descriptions for details.\r\n- [x] #11313\r\n\r\n**Implementation**\r\n- [x] #11314\r\n- [x] #11316\r\n- [x] #11317\r\n- [x] #11330\r\n- [x] #11318\r\n- [x] #12157\r\n- [x] #12449\r\n- [x] #12120\r\n\r\n**Auxiliary**\r\n- [x] #11321\r\n\r\n# Risks\r\n\r\nSee \r\n\r\n# See Also\r\n\r\n- [Holocene Derivation specs](https://specs.optimism.io/protocol/holocene/derivation.html)\r\n- [design doc on steady batch derivation](https://github.com/ethereum-optimism/design-docs/pull/20) by @tynes\r\n- [Internal PID](https://www.notion.so/oplabs/Steady-Batch-Derivation-Holocene-a5b3b6815a734519a583ea918c36240a)\r\n\r\n_-@sebastianst_", "CLOSED", 0, "BlocksOnAChain", "2024-07-16T15:12:30Z", "2025-01-13T16:22:22Z", "2025-01-13T16:22:22Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6JuvP7", 10608, "Modularize ops-bedrock devnet", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nThe current ops-bedrock devnet is defined in one docker-compose.yml file. This makes spinning up multiple L2s on devnet difficult. We need to have arbitrary number of L2s defined in devnet to test interoperability of opstack chains. \r\n\r\n**Describe the solution you'd like**\r\n\r\nSplit the docker compose yaml file into `base.yml` defining containers for L1 layer, and `overlays-l2.yml` defining containers for L2 layer. Then we can do `docker compose -f base.yml -f overlays-l2-A.yml -f overlays-l2-B ...` The role and responsibility of the [devnet launch script](https://github.com/ethereum-optimism/optimism/blob/develop/bedrock-devnet/devnet/__init__.py) is to manage the meta data files into separate directories so that user can deploy arbitrarily number of L2s to the same devnet. \r\n\r\nIn order to deduplicate the container definitions in `overlays-l2-x.yml`, we use [extends](https://docs.docker.com/compose/multiple-compose-files/extends/) directive to inherit common configuration for any L2 layer, overriding chain specific metadata and configuration files for each L2 deployments\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Defining additional L2 chains statically in docker compose file**: It loses extensibility to multiple L2 chains if we are going to test interop message across arbitrary number of chains. If testing interoperability of two chains is enough, this could also be a reasonable choice since it incurs lesser change to current codebase\r\n\r\n\r\n**Additional context**\r\n\r\n", "CLOSED", 0, "jinmel", "2024-05-22T14:39:27Z", "2025-01-17T22:25:47Z", "2025-01-17T22:25:46Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6MirZI", 10871, "Isthmus: Custom Gas Token: Schedule Predploys Upgrade in Hardfork", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe custom gas token feature updates predeploys on L2. We need to schedule these predeploy upgrades to be rolled out via a hardfork. The ecotone style deposit txs used to deploy and update the implementations are a great way to do this. This ticket can be considered done when the spec is implemented and the upgrade tx implementation is complete and tested. This requires the upgrade to be scheduled as part of a hardfork.\r\n\r\nA simple proposal can be found [here](https://www.notion.so/oplabs/Next-2-Hardforks-Proposal-7a631f1f672548a08854c5c2e26d1047?pvs=4) for the hardfork that includes the custom gas token code going to production.", "CLOSED", 0, "tynes", "2024-05-06T14:26:13Z", "2025-01-17T02:34:29Z", "2025-01-17T02:34:28Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDODjvEJM6Miree", 10879, "Tracking: Custom Gas Token", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nTop level tracking ticket for custom gas token work.\r\n\r\n**Launch Target: April 29th**\r\n\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/215\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/216\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/217\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/218\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/222\r\n- [ ] https://github.com/wevm/viem/discussions/2197\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/244\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10871\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/251", "CLOSED", 0, "tynes", "2024-04-05T01:27:31Z", "2025-01-17T02:34:29Z", "2025-01-17T02:34:17Z", "ethereum-optimism/optimism", "2025-08-31 00:16:34"]
["I_kwDOEf1bQc6dKKDw", 1080, "Feedback for \u201cGet a Grant\u201d", "", "OPEN", 0, "IvanSvetlov100", "2024-11-05T23:10:33Z", "2025-01-23T02:51:32Z", null, "ethereum-optimism/community-hub", "2025-08-31 00:17:41"]
["I_kwDOKSJyfM6nNiEF", 633, "example of factory token contract for IERC7802", "", "OPEN", 0, "jakim929", "2025-01-22T21:04:28Z", "2025-01-22T21:04:28Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOKSJyfM6nNiDi", 632, "example of factory token contract for IERC7802", "", "OPEN", 0, "jakim929", "2025-01-22T21:04:26Z", "2025-01-25T01:03:37Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOKSJyfM6kB6U8", 606, "Research Spike: SuperchainRPC", "", "OPEN", 0, "fainashalts", "2024-12-20T05:22:04Z", "2025-01-23T04:37:08Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOKSJyfM6kB6Dw", 605, "Research Spike: Smart Accounts/Wallet UX", "With [EIP-7702](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7702.md) expected in Pectra, the options around smart wallets are about to expand. \n\nThe purpose of this research spike is to assess the ways in which we can leverage 7702 to support developers looking to integrate smart accounts into their applications on the Superchain. Special attention should be paid to the multichain aspects of smart accounts and how they can be used to smooth the user experience. \n\nWe can/should leverage EIP7702, RIP7212, and webauthn/passkeys to offer tools/libraries/interfaces that make it really easy to do things like set subscriptions, create account recovery pipelines, set daily spending limits, etc. and we should do all of this from a multichain perspective. \n\nParadigm's [Porto](https://github.com/ithacaxyz/porto) is wonderful inspiration and there's a world where we build with/on top of it rather than rolling our own solution. The [introductory tweet thread](https://x.com/gakonst/status/1867248189780512777) contains several helpful examples. \n\nFor reference/inspiration, zkSync has a [modular smart account implementation](https://github.com/matter-labs/zksync-sso). \n\nDefinition of Done: \n\n- [ ] Knowledge sharing session is conducted for the team with findings\n- [ ] Relevant information is disseminated in writing so that plans can be made around next steps\n- [ ] If it makes sense, a prototype is created", "OPEN", 0, "fainashalts", "2024-12-20T05:20:52Z", "2025-01-23T04:31:01Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOKSJyfM6kBukg", 604, "SupxERC20 Boilerplate Code", "See [this PRD ](https://docs.google.com/document/d/1xH98dyeBiR_7yjUbi9LcZmmfKwT5nJuJLIilbpR_dkI/edit?tab=t.0#heading=h.urz08ypqy46u)for details. Specific requirements still TBD. ", "OPEN", 0, "fainashalts", "2024-12-20T04:35:23Z", "2025-01-23T04:26:11Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOKSJyfM6kBrty", 602, "Q1 Hackathon Week", "Placeholder, details to be added closer to the hackathon.", "OPEN", 0, "fainashalts", "2024-12-20T04:24:31Z", "2025-01-23T05:24:33Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOKSJyfM6bN7Cf", 522, "Product Spike: Upgradeable Contracts", "Given the developer pain points [here](https://www.notion.so/oplabs/Multichain-Contract-Upgradeability-d0b6456304784577a14709286aebe400?pvs=4) around upgradeable contracts in a multichain environment, we need to determine the product requirements for supporting developers in overcoming these pain points. \n\nDefinition of Done: A PRD is completed and shared with the team covering suggested solutions. ", "OPEN", 0, "fainashalts", "2024-10-22T03:23:15Z", "2025-01-23T04:50:39Z", null, "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOKSJyfM6bN5m5", 521, "Product Spike: Multichain Deployment", "Given developer pain points regarding deployments in a multichain environment, as outlined [here](https://www.notion.so/oplabs/Multichain-Deployment-31f6a9c1263244f8bd4a7141f1e68c05?pvs=4), we need to outline the product requirements for DevX solutions. \r\n\r\nDefinition of Done: A PRD for multichain deployment support is completed and shared with the team.", "CLOSED", 0, "fainashalts", "2024-10-22T03:16:53Z", "2025-01-23T04:42:16Z", "2025-01-23T04:42:15Z", "ethereum-optimism/ecosystem", "2025-08-31 00:17:42"]
["I_kwDOH2Qg5s6nUHbm", 475, "can we access mempool for base chain now?", "question as title ...\n\neven i open the txpool api still can't access\n\nthx!\n", "CLOSED", 0, "kugimiya530", "2025-01-23T14:33:17Z", "2025-01-24T15:47:14Z", "2025-01-24T15:47:14Z", "ethereum-optimism/op-geth", "2025-08-31 00:17:45"]
["I_kwDOI7W0xc6ndR4f", 1290, "Add Token Holder Revenue to Defillama Fees Pull", "Add 'Token Holder Revenue' as a segment, from the API `dataType=dailyHoldersRevenue`\nhttps://github.com/ethereum-optimism/op-analytics/tree/main/src/op_analytics/datasources/defillama/volume_fees_revenue\n\nThis lets us better segment \"where fees go to\" within the application.\n\n\nRoughly:\n- Fees - Revenue = Earned by app/protocol participants (i.e. LPs, stakers\n- Revenue - Token Holder Revenue = Earned by the \"app\" - DAO, Company, etc structure\n- Token Holder Revenue = Earned by token holders (of course the DAO, company, etc may hold tokens as well).\n\nOf course there is a ton of nuance here, but this granularity helps, since no fees or revenue are truly equivalent.", "OPEN", 0, "MSilb7", "2025-01-24T13:31:46Z", "2025-01-24T13:32:59Z", null, "ethereum-optimism/op-analytics", "2025-08-31 00:17:46"]
["I_kwDOI7W0xc6nYCpI", 1283, "Build L1 Bridge Deposit/Withdrawal Data Model", "Build data models that decode and prepare L1 bridge deposits and withdrawals.\n\nSplit in to 2 parts:\n- OPM - handle all legacy bridges & custom bridge contracts.\n- Other chains - handle modern bridge contracts.\n\nThis old work exists in Dune. See the [bridge flows model](https://github.com/duneanalytics/spellbook/blob/main/dbt_subprojects/daily_spellbook/models/bridge/optimism/optimism_standard_bridge_flows.sql) I made a few years ago.", "OPEN", 0, "MSilb7", "2025-01-23T22:45:51Z", "2025-01-23T22:45:51Z", null, "ethereum-optimism/op-analytics", "2025-08-31 00:17:46"]
["I_kwDOI7W0xc6nYAoj", 1282, "Build Native vs Bridged Token Designation", "~Logic:\n- If the token address was ever bridged from L1, call it bridged.\n- If the token was never bridged from L1, call it natively minted.\n\nMay have to manually map pre-regenesis tokens? Although we hope these were bridged from L1 at some point.\n\nNot concerned with \"externally bridged\" for now, but eventually we could/should find a way to incorporate external factories. We will call these natively minted for now.", "OPEN", 0, "MSilb7", "2025-01-23T22:42:29Z", "2025-01-23T22:42:29Z", null, "ethereum-optimism/op-analytics", "2025-08-31 00:17:46"]
["I_kwDOI7W0xc6kSxv5", 1193, "Generate \"Share of\" columns for every metric, automatically", "Since we can a long list of metrics, and don't want to create extra overhead, use Python at the dashboard level (Hex) to generate \"share of total\" for each metric.", "CLOSED", 0, "MSilb7", "2024-12-23T16:33:02Z", "2025-01-23T22:40:02Z", "2025-01-23T22:40:02Z", "ethereum-optimism/op-analytics", "2025-08-31 00:17:46"]
["I_kwDOI7W0xc6kSxEW", 1192, "HEX: Find strategy for time granularity charts", "Doing Time-Series charts in Hex doesn't work for the time range being variable, sicne the chart forces you to select day, week, month, etc.\n\nNew strategy:\n- Make the X-Axis a text\n- Based on the date granularity drop-down, have the query generate the proper formatting\n\n\nFormats:\n- Daily: Dec 23, 2024\n- Weekly: W52, Dec 23 2024\n- Monthly: Dec 2024", "CLOSED", 0, "MSilb7", "2024-12-23T16:31:17Z", "2025-01-23T22:39:45Z", "2025-01-23T22:39:44Z", "ethereum-optimism/op-analytics", "2025-08-31 00:17:46"]
["I_kwDOI7W0xc6kSvyK", 1191, "Build \"Final\" Matviews", "For ingestion in to google sheet / hex.\n\nFinal query should be \"SELECT *\" at at least a daily level. Time period aggregations that are controlled by Hex parameters can be computed at the dashboard level\n\n", "CLOSED", 0, "MSilb7", "2024-12-23T16:27:58Z", "2025-01-23T22:40:07Z", "2025-01-23T22:40:06Z", "ethereum-optimism/op-analytics", "2025-08-31 00:17:46"]
["I_kwDOI7W0xc6ioJRM", 1134, "ETH/ERC20 Token Transfer Intermediate Models", "", "CLOSED", 0, "MSilb7", "2024-12-09T22:36:10Z", "2025-01-23T18:30:03Z", "2025-01-23T18:30:03Z", "ethereum-optimism/op-analytics", "2025-08-31 00:17:46"]
["I_kwDOKIwiaM6m9qg5", 1269, "Adding a notice on OP_BATCHER_DATA_AVAILABILITY_TYPE", "You should better set the `data-availability-type` to `auto` so the batcher switches to` calldata` when `blobs` are expensive.\n\n\nhttps://docs.optimism.io/builders/chain-operators/configuration/batcher#data-availability-type", "CLOSED", 0, "brokewhale", "2025-01-21T09:14:21Z", "2025-01-24T12:48:21Z", "2025-01-24T12:48:21Z", "ethereum-optimism/docs", "2025-08-31 00:17:47"]
["I_kwDOKIwiaM6mX4ZG", 1247, "Add link to Bedrock Release page or remove reference to it in \"Getting Started\"", "<!-- please fill out the description and acceptance criteria to the best to your ability. While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description \nThe \"Getting Started\" documentation file (pages/stack/getting-started.mdx) has a section at the end titled \"Dive deeper into the OP Stack\". It references a \"Bedrock Release page\", but no link is provided. This creates confusion for users as they cannot access the page. If there is no relevant link available, the reference to the \"Bedrock Release page\" should be removed.\n\n## Acceptance criteria\n- Add a link to the \"Bedrock Release page\" if a relevant and official link exists.\n- If no link is available or the Bedrock Release page does not exist, remove the line mentioning it.\n- Ensure the section flows smoothly and remains clear after the update.\n\n## User stories\n- As a user, I would like access to the \"Bedrock Release page\" if it is available, so I can learn more about the Bedrock release.\n\n## Resources and support\n- Documentation reference: pages/stack/getting-started.mdx\n\n## Action items\n1. Confirm whether a relevant \"Bedrock Release page\" exists.\n2. If the page exists, add the link to the \"Bedrock Release page\" reference in stack/getting-started.mdx.\n3. If no page exists, remove the line referencing the \"Bedrock Release page\".\n4. Review the updated section to ensure it is clear and consistent.\n5. Submit a PR for review and merge.\n", "CLOSED", 0, "Red-Pandaz", "2025-01-15T23:58:47Z", "2025-01-24T06:56:25Z", "2025-01-24T06:56:25Z", "ethereum-optimism/docs", "2025-08-31 00:17:47"]
["I_kwDOKIwiaM6jMBNY", 1178, "Holocene upgrade script 404 not found", "In this page\n\nhttps://github.com/ethereum-optimism/docs/blob/main/pages/builders/notices/holocene-changes.mdx\n\n> Besides this, several L1 contract updates must be performed, some before and some after Holocene activation. We have prepared an [upgrade script](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/upgrades/holocene) to automate most of the deployments and superchain-ops task generation or Safe multi-sig input bundle generation.\n\nUpgrade script navigate to https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/upgrades/holocene\n\nBut it's 404 not found\n\n![Image](https://github.com/user-attachments/assets/2623ddc8-9eda-432a-8b1d-d5b055f398ff)\n", "CLOSED", 0, "Chomtana", "2024-12-13T08:46:32Z", "2025-01-22T08:28:32Z", "2025-01-22T08:28:31Z", "ethereum-optimism/docs", "2025-08-31 00:17:47"]
["I_kwDOKIwiaM6XpIFc", 920, "[2024 Q4 Audit] builders/chain-operators/configuration/batcher.mdx", "<!-- this template is intended for internal OP Labs usage -->\r\n\r\n## Description of the updates required\r\n\r\n- [ ] build the latest release, run the `--help` command and update the page with the resulting output\r\n- [ ] bring the recommendations to the top\r\n- [ ] add content that outlines the standard configurability requirements around the batcher policy: https://specs.optimism.io/protocol/configurability.html#policy-parameters\r\n\r\n## Github issue label criteria\r\n\r\n> Choose the appropriate github issue labels for each page.\r\n\r\n<details>\r\n\r\n<summary>Priority</summary>\r\n\r\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\r\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\r\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\r\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\r\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>T-shirt size</summary>\r\n\r\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\r\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\r\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\r\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \r\n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Content evaluation</summary>\r\n- `a-delete`: don't need this page \r\n- `a-duplicate`: some content lives elsewhere \r\n- `a-minor`: needs small revisions \r\n- `a-moderate`: needs moderate revisions \r\n- `a-critical`: needs a lot of work\r\n</details>\r\n\r\n## MDX Metadata format\r\n\r\n> We will be adding better metadata to the header of each page. \r\n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\r\n> Parse the component and feature tags to add.\r\n\r\n```\r\ntags: [\"batcher\", \"eng-protocol\"]\r\n```\r\n\r\n```mdx\r\n---\r\ntitle: \"Your Title Here\"\r\ntags: [\"tag1\", \"tag2\"]\r\ndescription: \"A short description of the content.\"\r\n---\r\n```\r\n\r\n<details>\r\n<summary>Component tags</summary>\r\n\r\n```\r\nop-node\r\nop-geth\r\nop-reth\r\nop-erigon\r\nop-nethermind\r\nbatcher\r\nstandard-bridge\r\nsequencer\r\nl1-contracts\r\nl2-contracts\r\nprecompiles\r\npredeploys\r\npreinstalls\r\nop-proposer\r\nop-challenger\r\nop-gov-token\r\nop-supervisor\r\nop-conductor\r\nfp-contracts\r\ncannon\r\nop-program\r\nasterisc\r\nkona\r\nsuperchain-registry\r\nsupersim\r\ndev-console\r\nopsm\r\nmcp\r\nmcp-l2\r\ndeputy-guardian\r\nliveness-guard\r\ndispute-mon\r\nop-beat\r\nop-signer\r\nmonitorism\r\nblockspace-charters\r\nop-workbench\r\nkubernetes-infrastructure\r\ndevops-tooling\r\nartifacts-packaging\r\nsequencer-in-a-box\r\ndevnets\r\nop-supervisor\r\nperformance-tooling\r\npeer-management-service\r\nproxyd\r\nzdd-service\r\nsnapman\r\nsecurity-tools\r\nsuperchain-ops\r\nop-deployer\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Engineering tags</summary>\r\n\r\n```\r\neng-platforms\r\neng-growth\r\neng-devx\r\neng-protocol\r\neng-proofs\r\neng-evm\r\neng-security\r\n```\r\n</details>\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-09-24T02:43:03Z", "2025-01-23T00:55:49Z", "2025-01-23T00:55:49Z", "ethereum-optimism/docs", "2025-08-31 00:17:47"]
["I_kwDOLB-lzc6mUUBO", 510, "EIP-2935: Historical Block Hashes from State", "### Description\n\n[EIP-2935](https://eips.ethereum.org/EIPS/eip-2935) serves historical block hashes from state. Effectively a new contract is deployed to track the previous `8192` block hashes.\n\nThis EIP:\n- Replaces the header accumulator proposal made by @clabby\n    - https://github.com/ethereum-optimism/specs/pull/259\n- EIP-2935 can be used as a drop-in-place replacement for the header accumulator.\n    - Whereas header accumulator is log(n) lookup time, there are `8191` block hashes in the service window so the lookup is a sliding `8191` window of block hashes.\n    - EIP-2935 requires an upgrade transaction in kona\u2019s L2 stateless block executor.\n    - https://github.com/op-rs/kona/blob/main/crates/executor/src/executor/mod.rs#L122-L130\n    - op-reth will need an upgrade transaction as well.\n- Upgrade Tx needs the same sender as the pre-determined example tx to ensure the contract is deployed.\n\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435\n", "CLOSED", 0, "refcell", "2025-01-15T16:50:28Z", "2025-01-22T21:16:29Z", "2025-01-22T21:16:29Z", "ethereum-optimism/specs", "2025-08-31 00:17:47"]
["I_kwDOLB-lzc6mURS-", 508, "EIP-7623: Increase Calldata Cost", "### Description\n\n[EIP-7623](https://eips.ethereum.org/EIPS/eip-7623) proposes adjusting the calldata cost to reduce the maximum possible block size.\n\nNo diff for L2 is needed, calldata costs can be adopted directly.\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435", "CLOSED", 0, "refcell", "2025-01-15T16:45:10Z", "2025-01-23T19:45:15Z", "2025-01-23T19:45:15Z", "ethereum-optimism/specs", "2025-08-31 00:17:47"]
["I_kwDOLB-lzc6mUOwb", 506, "EIP-7685: General Purpose Execution Layer Requests", "### Description\n\n[EIP-7685](https://eips.ethereum.org/EIPS/eip-7685) introduces a way of sharing execution layer requests with the consensus layer.\n\nFull inclusion of EIP-7685 on L2 requires batch format changes, gossip format changes, and more.\n\nTo support EIP-7685 on L2, the following are needed.\n- Infer the block content based on fork, and add the missing attributes.\n- Sanity-check in the CL that the EL didn't include any requests. (`op-node`)\n- EL requests need to be persisted, or recomputed, somewhere if we do want to have them. Since the batch-submitter has to be aware of them, for other nodes to replicate them from the batch data.\n    - The EL requests could be stored in the op-node until the batch-submitter consumes them.\n- The engine API\u00a0`engine_newPayloadV4`\u00a0is required to build prague blocks, but includes a\u00a0`executionRequests`\u00a0attribute. We'll need to pass an empty list as argument.\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435", "CLOSED", 0, "refcell", "2025-01-15T16:40:09Z", "2025-01-22T21:25:23Z", "2025-01-22T21:25:23Z", "ethereum-optimism/specs", "2025-08-31 00:17:47"]
["I_kwDOKIsnqM6YttpP", 336, "Remove hardcoded addresses", "Tasks often have hardcoded addresses, such as in the `.env` files. These are hard to verify, as the task reviewers need to find a source of truth for validating an address.\r\n\r\nInstead, for commonly used addresses that are not in the superchain registry, we should:\r\n- First try to add them to the superchain registry. May need to work with @bitwiseguy @geoknee @alfonso-op on this\r\n- If for some reason we don't want them in the Superchain Registry, consider an `addresses.toml` file for each network (i.e. one in `tasks/eth`, one in `tasks/sep`, etc. Consider an approach like the JSON address files used in forge-proposal-simulator which are parsed via their [`Addresses.sol`](https://github.com/solidity-labs-io/forge-proposal-simulator/blob/main/addresses/Addresses.sol) file.\r\n\r\nThen, the justfiles and solidity scripts should read addresses from those two sources.\r\n\r\nThe `.env` file often needs to define the safe that is signing\u2014this can instead be a role or Safe name, and converted from a name to an address based on the above sources.\r\n\r\nThis issue should only be done after https://github.com/ethereum-optimism/superchain-ops/issues/335 to provide confidence that the changes work as intended. We should ensure that the changes made by this issue are covered by the test tasks added by #335, and if not, expand the scope of the test tasks to ensure converage", "CLOSED", 0, "mds1", "2024-10-02T16:22:15Z", "2025-01-23T23:31:15Z", "2025-01-23T23:31:14Z", "ethereum-optimism/superchain-ops", "2025-08-31 00:17:52"]
["I_kwDODjvEJM6nVZiK", 13944, "Ensure that we have proofs supports in adding new chains to the dependency set", "From @Inphi  - We should spend time to ensure proofs supports adding new chains to the dependency set. It's not required to ship interop so we may defer this for after interop. \nBut it could save us a lot of headache later if done early in our implementation\n", "CLOSED", 0, "BlocksOnAChain", "2025-01-23T16:43:21Z", "2025-01-23T20:03:52Z", "2025-01-23T20:03:50Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6nUmef", 13938, "Devnet preparation for MT cannon", "@mbaxter  - will add all the small tasks that we need to track in order to cover our devnet release for next week: MIPS contract deployment and any loose ends", "CLOSED", 0, "BlocksOnAChain", "2025-01-23T15:22:45Z", "2025-01-23T15:37:36Z", "2025-01-23T15:37:34Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6ms58A", 13846, "Cannot land a tx in block 1", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!---->\n\nNot really a bug as I've found out from other sources that it is intended behaviour. Do forgive me, and if there's a more appropriate place to ask this question, close this issue and please let me know. \n\n I am trying to troubleshot a more complex tool, but to simplify the issue I wrote a simple script that:\n- subscribes to block headers\n- on new block (block0) -> send a valid tx\n- expect to see the tx land in block1\n\nI've tried this with a range of gas/tip, and 2 paid RPC urls. One being a dedicted Chainstack node that I have ~3ms latency to. I've tried sending the tx via go-ethereum, op-geth, and via raw http. \n\nHere's my log output\n```\n2025-01-18T04:04:17Z INF ================ Block 25191854 ================\n2025-01-18T04:04:17Z INF 0ms: built tx\n2025-01-18T04:04:17Z INF 26ms: sent tx. block [25191854]\n2025-01-18T04:04:19Z INF ================ Block 25191855 ================\n2025-01-18T04:04:21Z INF ================ Block 25191856 ================\n2025-01-18T04:04:21Z INF 4169ms: tx success. block [25191856]\n```\nIn all scenarios, I never land in block1, only block2. Despite the tx being submitted 26ms into the current block.\n\n\n**Steps to Reproduce**\nOutlined above. I'm happy to provide the full debug script if that helps. \n\n**Expected behavior**\nTransaction mined in block1\n\n**Environment Information:**\nHave tried on both Ubuntu and MacOS\n\n**Configurations:**\nN/A\n\n**Logs:**\nSee above\n\n**Additional context**\nHavent been able to find much direct info on line, but as mentioned above, I've been told by the AI overlords that this is normal L2 behaviour. Not sure I buy it so would like to hear it from the source. \n\nFrom the overlords\n```\nThe behavior you're seeing is actually expected on BASE (and most L2s) due to how their block production and transaction inclusion works:\n- When you submit a transaction in block N, even if done immediately when the block is received:\n- The transaction first needs to be included in the mempool\n- Then it needs to be picked up by the sequencer for the next block\nDue to timing of block production and sequencer batching, your transaction typically lands in block N+2\n```\n\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "m-quigley", "2025-01-18T06:17:41Z", "2025-01-22T11:25:54Z", "2025-01-22T11:25:54Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6mL5op", 13765, "Deploy Monitoring Services to Prod, and Run Drippie on Mainnet", "", "CLOSED", 0, "ControlCplusControlV", "2025-01-14T19:37:25Z", "2025-01-22T15:17:17Z", "2025-01-22T15:17:17Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6mL5W4", 13762, "Deploy Monitoring Services to Sepolia", "", "CLOSED", 0, "ControlCplusControlV", "2025-01-14T19:36:44Z", "2025-01-21T21:59:42Z", "2025-01-21T21:59:42Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6mBsEe", 13739, "txmgr: Handle \"already mined\" cased when publishing a tx", "There seems to be a bug in the txmgr where it doesn't exit its publishing loop when encountering an \"already mined\" error.  This can happen if there's an L1 rpc connection error publishing the tx, but the rpc did publish the tx in the background nonetheless and the tx is then included.", "CLOSED", 0, "sebastianst", "2025-01-13T21:26:02Z", "2025-01-22T19:54:06Z", "2025-01-22T19:54:06Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6jnaud", 13443, "Futex implementation is quite complex and still wrong at times", "**Description**\nExcept from finding #7, the FUTEX_WAIT and FUTEX_WAKE mechanism is probably sound, considering how applications make use of futexes, but not the correct behavior.\n\nTo be consistent with Linux:\n\nChanging the memory value must not automatically wake the thread;\nKeeping the memory value must not prevent it from being woken. Another thread calling `FUTEX_WAKE` is all it takes;\nCalling FUTEX_WAKE needs to wake as many threads as supplied in val, not just one.\nThat said, any sane application will be protected from spurious wakes, thus countering issue 1., and they will only rely on the futex state to decide whether to wake up or go back to sleep, countering issue 2. Issue 3. is countered by the fact that every thread is scheduled eventually, regardless if it is asleep or not, so threads not awaken by FUTEX_WAKE will be awaken by the scheduler, provided the futex value allows it.\n\nSo, the current behavior is sound if the application is not doing anything \"creative\", and just using futex as intended (i.e. using it as a semaphore/mutex).\n\nThat is a fair assumption that can be expected from normal applications.\n\nThe problem is: there is a much simpler implementation, with better performance, that only requires the application to be protected from spurious wakes (pretty much a requirement for using futex(), documented in the man page).\n\n**Recommendation**\nIgnore futexes almost entirely, remove state entries related to them, and treat FUTEX_WAIT as if (*uaddr == val) { sched_yield(); } (mind finding #7, as it still applies in this case), or even simpler, as a plain sched_yield(), as the only possibility of *uaddr != val is if the thread was preempted between the userspace variable check and the futex() call, which is a very rare occurrence, and there is no harm in yielding anyway.\n\nGiven the static nature of the scheduler, it may be a good idea that FUTEX_WAKE is treated as sched_yield(), too, so to prevent starvation in case there is a thread spending most of its time holding a lock of interest to some other thread (not the case in most well written programs).\n\nIn this proposal, every thread is waked every time. This makes sense in MTCannon because every thread is rotated every time through the scheduler, so there is very little gain in number of state steps in skipping those threads. This is unlike Linux, where the vast majority of tasks are asleep and not even considered for scheduling.\n\nOf course, this is the simplest extreme. A middle ground would be to remove the state.wakeup and the wakeup procedure, as it adds nothing.\n\n[packages/contracts-bedrock/src/cannon/MIPS64.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/MIPS64.sol#L220-L238)\n            // Search for the first thread blocked by the wakeup call, if wakeup is set\n            // Don't allow regular execution until we resolved if we have woken up any thread.\n            if (state.wakeup != sys.FUTEX_EMPTY_ADDR) {\n                if (state.wakeup == thread.futexAddr) {\n                    // completed wake traversal\n                    // resume execution on woken up thread\n                    state.wakeup = sys.FUTEX_EMPTY_ADDR;\n                    return outputState();\n                } else {\n                    bool traversingRight = state.traverseRight;\n                    bool changedDirections = preemptThread(state, thread);\n                    if (traversingRight && changedDirections) {\n                        // then we've completed wake traversal\n                        // resume thread execution\n                        state.wakeup = sys.FUTEX_EMPTY_ADDR;\n                    }\n                    return outputState();\n                }\n            }\n[packages/contracts-bedrock/src/cannon/MIPS64.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/MIPS64.sol#L245-L268)\n            // check if thread is blocked on a futex\n            if (thread.futexAddr != sys.FUTEX_EMPTY_ADDR) {\n                // if set, then check futex\n                // check timeout first\n                if (state.step > thread.futexTimeoutStep) {\n                    // timeout! Allow execution\n                    return onWaitComplete(thread, true);\n                } else {\n                    uint64 mem = MIPS64Memory.readMem(\n                        state.memRoot,\n                        thread.futexAddr & arch.ADDRESS_MASK,\n                        MIPS64Memory.memoryProofOffset(MEM_PROOF_OFFSET, 1)\n                    );\n                    if (thread.futexVal == mem) {\n                        // still got expected value, continue sleeping, try next thread.\n                        preemptThread(state, thread);\n                        return outputState();\n                    } else {\n                        // wake thread up, the value at its address changed!\n                        // Userspace can turn thread back to sleep if it was too sporadic.\n                        return onWaitComplete(thread, false);\n                    }\n                }\n            }", "CLOSED", 0, "BlocksOnAChain", "2024-12-17T13:58:55Z", "2025-01-22T19:24:39Z", "2025-01-22T19:24:39Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6c-Xl2", 12814, "cannon64: Superchain-ops scripts for op-sepolia deployment", "Prepare the superchain-ops scripts for upgrading MIPS on op-sepolia and op-sepolia-devnet-0.", "CLOSED", 0, "Inphi", "2024-11-04T18:54:22Z", "2025-01-23T16:24:07Z", "2025-01-23T16:24:06Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6bzBwK", 12646, "Interop: adjust local-safe updates to be triggered at Holocene safe-head updates", "Post-holocene, a span-batch may be partially valid, and the start of the thus-far valid batch will stick around.\r\n\r\nPre-holocene this is not the case. Interop assumes Holocene behavior, to simplify when L2 blocks may or may not be reorged, by leaving the existing \"pending\" chain in place.\r\n\r\nFor now, while Holocene is in active development, we emit a `InteropPendingSafeChangedEvent` to signal these pending-safe changes in the engine-state, which can be assumed as local-safe changes in interop.\r\n\r\nOnce we make Holocene a hard pre-requisite of Interop functionality in op-node, we can possibly clean up this code-path, and adjust the event naming to not be interop-specific anymore.\r\n", "CLOSED", 0, "protolambda", "2024-10-25T11:31:33Z", "2025-01-21T23:17:09Z", "2025-01-21T23:17:08Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6bTj_s", 12567, "Holocene-D: Reorganize `baseBatchStage` code", "A quick follow-up to #12417 to reorganize the `baseBatchStage` code into its own file. Avoided to pack into the existing batch stage PR to avoid conflicts with stacked PRs.\r\n\r\n> nit: It feels a little weird to have `BatchQueue` defined in the middle of `baseBatchStage` functions. Might be worth keeping the `baseBatchStage` stuff together and the two implementations either below or in separate files.\r\n\r\n_Originally posted by @ajsutton in https://github.com/ethereum-optimism/optimism/pull/12417#discussion_r1805670426_\r\n            ", "CLOSED", 0, "sebastianst", "2024-10-22T14:16:18Z", "2025-01-21T15:09:42Z", "2025-01-21T15:09:42Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDODjvEJM6Sik0t", 11428, "Devnet broken for all versions", "Hi All,\r\n\r\nAll versions of optimism has devnet broken. \r\n\r\nThis is the error:\r\n\r\n```\r\nFatal: Failed to register the Ethereum service: incompatible state scheme, stored: path, provided: hash\r\nFatal: Failed to register the Ethereum service: incompatible state scheme, stored: path, provided: hash\r\n```\r\n\r\nLooks like l2 is not able to connect with l1, causing l2 to break:\r\n\r\n```\r\n3ba208be5fb3   ops-bedrock-l2      \"/bin/sh /entrypoint\u2026\"   57 seconds ago       Exited (1) 55 seconds ago                                                                                    ops-bedrock-l2-1\r\n```\r\n\r\nLooking at changes:\r\n\r\nI believe there might be a dynamic dependency or something where previously it was working with Path, and now it isn't.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/commit/dae091f75731e90b6d4646adc4fa129645e56af1#diff-46560dcdaebe1cfcb3efb2042a1c4fdf8a504363bd3d0ca6a3fc85baa6e50296R49\r\n\r\nthis commit by @protolambda likely fixed it.\r\n\r\nCan we backport this, or release a new version with this fixed? Devnet is very important to run integration tests against to make sure the underlying rpcs/network did not evolve\r\n\r\n", "CLOSED", 0, "imnotanoob", "2024-08-09T19:24:59Z", "2025-01-21T15:03:16Z", "2025-01-21T15:03:14Z", "ethereum-optimism/optimism", "2025-08-31 00:18:11"]
["I_kwDOMMiGhs6hxP0l", 292, "Evaluate Mise for dependency management", "OP Labs is using [Mise](https://mise.jdx.dev/) for dependency management in other parts of the org, and we should use it in Supersim if it makes sense.\n\nDefinition of Done: \n[] Mise is evaluated as a dependency management tool for Supersim\n[] If it makes sense, a new issue is created with a spec for implementation", "CLOSED", 0, "fainashalts", "2024-12-03T05:32:12Z", "2025-01-21T18:13:55Z", "2025-01-21T17:53:59Z", "ethereum-optimism/supersim", "2025-08-31 00:18:16"]
["I_kwDOL-xLQ86n5XGr", 148, "[nat] Refactor NAT", "- Allow for easier configuration passing\n- Allow for easier logger passing\n- Create some initial utility functions for common operations", "CLOSED", 0, "scharissis", "2025-01-28T22:21:50Z", "2025-01-30T03:54:42Z", "2025-01-30T03:54:42Z", "ethereum-optimism/infra", "2025-08-31 00:19:28"]
["I_kwDOL-xLQ86n5UvX", 147, "[nat] Update README", "* Ensure we reflect the current project state\n* Make it more approachable to external contributors; describe how to add new tests", "CLOSED", 0, "scharissis", "2025-01-28T22:14:16Z", "2025-01-29T16:07:11Z", "2025-01-29T16:07:11Z", "ethereum-optimism/infra", "2025-08-31 00:19:28"]
["I_kwDOL-xLQ86n49qT", 137, "[nat] Emit prometheus metrics", "* Expose a health endpoint (`/healthz`)\n* Expose a prometheus metrics endpoint (`/metrics`)\n* Emit metrics for validations", "CLOSED", 0, "scharissis", "2025-01-28T21:13:28Z", "2025-01-28T21:14:12Z", "2025-01-28T21:14:11Z", "ethereum-optimism/infra", "2025-08-31 00:19:28"]
["I_kwDOL-xLQ86n45dh", 134, "[nat] Containerise", "Containerise NAT for running both locally (for testing) and remotely (in kubernetes).", "CLOSED", 0, "scharissis", "2025-01-28T21:02:31Z", "2025-01-28T21:09:18Z", "2025-01-28T21:09:17Z", "ethereum-optimism/infra", "2025-08-31 00:19:28"]
["I_kwDOKIwiaM6nvYsH", 1295, "Wrong miner.recommit value", "<!-- please fill out the description and acceptance criteria to the best to your ability. While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description \n<!-- Write a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand-new docs page? -->\n\nThe `miner.recommit` default/suggested value [here](https://docs.optimism.io/builders/node-operators/configuration/execution-config#minerrecommit) is wrongly set to `2s`. It should be `100ms`.\n\n## Acceptance criteria\n<!-- Clearly list out the definition of done. -->\n\nThe `miner.recommit` value is updated from `2s` to `100ms` in the flag description and environment variable/example.\n\n## User stories\n<!-- User stories that illustrate the benefits of this issue. For example, this documentation improvement will allow user X to be able to Y. -->\n\nAs a user, I want to configure the appropriate miner.recommit value. The minimum recommended value is 2s. With a block time of 2s, this setting would prevent transactions submitted during block building from being included in the same block, instead delaying them to the next block.\n\n## Resources and support\n<!-- Provide additional documentation, context, and subject matter experts to help us complete this issue. -->\n\n@Wazabie \n[Slack Thread](https://oplabs-pbc.slack.com/archives/C048ZRM3L4C/p1738004520977979)\n[OPM value](https://github.com/ethereum-optimism/optimism-charts/blob/main/charts/node/charts/op-geth/defaults.yaml#L21)\n[Full context on why we need short recommit time](https://www.notion.so/oplabs/op-geth-tx-inclusion-latency-1eb403fdb3424a47aff0455e12f3a984)\n\n## Action items\n<!-- Clear steps to take to complete this issue -->\n\nUpdate `miner.recommit` time to `100ms` on [this doc page](https://docs.optimism.io/builders/node-operators/configuration/execution-config#minerrecommit)\n- Default value\n- Example\n- Environment Variable\n\n Link: https://oplabs-pbc.slack.com/archives/C04NY6J9DDM/p1736580423789289\n\n <!-- Pylon-Issue-ID:8e109633-667e-4cdb-971a-88bbe394b411 -->", "CLOSED", 0, "Wazabie", "2025-01-27T22:48:04Z", "2025-01-27T23:12:22Z", "2025-01-27T23:12:22Z", "ethereum-optimism/docs", "2025-08-31 00:19:31"]
["I_kwDOKIwiaM6kBCE9", 1187, "Section for Standard Config", "## Brief Description of the Docs Request\nWe should have a section describing the standard configuration.\n\n## Description of the Documentation You'd Like\nI see this as a section to add under the \"OP Stack\" section which explains what standard configuration is. We can then explain that OP-Deployer does a lot of the work to ensure you are deploying a standard config-compliant chain. We should also link out to the superchain registry. \n\n## Links to Related Pages\nhttps://specs.optimism.io/protocol/configurability.html\nhttps://github.com/ethereum-optimism/superchain-registry\n\n## Additional Context\nIn dev support we get many questions asking what is and isn't standard configuration. i.e. we had a partner asking if custom gas token is currently considered standard config (it isn't).\n\n\n\n\n\n <!-- Pylon-Issue-ID:bda01072-471e-42f3-8396-aab880afa9ca -->", "CLOSED", 0, "ZakAyesh", "2024-12-20T01:28:10Z", "2025-01-30T19:40:06Z", "2025-01-30T19:40:06Z", "ethereum-optimism/docs", "2025-08-31 00:19:31"]
["I_kwDOKIwiaM6ePrb1", 1109, "[2024 Q4 Audit] builders/chain-operators/features/preinstalls.mdx", "## Description of the updates required\n\nThe current preinstall page is missing some newer preinstalls. \nFor example, it is missing [CreateX preinstall](https://github.com/ethereum-optimism/optimism/pull/11618). \n\nWe should also include a procedure explaining how can chains add newer preinstalls to their chain, that they didn't already include at Genesis.\n\n### Acceptance criteria\n\nPreinstalls in docs are matching the specs. A guide on adding in newer preinstalls is included on page.\n\n### Resources\n\nSpecs list on missing preinstalls\n[Specs Page on preinstalls](https://specs.optimism.io/protocol/preinstalls.html)\n\nFeel free to reach out to me (Zak) for support on this issue. This was based on partner feedback in a support issue.\n\n### Action items\n\n- [ ] Confirm which preinstalls we are missing on that page\n- [ ] Add missing preinstalls to the list\n- [ ] Write a short guide on this page on how chain operators can add any preinstalls that aren't already on their chain\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntags: [\"preinstalls\"]\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisc\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nop-supervisor\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>\n\n", "CLOSED", 0, "ZakAyesh", "2024-11-13T10:00:45Z", "2025-01-30T19:43:51Z", "2025-01-30T19:43:50Z", "ethereum-optimism/docs", "2025-08-31 00:19:31"]
["I_kwDOKIwiaM6aapQU", 993, "[2024 Q4 Audit] builders/chain-operators/deploy/genesis.mdx", "<!-- this template is intended for internal OP Labs usage -->\r\n\r\n## Description of the updates required\r\n\r\n- this needs to be rewritten to use op-deployer to generate the genesis file and the rollup configuration file\r\n- this section should flow from deployment of the L1 contracts, genesis creation, and then spinning up the offchain components\r\n\r\n## Github issue label criteria\r\n\r\n> Choose the appropriate github issue labels for each page.\r\n\r\n<details>\r\n\r\n<summary>Priority</summary>\r\n\r\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\r\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\r\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\r\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\r\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>T-shirt size</summary>\r\n\r\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\r\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\r\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\r\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \r\n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Content evaluation</summary>\r\n- `a-delete`: don't need this page \r\n- `a-duplicate`: some content lives elsewhere \r\n- `a-minor`: needs small revisions \r\n- `a-moderate`: needs moderate revisions \r\n- `a-critical`: needs a lot of work\r\n</details>\r\n\r\n## MDX Metadata format\r\n\r\n> We will be adding better metadata to the header of each page. \r\n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\r\n> Parse the component and feature tags to add.\r\n\r\n```mdx\r\ntags: [\"op-deployer\", \"eng-protocol\"]\r\n```\r\n\r\n```mdx\r\n---\r\ntitle: \"Your Title Here\"\r\ntags: [\"tag1\", \"tag2\"]\r\ndescription: \"A short description of the content.\"\r\n---\r\n```\r\n\r\n<details>\r\n<summary>Component tags</summary>\r\n\r\n```\r\nop-node\r\nop-geth\r\nop-reth\r\nop-erigon\r\nop-nethermind\r\nbatcher\r\nstandard-bridge\r\nsequencer\r\nl1-contracts\r\nl2-contracts\r\nprecompiles\r\npredeploys\r\npreinstalls\r\nop-proposer\r\nop-challenger\r\nop-gov-token\r\nop-supervisor\r\nop-conductor\r\nfp-contracts\r\ncannon\r\nop-program\r\nasterisc\r\nkona\r\nsuperchain-registry\r\nsupersim\r\ndev-console\r\nopsm\r\nmcp\r\nmcp-l2\r\ndeputy-guardian\r\nliveness-guard\r\ndispute-mon\r\nop-beat\r\nop-signer\r\nmonitorism\r\nblockspace-charters\r\nop-workbench\r\nkubernetes-infrastructure\r\ndevops-tooling\r\nartifacts-packaging\r\nsequencer-in-a-box\r\ndevnets\r\nop-supervisor\r\nperformance-tooling\r\npeer-management-service\r\nproxyd\r\nzdd-service\r\nsnapman\r\nsecurity-tools\r\nsuperchain-ops\r\nop-deployer\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Engineering tags</summary>\r\n\r\n```\r\neng-platforms\r\neng-growth\r\neng-devx\r\neng-protocol\r\neng-proofs\r\neng-evm\r\neng-security\r\n```\r\n</details>\r\n\r\n", "CLOSED", 0, "sbvegan", "2024-10-16T05:30:58Z", "2025-01-30T11:43:56Z", "2025-01-30T11:43:56Z", "ethereum-optimism/docs", "2025-08-31 00:19:31"]
["I_kwDOLB-lzc6oRlFv", 564, "Link to span batch spec", "In a sub-bullet to eip7702, the span batch spec https://github.com/ethereum-optimism/specs/issues/318 should be linked\nhttps://github.com/ethereum-optimism/specs/blob/509b58bf8b68049f292ea19686ac9647340a5925/specs/protocol/isthmus/overview.md?plain=1#L18", "CLOSED", 0, "emhane", "2025-01-31T11:43:19Z", "2025-01-31T17:27:46Z", "2025-01-31T17:27:45Z", "ethereum-optimism/specs", "2025-08-31 01:44:22"]
["I_kwDOLB-lzc6nTm2N", 537, "Add EIP-7685 to isthmus overview", "Add EIP-7685 which is missing from overview for isthmus specs\n\nRef https://github.com/ethereum-optimism/specs/pull/525", "CLOSED", 0, "emhane", "2025-01-23T13:37:51Z", "2025-01-27T18:08:54Z", "2025-01-27T18:08:54Z", "ethereum-optimism/specs", "2025-08-31 01:44:22"]
["I_kwDOLB-lzc6mfmsF", 515, "Remove l2tol1 storage root from isthmus specs", "Remove link to l2tol1 storage root spec from isthmus table of contents.", "CLOSED", 0, "emhane", "2025-01-16T17:02:54Z", "2025-01-27T18:48:41Z", "2025-01-27T18:48:39Z", "ethereum-optimism/specs", "2025-08-31 01:44:22"]
["I_kwDOLB-lzc6mUUpD", 511, "EIP-7702: Set EOA account code", "### Description\n\n[EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) adds a new transaction type for EOA account code.\n\n- `op-alloy` modifications needed.\n- `kona` modifications needed.\n    The fault proof program needs to be updated to read EIP-7702 receipts\n    https://github.com/op-rs/kona/blob/main/crates/executor/src/executor/mod.rs#L237-L240\n    Calldata should continue to *not* read EIP-7702 txs since eip-7702 txs are not posted to l1\n    https://github.com/op-rs/kona/blob/main/crates/derive/src/sources/calldata.rs#L50-L55\n- `op-reth` modifications needed.\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435", "CLOSED", 0, "emhane", "2025-01-15T16:51:30Z", "2025-01-30T19:37:21Z", "2025-01-30T19:37:20Z", "ethereum-optimism/specs", "2025-08-31 01:44:22"]
["I_kwDOLB-lzc6mUI1Y", 505, "EIP-6110: Validator Deposits on Chain", "### Description\n\n[EIP-6110](https://eips.ethereum.org/EIPS/eip-6110) includes validator deposits in the execution layer, removing deposit voting from the consensus layer.\n\n\nFrom @protolambda:\n> Can consider an upgrade deposit-tx, with same sender as the pre-determined example tx, to ensure the contract is deployed.\n> The contract is the same, but effectively no-op, not affecting the block.\n\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435\n", "CLOSED", 0, "refcell", "2025-01-15T16:28:24Z", "2025-01-31T12:25:28Z", "2025-01-31T12:25:28Z", "ethereum-optimism/specs", "2025-08-31 01:44:22"]
["I_kwDOLB-lzc6mUF8n", 502, "EIP-7251: Increase the MAX_EFFECTIVE_BALANCE", "https://eips.ethereum.org/EIPS/eip-7251\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435", "CLOSED", 0, "emhane", "2025-01-15T16:22:43Z", "2025-01-28T23:55:21Z", "2025-01-28T23:55:21Z", "ethereum-optimism/specs", "2025-08-31 01:44:22"]
["I_kwDOLB-lzc6SI50M", 318, "Pectra: Span Batch Support", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe will not be able to pull the Paris EVM spec as part of the Pectra hardfork into the OP stack until span batches are updated to support [EIP-7702](https://github.com/ethereum/EIPs/blob/233696d2599e8ad5213a3f26ad1cdf2d8b740be9/EIPS/eip-7702.md) transactions. You can see and example of the lack of support [here](https://github.com/ethereum-optimism/optimism/blob/8741423ea1d5bd9080583783342d15ccde688ea9/op-node/rollup/derive/span_batch_tx.go#L97)\r\n\r\nEIP-7702 is a huge UX win for Ethereum and we certainly want to be able to support it as early as possible. It will be a huge differentiator between EVM chains as applications that are built on it will not be able to support the same UX on chains that do not support it.\r\n\r\nThe span batch spec mentions a [v2](https://github.com/ethereum-optimism/specs/blob/afadeea642d05eda6e111d9098c9a842c2ecf322/specs/protocol/delta/span-batches.md#future-batch-format-extension), we should consider adding EIP-7702 support to span batches v2.\r\n\r\nPectra is targeted to ship in early 2025 and we also want to make sure the spec for 7702 has been finalized before we invest too much time in implementing this", "CLOSED", 0, "tynes", "2024-08-06T22:45:02Z", "2025-01-30T15:18:50Z", "2025-01-30T15:18:50Z", "ethereum-optimism/specs", "2025-08-31 01:44:22"]
["I_kwDODjvEJM6oCisC", 14054, "Enable AltDA package unit tests in ci", "Seems like currently altda unit tests are not being ran in the ci: https://github.com/ethereum-optimism/optimism/blob/develop/.circleci/config.yml#L1421-L1439\n\nOne of them was actually failing: #14050 \n\nIs there a specific reason for not enabling these?", "CLOSED", 0, "vdrg", "2025-01-29T20:34:51Z", "2025-01-30T00:35:16Z", "2025-01-30T00:35:16Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6n-h6C", 14040, "kurtosis-devnet: mini-devnet not working (can't pull ':latest' with platform '')", "**Bug Description**\nTrying to run the kurtosis mini-devnet fails with the following error, I've attached a file with the full execution log:\n```\n2025/01/29 13:00:22 Error: error deploying environment: error deploying kurtosis package: validation error: error_message:\"Error while validating final environment of script\n    Caused by: Failed fetching the required image ''.\n    Caused by: An error occurred pulling image ''\n --- at /home/circleci/project/container-engine-lib/lib/backend_impls/metrics_reporting/metrics_reporting_kurtosis_backend.go:38 (MetricsReportingKurtosisBackend.FetchImage) ---\nCaused by: An error occurred fetching image ''\n --- at /home/circleci/project/container-engine-lib/lib/backend_impls/docker/docker_manager/docker_manager.go:1310 (DockerManager.FetchImage) ---\nCaused by: Failed to pull Docker image ':latest' from remote image repository.\n --- at /home/circleci/project/container-engine-lib/lib/backend_impls/docker/docker_manager/docker_manager.go:1288 (DockerManager.FetchLatestImage) ---\nCaused by: Tried pulling image ':latest' but failed\n --- at /home/circleci/project/container-engine-lib/lib/backend_impls/docker/docker_manager/docker_manager.go:1641 (DockerManager.pullImage) ---\nCaused by: Tried pulling image ':latest' with platform '' but failed\n --- at /home/circleci/project/container-engine-lib/lib/backend_impls/docker/docker_manager/docker_manager.go:2319 (pullImage) ---\nCaused by: invalid reference format\"\n```\n\n**Steps to Reproduce**\n1. Checkout commit 7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1\n1. Follow the \"Getting Started\" instructions in kurtosis-devnet/README.md\n2. Run `just mini-devnet`\n\n**Expected behavior**\nThe devnet should start up without issue.\n\n**Environment Information:**\n - Operating System: macOS Sonoma 14.7.2 (23H311)\n - Package Version (or commit hash): 7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1\n\n**Logs:**\n[mini-devnet.log](https://github.com/user-attachments/files/18588040/mini-devnet.log)", "CLOSED", 0, "piersy", "2025-01-29T13:12:52Z", "2025-01-30T17:51:26Z", "2025-01-30T17:03:38Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6n99eN", 14037, "kurtosis-devnet: simple-devnet & interop-devnet not working (max code size exceeded)", "**Bug Description**\nTrying to run the kurtosis `simple-devnet` or `interop-devnet` fails, the first error states that \"max code size exceeded\". I've attached files with full execution logs for each devnet.\n\n**Steps to Reproduce**\n1. Checkout commit 7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1\n1. Follow the \"Getting Started\" instructions in kurtosis-devnet/README.md\n2. Run `just simple-devnet` or `just interop-devnet`\n\n**Expected behavior**\nThe devnet should start up without issue.\n\n**Environment Information:**\n - Operating System: macOS Sonoma 14.7.2 (23H311)\n - Package Version (or commit hash): 7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1\n\n**Logs:**\n[simple-devnet.log](https://github.com/user-attachments/files/18587341/simple-devnet.log)\n[interop-devnet.log](https://github.com/user-attachments/files/18587914/interop-devnet.log)", "CLOSED", 0, "piersy", "2025-01-29T12:10:49Z", "2025-01-31T11:53:01Z", "2025-01-31T11:45:45Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6n6IWJ", 14033, "Chain ID format `%v` issue caused by eth.ChainID migration", "When Chain ID is formatted with `%v` now, there's an array of words instead of a number. Example: https://github.com/ethereum-optimism/optimism/blob/c023165711746bece8341b492a9d831a183c89cd/op-program/chainconfig/chaincfg.go#L37", "CLOSED", 0, "meyer9", "2025-01-29T01:27:09Z", "2025-01-29T01:36:06Z", "2025-01-29T01:33:21Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6ns3Nc", 14001, "Genesis block hash mismatch", "```\n  t=2025-01-27T16:38:38+0000 lvl=crit msg=\"Application failed\" message=\"failed to setup: unable to create the rollup node: failed to init L2: failed to get L2 genesis blockhash: expected L2 genesis hash to match L2 block at genesis block number 0: 0xaafd4aa4a5931c5e3c0a9efd5849ce375516eb086fce7bf4182be54921a9af16 <> 0x75cfb71187420e8a72fad24259f061bd1fafe83e0c9d81db225eda942997a84b\"\n```\n\nRef https://github.com/ethereum-optimism/op-reth/actions/runs/12993424665/job/36236447668#step:6:996", "CLOSED", 0, "emhane", "2025-01-27T16:59:27Z", "2025-01-29T12:09:13Z", "2025-01-29T12:09:11Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6nn9Mq", 13995, "Integrating optimism rollup to hyperledger qbft  or private network", "this are the things i've done\n1.setup 3 qbft node\n2.successfully deployed op roll up smart contracts\ncurrent issue\n1.generated hash of qbft is not match to the expected hash of op-node thats why i cant run it, im thinking i will change the op-node by introducing a flag that this optimism will be use for qbft network", "CLOSED", 0, "bechain-foundation", "2025-01-27T07:27:35Z", "2025-01-27T16:16:11Z", "2025-01-27T16:04:17Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6njRqH", 13981, "op-serivce: adaptation for Ethereum Pectra upgrade EIP-7685", "Hi OP teams, I noticed that Ethereum EIP-7685 add `RequestsHash` to block header, refers https://github.com/ethereum/go-ethereum/blob/master/core/types/block.go#L108 , this field affects the calculation of the block hash. Therefore, corresponding adaptations are required in the  op-service `RPCHeader` to ensure that the block hash calculated by the op-node is consistent with the one queried from L1. Otherwise, abnormal errors may occur in the op-network during future Ethereum mainnet upgrades\n\n", "CLOSED", 0, "pandainzoo", "2025-01-25T15:37:52Z", "2025-01-28T18:54:15Z", "2025-01-28T18:54:15Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6nYOs7", 13957, "superchain: adapt to SR 2.0 API", "Recently, op-geth was updated to use the new superchain-registry 2.0: https://github.com/ethereum-optimism/op-geth/pull/466. The new bindings don't use the superchain-registry as a go module any more, but instead bundle the config within op-geth.\n\nThe monorepo op-geth dependency needs updating to a recent version with the new SR 2.0 bindings and adaption to the new API. This also means removing the superchain-registry as a go dependency.\n\nI've created an rc tag `v1.101412.0-rc.2` for op-geth that can be used when updating the dependency.\n\nThis is currently blocking L1 Pectra support.", "CLOSED", 0, "sebastianst", "2025-01-23T23:28:44Z", "2025-01-27T18:30:36Z", "2025-01-27T18:30:36Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6nEws8", 13875, "Extend Code Coverage to include forked upgrade tests", "Currently when changes are made to `opcm.upgrade()` those changes are shown as untested by CodeCov, This is a result of the coverage report being generated by `forge coverage` which skips the `upgrade()` method tests.\n\nWe should address this by:   \n\n1. creating a variant of the `just test-upgrade` command which generates a coverage report.  \n2. unifying the the two coverage reports before uploading to codecov.\n", "CLOSED", 0, "maurelian", "2025-01-21T23:45:25Z", "2025-01-28T19:28:53Z", "2025-01-28T19:28:52Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6mqx1I", 13836, "Add _postCheck() function to OPCM", "              the current upgrade doesn't give us much that we can make assertions on, at least not without going into the nitty-gritty details (ie. checking all the getters, etc). \r\n\r\nWe are not yet able to check init'd status on-chain. \r\nWe _could_ check that semvers are set as expected?\r\n\r\nAt the least we should create an internal `_postCheck()` function in the OPCM which prompts developers to define whatever checks are appropriate while creating an upgrade.\r\n\r\n_Originally posted by @maurelian in https://github.com/ethereum-optimism/design-docs/pull/173#discussion_r1920697937_\r\n            ", "CLOSED", 0, "maurelian", "2025-01-17T20:20:44Z", "2025-01-30T20:02:41Z", "2025-01-30T20:02:20Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6mVkmc", 13791, "op-batcher: EIP-7623 calldata cost change support in auto-da selection", "The batcher's current auto-da selection code probably isn't aware of a change in calldata cost due to EIP-7623 when Pectra activates on L1.\n\nWe must add Pectra L1 support to the batcher so that it's heuristic automatically chooses the correct calldata cost when estimating calldata vs blob costs.", "CLOSED", 0, "sebastianst", "2025-01-15T19:32:49Z", "2025-01-31T18:40:50Z", "2025-01-31T18:40:50Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6lv42K", 13699, "[Tracker] Asterisc/Kona placeholder", "", "CLOSED", 0, "benjaminion", "2025-01-10T18:14:10Z", "2025-01-28T01:39:28Z", "2025-01-28T01:39:28Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6loN41", 13674, "Document implications of init slot migration on L2 contracts (Upgrade 12)", "Whenever we eventually upgrade L2 contracts, the initializers will also have moved.\n\nWe will need to document this clearly and put in place a plan to ensure it is managed.", "CLOSED", 0, "maurelian", "2025-01-09T21:28:43Z", "2025-01-29T20:21:36Z", "2025-01-29T20:21:35Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6iM1KJ", 13268, "New `op-deployer upgrade` command", "This new command will be invoked something like:\n\n```shell\nop-deployer upgrade \\\n  --version $TAG \\ # a valid L1 op-contracts release tag\n  --l1-rpc-url $RPC_URL \\\n  --mode $MODE # options are 'simulate' or 'json'\n```\n\nWhat it does:\n\n1. Will require an intent file which specifies: \n\t- the `l2ChainId`s to be upgraded (used to fetch `SystemConfig` addresses from the `superchain-registry`)\n    - depending on the upgrade may or may not require additional new config values to be specified, so this will vary between releases.\n1. Reads the address of the version specific OPCM from the relevant [`standard-versions-X.toml`](https://github.com/ethereum-optimism/superchain-registry/blob/a54d203e727f1cdeff06b883e239febf92b4b1d6/validation/standard/standard-versions-mainnet.toml) file for the base chain. ([Ticket](https://github.com/ethereum-optimism/optimism/issues/13082)).\n1. Simulates the upgrade calls.\n1. If `$MODE=json`, prints a JSON bundle using the Gnosis Safe tx-builder format which is currently \n   accepted by the `superchain-ops` repo. \n\n\n\n", "CLOSED", 0, "maurelian", "2024-12-05T19:55:49Z", "2025-01-30T22:12:45Z", "2025-01-30T22:12:44Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6dUqa4", 12859, "OP-Deployer won't deploy to Holesky testnet", "**Bug Description**\r\nop-deployer won't deploy to Ethereum's Holesky testnet, it produces the following error:\r\n\r\n```\r\nApplication failed: error getting superchain config: unsupported chain ID: 17000\r\n```\r\n\r\n**Steps to Reproduce**\r\nRan command below:\r\n\r\n```\r\nop-deployer bootstrap opcm --l1-rpc-url endpoint --private-key prKey --artifacts-locator \u00adtag://op-contracts/v1.6.0 \r\n```\r\n\r\n**Environment Information:**\r\nMacOS Sonoma version 14.4\r\n\r\nMonorepo Git HEAD Commit Hash: b6bd58e\r\n\r\n\r\n**Logs:**\r\n```\r\nop-deployer bootstrap opcm --l1-rpc-url endpoint --private-key prKey --artifacts-locator \u00adtag://op-contracts/v1.6.0 \r\nINFO [11-06|17:45:29.977] artifacts download progress              current=4096 total=54,132,933\r\nINFO [11-06|17:45:30.977] artifacts download progress              current=39,353,107 total=54,132,933\r\nApplication failed: error getting superchain config: unsupported chain ID: 17000\r\n```\r\n\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "ZakAyesh", "2024-11-06T23:01:56Z", "2025-01-28T08:52:26Z", "2024-11-27T23:39:43Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM6cqh2N", 12768, "Interop: make action-tests interact with contracts", "The system interop tests currently have bindings to 3 contracts:\r\n- an emitter contract, to emit log events\r\n- the L1 system config, to emit dependency-set changes\r\n- a crossL2Inbox contract interface, to execute messages\r\n\r\nThese bindings can be found here: https://github.com/ethereum-optimism/optimism/tree/develop/op-e2e/interop/contracts\r\nWe should move this whole package into a new `op-e2e/e2eutils/interop` package, so the bindings are available to the action tests.\r\n\r\nIn the `op-e2e/actions/interop` we can then instantiate the bindings per L2 chain.\r\nAnd use them to run through executing messages between chains, similar to the system test, but in the action-test format, for a more controlled environment for debugging.\r\n", "CLOSED", 0, "protolambda", "2024-11-01T06:01:50Z", "2025-01-31T21:08:06Z", "2025-01-31T21:08:05Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM558oKV", 8655, "Failed to deploy contract when create L2 Rollup", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\n\r\n```\r\nforge script scripts/Deploy.s.sol:Deploy --private-key $GS_ADMIN_PRIVATE_KEY --broadcast --rpc-url $L1_RPC_URL\r\n```\r\n\r\n```\r\n# forge script scripts/Deploy.s.sol:Deploy --private-key $GS_ADMIN_PRIVATE_KEY --broadcast --rpc-url $L1_RPC_URL\r\n[\u2818] Compiling...\r\nNo files changed, compilation skipped\r\nTraces:\r\n  [55754328] \u2192 new Deploy@0x5b73C5498c1E3b4dbA84de0F1833c4a029d90519\r\n    \u2514\u2500 \u2190 277665 bytes of code\r\n\r\n  [0] Deploy::setUp()\r\n    \u251c\u2500 [0] VM::projectRoot() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(DEPLOY_SCRIPT, Deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(DEPLOYMENT_CONTEXT, )\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(SIG, run)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(DEPLOY_FILE, run-latest.json)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(CHAIN_ID, 11155111 [1.115e7])\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::toString(11155111 [1.115e7]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::createDir(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started, true)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.chainId) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(STRICT_DEPLOYMENT, true)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::parseUint(11155111) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::toString(11155111 [1.115e7]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Connected to network with chainid %s, 11155111 [1.115e7]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Storing temp deployment data in %s, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(CONTRACT_ADDRESSES_PATH, )\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::projectRoot() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] \u2192 new <Unknown>@0xC7f2Cf4845C6db0e1a1e91ED41Bcd0FcC1b0E141\r\n    \u2502   \u251c\u2500 [0] console::log(DeployConfig: reading file %s, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deploy-config/getting-started.json) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deploy-config/getting-started.json) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.finalSystemOwner) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.superchainConfigGuardian) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l1ChainID) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2ChainID) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2BlockTime) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.maxSequencerDrift) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.sequencerWindowSize) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.channelTimeout) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.p2pSequencerAddress) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.batchInboxAddress) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.batchSenderAddress) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2OutputOracleSubmissionInterval) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonInt(<stringified JSON>, $.l2OutputOracleStartingTimestamp) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2OutputOracleStartingBlockNumber) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.l2OutputOracleProposer) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.l2OutputOracleChallenger) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.finalizationPeriodSeconds) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.proxyAdminOwner) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.baseFeeVaultRecipient) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.baseFeeVaultMinimumWithdrawalAmount) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.l1FeeVaultRecipient) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l1FeeVaultMinimumWithdrawalAmount) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.sequencerFeeVaultRecipient) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.sequencerFeeVaultMinimumWithdrawalAmount) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonString(<stringified JSON>, $.governanceTokenName) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonString(<stringified JSON>, $.governanceTokenSymbol) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonAddress(<stringified JSON>, $.governanceTokenOwner) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2GenesisBlockGasLimit) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.l2GenesisBlockBaseFeePerGas) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.gasPriceOracleOverhead) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.gasPriceOracleScalar) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.eip1559Denominator) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.eip1559Elasticity) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [0] VM::parseJsonUint(<stringified JSON>, $.systemConfigStartBlock) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [4717869] VM::parseJsonUint(<stringified JSON>, $.requiredProtocolVersion) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 [4266097] 0xC7f2Cf4845C6db0e1a1e91ED41Bcd0FcC1b0E141::parseJsonUint({\r\n  \"finalSystemOwner\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n  \"superchainConfigGuardian\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n\r\n  \"l1StartingBlockTag\": \"0x1340a43c86ad512bd9414d8c1e6d6908d90d7ffd700633df1f39edd7d89bf9df\",\r\n\r\n  \"l1ChainID\": 11155111,\r\n  \"l2ChainID\": 42069,\r\n  \"l2BlockTime\": 2,\r\n  \"l1BlockTime\": 12,\r\n\r\n  \"maxSequencerDrift\": 600,\r\n  \"sequencerWindowSize\": 3600,\r\n  \"channelTimeout\": 300,\r\n\r\n  \"p2pSequencerAddress\": \"0x5EEbC999B29Ab1b85c33aB4381D3d21fBD7d7Bc6\",\r\n  \"batchInboxAddress\": \"0xff00000000000000000000000000000000042069\",\r\n  \"batchSenderAddress\": \"0x534d556388682e093c8473c9e9C2fd9BBd4BfAD9\",\r\n\r\n  \"l2OutputOracleSubmissionInterval\": 120,\r\n  \"l2OutputOracleStartingBlockNumber\": 0,\r\n  \"l2OutputOracleStartingTimestamp\": 1702878048,\r\n\r\n  \"l2OutputOracleProposer\": \"0x8ee541d093f36EE2c4b7aBF8CaA4847760b84EB8\",\r\n  \"l2OutputOracleChallenger\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n\r\n  \"finalizationPeriodSeconds\": 12,\r\n\r\n  \"proxyAdminOwner\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n  \"baseFeeVaultRecipient\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n  \"l1FeeVaultRecipient\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n  \"sequencerFeeVaultRecipient\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n\r\n  \"baseFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\r\n  \"l1FeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\r\n  \"sequencerFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\r\n  \"baseFeeVaultWithdrawalNetwork\": 0,\r\n  \"l1FeeVaultWithdrawalNetwork\": 0,\r\n  \"sequencerFeeVaultWithdrawalNetwork\": 0,\r\n\r\n  \"gasPriceOracleOverhead\": 2100,\r\n  \"gasPriceOracleScalar\": 1000000,\r\n\r\n  \"enableGovernance\": true,\r\n  \"governanceTokenSymbol\": \"OP\",\r\n  \"governanceTokenName\": \"Optimism\",\r\n  \"governanceTokenOwner\": \"0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\",\r\n\r\n  \"l2GenesisBlockGasLimit\": \"0x1c9c380\",\r\n  \"l2GenesisBlockBaseFeePerGas\": \"0x3b9aca00\",\r\n  \"l2GenesisRegolithTimeOffset\": \"0x0\",\r\n\r\n  \"eip1559Denominator\": 50,\r\n  \"eip1559DenominatorCanyon\": 250,\r\n  \"eip1559Elasticity\": 10,\r\n\r\n  \"systemConfigStartBlock\": 0,\r\n\r\n  \"requiredProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"recommendedProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n}\r\n, $.recommendedProtocolVersion) [staticcall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 43648854190028290368124427828690944273759144372138548774652161029783284670492 [4.364e76]\r\n    \u2502   \u2514\u2500 \u2190 0 bytes of code\r\n    \u251c\u2500 [0] console::log(Deploying from %s, Deploy) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Deployment context: %s, getting-started) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u2514\u2500 \u2190 ()\r\n\r\n  [5284241] Deploy::run()\r\n    \u251c\u2500 [0] console::log(Deploying a fresh OP Stack including SuperchainConfig) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Deploying Safe) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, SafeProxyFactory, 0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, SafeSingleton, 0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [209904] GnosisSafeProxyFactory::createProxyWithNonce(GnosisSafe: [0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552], 0xb63e800de07b31b9ae2dd9127ba81bed8b5cd2354657e610000000000000000000000000000000000000000000000000000000000000000, 1702884876 [1.702e9])\r\n    \u2502   \u251c\u2500 [56609] \u2192 new <Unknown>@0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522\r\n    \u2502   \u2502   \u2514\u2500 \u2190 171 bytes of code\r\n    \u2502   \u251c\u2500 [116646] 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522::setup([0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61], 1, 0x0000000000000000000000000000000000000000, 0x, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000000)\r\n    \u2502   \u2502   \u251c\u2500 [116258] GnosisSafe::setup([0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61], 1, 0x0000000000000000000000000000000000000000, 0x, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000000) [delegatecall]\r\n    \u2502   \u2502   \u2502   \u251c\u2500 emit SafeSetup(initiator: GnosisSafeProxyFactory: [0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2], owners: [0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61], threshold: 1, initializer: 0x0000000000000000000000000000000000000000, fallbackHandler: 0x0000000000000000000000000000000000000000)\r\n    \u2502   \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u251c\u2500 emit ProxyCreation(proxy: 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522, singleton: GnosisSafe: [0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552])\r\n    \u2502   \u2514\u2500 \u2190 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, SystemOwnerSafe, 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(New SystemOwnerSafe deployed at %s, 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Setting up Superchain) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Deploying AddressManager) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [327884] \u2192 new AddressManager@0x0883057921424c9E8a62cD7a5A82d8f6Ef28FFD1\r\n    \u2502   \u251c\u2500 emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 1519 bytes of code\r\n    \u251c\u2500 [307] AddressManager::owner() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, AddressManager, 0x0883057921424c9E8a62cD7a5A82d8f6Ef28FFD1)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(AddressManager deployed at %s, AddressManager: [0x0883057921424c9E8a62cD7a5A82d8f6Ef28FFD1]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Deploying ProxyAdmin) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [1331897] \u2192 new ProxyAdmin@0x3D027235Ec26000ce92b008719723238786805CB\r\n    \u2502   \u251c\u2500 emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u251c\u2500 emit OwnershipTransferred(previousOwner: 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61, newOwner: 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 6524 bytes of code\r\n    \u251c\u2500 [363] ProxyAdmin::owner() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61\r\n    \u251c\u2500 [2325] ProxyAdmin::addressManager() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x0000000000000000000000000000000000000000\r\n    \u251c\u2500 [20602] ProxyAdmin::setAddressManager(AddressManager: [0x0883057921424c9E8a62cD7a5A82d8f6Ef28FFD1])\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [325] ProxyAdmin::addressManager() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 AddressManager: [0x0883057921424c9E8a62cD7a5A82d8f6Ef28FFD1]\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, ProxyAdmin, 0x3D027235Ec26000ce92b008719723238786805CB)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(ProxyAdmin deployed at %s, ProxyAdmin: [0x3D027235Ec26000ce92b008719723238786805CB]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [363] ProxyAdmin::owner() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61\r\n    \u251c\u2500 [2330] ProxyAdmin::transferOwnership(0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522)\r\n    \u2502   \u251c\u2500 emit OwnershipTransferred(previousOwner: 0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61, newOwner: 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(ProxyAdmin ownership transferred to Safe at: %s, 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Deploying ERC1967 proxy forSuperchainConfigProxy) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [436020] \u2192 new Proxy@0xB119423a3ca601376CC5626bd17E16Cb78B8662D\r\n    \u2502   \u251c\u2500 emit AdminChanged(previousAdmin: 0x0000000000000000000000000000000000000000, newAdmin: ProxyAdmin: [0x3D027235Ec26000ce92b008719723238786805CB])\r\n    \u2502   \u2514\u2500 \u2190 2059 bytes of code\r\n    \u251c\u2500 [0] VM::load(Proxy: [0xB119423a3ca601376CC5626bd17E16Cb78B8662D], 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, SuperchainConfigProxy, 0xB119423a3ca601376CC5626bd17E16Cb78B8662D)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(   at %s, Proxy: [0xB119423a3ca601376CC5626bd17E16Cb78B8662D]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(IMPL_SALT, ethers phoenix)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [511388] \u2192 new SuperchainConfig@0x9dC06dA2a99aa892EA1a9E199E7854b33df19093\r\n    \u2502   \u251c\u2500 emit ConfigUpdate(updateType: 0, data: 0x0000000000000000000000000000000000000000000000000000000000000000)\r\n    \u2502   \u251c\u2500 emit Initialized(version: 1)\r\n    \u2502   \u2514\u2500 \u2190 2411 bytes of code\r\n    \u251c\u2500 [437] SuperchainConfig::guardian() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x0000000000000000000000000000000000000000\r\n    \u251c\u2500 [0] VM::load(SuperchainConfig: [0x9dC06dA2a99aa892EA1a9E199E7854b33df19093], 0x0000000000000000000000000000000000000000000000000000000000000000) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, SuperchainConfig, 0x9dC06dA2a99aa892EA1a9E199E7854b33df19093)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(SuperchainConfig deployed at %s, SuperchainConfig: [0x9dC06dA2a99aa892EA1a9E199E7854b33df19093]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [2423] 0xC7f2Cf4845C6db0e1a1e91ED41Bcd0FcC1b0E141::fa60f9b2() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x000000000000000000000000e0f2186d6dea7b034072ddfdff9c2037c911bc89\r\n    \u251c\u2500 [108667] 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522::execTransaction(ProxyAdmin: [0x3D027235Ec26000ce92b008719723238786805CB], 0, 0x9623609d000000000000000000000000b119423a3ca601376cc5626bd17e16cb78b8662d0000000000000000000000009dc06da2a99aa892ea1a9e199e7854b33df1909300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044400ada75000000000000000000000000e0f2186d6dea7b034072ddfdff9c2037c911bc89000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 0, 0, 0, 0, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000003e07b31b9ae2dd9127ba81bed8b5cd2354657e61000000000000000000000000000000000000000000000000000000000000000001)\r\n    \u2502   \u251c\u2500 [108203] GnosisSafe::execTransaction(ProxyAdmin: [0x3D027235Ec26000ce92b008719723238786805CB], 0, 0x9623609d000000000000000000000000b119423a3ca601376cc5626bd17e16cb78b8662d0000000000000000000000009dc06da2a99aa892ea1a9e199e7854b33df1909300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044400ada75000000000000000000000000e0f2186d6dea7b034072ddfdff9c2037c911bc89000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 0, 0, 0, 0, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000003e07b31b9ae2dd9127ba81bed8b5cd2354657e61000000000000000000000000000000000000000000000000000000000000000001) [delegatecall]\r\n    \u2502   \u2502   \u251c\u2500 [77865] ProxyAdmin::upgradeAndCall(Proxy: [0xB119423a3ca601376CC5626bd17E16Cb78B8662D], SuperchainConfig: [0x9dC06dA2a99aa892EA1a9E199E7854b33df19093], 0x400ada75000000000000000000000000e0f2186d6dea7b034072ddfdff9c2037c911bc890000000000000000000000000000000000000000000000000000000000000000)\r\n    \u2502   \u2502   \u2502   \u251c\u2500 [73315] Proxy::upgradeToAndCall(SuperchainConfig: [0x9dC06dA2a99aa892EA1a9E199E7854b33df19093], 0x400ada75000000000000000000000000e0f2186d6dea7b034072ddfdff9c2037c911bc890000000000000000000000000000000000000000000000000000000000000000)\r\n    \u2502   \u2502   \u2502   \u2502   \u251c\u2500 emit Upgraded(implementation: SuperchainConfig: [0x9dC06dA2a99aa892EA1a9E199E7854b33df19093])\r\n    \u2502   \u2502   \u2502   \u2502   \u251c\u2500 [48821] SuperchainConfig::initialize(0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89, false) [delegatecall]\r\n    \u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500 emit ConfigUpdate(updateType: 0, data: 0x000000000000000000000000e0f2186d6dea7b034072ddfdff9c2037c911bc89)\r\n    \u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500 emit Initialized(version: 1)\r\n    \u2502   \u2502   \u2502   \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u2502   \u2502   \u2502   \u2514\u2500 \u2190 0x\r\n    \u2502   \u2502   \u2502   \u2514\u2500 \u2190 ()\r\n    \u2502   \u2502   \u251c\u2500 emit ExecutionSuccess(txHash: 0x19bfcbd9c71c9218f3956dc13143fdc0c6513935391a59ee519d352230d4264a, payment: 0)\r\n    \u2502   \u2502   \u2514\u2500 \u2190 true\r\n    \u2502   \u2514\u2500 \u2190 true\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L1CrossDomainMessengerProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L1StandardBridgeProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L2OutputOracleProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/OptimismMintableERC20FactoryProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/OptimismPortalProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/SystemConfigProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L1ERC721BridgeProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/ProtocolVersionsProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [423] 0xC7f2Cf4845C6db0e1a1e91ED41Bcd0FcC1b0E141::fa60f9b2() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x000000000000000000000000e0f2186d6dea7b034072ddfdff9c2037c911bc89\r\n    \u251c\u2500 [899] Proxy::guardian() [staticcall]\r\n    \u2502   \u251c\u2500 [437] SuperchainConfig::guardian() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\r\n    \u2502   \u2514\u2500 \u2190 0xe0F2186d6dEa7B034072DDFDfF9c2037c911Bc89\r\n    \u251c\u2500 [2883] Proxy::paused() [staticcall]\r\n    \u2502   \u251c\u2500 [2400] SuperchainConfig::paused() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 false\r\n    \u2502   \u2514\u2500 \u2190 false\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Deploying ERC1967 proxy forProtocolVersionsProxy) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [436020] \u2192 new Proxy@0x1FB68b3B21fcF460b8c05A96aFe5850190f74fE0\r\n    \u2502   \u251c\u2500 emit AdminChanged(previousAdmin: 0x0000000000000000000000000000000000000000, newAdmin: ProxyAdmin: [0x3D027235Ec26000ce92b008719723238786805CB])\r\n    \u2502   \u2514\u2500 \u2190 2059 bytes of code\r\n    \u251c\u2500 [0] VM::load(Proxy: [0x1FB68b3B21fcF460b8c05A96aFe5850190f74fE0], 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, ProtocolVersionsProxy, 0x1FB68b3B21fcF460b8c05A96aFe5850190f74fE0)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(   at %s, Proxy: [0x1FB68b3B21fcF460b8c05A96aFe5850190f74fE0]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::stopBroadcast()\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::startBroadcast(0x3E07b31b9Ae2DD9127BA81bed8B5cd2354657E61)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(Deploying ProtocolVersions implementation) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::envOr(IMPL_SALT, ethers phoenix)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [579686] \u2192 new ProtocolVersions@0xAa7980CDFE8064bcaE4125EbE2b98fa8c4E147C9\r\n    \u2502   \u251c\u2500 emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: Create2Deployer: [0x4e59b44847b379578588920cA78FbF26c0B4956C])\r\n    \u2502   \u251c\u2500 emit OwnershipTransferred(previousOwner: Create2Deployer: [0x4e59b44847b379578588920cA78FbF26c0B4956C], newOwner: 0x000000000000000000000000000000000000dEaD)\r\n    \u2502   \u251c\u2500 emit ConfigUpdate(version: 0, updateType: 0, data: 0x0000000000000000000000000000000000000000000000000000000000000000)\r\n    \u2502   \u251c\u2500 emit ConfigUpdate(version: 0, updateType: 1, data: 0x0000000000000000000000000000000000000000000000000000000000000000)\r\n    \u2502   \u251c\u2500 emit Initialized(version: 1)\r\n    \u2502   \u2514\u2500 \u2190 2595 bytes of code\r\n    \u251c\u2500 [0] VM::serializeAddress(<stringified JSON>, ProtocolVersions, 0xAa7980CDFE8064bcaE4125EbE2b98fa8c4E147C9)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::writeJson(<stringified JSON>, /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy)\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] console::log(ProtocolVersions deployed at %s, ProtocolVersions: [0xAa7980CDFE8064bcaE4125EbE2b98fa8c4E147C9]) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L1CrossDomainMessengerProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L1StandardBridgeProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L2OutputOracleProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/OptimismMintableERC20FactoryProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/OptimismPortalProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/SystemConfigProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::readFile(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/L1ERC721BridgeProxy.json) [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [312] ProtocolVersions::owner() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0x000000000000000000000000000000000000dEaD\r\n    \u251c\u2500 [450] ProtocolVersions::required() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0\r\n    \u251c\u2500 [428] ProtocolVersions::recommended() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 0\r\n    \u251c\u2500 [0] VM::ffi([bash, -c, forge config --json | jq -r .out])\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::ffi([bash, -c, echo ProtocolVersions | sed -E 's/[.][0-9]+\\.[0-9]+\\.[0-9]+//g'])\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [0] VM::projectRoot() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 ()\r\n    \u251c\u2500 [5263177] VM::exists(/data/dev/darwinia-network/optimism/packages/contracts-bedrock/forge-artifacts/ProtocolVersions.sol/ProtocolVersions.json)\r\n    \u2502   \u2514\u2500 \u2190 \"Invalid data\"\r\n    \u2514\u2500 \u2190 ()\r\n\r\n\r\n\r\n== Logs ==\r\n  Connected to network with chainid 11155111\r\n  Storing temp deployment data in /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deployments/getting-started/.deploy\r\n  DeployConfig: reading file /data/dev/darwinia-network/optimism/packages/contracts-bedrock/deploy-config/getting-started.json\r\n  Deploying from Deploy\r\n  Deployment context: getting-started\r\n  Deploying a fresh OP Stack including SuperchainConfig\r\n  Deploying Safe\r\n  New SystemOwnerSafe deployed at 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522\r\n  Setting up Superchain\r\n  Deploying AddressManager\r\n  AddressManager deployed at 0x0883057921424c9E8a62cD7a5A82d8f6Ef28FFD1\r\n  Deploying ProxyAdmin\r\n  ProxyAdmin deployed at 0x3D027235Ec26000ce92b008719723238786805CB\r\n  ProxyAdmin ownership transferred to Safe at: 0xC60C124e349Fa21079b2e4B90e3b0B2DD19d0522\r\n  Deploying ERC1967 proxy forSuperchainConfigProxy\r\n     at 0xB119423a3ca601376CC5626bd17E16Cb78B8662D\r\n  SuperchainConfig deployed at 0x9dC06dA2a99aa892EA1a9E199E7854b33df19093\r\n  Deploying ERC1967 proxy forProtocolVersionsProxy\r\n     at 0x1FB68b3B21fcF460b8c05A96aFe5850190f74fE0\r\n  Deploying ProtocolVersions implementation\r\n  ProtocolVersions deployed at 0xAa7980CDFE8064bcaE4125EbE2b98fa8c4E147C9\r\nError:\r\nInvalid data\r\n```\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nFlow this documents https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#deploy-the-l1-contracts\r\n\r\n\r\n**Expected behavior**\r\nDeploy success\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**System Specs:**\r\n - OS: Ubuntu 12.04\r\n - Package Version (or commit hash):\r\n```\r\ngit branch -v\r\n* develop 6e371b4bc Merge pull request #8594 from ethereum-optimism/chore/manual-shellcheck-fixes\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n", "CLOSED", 0, "fewensa", "2023-12-18T07:45:27Z", "2025-01-29T21:46:10Z", "2024-06-17T22:22:35Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDODjvEJM553x9F", 8646, "pnpm build error", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Describe the bug**\r\nI am a beginner and I follow the [documentation](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup) to build my own L2. When I run to the [location](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#build-the-optimism-monorepo) ,run pnpm build , the following error occurs\r\n        \u2716  nx run @eth-optimism/contracts-bedrock:build\r\n       > @eth-optimism/contracts-bedrock@0.16.2 prebuild /home/weizp/work/gows/src/github.com/ethereum-optimism/optimism/packages/contracts-bedrock\r\n       > ./scripts/verify-foundry-install.sh\r\n       \r\n       Using foundry version: forge 0.2.0 (3d6bfdd 2023-12-16T00:17:23.049683682Z)\r\n       \r\n       > @eth-optimism/contracts-bedrock@0.16.2 build /home/weizp/work/gows/src/github.com/ethereum-optimism/optimism/packages/contracts-bedrock\r\n       > forge build\r\n       \r\n       Compiling 1 files with 0.5.17\r\n       Compiling 324 files with 0.8.15\r\n       Solc 0.5.17 finished in 38.99ms\r\n       Compiling 129 files with 0.8.19\r\n       Solc 0.8.19 finished in 14.24s\r\n       Error: \r\n       solc exited with signal: 9 (SIGKILL)\r\n       <empty output>\r\n       \u2009ELIFECYCLE\u2009 Command failed with exit code 1.\r\n       \r\n       \r\n\r\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n\r\n >  NX   Ran target build for 8 projects (4m)\r\n \r\n    \u2714    2/3 succeeded [2 read from cache]\r\n \r\n    \u2716    1/3 targets failed, including the following:\r\n         - nx run @eth-optimism/contracts-bedrock:build\r\n \r\n   View structured, searchable error logs at https://nx.app/runs/sOc3IaTMFk\r\n\r\n**System Specs:**\r\n - OS:ubuntu 20.04\r\n - Package Version (or commit hash):8b39517e9b0c47e41f4c70b976fb2abbe20df5c1\r\nother version\r\n![1702715625843](https://github.com/ethereum-optimism/optimism/assets/33245656/55a856b4-d070-458e-a80b-2d2420cc27c9)\r\n\r\nCan someone tell me why this error occurred? Thank you very much.\r\n\r\n", "CLOSED", 0, "sameplacewei", "2023-12-16T08:37:31Z", "2025-01-29T20:22:17Z", "2024-05-09T09:41:47Z", "ethereum-optimism/optimism", "2025-08-31 01:44:36"]
["I_kwDOMMiGhs6hv0b6", 291, "Supersim autorelay flakes", "Occasionally when messages are relayed using supersim they return the following error:\n\n```\nexecution reverted: custom error 0xb7d09497\n```\n\nThis signature corresponds to the `InvalidTimestamp` error when validating the cross chain message inside the `CrossL2Inbox`: https://github.com/ethereum-optimism/optimism/blob/cbfb97ede9d8ab4da2e3c4ef65ac8e366ad5f422/packages/contracts-bedrock/src/L2/CrossL2Inbox.sol#L192\n\nThis is most likely due to a race condition involving different timestamps between two l2s. This is also causing flakes on several of the tests that rely on relaying messages (e.g. `TestCrosschainETHTransfer`)\n", "CLOSED", 0, "tremarkley", "2024-12-03T00:18:53Z", "2025-01-29T01:01:14Z", "2025-01-29T01:01:14Z", "ethereum-optimism/supersim", "2025-08-31 01:44:59"]
["I_kwDOKIsnqM6oXGVC", 529, "Reimplement security council rehearsals using the new superchain-ops format", "", "CLOSED", 0, "mds1", "2025-02-01T00:21:45Z", "2025-09-24T19:46:50Z", "2025-09-24T19:46:50Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6oNOaV", 515, "Multisig Task - Integration Testing", "Integration tests for Single and Nested Multisig tasks. ", "CLOSED", 0, "blmalone", "2025-01-30T23:23:06Z", "2025-01-30T23:23:46Z", "2025-01-30T23:23:45Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6oMAiR", 512, "Speed up slow superchain-ops CI", "CI tends to be slow for superchain-ops. This could be due to many reasons but some low hanging fruit may be to swap public RPC URLs with private ones. ", "CLOSED", 0, "blmalone", "2025-01-30T20:09:14Z", "2025-02-01T22:37:59Z", "2025-02-01T22:37:59Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6oA2RR", 499, "Not panic when we ADD more signatures than required.", "During an execution if one of the signer was a nested safe this and we add more signature this will cause a panic because the array is too big..\n![Image](https://github.com/user-attachments/assets/72fc2962-6fec-4751-8e8c-edc78e333c68)\n\nThis is because the code here append the signature with the address making the array to big and will iterate on an incorrect `count` instead of counting the exact number of sig this will count the exact number of `sig + 1`. \nLike this: \n\n```sol\n    function prepareSignatures(\n        address _safe,\n        bytes32 hash,\n        bytes memory _signatures\n    ) internal view returns (bytes memory) {\n        // prepend the prevalidated signatures to the signatures\n        address[] memory approvers = getApprovers(_safe, hash);\n        bytes memory prevalidatedSignatures = genPrevalidatedSignatures(\n            approvers\n        );\n        _signatures = bytes.concat(prevalidatedSignatures, _signatures); //Not sure why this also append the nested approver (signer that used the ApprovalHash method). \n\n```\nhttps://github.com/base-org/contracts/blob/494586571e1a4d845ee6f381b65229d63c630986/script/universal/Signatures.sol#L18", "OPEN", 0, "Ethnical", "2025-01-29T17:14:47Z", "2025-01-29T17:15:25Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6n30-p", 489, "[E2E Testing] - New Template Tooling", "We need to make task developers and facilitator's job going from end to end with this new superchain ops tooling a seamless process.\n- [ ]  local anvil fork of mainnet with multisig signers replaced will allow us to test our changes locally with an actual gnosis safe\n- [ ] sign with multisig signer, gather signatures, then submit them to multisig\n- [ ] update justfile commands to make this process the same interface for the current roles.\n- [ ] update docs for this\n- [ ] create videos for how to use existing templates and how to make new ones", "CLOSED", 0, "ElliotFriedman", "2025-01-28T18:25:11Z", "2025-09-24T19:53:29Z", "2025-09-24T19:53:28Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6nYFfn", 481, "Multisig Task - Regression Testing", "Pin the test to a previous block, stored generated calldata, then try and replicate that calldata by running the command again. This should help us catch regression issues as the tooling gets improved over time.", "CLOSED", 0, "ElliotFriedman", "2025-01-23T22:55:49Z", "2025-01-31T16:52:57Z", "2025-01-31T16:52:57Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6nYFGf", 480, "Multisig Task - Unit Testing", "Add unit testing to cover multiple branches for the new multisig task tooling.\n\nClosed by: https://github.com/ethereum-optimism/superchain-ops/pull/497 ", "CLOSED", 0, "ElliotFriedman", "2025-01-23T22:54:24Z", "2025-01-31T21:49:00Z", "2025-01-31T21:49:00Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6mogJX", 475, "Rename Proposal to Task", "See more information here: https://github.com/ethereum-optimism/superchain-ops/pull/467#discussion_r1919205208 ", "CLOSED", 0, "blmalone", "2025-01-17T14:39:27Z", "2025-01-28T17:27:53Z", "2025-01-28T17:27:53Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6mZNyY", 468, "Add Automatic Nested Safe Detection to Multisig Proposal Tooling", "Nested safe could be determined at runtime. See [this script](https://gist.github.com/blmalone/9174f2e9353a72c6f94f7e3fa981d1e9) that shows how to figure out if a safe is nested or not. We can reimplement this logic in Solidity in the tooling.", "CLOSED", 0, "ElliotFriedman", "2025-01-16T03:50:44Z", "2025-01-28T07:50:44Z", "2025-01-28T07:50:44Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6jzrg8", 422, "Generic Templating via L2ChainIds", "As discussed on a call with @mds1, @ElliotFriedman, @prateek105, @Ethnical and @blmalone. \n\nWe stepped through this forked feature: https://github.com/solidity-labs-io/superchain-ops/pull/10 \n\nTo summarize, in the `build` function of newly created tasks, we should loop through L2 chain Ids that are imported from a task config `.toml` file. This way, a task can be reused for many or one chains without having to update any Solidity files. Only the .toml config files would need to be modified.\n\nSimilarly, the task may require specific values used in the upgrade e.g. `100_000` for a gas limit update. It's worth thinking about how these can also be parameterized into config instead of having them live in the Solidity file for the same reason as previously mentioned.", "CLOSED", 0, "blmalone", "2024-12-18T16:15:29Z", "2025-01-30T23:18:37Z", "2025-01-30T23:18:36Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6ixZkD", 398, "Add task templating framework", "This will allow devs to create template tasks that can be easily created, and only require populating a TOML config file for execution", "CLOSED", 0, "blmalone", "2024-12-10T18:16:36Z", "2025-01-30T23:18:03Z", "2025-01-30T23:18:03Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOKIsnqM6ixUNG", 397, "Integrate Forge Proposal Simulator (FPS)", "https://github.com/solidity-labs-io/forge-proposal-simulator", "CLOSED", 0, "blmalone", "2024-12-10T18:09:19Z", "2025-01-30T23:17:22Z", "2025-01-30T23:17:21Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:45:02"]
["I_kwDOEf1bQc6o6wDE", 1122, "Token House Governance Hub has a broken link", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n--> There is a broken link in the Token House Governance Hub, that we will use to onboard new delegates\n\n<img width=\"1436\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d13a65f7-3fdd-449e-bc3b-d79dd4e7b5d8\" />\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n--> \n1.- Enter here: https://plaid-cement-e44.notion.site/Token-House-Governance-Hub-decae75a0fa248e38f969abe8edef565\n2.- Click the \"[vote directly, or delegate their OP voting power to an eligible third party](https://community.optimism.io/docs/governance/delegate.html).\" link\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\nI guess it should take you to Agora\n\n**Environment Information:**\n<!--\n - Operating System: MacOS 15.3 (24D60)\n - Browser: Chrome Versi\u00f3n 133.0.6943.54 (Build oficial) (arm64)\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\nGovNERDs will be hosting a monthly call for new delegates to get onboarded using this hub, so It would be nice to have this fix within february\n\ncc. @opjulian \n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "alexsotodigital", "2025-02-05T21:13:53Z", "2025-02-06T18:58:59Z", "2025-02-06T18:58:59Z", "ethereum-optimism/community-hub", "2025-08-31 01:46:10"]
["I_kwDOL-xLQ86n7Anz", 151, "[nat] Publish op-nat images via infra CI", "A CI job should publish op-nat images to our container registry.", "CLOSED", 0, "scharissis", "2025-01-29T05:21:45Z", "2025-02-06T02:03:17Z", "2025-02-06T02:03:17Z", "ethereum-optimism/infra", "2025-08-31 01:46:11"]
["I_kwDOL-xLQ86n5UV2", 146, "[nat] Tidying", "After a burst of development, let's tidy up a few things. Especially:\n* Update README to better reflect the current state and make it more approachable for external contributors\n* Refactor NAT to better pass around configuration and allow for separating the test runner out", "CLOSED", 0, "scharissis", "2025-01-28T22:13:15Z", "2025-02-04T09:05:58Z", "2025-02-04T09:05:58Z", "ethereum-optimism/infra", "2025-08-31 01:46:11"]
["I_kwDOKIsnqM6o7XdW", 557, "Monorepo tests run on a schedule AND merge to main", "Following on from this conversation in discord: https://discord.com/channels/1244729134312198194/1327372079380824267/1336824792329883679 \n\nThe `monorepo-integration-test` job in ci needs to be executed on a schedule to make sure to catch any errors in simulating tasks that are going to be executed. \n\nHere's an [example of it in practice](https://github.com/ethereum-optimism/security-tools/pull/190/files).", "CLOSED", 0, "blmalone", "2025-02-05T23:04:08Z", "2025-02-06T00:30:23Z", "2025-02-06T00:30:22Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6oulHP", 541, "Stop using Public RPC URLS", "This is blocking the monorepo integration testing. ", "CLOSED", 0, "blmalone", "2025-02-04T16:44:31Z", "2025-02-06T16:49:38Z", "2025-02-06T16:49:37Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6omLDH", 536, "Command to help with creating a new template", "We want to make it easy for developers to make a new template. \n\ne.g. \n\n```bash\njust new template\njust new task\n```", "CLOSED", 0, "blmalone", "2025-02-03T21:37:16Z", "2025-02-05T22:35:04Z", "2025-02-05T22:35:04Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6oWOU6", 523, "'just new task' command for allowing them to easily create a new task for a given template", "We want to allow users to seamlessly create new tasks in superchain-ops. Having a command that lets them do this could be a nice way to improve UX over the old approach. Something like this could work: \n\n```bash\njust new task <template_name> <network> [optional_directory_name]\n```\n\ne.g. \n```bash\njust new task GasConfigTemplate mainnet 030-update-gas-template\n```\nor\n\nIf you leave out the `[optional_directory_name]` it uses lexicographical order to decide the next directory name.\n```bash\njust new task GasConfigTemplate mainnet\n```\n\n", "CLOSED", 0, "blmalone", "2025-01-31T21:09:49Z", "2025-02-05T23:07:57Z", "2025-02-05T23:07:56Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6oWLWW", 522, "Add Tenderly support in print out for superchain-ops 2.0", "In our current superchain-ops flow, we as signers/reviewers to follow a Tenderly link for state diff comparisons and sanity checks. We will want to continue to have this feature in our new superchain-ops 2.0 work. \n\n\nIf you run a task using the just file then we will print the Tenderly links. The idea here is that a human will run these commands and is likely to care about this Tenderly feature. \n\nIf we just print it all the time on simulate, that's good enough. As it's feature parity with what we have. \n\nThis is how Base does it: https://github.com/base-org/contracts/blob/4e227669098218ce50381f83ee3a611945913f62/script/universal/Simulation.sol#L147 \n\n\n\n![Image](https://github.com/user-attachments/assets/50450475-8982-409b-8178-13dde411e95d)\n\n![Image](https://github.com/user-attachments/assets/fb11f4a0-e21c-40ac-82d3-6c00708bb155)\n\n![Image](https://github.com/user-attachments/assets/fc175203-c6c6-4792-9d5c-35a9675c6295)\n\n\n", "CLOSED", 0, "blmalone", "2025-01-31T21:00:58Z", "2025-02-03T18:17:41Z", "2025-02-03T18:17:40Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6oTov-", 519, "Move new superchain-ops functionality into network separated directories", "Example: \n`src/tasks/eth`, `src/tasks/sep`. Similar to how we're doing it today with [tasks](https://github.com/ethereum-optimism/superchain-ops/tree/main/tasks). \n\nUsing official [short names](https://github.com/ethereum-optimism/superchain-ops/blob/main/tasks/README.md): \n```\nThe name of each directory corresponds to that chains official 'short name' which can be found in the [ethereum-lists/chains](https://github.com/ethereum-lists/chains) repo.\n```\n\n**How to handle `example` directory:**\nRight now we have an `example` directory (`src/fps/example/task-00`). We should move all the tasks in this directory into `test/task/mock`. Additionally we should rename all TOML files to be `config.toml` and remove `testnetConfig.toml`. ", "CLOSED", 0, "blmalone", "2025-01-31T14:54:59Z", "2025-02-03T18:36:08Z", "2025-02-03T18:36:06Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6mgIrS", 473, "In superchain-ops improvements keep simulate/sign/approve/execute nomenclature", "Making sure we interact with the new system the same way would be helpful for onboarding. ", "CLOSED", 0, "blmalone", "2025-01-16T18:17:14Z", "2025-02-05T15:49:20Z", "2025-02-05T15:49:20Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6mZQNy", 469, "Consider reusing forge-std's `StdChains`", "> Now that I think of it, we probably can reuse forge-std's `StdChains` to avoid having to maintain our own list of constants. And if there are chains forge-std is missing that we need, we can PR those into forge-std. Looks like forge-std doesn't have a way to just fetch chain ID from a chain alias but that's an easy helper method to upstream as well\r\n\r\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/superchain-ops/pull/467#discussion_r1916729559_\r\n            ", "CLOSED", 0, "mds1", "2025-01-16T04:02:05Z", "2025-02-03T21:33:08Z", "2025-02-03T21:33:07Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6ZdZOU", 343, "Run monorepo test suite against state resulting from proposal", "This is discussed in https://github.com/ethereum-optimism/superchain-ops/issues/140#issuecomment-2075435988 through the use of [forge-proposal-simulator](https://github.com/solidity-labs-io/forge-proposal-simulator) (FPS). How to best do this needs some thought, and we should make sure our approach is forward compatible with batched upgrades (i.e. currently superchain-ops is focused on upgrading one task at a time but soon we will want to upgrade L1 contracts of many chains in 1 transaction\u2014in that case we want to run the monorepo tests for each chain).\r\n\r\nThis is a big task, and likely will require changes both to this repo and the monorepo. We should check out how FPS does this, consider using that to avoid rolling our own solution, and may @ElliotFriedman will be kind enough to lend some time to help us out here :)", "CLOSED", 0, "mds1", "2024-10-09T03:09:57Z", "2025-02-05T23:09:27Z", "2025-02-05T23:09:26Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOKIsnqM6ZdTbe", 341, "Command to scaffold a new task directory with required files", "There is no easy way to create new tasks. Add a command `just new-task` to the root `justfile` that takes the following arguments:\r\n\r\n1. L1 network short name. Allowed network names are currently `eth`, `oeth`, `opsep`, `sep`, and `sep-dev-0`. Unrecognized network names should error\r\n2. L2 network short name. Allowed network names are all short names from the superchain registry. Unrecognized network names should error\r\n3. Task name. This must be a hyphenated string such as `fjord-gas-config` or `guardian-upgrade`\r\n4. Task kind. Single or nested are the only allowed values for now. In the future we can expand this to other tasks, like presigned pauses, or the fault proof recovery template tasks.\r\n\r\nThe command should:\r\n- Create a folder called `tasks/{arg1}/{arg2}-{x}-{arg3}`, where `arg1` and `arg3` match the above arguments. `arg2` matches the above argument but is omitted if the L2 network is OP Mainnet (this is the current convention). Lastly, `x` is the next incrementing number for that L2's task sequence. For example if `mode-002-*` is the most recent task for mode, the next task would have `x` as `003`.\r\n- Create `README.md` and `VALIDATION.md` templates with placeholders for the user to fill out\r\n- Create a template `input.json` file\r\n- Create the appropriate `SignFromJson.s.sol` or `NestedSignFromJson.s.sol` with the appropriate imports, functions that need to be implemented, etc\r\n- A `.env` file (or equivalent if #336 is done first)", "CLOSED", 0, "mds1", "2024-10-09T02:49:26Z", "2025-02-05T23:08:15Z", "2025-02-05T23:08:14Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:46:32"]
["I_kwDOLB-lzc6pDmFL", 583, "Link EIP-2935 in overview", "Ref https://github.com/ethereum-optimism/specs/issues/516#issuecomment-2637863366", "CLOSED", 0, "emhane", "2025-02-06T18:30:04Z", "2025-02-06T18:49:27Z", "2025-02-06T18:49:27Z", "ethereum-optimism/specs", "2025-08-31 01:46:34"]
["I_kwDOLB-lzc6olmEW", 573, "Specify that EIP-7002 + EIP-7251 contracts are not deployed on Optimism by default", "We should specify that EIP-7002 and EIP-7251 predeploys are not deployed on OP stack in Isthmus.", "CLOSED", 0, "meyer9", "2025-02-03T20:11:55Z", "2025-02-05T21:02:48Z", "2025-02-05T21:02:48Z", "ethereum-optimism/specs", "2025-08-31 01:46:34"]
["I_kwDOLB-lzc6oUuIv", 568, "Specify that requests root in block should be an empty hash post-Isthmus", "Currently, we specify that the payload API calls should have an empty requests array, but we should probably also specify that blocks should not include any requests in the block header.", "CLOSED", 0, "meyer9", "2025-01-31T17:05:29Z", "2025-02-03T20:42:16Z", "2025-02-03T20:42:16Z", "ethereum-optimism/specs", "2025-08-31 01:46:34"]
["I_kwDOLB-lzc6mURUV", 509, "EIP-2537: Precompile for BLS12-381 curve operations", "https://eips.ethereum.org/EIPS/eip-2537\n\n#### op-revm\n\n- [ ] https://github.com/bluealloy/revm/pull/2000 if eip isn't included in isthmus, we will simply have to update the name of that function at a later date to reflect the name of the hf that does include it.\n\n#### op-geth\n\n#### smart-contract\n\n\n### References\n\n- [Pectra Devnet 5 EIP List](https://notes.ethereum.org/@ethpandaops/pectra-devnet-5)\n- [Proto's list of Pectra EIPs](https://gist.github.com/protolambda/59b534d804c23dc7b3592ad1c38048d4#eip-7685-general-purpose-el-requests)\n- Pectra support on the OP Stack tracking issue: https://github.com/ethereum-optimism/optimism/issues/12435\n", "CLOSED", 0, "emhane", "2025-01-15T16:45:13Z", "2025-02-03T20:44:35Z", "2025-02-03T20:44:34Z", "ethereum-optimism/specs", "2025-08-31 01:46:34"]
["I_kwDOLB-lzc6mUH_6", 503, "EIP-7002: Execution layer triggerable withdrawals", "https://eips.ethereum.org/EIPS/eip-7002\n\nwon't fix: applies to L1 withdrawals", "CLOSED", 0, "emhane", "2025-01-15T16:26:43Z", "2025-02-03T20:43:30Z", "2025-02-03T20:43:30Z", "ethereum-optimism/specs", "2025-08-31 01:46:34"]
["I_kwDOLB-lzc6mUD6W", 499, "[Tracking] Pectra Support on OP Stack", "### Description\n\nLists the EIPs going into Pectra. (See [EIP-7600](https://eips.ethereum.org/EIPS/eip-7600) for a list of L1 Pectra EIPs)\n\nClosed issues are either EIPs that \n- don't apply to OP Stack\n- have been merged into spec\n\nEIPs that are open either require \n- a noop spec (spec stating no L1 diff)\n- a spec to use feature on L2\n\nMost up-to-date list of EIPs included in Pectra: https://notes.ethereum.org/@ethpandaops/pectra-devnet-5", "CLOSED", 0, "emhane", "2025-01-15T16:18:46Z", "2025-02-04T12:57:25Z", "2025-02-04T12:57:25Z", "ethereum-optimism/specs", "2025-08-31 01:46:34"]
["I_kwDOJ_r-bs6j2PL6", 806, "opcm: Define on canonical representation for OPCM addresses in SCR (OPCM - Upgrade 13)", "Right now OPCM addresses are stored here: https://github.com/ethereum-optimism/superchain-registry/blob/17f539928389cdd88bcae48e6e24c07337ce3f4f/superchain/configs/mainnet/superchain.toml#L4 ([opcms aren't even proxied anymore](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/op-contracts-manager-single-release-redesign.md)) \n\nThis is outdated and not fit for purpose going forward. We need to define a new way to represent all the OPCMs that we deploy in a list. Optionally we can include information like the release the OPCM deploys and upgrades to. It makes sense that this might be a toml file for continuity with the rest of the codebase e.g. `opcmList.toml`\n\n", "CLOSED", 0, "blmalone", "2024-12-18T23:01:01Z", "2025-02-05T17:02:27Z", "2025-01-17T20:43:03Z", "ethereum-optimism/superchain-registry", "2025-08-31 01:46:54"]
["I_kwDOMMiGhs6n6BqD", 328, "Update supersim with latest version of `CrossL2Inbox` and update opsimulator to perform interop checks", "With changes made in https://github.com/ethereum-optimism/optimism/issues/13658, the timestamp check and dependency set check for validating an interop message no longer take place on chain. Therefore, supersim needs to be updated to perform this check inside of opsimulator.go\n", "CLOSED", 0, "tremarkley", "2025-01-29T00:58:38Z", "2025-02-04T17:17:08Z", "2025-02-04T17:17:08Z", "ethereum-optimism/supersim", "2025-08-31 01:46:55"]
["I_kwDODjvEJM6pOti2", 14260, "op-node: improve engine package testing", "Once we remove more of the legacy engine-controller, we can cleanly test the op-node engine package, and fix the code coverage.", "OPEN", 0, "protolambda", "2025-02-07T22:27:38Z", "2025-10-01T14:38:35Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6pDwlQ", 14235, "OPCM: Add permissionless game to deploy() (OPCM - Upgrade 13)", "Currently the OPCM's `deploy()` method does not deploy the `permissionlessDisputeGame`. \n\nWe will likely want to add that in the near future.\n\nTBD:\n- should the FDG be deployed by default or as an option?\n- if deployed should it be set as the respectedGameType by default or as an option?\n   \n\n", "OPEN", 0, "maurelian", "2025-02-06T18:54:39Z", "2025-02-06T18:55:46Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6o622u", 14192, "Script Package: Support cheatcode `computeCreateAddress`", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\nThe interop deploy script relies on `vm.computeCreateAddress`. Ideally it can be added to the following file:\n\nhttps://github.com/ethereum-optimism/optimism/blob/develop/op-chain-ops/script/cheatcodes_external.go\n\nThis would look something like:\n\n```go\nfunc (c *CheatCodesPrecompile) ComputeCreateAddress(...) ([]byte, error)`\n```\n\nThe function selector is `0x74637a7a`", "CLOSED", 0, "tynes", "2025-02-05T21:31:18Z", "2025-02-06T17:31:58Z", "2025-02-06T17:31:58Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6oysbY", 14164, "A good README for op-dripper", "Create a README for op-dripper with instructions on how to depoy it for ops", "CLOSED", 0, "ControlCplusControlV", "2025-02-05T04:34:35Z", "2025-02-07T20:48:23Z", "2025-02-07T20:48:23Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6olgFX", 14115, "op-node: remove op-wheel, migrate forkchoice utils to op-node", "- Remove the majority of op-wheel\n- Migrate the forkchoice util commands to op-node sub-commands.\n- Make the forkchoice utils accessible via op-node admin API\n\n", "OPEN", 0, "protolambda", "2025-02-03T19:58:41Z", "2025-10-01T14:37:32Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6okrI3", 14109, "op-batcher: pending transactions is never higher than 1", "We are seeing this in production networks. With the current way the batcher works, it should send transactions asynchronously (but with nonces determined synchronously). \n\nWe would therefore expect (particularly in times of high thoughput) that there would be multiple pending transactions (up to the configured limit, typically `5` or so). \n\nThere could be a bug in the metrics, or the transactions are not actually being handled in the expected way (which would indicate that we are hamstringing the batcher's throughput unintentionally). \n\n", "CLOSED", 0, "geoknee", "2025-02-03T18:06:39Z", "2025-02-05T15:44:31Z", "2025-02-05T15:44:31Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6og5ZK", 14104, "How to resolve Optimism Blockchain node sync related issues", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nMy WalletConnect WCT stake token is Not Showing in Dashboard.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Blockchain node recovery.\n2. This is Optimisun Blockchain Node Sync Issue.\n-->\n\n**Expected behavior**\n<!--\nShowing my staked tokens in a Dashboard.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: Windows 10 Home\n - Package Version (or commit hash): ?\n-->\n\n**Configurations:**\n<!--\n?\n-->\n\n**Logs:**\n<!--\nStill Tokens not Visible in WalletConnect Stake Dashboard.\n\n![Image](https://github.com/user-attachments/assets/bf154171-86a7-48f1-8acc-ae58b6cf5a1b)\n\n-->\n\n**Additional context**\n<!--\nWallet Address: 0xDd61dAf078Bf4Cc6F4450d0EC250F3784C2F4834\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "vinodmathur", "2025-02-03T11:08:11Z", "2025-02-03T15:34:59Z", "2025-02-03T15:34:59Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6ocX36", 14099, "op-node: SyncStatus resets L1 finalized block to 0", "**Bug Description**\nThe op-node, `optimism_syncStatus` RPC response periodically resets all the finalized L1 related fields to 0.  The L1 finalized block never goes backwards so op-node's view of it shouldn't be resetting to 0 - especially when it is simultaneously claiming that the L2 finalized block is non-zero. The logs show the node had not just restarted and don't show any errors.  The pipeline had reset 5 minutes prior to the invalid response.\n\nThis causes failures in the `op-challenger run-trace` subcommand we use for the vm-runner as it tries to find the L1 head to use to test fault proof execution. It had been working very consistently until 15-30 days ago when we started fairly regularly seeing errors because \"l1 head is 0\".\n\nExample response we're getting from op-node:\n\n```\n&{\nCurrentL1:0xe63413a1e17517f362d37d36027d69a42cea72f8167e59435877325fd2fbc589:7610567 \nCurrentL1Finalized:0x0000000000000000000000000000000000000000000000000000000000000000:0 HeadL1:0x1c8b4cebfdb270f0e6ced9eee686eb5766594958d6ffe8ff294aee7ebc51c666:7610571 \nSafeL1:0x0000000000000000000000000000000000000000000000000000000000000000:0 \nFinalizedL1:0x0000000000000000000000000000000000000000000000000000000000000000:0 \nUnsafeL2:0xbed626891395e3e1a2e4de8993bf3c7a9bc39163c7e351cb48369daf25a39e3c:23263831 \nSafeL2:0x4d78744bafe7f48ce8d6ac663118f1b2f21e806710a81cf1b0993203fefe9ea9:23263683 \nFinalizedL2:0x319de3aee25450483f3303fdb78403a68ba7084e38ccbed6ebf8feb28becd409:23263108 \nPendingSafeL2:0x4d78744bafe7f48ce8d6ac663118f1b2f21e806710a81cf1b0993203fefe9ea9:23263683 \nCrossUnsafeL2:0xbed626891395e3e1a2e4de8993bf3c7a9bc39163c7e351cb48369daf25a39e3c:23263831 \nLocalSafeL2:0x4d78744bafe7f48ce8d6ac663118f1b2f21e806710a81cf1b0993203fefe9ea9:23263683\n}\n```\n\n\n**Environment Information:**\nUsing https://mainnet-replica-0-op-node.primary.client.dev.oplabs.cloud and https://sepolia-replica-0-op-node.primary.client.dev.oplabs.cloud\n\nLogs: https://optimistic.grafana.net/goto/6xuoeVFHg?orgId=1\n", "OPEN", 0, "ajsutton", "2025-02-02T21:00:50Z", "2025-02-04T01:08:56Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6oWJQc", 14090, "op-batcher confusing logs on shutdown (`SetMaxDASize rpc failed, retrying`, `err: context cancelled`)", "When the op-batcher shutsdown, it cancels the `shutdownCtx`. If this happens at the same time the batcher is trying to set the max da size it logs an error for 2-3 logs before shutting down. This behavior is benign, but can be confusing if you don't understand what is going on. \n\nI'm not really sure if there is a good solution. I guess you could have a second shutdwon signal the every loop and cleanly exists rather than cancelling the ctx, but cancelling the ctx works.\n\nhttps://github.com/ethereum-optimism/optimism/blob/4bb98fab58d7edce9b027e1d1aeed20e831f905e/op-batcher/batcher/driver.go#L545", "CLOSED", 0, "trianglesphere", "2025-01-31T20:54:15Z", "2025-02-04T14:54:04Z", "2025-02-04T14:54:04Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6oOsed", 14081, "**The method engine_newPayloadV3 does not exist/is not available**", "I am following the tutorial for node operation, [here (without docker, with source)](https://docs.optimism.io/builders/node-operators/tutorials), for `Running an OP Mainnet node from source` and `Running an OP Mainnet node from source`.\nI want to operate the node, but I can not do it with this bug.\n\n\n# Bug Description\n\nBelow error message occurs in `op-node` execution.\n\n```\nERROR[01-31|13:23:51.553] Payload execution failed                 block_hash=d55f91..e3b8c5 err=\"the method engine_newPayloadV3 does not exist/is not available\"\n```\n\nIn, op-geth, the warning occurs also at the same time.\n\n```\nWARN [01-31|13:23:51.553] Served engine_newPayloadV3               reqid=5 duration=\"7.334\u00b5s\"  err=\"the method engine_newPayloadV3 does not exist/is not available\"\n```\n\n\n\n# Regenerate Bug\n\n## OS (Env)\n\nMy OS follows below.\n\n```\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 22.04.5 LTS\nRelease:        22.04\nCodename:       jammy\n```\n\n\n\n## How to Build Binaries\n\nI built `op-node` and `op-geth` with below steps.\n\n```\n# op-node\ngit clone https://github.com/ethereum-optimism/optimism\ngit checkout op-node/v1.10.3\ncd /optimism/op-node\njust op-node\n```\n\n```\n# op-geth\ngit clone https://github.com/ethereum-optimism/op-geth\ngit checkout v1.101411.6\ncd op-geth\nmake\n```\n\n\n\n## How to Execute Binaries\n\nBefore executing layer 2, I have been operating the `geth` and `lighthouse` for the main net, layer 1, with below command.\n\n\n```\ngeth --datadir \"/mnt/ssd1/ethereum/geth.snap\" \\\n     --syncmode \"snap\" \\\n     --http \\\n     --http.addr \"127.0.0.1\" \\\n     --http.port \"8545\" \\\n     --http.api \"eth,net,web3,engine\" \\\n     --authrpc.addr \"127.0.0.1\" \\\n     --authrpc.port \"8551\" \\\n     --authrpc.jwtsecret \"/mnt/ssd1/ethereum/geth.snap/jwtsecret\" \\\n     --ipcpath \"/tmp/geth.snap.ipc\" \\\n     2>&1 | tee -a /mnt/ssd1/ethereum/geth.snap/geth.log\n```\n\n```\nlighthouse bn \\\n    --network mainnet \\\n    --datadir \"/mnt/ssd1/ethereum/lighthouse.snap/\" \\\n    --http \\\n    --http-port 5053 \\\n    --port 9100 \\\n    --execution-endpoint \"http://127.0.0.1:8551\" \\\n    --execution-jwt \"/mnt/ssd1/ethereum/geth.snap/jwtsecret\" \\\n    --checkpoint-sync-url \"https://beaconstate.ethstaker.cc\" \\\n    2>&1 | tee -a /mnt/ssd1/ethereum/lighthouse.snap/lighthouse.log\n```\n\n\n\nWith the built binary above, I ran below commands.\n\n```\n#cd op-geth\n\n./build/bin/geth\\\n     --datadir=/mnt/ssd1/ethereum/l2/data \\\n     --http --http.addr 0.0.0.0 \\\n     --http.port 8547 \\\n     --http.api \"eth,net,web3,engine\" \\\n     --ws --ws.addr 0.0.0.0 \\\n     --ws.port 8546 --ws.api \"eth,net,web3\" \\\n     --authrpc.addr \"127.0.0.1\" --authrpc.port 8552 \\\n     --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io/ \\\n     --authrpc.jwtsecret=/mnt/ssd1/ethereum/geth.snap/jwtsecret \\\n     --syncmode=snap \\\n     --verbosity=3 \\\n     --rollup.disabletxpoolgossip \\\n     --op-network=op-mainnet \\\n     --port 30304 \\\n     --discovery.port 30304\n```\n\n\n```\n#cd op-node\n\nexport L1_RPC_URL=http://127.0.0.1:8545\nexport L1_RPC_KIND=debug_geth\nexport L1_BEACON_URL=http://127.0.0.1:5053\n\n./bin/op-node \\\n  --l1=$L1_RPC_URL \\\n  --l1.rpckind=$L1_RPC_KIND \\\n  --l1.beacon=$L1_BEACON_URL \\\n  --l2=ws://localhost:8546 \\\n  --l2.jwt-secret=/mnt/ssd1/ethereum/geth.snap/jwtsecret \\\n  --network=op-mainnet \\\n  --syncmode=execution-layer \\\n  --l2.enginekind=geth\n```\n\n\n\n# Logs\n\n`op-node`\n\n```log\nminjae@minjae-desktop:/mnt/ssd1/ethereum/l2/optimism/op-node$ \nexport L1_RPC_URL=http://127.0.0.1:8545\nexport L1_RPC_KIND=debug_geth\nexport L1_BEACON_URL=http://127.0.0.1:5053\n\n./bin/op-node \\\n  --l1=$L1_RPC_URL \\\n  --l1.rpckind=$L1_RPC_KIND \\\n  --l1.beacon=$L1_BEACON_URL \\\n  --l2=ws://localhost:8546 \\\n  --l2.jwt-secret=/mnt/ssd1/ethereum/geth.snap/jwtsecret \\\n  --network=op-mainnet \\\n  --syncmode=execution-layer \\\n  --l2.enginekind=geth\nINFO [01-31|13:34:55.159] Not opted in to ProtocolVersions signal loading, disabling ProtocolVersions contract now.\nINFO [01-31|13:34:55.180] Rollup Config                            l2_chain_id=10 l2_network=\"OP Mainnet\" l1_chain_id=1 l1_network=mainnet l2_start_time=1,686,068,903 l2_block_hash=0xdbf6a80fef073de06add9b0d14026d6e5a86c85f6d102c36d3d8e9cf89c2afd3 l2_block_number=105,235,063 l1_block_hash=0x438335a20d98863a4c0c97999eb2481921ccd28553eac6f913af7c12aec04108 l1_block_number=17,422,590 regolith_time=\"@ genesis\" canyon_time=\"@ 1704992401 ~ Fri Jan 12 02:00:01 KST 2024\" delta_time=\"@ 1708560000 ~ Thu Feb 22 09:00:00 KST 2024\" ecotone_time=\"@ 1710374401 ~ Thu Mar 14 09:00:01 KST 2024\" fjord_time=\"@ 1720627201 ~ Thu Jul 11 01:00:01 KST 2024\" granite_time=\"@ 1726070401 ~ Thu Sep 12 01:00:01 KST 2024\" holocene_time=\"@ 1736445601 ~ Fri Jan 10 03:00:01 KST 2025\" isthmus_time=\"(not configured)\" interop_time=\"(not configured)\" alt_da=false\nINFO [01-31|13:34:55.180] Initializing rollup node                 version=v1.10.3-rc.1-ca4b1f68-1736956835\nINFO [01-31|13:34:55.182] Connected to L1 Beacon API, ready for EIP-4844 blobs retrieval. version=Lighthouse/v6.0.1-0d90135/x86_64-linux\nINFO [01-31|13:34:55.186] loaded new runtime config values!        p2p_seq_address=0xAAAA45d9549EDA09E70937013520214382Ffc4A2\nINFO [01-31|13:34:55.205] started p2p host                         addrs=\"[/ip4/127.0.0.1/tcp/9222 /ip4/172.30.1.45/tcp/9222]\" peerID=16Uiu2HAmDFcDpmu3UKpS9paKRBQ6snxTxTMwYtT7xng2X4e8A7og\nINFO [01-31|13:34:55.210] New local node record                    seq=1,738,296,946,891 id=c9e5f40c89d7a29e ip=\"invalid IP\" udp=0 tcp=0\nINFO [01-31|13:34:55.210] started discovery service                p2p=discv5 enr=enr:-JS4QJnZe3vHuUj3kEm_I40a_fpfSH_QAh9PuRxqd9MKrZ2lUHI1IRo1ujMCnXGHQpb14MhFxcCneJyNWKwHLLji1aiGAZS6knDLgmlkgnY0h29wc3RhY2uCCgCJc2VjcDI1NmsxoQMI3k6rVHmGr8p5v1cmiLBzhIEydqlynSL_M_JY4QKRI4N0Y3CCJAaDdWRwgqjB id=c9e5f40c89d7a29e\nINFO [01-31|13:34:55.210] Starting JSON-RPC server\nINFO [01-31|13:34:55.210] Started JSON-RPC server                  addr=127.0.0.1:9545\nINFO [01-31|13:34:55.210] metrics disabled\nINFO [01-31|13:34:55.210] Starting execution engine driver\nINFO [01-31|13:34:55.210] Starting driver                          sequencerEnabled=false sequencerStopped=false\nINFO [01-31|13:34:55.210] Rollup node started\nINFO [01-31|13:34:55.210] State loop started\nINFO [01-31|13:35:00.211] attempting connection                    peer=16Uiu2HAkyxjHbPkNhY7gfvrU38AhnzMLcbzvzqLzvigvvwvajhDg\nINFO [01-31|13:35:00.211] attempting connection                    peer=16Uiu2HAmTh7pXVvdAhkaQpynoEi4ai1kUD6zd9hsRYTsL8JCSdXG\nINFO [01-31|13:35:00.211] attempting connection                    peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT\nINFO [01-31|13:35:00.211] attempting connection                    peer=16Uiu2HAkxkYZY7jnNgF58UjcDy4Vgh3if1Pgg1jMpB94KkETTa3j\nINFO [01-31|13:35:01.013] connected to peer                        peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT addr=/ip4/35.204.8.220/tcp/9003\nINFO [01-31|13:35:01.013] Starting P2P sync client event loop      peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT\nINFO [01-31|13:35:01.046] connected to peer                        peer=16Uiu2HAkyxjHbPkNhY7gfvrU38AhnzMLcbzvzqLzvigvvwvajhDg addr=/ip4/145.239.144.71/tcp/9222\nINFO [01-31|13:35:01.046] Starting P2P sync client event loop      peer=16Uiu2HAkyxjHbPkNhY7gfvrU38AhnzMLcbzvzqLzvigvvwvajhDg\nINFO [01-31|13:35:01.077] connected to peer                        peer=16Uiu2HAkxkYZY7jnNgF58UjcDy4Vgh3if1Pgg1jMpB94KkETTa3j addr=/ip4/168.119.140.177/tcp/9003\nINFO [01-31|13:35:01.077] Starting P2P sync client event loop      peer=16Uiu2HAkxkYZY7jnNgF58UjcDy4Vgh3if1Pgg1jMpB94KkETTa3j\nINFO [01-31|13:35:01.214] disconnected from peer                   peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT addr=/ip4/35.204.8.220/tcp/9003\nINFO [01-31|13:35:01.214] attempting connection                    peer=16Uiu2HAmHhHMQLK9VgSNwW6q4zanFNWZmXmA9XfMzXRYGuQiKCQA\nINFO [01-31|13:35:01.229] connected to peer                        peer=16Uiu2HAmTh7pXVvdAhkaQpynoEi4ai1kUD6zd9hsRYTsL8JCSdXG addr=/ip4/34.65.188.4/tcp/9003\nINFO [01-31|13:35:01.229] Starting P2P sync client event loop      peer=16Uiu2HAmTh7pXVvdAhkaQpynoEi4ai1kUD6zd9hsRYTsL8JCSdXG\nINFO [01-31|13:35:01.345] attempting connection                    peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq\nINFO [01-31|13:35:01.378] attempting connection                    peer=16Uiu2HAm41UAybZY5px2WfQdWo6E55HByggrUCt1n8k9ugU5s7Uk\nINFO [01-31|13:35:01.811] connected to peer                        peer=16Uiu2HAm41UAybZY5px2WfQdWo6E55HByggrUCt1n8k9ugU5s7Uk addr=/ip4/107.6.94.220/tcp/30657\nINFO [01-31|13:35:01.812] Starting P2P sync client event loop      peer=16Uiu2HAm41UAybZY5px2WfQdWo6E55HByggrUCt1n8k9ugU5s7Uk\nINFO [01-31|13:35:01.974] connected to peer                        peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq addr=/ip4/15.204.213.68/tcp/9003\nINFO [01-31|13:35:01.974] Starting P2P sync client event loop      peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq\nINFO [01-31|13:35:03.439] Received signed execution payload from p2p id=d8f409..be0608:131349663 peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq txs=16\nINFO [01-31|13:35:03.439] Optimistically inserting unsafe L2 execution payload to drive EL sync id=d8f409..be0608:131349663\nINFO [01-31|13:35:03.439] Starting EL sync\nERROR[01-31|13:35:03.440] Payload execution failed                 block_hash=d8f409..be0608 err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:03.440] Failed to insert unsafe payload for EL sync id=d8f409..be0608:131349663 err=\"temp: failed to update insert payload: failed to execute payload: the method engine_newPayloadV3 does not exist/is not available\"\nINFO [01-31|13:35:05.212] attempting connection                    peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT\nINFO [01-31|13:35:05.212] attempting connection                    peer=16Uiu2HAmHhHMQLK9VgSNwW6q4zanFNWZmXmA9XfMzXRYGuQiKCQA\nINFO [01-31|13:35:05.460] Received signed execution payload from p2p id=9fcdb4..8c8bc5:131349664 peer=16Uiu2HAkxkYZY7jnNgF58UjcDy4Vgh3if1Pgg1jMpB94KkETTa3j txs=12\nINFO [01-31|13:35:05.460] Optimistically inserting unsafe L2 execution payload to drive EL sync id=9fcdb4..8c8bc5:131349664\nERROR[01-31|13:35:05.461] Payload execution failed                 block_hash=9fcdb4..8c8bc5 err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:05.461] Failed to insert unsafe payload for EL sync id=9fcdb4..8c8bc5:131349664 err=\"temp: failed to update insert payload: failed to execute payload: the method engine_newPayloadV3 does not exist/is not available\"\nINFO [01-31|13:35:05.966] connected to peer                        peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT addr=/ip4/35.204.8.220/tcp/9003\nINFO [01-31|13:35:05.966] Starting P2P sync client event loop      peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT\nINFO [01-31|13:35:06.215] disconnected from peer                   peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT addr=/ip4/35.204.8.220/tcp/9003\nINFO [01-31|13:35:07.182] Received first L1 head signal            l1_head=9abcad..e76e19:21742161\nINFO [01-31|13:35:07.453] Received signed execution payload from p2p id=d671a1..543636:131349665 peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq txs=13\nINFO [01-31|13:35:07.453] Optimistically inserting unsafe L2 execution payload to drive EL sync id=d671a1..543636:131349665\nERROR[01-31|13:35:07.454] Payload execution failed                 block_hash=d671a1..543636 err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:07.454] Failed to insert unsafe payload for EL sync id=d671a1..543636:131349665 err=\"temp: failed to update insert payload: failed to execute payload: the method engine_newPayloadV3 does not exist/is not available\"\nINFO [01-31|13:35:09.476] Received signed execution payload from p2p id=a32a81..e0200b:131349666 peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq txs=13\nINFO [01-31|13:35:09.476] Optimistically inserting unsafe L2 execution payload to drive EL sync id=a32a81..e0200b:131349666\nERROR[01-31|13:35:09.477] Payload execution failed                 block_hash=a32a81..e0200b err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:09.477] Failed to insert unsafe payload for EL sync id=a32a81..e0200b:131349666 err=\"temp: failed to update insert payload: failed to execute payload: the method engine_newPayloadV3 does not exist/is not available\"\nINFO [01-31|13:35:10.212] attempting connection                    peer=16Uiu2HAmHhHMQLK9VgSNwW6q4zanFNWZmXmA9XfMzXRYGuQiKCQA\nINFO [01-31|13:35:10.212] attempting connection                    peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT\nINFO [01-31|13:35:10.647] New local node record                    seq=1,738,296,946,892 id=c9e5f40c89d7a29e         ip=222.107.63.27 udp=43201 tcp=9222\nINFO [01-31|13:35:10.965] connected to peer                        peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT addr=/ip4/35.204.8.220/tcp/9003\nINFO [01-31|13:35:10.965] Starting P2P sync client event loop      peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT\nINFO [01-31|13:35:11.212] attempting connection                    peer=16Uiu2HAkvLLc8vUyHadc3NYBhmzYKmEkTcoMLxB69zyr13SPYcNm\nINFO [01-31|13:35:11.212] disconnected from peer                   peer=16Uiu2HAmHNEAsu2zSM8cQbQAHT9xeeUENmJegtY82qk28feJ8nAT addr=/ip4/35.204.8.220/tcp/9003\nINFO [01-31|13:35:11.332] Received signed execution payload from p2p id=cdb6d2..5aca95:131349667 peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq txs=9\nINFO [01-31|13:35:11.332] Optimistically inserting unsafe L2 execution payload to drive EL sync id=cdb6d2..5aca95:131349667\nERROR[01-31|13:35:11.332] Payload execution failed                 block_hash=cdb6d2..5aca95 err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:11.332] Failed to insert unsafe payload for EL sync id=cdb6d2..5aca95:131349667 err=\"temp: failed to update insert payload: failed to execute payload: the method engine_newPayloadV3 does not exist/is not available\"\nINFO [01-31|13:35:11.539] connected to peer                        peer=16Uiu2HAkvLLc8vUyHadc3NYBhmzYKmEkTcoMLxB69zyr13SPYcNm addr=/ip4/15.235.182.103/tcp/31367\nINFO [01-31|13:35:11.539] Starting P2P sync client event loop      peer=16Uiu2HAkvLLc8vUyHadc3NYBhmzYKmEkTcoMLxB69zyr13SPYcNm\n^CINFO [01-31|13:35:12.445] discv5 DHT iteration stopped, closing peer discovery now...\nINFO [01-31|13:35:12.446] stopped listening network address        addr=/ip4/0.0.0.0/tcp/9222\nINFO [01-31|13:35:12.446] disconnected from peer                   peer=16Uiu2HAmTh7pXVvdAhkaQpynoEi4ai1kUD6zd9hsRYTsL8JCSdXG addr=/ip4/34.65.188.4/tcp/9003\nINFO [01-31|13:35:12.446] disconnected from peer                   peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq addr=/ip4/15.204.213.68/tcp/9003\nINFO [01-31|13:35:12.446] disconnected from peer                   peer=16Uiu2HAm41UAybZY5px2WfQdWo6E55HByggrUCt1n8k9ugU5s7Uk addr=/ip4/107.6.94.220/tcp/30657\nINFO [01-31|13:35:12.452] disconnected from peer                   peer=16Uiu2HAkxkYZY7jnNgF58UjcDy4Vgh3if1Pgg1jMpB94KkETTa3j addr=/ip4/168.119.140.177/tcp/9003\nINFO [01-31|13:35:12.459] disconnected from peer                   peer=16Uiu2HAkyxjHbPkNhY7gfvrU38AhnzMLcbzvzqLzvigvvwvajhDg addr=/ip4/145.239.144.71/tcp/9222\nINFO [01-31|13:35:12.462] disconnected from peer                   peer=16Uiu2HAkvLLc8vUyHadc3NYBhmzYKmEkTcoMLxB69zyr13SPYcNm addr=/ip4/15.235.182.103/tcp/31367\nINFO [01-31|13:35:12.526] stopped P2P req-resp L2 block sync client\nINFO [01-31|13:35:12.526] State loop returned\nINFO [01-31|13:35:12.526] stopped peer discovery\nminjae@minjae-desktop:/mnt/ssd1/ethereum/l2/optimism/op-node$ \n```\n\n`op-geth`\n\n```\nminjae@minjae-desktop:/mnt/ssd1/ethereum/l2/op-geth$ ./build/bin/geth\\\n     --datadir=/mnt/ssd1/ethereum/l2/data \\\n     --http --http.addr 0.0.0.0 \\\n     --http.port 8547 \\\n     --http.api \"eth,net,web3,engine\" \\\n     --ws --ws.addr 0.0.0.0 \\\n     --ws.port 8546 --ws.api \"eth,net,web3\" \\\n     --authrpc.addr \"127.0.0.1\" --authrpc.port 8552 \\\n     --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io/ \\\n     --authrpc.jwtsecret=/mnt/ssd1/ethereum/geth.snap/jwtsecret \\\n     --syncmode=snap \\\n     --verbosity=3 \\\n     --rollup.disabletxpoolgossip \\\n     --op-network=op-mainnet \\\n     --port 30304 \\\n     --discovery.port 30304\nINFO [01-31|13:34:43.640] Starting geth on an OP network...        network=op-mainnet\nINFO [01-31|13:34:43.640] Bumping default cache on mainnet         provided=1024 updated=4096\nINFO [01-31|13:34:43.640] Maximum peer count                       ETH=50 total=50\nINFO [01-31|13:34:43.641] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\nINFO [01-31|13:34:43.644] Set global gas cap                       cap=50,000,000\nINFO [01-31|13:34:43.644] Initializing the KZG library             backend=gokzg\nINFO [01-31|13:34:43.663] Allocated trie memory caches             clean=614.00MiB dirty=1024.00MiB\nINFO [01-31|13:34:43.663] Using pebble as the backing database\nINFO [01-31|13:34:43.663] Allocated cache and file handles         database=/mnt/ssd1/ethereum/l2/data/geth/chaindata cache=2.00GiB handles=524,288\nINFO [01-31|13:34:43.685] Opened ancient database                  database=/mnt/ssd1/ethereum/l2/data/geth/chaindata/ancient/chain readonly=false\nINFO [01-31|13:34:43.685] State schema set to default              scheme=path\nWARN [01-31|13:34:43.685] Sanitizing invalid node buffer size      provided=1024.00MiB updated=256.00MiB\nINFO [01-31|13:34:43.687] Opened ancient database                  database=/mnt/ssd1/ethereum/l2/data/geth/chaindata/ancient/state readonly=false\nINFO [01-31|13:34:43.688] Stored config                            json=\"{\\\"chainId\\\":10,\\\"homesteadBlock\\\":0,\\\"eip150Block\\\":0,\\\"eip155Block\\\":0,\\\"eip158Block\\\":0,\\\"byzantiumBlock\\\":0,\\\"constantinopleBlock\\\":0,\\\"petersburgBlock\\\":0,\\\"istanbulBlock\\\":0,\\\"muirGlacierBlock\\\":0,\\\"berlinBlock\\\":3950000,\\\"londonBlock\\\":105235063,\\\"arrowGlacierBlock\\\":105235063,\\\"grayGlacierBlock\\\":105235063,\\\"mergeNetsplitBlock\\\":105235063,\\\"shanghaiTime\\\":1704992401,\\\"cancunTime\\\":1710374401,\\\"bedrockBlock\\\":105235063,\\\"regolithTime\\\":0,\\\"canyonTime\\\":1704992401,\\\"ecotoneTime\\\":1710374401,\\\"fjordTime\\\":1720627201,\\\"graniteTime\\\":1726070401,\\\"holoceneTime\\\":1736445601,\\\"terminalTotalDifficulty\\\":0,\\\"terminalTotalDifficultyPassed\\\":true,\\\"depositContractAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"optimism\\\":{\\\"eip1559Elasticity\\\":6,\\\"eip1559Denominator\\\":50,\\\"eip1559DenominatorCanyon\\\":250}}\"\nINFO [01-31|13:34:43.688] New config                               json=\"{\\\"chainId\\\":10,\\\"homesteadBlock\\\":0,\\\"eip150Block\\\":0,\\\"eip155Block\\\":0,\\\"eip158Block\\\":0,\\\"byzantiumBlock\\\":0,\\\"constantinopleBlock\\\":0,\\\"petersburgBlock\\\":0,\\\"istanbulBlock\\\":0,\\\"muirGlacierBlock\\\":0,\\\"berlinBlock\\\":3950000,\\\"londonBlock\\\":105235063,\\\"arrowGlacierBlock\\\":105235063,\\\"grayGlacierBlock\\\":105235063,\\\"mergeNetsplitBlock\\\":105235063,\\\"shanghaiTime\\\":1704992401,\\\"cancunTime\\\":1710374401,\\\"bedrockBlock\\\":105235063,\\\"regolithTime\\\":0,\\\"canyonTime\\\":1704992401,\\\"ecotoneTime\\\":1710374401,\\\"fjordTime\\\":1720627201,\\\"graniteTime\\\":1726070401,\\\"holoceneTime\\\":1736445601,\\\"terminalTotalDifficulty\\\":0,\\\"terminalTotalDifficultyPassed\\\":true,\\\"depositContractAddress\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\\"optimism\\\":{\\\"eip1559Elasticity\\\":6,\\\"eip1559Denominator\\\":50,\\\"eip1559DenominatorCanyon\\\":250}}\" genesis-nil=false\nINFO [01-31|13:34:43.688] Checking compatibility                   height=0 time=0 error=<nil>\nINFO [01-31|13:34:43.688] Configs equal\nINFO [01-31|13:34:43.688] \nINFO [01-31|13:34:43.688] ---------------------------------------------------------------------------------------------------------------------------------------------------------\nINFO [01-31|13:34:43.688] Chain ID:  10 (OP Mainnet)\nINFO [01-31|13:34:43.688] Consensus: Optimism\nINFO [01-31|13:34:43.688] \nINFO [01-31|13:34:43.688] Pre-Merge hard forks (block based):\nINFO [01-31|13:34:43.688]  - Homestead:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md)\nINFO [01-31|13:34:43.688]  - Tangerine Whistle (EIP 150): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md)\nINFO [01-31|13:34:43.688]  - Spurious Dragon/1 (EIP 155): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\nINFO [01-31|13:34:43.688]  - Spurious Dragon/2 (EIP 158): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)\nINFO [01-31|13:34:43.688]  - Byzantium:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md)\nINFO [01-31|13:34:43.688]  - Constantinople:              #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md)\nINFO [01-31|13:34:43.688]  - Petersburg:                  #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md)\nINFO [01-31|13:34:43.688]  - Istanbul:                    #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md)\nINFO [01-31|13:34:43.688]  - Muir Glacier:                #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md)\nINFO [01-31|13:34:43.688]  - Berlin:                      #3950000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md)\nINFO [01-31|13:34:43.688]  - London:                      #105235063 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)\nINFO [01-31|13:34:43.688]  - Arrow Glacier:               #105235063 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md)\nINFO [01-31|13:34:43.688]  - Gray Glacier:                #105235063 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md)\nINFO [01-31|13:34:43.688] \nINFO [01-31|13:34:43.688] Merge configured:\nINFO [01-31|13:34:43.688]  - Hard-fork specification:    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md\nINFO [01-31|13:34:43.688]  - Network known to be merged: true\nINFO [01-31|13:34:43.688]  - Total terminal difficulty:  0\nINFO [01-31|13:34:43.688]  - Merge netsplit block:       #105235063\nINFO [01-31|13:34:43.688] \nINFO [01-31|13:34:43.688] Post-Merge hard forks (timestamp based):\nINFO [01-31|13:34:43.688]  - Shanghai:                    @1704992401 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md)\nINFO [01-31|13:34:43.688]  - Cancun:                      @1710374401 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md)\nINFO [01-31|13:34:43.688]  - Regolith:                    @0         \nINFO [01-31|13:34:43.688]  - Canyon:                      @1704992401\nINFO [01-31|13:34:43.688]  - Ecotone:                     @1710374401\nINFO [01-31|13:34:43.688]  - Fjord:                       @1720627201\nINFO [01-31|13:34:43.688]  - Granite:                     @1726070401\nINFO [01-31|13:34:43.688]  - Holocene:                     @1736445601\nINFO [01-31|13:34:43.688] \nINFO [01-31|13:34:43.688] ---------------------------------------------------------------------------------------------------------------------------------------------------------\nINFO [01-31|13:34:43.688] \nINFO [01-31|13:34:43.689] Loaded most recent local block           number=0 hash=7ca38a..3fa48b td=1 age=55y10mo2w\nINFO [01-31|13:34:43.689] Genesis state is missing, wait state sync\nINFO [01-31|13:34:43.689] Initialized transaction indexer          range=\"last 2350000 blocks\"\nINFO [01-31|13:34:43.689] Initialising Ethereum protocol           network=10         dbversion=8\nINFO [01-31|13:34:43.689] Loaded local transaction journal         transactions=0 dropped=0\nINFO [01-31|13:34:43.689] Resuming state snapshot generation       root=eddb4c..a568eb accounts=0 slots=0 storage=0.00B dangling=0 elapsed=\"72.684\u00b5s\"\nINFO [01-31|13:34:43.689] Enabled snap sync                        head=0 hash=7ca38a..3fa48b\nINFO [01-31|13:34:43.689] Trie missing, state snapshotting paused  root=eddb4c..a568eb accounts=0 slots=0 storage=0.00B dangling=0 elapsed=\"183.59\u00b5s\"\nINFO [01-31|13:34:43.689] Gasprice oracle is ignoring threshold set threshold=2\nWARN [01-31|13:34:43.691] Engine API enabled                       protocol=eth\nINFO [01-31|13:34:43.691] Starting peer-to-peer node               instance=Geth/v1.101411.6-stable-50b3422b/linux-amd64/go1.22.7\nINFO [01-31|13:34:43.721] New local node record                    seq=1,738,296,927,247 id=efbaf03ddbaa84c5 ip=127.0.0.1 udp=30304 tcp=30304\nINFO [01-31|13:34:43.721] Started P2P networking                   self=enode://d11ea540a31f886ef2ac5b20f2c6093a85470cdea3549df3d5584dcb4f7ca1d9eaf4a7ae858e9adabfd799fb617cd94c6048771ed811fa2bb7c19b2f0e3ac487@127.0.0.1:30304\nINFO [01-31|13:34:43.721] IPC endpoint opened                      url=/mnt/ssd1/ethereum/l2/data/geth.ipc\nINFO [01-31|13:34:43.721] Loaded JWT secret file                   path=/mnt/ssd1/ethereum/geth.snap/jwtsecret crc32=0x990ebdc\nINFO [01-31|13:34:43.722] HTTP server started                      endpoint=[::]:8547 auth=false prefix= cors= vhosts=localhost\nINFO [01-31|13:34:43.722] WebSocket enabled                        url=ws://[::]:8546\nINFO [01-31|13:34:43.722] WebSocket enabled                        url=ws://127.0.0.1:8552\nINFO [01-31|13:34:43.722] HTTP server started                      endpoint=127.0.0.1:8552 auth=true  prefix= cors=localhost vhosts=localhost\nWARN [01-31|13:35:03.439] Served eth_getBlockByNumber              reqid=2 duration=\"58.936\u00b5s\" err=\"finalized block not found\"\nWARN [01-31|13:35:03.440] Served engine_newPayloadV3               reqid=3 duration=\"5.295\u00b5s\"  err=\"the method engine_newPayloadV3 does not exist/is not available\"\nINFO [01-31|13:35:03.773] Looking for peers                        peercount=1 tried=101 static=0\nINFO [01-31|13:35:04.790] New local node record                    seq=1,738,296,927,248 id=efbaf03ddbaa84c5 ip=222.107.63.27 udp=30304 tcp=30304\nWARN [01-31|13:35:05.461] Served engine_newPayloadV3               reqid=4 duration=\"5.388\u00b5s\"  err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:07.454] Served engine_newPayloadV3               reqid=5 duration=\"4.097\u00b5s\"  err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:09.477] Served engine_newPayloadV3               reqid=6 duration=\"6.25\u00b5s\"   err=\"the method engine_newPayloadV3 does not exist/is not available\"\nWARN [01-31|13:35:11.332] Served engine_newPayloadV3               reqid=7 duration=\"5.881\u00b5s\"  err=\"the method engine_newPayloadV3 does not exist/is not available\"\n^CINFO [01-31|13:35:13.758] Got interrupt, shutting down...\nINFO [01-31|13:35:13.758] HTTP server stopped                      endpoint=[::]:8547\nINFO [01-31|13:35:13.758] HTTP server stopped                      endpoint=[::]:8546\nINFO [01-31|13:35:13.758] HTTP server stopped                      endpoint=127.0.0.1:8552\nINFO [01-31|13:35:13.759] IPC endpoint closed                      url=/mnt/ssd1/ethereum/l2/data/geth.ipc\nINFO [01-31|13:35:14.334] Ethereum protocol stopped\nINFO [01-31|13:35:14.334] Transaction pool stopped\nINFO [01-31|13:35:14.334] Journalling in-progress snapshot         root=eddb4c..a568eb accounts=0 slots=0 storage=0.00B dangling=0 elapsed=30.645s\nINFO [01-31|13:35:14.344] Failed to journal in-memory trie nodes   err=\"triedb layer [0xeddb4c1786789419153a27c4c80ff44a2226b6eda04f7e22ce5bae892ea568eb] missing\"\nINFO [01-31|13:35:14.344] Blockchain stopped\nminjae@minjae-desktop:/mnt/ssd1/ethereum/l2/op-geth$ \n\n```\n\n", "CLOSED", 0, "ApeachM", "2025-01-31T04:36:45Z", "2025-02-03T17:08:15Z", "2025-02-03T17:08:14Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6oCkZX", 14055, "Revised OPCM oriented bounty and audit processes (OPCM - Upgrade 13)", "With the introduction of the OCPM there will be a new chain deployment and upgrade script associated with each governance proposal. This provides an excellent opportunity to introduce more decentralized community driven approach to securing our protocol\n\nIn the short term: we should engage with an audit firm who we can notify every time a new OPM has been deployed. This new OPCM represents a firm commitment to the code of the next upgrade, and the audit firm should be able to begin an audit solely based on the information contained in the OPCM as well as the call data that will be provided to it.\n\nIn the long-term: we should further decentralize this process by automatically including the OPCM in the bounty program, as soon as it has been deployed.", "OPEN", 0, "maurelian", "2025-01-29T20:37:56Z", "2025-02-05T17:02:31Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6oBUpg", 14048, "Drippie dashboards and alerting", "There's a [drippie dashboard](https://optimistic.grafana.net/d/fdph1c0hdlrlsd/drippie-mon?orgId=1&from=now-6h&to=now&timezone=browser&var-cluster=opfnd-prod-web-primary&var-namespace=airbyte) already but it needs to be configured. We will also need to add [alerting rules](https://github.com/ethereum-optimism/k8s/tree/master/grafana-cloud/rules).", "CLOSED", 0, "pauldowman", "2025-01-29T18:19:59Z", "2025-09-03T14:55:32Z", "2025-09-03T14:55:32Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6n-AMR", 14038, "op-program: reuse EVM instance in L2 block processor", "See `AddTx`: https://github.com/ethereum-optimism/optimism/blob/d39eb247e60584c87b75baec937ddd20701225a5/op-program/client/l2/engineapi/block_processor.go#L135\n\nThe intermediate geth v1.14.12 -> v1.14.13 changes (see PR #13958) allow for easy EVM-instance reuse between txs of the same block.\n\nThis was left unoptimized out of caution, but can be changed. Specifically, the `mkEVM()` can be called once (and `provider.GetVMConfig()` usage can be simplified) in `NewBlockProcessorFromHeader`, and the `*vm.EVM` instance can then be shared between txs.\n\n\n", "CLOSED", 0, "protolambda", "2025-01-29T12:16:00Z", "2025-02-05T17:35:25Z", "2025-02-05T17:35:25Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6n5Qv8", 14030, "Deploy op-dripper to sepolia", "There's an issue to request help from Platforms here: https://github.com/ethereum-optimism/platforms-team/issues/551\n\nIn order to fulfill that they need from us:\n- [x] #14164\n- [ ] A high-level rollout plan (which networks, and when)\n- [ ] Release artifacts (Docker image?)", "CLOSED", 0, "ControlCplusControlV", "2025-01-28T22:03:56Z", "2025-02-06T16:10:44Z", "2025-02-06T16:10:44Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6nrDL6", 13996, "Add mipsVersion flag to `op-deployer bootstrap opcm` and default to 2 (OPCM - Upgrade 13)", "[Context](https://github.com/ethereum-optimism/optimism/pull/13979/files/50f3b0b450c6c1f3387075590355b23df08c01ef#r1929910872).\n\nSince we are moving to MTCannon/mips64, we may not need this version flag anymore.", "CLOSED", 0, "maurelian", "2025-01-27T13:47:51Z", "2025-02-05T17:02:18Z", "2025-02-04T21:40:30Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6nmkNp", 13993, "Replace delegate caller with safe in OPCM upgrade tests (upgrade 13)", "I think we need a tracking issue for this, I don't see one in https://github.com/ethereum-optimism/optimism/issues/13069\n\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/optimism/pull/13979#discussion_r1929914002_", "CLOSED", 0, "maurelian", "2025-01-27T01:14:05Z", "2025-02-05T15:52:59Z", "2025-02-05T15:52:59Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6nfgsj", 13975, "op-program: implement accelerated BLS precompiles for Isthmus", "Tracking issue for EIP-2537: https://github.com/ethereum-optimism/pm/issues/26#issuecomment-2611004217\n\n**Describe the solution you'd like**\n<!--\nA clear and concise description of what you want to happen.\n-->\n\nWe should mark BLS12-381 precompiles as accelerated so the FP program doesn't have to run expensive crypto operations unnecessarily.\n\nThese should also include similar tests and gas logic to the existing accelerated precompiles.\n\nhttps://github.com/ethereum-optimism/optimism/blob/7bb33f991d90ecde978fa2937cbee0b0f3804a64/op-program/client/l2/engineapi/precompiles.go#L58-L71\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n- We could process these in op-program at runtime instead of calling out to L1, but this affects challenger performance much more than using an accelerated precompile.\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "CLOSED", 0, "meyer9", "2025-01-24T17:59:55Z", "2025-02-07T00:50:44Z", "2025-02-07T00:50:44Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6nVDS9", 13939, "op-deployer: build issue / usage issue", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nI tried to deploy Superchain using op-deployer, but I can't build it.\nhttps://docs.optimism.io/builders/chain-operators/tools/op-deployer\nThis guide doesn't mention about building part, so cmd is failing with `can't find...`\nSo I run this.\n`go run ./op-deployer/cmd/op-deployer/main.go init --l1-chain-id 11155111 --l2-chain-ids 123123123123 --workdir .deployer`\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "unionmini", "2025-01-23T16:06:41Z", "2025-02-04T01:51:26Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6mxmwB", 13852, "op-node: Improve archive node synchronization by adding configurable timeout flag", "**Is your feature request related to a problem? Please describe.**\n I'm operating multiple Base and Optimism archive nodes. During this process, I am encountering persistent issues where block synchronization slows down significantly.\n\n**Describe the solution you'd like**\nI would like to improve the synchronization speed of both the Base Mainnet and Optimism Mainnet archive nodes.\n\n**Describe alternatives you've considered**\nWhile observing the logs of the op-node during periods of slow synchronization, I noticed the following warning message appearing multiple times:\n\n```\nlvl=warn msg=\"Engine temporary error\" err=\"temporarily cannot insert new safe block: failed to create new block via forkchoice: context deadline exceeded\"\n```\n\nThis error occurs when the `engine_forkchoiceUpdatedV3` RPC call exceeds the configured timeout (5 seconds) and results in a request timeout. This behavior is intentional and expected, but when the request times out, the op-node retries the same RPC request, which introduces additional delay.\n\nTo address this, I experimented by increasing the timeout from 5 seconds to 30 seconds while synchronizing the Base Mainnet archive node. This change proved effective. The experiment involved three Base Mainnet archive nodes:\n\nBlue Node: The node that was synchronizing well (no special settings were applied to it other than displaying the latest block number).\nYellow Node: The node with synchronization issues (timeout increased from 5 seconds to 30 seconds).\nGreen Node: The node using the official image without any modifications.\nAfter one week of monitoring synchronization, as shown in the attached graph:\n\n<img width=\"824\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/93620912-2206-4514-8e5e-5781343715a4\" />\n\nThe Yellow Node completed synchronization up to the latest block.\nThe Green Node still had not synchronized because its synchronization speed matched the block generation rate.\nFurther investigation through trace logs revealed that for blocks containing transactions with hundreds of logs, the `engine_forkchoiceUpdatedV3` RPC call could take more than 10 seconds. (`DEBUG[01-19|05:13:53.027] Served engine_forkchoiceUpdatedV3        reqid=4941 duration=20.337986076s`)\n\nBased on these findings, I suggest the following improvements:\nAdd a flag to make the timeout adjustable, allowing users to set it according to their needs.\nFor full node operators, this change may not have a significant impact since they are already synchronizing well. \nHowever, for archive node operators experiencing slow synchronization, this flexible timeout could be beneficial. \nImportantly, this change should not negatively impact any operators.\n\n**Additional context**\nThe versions used for testing were op-node v1.10.2 and op-geth v1.101411.4, with all other specs and flags remaining the same except for the timeout. The experiment was conducted on an in-house server.\n\nI am running nodes both on my own server and in an AWS EC2 environment, and both environments are experiencing similar synchronization speed degradation. However, one unusual observation is that once the node catches up to the latest block, synchronization degradation does not occur frequently. But when the node is restarted, the blocks start to fall behind again. The proposed changes were helpful in this scenario.\n\nAdditionally, I also attempted to run archive nodes with reth, but due to its behavior of syncing multiple blocks at once, I observed that the gap would grow by about 10 blocks, then close again, repeating this cycle. As a result, I'm currently using op-geth.\n\n\n", "CLOSED", 0, "pengin7384", "2025-01-20T02:24:45Z", "2025-09-14T07:25:28Z", "2025-09-14T07:25:28Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6mq-ua", 13839, "Implement static analysis based checks to ensure that no `SSTORE` operations occur  within `OPCM.upgrade()`.", "Because OPCM.upgrade and OPCM.addGameType are meant to be DELEGATECALLed, they must not make any storage writes.\n\nStatic analysis and/or concrete analysis should be used to enforce this property.\n", "OPEN", 0, "maurelian", "2025-01-17T20:57:55Z", "2025-02-04T14:58:42Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6mqy2U", 13837, "interop: Reorg Support - Goals and Design", "Here are some thoughts about Reorg Handling in the Supervisor\n\n# Types (sources) of Reorgs:\n\n## Unsafe Reorg\nIn this situation, the Supervisor is syncing nodes and making forward progress. A Node in Managed Mode receives an updated unsafe block from the gossip network, and drops an the old unsafe block it was carrying.\n\nWhen this happens, a new unsafe block notification will travel to the Supervisor, and the Supervisor will find that it holds conflicting log data for the given block.\n\nThere are two ways to consider this disagreement:\n1. The Supervisor is always the source of truth, and so the Supervisor should reset the Node and expect it to return to the originally indexed data\n1. Unsafe data is arbitrary, and if a node replaces old unsafe data with new unsafe data, that new data is more likely to be correct\n\nMy vote is for #2, unsafe data cannot be considered Cannonical against any L1 because it is just delivered over the gossip network.\n\n## Local Safety can't be promoted to Cross Safety\nIn this situation, a block is derived from the L1 and is recorded into the Local Derivation DB. Because the block contains some cross dependency, the Cross Safety doesn't advance through the block. Then, new data arrives for the cross-dependencies which reveal that the block we recorded as Locally Safe is actually *invalid* because the interop claims it made are incorrect.\n\nWhen this happens, the supervisor is the first to realize it, and must correct the node. The node must replace the invalid block with the deposit-only block. Furthermore, the Supervisor must ensure it doesn't *reconsume* the same Locally Safe data, causing this issue to loop.\n\nThis work has been started here: https://github.com/ethereum-optimism/optimism/pull/13645\n\n## L1 change\nIn this situation, all derivation and syncing is happening correctly, and then the L1 itself reorgs. Now all the data used to derive blocks is called into question.\n\nWhen this happens, all Unsafe, Local and Cross data must be evaluated. Local and Cross Derivation Data will certainly need to be purged, as the L2 blocks now derive from different L1 blocks. And it is possible that the L1 reorg changed the L2 reality, invalidating unsafe data as well.\n\n## Desync\nThis covers any situation in which the Node and Supervisor are working correctly, and then through some outside means (restart, cosmic radiation, an operator error) the database becomes inconsistent.\n\nThese situations are varied, so the recovery path is varried as well, but generally we will need to determine what data is missing or incorrect, and will need to prune back databases to that point and resync.\n\n# Thinking about Reorgs Architecturally\nIt would really suck if we had to implement N different reorg handlers based on the N different situations above. Really, they all fall into the same basic behavior, where the inconsistency is identified, the bad data is destroyed, and the Node and Supervisor are resync'd to canonical data.\n\nWe can think of canonicity as being an activity in two parts:\n- Allow valid data\n- Don't allow invalid data\n\nWe achieve the former through consistency checks on-write to the ChainsDB which already exist -- when new data is added to event and derivation databases, it *must* build upon the previously recorded blocks.\n\nWe can achieve the *latter* using a centralized system. I'm imagining this utility as \"The Invalidator\"\n\nThe Invalidator would be a new component of the Supervisor whose entire purpose is to destroy incorrect data between the Node and Supervisor. All of the above cases can generate *event signals* which flow to the Invalidator and trigger similar workflows:\n- Identify the incorrect data\n- Destroy (prune) the incorrect data\n- Insert data where required (like to mark a Locally Invalidated block so we don't retry it)\n- Initiate resync\n\nLikely most of this code could be singleton, meaning we can keep the complexity very low and the reasoning high.", "CLOSED", 0, "axelKingsley", "2025-01-17T20:23:54Z", "2025-02-05T13:19:51Z", "2025-02-05T13:19:50Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6mc98D", 13809, "l2 network rollup  stuck", "**Bug Description**\nNetwork reset at any time.\n\n**Steps to Reproduce**\n- Launched the network using the link https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup\n- Added wallet balance.\n- Deployed a smart contract. \n- We launched an application that works with a smart contract. Execute transactions every 6 seconds.\n\n\n**Environment Information:**\n- Operating System: Ubuntu 20.04\n- git 2 2.34.1\n- go 1.21 1.22.9\n- node 20 22.11.0\n- pnpm 8 9.14.2\n- foundry 0.2.0 0.2.0\n- make 3 4.3\n- jq 1.6 1.6\n- direnv 2 2.25.2\n\n**Configurations:**\nUse branch tutorials/chain\nenv from file .envrc\n`L1_RPC_KIND=debug_geth`\nconfig network use by default. Only change l2ChainID\n```\n{\n  \"l1StartingBlockTag\": \"\",\n  \"l1ChainID\": 11155111,\n  \"l2ChainID\": 42090,\n  \"l2BlockTime\": 2,\n  \"l1BlockTime\": 12,\n  \"maxSequencerDrift\": 600,\n  \"sequencerWindowSize\": 3600,\n  \"channelTimeout\": 300,\n\n  \"p2pSequencerAddress\": \"\",\n  \"batchInboxAddress\": \"\",\n  \"batchSenderAddress\": \"\",\n\n  \"l2OutputOracleSubmissionInterval\": 120,\n  \"l2OutputOracleStartingBlockNumber\": 0,\n  \"l2OutputOracleStartingTimestamp\": 1736488032,\n\n  \"l2OutputOracleProposer\": \"\",\n  \"l2OutputOracleChallenger\": \"\",\n\n  \"finalizationPeriodSeconds\": 12,\n\n  \"proxyAdminOwner\": \"\",\n  \"baseFeeVaultRecipient\": \"\",\n  \"l1FeeVaultRecipient\": \"\",\n  \"sequencerFeeVaultRecipient\": \"\",\n  \"finalSystemOwner\": \"\",\n  \"superchainConfigGuardian\": \"\",\n\n  \"baseFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\n  \"l1FeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\n  \"sequencerFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\n  \"baseFeeVaultWithdrawalNetwork\": 0,\n  \"l1FeeVaultWithdrawalNetwork\": 0,\n  \"sequencerFeeVaultWithdrawalNetwork\": 0,\n\n  \"gasPriceOracleOverhead\": 2100,\n  \"gasPriceOracleScalar\": 1000000,\n\n  \"enableGovernance\": true,\n  \"governanceTokenSymbol\": \"OP\",\n  \"governanceTokenName\": \"Optimism\",\n  \"governanceTokenOwner\": \"\",\n\n  \"l2GenesisBlockGasLimit\": \"0x1c9c380\",\n  \"l2GenesisBlockBaseFeePerGas\": \"0x3b9aca00\",\n  \"l2GenesisRegolithTimeOffset\": \"0x0\",\n\n  \"eip1559Denominator\": 50,\n  \"eip1559DenominatorCanyon\": 250,\n  \"eip1559Elasticity\": 6,\n\n  \"l2GenesisRegolithTimeOffset\": \"0x0\",\n  \"l2GenesisDeltaTimeOffset\": null,\n  \"l2GenesisCanyonTimeOffset\": \"0x0\",\n\n  \"systemConfigStartBlock\": 0,\n\n  \"requiredProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"recommendedProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\n  \"faultGameAbsolutePrestate\": \"\",\n  \"faultGameMaxDepth\": 44,\n  \"faultGameMaxDuration\": 1200,\n  \"faultGameGenesisBlock\": 0,\n  \"faultGameGenesisOutputRoot\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"faultGameSplitDepth\": 14\n}\n\n```\n**Logs:**\nOp-batcher\n```\nt=2025-01-13T08:09:59+0000 lvl=warn msg=\"last submitted block lagged behind L2 safe head: batch submission will continue from the safe head now\" last=0xdc7165db9eb0c9cd3ee62ada18142022ca8876d2712b8679643a1014ea77c71f:36427 safe=0x387c9991688b2e07fc1f23d68c795acd4d4460315011ca59d66ab56e70a19679:36449\nt=2025-01-13T08:09:59+0000 lvl=warn msg=\"Error calculating L2 block range\"   err=\"L2 safe head ahead of L2 unsafe head\"\nt=2025-01-13T08:09:59+0000 lvl=dbug msg=\"Requested tx data\"                  l1Head=0xa1e6613dadaf967ccde016150d47108f131c6ddfbf3a6440656a3399a69d75da:7481206 data_pending=false blocks_pending=3\nt=2025-01-13T08:09:59+0000 lvl=eror msg=\"unable to get tx data\"              err=\"adding block[0] to channel builder: converting block to batch: block 0x973463007c9639104c23192c42d5d33b5b981b04d427053255c6fc860e0342d3 has no transactions\"\nt=2025-01-13T09:09:59+0000 lvl=warn msg=\"last submitted block lagged behind L2 safe head: batch submission will continue from the safe head now\" last=0xe21a1c01e300621dd5a6d96147f086c72a34fe671d1cb660e4060c610858bac6:105089 safe=0xf9539186035598ea93fb7b0e9e927495ca2974c6efcff178ee490f389fe75ca0:105108\nt=2025-01-13T09:09:59+0000 lvl=warn msg=\"Error calculating L2 block range\"   err=\"L2 safe head ahead of L2 unsafe head\"\nt=2025-01-13T09:09:59+0000 lvl=dbug msg=\"Requested tx data\"                  l1Head=0x5086640a0dd4fcce3a65b5a545ad5f80a9fbe32401ff34dd950d953e397d23ff:7481506 data_pending=false blocks_pending=3\nt=2025-01-13T09:09:59+0000 lvl=eror msg=\"unable to get tx data\"              err=\"adding block[0] to channel builder: converting block to batch: block 0x973463007c9639104c23192c42d5d33b5b981b04d427053255c6fc860e0342d3 has no transactions\"\n```\nOp-geth\n```\nINFO [01-13|09:59:00.027] Starting work on payload                 id=0x0209db4b7981f311\nINFO [01-13|09:59:00.028] Updated payload                          id=0x0209db4b7981f311 number=137,155 hash=ca8c0e..d3a302 txs=1 withdrawals=0 gas=50489 fees=0 root=61653f..5c1982 elapsed=\"626.075\u00b5s\"\nINFO [01-13|09:59:01.951] Stopping work on payload                 id=0x0209db4b7981f311 reason=delivery     elapsed=1.923s\nINFO [01-13|09:59:01.955] Imported new potential chain segment     number=137,155 hash=ca8c0e..d3a302 blocks=1 txs=1 mgas=0.050 elapsed=2.134ms     mgasps=23.656 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:01.956] Chain head was updated                   number=137,155 hash=ca8c0e..d3a302 root=61653f..5c1982 elapsed=\"407.58\u00b5s\"\nINFO [01-13|09:59:02.003] Starting work on payload                 id=0x02adc9f7248de373\nINFO [01-13|09:59:02.004] Updated payload                          id=0x02adc9f7248de373 number=137,156 hash=99d715..6048e6 txs=1 withdrawals=0 gas=64001 fees=0 root=c79a8c..555b15 elapsed=\"598.574\u00b5s\"\nINFO [01-13|09:59:03.950] Stopping work on payload                 id=0x02adc9f7248de373 reason=delivery     elapsed=1.946s\nINFO [01-13|09:59:03.954] Imported new potential chain segment     number=137,156 hash=99d715..6048e6 blocks=1 txs=1 mgas=0.064 elapsed=2.397ms     mgasps=26.698 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:03.956] Chain head was updated                   number=137,156 hash=99d715..6048e6 root=c79a8c..555b15 elapsed=\"446.35\u00b5s\"\nINFO [01-13|09:59:04.003] Starting work on payload                 id=0x02feeec1225c5269\nINFO [01-13|09:59:04.004] Updated payload                          id=0x02feeec1225c5269 number=137,157 hash=d962df..6e903b txs=1 withdrawals=0 gas=46901 fees=0 root=a6b28d..67c6e4 elapsed=\"588.174\u00b5s\"\nINFO [01-13|09:59:05.951] Stopping work on payload                 id=0x02feeec1225c5269 reason=delivery     elapsed=1.948s\nINFO [01-13|09:59:05.954] Imported new potential chain segment     number=137,157 hash=d962df..6e903b blocks=1 txs=1 mgas=0.047 elapsed=1.962ms     mgasps=23.902 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:05.956] Chain head was updated                   number=137,157 hash=d962df..6e903b root=a6b28d..67c6e4 elapsed=\"559.453\u00b5s\"\nINFO [01-13|09:59:06.003] Starting work on payload                 id=0x023e43917a77d9a7\nINFO [01-13|09:59:06.003] Updated payload                          id=0x023e43917a77d9a7 number=137,158 hash=84b909..514b4c txs=1 withdrawals=0 gas=46901 fees=0 root=0ce313..f27265 elapsed=\"418.98\u00b5s\"\nINFO [01-13|09:59:07.951] Stopping work on payload                 id=0x023e43917a77d9a7 reason=delivery     elapsed=1.948s\nINFO [01-13|09:59:07.955] Imported new potential chain segment     number=137,158 hash=84b909..514b4c blocks=1 txs=1 mgas=0.047 elapsed=2.411ms     mgasps=19.450 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:07.957] Chain head was updated                   number=137,158 hash=84b909..514b4c root=0ce313..f27265 elapsed=\"424.25\u00b5s\"\nINFO [01-13|09:59:08.002] Starting work on payload                 id=0x02e887dd091a3161\nINFO [01-13|09:59:08.003] Updated payload                          id=0x02e887dd091a3161 number=137,159 hash=9ed78b..737388 txs=1 withdrawals=0 gas=46901 fees=0 root=2a9d7b..20a38f elapsed=\"464.921\u00b5s\"\nINFO [01-13|09:59:09.951] Stopping work on payload                 id=0x02e887dd091a3161 reason=delivery     elapsed=1.948s\nINFO [01-13|09:59:09.955] Imported new potential chain segment     number=137,159 hash=9ed78b..737388 blocks=1 txs=1 mgas=0.047 elapsed=2.309ms     mgasps=20.310 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:09.956] Chain head was updated                   number=137,159 hash=9ed78b..737388 root=2a9d7b..20a38f elapsed=\"469.461\u00b5s\"\nINFO [01-13|09:59:10.003] Starting work on payload                 id=0x024284a8affacde4\nINFO [01-13|09:59:10.004] Updated payload                          id=0x024284a8affacde4 number=137,160 hash=255449..fdeedc txs=1 withdrawals=0 gas=46901 fees=0 root=3933b9..cf9ebd elapsed=\"541.503\u00b5s\"\nINFO [01-13|09:59:11.950] Stopping work on payload                 id=0x024284a8affacde4 reason=delivery     elapsed=1.946s\nINFO [01-13|09:59:11.954] Imported new potential chain segment     number=137,160 hash=255449..fdeedc blocks=1 txs=1 mgas=0.047 elapsed=2.224ms     mgasps=21.088 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:11.956] Chain head was updated                   number=137,160 hash=255449..fdeedc root=3933b9..cf9ebd elapsed=\"477.591\u00b5s\"\nINFO [01-13|09:59:12.028] Starting work on payload                 id=0x0265dd5c3b46692d\nINFO [01-13|09:59:12.028] Updated payload                          id=0x0265dd5c3b46692d number=137,161 hash=880352..767809 txs=1 withdrawals=0 gas=50501 fees=0 root=866775..8fde7d elapsed=\"629.715\u00b5s\"\nWARN [01-13|09:59:13.186] Served eth_sendRawTransaction            conn=3.70.24.131:60356 reqid=4093076924955394 duration=\"829.19\u00b5s\" err=\"insufficient funds for gas * price + value: balance 0, tx cost 541727938598808, overshot 541727938598808\"\nINFO [01-13|09:59:13.951] Stopping work on payload                 id=0x0265dd5c3b46692d reason=delivery     elapsed=1.923s\nINFO [01-13|09:59:13.955] Imported new potential chain segment     number=137,161 hash=880352..767809 blocks=1 txs=1 mgas=0.051 elapsed=2.455ms     mgasps=20.563 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:13.957] Chain head was updated                   number=137,161 hash=880352..767809 root=866775..8fde7d elapsed=\"494.882\u00b5s\"\nINFO [01-13|09:59:14.003] Starting work on payload                 id=0x029fe41447ec68e1\nINFO [01-13|09:59:14.004] Updated payload                          id=0x029fe41447ec68e1 number=137,162 hash=a712f2..c3920c txs=1 withdrawals=0 gas=64013 fees=0 root=bd5e80..991f42 elapsed=\"541.003\u00b5s\"\nINFO [01-13|09:59:15.951] Stopping work on payload                 id=0x029fe41447ec68e1 reason=delivery     elapsed=1.947s\nINFO [01-13|09:59:15.955] Imported new potential chain segment     number=137,162 hash=a712f2..c3920c blocks=1 txs=1 mgas=0.064 elapsed=2.207ms     mgasps=28.998 snapdiffs=2.01MiB    triedirty=0.00B\nINFO [01-13|09:59:15.956] Chain head was updated                   number=137,162 hash=a712f2..c3920c root=bd5e80..991f42 elapsed=\"491.272\u00b5s\"\nINFO [01-13|09:59:16.002] Starting work on payload                 id=0x026ff71dff721c58\nINFO [01-13|09:59:16.003] Updated payload                          id=0x026ff71dff721c58 number=137,163 hash=3da368..96736b txs=1 withdrawals=0 gas=46913 fees=0 root=33cb91..af56c4 elapsed=\"615.635\u00b5s\"\nWARN [01-13|09:59:17.302] Served eth_sendRawTransaction            conn=3.70.24.131:60382 reqid=4093076924955407 duration=1.391934ms err=\"insufficient funds for gas * price + value: balance 0, tx cost 3874640072058076, overshot 3874640072058076\"\n\n```\nop-node logs \n\n```\nt=2025-01-13T09:59:04+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9000 duration=\"113.643\u00b5s\"\nt=2025-01-13T09:59:05+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9001 duration=\"151.813\u00b5s\"\nt=2025-01-13T09:59:05+0000 lvl=info msg=\"inserted block\"                         hash=0xd962df99f7c676e7cdcd51a2cd4fc72e35d7e6d7760fbfa4aeb4083a1b6e903b number=137,157   state_root=0xa6b28d8ce316f0be085a1e3dbda6ea2958f58c1dafd170496286ea48ae67c6e4 timestamp=1,736,762,346 parent=0x99d715a4d45bb71841d43fd7e261d8819b1a1c2a170c7c94ad3c738a406048e6 prev_randao=0x13f02e7ef33012922d4a7c0d794eb7818bbce9b65b8ce65c2189c29bf221cad5 fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\nt=2025-01-13T09:59:05+0000 lvl=dbug msg=\"Processed new L2 block\"                 l2_unsafe=0xd962df99f7c676e7cdcd51a2cd4fc72e35d7e6d7760fbfa4aeb4083a1b6e903b:137157 l1_origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 txs=1 time=1,736,762,346 seal_time=6.398884ms  build_time=1.955184349s\nt=2025-01-13T09:59:05+0000 lvl=info msg=\"sequencer successfully built a new block\" block=0xd962df99f7c676e7cdcd51a2cd4fc72e35d7e6d7760fbfa4aeb4083a1b6e903b:137157 time=1,736,762,346 txs=1\nt=2025-01-13T09:59:06+0000 lvl=dbug msg=\"No next L1 block found, repeating current origin\" current=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 current_time=1,736,762,268 l2_head=0xd962df99f7c676e7cdcd51a2cd4fc72e35d7e6d7760fbfa4aeb4083a1b6e903b:137157 l2_head_time=1,736,762,346\nt=2025-01-13T09:59:06+0000 lvl=info msg=\"creating new block\"                     parent=0xd962df99f7c676e7cdcd51a2cd4fc72e35d7e6d7760fbfa4aeb4083a1b6e903b:137157 l1Origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744\nt=2025-01-13T09:59:06+0000 lvl=dbug msg=\"prepared attributes for new block\"      num=137,158 time=1,736,762,348 origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 origin_time=1,736,762,268 noTxPool=false\nt=2025-01-13T09:59:06+0000 lvl=info msg=\"sequencer started building new block\"   payload_id=0x023e43917a77d9a7 l2_parent_block=0xd962df99f7c676e7cdcd51a2cd4fc72e35d7e6d7760fbfa4aeb4083a1b6e903b:137157 l2_parent_block_time=1,736,762,346\nt=2025-01-13T09:59:06+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9002 duration=\"101.283\u00b5s\"\nt=2025-01-13T09:59:07+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9003 duration=\"131.813\u00b5s\"\nt=2025-01-13T09:59:07+0000 lvl=info msg=\"inserted block\"                         hash=0x84b90968de873b7863ec49b950dc096c66f1abf5f63bebc9a9e8162f41514b4c number=137,158   state_root=0x0ce313e126007507a6e9c676447cad3bbaeafe750c251e394ad02654def27265 timestamp=1,736,762,348 parent=0xd962df99f7c676e7cdcd51a2cd4fc72e35d7e6d7760fbfa4aeb4083a1b6e903b prev_randao=0x13f02e7ef33012922d4a7c0d794eb7818bbce9b65b8ce65c2189c29bf221cad5 fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\nt=2025-01-13T09:59:07+0000 lvl=dbug msg=\"Processed new L2 block\"                 l2_unsafe=0x84b90968de873b7863ec49b950dc096c66f1abf5f63bebc9a9e8162f41514b4c:137158 l1_origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 txs=1 time=1,736,762,348 seal_time=7.268115ms  build_time=1.956104931s\nt=2025-01-13T09:59:07+0000 lvl=info msg=\"sequencer successfully built a new block\" block=0x84b90968de873b7863ec49b950dc096c66f1abf5f63bebc9a9e8162f41514b4c:137158 time=1,736,762,348 txs=1\nt=2025-01-13T09:59:08+0000 lvl=dbug msg=\"No next L1 block found, repeating current origin\" current=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 current_time=1,736,762,268 l2_head=0x84b90968de873b7863ec49b950dc096c66f1abf5f63bebc9a9e8162f41514b4c:137158 l2_head_time=1,736,762,348\nt=2025-01-13T09:59:08+0000 lvl=info msg=\"creating new block\"                     parent=0x84b90968de873b7863ec49b950dc096c66f1abf5f63bebc9a9e8162f41514b4c:137158 l1Origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744\nt=2025-01-13T09:59:08+0000 lvl=dbug msg=\"prepared attributes for new block\"      num=137,159 time=1,736,762,350 origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 origin_time=1,736,762,268 noTxPool=false\nt=2025-01-13T09:59:08+0000 lvl=info msg=\"sequencer started building new block\"   payload_id=0x02e887dd091a3161 l2_parent_block=0x84b90968de873b7863ec49b950dc096c66f1abf5f63bebc9a9e8162f41514b4c:137158 l2_parent_block_time=1,736,762,348\nt=2025-01-13T09:59:08+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9004 duration=\"111.533\u00b5s\"\nt=2025-01-13T09:59:09+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9005 duration=\"124.803\u00b5s\"\nt=2025-01-13T09:59:09+0000 lvl=info msg=\"inserted block\"                         hash=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388 number=137,159   state_root=0x2a9d7b69bf5349778f1b464b08d4c894458df08e57e216c6b83ca9470320a38f timestamp=1,736,762,350 parent=0x84b90968de873b7863ec49b950dc096c66f1abf5f63bebc9a9e8162f41514b4c prev_randao=0x13f02e7ef33012922d4a7c0d794eb7818bbce9b65b8ce65c2189c29bf221cad5 fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\nt=2025-01-13T09:59:09+0000 lvl=dbug msg=\"Processed new L2 block\"                 l2_unsafe=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l1_origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 txs=1 time=1,736,762,350 seal_time=7.423578ms  build_time=1.956057159s\nt=2025-01-13T09:59:09+0000 lvl=info msg=\"sequencer successfully built a new block\" block=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 time=1,736,762,350 txs=1\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"No next L1 block found, repeating current origin\" current=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 current_time=1,736,762,268 l2_head=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_head_time=1,736,762,350\nt=2025-01-13T09:59:10+0000 lvl=info msg=\"creating new block\"                     parent=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l1Origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"prepared attributes for new block\"      num=137,160 time=1,736,762,352 origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 origin_time=1,736,762,268 noTxPool=false\nt=2025-01-13T09:59:10+0000 lvl=info msg=\"sequencer started building new block\"   payload_id=0x024284a8affacde4 l2_parent_block=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_parent_block_time=1,736,762,350\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9006 duration=\"144.444\u00b5s\"\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"L1 head moved forward\"                  l1_head=0xddd43c5dee1487af99ceb6d3daad2cfebf6f89f99f20f8733c57d0e916eccd4d:7481750\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 attempts=0\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 attempts=0\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"extended finality-data\"                 last_l1=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 last_l2=0x168d60a81b14b6fabdb42a83a2399861ff38560549b1a9282ee815d2633eac30:115481\nt=2025-01-13T09:59:10+0000 lvl=info msg=\"Advancing bq origin\"                    origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 originBehind=false\nt=2025-01-13T09:59:10+0000 lvl=warn msg=\"tx in inbox with unauthorized submitter\" addr=0x0840e917D05304a93A54952F00Bcf63ED262140D hash=0xeaeb4f2a674463e6dd7cf759fc238ea3f4f37fe440cf2f35658fc99dd3d2544a err=nil\nt=2025-01-13T09:59:10+0000 lvl=dbug msg=\"fetching next piece of data\"\nt=2025-01-13T09:59:10+0000 lvl=info msg=\"Generating next batch\"                  epoch=0x0094db50bf3d140583b973c906a5430f8a1e6d18fa0b4997d8e150b6fa0191ec:7478146 timestamp=1,736,718,996\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"generated attributes in payload queue\"  txs=1 timestamp=1,736,718,996\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Adding next safe attributes\"            safe_head=0x168d60a81b14b6fabdb42a83a2399861ff38560549b1a9282ee815d2633eac30:115481 pending_safe_head=0x168d60a81b14b6fabdb42a83a2399861ff38560549b1a9282ee815d2633eac30:115481 next=\"&{attributes:0xc01e916070 parent:{Hash:[22 141 96 168 27 20 182 250 189 180 42 131 162 57 152 97 255 56 86 5 73 177 169 40 46 232 21 210 99 62 172 48] Number:115481 ParentHash:[193 72 17 95 229 148 126 172 43 112 85 217 81 209 236 17 178 60 90 169 58 26 95 201 63 161 114 5 186 188 168 136] Time:1736718994 L1Origin:{Hash:[2 113 194 118 207 49 250 190 37 162 93 68 253 135 135 104 239 13 219 193 206 214 87 6 9 89 103 200 22 146 102 85] Number:7478145} SequenceNumber:5} isLastInSpan:true}\"\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"updated finality-data\"                  last_l1=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 last_l2=0x20fd76117f454fe119ae743b0b8bfc041c02ec19d95327db40b653b0d3a6eb59:115482\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Sync progress\"                          reason=\"reconciled with L1\"                   l2_finalized=0x74bfd335871670d58315de4145c43c7286f5bbaa87bfc18ceeb04f4bdf92138e:114869 l2_safe=0x20fd76117f454fe119ae743b0b8bfc041c02ec19d95327db40b653b0d3a6eb59:115482 l2_pending_safe=0x20fd76117f454fe119ae743b0b8bfc041c02ec19d95327db40b653b0d3a6eb59:115482 l2_unsafe=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_time=1,736,762,350 l1_derived=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9007 duration=42.205394ms\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Generating next batch\"                  epoch=0x0094db50bf3d140583b973c906a5430f8a1e6d18fa0b4997d8e150b6fa0191ec:7478146 timestamp=1,736,718,998\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"generated attributes in payload queue\"  txs=1 timestamp=1,736,718,998\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Adding next safe attributes\"            safe_head=0x20fd76117f454fe119ae743b0b8bfc041c02ec19d95327db40b653b0d3a6eb59:115482 pending_safe_head=0x20fd76117f454fe119ae743b0b8bfc041c02ec19d95327db40b653b0d3a6eb59:115482 next=\"&{attributes:0xc01def6150 parent:{Hash:[32 253 118 17 127 69 79 225 25 174 116 59 11 139 252 4 28 2 236 25 217 83 39 219 64 182 83 176 211 166 235 89] Number:115482 ParentHash:[22 141 96 168 27 20 182 250 189 180 42 131 162 57 152 97 255 56 86 5 73 177 169 40 46 232 21 210 99 62 172 48] Time:1736718996 L1Origin:{Hash:[0 148 219 80 191 61 20 5 131 185 115 201 6 165 67 15 138 30 109 24 250 11 73 151 216 225 80 182 250 1 145 236] Number:7478146} SequenceNumber:0} isLastInSpan:true}\"\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"updated finality-data\"                  last_l1=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 last_l2=0x30875664510f869a1f1d026d12e96370bdaf38261d90e00e9d4deb62f675d63a:115483\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Sync progress\"                          reason=\"reconciled with L1\"                   l2_finalized=0x74bfd335871670d58315de4145c43c7286f5bbaa87bfc18ceeb04f4bdf92138e:114869 l2_safe=0x30875664510f869a1f1d026d12e96370bdaf38261d90e00e9d4deb62f675d63a:115483 l2_pending_safe=0x30875664510f869a1f1d026d12e96370bdaf38261d90e00e9d4deb62f675d63a:115483 l2_unsafe=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_time=1,736,762,350 l1_derived=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Generating next batch\"                  epoch=0x0094db50bf3d140583b973c906a5430f8a1e6d18fa0b4997d8e150b6fa0191ec:7478146 timestamp=1,736,719,000\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"generated attributes in payload queue\"  txs=1 timestamp=1,736,719,000\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Adding next safe attributes\"            safe_head=0x30875664510f869a1f1d026d12e96370bdaf38261d90e00e9d4deb62f675d63a:115483 pending_safe_head=0x30875664510f869a1f1d026d12e96370bdaf38261d90e00e9d4deb62f675d63a:115483 next=\"&{attributes:0xc02564cb60 parent:{Hash:[48 135 86 100 81 15 134 154 31 29 2 109 18 233 99 112 189 175 56 38 29 144 224 14 157 77 235 98 246 117 214 58] Number:115483 ParentHash:[32 253 118 17 127 69 79 225 25 174 116 59 11 139 252 4 28 2 236 25 217 83 39 219 64 182 83 176 211 166 235 89] Time:1736718998 L1Origin:{Hash:[0 148 219 80 191 61 20 5 131 185 115 201 6 165 67 15 138 30 109 24 250 11 73 151 216 225 80 182 250 1 145 236] Number:7478146} SequenceNumber:1} isLastInSpan:true}\"\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"updated finality-data\"                  last_l1=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 last_l2=0x4232e8ac4933fa49855822d10441abcfda3a7ba8a57292c5f49adc77f178f68a:115484\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Sync progress\"                          reason=\"reconciled with L1\"                   l2_finalized=0x74bfd335871670d58315de4145c43c7286f5bbaa87bfc18ceeb04f4bdf92138e:114869 l2_safe=0x4232e8ac4933fa49855822d10441abcfda3a7ba8a57292c5f49adc77f178f68a:115484 l2_pending_safe=0x4232e8ac4933fa49855822d10441abcfda3a7ba8a57292c5f49adc77f178f68a:115484 l2_unsafe=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_time=1,736,762,350 l1_derived=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Generating next batch\"                  epoch=0x0094db50bf3d140583b973c906a5430f8a1e6d18fa0b4997d8e150b6fa0191ec:7478146 timestamp=1,736,719,002\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"generated attributes in payload queue\"  txs=1 timestamp=1,736,719,002\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Adding next safe attributes\"            safe_head=0x4232e8ac4933fa49855822d10441abcfda3a7ba8a57292c5f49adc77f178f68a:115484 pending_safe_head=0x4232e8ac4933fa49855822d10441abcfda3a7ba8a57292c5f49adc77f178f68a:115484 next=\"&{attributes:0xc02564d030 parent:{Hash:[66 50 232 172 73 51 250 73 133 88 34 209 4 65 171 207 218 58 123 168 165 114 146 197 244 154 220 119 241 120 246 138] Number:115484 ParentHash:[48 135 86 100 81 15 134 154 31 29 2 109 18 233 99 112 189 175 56 38 29 144 224 14 157 77 235 98 246 117 214 58] Time:1736719000 L1Origin:{Hash:[0 148 219 80 191 61 20 5 131 185 115 201 6 165 67 15 138 30 109 24 250 11 73 151 216 225 80 182 250 1 145 236] Number:7478146} SequenceNumber:2} isLastInSpan:true}\"\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"updated finality-data\"                  last_l1=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 last_l2=0xc556feaa215ae3c9719fad184d5a8a87fcfb8eadcfba89b1dd28e0bc9accd331:115485\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Sync progress\"                          reason=\"reconciled with L1\"                   l2_finalized=0x74bfd335871670d58315de4145c43c7286f5bbaa87bfc18ceeb04f4bdf92138e:114869 l2_safe=0xc556feaa215ae3c9719fad184d5a8a87fcfb8eadcfba89b1dd28e0bc9accd331:115485 l2_pending_safe=0xc556feaa215ae3c9719fad184d5a8a87fcfb8eadcfba89b1dd28e0bc9accd331:115485 l2_unsafe=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_time=1,736,762,350 l1_derived=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Generating next batch\"                  epoch=0x0094db50bf3d140583b973c906a5430f8a1e6d18fa0b4997d8e150b6fa0191ec:7478146 timestamp=1,736,719,004\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"generated attributes in payload queue\"  txs=1 timestamp=1,736,719,004\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Adding next safe attributes\"            safe_head=0xc556feaa215ae3c9719fad184d5a8a87fcfb8eadcfba89b1dd28e0bc9accd331:115485 pending_safe_head=0xc556feaa215ae3c9719fad184d5a8a87fcfb8eadcfba89b1dd28e0bc9accd331:115485 next=\"&{attributes:0xc02564d5e0 parent:{Hash:[197 86 254 170 33 90 227 201 113 159 173 24 77 90 138 135 252 251 142 173 207 186 137 177 221 40 224 188 154 204 211 49] Number:115485 ParentHash:[66 50 232 172 73 51 250 73 133 88 34 209 4 65 171 207 218 58 123 168 165 114 146 197 244 154 220 119 241 120 246 138] Time:1736719002 L1Origin:{Hash:[0 148 219 80 191 61 20 5 131 185 115 201 6 165 67 15 138 30 109 24 250 11 73 151 216 225 80 182 250 1 145 236] Number:7478146} SequenceNumber:3} isLastInSpan:true}\"\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"updated finality-data\"                  last_l1=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 last_l2=0x49856d176e0331a625979f3e90e0a32949673cd342824ced3d7e7b1d75ab920c:115486\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Sync progress\"                          reason=\"reconciled with L1\"                   l2_finalized=0x74bfd335871670d58315de4145c43c7286f5bbaa87bfc18ceeb04f4bdf92138e:114869 l2_safe=0x49856d176e0331a625979f3e90e0a32949673cd342824ced3d7e7b1d75ab920c:115486 l2_pending_safe=0x49856d176e0331a625979f3e90e0a32949673cd342824ced3d7e7b1d75ab920c:115486 l2_unsafe=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_time=1,736,762,350 l1_derived=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Generating next batch\"                  epoch=0x0094db50bf3d140583b973c906a5430f8a1e6d18fa0b4997d8e150b6fa0191ec:7478146 timestamp=1,736,719,006\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"generated attributes in payload queue\"  txs=1 timestamp=1,736,719,006\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Adding next safe attributes\"            safe_head=0x49856d176e0331a625979f3e90e0a32949673cd342824ced3d7e7b1d75ab920c:115486 pending_safe_head=0x49856d176e0331a625979f3e90e0a32949673cd342824ced3d7e7b1d75ab920c:115486 next=\"&{attributes:0xc01def65b0 parent:{Hash:[73 133 109 23 110 3 49 166 37 151 159 62 144 224 163 41 73 103 60 211 66 130 76 237 61 126 123 29 117 171 146 12] Number:115486 ParentHash:[197 86 254 170 33 90 227 201 113 159 173 24 77 90 138 135 252 251 142 173 207 186 137 177 221 40 224 188 154 204 211 49] Time:1736719004 L1Origin:{Hash:[0 148 219 80 191 61 20 5 131 185 115 201 6 165 67 15 138 30 109 24 250 11 73 151 216 225 80 182 250 1 145 236] Number:7478146} SequenceNumber:4} isLastInSpan:true}\"\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"updated finality-data\"                  last_l1=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 last_l2=0xd0c1bcb02fef875f5e569fd714c6da625a8dda0f0c6ed786b811bad3b788f36f:115487\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"Sync progress\"                          reason=\"reconciled with L1\"                   l2_finalized=0x74bfd335871670d58315de4145c43c7286f5bbaa87bfc18ceeb04f4bdf92138e:114869 l2_safe=0xd0c1bcb02fef875f5e569fd714c6da625a8dda0f0c6ed786b811bad3b788f36f:115487 l2_pending_safe=0xd0c1bcb02fef875f5e569fd714c6da625a8dda0f0c6ed786b811bad3b788f36f:115487 l2_unsafe=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388:137159 l2_time=1,736,762,350 l1_derived=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process step\"                onto_origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 attempts=0\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"can't find next L1 block info (yet)\"    number=7,481,747 origin=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Derivation process went idle\"           progress=0x21e4ef8618402cfbe497ac99719a6196d15218b4bd89754fd892858a97d68c0d:7481746 err=EOF\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"inserted block\"                         hash=0x2554490337e761e666e30882c02309e979f2e64fab1489f92490053ffefdeedc number=137,160   state_root=0x3933b9681b24c81efc9efadef531bb91bcf5468c92826ce4a071e66909cf9ebd timestamp=1,736,762,352 parent=0x9ed78b6a89ffba52328617826ddc5da8aff5dabca7b8b16d31dbe8503d737388 prev_randao=0x13f02e7ef33012922d4a7c0d794eb7818bbce9b65b8ce65c2189c29bf221cad5 fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\nt=2025-01-13T09:59:11+0000 lvl=dbug msg=\"Processed new L2 block\"                 l2_unsafe=0x2554490337e761e666e30882c02309e979f2e64fab1489f92490053ffefdeedc:137160 l1_origin=0xf0ec34a7dd42f71f7d0800a57da64ccf36cd25ee75cda4bb63ce189ea8ec6ec4:7481744 txs=1 time=1,736,762,352 seal_time=6.874986ms  build_time=1.954138243s\nt=2025-01-13T09:59:11+0000 lvl=info msg=\"sequencer successfully built a new block\" block=0x2554490337e761e666e30882c02309e979f2e64fab1489f92490053ffefdeedc:137160 time=1,736,762,352 txs=1\nt=2025-01-13T09:59:12+0000 lvl=info msg=\"creating new block\"                     parent=0x2554490337e761e666e30882c02309e979f2e64fab1489f92490053ffefdeedc:137160 l1Origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745\nt=2025-01-13T09:59:12+0000 lvl=dbug msg=\"prepared attributes for new block\"      num=137,161 time=1,736,762,354 origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 origin_time=1,736,762,280 noTxPool=false\nt=2025-01-13T09:59:12+0000 lvl=info msg=\"sequencer started building new block\"   payload_id=0x0265dd5c3b46692d l2_parent_block=0x2554490337e761e666e30882c02309e979f2e64fab1489f92490053ffefdeedc:137160 l2_parent_block_time=1,736,762,352\nt=2025-01-13T09:59:12+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9008 duration=11.938307ms\nt=2025-01-13T09:59:13+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9009 duration=\"139.124\u00b5s\"\nt=2025-01-13T09:59:13+0000 lvl=info msg=\"inserted block\"                         hash=0x880352714d68f3ecf79a51ee2d6b5f45366afc816e3e3807ef60605c92767809 number=137,161   state_root=0x8667754c7c2d878202c9ccba01caff18cff446305d36ee4d3c6fdc971a8fde7d timestamp=1,736,762,354 parent=0x2554490337e761e666e30882c02309e979f2e64fab1489f92490053ffefdeedc prev_randao=0xd4cf0f342f8856c58bcff142013a0efb2866361185a1777a4ba54920668ceb8c fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\nt=2025-01-13T09:59:13+0000 lvl=dbug msg=\"Processed new L2 block\"                 l2_unsafe=0x880352714d68f3ecf79a51ee2d6b5f45366afc816e3e3807ef60605c92767809:137161 l1_origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 txs=1 time=1,736,762,354 seal_time=7.424139ms  build_time=1.931524168s\nt=2025-01-13T09:59:13+0000 lvl=info msg=\"sequencer successfully built a new block\" block=0x880352714d68f3ecf79a51ee2d6b5f45366afc816e3e3807ef60605c92767809:137161 time=1,736,762,354 txs=1\nt=2025-01-13T09:59:14+0000 lvl=dbug msg=\"No next L1 block found, repeating current origin\" current=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 current_time=1,736,762,280 l2_head=0x880352714d68f3ecf79a51ee2d6b5f45366afc816e3e3807ef60605c92767809:137161 l2_head_time=1,736,762,354\nt=2025-01-13T09:59:14+0000 lvl=info msg=\"creating new block\"                     parent=0x880352714d68f3ecf79a51ee2d6b5f45366afc816e3e3807ef60605c92767809:137161 l1Origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745\nt=2025-01-13T09:59:14+0000 lvl=dbug msg=\"prepared attributes for new block\"      num=137,162 time=1,736,762,356 origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 origin_time=1,736,762,280 noTxPool=false\nt=2025-01-13T09:59:14+0000 lvl=info msg=\"sequencer started building new block\"   payload_id=0x029fe41447ec68e1 l2_parent_block=0x880352714d68f3ecf79a51ee2d6b5f45366afc816e3e3807ef60605c92767809:137161 l2_parent_block_time=1,736,762,354\nt=2025-01-13T09:59:14+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9010 duration=\"103.912\u00b5s\"\nt=2025-01-13T09:59:15+0000 lvl=dbug msg=\"Served optimism_syncStatus\"             conn=[::1]:47588 reqid=9011 duration=\"89.202\u00b5s\"\nt=2025-01-13T09:59:15+0000 lvl=info msg=\"inserted block\"                         hash=0xa712f21c5f40c719a3fcad52d7fd31217e71c67ed5f0e065f2eaf1aa79c3920c number=137,162   state_root=0xbd5e8009d3f3f333bb0b3d56240893be991ef1c7ea3028ddeb57087e70991f42 timestamp=1,736,762,356 parent=0x880352714d68f3ecf79a51ee2d6b5f45366afc816e3e3807ef60605c92767809 prev_randao=0xd4cf0f342f8856c58bcff142013a0efb2866361185a1777a4ba54920668ceb8c fee_recipient=0x4200000000000000000000000000000000000011 txs=1 update_safe=false\nt=2025-01-13T09:59:15+0000 lvl=dbug msg=\"Processed new L2 block\"                 l2_unsafe=0xa712f21c5f40c719a3fcad52d7fd31217e71c67ed5f0e065f2eaf1aa79c3920c:137162 l1_origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 txs=1 time=1,736,762,356 seal_time=7.184802ms  build_time=1.955305298s\nt=2025-01-13T09:59:15+0000 lvl=info msg=\"sequencer successfully built a new block\" block=0xa712f21c5f40c719a3fcad52d7fd31217e71c67ed5f0e065f2eaf1aa79c3920c:137162 time=1,736,762,356 txs=1\nt=2025-01-13T09:59:16+0000 lvl=dbug msg=\"No next L1 block found, repeating current origin\" current=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 current_time=1,736,762,280 l2_head=0xa712f21c5f40c719a3fcad52d7fd31217e71c67ed5f0e065f2eaf1aa79c3920c:137162 l2_head_time=1,736,762,356\nt=2025-01-13T09:59:16+0000 lvl=info msg=\"creating new block\"                     parent=0xa712f21c5f40c719a3fcad52d7fd31217e71c67ed5f0e065f2eaf1aa79c3920c:137162 l1Origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745\nt=2025-01-13T09:59:16+0000 lvl=dbug msg=\"prepared attributes for new block\"      num=137,163 time=1,736,762,358 origin=0x6f2d08a216be238cfdb64404d9d19a02955513e6e43d33cc3b6e6c9c1a41a080:7481745 origin_time=1,736,762,280 noTxPool=false\nt=2025-01-13T09:59:16+0000 lvl=info msg=\"sequencer started building new block\"   payload_id=0x026ff71dff721c58 l2_parent_block=0xa712f21c5f40c719a3fcad52d7fd31217e71c67ed5f0e065f2eaf1aa79c3920c:137162 l2_parent_block_time=1,736,762,356\n```\n\n**Additional context**\nI restarted the network several times, same problem. Network uptime varies\n\n\n", "CLOSED", 0, "neodiz", "2025-01-16T12:31:41Z", "2025-02-04T02:23:12Z", "2025-02-04T02:23:10Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6mcr17", 13808, "Error when running l2-rollup in app op-batcher", "\n**Bug Description**\nWhen starting the network, op-batcher constantly shows an error in the logs\n\n**Steps to Reproduce**\nI used the tutorial at https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup\n\n\n**Environment Information:**\n - Operating System: Ubuntu 20.04\n -  git          2         2.34.1\n -  go           1.21      1.22.9 \n -  node         20        22.11.0\n -  pnpm         8         9.14.2\n -  foundry      0.2.0     0.2.0\n -  make         3         4.3\n -  jq           1.6       1.6\n -  direnv       2         2.25.2\n\n**Configurations:**\nUse branch tutorials/chain\nenv from file .envrc\n`L1_RPC_KIND=debug_geth`\nconfig network use by default. Only change l2ChainID\n```\n{\n  \"l1StartingBlockTag\": \"\",\n  \"l1ChainID\": 11155111,\n  \"l2ChainID\": 42090,\n  \"l2BlockTime\": 2,\n  \"l1BlockTime\": 12,\n  \"maxSequencerDrift\": 600,\n  \"sequencerWindowSize\": 3600,\n  \"channelTimeout\": 300,\n\n  \"p2pSequencerAddress\": \"\",\n  \"batchInboxAddress\": \"\",\n  \"batchSenderAddress\": \"\",\n\n  \"l2OutputOracleSubmissionInterval\": 120,\n  \"l2OutputOracleStartingBlockNumber\": 0,\n  \"l2OutputOracleStartingTimestamp\": 1736488032,\n\n  \"l2OutputOracleProposer\": \"\",\n  \"l2OutputOracleChallenger\": \"\",\n\n  \"finalizationPeriodSeconds\": 12,\n\n  \"proxyAdminOwner\": \"\",\n  \"baseFeeVaultRecipient\": \"\",\n  \"l1FeeVaultRecipient\": \"\",\n  \"sequencerFeeVaultRecipient\": \"\",\n  \"finalSystemOwner\": \"\",\n  \"superchainConfigGuardian\": \"\",\n\n  \"baseFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\n  \"l1FeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\n  \"sequencerFeeVaultMinimumWithdrawalAmount\": \"0x8ac7230489e80000\",\n  \"baseFeeVaultWithdrawalNetwork\": 0,\n  \"l1FeeVaultWithdrawalNetwork\": 0,\n  \"sequencerFeeVaultWithdrawalNetwork\": 0,\n\n  \"gasPriceOracleOverhead\": 2100,\n  \"gasPriceOracleScalar\": 1000000,\n\n  \"enableGovernance\": true,\n  \"governanceTokenSymbol\": \"OP\",\n  \"governanceTokenName\": \"Optimism\",\n  \"governanceTokenOwner\": \"\",\n\n  \"l2GenesisBlockGasLimit\": \"0x1c9c380\",\n  \"l2GenesisBlockBaseFeePerGas\": \"0x3b9aca00\",\n  \"l2GenesisRegolithTimeOffset\": \"0x0\",\n\n  \"eip1559Denominator\": 50,\n  \"eip1559DenominatorCanyon\": 250,\n  \"eip1559Elasticity\": 6,\n\n  \"l2GenesisRegolithTimeOffset\": \"0x0\",\n  \"l2GenesisDeltaTimeOffset\": null,\n  \"l2GenesisCanyonTimeOffset\": \"0x0\",\n\n  \"systemConfigStartBlock\": 0,\n\n  \"requiredProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"recommendedProtocolVersion\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\n  \"faultGameAbsolutePrestate\": \"\",\n  \"faultGameMaxDepth\": 44,\n  \"faultGameMaxDuration\": 1200,\n  \"faultGameGenesisBlock\": 0,\n  \"faultGameGenesisOutputRoot\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"faultGameSplitDepth\": 14\n}\n```\n\n**Logs:**\n` lvl=eror msg=\"unable to get tx data\"                  err=\"adding block[0] to channel builder: converting block to batch: first transaction in block is not a deposit tx\"`\n\n**Additional context**\nThe problem occurs immediately after starting the network\n\n---\n", "CLOSED", 0, "neodiz", "2025-01-16T12:03:55Z", "2025-02-04T14:25:44Z", "2025-02-04T14:25:42Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lv3N_", 13698, "Implement add-game-type command on OP Deployer", "This command should validate the input for sane values, and define sane defaults. The exact list of validations is TBD.", "CLOSED", 0, "mslipper", "2025-01-10T18:11:10Z", "2025-02-05T17:18:07Z", "2025-02-05T17:18:06Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lpuXy", 13682, "Add SuperchainConfig and ProtocolVersions to the OPCM's Implementations struct (OPCM - Upgrade 13)", "In order to upgrade the the SuperchainConfig and ProtocolVersions contracts, their implementations will need to be deployed by `op-deployer` and added to the OPCM's `Implementations`[struct](https://github.com/ethereum-optimism/optimism/blob/opcm-up/add-deployImpls-to-fork-live/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L103).", "CLOSED", 0, "maurelian", "2025-01-10T03:12:16Z", "2025-02-05T17:02:07Z", "2025-01-27T21:16:56Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6ln8HS", 13671, "Fully remove CGT code from L1 contracts (OPCM - Upgrade 13)", "**Description**\n\nBuild on the work begun in #13589 to completely remove cgt code from L1 code paths. No further work should be done to L2 code paths.\n\nThe full set of ABI changes from CGT can be seen here: https://github.com/ethereum-optimism/optimism/pull/10143/files#diff-97745aae7f1af56cec3629873b886e53b94123dedbae6b3db26babb1ed50354b\n\nWe should remove all newly added functions (including getters) on L1 contracts. However we should minimize changes to the `initialize()` functions  (meaning it is fine to keep the `systemConfig` address as a new input to the bridge contracts, and as a state var, but it should become internal).\n\nSpecifically: \n- In [L1CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/pull/10143/files#diff-84a3b1882afce4d9a7d489bf90c61e8baaeb9446d136ecdd525bf78763bef489): \n\t- make the `systemConfig` variable internal\n\t- keep the `_systemConfig` argument\n- In [L1StandardBridge](https://github.com/ethereum-optimism/optimism/pull/10143/files#diff-ef5142838135e77c222cbb84c5fe9301f21dcbf144bac943cd5bf198eceb42cb):\n\t- make the `systemConfig` variable internal\n\t- keep the `_systemConfig` argument\n- In [SystemConfig](https://github.com/ethereum-optimism/optimism/pull/10143/files#diff-44452846fcf81b61f351175a9c6ffa9deccf64bee0d8cd1fd65163960b30e466)\n\t- remove `gasPayingToken()`\n\t- remove `isCustomGasToken()`\n\t- remove `gasPayingTokenName()`\n\t- remove `gasPayingTokenSymbol()`\n\t- remove `_setGasPayingToken()`\n\t- remove `gasPayingToken` from `Addresses` struct\n- In [OptimismPortal](https://github.com/ethereum-optimism/optimism/pull/10143/files#diff-586574f6fd69ac92f77b6fe5a96b944dc4b09e35aa9d5c95bf7b8540c48c45de): \n\t- remove `balance() `\n\t- remove `depositERC20Transaction()`\n\t- remove `setGasPayingToken()`\n\nNote that the SystemConfig should be the only contract with changes to the initializer.\n\nIn the above contracts, unused branching code, errors and events should also be removed.\n\nWhere state vars are removed a spacer should be added.\n", "CLOSED", 0, "maurelian", "2025-01-09T20:37:12Z", "2025-02-05T17:02:06Z", "2025-01-13T20:36:36Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lfQTe", 13644, "Deploy all implementations using Create2 (OPCM - Upgrade 13)", "**Context:** \n\nIf a contract's bytecode is unchanged between releases, we don't want to deploy a new implementation with identical bytecode as that increases the state diff unnecessarily.\n\n**TODO**\n\nIn deploy implementatoins: use create 2 to deploy, and if there is an address collision, keep the same implementation address as before. \n\nIn OPCM upgrade, detect when this is the case and ensure that such contracts are not upgraded.", "CLOSED", 0, "maurelian", "2025-01-08T22:02:55Z", "2025-02-05T17:11:47Z", "2025-01-16T17:18:30Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lemqn", 13642, "Update Style Guide to document new upgrades approach", "The [current content here](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/meta/STYLE_GUIDE.md#proxy-by-default) will need to be updated", "CLOSED", 0, "maurelian", "2025-01-08T20:19:01Z", "2025-02-07T13:15:22Z", "2025-02-07T13:15:21Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lSyON", 13610, "Test the service in production", "", "OPEN", 0, "ControlCplusControlV", "2025-01-07T15:48:14Z", "2025-02-05T15:50:22Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lSanH", 13606, "Add upgrade path testing for all supported chains in CI.", "", "OPEN", 0, "maurelian", "2025-01-07T15:05:42Z", "2025-02-04T14:58:38Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lMJYc", 13599, "OPCM to release 1.0.0 (OPCM - Upgrade 13)", "As part of https://github.com/ethereum-optimism/optimism/issues/13069\nwe should update the OPCM semver to 1.0.0.\n\n---\n\n> Unrelated and we can track separately, but when do we want to release 1.0.0? It could be for the holocene release (and still only supports deploys), or as part of the OPCM Upgrades release. I would advocate for the latter, it feels simpler to call that 1.0.0 since it's a bigger change a new paradigm\n\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/optimism/pull/13561#discussion_r1904623268_\n            ", "CLOSED", 0, "maurelian", "2025-01-06T20:50:46Z", "2025-02-05T17:02:28Z", "2025-01-30T19:44:39Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lJ9wU", 13593, "Update FMA status to 'implementing actions' (OPCM - Upgrade 13)", "[See PR](https://github.com/ethereum-optimism/design-docs/pull/173).", "CLOSED", 0, "maurelian", "2025-01-06T15:04:45Z", "2025-02-05T17:02:12Z", "2025-01-22T01:23:50Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lJoQF", 13592, "Governance proposal document for MT cannon release", "We need to create and share MT cannon Gov post document and share it publicly for reviews.", "CLOSED", 0, "BlocksOnAChain", "2025-01-06T14:21:00Z", "2025-02-06T15:26:43Z", "2025-02-06T15:26:41Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lJnQK", 13591, "Public release for our MT cannon audit results", "In order to ship MT cannon to mainnet, we need to have a public audit report from the external audits that we did, so we can include it in our FMA and Gov Proposal docs.", "CLOSED", 0, "BlocksOnAChain", "2025-01-06T14:18:51Z", "2025-02-03T08:58:04Z", "2025-02-03T08:58:04Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6lJfhC", 13589, "Add temporary reverts to code paths using a custom gas token (OPCM - Upgrade 13)", "**Context:**\n\nThe L1 contracts currently contain code that supports a custom gas token implementation, however the standard L2 genesis project (#12302) is still required to support CGT properly. \n\nWe do not wish to release this dead code without protections.\n\n**Spec:**\n\nA new PR is requested which should:\n\n1. Cause CGT code paths to revert if the token is not ETH.\n2. Ideally prevent the system from being deploy if the token is not ETH.\n\nMy intuition is that the affected contracts should be limited to the `SystemConfig` and `OptimismPortal`.", "CLOSED", 0, "maurelian", "2025-01-06T14:02:26Z", "2025-02-05T17:02:02Z", "2025-01-08T20:10:39Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6k-wJM", 13570, "op-node: Fix compatibility with EIP-4444 enabled L1 node", "Historic blocks or receipts of L1 node shouldn't be the requirement for default sync mode ( snap sync ) and seems like op-node would throw when Rollup L1 Genesis Blockhash isn't available from L1 node ( when EIP-4444 is enabled, tested with Erigon3 `--prune.mode=\"minimal\"` ).\n\nWhen error is returned from `cfg.CheckL1GenesisBlockHash` it should be logged as error not throwing it ( or allow failure with additional flags ). If the error could be ignored it would be possible to run a minimal L1 node enough to follow the tip of L1 and L2, without having much disk space ( only 370 GB of storage for L1 would be required though )", "OPEN", 0, "tornadocontrib", "2025-01-03T17:17:15Z", "2025-02-04T13:52:55Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6kd1jY", 13534, "op-proposer TX Error", "hihi team, pls help\nI get this tx error when run op-proposer\n\nhttps://sepolia.etherscan.io/tx/0xdcc1259efd7cb6b131377893e69ec8c6121ad8b720f45355e41ae7e3ccdc8741\n\nIt looks like the address obtained by gameType=0 is empty during create( ). How do I configure this?", "CLOSED", 0, "AphobiaCat", "2024-12-26T05:10:08Z", "2025-02-04T01:57:14Z", "2025-02-04T01:57:12Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6j19Gj", 13473, "OPCM is defined as proxied in Deploy.s.sol", "For accuracy opcm shouldn't be structured in the code as a proxied contract. See this [line of code](https://github.com/ethereum-optimism/optimism/blob/b6cf8ee2dbf349932fe30bca47d60e52ea083f21/packages/contracts-bedrock/scripts/deploy/Deploy.s.sol#L132).\n\nOPCM is not proxied and has a new instance for every new release of `op-contracts/vX.Y.Z`.", "CLOSED", 0, "blmalone", "2024-12-18T22:01:25Z", "2025-02-05T17:34:22Z", "2025-02-05T17:34:22Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6jgVhP", 13421, "DeputyPauseModule: alerting and runbooks", "Need to configure alerting thresholds and create corresponding runbooks.", "CLOSED", 0, "smartcontracts", "2024-12-16T19:04:53Z", "2025-02-04T19:32:48Z", "2025-02-04T19:32:48Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6jgQSQ", 13420, "DeputyPauseModule: monitoring", "Install monitoring for the following:\n\n- Any usage of the Deputy key in the DeputyPauseModule\n- Any other usage of the Deputy key\n- DeputyGuardianModule installation issues", "CLOSED", 0, "smartcontracts", "2024-12-16T18:53:21Z", "2025-02-04T19:32:40Z", "2025-02-04T19:32:40Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6jgMFP", 13418, "DeputyPauseModule: implementation and unit tests", "Tracking issue for merging the implementation and unit tests in for the DeputyPauseModule.", "CLOSED", 0, "smartcontracts", "2024-12-16T18:43:52Z", "2025-02-04T19:32:40Z", "2025-02-04T19:32:40Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6jeXmg", 13411, "Expand set of tests run in forked upgrade path (OPCM - Upgrade 13)", "Context: https://github.com/ethereum-optimism/optimism/pull/13323#discussion_r1886983957", "CLOSED", 0, "maurelian", "2024-12-16T15:10:09Z", "2025-02-06T17:31:57Z", "2025-02-06T17:31:57Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6jT9ny", 13401, "CI job that runs the upgrade tests for all base chain <> OP Chain pairings (OPCM - Upgrade 13)", "A daily CI job should run to test the upgrade process, for all OP Chain on mainnet and sepolia, for which upgrades are done by the OP Security Council.\n\n", "CLOSED", 0, "maurelian", "2024-12-14T14:36:22Z", "2025-02-05T17:02:11Z", "2025-01-16T17:19:56Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6jQYbf", 13388, "Deprecate snake cased `OPCM.OUTPUT_VERSION()` method. (OPCM - Upgrade 13)", "The OPCM has a public get [OUTPUT_VERSION()](https://github.com/ethereum-optimism/optimism/blob/sc/deputy-pause-module/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L122). \n\nWe'll need to replace that with a camelCased function:\n\n```solidity\nfunction outputVersion() returns (uint256) {\n  return OUTPUT_VERSION;\n}\n```\n\nSince the OPCM is not upgradeable, so each release is at a new address, I think we can just remove the old getter instead of putting a deprecation notice comment on it.", "CLOSED", 0, "maurelian", "2024-12-13T18:40:27Z", "2025-02-05T17:02:15Z", "2025-01-16T18:45:10Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6iye40", 13339, "Support for optional block number to `just test-upgrade` (OPCM - Upgrade 13)", "Context: https://github.com/ethereum-optimism/optimism/pull/13323#discussion_r1878639679", "CLOSED", 0, "maurelian", "2024-12-10T20:39:23Z", "2025-02-05T17:02:00Z", "2024-12-19T14:50:59Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6imZrf", 13322, "interop: Supervisor Derivation Control", "From this document: https://github.com/ethereum-optimism/design-docs/pull/171/files\n\nDecomposed into: https://www.notion.so/oplabs/tasks-to-make-150f153ee162809e981ac7d30c0bfae2?showMoveTo=true&saveParent=true\n\n# What\nThe Supervisor should tell the \"sync nodes\" when to take on new L1 data, and when to process derivation. The Supervisor should also be positioned to tell the sync nodes to reset to a specific point.\n\nThe two parents of this feature request are tracked here:\n- https://github.com/ethereum-optimism/optimism/issues/13181 : The Supervisor tracking L1 directly and using it to drive itself\n- https://github.com/ethereum-optimism/optimism/issues/13182 : The client<>server connection for Nodes to be driven by a Supervisor.\n\nNow, we need to join these two sides of work by *using* the L1 data we are sourcing to *control* the sync nodes.\n\n# Why\nIn service of having the Supervisor control its own internal consistency by using \"Sync Nodes\" as controlled derivation pipelines, the Supervisor should leverage new functionalities to drive the sync nodes derivation processes.\n\n# How\n- Add a new resource to the Supervisor representing the sync nodes and attach it to the backend, or expand an existing resource (like chain processors) to become representations of sync-nodes.\n- Have the L1 Processor trigger a process or otherwise direct the sync nodes to synchronize against a new L1\n  - The L1 head should be passed down as part of a `TryDeriveNext` call (new API for Sync Nodes)\n  - The `TryDeriveNext` return should be whatever new L2 block is derived, if any\n  - If the derivation yielded an L2 block, repeat derivation again with the same L1\n  - As new L2s come back, record them in the derivation databases\n\nAlso to implement:\n- Reset (prestate): directs the Sync Node to reset back to a specified prestate, which skips all the L1 traversal work the node does today.\n- `NewSafetyLevels`: which just directly informs the Sync Nodes of the latest safety levels, to be propagated through its derivers system.\n\nIf implementing these APIs are helpful to the core task of driving derivation, then they should be included. But if the scope of this task is large enough just with `TryDeriveNext`, these other APIs can be split out into parallel work.", "CLOSED", 0, "axelKingsley", "2024-12-09T18:56:56Z", "2025-02-04T13:31:49Z", "2025-02-04T13:31:48Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6iVXHf", 13291, "Unable to create the rollup node", "**Bug Description**\nAccording to this guide https://docs.optimism.io/builders/node-operators/tutorials/testnet, \nI built op-node from the source code:\n```\nroot@build:/tmp/optimism# /usr/local/bin/op-node -version\nop-node version v1.10.0-rc.2-910c9ade-1732025300\n```\n\nand geth:\n```\nroot@build:/tmp/optimism# /usr/local/bin/geth -version\ngeth version 1.101411.2-rc.2-3dd9b027-20241119\n```\n\nThen, I started op-geth:\nroot@build:/tmp/optimism# systemctl cat op-geth\n```\n# /etc/systemd/system/op-geth.service\n[Unit]\nDescription=OP Sepolia Execution Client Geth\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nUser=root\nExecStart=/usr/local/bin/geth \\\n--http \\\n--http.port=8545  \\\n--http.addr=localhost \\\n--authrpc.addr=localhost  \\\n--authrpc.jwtsecret=/etc/op-geth/jwt.txt \\\n--verbosity=3 \\\n--rollup.sequencerhttp=https://sepolia-sequencer.optimism.io/ \\\n--op-network=op-sepolia \\\n--datadir=/var/lib/op-geth\n\n[Install]\nWantedBy=multi-user.target\n```\n\n\nThen, I attempted to start op-node:\n```\nroot@build:/tmp/optimism# cat /etc/systemd/system/op-node.service\n[Unit]\nDescription=OP Sepolia Node\nAfter=network-online.target op-geth.service\nWants=network-online.target\n\n[Service]\nUser=root\nExecStart=/usr/local/bin/op-node \\\n--l1=http://127.0.0.1:8545 \\\n--l1.rpckind=basic \\\n--l1.beacon=http://beacon:8080 \\\n--l2=ws://127.0.0.1:8551 \\\n--l2.jwt-secret=/etc/op-node/jwt.txt \\\n--network=op-sepolia \\\n--syncmode=execution-layer \\\n--p2p.discovery.path=/var/lib/op-node/opnode_discovery_db \\\n--p2p.peerstore.path=/var/lib/op-node/opnode_peerstore_db \\\n--p2p.priv.path=/var/lib/op-node/opnode_p2p_priv.txt\n\n[Install]\nWantedBy=multi-user.target\n```\n\nHowever, I encountered the following error:\n```\nDec 06 16:34:19 build.test.net op-node[26103]: t=2024-12-06T16:34:19+0000 lvl=info msg=\"Initializing rollup node\" version=v1.10.0-rc.2-910c9ade-1732025300\nDec 06 16:34:19 build.test.net op-node[26103]: t=2024-12-06T16:34:19+0000 lvl=error msg=\"Error initializing the rollup node\" err=\"failed to init L1: failed to validate the L1 config: incorrect L1 RPC chain id 11155420, expected 11155111\"\nDec 06 16:34:19 build.test.net op-node[26103]: t=2024-12-06T16:34:19+0000 lvl=crit msg=\"Application failed\" message=\"failed to setup: unable to create the rollup node: failed to init L1: failed to validate the L1 config: incorrect L1 RPC chain id 11155420, expected 11155111\"\n```\n\n**Steps to Reproduce**\nFollow this guide:\nhttps://docs.optimism.io/builders/node-operators/tutorials/testnet\n\n**Expected behavior**\nSuccessful launch of op-node\n\n**Environment Information:**\n - Operating System: Ubuntu 22.04\n - Package Version (or commit hash): op-node version v1.10.0-rc.2-910c9ade-1732025300, geth version 1.101411.2-rc.2-3dd9b027-20241119\n\n**Configurations:**\n```\nExecStart=/usr/local/bin/geth \\\n--http \\\n--http.port=8545  \\\n--http.addr=localhost \\\n--authrpc.addr=localhost  \\\n--authrpc.jwtsecret=/etc/op-geth/jwt.txt \\\n--verbosity=3 \\\n--rollup.sequencerhttp=https://sepolia-sequencer.optimism.io/ \\\n--op-network=op-sepolia \\\n--datadir=/var/lib/op-geth\n```\n\n```\n/usr/local/bin/op-node \\\n--l1=http://127.0.0.1:8545 \\\n--l1.rpckind=basic \\\n--l1.beacon=http://beacon:8080 \\\n--l2=ws://127.0.0.1:8551 \\\n--l2.jwt-secret=/etc/op-node/jwt.txt \\\n--network=op-sepolia \\\n--syncmode=execution-layer \\\n--p2p.discovery.path=/var/lib/op-node/opnode_discovery_db \\\n--p2p.peerstore.path=/var/lib/op-node/opnode_peerstore_db \\\n--p2p.priv.path=/var/lib/op-node/opnode_p2p_priv.txt\n```\n\n**Logs:**\n```\nDec 06 16:34:19 build.test.net op-node[26103]: t=2024-12-06T16:34:19+0000 lvl=info msg=\"Initializing rollup node\" version=v1.10.0-rc.2-910c9ade-1732025300\nDec 06 16:34:19 build.test.net op-node[26103]: t=2024-12-06T16:34:19+0000 lvl=error msg=\"Error initializing the rollup node\" err=\"failed to init L1: failed to validate the L1 config: incorrect L1 RPC chain id 11155420, expected 11155111\"\nDec 06 16:34:19 build.test.net op-node[26103]: t=2024-12-06T16:34:19+0000 lvl=crit msg=\"Application failed\" message=\"failed to setup: unable to create the rollup node: failed to init L1: failed to validate the L1 config: incorrect L1 RPC chain id 11155420, expected 11155111\"\n```\n\n**Additional context**\n\n---", "CLOSED", 0, "makuartur", "2024-12-06T16:53:37Z", "2025-02-04T14:21:16Z", "2025-02-04T14:21:14Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6iNUvX", 13271, "Expose saltMixer via intent file", "Right now the salt mixer is not exposed via the intent file. The current behavior tries to read it from state.json and it if doesn't exist it'll generate a random value. This was discussed in more depth on [discord](https://discord.com/channels/1244729134312198194/1273519241076670526/1314283100536311809).", "CLOSED", 0, "blmalone", "2024-12-05T21:02:58Z", "2025-02-04T01:57:52Z", "2025-02-04T01:57:51Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6iEe-u", 13256, "EVM Engineering: standardized custom natspec", "We have various custom natspec tags all over the place. Some of these have unclear value. Let's have a clear story as to what the value of the custom natspec is and when it should be used.", "OPEN", 0, "smartcontracts", "2024-12-05T01:01:48Z", "2025-02-04T01:59:14Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6iEetH", 13255, "EVM Engineering: standardize comment styling", "I'd like to figure out a sane standard for comments. Our comments are pretty decent but some of the styling is all over the place. We can easily enforce this with semgrep. Needs a good proposal for what this styling should be.", "OPEN", 0, "smartcontracts", "2024-12-05T01:00:22Z", "2025-02-04T01:59:14Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6iCW97", 13228, "Checklist for shipping contracts to prod (OPCM - Upgrade 13)", "We should start working on checklist for shipping contracts to prod. \n\nThe idea here is that after OPCM Upgrades it should be really easy for protocol team, proofs team, etc to know all steps and requirements to write and ship contract upgrades.\n\nA good starting point based on a recent exchange with @ControlCplusControlV: \n\n\n1. Actually write the contract\n1. Write a specific interface for it (unless it can be generated?)\n1. Contract in tests should be deployed in `{SpecificTest}.t.sol -> CommonTest -> Setup`\n1. Update `DeployImplementations.s.sol`, `DeployOpChain.s.sol`, and `Deploy.s.sol` as necessary.\n\n[This comment](https://github.com/ethereum-optimism/optimism/pull/13323#discussion_r1884665891) is also helpful to document how tests might need to change.\n\n\n\n", "OPEN", 0, "maurelian", "2024-12-04T18:38:51Z", "2025-02-05T17:02:32Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gqavH", 13103, "Cannon: Coverage of non-forge tests for solidity contracts", "Some contracts in our repository (e.g., [MIPS64.sol](https://github.com/ethereum-optimism/optimism/blob/4f8e9b519c9d10535d438cfe617f3f014df12d01/packages/contracts-bedrock/src/cannon/MIPS64.sol)) are tested outside of forge in a go-ethereum (geth) execution environment.\n\nFor Cannon contracts specifically, an EVM is [instantiated](https://github.com/ethereum-optimism/optimism/blob/4f8e9b519c9d10535d438cfe617f3f014df12d01/cannon/mipsevm/testutil/evm.go#L93C1-L129C2) with pre-deployed contracts using forge-generated artifacts. Cannon uses differential testing to verify that the Solidity and offchain VMs produce identical results.\nThese differential tests are implemented as standard Go tests using the EVM setup described above. This is done for ease of writing tests as Go is a much faster and more expressive than forge for testing VMs. The downside of using Go is that we don't have a way to easily figure out how much of the Solidity VMs these Go tests cover.\n\nTo solve this, we need a Go tool/package that can:\n\n1. Take forge/solc artifacts and an EVM execution trace as input\n2. Generate lcov-formatted coverage data as output\n\nIdeally, this package is implemented as an [EVM tracing hook](https://github.com/ethereum/go-ethereum/blob/915248cd6bf14b9d1b29db182375bc456d4ef868/core/tracing/hooks.go#L174) so that it can easily be slotted into the cannon EVM driver.\n\nThis package can then be later used to generate coverage data from Cannon's Go tests. However, the follow up is out of scope of this ticket.", "OPEN", 0, "Inphi", "2024-11-26T17:13:09Z", "2025-02-04T02:00:37Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gfWUX", 13092, "op-challenger: Disable moves for permissioned games", "op-challenger monitors permissioned games so it can resolve them and reclaim bonds.  It also checks if it should perform moves even though it typically isn't the CHALLENGER and so its moves would be rejected. We could reduce the number of L1 RPC calls made significantly if the challenger only checked what steps to perform if it's tx sender was the authorised CHALLENGER role for permissioned games.", "OPEN", 0, "ajsutton", "2024-11-25T23:25:49Z", "2025-02-04T02:27:51Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdlht", 13079, "Ensure tests run against both the fresh and upgraded system (OPCM - Upgrade 13)", "Update deployment scripts to generate both a fresh system, and one which upgrades from an op-deployer generated version of the previous system.\n", "CLOSED", 0, "maurelian", "2024-11-25T20:25:59Z", "2025-02-05T17:02:00Z", "2024-12-19T14:50:33Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdjL5", 13078, "New `opcm.upgrade()` method (OPCM - Upgrade 13)", "As part of the release process, the associated implementation contracts and a new OPCM, will be deployed.\n\nThe Upgrade Controller (which MUST be a Safe), will `DELEGATECALL` the `OPCM.upgrade()` function,\nproviding the address of the `SuperchainProxyAdmin` and a list of the `SystemConfig` contracts for the\nOP Chains to be upgraded.\n\nThus the high level logic for upgrading a contract should be roughly as follows:\n\n```solidity\n// Some upgrades will not require any new values\nstruct NewChainConfig {\n  address newValues;\n  address disputeGameBlueprint;\n}\n\nAddresses immutable implementations;\n\nconstructor(Addresses _implementations) {\n  implementations = _implementations;\n}\n\n/// @notice This function is intended to be DELEGATECALLed by the chain's Upgrade Controller, therefore it\n///         must not read or write from storage, and should receive all required data as calldata.\nfunction upgrade(SuperchainProxyAdmin _admin, ISystemConfig[] _systemConfigs, NewChainConfig[] _newConfigs) public {\n  for(uint i=0; i< systemConfigs.length; i++) {\n    // Read the `Addresses` struct from each `SystemConfig` in the `systemConfigs` mapping.\n    // For each entry in the `Addresses` struct:\n      // 1. Call the appropriate `SuperchainProxyAdmin.upgradeAndCall()` function to reset the initialized slot.\n      // 2. Call the appropriate `SuperchainProxyAdmin.upgradeAndCall()` function to update the\n      //    implementation and call `upgrade()` on the contract.\n      // 3. For non-MCP compliant dispute game contracts, call `setImplementation()` and update the `AnchorStateRegistry`.\n  }\n  // run safety assertions to validate the upgrade\n}\n```\n\nTo enumerate the full flow:\n\n1. Deploy new OPCM contract, which contains:\n   1. `deploy()` and `upgrade()` methods to deploy new chains and ugprade existing chains\n   1. immutables pointing to all new implementation contracts and shared config (e.g. a new contract).\n1. For each new implementation an upgrade call will be executed via the `SuperchainProxyAdmin`\n1. A Safe will `DELEGATECALL` to the `OPCM.upgrade()` method, which MUST be `pure` for safety purposes.\n1. A two step upgrade is used where the first upgrade is to an `InitializerResetter` which resets\n   the `initialized` value, then the implementation is updated to the final address and `upgrade()`\n   is called.\n\n\n**Notes:**\n\n- We should identify measures for ensuring the OPCM is nearly stateless, and the `upgrade()` function\n  should not read or write from its own storage.", "CLOSED", 0, "maurelian", "2024-11-25T20:21:07Z", "2025-02-05T17:02:09Z", "2025-01-27T18:36:11Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdgSh", 13077, "`-rc` is removed when `upgrade()` is called by the Upgrade Controller. (OPCM - Upgrade 13)", "\n\n```solidity\ncontract OPCM {\n    string private release = \"op-contracts/vX.Y.Z\";\n    bool public isRc = true;\n\n\tfunction release() external view returns (string memory) {\n\t    return isRc ? string.concat(release, \"-rc\") : release;\n\t}\n\n\n    function upgrade() external {\n        isRc = false;\n        // upgrade logic here\n    }\n}\n```", "CLOSED", 0, "maurelian", "2024-11-25T20:15:10Z", "2025-02-05T17:02:14Z", "2025-01-22T21:54:36Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdfzV", 13076, "New `release()` getter to represent the release (OPCM - Upgrade 13)", "Just like the `version()` getters, but this will only be incremented once per release, and will be in sync with the `op-contracts` version number.", "CLOSED", 0, "maurelian", "2024-11-25T20:14:08Z", "2025-02-05T17:02:03Z", "2025-01-15T14:42:12Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdWms", 13074, "New `InitializedResetter` contract (OPCM - Upgrade 13)", "Following #13071, we will be able to simplify the process of resetting contracts `initialized` value, as they will all use the same slot. Therefore a purpose build version of the `StorageSetter` can be implemented. \n\n```\ncontract InitializedResetter {\n\n\t// keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n\tbytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\t\n\tfunction reset() external {\n\t    // Write 0 to the initializer slot\n\t    assembly {\n\t        sstore(INITIALIZABLE_STORAGE, 0)\n\t    }\n\t}\n}\n```\n\nNote: this won't work until after the Isthmus upgrade.", "CLOSED", 0, "maurelian", "2024-11-25T19:55:27Z", "2025-02-05T17:02:29Z", "2025-01-12T01:26:47Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdWlK", 13073, "Add all necessary contracts to the SystemConfig\u2019s `Addresses` struct (OPCM - Upgrade 13)", "The OPCM uniquely identifies each OP Chain by its `SystemConfig`. For upgrades the OPCM will retrieve the `Addresses` struct from the `SystemConfig` to identify all contracts it needs to interact with during the upgrade process.\n\nCurrently that struct is lacking certain contracts which are required, including: \n- AddressManager\n- DelayedWeth(s) \n\t- although these might be best retrieved by querying: `gameImpl(DisputeGameFactory.gameImpls(n)).weth()`\n\n\nA new getter should also be added to the `SystemConfig` to retrieve the full `Addresses` struct in a single call.\n", "CLOSED", 0, "maurelian", "2024-11-25T19:55:24Z", "2025-02-05T17:02:01Z", "2025-01-07T20:27:16Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdWjD", 13072, "Add an `upgrade()` function to all L1 contracts (OPCM - Upgrade 13)", "Every L1 contract will get a new function alongside `initialize()`: \n\n```\nfunction upgrade() external initialize {}\n```\n\nFor most contracts it will be empty unless the forthcoming upgrade is adding new values to storage.\n\nFor contracts which have a non-empty `upgrade()` method\nWe will need a mechanism to identify when an L1 release has occurred which causes these functions to become a 'no-op'. They should be reset at that time.", "CLOSED", 0, "maurelian", "2024-11-25T19:55:20Z", "2025-02-05T17:02:04Z", "2025-01-15T14:45:17Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdWXL", 13071, "Vendor in OZ V5 `Initializable` implementation (OPCM - Upgrade 13)", "1. Copy the source of [Initializable.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.2/contracts/proxy/utils/Initializable.sol) into `src/vendor/Initializable-v5.sol`.\n2. Change the pragma version in that file to one that is currently supported by the monorepo.\n3. IMO we do not need to write tests for a cleanly vendored in dep.\n4. Update all initializable contracts to use this version.\n\t- Spacers will need to be added to ensure that the storage layout is otherwise unaffected.\n5. `ForgeArtifacts.getInitializedSlot()` can now be deleted and can be replace by an entry in `Constants.sol`. \n\nNote that L2 contracts which inherit from a shared base will also have their storage layout modified.", "CLOSED", 0, "maurelian", "2024-11-25T19:55:09Z", "2025-02-05T17:02:05Z", "2025-01-15T14:48:20Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gdUX6", 13070, "OPCM: New `addGameType()` method. (OPCM - Upgrade 13)", "OPCM needs a new `addGameType()` method which will orchestrate the steps required to add a new game type to a chain.\n\n**Rough spec:**\n\nLike `upgrade()` this method will be delegatecalled by the chains upgrader, therefore it will have no authorization on it.\n\nThe new method will:\n1. deploy the `FaultDisputeGame` contract for that chain\n1. setup the `DelayedWethProxy` for the new game\n1. Reinitialize the `AnchorStateRegistry` to add the new game type (the prestate hash will be provided as an input to `addGameType()`, so that it can be generated via existing processes).", "CLOSED", 0, "maurelian", "2024-11-25T19:51:24Z", "2025-02-05T17:02:14Z", "2025-01-12T00:50:17Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gPpg3", 13058, "EVM Engineering: stylistic cleanup", "Isthmus is going to contain a lot of tiny changes to a lot of contracts, so we're also going to include a general stylistic cleanup. Everything will get nice and tidy again with things like comment and import formatting. This is a tracking issue that keeps track of the various PRs that make these changes.\n\n- #13057 ", "OPEN", 0, "smartcontracts", "2024-11-24T21:43:15Z", "2025-02-05T14:56:59Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gO_2e", 13057, "EVM Engineering: contract import style enforcement checks", "Opened a PR here that cleans up imports into our standard style where contracts, libraries, and interfaces are sorted nicely. It's useful to be able to quickly understand what's being imported but there's no automatic enforcement on this style. We don't like having styles that aren't enforced automatically!\n\nUsing `forge fmt` with the `sort_imports` option doesn't really work here because that option sorts alphabetically and not by import *type* which is generally way more useful when understanding what's being used in the contract.\n\nA good tool here would live inside of `scripts/checks`. We need to be careful about how to implement this because the logic isn't immediately obvious for edge cases like a contract and an interface being imported from the same place. My recommendation for now is that if multiple things are imported from the same file then we use the type of the very first import to determine how to classify that import. It usually works well enough.\n\nImport groups are:\n\n- Contracts (whenever a `contract` is imported)\n- Libraries (whenever a `library` is imported)\n  - Errors count as libraries\n- Interfaces (whenever an `interface` is imported)\n- Scripts (whenever you import from the `scripts` folder)\n- Testing (whenever you import from the `testing` folder)\n\nScripts and Testing takes precedent over the rest. E.g., anything in the `scripts` folder should be under Scripts regardless of whether it's a contract, library, or interface.", "OPEN", 0, "smartcontracts", "2024-11-24T19:47:00Z", "2025-02-04T19:32:27Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6gA15O", 13043, "Standard L2 Genesis: Review and address audit findings", "https://github.com/MiloTruck/cgt-l2config-audit/issues", "OPEN", 0, "maurelian", "2024-11-22T21:08:27Z", "2025-02-04T15:12:19Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6f_NZd", 13038, "Standard L2 Genesis: Add setFeeVaultConfig calls to SystemConfig.init", "Implemented in this PR which will need a rebase: https://github.com/ethereum-optimism/optimism/pull/12821", "OPEN", 0, "maurelian", "2024-11-22T18:22:48Z", "2025-02-04T15:12:10Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6eRssB", 12915, "`forge script scripts/deploy/Deploy.s.sol:Deploy` no longer works when rpc is specified", "This is the command `make devnet-up` uses to generate L1 allocs([source](https://github.com/ethereum-optimism/optimism/blob/2acb4973cbce8709a15d009b050e9abd701bfcf8/bedrock-devnet/devnet/__init__.py#L139)):\n\n```\nDEPLOY_CONFIG_PATH=deploy-config/devnetL1-template.json forge script scripts/deploy/Deploy.s.sol:Deploy --sig \"runWithStateDump()\" \"--sender\" \"0x90F79bf6EB2c4f870365E785982E1f101E93b906\"\n```\n\nwhich works.\n\nBut if you also specify `--rpc-url`(sepolia in my case), it'll error out like this:\n\n![Image](https://github.com/user-attachments/assets/c6e1fcca-d6a9-415e-a3a6-1564260542f3)\n", "CLOSED", 0, "zhiqiangxu", "2024-11-13T13:05:57Z", "2025-02-04T21:09:13Z", "2025-02-04T21:09:13Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6dV-vG", 12861, "Standard L2 Genesis: Consider renaming the `uprgrader` role", "Ref this discussion: https://github.com/ethereum-optimism/optimism/pull/12746/files#r1831403886", "OPEN", 0, "maurelian", "2024-11-07T03:47:14Z", "2025-02-04T15:12:09Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6cIiFv", 12708, "[Standard L2 Genesis] Enable generation of the L2 Genesis file from previous releases.", "Ultimately this should be moved to the `superchain-registry`, but for now it will need to be done by tracking bytecode in a solidity library.\r\n\r\nAs [outlined here](https://github.com/ethereum-optimism/optimism/blob/feat/holocene-contracts/packages/contracts-bedrock/scripts/L2Genesis.s.sol#L55): \r\n\r\nThe genesis script should work as follows:\r\n1. check to see if a fork is configured\r\n2. if no, use dev bytecode with `vm.getDeployedCode()`\r\n3. if yes, use the library to get the hardcoded bytecode", "OPEN", 0, "maurelian", "2024-10-28T20:33:27Z", "2025-02-04T15:12:08Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6b22FZ", 12655, "Standard Genesis: L1 contracts use OZ v5 Initializable", "Since we are moving the initializable slot around already, now is a good time to upgrade to OZ's v5 [Initializable](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.2/contracts/proxy/utils/Initializable.sol#L4), which uses unstructured storage.\r\n\r\nA spacer will be required to maintain the layout safely.", "OPEN", 0, "maurelian", "2024-10-25T18:27:22Z", "2025-02-04T15:12:08Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6byynN", 12645, "EVM Engineering: propose moving type files into a types folder", "Just like #12642 except moving `XTypes.sol` files into a `types/` top-level folder. Same basic idea. Needs a design doc and implementation if we agree to do this.", "OPEN", 0, "smartcontracts", "2024-10-25T11:00:42Z", "2025-02-04T19:32:25Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bydhl", 12643, "EVM Engineering: propose moving dispute/cannon contracts to appropriate folders", "Contracts within the `dispute` and `cannon` folders are L1 contracts but live in distinct folders for no clear reason. I propose that we should consider one of two things:\r\n\r\n1. We move these contracts into the L1 folder just like any other contract\r\n2. We add some new subfolders to the L1 folder to organize things like `L1/cannon`, `L1/dispute`, `L1/bridge`, `L1/core` etc etc\r\n\r\nTasks here:\r\n- [x] Open a design doc with both of these options presented (also third option, don't move the contracts)\r\n- [ ] Figure out what to do\r\n- [ ] If we make a decision, execute on it", "OPEN", 0, "smartcontracts", "2024-10-25T10:21:06Z", "2025-02-04T19:32:25Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bya0b", 12642, "EVM Engineering: propose moving error files into an errors folder", "We have a variety of files that only exist to define errors. I think we should move these into a top-level `errors` folder outside of the `libraries` folder. Errors aren't libraries, so they don't really belong there. It'll be a nice cleanup.\r\n\r\nTasks here:\r\n- [x] Propose this change in `design-docs`\r\n- [ ] Execute on this change if approved", "OPEN", 0, "smartcontracts", "2024-10-25T10:15:56Z", "2025-02-04T19:32:24Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bvowR", 12634, "EVM Engineering: propose always using disableInitializers in constructors", "`AnchorStateRegistry` uses `_disableInitializers()` to stop people from initializing the constructor. I like this better than the previous pattern of actually calling the initializer since it's less code and less stuff to change when the initializer changes. I'd like to propose that we use this pattern everywhere.\r\n\r\nTasks for this issue:\r\n- [x] Propose this change in `design-docs`\r\n- [ ] Implement the change if the proposal is accepted", "CLOSED", 0, "smartcontracts", "2024-10-25T03:09:30Z", "2025-02-04T19:33:09Z", "2025-02-04T19:33:09Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bmMQo", 12614, "Add multisig broadcaster type", "We need a way to manage upgrades for chains that use a multisig like OP Mainnet. To do this, we'll need a special broadcaster type for multisig transactions. This broadcaster will aggregate broadcasts, then output a Gnosis SAFE transaction JSON for future execution.\n\nAs part of this, we can also add a parameter to the intent to transfer ownership over the L1 system to an address of the user's choice.\n\nDoD:\n\n- Add support for final address transfer step.\n- Implement new broadcaster type\n- Integrate new broadcaster type", "CLOSED", 0, "mslipper", "2024-10-24T05:08:25Z", "2025-02-05T17:18:51Z", "2025-02-05T17:18:49Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bWhjq", 12580, "Standard L2 Genesis: Semgrep Rule to ensure all predeploys are non-initializable", "https://github.com/ethereum-optimism/design-docs/pull/97/files#r1790854263", "OPEN", 0, "maurelian", "2024-10-22T20:02:09Z", "2025-02-04T15:12:07Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bWgFL", 12579, "Standard L2 Genesis: Prevent start block misconfiguration", "From @tynes [comment](https://github.com/ethereum-optimism/design-docs/pull/97#issuecomment-2429203839):\r\n\r\n> Noticed something here: ethereum-optimism/optimism@dcdf2b7/op-node/rollup/types.go#L43\r\n\r\n> The op-node starts deriving on the L1 block after what is in its config. This means we need `SystemConfig.startBlock() - 1` rather than the start block itself. Two options on how to handle this:\r\n\r\n1. Have the genesis generation script fill in start block - 1 into the rollup config\r\n1. Make the starting L1 block be optional in the rollup config and use the startBlock() value as the starting point if its not present\r\n\r\nI lean towards the second, it removes config overhead. ", "OPEN", 0, "maurelian", "2024-10-22T19:59:35Z", "2025-02-04T15:12:07Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bWezO", 12578, "Standard L2 Genesis: Prevent exceeding the L2BlockGasLimit - (MaxResourceLimit - L1InfoGasLimit) buffer in the future.", "look for an off-chain testing approach to ensure that setConfig calls do not lead to exceeding the L2 gas limit. \r\n\r\n[More context](https://github.com/ethereum-optimism/design-docs/pull/97#discussion_r1811253276).", "OPEN", 0, "maurelian", "2024-10-22T19:57:17Z", "2025-02-04T15:12:06Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6bDU78", 12541, "Guide me to deploy L2 with OPTIMISM in testnet?", "Is there any current installation manual (since the one on the web is not working, and only applies to development, I WANT THE PRODUCTION FORM) or reference that can guide me to deploy L2 with OPTIMISM in testnet? If you could give me some feedback I would appreciate it.", "CLOSED", 0, "AgiletechDev", "2024-10-21T05:04:59Z", "2025-02-04T02:01:59Z", "2025-02-04T02:01:58Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6aZPkH", 12478, "EVM Engineering: Standardize a custom error convention", "Small tradeoffs between a few, let's make a decision and avoid bikeshedding too much on this. See discussion in https://github.com/ethereum-optimism/optimism/pull/12321#discussion_r1794523639 for context", "OPEN", 0, "mds1", "2024-10-16T01:12:10Z", "2025-02-05T14:57:14Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6aVb-f", 12463, "Nodes sometimes emit Sequencer-Specific Metrics", "Sometimes, nodes which are *not* Sequencers emit metrics which would imply they *are* Sequencers\r\n\r\n* Sequencer Block sealing time\r\n* Sequencer Block building time\r\n* Tx Sequenced\r\n\r\nhttps://optimistic.grafana.net/d/se3IcqO4k/bedrock-nodes?from=2024-09-15T16:36:03.377Z&to=2024-10-15T16:36:03.377Z&timezone=utc&var-network=mainnet-prod&var-node=replica-0&var-node=replica-1&var-node=replica-2&var-node=replica-3&var-node=replica-4\r\n\r\nObservationally, this happens when nodes have a backup in their queues, like when a large block slows processing. This would indicate that a different route through the Derivers is hitting code paths that aren't expected to be run by non-supervisors.\r\n\r\n*OR* these metrics are meant to be emitted, but they only appear sometimes, so we would want to make sure they are always emitted.", "CLOSED", 0, "axelKingsley", "2024-10-15T16:40:17Z", "2025-02-04T13:31:25Z", "2025-02-04T13:31:24Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Z4ABb", 12426, "Local devnet - beacon node genesis not being generated", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nWhen running he command `make devnet-up` it crash when trying to read the `L1 Start Block`\r\n\r\n**Steps to Reproduce**\r\nrun `make devnet-up`\r\n\r\n**Expected behavior**\r\ndevnet is up and running\r\n\r\n**Environment Information:**\r\nmacOS apple silicon\r\n\r\n**Configurations:**\r\n<!--\r\nCommand line flags or environment variables you're using.\r\n-->\r\n\r\n**Logs:**\r\n```bash\r\n#111 [op-challenger] resolving provenance for metadata file\r\n#111 DONE 0.0s\r\n[INFO|10-11-2024 04:51:27] Devnet starting\r\n[INFO|10-11-2024 04:51:27] L1 genesis already generated.\r\n[INFO|10-11-2024 04:51:27] Starting L1.\r\nWARN[0000] The \"ALTDA_ENABLED\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"ALTDA_SERVICE\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"PROPOSAL_INTERVAL\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"L2OO_ADDRESS\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"DGF_ADDRESS\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"DG_TYPE\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"ALTDA_ENABLED\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"DA_TYPE\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"ALTDA_SERVICE\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"DGF_ADDRESS\" variable is not set. Defaulting to a blank string. \r\nWARN[0000] The \"ALTDA_GENERIC_DA\" variable is not set. Defaulting to a blank string. \r\n[+] Running 3/3\r\n \u2714 Container ops-bedrock-l1-1     Running                                                                                                                                                                                                                           0.0s \r\n \u2714 Container ops-bedrock-l1-bn-1  Started                                                                                                                                                                                                                           0.1s \r\n \u2714 Container ops-bedrock-l1-vc-1  Started                                                                                                                                                                                                                           0.2s \r\n[INFO|10-11-2024 04:51:27] Trying 127.0.0.1:8545\r\n[INFO|10-11-2024 04:51:27] Connected 127.0.0.1:8545\r\n[INFO|10-11-2024 04:51:27] Waiting for RPC server at 127.0.0.1:8545\r\n[INFO|10-11-2024 04:51:27] RPC server at 127.0.0.1:8545 ready\r\n[INFO|10-11-2024 04:51:27] Generating L2 genesis and rollup configs.\r\n[INFO|10-11-2024 04:51:27] Re-using existing L2 allocs.\r\nINFO [10-11|16:51:31.438] Deploy config                            path=/Users/possun/Documents/OPStack/minato/optimism/packages/contracts-bedrock/deploy-config/devnetL1.json\r\nINFO [10-11|16:51:31.520] Using L1 Start Block                     number=1\r\nt=2024-10-11T16:51:54+0200 lvl=crit msg=\"Application failed\" message=\"fetching start block by number: operation failed permanently after 24 attempts: not found\"\r\nexit status 1\r\nTraceback (most recent call last):\r\n  File \"/Users/possun/Documents/OPStack/minato/optimism/./bedrock-devnet/main.py\", line 9, in <module>\r\n    main()\r\n  File \"/Users/possun/Documents/OPStack/minato/optimism/./bedrock-devnet/main.py\", line 5, in main\r\n    devnet.main()\r\n  File \"/Users/possun/Documents/OPStack/minato/optimism/bedrock-devnet/devnet/__init__.py\", line 120, in main\r\n    devnet_deploy(paths)\r\n  File \"/Users/possun/Documents/OPStack/minato/optimism/bedrock-devnet/devnet/__init__.py\", line 226, in devnet_deploy\r\n    run_command([\r\n  File \"/Users/possun/Documents/OPStack/minato/optimism/bedrock-devnet/devnet/__init__.py\", line 368, in run_command\r\n    return subprocess.run(\r\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/subprocess.py\", line 528, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['go', 'run', 'cmd/main.go', 'genesis', 'l2', '--l1-rpc', 'http://localhost:8545', '--deploy-config', '/Users/possun/Documents/OPStack/minato/optimism/packages/contracts-bedrock/deploy-config/devnetL1.json', '--l2-allocs', '/Users/possun/Documents/OPStack/minato/optimism/.devnet/allocs-l2-granite.json', '--l1-deployments', '/Users/possun/Documents/OPStack/minato/optimism/.devnet/addresses.json', '--outfile.l2', '/Users/possun/Documents/OPStack/minato/optimism/.devnet/genesis-l2.json', '--outfile.rollup', '/Users/possun/Documents/OPStack/minato/optimism/.devnet/rollup.json']' returned non-zero exit status 1.\r\nmake: *** [devnet-up] Error 1\r\n```\r\n\r\nand error logs in the 2 dockers of beacon nodes (they can't start):\r\n```bash\r\n+ exec /usr/local/bin/lighthouse bn --datadir=/db --disable-peer-scoring --disable-packet-filter --enable-private-discovery --staking --http --http-address=0.0.0.0 --http-port=5052 --validator-monitor-auto --http-allow-origin=* --listen-address=0.0.0.0 --port=9000 --target-peers=0 --testnet-dir=/genesis --execution-endpoint=http://l1:8551 --execution-jwt=/config/jwt-secret.txt --allow-insecure-genesis-sync --debug-level=info\r\nUnable to open testnet dir at \"/genesis\": Unable to read File { fd: 3, path: \"/genesis/genesis.ssz\", read: true, write: false }: Os { code: 21, kind: IsADirectory, message: \"Is a directory\" }\r\n```\r\n\r\n**Additional context**\r\nI seems that the file `genesis.ssz` that have to be generated by `eth2-testnet-genesis` is not present.\r\n`eth2-testnet-genesis` is installed using `make install-eth2-testnet-genesis`\r\n\r\nI am on latest develop commit `18732dbafa6836d7ec6d5adaaf45108c29454fc8`\r\n\r\nThanks for you help", "CLOSED", 0, "PierreOssun", "2024-10-11T14:59:24Z", "2025-02-04T02:26:51Z", "2025-02-04T02:26:51Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Z3tOX", 12423, "interop: op-supervisor stability tracker", "- [x] op-supervisor should track a more reliably defined set of chains.\n- [x] op-supervisor should warn (logs and metrics) when there is no signal for a given chain in a while.\n- [x] deduplicate background-processing startup between `SupervisorBackend.Start` and `NewSupervisorBackend` constructor.\n\n", "CLOSED", 0, "protolambda", "2024-10-11T14:27:43Z", "2025-02-04T01:23:54Z", "2025-02-04T01:23:54Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6ZwbiL", 12415, "EVM Engineering: implement interface generation tool", "See #12414 for context.\r\n\r\nTracking ticket for work to implement and integrate the interface generation tool.", "CLOSED", 0, "smartcontracts", "2024-10-10T18:58:58Z", "2025-02-04T19:31:42Z", "2025-02-04T19:31:42Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Zwas6", 12413, "EVM Engineering: design doc for interface generation tool", "See #12412 for context.\r\n\r\nSimple tracking ticket for the work around creating a design doc for this tool.", "CLOSED", 0, "smartcontracts", "2024-10-10T18:57:17Z", "2025-02-04T19:31:42Z", "2025-02-04T19:31:42Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6ZwZ4N", 12412, "EVM Engineering: automate interface generation", "# Context\r\nIn our ongoing efforts to enhance the OP Stack smart contract development process, we recently introduced interfaces to the OP Stack. This addition serves two primary purposes: it simplifies integration for external developers and significantly reduces compile time. As we've seen positive results from this change, interfaces are likely to remain a core part of our development strategy moving forward.\r\n\r\nTo ensure consistency and best practices, we've created a [comprehensive guide](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/INTERFACES.md) detailing our approach to using interfaces.\r\n\r\n# Problem Statement\r\n\r\nWhile the introduction of interfaces has brought substantial benefits, we've identified a key pain point in our current workflow. The process of adding and maintaining these interfaces manually has become a time-consuming and error-prone task for develoeprs. This manual overhead contradicts the goal of streamlining the development process.\r\n\r\nMoreover, we want to create an environment where our developers can focus on writing high-quality contract logic without getting bogged down in the intricacies of interface management. The current situation requires developers to constantly think about how to properly use and update interfaces, which diverts attention from core development tasks.\r\n\r\nWe've explored existing tools like `cast interface` and `forge inspect` as potential solutions. While these tools are useful, they fall short in generating fully correct interfaces due to some limitations in handling complex types:\r\n\r\n1. They often generate incorrect types for more complex constructs like enums.\r\n2. Instead of properly importing and reusing library types, they generate inline libraries, leading to code duplication and potential inconsistencies.\r\n\r\nThese limitations mean that even when using these tools, developers still need to manually review and correct the generated interfaces, which doesn't fully solve the efficiency problem.\r\n\r\n# Goals\r\nTo address these challenges, we propose the development of a custom, automated interface generation tool. Our goals for this tool are as follows:\r\n\r\n1. **Automatic Generation**: Develop a tool that can automatically generate accurate and complete interfaces for our smart contracts.\r\n\r\n2. **Seamless Integration**: The tool should function similarly to our existing snapshot generation process, integrating smoothly into our current development workflow.\r\n\r\n3. **Intelligent Type Handling**: Implement a coherent and consistent strategy for managing types within the generated interfaces. This strategy should address two key questions:\r\n   - Under what circumstances should types be redefined within the interface?\r\n   - When is it more appropriate to import types from existing libraries?\r\n\r\nBy achieving these goals, we aim to significantly reduce the manual effort required in interface management, minimize the potential for errors, and allow our developers to focus more on core contract logic and less on interface maintenance.\r\n\r\n# Tasks\r\n\r\n- [x] #12413 \r\n- [x] #12414 \r\n- [x] #12415 ", "OPEN", 0, "smartcontracts", "2024-10-10T18:55:48Z", "2025-02-04T19:32:23Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Zvk6d", 12410, "EVM Engineering: make Slither useful again", "We're planning to drop Slither from GitHub actions for now. Slither action hasn't been useful for a long time. We'd like to reintroduce Slither with the following modifications:\r\n\r\n- Slither runs in CI for new PRs, only looks at the PR diff, reports findings, and requires PRs to address the findings\r\n- Slither runs in CI on merge to develop and scans the entire repository\r\n\r\nAll of this is similar to semgrep. \r\n\r\nShould be done in the Circle CI workflow instead of in GitHub actions.", "OPEN", 0, "smartcontracts", "2024-10-10T16:59:27Z", "2025-02-04T19:32:23Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6YlnbE", 12232, "EVM Engineering: remove usage of Ownable", "The OP Stack currently uses OpenZeppelin's `Ownable` contract in a number of different places. `Ownable` can be semantically confusing because contracts other than the `ProxyAdmin` are not designed to be \"owned\" - they instead define specific roles that can carry out particular actions. For example, `DelayedWETH` doesn't need an \"owner\". \r\n\r\nWe believe it would be valuable to move away from `Ownable` globally (except perhaps in the case of the `ProxyAdmin`) in favor of some standard role-based system. \r\n\r\nIssue is generally low priority. Work on this issue has not been prioritized by the OP Labs EVM engineering squad. This GitHub issue was opened for transparent tracking purposes and to collect feedback from interested participants.\r\n\r\nOP Labs EVM engineering squad recommends that other contributors wait until more feedback is collected in this thread before considering this project. If there is sufficient support behind this project, contributors should begin by creating a design doc within the design-docs repository.", "OPEN", 0, "smartcontracts", "2024-10-01T19:12:59Z", "2025-02-04T19:31:18Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6YN0QA", 12190, "Transaction Manager: configurable `increaseGasPrice` behavior", "Previously, the gas price in the transaction manager would use the generated estimate always, in a function called `increaseGasPrices`.\r\n\r\nIn [this PR ](https://github.com/ethereum-optimism/optimism/pull/12169#pullrequestreview-2334633109), it's being modified such that if the incoming transaction is already priced higher than the estimate, the higher value is always used.\r\n\r\nThis behavior is probably fine, but there may be customers who prefer (or even rely on) the limit going back down.\r\n\r\nWe should add into the configuration for SimpleTransactionManager, some way to specify the behavior, likely a simple flag.", "OPEN", 0, "axelKingsley", "2024-09-27T21:29:03Z", "2025-02-04T13:29:41Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6YLu9x", 12177, "Proofs: DeputyGuardianModule Proxy", "# Summary\r\n\r\nProposed change to put the `DeputyGuardianModule` contract behind a proxy.\r\n\r\n# Context\r\n\r\nThe `DeputyGuardianModule` is an important component for the Superchain security model. The `DeputyGuardianModule`, also known as _DGM_, is a smart contract deployed on L1 (currently [here](https://etherscan.io/address/0xc6901f65369fc59fc1b4d6d6be7a2318ff38db5b)) that has, for example, the ability to widely pause the Superchain. The `DGM` is owned by the _Foundation Operation Safe_ so only operation run from the _Foundation Operation Safe_ can be executed into the `DGM`. To make sure we can widely pause the Superchain rapidly enough in case of an emergency, we need to presign the pause transaction from the signers of the _FoS_. These transactions are also known as `PSP` for PreSigned Pause transactions. This process requires a ceremony and this is slow and tedious to put in place.\r\n\r\n# Problem Statement\r\n\r\nThe existing `DeputyGuardianModule` is not _proxified_. This is inconvenient each time we want to upgrade the `DeputyGuardianModule` to add a new feature or to fix a potential bug. As this is not a proxy this require to redeploy the `DeputyGuardianModule` on L1. And also, to update the `Guardian` contract to add the new `DeputyGuardianModule` address as authorized module. Moreover, changing the `DeputyGuardianModule` will break the current PSPs setup as these pause transactions are presigned with the **previous** `DeputyGuardianModule`. Thus, we need to generate new PSPs through the tedious process of a ceremony to add the new `DeputyGuardianModule` for making the PSPs valid again. We are clearly seeing that this is not a sustainable solution for the long term. \r\n\r\nAdditionally, we have to simulate the new PSPs and share them with other member of the Superchain.\r\n\r\n# Project Updates\r\n\r\n- [2024-09-27] Draft design document is available [here](https://github.com/ethereum-optimism/design-docs/pull/89).\r\n- [2024-09-27] Draft design document is being actively reviewed.\r\n- [2024-10-28] Design document has been approved and merged.\r\n\r\n# Resources\r\n\r\n- [Design document](https://github.com/ethereum-optimism/design-docs/pull/89)", "CLOSED", 0, "smartcontracts", "2024-09-27T15:29:14Z", "2025-02-04T19:30:45Z", "2025-02-04T19:30:45Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6X5oRb", 12113, "op-node p2p issue on node restarts", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nReplica nodes are failing to reconnect when the sequencer restarts.\r\n\r\n\r\n**Steps to Reproduce**\r\n\r\nWe have a customer that has reported: \r\n\r\n> v1.9.1 of the stack whenever the sequencer node restarts, our own validator nodes are unable to reconnect to it via p2p with the following error:\r\ninfo dialing static peer addrs: [/ip4/<ip-address>/tcp/9003]\r\nwarn error reconnecting to static peer err: failed to dial <enode-addr>: no addresses\r\n> Restarting the validator node allows it to reconnect again, which implies that the connectivity is not an issue, but the internal state of the validator node.\r\n> This issue is reproducible every time the sequencer node is restarted, which prevents propagation of unsafe blocks to validator nodes and creates disruption on the whole chain.\r\n\r\n**Expected behavior**\r\n\r\nThe nodes should reconnect.\r\n\r\n**Environment Information:**\r\n - Operating System: not sure\r\n - Package Version (or commit hash): p-node v1.9.1\r\n\r\n**Configurations:**\r\n\r\n### Validator (Replica) Node\r\n\r\n```\r\nop_node_l1_eth_rpc: \"wss://<l1_rpc_url>\"\r\nop_node_l1_rpc_kind: \"standard\"\r\nop_node_l2_engine_auth: \"/etc/secret-volume/jwt\"\r\nop_node_rollup_load_protocol_versions: \"true\"\r\nop_node_rollup_halt: \"major\"\r\nop_node_rollup_config: \"/persistent/config/rollup.json\"\r\nop_node_sequencer_enabled: \"false\"\r\nop_node_sequencer_l1_confs: \"4\"\r\nop_node_verifier_l1_confs: \"5\"\r\nop_node_log_format: \"json\"\r\nop_node_log_level: \"info\"\r\nop_node_p2p_disable: \"false\"\r\nop_node_p2p_listen_ip: \"0.0.0.0\"\r\nop_node_p2p_listen_tcp_port: \"9003\"\r\nop_node_p2p_listen_udp_port: \"9003\"\r\nop_node_p2p_peer_scoring: \"none\"\r\nop_node_p2p_peer_banning: \"false\"\r\nop_node_p2p_peer_banning_duration: \"0h1m0s\"\r\nop_node_p2p_bootnodes: \"enr:<bootnode_enr>\"\r\nop_node_p2p_advertise_tcp: \"9003\"\r\nop_node_p2p_advertise_udp: \"9003\"\r\nop_node_p2p_sync_req_resp: \"true\"\r\nop_node_p2p_static: \"<sequencer_multiaddr>\"\r\nop_node_rpc_addr: \"0.0.0.0\"\r\nop_node_rpc_port: \"8545\"\r\nop_node_rpc_enable_admin: \"true\"\r\nop_node_snapshot_log: \"/persistent/snapshot.log\"\r\nop_node_metrics_enabled: \"true\"\r\nop_node_metrics_addr: \"0.0.0.0\"\r\nop_node_metrics_port: \"7300\"\r\nop_node_pprof_enabled: \"true\"\r\nop_node_altda_enabled: \"false\"\r\nop_node_altda_da_service: \"true\"\r\nop_node_altda_da_server: \"<altda_server_url>\"\r\nop_node_l1_beacon: \"https://<beacon_api_url>\"\r\nop_node_p2p_priv_raw: \"<p2p_pk>\"\r\nop_node_l2_engine_rpc: \"http://<geth_url>\"\r\n```\r\n\r\n\r\n**Logs:**\r\n\r\n```\r\ninfo dialing static peer addrs: [<ip>/tcp/9003]\r\nwarn error reconnecting to static peer err: failed to dial <enode>: no addresses\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "sbvegan", "2024-09-25T16:38:05Z", "2025-02-04T14:02:13Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6XbYJM", 12044, "[Tracker] L2 withdrawals-root in block header (Isthmus)", "## Plan\n\nWe are going to use a ~feature-branch~ feature-config-flag approach,\nto keep this withdrawals work optional to Isthumus.\n\nIf not complete by Isthumus devnet stage, we do not merge the feature-branches,\nand thus do not include it in the hardfork.\n\nTODOs, in sequence:\n- [x] Review the TODO lists. Communicate any questions / concerns.\n- [x] Review, but don't merge, the [op-geth PR](https://github.com/ethereum-optimism/op-geth/pull/383).\n- [x] Open a specs PR with the described combined above spec changes.\n  You may use a feature-branch, but a single specs PR is fine too.\n  Previous basic Isthumus spec work can be found in [`specs#374`](https://github.com/ethereum-optimism/specs/pull/374/files).\n- [x] Implement the remaining op-geth TODOs\n- [x] Open a monorepo op-node feature-branch PR, for the initial basic changes,\n  with `go.mod` update to point to the latest commit of the op-geth with the right changes.\n- [x] Open further monorepo op-node PRs, to finish the op-node changes.\n- [x] Update one of the internal devnet nodes to `dev` release candidates of the above, verify that it stays in sync.\n- [ ] If all of the above is complete and reviewed,\n  we enable the feature-config-flag and include it in the Isthumus devnet/testnet phase.\n- [ ] During Isthumus devnet we do a sync-test, to ensure the EL block-body syncing works.\n\n### Spec TODOs\n\nGeneral notes: keep the specs categorized in the `isthumus` directory, and file names consistent across upgrades:\ne.g. Execution layer changes go `exec-engine.md`.\n\n- [x] Specs note that the block-body withdrawals list is encoded as an empty RLP list.\n- [x] Specs note that any block-after-transaction simulation should include an empty withdrawals-root;\n  the block is sealed at the end of a block.\n- [x] Specs note that the withdrawals-root in the genesis block,\n  if Isthumus is active, is always the empty withdrawals root, regardless of L2 state.\n- [x] Specs note that the withdrawals-root starting at shanghai, pre-Isthumus,\n  is set to an empty withdrawals list, this equals the same root as an empty storage root.\n  The withdrawals are there in L2 state, just not elevated into the withdrawals-root.\n  Pre-Isthumus output-root construction should be careful not to use the header withdrawals-root.\n- [x] Specs note that at the time of state-processing, with an in-progress header,\n  the withdrawals-root should not be available to the EVM / application layer.\n- [x] Specs Engine-API modification: `ExecutableData` gets a `withdrawalsRoot` attribute. \n- [x] Specs note that for an accurate storage-root to be known,\n  the block state has to be committed first, before the withdrawals storage root can be set accurately.\n  This attribute should thus be set right after setting the state-root attribute of the header.\n- [x] Specs EL P2P note: block-bodies and block-headers responses are handled the same in isolation:\n  we compute the body-withdrawal-hashes from the received withdrawals list in the block body.\n  Then, when we compare the body-withdrawal-hashes to the header withdrawal-hashes,\n  and if optimism Isthumus is active for the given header, we check if the body-withdrawal-hash matches the empty list root,\n  while allowing the header-withdrawal-hash to be any non-null value.\n  By verifying at this later stage, we have the header timestamp, and can apply the fork logic conditionally.\n- [x] Specs update to describe CL `ExecutionPayload` SSZ encoding with new withdrawals-root included.\n    - ~[ ] We remove the `withdrawals` list from the encoding, diverging from the L1 beacon-chain `ExecutionPayload` encoding.~\n- [x] Spec that we continue to use `engine_newPayloadV3` engine-API,\n  but now with the additional `ExecutionPayload` attribute, that is omitted pre-Isthumus.\n- [x] Specs update to describe new CL P2P gossip topic, with updated `ExecutionPayload` SSZ encoding,\n  and a gossip-validation rule that checks if the withdrawals root is non-nil, and withdrawals list is empty.\n  This spec change goes into the main `rollup-node-p2p.md`, to be consistent with the other gossip topics.\n- [x] Update fault-proof-program spec that describes the output-claim verification,\n  and link to the Isthumus specs change of the block header.\n\nCreated https://github.com/ethereum-optimism/specs/issues/394 to track work for spec updates\n\n## CL / op-node TODOs\n\n- [x] Update the `ExecutionPayload` type to have the optional withdrawals root\n- [x] Update the SSZ encoding implementation of the payload.\n  To conditionally either encode the empty-list (pre-Isthumus) (simply just an offset constant) or an empty list *and* a 32 fixed-size value.\n- [x] `op-node/p2p` update to activate new gossip topic for `Isthumus`.\n- [x] Update `op-node/rollup/attributes/engine_consolidate.go`:\n  - pre-Shanghai: attributes must have nil withdrawals list and nil withdrawals-root.\n  - pre-Isthumus: attributes must have empty withdrawals list (different than nil!), execution-payload must have empty withdrawals list and nil withdrawals-root.\n  - post-Isthumus: attributes must have empty withdrawals list, execution-payload must have empty withdrawals list and non-nil withdrawals-root.\n- [x] Action-test to cover L2 block before, at, and after Isthumus.\n  All 3 cases with and without withdrawal-storage change (by inserting a withdrawal tx in L2).\n- [x] Add a note to `op-node/api.go` `node.OutputAtBlock` that the `OutputV0AtBlock` function handles the Isthumus change.\n- [x] Change `op-service/sources/l2_client.go` `L2Client.OutputV0AtBlock` to\n  check if Isthumus is active based on the timestamp of the retrieved block-header.\n  If it is, then don't fetch the storage or storage-proof,\n  but use the Withdrawals-hash from the block-header to construct the output-root.\n- [x] Ensure that the `op-service/sources/eth_client.go` functionality of block/header verification does not break. In particular, update the withdrawals-list verification of the block-body, to enforce an empty non-nil list. And the header must have a non-nil withdrawals-root after genesis.\n- [x] Update op-program output-root construction to not retrieve the withdrawals-root from storage, but from the block-header.\n  While technically compatible without this change, there are other op-program changes,\n  and we want to prevent the arbitrary storage-lookup preimage needs that come with the state-access.\n\n### op-geth TODOs\n\n- [x] Review the [op-geth draft PR](https://github.com/ethereum-optimism/op-geth/pull/383), to be reused as feature-branch tracker.\n- [x] Json roundtrip of block and header types\n- [x] RLP roundtrip of block and header types\n- [x] `ExecutableData` json encode/decode test\n- [x] Geth note (clarify, and include in `fork.yaml`): t8ntool was not updated,\n  it doesn't support some OP-Stack features already, so it is not worth it to handle the withdrawals root case.\n  It is also just unfortunate code-duplication in this tool that it does not use the same sealer as Geth consensus does.\n- [x] ~Describe the feature-branch changes in `fork.yaml`.~ -- no feature branch will be used per discussion below\n- [ ] Make sure the op-geth commits are tidy, description format should match upstream commits.\n", "CLOSED", 0, "protolambda", "2024-09-21T22:28:31Z", "2025-02-04T01:39:32Z", "2025-02-04T01:39:31Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6XMbcf", 12006, "Have TODO issues checker reject bare TODOs", "The TODO issues checking script (ops/scripts/todo-checker.sh) currently allows bare TODOs without any corresponding issue. I think it would be best if this script rejected bare TODOs and required users to instead use something like `TODO(bare)` to explicitly mark that TODO as not needing an issue.", "OPEN", 0, "smartcontracts", "2024-09-19T14:59:26Z", "2025-02-04T19:31:15Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6XBf3e", 11973, "L2OO falls behind L2 in devnet", "It looks like https://github.com/ethereum-optimism/optimism/issues/7668 is still a problem, although to a lesser degree, since `l2OutputOracleSubmissionInterval` has been increased since that issue has been originally reported. I can't reopen that issue or comment on it, so I had to create a new one.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/issues/7668#issuecomment-2174503801 says that his should not happen when fault proofs are enabled, but my observation seems to disagree.\r\n\r\n## Steps to reproduce\r\n\r\nJust run a devnet and watch how the block number in the L2OO falls behind over time.\r\n\r\n```fish\r\ngit checkout b6e9a614fb4c3d0f0089d0353f9d3ccc7c0be3df\r\nDEVNET_L2OO=true make devnet-clean devnet-up;\r\nwhile true\r\n    set L1 $(cast block -r http://localhost:8545 -f number)\r\n    set L2 $(cast block -r http://localhost:9545 -f number)\r\n    set L2OO $(cast call -r http://localhost:8545 $(jq '.L2OutputOracleProxy' ~/optimism/.devnet/addresses.json -r) 'latestBlockNumber() returns (uint256)')\r\n    echo L1: $L1, L2: $L2, L2OO: $L2OO, L2OO-diff: $(math \"$L2 - $L2OO\")\r\n    sleep 30\r\nend\r\n```\r\n\r\n## Expected output\r\n\r\nI would expect the L2OO-diff (the difference between the latest block number in the L2OO and the latest block number on the L2) to be constant over time (minus some noise).\r\n\r\n## Actual output\r\n\r\nL2OO-diff increases over time:\r\n```\r\nL1: 1, L2: 0, L2OO: 0, L2OO-diff: 0\r\nL1: 6, L2: 16, L2OO: 0, L2OO-diff: 16\r\nL1: 11, L2: 31, L2OO: 10, L2OO-diff: 21\r\nL1: 16, L2: 46, L2OO: 20, L2OO-diff: 26\r\nL1: 21, L2: 61, L2OO: 30, L2OO-diff: 31\r\nL1: 26, L2: 77, L2OO: 40, L2OO-diff: 37\r\nL1: 31, L2: 92, L2OO: 60, L2OO-diff: 32\r\nL1: 36, L2: 107, L2OO: 70, L2OO-diff: 37\r\nL1: 41, L2: 122, L2OO: 80, L2OO-diff: 42\r\nL1: 46, L2: 137, L2OO: 90, L2OO-diff: 47\r\nL1: 51, L2: 152, L2OO: 110, L2OO-diff: 42\r\nL1: 56, L2: 167, L2OO: 120, L2OO-diff: 47\r\nL1: 61, L2: 182, L2OO: 130, L2OO-diff: 52\r\nL1: 66, L2: 197, L2OO: 140, L2OO-diff: 57\r\nL1: 71, L2: 213, L2OO: 160, L2OO-diff: 53\r\nL1: 77, L2: 228, L2OO: 170, L2OO-diff: 58\r\nL1: 82, L2: 243, L2OO: 180, L2OO-diff: 63\r\nL1: 87, L2: 258, L2OO: 200, L2OO-diff: 58\r\nL1: 92, L2: 273, L2OO: 210, L2OO-diff: 63\r\nL1: 97, L2: 288, L2OO: 220, L2OO-diff: 68\r\nL1: 102, L2: 303, L2OO: 230, L2OO-diff: 73\r\nL1: 107, L2: 318, L2OO: 250, L2OO-diff: 68\r\nL1: 112, L2: 333, L2OO: 260, L2OO-diff: 73\r\nL1: 117, L2: 348, L2OO: 270, L2OO-diff: 78\r\nL1: 122, L2: 363, L2OO: 280, L2OO-diff: 83\r\nL1: 127, L2: 379, L2OO: 300, L2OO-diff: 79\r\nL1: 132, L2: 394, L2OO: 310, L2OO-diff: 84\r\nL1: 137, L2: 409, L2OO: 320, L2OO-diff: 89\r\nL1: 142, L2: 424, L2OO: 330, L2OO-diff: 94\r\nL1: 147, L2: 439, L2OO: 350, L2OO-diff: 89\r\nL1: 152, L2: 454, L2OO: 360, L2OO-diff: 94\r\nL1: 157, L2: 469, L2OO: 370, L2OO-diff: 99\r\nL1: 162, L2: 484, L2OO: 380, L2OO-diff: 104\r\nL1: 167, L2: 499, L2OO: 400, L2OO-diff: 99\r\nL1: 172, L2: 515, L2OO: 410, L2OO-diff: 105\r\n```\r\n\r\n## Workaround\r\n\r\nIncreasing `l2OutputOracleSubmissionInterval` to 15 solves the issue and leads to the following output:\r\n```\r\nL1: 1, L2: 0, L2OO: 0, L2OO-diff: 0\r\nL1: 6, L2: 16, L2OO: 0, L2OO-diff: 16\r\nL1: 11, L2: 31, L2OO: 0, L2OO-diff: 31\r\nL1: 16, L2: 46, L2OO: 15, L2OO-diff: 31\r\nL1: 21, L2: 61, L2OO: 30, L2OO-diff: 31\r\nL1: 26, L2: 76, L2OO: 45, L2OO-diff: 31\r\nL1: 31, L2: 92, L2OO: 60, L2OO-diff: 32\r\nL1: 36, L2: 107, L2OO: 75, L2OO-diff: 32\r\nL1: 41, L2: 122, L2OO: 90, L2OO-diff: 32\r\nL1: 46, L2: 137, L2OO: 105, L2OO-diff: 32\r\nL1: 51, L2: 152, L2OO: 120, L2OO-diff: 32\r\nL1: 56, L2: 167, L2OO: 135, L2OO-diff: 32\r\nL1: 61, L2: 182, L2OO: 150, L2OO-diff: 32\r\nL1: 66, L2: 197, L2OO: 165, L2OO-diff: 32\r\nL1: 71, L2: 212, L2OO: 180, L2OO-diff: 32\r\nL1: 77, L2: 228, L2OO: 210, L2OO-diff: 18\r\nL1: 82, L2: 243, L2OO: 210, L2OO-diff: 33\r\nL1: 87, L2: 258, L2OO: 240, L2OO-diff: 18\r\nL1: 92, L2: 273, L2OO: 240, L2OO-diff: 33\r\nL1: 97, L2: 288, L2OO: 270, L2OO-diff: 18\r\nL1: 102, L2: 303, L2OO: 270, L2OO-diff: 33\r\nL1: 107, L2: 318, L2OO: 300, L2OO-diff: 18\r\nL1: 112, L2: 333, L2OO: 300, L2OO-diff: 33\r\nL1: 117, L2: 348, L2OO: 330, L2OO-diff: 18\r\nL1: 122, L2: 364, L2OO: 330, L2OO-diff: 34\r\nL1: 127, L2: 379, L2OO: 360, L2OO-diff: 19\r\nL1: 132, L2: 394, L2OO: 360, L2OO-diff: 34\r\nL1: 137, L2: 409, L2OO: 390, L2OO-diff: 19\r\n```", "CLOSED", 0, "karlb", "2024-09-18T13:27:28Z", "2025-02-04T14:01:54Z", "2025-02-04T14:01:53Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Wvo5H", 11925, "op-deployer: separate package from op-chain-ops", "The op-chain-ops package testing does not involve Kurtosis, except the new op-deployer code.\r\n\r\nWe should separate op-deployer as a package, to keep op-chain-ops testing lean in CI.\r\n\r\n", "OPEN", 0, "protolambda", "2024-09-16T17:40:22Z", "2025-02-04T01:30:30Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6WiXMC", 11909, "SuperchainERC20 Interface: Adapt to standards", "", "CLOSED", 0, "0xng", "2024-09-13T19:58:02Z", "2025-02-04T14:53:19Z", "2025-02-04T14:53:17Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6WYqS7", 11887, "Add number of funded accounts to world deployment recipe", "Currently the world deployment assumes 20 accounts need to be funded:\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/167252821eb8a0d013cc9def5642722b1c4dc7c2/op-chain-ops/interopgen/recipe.go#L34\r\n\r\nThis implicit \"20\" should become a configurable aspect of the deployed world. Once done, the SuperSystem could be aware of this and avoid making reference to unfunded accounts.", "CLOSED", 0, "axelKingsley", "2024-09-12T18:12:46Z", "2025-02-04T01:14:11Z", "2025-02-04T01:14:10Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6V4t7c", 11808, "EVM Engineering: generate timing reports for contracts in CI", "We recently updated CI to use Circle CI's test splitting functionality when running our contract tests. Circle CI test splitting is most effective when Circle CI has timing data about how long each test file takes to run. We should be able to generate this timing data by:\r\n\r\n1. Running tests with `forge test --json` in CI.\r\n2. Running a script to turn `forge test --json` output into the junit xml test report format.\r\n3. Uploading the test data to Circle CI.\r\n\r\nResources for these formats and how to upload the test report files to CI are available online.", "CLOSED", 0, "smartcontracts", "2024-09-09T18:48:47Z", "2025-02-04T19:30:32Z", "2025-02-04T19:30:32Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6VkhzU", 11779, "Nodes can't recover from large L2 unsafe head gaps using p2p req resp sync", "op-node will request gaps between the current head and the L2 unsafe head using the req resp (request-response) \"alt sync\" protocol if the blocks don't arrive via gossip. When there are network or service issues that cause stalls in gossip for more than roughly a minute, gossip will be rejected or not contain blocks needed to catch up, and nodes will enter a pathological cycle of being unable to obtain the blocks they need if most of the peers they are connected to also don't have the blocks. This is particularly bad when the sequencer becomes unavailable, because it will continue to produce blocks despite no other nodes being connected. When connectivity is resumed, all other nodes will be behind.\r\n\r\nIn the req resp arrangement, \"client\" is the requester, and \"server\" is the one receiving the message. The current req resp algorithm randomly requests blocks from peers, and has several undesirable properties:\r\n - Servers are scored down if they rate limit the client. This is particularly problematic if the peer is the only node with the blocks we need.\r\n - Clients penalize servers if the client runs out of quarantine space. (Quarantine space is used to buffer blocks that aren't yet ready to be sent to the driver).\r\n - Clients do not retry blocks that aren't available from the first server they try. Instead the driver eventually times out and might send out another batch of requests.\r\n - Requests are sent in the order they can be \"promoted\" to the driver, but there's no guarantee of this, and the received blocks can overflow the quarantine cache, and the driver processing queue, causing servers to be downscored and blocks to be wasted.\r\n - Changes in the block range in the \"gap\" do not flush the trusted block hashes. So in the event of a reorg, the sync client (the process that manages the req resp process with peers), will continue to promote blocks that should no longer be trusted.", "CLOSED", 0, "anacrolix", "2024-09-06T03:01:10Z", "2025-02-03T17:05:18Z", "2025-02-03T17:05:17Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6ViXDC", 11773, "Deployment fails if `systemConfigStartBlock` = 4071248", "**Bug Description**\r\nThe deployment fails when setting up the value `systemConfigStartBlock` as non 0 ( default `4071248` for sepolia in the existing configs )\r\n\r\n**Steps to Reproduce**\r\n\r\nRun the following command:\r\n```\r\ndeployments/artifact.json \\\r\nDEPLOY_CONFIG_PATH=deploy-config/sepolia-devnet-0.json \\\r\nforge script scripts/deploy/Deploy.s.sol:Deploy  --broadcast --private-key $GS_ADMIN_PRIVATE_KEY \\\r\n--rpc-url $L1_RPC_URL --slow\r\n```\r\n\r\n**Logs:**\r\n\r\nOutput:\r\n```\r\n    \u2502   \u251c\u2500 [414] SystemConfig::basefeeScalar() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [Return] 1368\r\n    \u2502   \u2514\u2500 \u2190 [Return] 1368\r\n    \u251c\u2500 [413] DeployConfig::blobbasefeeScalar() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 810949 [8.109e5]\r\n    \u251c\u2500 [896] Proxy::blobbasefeeScalar() [staticcall]\r\n    \u2502   \u251c\u2500 [413] SystemConfig::blobbasefeeScalar() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [Return] 810949 [8.109e5]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 810949 [8.109e5]\r\n    \u251c\u2500 [403] DeployConfig::batchSenderAddress() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 0x19CC7073150D9f5888f09E0e9016d2a39667df14\r\n    \u251c\u2500 [834] Proxy::batcherHash() [staticcall]\r\n    \u2502   \u251c\u2500 [351] SystemConfig::batcherHash() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [Return] 0x00000000000000000000000019cc7073150d9f5888f09e0e9016d2a39667df14\r\n    \u2502   \u2514\u2500 \u2190 [Return] 0x00000000000000000000000019cc7073150d9f5888f09e0e9016d2a39667df14\r\n    \u251c\u2500 [398] DeployConfig::l2GenesisBlockGasLimit() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 30000000 [3e7]\r\n    \u251c\u2500 [907] Proxy::gasLimit() [staticcall]\r\n    \u2502   \u251c\u2500 [424] SystemConfig::gasLimit() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [Return] 30000000 [3e7]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 30000000 [3e7]\r\n    \u251c\u2500 [403] DeployConfig::p2pSequencerAddress() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 0xa95B83e39AA78B00F12fe431865B563793D97AF5\r\n    \u251c\u2500 [869] Proxy::unsafeBlockSigner() [staticcall]\r\n    \u2502   \u251c\u2500 [407] SystemConfig::unsafeBlockSigner() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [Return] 0xa95B83e39AA78B00F12fe431865B563793D97AF5\r\n    \u2502   \u2514\u2500 \u2190 [Return] 0xa95B83e39AA78B00F12fe431865B563793D97AF5\r\n    \u251c\u2500 [856] Proxy::scalar() [staticcall]\r\n    \u2502   \u251c\u2500 [373] SystemConfig::scalar() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [Return] 452312848583266388373324160190187140051835877600158453279134670530344387928 [4.523e74]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 452312848583266388373324160190187140051835877600158453279134670530344387928 [4.523e74]\r\n    \u251c\u2500 [2375] DeployConfig::systemConfigStartBlock() [staticcall]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 4071248 [4.071e6]\r\n    \u251c\u2500 [936] Proxy::startBlock() [staticcall]\r\n    \u2502   \u251c\u2500 [474] SystemConfig::startBlock() [delegatecall]\r\n    \u2502   \u2502   \u2514\u2500 \u2190 [Return] 6639452 [6.639e6]\r\n    \u2502   \u2514\u2500 \u2190 [Return] 6639452 [6.639e6]\r\n    \u2514\u2500 \u2190 [Revert] EvmError: Revert\r\n\r\n\r\n\r\n== Logs ==\r\n  Writing artifact to deployments/artifact.json\r\n  Connected to network with chainid 11155111\r\n  Commit hash: d05376fff2a7e29b03e22ab2f177c4a02b421346\r\n  DeployConfig: reading file deploy-config/sepolia-devnet-0.json\r\n  Deploying a fresh OP Stack including SuperchainConfig\r\n  start of L1 Deploy!\r\n  Deploying safe: SystemOwnerSafe with salt 0x80ee13a388a25fd2a27590d8e4efbada61da5f9f554e2b9c476b599ae131dd84\r\n  Saving SafeProxyFactory: 0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2\r\n  Saving SafeSingleton: 0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552\r\n  Saving SystemOwnerSafe: 0xbC6577521A57A2DD48bfB6C2b24C7a959B99f1Eb\r\n  New safe: SystemOwnerSafe deployed at 0xbC6577521A57A2DD48bfB6C2b24C7a959B99f1Eb\r\n    Note that this safe is owned by the deployer key\r\n  deployed Safe!\r\n  Setting up Superchain\r\n  Deploying AddressManager\r\n  Saving AddressManager: 0x4dc45455aAa5FF50AAf31375e0FA0176110139e6\r\n  AddressManager deployed at 0x4dc45455aAa5FF50AAf31375e0FA0176110139e6\r\n  Deploying ProxyAdmin\r\n  Saving ProxyAdmin: 0xe6de3B9f5f479426d6b88bD00A3804B9E4f3306F\r\n  ProxyAdmin deployed at 0xe6de3B9f5f479426d6b88bD00A3804B9E4f3306F\r\n  ProxyAdmin ownership transferred to Safe at: 0xbC6577521A57A2DD48bfB6C2b24C7a959B99f1Eb\r\n  Deploying ERC1967 proxy for SuperchainConfigProxy\r\n  Saving SuperchainConfigProxy: 0xd915EE641559E1D0c743AE24FddFe714cFA480f8\r\n     at 0xd915EE641559E1D0c743AE24FddFe714cFA480f8\r\n  Saving SuperchainConfig: 0x90d4aC531219229375a24b2b5ED14Ac86E62Ae23\r\n  SuperchainConfig deployed at 0x90d4aC531219229375a24b2b5ED14Ac86E62Ae23\r\n  Running chain assertions on the SuperchainConfig\r\n  Deploying ERC1967 proxy for ProtocolVersionsProxy\r\n  Saving ProtocolVersionsProxy: 0x866BBB301EA35E47A175C0Af0bC76D6640323caB\r\n     at 0x866BBB301EA35E47A175C0Af0bC76D6640323caB\r\n  Deploying ProtocolVersions implementation\r\n  Saving ProtocolVersions: 0xc7820f3d2Da04325FE3c215270a35516b5544912\r\n  ProtocolVersions deployed at 0xc7820f3d2Da04325FE3c215270a35516b5544912\r\n  Running chain assertions on the ProtocolVersions\r\n  Upgrading and initializing ProtocolVersions proxy\r\n  ```\r\n  \r\n  On furthur investigating, the [following](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/deploy/ChainAssertions.sol#L89) check seems to fail: \r\n` require(config.startBlock() == (cfgStartBlock == 0 ? block.number : cfgStartBlock));`\r\n\r\nTo get around setting `\"systemConfigStartBlock\": 0` does the job.\r\n\r\n**Expected behavior**\r\nThe deployment should go through.\r\n\r\n**Environment Information:**\r\n - Mac OS M1 Max\r\n - Release v1.9..1\r\n\r\n", "CLOSED", 0, "rac-sri", "2024-09-05T21:43:43Z", "2025-02-04T15:02:01Z", "2025-02-04T15:02:00Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6VhGQ1", 11767, "EVM Engineering: establish policy on old legacy contracts", "We have some *very* old legacy contracts like the `DeployerWhitelist` sitting around. We don't currently have a clear policy on what to do with these contracts. Let's figure it out.", "OPEN", 0, "smartcontracts", "2024-09-05T18:39:15Z", "2025-02-04T19:31:14Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6VhFvf", 11766, "EVM Engineering: fix up InitializableOZv5 tests", "Noticed that the `InitializableOZv5.t.sol` test suite is missing some of the verification properties of the original `Initializable.t.sol` suite. We need to update this test to make sure that it uses the same pattern as the original suite once the original suite gets fixed up as part of #11674.", "OPEN", 0, "smartcontracts", "2024-09-05T18:37:55Z", "2025-02-04T19:31:05Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6VWXfH", 11733, "[Tracker] EVM Engineering: contract interfaces improvements", "We're now using contract interfaces in the contracts repository to help improve devex and compile time across the board. We have a number of follow-up issues to address to make sure that the experience with interfaces is as clean as possible.\r\n\r\n- [ ] #12412\r\n- [x] #11683 ", "OPEN", 0, "smartcontracts", "2024-09-04T15:17:49Z", "2025-02-04T19:30:59Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6U5bfG", 11696, "Feat: json-rpc endpoints discovery", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nJust discovered that there's an admin endpoint on the op-batcher that can be used to set log level, txmgr properties, etc. Seems like there is no way to discover the different endpoints other than searching through the code.\r\n\r\n**Describe the solution you'd like**\r\n\r\nWould be nice if the different op services implemented the [rpc_discover](https://etclabscore.github.io/core-geth/JSON-RPC-API/openrpc/) method, which doesn't seem to currently be implemented (only tried op-batcher though):\r\n```\r\ncurl -X POST -H 'Content-Type: application/json' --data '{\"jsonrpc\":\"2.0\",\"method\":\"rpc_discover\",\"params\":[],\"id\":1}' localhost:6545           \r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-32601,\"message\":\"the method rpc_discover does not exist/is not available\"}}\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nOtherwise could be nice if there was a `doc json-rpc` or something like `doc metrics` subcommand that would list all possible endpoints (even if they are behind a flag)\r\n```\r\n./bin/op-batcher doc\r\nNAME:\r\n   op-batcher doc\r\n\r\nUSAGE:\r\n   op-batcher doc command [command options]\r\n\r\nCOMMANDS:\r\n   metrics  Dumps a list of supported metrics to stdout\r\n   help, h  Shows a list of commands or help for one command\r\n\r\nOPTIONS:\r\n   \r\n          --help, -h                          (default: false)                  \r\n                show help\r\n```\r\n\r\n", "OPEN", 0, "samlaf", "2024-08-30T19:57:48Z", "2025-02-04T02:18:39Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6U4UFE", 11691, "[Tracker] EVM Engineering: assertions on custom natspec", "Custom natspec that we attach to smart contracts like `@custom:proxied`, `@custom:legacy`, or `@custom:predeployed` are meant to give consumers a static way to access properties about smart contracts without needing to actually compile or deploy these contracts. Such natspec is useful only if we can guarantee that it accurately reflects the properties it is designed to reflect.\r\n\r\n## Metadata\r\n- Priority: Low\r\n\r\n## Checklist\r\n- [x] #11689 ", "OPEN", 0, "smartcontracts", "2024-08-30T16:53:04Z", "2025-02-04T19:30:54Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6UUdVi", 11607, "Publish docker images for official op-contracts releases", "Hey OP team!\r\n\r\nThere's already an existing [Artifact Registry image called contracts-bedrock](https://console.cloud.google.com/artifacts/docker/oplabs-tools-artifacts/us/images/contracts-bedrock) that includes the relevant contracts as well as a `forge` package pre-installed. This is very useful in ensuring consistency across artifacts (e.g. to ensure that a supported version of `forge` is used) as well as minimizing the number of manual steps required to deploy contracts.\r\n\r\nUnfortunately, the image is not built for all supported versions of `op-contracts`. For example, there doesn't seem to be an image for `op-contracts/v1.3.0` even though this is still the recommended Contracts version for pre-fault-proof networks.\r\n\r\nWould it be possible to get the images for the official releases published to the registry? Thanks!", "OPEN", 0, "IvanVergiliev", "2024-08-27T06:17:57Z", "2025-02-04T02:19:27Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Tyhum", 11562, "Deprecating the Docker Compose Based Devnet", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe will be deprecating the [bedrock-devnet](https://github.com/ethereum-optimism/optimism/tree/develop/bedrock-devnet) based on [docker compose](https://github.com/ethereum-optimism/optimism/blob/develop/ops-bedrock/docker-compose.yml) in the near future. The [kurtosis package](https://github.com/ethpandaops/optimism-package) will be the replacement.\r\n\r\nIdeally we can support alt-da in the kurtosis package before deprecating the docker compose one", "CLOSED", 0, "tynes", "2024-08-22T01:07:13Z", "2025-02-04T02:07:04Z", "2025-02-04T02:07:03Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6TXByV", 11506, "batch-decoder: doesn't work on devnet", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nCan't use the [batch decoding cli tool](https://github.com/ethereum-optimism/optimism/tree/develop/op-node/cmd/batch_decoder) on devnet.\r\n\r\n**Steps to Reproduce**\r\n\r\nStarting the devnet and running\r\n```\r\ncd op-node/cmd/batch_decoder\r\ngo run . fetch --start 0 --end 50 --inbox 0xff00000000000000000000000000000000000901 --sender 0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc --l1 http://localhost:8545\r\ngo run . reassemble --inbox 0xff00000000000000000000000000000000000901\r\n```\r\nruns without errors, but actually doesn't produce any files in `/tmp/batch_decoder/channel_cache`.\r\n\r\nThis is because the --inbox flag for the reassemble subcommand is overwritten [here](https://github.com/ethereum-optimism/optimism/blob/f243ad0d892dfa9dc022caeb0155c0c9ff5fef52/op-node/cmd/batch_decoder/main.go#L173).\r\n\r\nThat code is only ran when https://github.com/ethereum-optimism/optimism/blob/f243ad0d892dfa9dc022caeb0155c0c9ff5fef52/op-node/cmd/batch_decoder/main.go#L161 returns a nil error, so I tried passing a random chainid:\r\n```\r\ngo run . reassemble --inbox 0xff00000000000000000000000000000000000901 --l2-chain-id 101\r\n```\r\nbut this panics.\r\n\r\n**Expected behavior**\r\nThe command reassemble command should work like the fetch one on devnet, and ideally print the directory as output and mention if no file was written. Right now it just silently returns and is very tricky to use (I had to run it with `--help` to figure out what it's supposed to do, and which dir its supposed to write to, then figure out there was a bug, etc.)\r\n\r\n**Environment Information:**\r\nRunning on macos, but this is not important.\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "samlaf", "2024-08-19T01:47:44Z", "2025-02-04T02:17:56Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6S7ryS", 11473, "feat: ensure proper closing of gzip and file writers/readers to prevent resource leaks", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThe current implementation of file handling for gzip compression in the opstack repo does not properly manage the closing of both the gzip writer/reader and the underlying file writer/reader. This can lead to resource leaks and potential issues with file handling.\r\n\r\n**Describe the solution you'd like**\r\nI propose to enhance the file handling functions to ensure that both the gzip writer/reader and the underlying file writer/reader are properly closed. This involves creating custom structs gzipWriteCloser and gzipReadCloser that implement the io.WriteCloser and io.ReadCloser interfaces, respectively. These structs will ensure that the Close method closes both the gzip writer/reader and the underlying file.\r\n\r\n**Describe alternatives you've considered**\r\nAn alternative solution would be to manually close the underlying file writer/reader after closing the gzip writer/reader in every instance where these operations are performed. However, this approach is error-prone and could lead to inconsistent handling across the codebase.\r\n\r\n**Additional context**", "CLOSED", 0, "siddharth0a", "2024-08-14T07:37:36Z", "2025-02-04T15:52:22Z", "2025-02-04T15:52:20Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6SoxXb", 11439, "Unused local variable in FaultDisputeGame.t.sol", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nThere is an unused local variable in the `FaultDisputeGame.t.sol` file, which may cause unnecessary memory usage and reduce code readability.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Open the `test/dispute/FaultDisputeGame.t.sol` file.\r\n2. Navigate to line 873.\r\n3. Observe the declaration of the unused local variable `_dummyClaimData`.\r\n\r\n**Expected behavior**\r\nThe local variable `_dummyClaimData` should be either used in the subsequent code or removed if it is unnecessary.\r\n\r\n**Environment Information:**\r\n- Operating System: [e.g. Ubuntu 20.04]\r\n- Package Version (or commit hash): [op-node v1.9.0]\r\n\r\n**Configurations:**\r\n\r\n**Logs:**\r\n```plaintext\r\nWarning (2072): Unused local variable.\r\n   --> test/dispute/FaultDisputeGame.t.sol:873:9:\r\n    |\r\n873 |         bytes memory _dummyClaimData = abi.encode(gasleft(), gasleft());\r\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "CLOSED", 0, "siddharth0a", "2024-08-12T06:40:00Z", "2025-02-04T15:51:49Z", "2025-02-04T15:51:48Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Sbom7", 11408, "op-service/testlog: pull in upstream geth features / improvements", "The `op-service/testlog` package was forked off from the geth `testlog` package, since `testlog` is \"internal\", and cannot be relied on as dependency.\r\n\r\nAt the same time, the `testlog` in the monorepo has some opinionated improvements, like padding/alignment of filenames that are prefixed by the underlying test-logger.\r\n\r\nUpstream, there are some buffer / locking related improvements, which we can merge back in.\r\n\r\nSince the original fork, the `slog` package also became a thing in Go, and some features/flexibility of that may be nice to integrate also, if not already done in Geth.\r\n", "OPEN", 0, "protolambda", "2024-08-08T22:11:41Z", "2025-02-04T01:44:33Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6SUdLS", 11400, "op-challenger: Enhance run-trace subcommand to check EVM step result", "`op-challenger run-trace` subcommand allows repeatedly running VM implementations to verify real chain data as part of continuously testing that the VM and fault proof program correctly validate the chain.  However this only tests the native implementation of the FP VM, not the EVM version.\r\n\r\nGiven the EVM version is significantly slower, executing every instruction in the EVM isn't realistic, however executing a sampling of transactions would be viable.\r\n\r\n* Add a `--evm-execution-interal` option to the `run-trace` subcommand to allow users to specify an interval to execute EVM instructions and confirm they match the native result.  This should accept an integer - ie 10000 to execute every 10,000th step in the EVM\r\n* Adapt the execution of of the VM to create a proof file at the specified interval\r\n* For each proof file, execute it using the on-chain VM (the use the actual `vm()` deployed on chain)\r\n* Skip executing steps that require a preimage (to avoid having to pay to upload the preimage)", "OPEN", 0, "ajsutton", "2024-08-08T04:18:06Z", "2025-02-04T02:27:50Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6R5uOv", 11351, "alchemy_getTransactionReceipts erroneously called on Holesky L1", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nWhen using the Holesky network as L1, the system unnecessarily calls the Alchemy-specific RPC method alchemy_getTransactionReceipts. This method is not supported by the current RPC provider, resulting in errors and potential performance issues. This behavior is not observed with other networks.\r\n**Steps to Reproduce**\r\nConfigure the system to use Holesky network as L1.\r\nRun the node or the relevant part of the system that fetches transaction receipts.\r\nMonitor the RPC calls made to the L1 node.\r\nObserve that alchemy_getTransactionReceipts is being called, resulting in a \"method not found\" error.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\nOperating System: [e.g. Ubuntu 20.04]\r\nPackage Version: [e.g. optimism v1.7.7]\r\n\r\n**Configurations:**\r\nL1 chain information\r\nL1_CHAIN_ID=17000\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n<img width=\"931\" alt=\"image\" src=\"https://github.com/user-attachments/assets/36cb04cf-af81-48aa-b079-e61450e8e23b\">\r\n{ \"jsonrpc\": \"2.0\", \"id\": 22895, \"error\": { \"code\": -32601, \"message\": \"method not found\", \"data\": { \"method\": \"'alchemy_getTransactionReceipts' does not exist/is not available\" } } }\r\n\r\n**Additional context:**\r\nThis issue seems to be specific to the Holesky network configuration. Other L1 networks do not exhibit this behavior. The problem might be in the method selection logic for fetching receipts, which could be incorrectly defaulting to Alchemy methods for the Holesky network.\r\n\r\n---\r\n\r\n**relevant code snippet**\r\nhttps://github.com/ethereum-optimism/optimism/blob/v1.7.7/op-service/sources/receipts_rpc.go#L73-L101\r\nThe PickReceiptsMethod function might need to be reviewed to ensure it's not selecting Alchemy methods for non-Alchemy RPC endpoints.\r\n\r\n", "OPEN", 0, "siddharth0a", "2024-08-05T07:32:56Z", "2025-02-04T15:51:23Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6RzzNa", 11347, "ARM golang images produce `exec format error`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nLoading the go binary on golang release docker images, such as [us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.8.0](https://us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.8.0), produces `exec format error` on arm64 nodes\r\n\r\nOther binaries on the image (ex. `/bin/sh`) are properly compiled for arm.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Using an arm64 machine\r\n2. run op-node docker image: `docker run -it --rm us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.8.0`\r\n3. Returns `exec /usr/local/bin/op-node: exec format error`\r\n\r\nnote: this is different output from the usual error on x86_64 `CRIT Application failed                       message=\"failed to setup: unable to create the rollup node config: flag l1 is required\"`\r\n\r\n**Expected behavior**\r\nWhen running the above command, should produce same error as x86_64 (indicating that the binary was successfully interpreted)\r\n\r\n**Environment Information:**\r\n - Operating System: Ubuntu 22.04.4 LTS\r\n - Package Version (or commit hash): us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.8.0, likely affects other golang docker images\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "dbeal-eth", "2024-08-03T10:03:23Z", "2025-02-04T23:23:08Z", "2025-02-04T23:23:06Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6RzFBE", 11346, "create disputegame in devnet error", "<!--\r\n\r\nNeed help?\r\n\r\nRecently, I want to know how to create dispute game in local devnet. so I launched a devnet in local by https://github.com/ethpandaops/optimism-package. \r\n\r\nWhat can I do to make my call create() successful in local devnet?\r\n\r\n-->\r\n\r\n**Bug Description**\r\nall process in my local devnet:\r\nIt`s always throw an error when I invoke create method in DisputeGameFactory.sol. The error like this:\r\n<img width=\"1290\" alt=\"image\" src=\"https://github.com/user-attachments/assets/19fb02f8-cbd5-49e2-a824-419ee3ffe347\">\r\n\r\ndecode transaction:\r\n`\r\n  code: 3,\r\n  data: '0x6a6bc3b2',\r\n  url: 'http://localhost:32773',\r\n  body: '{\"method\":\"eth_call\",\"params\":[{\"gas\":\"0x493df\",\"gasPrice\":\"0x3b9aca07\",\"nonce\":\"0x1\",\"value\":\"0x0\",\"from\":\"0x8943545177806ED17B9F23F0a21ee5948eCaa776\",\"to\":\"0x8d8C34f63e9812d862CE46AC302ec0D7F72742B6\",\"data\":\"0x82ecf2f60000000000000000000000000000000000000000000000000000000000000000bf0ff8bce299cb60b271e079e7ed8df825cadb5a733b777cda2c00cefc01c430000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000320\"},\"latest\"],\"id\":44,\"jsonrpc\":\"2.0\"}',\r\n  responseText: '{\"jsonrpc\":\"2.0\",\"id\":44,\"error\":{\"code\":3,\"message\":\"execution reverted\",\"data\":\"0x6a6bc3b2\"}}\\n'\r\n`\r\n\r\nSo I found  '0x6a6bc3b2' means AnchorRootNotFound(),  and I found this error throw by FaultDisputeGame.sol\r\n<img width=\"958\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6dec7b95-f3e4-4267-90fd-c8d36229ab10\">\r\n\r\nWhen create() method in DisputeputeGamesFactory.sol was invoked, it will invoke initialize() in FaultDisputeGame.sol.\r\n\r\n<img width=\"850\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ace5d08c-f36b-44d7-96d6-7f11bece77a4\">\r\n\r\nCombining the above information, I find that the error reported by executing the create() method is caused by the fact that there is no data in anchors.\r\n\r\n**Steps to Reproduce**\r\n<img width=\"1135\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b4f1d52e-6c38-4e54-89d0-ab764e7fa6b8\">\r\n\r\n\r\n**Expected behavior**\r\nThe result I expect is to create a disputegame correctly, but it is not.\r\n\r\n**Environment Information:**\r\n - Operating System: [MacOS]\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\n\r\n the devnet was launched by https://github.com/ethpandaops/optimism-package\r\n\r\nmy devnet config:\r\noptimism_package:\r\n  participants:\r\n    - el_type: op-geth\r\n      cl_type: op-node\r\nethereum_package:\r\n  participants:\r\n    - el_type: geth\r\n  network_params:\r\n    preset: minimal\r\n  additional_services:\r\n    - dora\r\n    - blockscout\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "zhouop0", "2024-08-03T04:41:02Z", "2025-02-04T15:46:59Z", "2025-02-04T15:46:57Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6RlQQH", 11304, "op-proposer|batcher: refactor waitNodeSync so it doesn't block RPC req/res", "Context here: https://github.com/ethereum-optimism/optimism/pull/11192#issuecomment-2243047612", "CLOSED", 0, "bitwiseguy", "2024-08-01T13:26:15Z", "2025-02-04T15:49:33Z", "2025-02-04T15:49:33Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6RV0sI", 11282, "Interop: op-e2e test to finalize two L2s attached to the same L1", "Test that two L2s attached to the same L1 can finalize, even when cross-L2 messages are included.", "CLOSED", 0, "protolambda", "2024-07-30T18:17:49Z", "2025-02-03T15:40:00Z", "2025-02-03T15:39:59Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6PmW4T", 11152, "op-node: event-system customizability and plugins (ideas)", "The op-node core consists of an event-broadcast system:\r\n- Derivers: process events\r\n- Emitters: output events\r\n\r\nThrough these events, the op-node sub-systems communicate tasks like block-processing, block-derivation from the DA, sequencing, etc.\r\n\r\nThe deriver/emitter is registered through `event.System`,  which can execute these components either synchronously (current default), or in parallel (work in progress).\r\n\r\nThe components are \"registered\" with the system by name. This makes it possible to attribute metrics to each sub-system, and unregister as necessary.\r\n\r\n### Plugins\r\n\r\nThis may be the beginning of a plugin-system; performing and triggering additional tasks by monitoring and emitting events is trivial.\r\n\r\nThe question is just how we load additional event derivers/emitters.\r\n\r\nOne option may be with Go plugins, to allow runtime customization. A Go plugin can be a DLL type file, auto-discovered in a directory by the op-node, and declare some global function as access-point to register new event-derivers/emitters from. Go plugins could be developed outside of the monorepo, import the monorepo as library, and utilize all the event/plugin types as necessary.\r\n\r\nThe drawback of Go plugins are the challenges with distribution; plugins are not packaged up with docker-images, or automatically platform-compatible. Still, runtime customization does open up a lot of extensibility, while keeping the core stack unified in the main repository. This may outweigh the distribution challenges. Besides, if the op-node docker image has a standard mounting point for a plugin-directory, and if a plugin is distributed as a bundle with each platform target, then it's relatively simple to work with.\r\n\r\nBased on demand we may start a design doc in the [design-docs](https://github.com/ethereum-optimism/design-docs) repository to further expand on the idea.\r\n\r\n### Event deriver/emitter composition\r\n\r\nNot all plugins are additive however, some may want to *replace* certain subsets of functionality.\r\nUnregistering/registering complete sub-systems might be too much, if only small things have to change.\r\n \r\nTo do so, we may want to change the event-deriver interface.\r\n\r\nFrom:\r\n```go\r\nfunc (m *myDeriver) OnEvent(ev event.Event) bool {\r\n   switch ev.(type) {\r\n    case FooEvent: ...\r\n    case BarEvent: ...\r\n  }\r\n}\r\n```\r\nTo something more like:\r\n```go\r\nfunc (m *myDeriver) Setup(sys event.System) bool {\r\n  event.Register[FooEvent](sys, \"foo-handling\", func(ev FooEvent) {\r\n    ...  // replaces existing \"foo-handling\"\r\n  })\r\n  event.Register[BarEvent](sys, \"bar-handling-my-extension\", func(ev BarEvent) {\r\n    ... // net-new event handler, to extend regular \"bar-handling\"\r\n  })\r\n}\r\n```\r\nThis would enable a finer level of detail, while also being more explicit about exactly *which* events a deriver needs to listen to. This way we can drop the \"bool\" return parameter, and possibly reduce event-processing overhead (no broadcast to derivers that just ignore the event).\r\n\r\n### Permissions / metadata\r\n\r\nIf we are going with plugins, we may want the plugin to pre-declare which event types it will process and emit. And then enforce the input/output limitations to the plugin.\r\n\r\nThis way we can tell if a plugin is just listening to forkchoice-updates, or actually emitting engine-instructions.\r\n\r\nDifferent event types could be declared, and categorized by *how they affect the op-node*, such that we can have standard-compatible extensions, as well as *consensus-breaking* extensions (for custom OP-Stack chains), or e.g. *plasma specific* extensions. This is similar to how apps in app-stores request system permission, and the user can trust that the app does not break their expectations. Or in OP-Stack context, that the plugin is compatible with a certain blockspace charter.\r\n\r\n", "OPEN", 0, "protolambda", "2024-07-15T16:54:13Z", "2025-10-01T14:34:28Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6PfJAA", 11144, "make `BuildL2Genesis` also check implementation contract ", "Currently [`BuildL2Genesis`](https://github.com/ethereum-optimism/optimism/blob/d091bb33ceba0931205584d88b8c2bd84404e466/op-chain-ops/genesis/layer_two.go#L67) only checks the proxy contract exists in genesis alloc, it should also check the implementation contract exists for enabled predeploy contracts.\r\n\r\nThe precondition of doing this is there is a general method to check whether a specific predeploy is enabled instead of `useXXX`.", "OPEN", 0, "zhiqiangxu", "2024-07-14T07:24:23Z", "2025-02-04T14:11:08Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6PMeh2", 11133, "op-node: modify sequencer to act more defensively in case of sequencer doppelg\u00e4nger conflict", "If multiple sequencers are active at the same time, then we should be able to detect the incoming blocks are not locally produced, and respond defensively.\r\nWe could prefer safety over liveness here, and halt the sequencer as soon as something like this is detected.\r\n", "CLOSED", 0, "protolambda", "2024-07-11T06:57:55Z", "2025-02-04T01:45:38Z", "2025-02-04T01:45:37Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6PH6Pn", 11126, "Proposal: camelCase or ProperCase namespaced storage", "I propose the team camelCases or ProperCases all namespaced storage moving forward to follow Solidity naming conventions.\r\n\r\nI've mentioned before that contracts across this repo have varying namespace conventions. However, I suggest moving forward a proper casing convention is followed.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/69d2d47b0f4ea0a41905b0ef52f3fa343ea7633e/packages/contracts-bedrock/src/libraries/GasPayingToken.sol#L29", "CLOSED", 0, "pegahcarter", "2024-07-10T16:35:14Z", "2025-02-04T14:13:04Z", "2025-02-04T14:13:02Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6PA8e6", 11121, "op-node: sequencer does not check op-conductor on node startup", "When the sequencer is first initialized, it takes the sequencing enabled & active status from the regular op-node config and state-persistence, but doesn't additionally check the leader-status with the conductor like it does upon sequencer start/stop.\r\nIs this intentional? Should we make it check with the conductor, before allowing the sequencer to continue?\r\n\r\nAs part of the events-refactor of the sequencer code-path I noticed this, and I am wondering if it should change or not.\r\nSee #10991 \r\n\r\n", "CLOSED", 0, "protolambda", "2024-07-09T23:11:15Z", "2025-02-04T01:44:12Z", "2025-02-04T01:44:12Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6O4gXB", 11107, "op-node: failed p2p sync request, cancelling p2p sync range request", "I was setting up full node with op-node and op-geth and syncing with snap. Suddenly, I got the following error, and the block height stopped increasing.\r\n```\r\n# op-node logs\r\n=2024-07-09T04:57:52+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x13c772ae6755a6655f186c813dbec0606b6aff97e9ab01884d4962965240a24a:122450124\r\nt=2024-07-09T04:57:52+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xb6a9a9c6382b3cb4ef4c5bfaed40fcc8b33cf59aa84628b978c6ec56d848b140:122450123\r\nt=2024-07-09T04:57:52+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xd9fd1c269f69062c4394daf5dd0e10074049c977a768b1fa098fdd1fb521fafc:122450122\r\nt=2024-07-09T04:57:52+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x18ad0c1d6e2c8a9f02d6b494656cfc1373dde636c6d4b18b29f3135143d3e054:122450121\r\nt=2024-07-09T04:57:53+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmVQEs22iF85no85Vf1xudTLC5ovZ5YdijxkZoPrTZZNRR\r\nt=2024-07-09T04:57:53+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAmDzdJ2aupdsshYr8JbsVKd1qKgUwmT3YNSLtazT6Eq7AD num=122450109 err=\"failed to read result part of response: stream reset\"\r\nt=2024-07-09T04:57:53+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAmTrP55nReSSHC8seJ29DFg1vQKmFXhtdW4GsSkXBPgHSv num=122450107 err=\"failed to read result part of response: stream reset\"\r\nt=2024-07-09T04:57:53+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAm3j3RtmpZHoetrficESSCrofiRcMACRdULHoruRyjmtdu num=122450104 err=\"peer failed to serve request with code 1: not found\"\r\nt=2024-07-09T04:57:53+0000 lvl=warn msg=\"cancelling p2p sync range request\" peer=16Uiu2HAm3j3RtmpZHoetrficESSCrofiRcMACRdULHoruRyjmtdu rangeReqId=151\r\nt=2024-07-09T04:57:53+0000 lvl=info msg=\"connected to peer\" peer=16Uiu2HAmVQEs22iF85no85Vf1xudTLC5ovZ5YdijxkZoPrTZZNRR addr=/ip4/35.192.31.134/tcp/9222\r\nt=2024-07-09T04:57:53+0000 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAmVQEs22iF85no85Vf1xudTLC5ovZ5YdijxkZoPrTZZNRR\r\nt=2024-07-09T05:02:48+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x1195174fc4808493cc1bdbed81b1d76a396025dd576b5509ad7cf747ecfb840d:122449725\r\nt=2024-07-09T05:02:49+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAmDzdJ2aupdsshYr8JbsVKd1qKgUwmT3YNSLtazT6Eq7AD num=122449724 err=\"failed to read result part of response: stream reset\"\r\nt=2024-07-09T05:02:49+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAkwhN5dvmdh9D5hW2M5tq5WpN7e9HHWrH614uwdL51PCS6 num=122449722 err=\"peer failed to serve request with code 1: not found\"\r\nt=2024-07-09T05:02:49+0000 lvl=warn msg=\"cancelling p2p sync range request\" peer=16Uiu2HAkwhN5dvmdh9D5hW2M5tq5WpN7e9HHWrH614uwdL51PCS6 rangeReqId=225\r\nt=2024-07-09T05:02:49+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAm3j3RtmpZHoetrficESSCrofiRcMACRdULHoruRyjmtdu num=122449713 err=\"peer failed to serve request with code 1: not found\"\r\nt=2024-07-09T05:02:49+0000 lvl=warn msg=\"cancelling p2p sync range request\" peer=16Uiu2HAm3j3RtmpZHoetrficESSCrofiRcMACRdULHoruRyjmtdu rangeReqId=225\r\nt=2024-07-09T05:02:49+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAm7dhyfPKohuLyiZ2nUopuNUUdZhJSwxHymwbrGkuuJdZ7 num=122449723 err=\"failed to open stream: failed to negotiate protocol: protocols not supported: [/opstack/req/payload_by_number/10/0]\"\r\n```\r\n\r\n```sh\r\n# op-geth logs\r\n9e1d0a08bbeb1ffd586243cc8) error: missing trie node 183dd07ad0b689f0c8078224ddb86946677002b81b72549be1c9cc42a9bdfbe3 (path 02030b0b0a0b) <nil>\"\r\nWARN [07-09|04:54:48.553] Ignoring already known beacon payload    number=122,437,921 hash=289099..15ad05 age=7h17m49s\r\nWARN [07-09|04:54:48.766] Served engine_forkchoiceUpdatedV3        conn=127.0.0.1:59554 reqid=2069 duration=211.986234ms err=\"commit aborted due to earlier error: getDeleteStateObject (873c5e1b3e6f1b19e1d0a08bbeb1ffd586243cc8) error: missing trie node 183dd07ad0b689f0c8078224ddb86946677002b81b72549be1c9cc42a9bdfbe3 (path 02030b0b0a0b) <nil>\"\r\nWARN [07-09|04:54:59.203] Ignoring already known beacon payload    number=122,437,921 hash=289099..15ad05 age=7h18m\r\nWARN [07-09|04:54:59.412] Served engine_forkchoiceUpdatedV3        conn=127.0.0.1:59554 reqid=2073 duration=208.260623ms err=\"commit aborted due to earlier error: getDeleteStateObject (873c5e1b3e6f1b19e1d0a08bbeb1ffd586243cc8) error: missing trie node 183dd07ad0b689f0c8078224ddb86946677002b81b72549be1c9cc42a9bdfbe3 (path 02030b0b0a0b) <nil>\"\r\nWARN [07-09|04:55:09.727] Ignoring already known beacon payload    number=122,437,921 hash=289099..15ad05 age=7h18m10s\r\nWARN [07-09|04:55:09.966] Served engine_forkchoiceUpdatedV3        conn=127.0.0.1:59554 reqid=2077 duration=238.524579ms err=\"commit aborted due to earlier error: getDeleteStateObject (873c5e1b3e6f1b19e1d0a08bbeb1ffd586243cc8) error: missing trie node 183dd07ad0b689f0c8078224ddb86946677002b81b72549be1c9cc42a9bdfbe3 (path 02030b0b0a0b) <nil>\r\nWARN [07-09|04:54:59.203] Ignoring already known beacon payload    number=122,437,921 hash=289099..15ad05 age=7h18m\r\n9e1d0a08bbeb1ffd586243cc8) error: missing trie node 183dd07ad0b689f0c8078224ddb86946677002b81b72549be1c9cc42a9bdfbe3 (path 02030b0b0a0b) <nil>\"\r\nWARN [07-09|04:56:13.185] Ignoring already known beacon payload    number=122,437,921 hash=289099..15ad05 age=7h19m14s\r\nWARN [07-09|04:56:13.409] Served engine_forkchoiceUpdatedV3        conn=127.0.0.1:59554 reqid=2101 duration=223.655459ms err=\"commit aborted due to earlier error: getDeleteStateObject (873c5e1b3e6f1b19e1d0a08bbeb1ffd586243cc8) error: missing trie node 183dd07ad0b689f0c8078224ddb86946677002b81b72549be1c9cc42a9bdfbe3 (path 02030b0b0a0b) <nil>\"\r\n```\r\n\r\n```sh\r\nnohup op-node \\\r\n  --l1={{ }} \\\r\n  --l1.rpckind=standard \\\r\n  --l1.beacon={{ }} \\\r\n  --l2=http://localhost:5555 \\\r\n  --l2.jwt-secret=/mnt/op-geth/jwt.txt \\\r\n  --network=op-mainnet \\\r\n  --rpc.addr=127.0.0.1 \\\r\n  --rpc.port=9545 \\\r\n  --metrics.enabled=true \\\r\n  --metrics.addr=0.0.0.0 \\\r\n  --metrics.port=9091 \\\r\n  --syncmode=execution-layer >> /mnt/op-node/node.log &\r\n```\r\n\r\n```sh\r\nnohup geth \\\r\n  --metrics \\\r\n  --metrics.expensive \\\r\n  --metrics.addr=0.0.0.0 \\\r\n  --metrics.port=9090 \\\r\n  --http \\\r\n  --http.port=8545 \\\r\n  --http.addr=0.0.0.0 \\\r\n  --http.vhosts=\"*\" \\\r\n  --http.corsdomain=\"*\" \\\r\n  --ws \\\r\n  --ws.port=8546 \\\r\n  --ws.addr=0.0.0.0 \\\r\n  --ws.origins=\"*\" \\\r\n  --authrpc.addr=0.0.0.0 \\\r\n  --authrpc.port=5555 \\\r\n  --authrpc.jwtsecret=/mnt/op-geth/jwt.txt \\\r\n  --verbosity=3 \\\r\n  --syncmode=full \\\r\n  --rollup.sequencerhttp=\"https://mainnet-sequencer.optimism.io\" \\\r\n  --rollup.disabletxpoolgossip=true \\\r\n  --op-network=op-mainnet \\\r\n  --datadir=/mnt/op-geth >> /mnt/op-geth/geth.log &\r\n```\r\n\r\nWhat's the issue?", "CLOSED", 0, "vataops", "2024-07-09T05:33:48Z", "2025-02-04T14:05:06Z", "2025-02-04T14:04:58Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Ow2vk", 11093, "[Tracker] EVM Engineering: solidity code coverage", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nIt would be ideal to have some form of code coverage for the solidity code that is reliable. Foundry does have code coverage, but we hit stack too deep issues when compiling for it (because it turns optimizations off). This means that we do not have any form of reliable code coverage right now for the solidity contracts. This results in a lot of extra work for devs doing code review - they must manually check that code paths have been covered.\r\n\r\nOnce we fix the ability to use foundry code coverage, we could set something up like what uniswap v4 uses. https://github.com/Uniswap/v4-core/blob/main/.github/workflows/coverage.yml. It is a simple github action that automatically posts the outputs of `forge coverage` into a github comment on a pull request. ", "CLOSED", 0, "tynes", "2024-07-08T09:50:06Z", "2025-02-05T14:56:43Z", "2024-12-16T15:52:49Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Npmb5", 11027, "Interop: op-supervisor: Prune database when resetting op-node beyond the last indexed unsafe block", "When OP Supervisor finds that a node is not compatible with the L1 or L2 data already present in the database, it initiates a reset against that Node:\nhttps://github.com/ethereum-optimism/optimism/pull/13641\n\nThis walkback reset strategy will push the op-node backwards until it reaches a common ancestor between Supervisor and Node.\n\nHowever! If the Node is incompatible with the Supervisor due to an *Unsafe (L2) Reorg*, walking back the Node is not enough. This is because, even though the Node is now ready to reprocess this block range, the Log Events which were already indexed to the Supervisor come from the chain which is now reorg'd out.\n\nBecause the Node already supplied logs, and because those logs are wrong, the next action that the newly reset Node might take could be seen as inconsistent against the (incorrect) Event Database in the Supervisor. This would trigger another reset cycle.\n\nThe correct behavior we would want is:\n- When rewinding the OP-Node, also prune the Events Database (and probably the derivation databases?)\n- When rewinding is complete, re-index the log data, and redo all downstream calculations (cross-unsafe, etc)\n\n\n(Original Ticket Body Below)\n```\nWhen op-supervisor starts up, it needs to check if a reorg has happened on any of its chains that invalidates the logs it has already written.\n\nNeed to think it through carefully, but most likely should find the latest search checkpoint that is still canonical in the log db and rollback to that.  The log fetching pipeline should then begin fetching from that block.\n```", "CLOSED", 0, "ajsutton", "2024-06-27T00:41:01Z", "2025-02-04T01:43:01Z", "2025-02-04T01:42:59Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6NoZBk", 11016, "op-node: EL sync mode prevents active sequencer start-up", "Currently, if an active sequencer restarts with `--syncmode=execution-layer`, it doesn't start sequencing again.\r\n\r\nInvestigation by @trianglesphere:\r\n> The codepath which triggered this is as follows:\r\n> \r\n> - If syncmode=EL on startup, the engine controller\u2019s internal state is set to\u00a0`syncStatus = syncStatusWillStartEL`\r\n> - The engine controller relies on unsafe blocks to trigger the move to\u00a0`syncStatus = syncStatusFinishedEL`\u00a0. While\u00a0`syncStatus == syncStatusWillStartEL`\u00a0, IsEngineSyncing is always true\r\n> - At startup, the derivation pipeline is also reset therefore\u00a0`derivation.EngineReady()`\u00a0always returns false until the pipeline can be stepped through enough\r\n> - Therefore if the active sequencer restarts, it stalls because it needs unsafe blocks to go through the startup phase, but cannot produce unsafe blocks until it goes through the startup phase", "CLOSED", 0, "sebastianst", "2024-06-26T20:08:40Z", "2025-02-04T02:08:24Z", "2025-02-04T02:08:23Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Nn9uk", 11014, "op-node: improve safe <> derived-from sync status coupling", "Currently the coupling is implied by `CurrentL1` (last  derived data) and `SafeL2` (last L2 safe head).\r\nBut since the safe-block just reflects the engine, which is not atomically coupled to the derivation, this can be inaccurate data.\r\n\r\nInstead, we can add a `DerivedSafe` and `DerivedFrom` attribute to the `SyncStatus` (or to a separately managed attribute, to not make SyncStatus larger than it already is) for the latest derived safe-block.\r\nThis data is strictly coupled, and emitted whenever the safe-block changes, with `engine.SafeDerivedEvent`.\r\nWe can then update the op-challenger to use this more accurate information.\r\n", "CLOSED", 0, "protolambda", "2024-06-26T18:57:59Z", "2025-02-04T01:40:56Z", "2025-02-04T01:40:55Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6M-icU", 10968, "devnet: follow-ups to Ecotone devnet", "Collecting some follow ups to https://github.com/ethereum-optimism/optimism/pull/9117\r\n\r\n- [ ] Read URLs from `docker-compose.yml` in `op-e2e/devnet` tests\r\n- [ ] Remove deploy-config modifications from `op-e2e/config.init()`\r\n- [ ] Enabling L1 Cancun in the `L1Replica_AltL1Sync` tests\r\n- [ ] `LargeL1Gaps` test with Ecotone at genesis\r\n- [ ] remove `packages/devnet-tasks`", "CLOSED", 0, "sebastianst", "2024-06-20T20:24:28Z", "2025-02-04T21:03:21Z", "2025-02-04T21:03:21Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6MSi5w", 10833, "OP-Plasma wrong `CommitmentType` with customDA", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n\r\nWhen we followed the tutorial \"How to run an OP Stack Chain in Alt-DA Mode w/ Custom DA\" for deployment, we encountered the following issue: the op-batcher can send data to the DA normally, and the DA can also receive the data properly. However, the type of commitment returned by the DA is incorrect: `Keccak256CommitmentType`. After analyzing the source code of the DA, we found that this is because the server side did not set the commitmentType correctly. We have reported this issue to the eigenda and celestia team. They have answered, and we're continue following this up. Below is the relevant code:\r\n\r\n- https://github.com/ethereum-optimism/optimism/blob/926ba71288ec558b2acc6b1b6399e66e73ab0fcc/op-plasma/daclient.go#L133-L136\r\n- https://github.com/ethereum-optimism/optimism/blob/develop/op-batcher/batcher/driver.go#L505-L513\r\n- https://github.com/celestiaorg/optimism/blob/541dbf239bb8182d05359f579831f4a9c2a64c06/op-plasma/godaserver.go#L128C30-L129C1\r\n\r\n\r\n**Environment Information:**\r\n - Package Version (or commit hash): op-node/v1.7.7-rc.2\r\n", "CLOSED", 0, "wenxing-alt", "2024-06-14T16:03:18Z", "2025-02-04T14:09:08Z", "2025-02-04T14:09:07Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6MirPP", 10856, "Interop: op-supervisor tracker", "Tracking issue for the work required to get op-supervisor to a minimum viable implementation.\r\n\r\n## Required For E2E Tests + Devnet 1\r\n* [x]  ethereum-optimism/optimism#10857 \r\n* [x] https://github.com/ethereum-optimism/optimism/issues/10999\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11023\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11024\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11028\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11029\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11031\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11030\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11308\r\n\r\n## Required For DevNet 2\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11044\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11026\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11027\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11091\r\n\r\n## Post-Devnet\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11032\r\n* [x] https://github.com/ethereum-optimism/optimism/issues/11105", "CLOSED", 0, "protolambda", "2024-06-04T17:52:06Z", "2025-02-04T01:43:01Z", "2024-11-25T15:09:06Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6K90QR", 10725, "op-node: cleanup error-handling in derivation", "During the refactor of the derivation/driver code (See https://github.com/ethereum-optimism/optimism/pull/10599) @ajsutton identified that the error handling is difficult to follow / getting dropped silently in some cases.\r\n\r\nSeparate from the initial refactor work we can change it to more clearly branch/return, and handle all error cases (even if the errors are not critical, at least they can be logged).\r\n\r\nSee:\r\n- errors returned by `TryBackupUnsafeReorg`\r\n- errors returned by `TryUpdateEngine`\r\n- the return-if-not-EOF (nil or non-EOF error) cases\r\n\r\n", "CLOSED", 0, "protolambda", "2024-06-03T15:30:51Z", "2025-10-01T14:33:55Z", "2025-10-01T14:33:55Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6K9c0z", 10723, "op-plasma: refactor finalization tracking", "> I think the awkwardness here is due to the fact that how we track safety for plasma mode is not accurate. Long term we should add a field to the safety/finality data which is Optimistic L1 Derivation Block for Plasma mode which is the L1 origin when the block was derived (roughly the L1 inclusion block of the commitment). Then later we should mark it as fully safe when the commitment can no longer be challenged. That would set the L1 Derivation block. Then we can apply finality as normal (modulo the large lookback period).\r\n\r\n> Right now we shove the Optimistic L1 Derivation block into the safe block for the finality data & have to delay the L1 finalization signal until the block in which a commitment becomes no longer able to be challenged becomes finalized.\r\n\r\nSee https://github.com/ethereum-optimism/optimism/pull/10580#discussion_r1618968347\r\n\r\nThe finality signal being re-routed to the plasma backend, and then later, with delay, being received for regular finalization, is something that can be refactored to make it more accurate.\r\n", "CLOSED", 0, "protolambda", "2024-06-03T14:50:01Z", "2025-02-04T01:35:35Z", "2025-02-04T01:35:35Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6IjpAs", 10506, "Faster `op-node` startup on replicas of OP Stack blockchains", "**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen I have an existing replica of an OP Stack chain, and I restart `op-node` after a break, it takes a very long time to start advancing again. While waiting I get a lot of `op-node` log entries like this:\r\n\r\n```\r\nt=2024-05-11T12:37:23-0500 lvl=info msg=\"Walking back L1Block by hash\" curr=0xcc342fa25773b876a0df0b1061fb30d95929ba31a2470e12197fd363512c6be1:19602253 next=0x2077592483faaa035a1f7aeb4a39fc66d149e8efc4a8d0cb4a56bec06e061b8a:19602252 l2block=0xe68165a993b32282d4fece1e7c079e1664226580caea4098514a5356604044bf:144487\r\n```\r\n\r\nWhile it is looking for the L1 block from which to start retrieving state.\r\n\r\n**Describe the solution you'd like**\r\n\r\n`op-node` can ask `op-geth` what is the latest L1 block and start looking from there, all it takes is doing the equivalent of\r\n\r\n```\r\ncast call 0x4200000000000000000000000000000000000015 \"number()\" | cast to-dec\r\n```\r\n\r\nThe next input commitment is (I use Redstone) should be after that point, but not very far from it.", "CLOSED", 0, "qbzzt", "2024-05-11T19:50:04Z", "2025-02-04T02:09:27Z", "2025-02-04T02:09:26Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Mq-Lg", 10916, "Improve span batch limit tests", "\r\nIf we add `MaxSpanBatchElementCount` to the chain spec, we can test the sad-path span batch decoding code better with black-box tests. Where we consume the spec, we would consume an interface of the value getters that we need to set low limits during tests.\r\n\r\nFollowing tests should be improved:\r\nhttps://github.com/ethereum-optimism/optimism/blob/a8e571444e8f2376125bd60919ab8c196857d9c3/op-node/rollup/derive/span_batch_txs_test.go#L507-L533\r\nhttps://github.com/ethereum-optimism/optimism/blob/a8e571444e8f2376125bd60919ab8c196857d9c3/op-node/rollup/derive/span_batch_test.go#L522-L604\r\n\r\n* make them more black-box, by creating span batches with a mocked spec that allows higher number of elements, then lower the limits and test all paths that should return `ErrTooBigSpanBatchSize`\r\n\r\n\r\n_Source comment @sebastianst in https://github.com/ethereum-optimism/optimism/pull/10357#discussion_r1592482167_\r\n            ", "CLOSED", 0, "sebastianst", "2024-05-07T17:46:38Z", "2025-02-05T14:53:22Z", "2025-02-05T14:53:22Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Fk5hD", 10141, "Get a public docker image for Lattice Sentinel", "Repo: https://github.com/latticexyz/sentinel\r\nWe need this for the devnet", "CLOSED", 0, "trianglesphere", "2024-04-12T22:12:24Z", "2025-02-04T02:10:02Z", "2025-02-04T02:10:02Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6DvCB8", 9987, "op-node \"--p2p.advertise.ip\" config seems not working", "**Bug Description**\r\n\r\nMy node is running behind a NAT, so I have configured the `--p2p.advertise.ip` option to the my external IP address, but the `opp2p_self` call to op-node doesn't report the external IP I configured, but only the internal IP address:\r\n\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Configure `--p2p.advertise.ip=172.22.155.175`\r\n\r\n2.\r\n\r\ncurl request my op-node:\r\n\r\n```\r\ncurl --request POST \\\r\n  --url http://172.22.155.175:8547/ \\\r\n  --header 'Content-Type: application/json' \\\r\n  --data '{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"method\": \"opp2p_self\",\r\n  \"params\": [\r\n  ],\r\n  \"id\": 1\r\n}'\r\n```\r\n\r\n3. get response, the `addresses` field doesn't contain the ip address I configured\r\n```\r\n{\r\n\t\"jsonrpc\": \"2.0\",\r\n\t\"id\": 1,\r\n\t\"result\": {\r\n\t\t\"peerID\": \"16Uiu2HAmD1spbuKNfjimLSEay5Jew8BraGEoM6TfwHEGx8E1qSh6\",\r\n\t\t\"nodeID\": \"9e0f54790426784122f27215789319e399d24d6d70937108392f2923b619235b\",\r\n\t\t\"userAgent\": \"\",\r\n\t\t\"protocolVersion\": \"\",\r\n\t\t\"ENR\": \"enr:-J-4QFBU1YSd5IjpTNT1gFST5QRaboFjO4lCUQyhkIcjYlTIOTQqPJ7PbHfPbcWw0B9SYwXBXzRnE9cS5miFtVjS9aGGAY5-6-6vgmlkgnY0gmlwhKwWm6-Hb3BzdGFja4XEr9MJAIlzZWNwMjU2azGhAwVZ0ISbDnDpQZYykxOV514-IXQn2dpUCVohWUKR59B5g3RjcIIkBoN1ZHCCvF0\",\r\n\t\t\"addresses\": [\r\n\t\t\t\"/ip4/10.0.11.2/tcp/9222/p2p/16Uiu2HAmD1spbuKNfjimLSEay5Jew8BraGEoM6TfwHEGx8E1qSh6\",\r\n\t\t\t\"/ip4/127.0.0.1/tcp/9222/p2p/16Uiu2HAmD1spbuKNfjimLSEay5Jew8BraGEoM6TfwHEGx8E1qSh6\"\r\n\t\t],\r\n\t\t\"protocols\": null,\r\n\t\t\"connectedness\": 0,\r\n\t\t\"direction\": 0,\r\n\t\t\"protected\": false,\r\n\t\t\"chainID\": 0,\r\n\t\t\"latency\": 0,\r\n\t\t\"gossipBlocks\": true,\r\n\t\t\"scores\": {\r\n\t\t\t\"gossip\": {\r\n\t\t\t\t\"total\": 0,\r\n\t\t\t\t\"blocks\": {\r\n\t\t\t\t\t\"timeInMesh\": 0,\r\n\t\t\t\t\t\"firstMessageDeliveries\": 0,\r\n\t\t\t\t\t\"meshMessageDeliveries\": 0,\r\n\t\t\t\t\t\"invalidMessageDeliveries\": 0\r\n\t\t\t\t},\r\n\t\t\t\t\"IPColocationFactor\": 0,\r\n\t\t\t\t\"behavioralPenalty\": 0\r\n\t\t\t},\r\n\t\t\t\"reqResp\": {\r\n\t\t\t\t\"validResponses\": 0,\r\n\t\t\t\t\"errorResponses\": 0,\r\n\t\t\t\t\"rejectedPayloads\": 0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n", "CLOSED", 0, "cifer76", "2024-03-27T08:16:04Z", "2025-02-04T02:12:10Z", "2025-02-04T02:12:09Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Ch2IZ", 9881, "Duplicate Naming Convention between L1 `ProxyAdmin` and L2 `ProxyAdmin`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nI am now experimenting deploy OPstack 's smart contract and getting used to the solidity deployment script. I found that I need to deploy `ProxyAdmin` contract on L1 where `save(string memory _name, address _deployed) ` is used behind the scene, and such saved address could be query later by  `getAddress(string memory _name)`.\r\n\r\nSo, when I write new logics in solidity script and try to use `getAddress('ProxyAdmin')` in order to query L1 address , it always wrongly ends up to L2 address in case the L1's `ProxyAdmin` has never been saved before.\r\n\r\nThis could lead to some confusion and difficulty, especially developing smart contract on top of OPstack.\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nChange the convention of `Predeploy` contracts on L2 . eg. It must start with L2_XX like `L2_ProxyAdmin`.\r\n\r\n\r\n**Describe alternatives you've considered**\r\n\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\nWe could add new separate getter function with modified like `getL2Address(string memory _name)`\r\n<img width=\"680\" alt=\"Screenshot 2567-03-16 at 17 49 34\" src=\"https://github.com/ethereum-optimism/optimism/assets/22450628/4933ba45-2514-4e3a-81cf-8d92d7027d6d\">\r\n", "CLOSED", 0, "Ratimon", "2024-03-16T10:53:39Z", "2025-02-04T15:12:39Z", "2025-02-04T15:12:38Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6Mq_1p", 10925, "Insert unsafe blocks in order while performing EL sync", "Geth is not able to cleanly handle gaps in blocks while performing EL sync. During snap sync it logs err chain gapped, during full sync, it will log chain reorg & return early out of newPayload / FCU.\r\n\r\nThe way to implement this is to use the unsafe payload queue and the request/response protocol to backfill missing unsafe payloads. We should only be doing this close to tip so the current request/response protocol will work. Just the native unsafe payload queue will help in the case the unsafe blocks are received out of order.\r\n\r\nIn the case that op-node is restarted while op-geth stays up, op-node may want to start inserting unsafe heads right after op-geth's current unsafe head (though IDK if there is a way to get that, maybe we have to use `eth.syncing` instead.)", "CLOSED", 0, "trianglesphere", "2024-03-08T22:12:22Z", "2025-02-04T15:35:03Z", "2025-02-04T15:35:01Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6MrAOV", 10928, "op-node: `admin_resetChain` command", "An `admin_resetChain` command that takes as argument a block number or hash, and automatically performs all necessary steps to rewind the chain to that number.\r\n\r\nCurrently, resetting a chain takes several manual steps\r\n1. stop op-node (or stop sequencing)\r\n2. call `debug_setHead` on the EL\r\n   * this will reset safe & finalized to 0 in op-geth \r\n4. Set unsafe, safe, & finalized with FCU call using op-wheel\r\n5. start op-node again, or do a `admin_resetDerivationPipeline` (and resume sequencing again)\r\n\r\nThis could all be done from op-node with an integrated admin command, which performs above steps in an integrated and consistent way.", "CLOSED", 0, "sebastianst", "2024-02-22T14:35:37Z", "2025-02-04T15:51:24Z", "2025-02-04T15:51:21Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6MrAFg", 10927, "RunNextSequencerAction considers everything an unclassified error", "While working on our recent Mainnet Unsafe Head Stall debug, I noticed that I could not find any logs for \"sequencer failed temporarily\" nor \"requiring derivation reset\"\r\n\r\nhttps://optimistic.grafana.net/goto/X5rbj92IR?orgId=1\r\nhttps://optimistic.grafana.net/goto/_G5JCr2Sg?orgId=1\r\n\r\nI believe it's because the emitted error looks like:\r\n```\r\nt=2024-02-15T04:41:17+0000 lvl=eror msg=\"sequencer failed to seal block with unclassified error\"\r\nerr=\"failed to complete building block: error (1): \r\nfailed to complete building on top of L2 chain 0x7fd0c053bf2ee546ce05f9bd1bb7fb30dbcab8707009aa34fa598cdb7b6fed9b:116186647, id: 0xc4582b2f37b293ef, error (1): \r\nfailed to insert execution payload: \r\nfailed to execute payload: \r\ncontext deadline exceeded\"\r\n```\r\n(Newlines added for clarity)\r\n\r\nand the TemporaryErr status is encoded on line two as `error (1)`, which is due to \r\n\r\n```\r\nreturn nil, errTyp, fmt.Errorf(\"failed to complete building on top of L2 chain %s, id: %s, error (%d): %w\", e.buildingOnto, e.buildingInfo.ID, errTyp, err)\r\n```\r\nhttps://github.com/ethereum-optimism/optimism/blob/08921d5c1df39c329f9ab82447ea939bc61a8784/op-node/rollup/derive/engine_controller.go#L196\r\n\r\nAnd the error check looks like\r\n\r\n```\r\n} else if errors.Is(err, derive.ErrTemporary) {\r\n```\r\nhttps://github.com/ethereum-optimism/optimism/blob/7ec23bb8583c1042aa88046244b83b85d7de5738/op-node/rollup/driver/sequencer.go#L227\r\n\r\nI'm not an expert on `errors.Is`, but I don't expect it'll figure out that `(1)` means Temporary error when it's so deeply embedded in all these other errors. ", "CLOSED", 0, "axelKingsley", "2024-02-16T23:55:27Z", "2025-02-04T13:22:56Z", "2025-02-04T13:22:54Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM5-ndun", 9436, "Create a unified way to check/update dependencies", "So `package.json` has a bunch of related scripts like `update:foundry` or `install:abigen`. Would be nice if we had a unified way of handling this stuff.\r\n\r\nI'd love to see a script that can:\r\n\r\n1. Install the correct software versions for everything.\r\n2. Verify the software versions for everything.\r\n3. Print out the current software versions for everything.\r\n\r\nThis script could optionally also take a specific dependency as an argument and apply the above 3 options to that specific dependency instead of all dependencies at once.", "CLOSED", 0, "smartcontracts", "2024-02-08T03:08:08Z", "2025-02-04T19:30:08Z", "2025-02-04T19:30:08Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6MrBH6", 10934, "txmgr: Add metric of gas parameters of first pending transaction", "To better debug the txmgr, we can add metrics for the different gas fields of the first pending transaction. The first transaction in the queue is the most important one because it blocks inclusion of all the others. Metrics of first-pending-tx should include\r\n* nonce\r\n* fee cap\r\n* blob fee cap\r\n* tip cap\r\n* number of fee bumps\r\n* elapsed time for getting tx confirmed\r\n\r\nThere might be other fields worth logging that I missed.", "CLOSED", 0, "sebastianst", "2024-01-26T14:44:20Z", "2025-02-04T17:10:42Z", "2025-02-04T17:10:42Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM57K2nT", 8851, "op-service/txmgr: Add metrics of `ExcessBlobGas`", "We should add metrics recording of the field `head.ExcessBlobGas` to `SimpleTxManager.suggestGasPriceCaps` and `queryReceipt`. \r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/optimism/pull/8760#discussion_r1442315211_\r\n            ", "CLOSED", 0, "sebastianst", "2024-01-04T22:47:39Z", "2025-02-04T15:50:23Z", "2025-02-04T15:50:23Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM57KYzG", 8841, "Force Cancel Requested Payload when calling StartBuilding again", "", "CLOSED", 0, "trianglesphere", "2024-01-04T20:54:04Z", "2025-02-04T15:30:48Z", "2025-02-04T15:30:46Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM569NLn", 8801, "fuzz & differential testing of system config update event log handling", "Requested followup to https://github.com/ethereum-optimism/optimism/pull/8785\r\n\r\nWe should break out the deserialization logic for log event handling into a public handler function and then import those handlers into our solidity [differential-testing](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/go-ffi) and use [vm.getRecordedLogs](https://github.com/foundry-rs/forge-std/blob/87a2a0afc5fafd6297538a45a52ac19e71a84562/src/Vm.sol#L394) in a fuzz test to differentially test the handlers themselves.\r\n\r\n**Additional context**\r\n\r\n", "CLOSED", 0, "roberto-bayardo", "2024-01-02T19:44:04Z", "2025-02-04T14:08:38Z", "2025-02-04T14:08:37Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM6MrBRA", 10935, "op-service:dial - Active Endpoint Provider/Active Rollup Provider - at least return an inactive sequencer", "## Context\r\n\r\nThe `ActiveL2RollupProvider` and `ActiveL2EndpointProvider` are structures in `op-service:dial` that manage `RollupClient`s (pointing to an `op-node` instance) and sometimes `EthClient`s (pointing to an `op-geth` instance) for callers, failing over as they become errored or inactive. The main use case for this is the `op-proposer` and `op-batcher` handling a ZDD of a sequencer.\r\n\r\nCurrently, though, in the scenario where all known sequencers are `Inactive` or errored, the providers don't provide any client at all. They could at least provide an `Inactive` but online client for callers. If sequencers are peered correctly, this would allow operation to continue as normal until an `Active` sequencer is found.\r\n\r\n## Solution\r\n\r\nWhen the `ActiveL2RollupProvider` or `ActiveL2EndpointProvider` finds no active sequencer, but at least one is dialable-but-inactive, return that dialable-but-inactive sequencer, rather than `nil`.\r\n\r\nThis could be an optional flag `fallbackInactive bool` to the providers' configs to control this behavior. It's not necessarily a good default, it depends on the infrastructure setup.\r\n\r\n### See Also\r\nethereum-optimism/client-pod#166\r\nhttps://github.com/ethereum-optimism/optimism/pull/8585", "CLOSED", 0, "EvanJRichard", "2023-12-19T15:34:16Z", "2025-02-04T13:37:53Z", "2025-02-04T13:37:52Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM53fyYH", 8225, "Persist RethDB instance in the `RethDBReceiptsFetcher`", "## Description\r\n\r\nThis is a follow-up to #8130, where the rethdb receipts fetcher was encapsulated in its own type `RethDBReceiptsFetcher`. This allows us now to persist a database instance/handle. The instance would replace the `dbPath string` field. It still needs to be determined how to persist the instance, since the rethdb fetcher currently opens the database on the fly on every request, and then throws away the db instance. We probably need to create a function `rdb_open_db` that returns a pointer to the instance as an unsafe Go pointer or so. And `rdb_read_receipts` would then receive this pointer instead of the db path string.\r\n\r\n## Testing\r\n\r\nExisting tests should be adapted and extended where appropriate.\r\n", "CLOSED", 0, "sebastianst", "2023-11-21T17:41:19Z", "2025-02-04T15:53:22Z", "2025-02-04T15:32:32Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM52Ck78", 8069, "Add Real-World Example Test Cases for Receipt Parsing", "To aid compatibility testing with existing and future hard forks, it is useful to add unit tests for the receipt loading code in [`op-service/sources/receipts.go`](https://github.com/ethereum-optimism/optimism/blob/8abd5df5cf3f8453c10b7d35949c6fed8fc32f41/op-service/sources/receipts.go) that confirm it can correctly parse example responses of for each type of receipt fetching method.\r\n\r\nThe test data would be captured from actual nodes and stored as test data files similar to the way the tests in https://github.com/ethereum-optimism/optimism/blob/8abd5df5cf3f8453c10b7d35949c6fed8fc32f41/op-service/sources/types_test.go work.", "CLOSED", 0, "ajsutton", "2023-11-07T01:53:49Z", "2025-02-04T02:15:37Z", "2025-02-04T02:15:36Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM52CkjW", 8068, "op-node: Better testing for P2P block gossiping validation function", "This test is what needs to be updated: https://github.com/ethereum-optimism/optimism/blob/6cce3728b7bed5e36234aeba3b773e0f97867be3/op-node/p2p/gossip_test.go#L123. \r\n\r\nRight now we only have tests for a small subset of the block validation conditions. We should extend this to test for of the conditions. We may also want to split out the portions which are P2P specific and which are payload specific.", "OPEN", 0, "trianglesphere", "2023-11-07T01:52:00Z", "2025-02-04T20:28:51Z", null, "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM51yCwP", 8027, "Location of Recent Snapshots", "**Syncing Is Too Slow**\r\nAfter Bedrock there effectively are no publicly available snapshots that are usable. The official OP Labs snapshot is 4 months out of date and the abysmal state of Optimism's syncing means any user would need to wait months for a sync to complete which is a non starter. Are there any available snapshots that are more recent or alternative ways to sync faster? Other chains offer snap sync, frankly it's hard to comprehend how this hasn't been prioritized to make this chain usable.\r\n\r\n", "CLOSED", 0, "web-dev100", "2023-11-03T12:11:05Z", "2025-02-04T02:13:20Z", "2025-02-04T02:13:20Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM51ux4N", 8022, "Optimize op-e2e: do not repeat tests unaffected by hardforks or connection-type", "Op-e2e has several environment variables that result in some duplication of test runs:\r\n- `OP_E2E_USE_SPAN_BATCH`\r\n- `OP_E2E_USE_CANYON` (not in CI?)\r\n- `OP_E2E_USE_HTTP`\r\n\r\nThese should be removed: not all op-e2e tests are actually affected by these. Instead, we should parametrize individual test-cases with the settings they need to run with.\r\n", "CLOSED", 0, "protolambda", "2023-11-02T23:31:18Z", "2025-02-04T01:34:39Z", "2025-02-04T01:34:37Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM5znalq", 7643, "`CONTRACT_ADDRESSES` does not include op devnet addresses", "`chain-constants.ts` has a mapping `CONTRACT_ADDRESSES` used to look up contract addresses for various chains. It doesn't have any values for the op devnet (chain ID 901), and so all of these have to be supplied manually by the caller. It'd be good if these were prepopulated.", "CLOSED", 0, "Arachnid", "2023-10-12T10:42:28Z", "2025-02-04T14:02:15Z", "2025-02-04T14:02:14Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM5xjvF4", 7315, "Cannon fraud proofs have debug_dbGet dependency", "I was a little unsure whether to classify this issue as a bug or a feature, so please feel free to convert.\r\n\r\nThere are a number of client diversity projects underway to bring Optimism support to Ethereum clients other than Geth.  The community seems to recognize the importance of having multiple client implementations for the health of the overall Optimism ecosystem.\r\n\r\nHowever, it seems that the Cannon fraud proofs are being built with a strong dependency on Geth specific APIs.  In particular, the `fraudproof_test.go` e2e tests seem to ultimately be using the `debug_dbGet` API.  Based on my reading of these tests, this API is not simply being used by the test, but is actually relied on by the implementation.  This feels like a serious problem because this API is not part of the formal Ethereum JSON RPC spec, so its behavior is not defined.  Additionally because there is no real versioning guarantees over the layout of the Geth database, it is also inherently not stable.\r\n\r\nI've not had a chance to really dig into exactly how this API is being used in Cannon, but based on other usage seen in the e2e tests, I suspect that its usage might be related to retrieving nodes of the Merkle Trie.  Could we instead use the `eth_getProof` API instead?  Do we need to put an EIP together for a new well specified API that other clients can implement?  Is the `debug_dbGet` usage simply intended to be transient and replaced with something else ultimately?  Is the coupling of the on-chain executing mini-Geth so tight that Cannon will never be able to be used with other Ethereum clients?\r\n\r\nIt would be great to hear some clarification on the above questions and to learn whether changes to eliminate this dependency would be welcomed.", "CLOSED", 0, "jyellick", "2023-09-20T15:03:03Z", "2025-02-04T18:58:21Z", "2025-02-04T18:58:19Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM5unkey", 6893, "Backoff when a client hits a request error in P2P sync", "In the P2P Sync code, we handle errors with the P2P request by consuming all of the available rate limits, but we would also like to wait longer before making the next request. Consuming the available rate limit is not enough because the rate limit cannot go negative & we would want to wait for a longer period of time. Some sort of mechanism which delays the next requests needs to be implemented.\r\n\r\nCode that needs to be modified:\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/fc8e68fc8060b56306402738f36c1b0145084db3/op-node/p2p/sync.go#L533-L542", "CLOSED", 0, "trianglesphere", "2023-08-18T00:19:16Z", "2025-02-04T15:16:06Z", "2025-02-04T15:16:04Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM5uPEQT", 6782, "op-node: app should should retry establishing connection with l2 node untill it suceeds", "When `op-node` is started it will halt process if connection with l2 could not be established. \r\n\r\nLog example:\r\n```\r\nt=2023-08-14T09:31:26+0000 lvl=eror msg=\"Unable to create the rollup node\"      error=\"Post \\\"http://eth-node-1:8545\\\": context deadline exceeded\"\r\nt=2023-08-14T09:31:26+0000 lvl=crit msg=\"Application failed\"                    message=\"Post \\\"http://eth-node-1:8545\\\": context deadline exceeded\"\r\n```\r\n\r\nInstead of halting processes it might be better if node keeps running and tries reconnecting with l2 node until it succeeds, and printing log messages with current status. ", "CLOSED", 0, "vladopajic", "2023-08-14T10:00:22Z", "2025-02-04T15:57:49Z", "2025-02-04T15:57:44Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDODjvEJM5S5DiU", 3606, "Optimism - Release linux/arm64 builds", "## Description\r\nRelease`linux/arm64` builds for optimism services, such as, batch-submitter-service, data-transport-layer, deployer, fault-detector, gas-oracle, hardhat, l2geth and message-relayer,\r\n\r\n## Why this feature is important\r\n- Take advantages of running the nodes on top Arm CPU architecture machines, such as, AWS Graviton2/3. The main benefits are costs reduction and performance increase. For further details consult: https://aws.amazon.com/ec2/graviton and https://about.gitlab.com/blog/2021/08/05/achieving-23-cost-savings-and-36-performance-gain-using-gitlab-and-gitlab-runner-on-arm-neoverse-based-aws-graviton2-processor\r\n\" Our latest cost analysis and performance benchmarks show that customers can realize cost savings of up to 23% and performance gains of up to 36% by deploying the GitLab application and GitLab Runner on the Arm-based Graviton2 when compared to the x86 based M5/C5 EC2 instances.\" \r\n\r\n- Enable developers to run `stellar-core` on their MacBook Pro M1/M2 laptops.\r\n", "CLOSED", 0, "andreclaro", "2022-09-29T11:09:46Z", "2025-02-04T15:14:10Z", "2025-02-04T15:14:09Z", "ethereum-optimism/optimism", "2025-08-31 01:47:12"]
["I_kwDOKSJyfM6oylJ2", 639, "Take out the \"If\" in the line beginning with \"If the Op\"", "- [ remove \"If\" from the beginning of the line", "CLOSED", 0, "Abuchtela", "2025-02-05T04:11:52Z", "2025-02-11T00:22:58Z", "2025-02-11T00:22:58Z", "ethereum-optimism/ecosystem", "2025-08-31 01:48:23"]
["I_kwDOKSJyfM6nAfoY", 623, "Improve ideas to better protocol", "### Description\n\nHere are some small improvements that could enhance the day-to-day operation stack protocol for the ethereum-optimism/ecosystem:\n\nMinor Refactors: Implementing minor refactors within the SDK packages to improve code readability and maintainability.\nBug Fixes: Addressing specific bugs, such as the eth withdrawal bug and other withdrawal-related issues.\nError Handling: Enhancing error messages and handling for better debugging and user experience.\nDependency Updates: Keeping dependencies up-to-date to leverage the latest features and security improvements.\nDocumentation: Improving the documentation to provide clear guidance on setting up and contributing to the OP Stack.", "CLOSED", 0, "Abuchtela", "2025-01-21T13:54:30Z", "2025-02-11T00:23:47Z", "2025-02-11T00:23:47Z", "ethereum-optimism/ecosystem", "2025-08-31 01:48:23"]
["I_kwDOH2Qg5s6qGuN1", 509, "\u2757Archive Nodes Must Follow the Same v1.101500.0 Upgrade Path (v1.101411.8), Contrary to the Docs, Otherwise Risk Chaindata Corruption", "Gm,\n\nThe way I interpreted the first paragraph in release tag v1.101500.0 is archive nodes do not need to first upgrade to v1.101411.8, as found at the very end of that paragraph: \"Archival nodes don't need to follow this upgrade path.\"\n\nIf my interpretation is correct, I am here to share this recommendation risks corrupting 11TB of op-geth archive node data. Thankfully I have a fully recoverable backup, restored my op-geth chaindata, and synced using the upgrade path of v1.101411.8 recommended for full nodes.\n\nArchive Node Parameters:\n```\n--syncmode=full\n--gcmode=archive\n--history.state=0\n--history.transactions=0\n```\n\n/fin\n\n", "OPEN", 0, "ymonye", "2025-02-14T14:37:38Z", "2025-02-14T14:37:38Z", null, "ethereum-optimism/op-geth", "2025-08-31 01:48:24"]
["I_kwDOH2Qg5s6pf6pN", 504, "DRAFT: Add CI check for running kurtosis / NAT tests against op-geth", "# Rationale\n\n<!-- Why should this feature exist? -->\n\nRight now we are relying somewhat on monorepo tests such as the kurtosis, NAT and op-e2e tests for asserting the correctness of op-geth behaviors. It would be good to encode this reliance more explicitly by having the CI within op-geth run these tests in repo pull requests.\n\n<!-- What are the use-cases? -->\n\nIf we can write tests more simply by writing them using high-level test frameworks like those exposed by kurtosis and NAT, and also depend on these tests to be consulted before merging any code to the op-geth repo, then we can increase confidence in changes to the repo and increase test coverage by ensuring clean CI integration.\n\n# Implementation\n\nDo you have ideas regarding the implementation of this feature?\n\nTODO\n\nAre you willing to implement this feature?\n\nYes, although it may be a better fit for the platform team.", "OPEN", 0, "teddyknox", "2025-02-10T21:35:37Z", "2025-02-10T21:35:41Z", null, "ethereum-optimism/op-geth", "2025-08-31 01:48:24"]
["I_kwDOH2Qg5s6nP0XO", 473, "panic: invalid eip-1559 params in extradata", "After upgrading to latest geth, broken...\n```\nJan 23 05:14:51 t8 geth[2152521]: panic: invalid eip-1559 params in extradata\nJan 23 05:14:51 t8 geth[2152521]: goroutine 1 [running]:\nJan 23 05:14:51 t8 geth[2152521]: github.com/ethereum/go-ethereum/consensus/misc/eip1559.CalcBaseFee(0xc0017cb680, 0xc0002c3688, 0x67911ced)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/consensus/misc/eip1559/eip1559.go:149 +0x65b\nJan 23 05:14:51 t8 geth[2152521]: github.com/ethereum/go-ethereum/consensus/misc/eip1559.VerifyEIP1559Header(0xc0017cb680, 0xc0002c3688, 0xc003228788)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/consensus/misc/eip1559/eip1559.go:52 +0xfe\nJan 23 05:14:51 t8 geth[2152521]: github.com/ethereum/go-ethereum/consensus/beacon.(*Beacon).verifyHeader(0x5aa5151ba3f79b1f?, {0x28cda48, 0xc0001ff688}, 0xc003228788, 0xc0002c3688)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/consensus/beacon/consensus.go:279 +0x174\nJan 23 05:14:51 t8 geth[2152521]: github.com/ethereum/go-ethereum/consensus/beacon.(*Beacon).VerifyHeader(0xc0003b1ac0, {0x28cda48, 0xc0001ff688}, 0xc003228788)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/consensus/beacon/consensus.go:99 +0x134\nJan 23 05:14:51 t8 geth[2152521]: github.com/ethereum/go-ethereum/core.NewBlockChain({0x28dec28, 0xc0006167e0}, 0x64?, 0x0, 0xc000d11ff8, {0x28d54a8, 0xc0003b1ac0}, {0x0, 0x0, 0x0, ...}, ...)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/core/blockchain.go:469 +0x15ef\nJan 23 05:14:51 t8 geth[2152521]: github.com/ethereum/go-ethereum/eth.New(0xc00023ac40, 0xc000701808)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/eth/backend.go:250 +0x1116\nJan 23 05:14:51 t8 geth[2152521]: github.com/ethereum/go-ethereum/cmd/utils.RegisterEthService(0xc00023ac40, 0x1b2895b?)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/cmd/utils/flags.go:2115 +0x25\nJan 23 05:14:51 t8 geth[2152521]: main.makeFullNode(0xc00055af80)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/cmd/geth/config.go:226 +0x59e\nJan 23 05:14:51 t8 geth[2152521]: main.geth(0xc00055af80)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/cmd/geth/main.go:376 +0x125\nJan 23 05:14:51 t8 geth[2152521]: github.com/urfave/cli/v2.(*Command).Run(0xc000239ce0, 0xc00055af80, {0xc0001d4000, 0x1f, 0x20})\nJan 23 05:14:51 t8 geth[2152521]:         github.com/urfave/cli/v2@v2.25.7/command.go:274 +0x93f\nJan 23 05:14:51 t8 geth[2152521]: github.com/urfave/cli/v2.(*App).RunContext(0xc000434780, {0x28c7e98, 0x378c660}, {0xc0001d4000, 0x1f, 0x20})\nJan 23 05:14:51 t8 geth[2152521]:         github.com/urfave/cli/v2@v2.25.7/app.go:332 +0x566\nJan 23 05:14:51 t8 geth[2152521]: github.com/urfave/cli/v2.(*App).Run(...)\nJan 23 05:14:51 t8 geth[2152521]:         github.com/urfave/cli/v2@v2.25.7/app.go:309\nJan 23 05:14:51 t8 geth[2152521]: main.main()\nJan 23 05:14:51 t8 geth[2152521]:         github.com/ethereum/go-ethereum/cmd/geth/main.go:300 +0x45\n```\n\n#### System information\n\n```\n./geth --version\ngeth version 1.101411.4-rc.4-efa05b1b-20241213\n```\n\n```\nUbuntu Release:\t22.04\n```\n", "CLOSED", 0, "TurtleSnail", "2025-01-23T05:18:47Z", "2025-02-14T09:01:18Z", "2025-02-14T09:01:18Z", "ethereum-optimism/op-geth", "2025-08-31 01:48:24"]
["I_kwDOH2Qg5s6XJT4a", 380, "op-geth,op-node: Opted to halt, unprepared for protocol change", "my node version:\r\n\r\nop-geth:v1.101408.0 \r\nop-node:v1.9.0\r\n\r\nHow can i solve this error?\r\n\r\n`t=2024-09-19T08:10:56+0000 lvl=info msg=\"generated attributes in payload queue\" txs=15 timestamp=1726726959\r\nt=2024-09-19T08:10:56+0000 lvl=warn msg=\"failed to notify engine driver of new L2 payload\" err=\"context deadline exceeded\" id=0x0209fda2502b42ec327365b95748c47610db37f4826347a306e792c344256969:125567052\r\nt=2024-09-19T08:10:56+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x719262740756c2f2f966793b08c0d553edfe9c779a1222e24e6db7670550b68c:125567051 peer=16Uiu2HAmC136opZqHjQeERaetgNppfvaXy6E1TKjY37PxSQWsxWN txs=10\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"loaded new runtime config values!\" p2p_seq_address=0xAAAA45d9549EDA09E70937013520214382Ffc4A2\r\nt=2024-09-19T08:10:58+0000 lvl=error msg=\"Outdated with major recommended protocol change\" node=engine\r\nt=2024-09-19T08:10:58+0000 lvl=error msg=\"Outdated with major required protocol change\" node=engine\r\nt=2024-09-19T08:10:58+0000 lvl=error msg=\"Opted to halt, unprepared for protocol change\" required=v8.0.0 local=v7.0.0\r\nt=2024-09-19T08:10:58+0000 lvl=warn msg=\"failed to notify engine driver of new L2 payload\" err=\"context canceled\" id=0xafe743e8062b44189ff7d61f74b229c89ae17b31fee95a0fe183429bea03c6be:125567336\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"stopped listening network address\" addr=/ip4/0.0.0.0/tcp/9222\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAm7dhyfPKohuLyiZ2nUopuNUUdZhJSwxHymwbrGkuuJdZ7 addr=/ip4/65.21.206.66/tcp/9444\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmC136opZqHjQeERaetgNppfvaXy6E1TKjY37PxSQWsxWN addr=/ip4/204.16.247.89/tcp/9222\r\nt=2024-09-19T08:10:58+0000 lvl=warn msg=\"failed to notify engine driver of new L2 payload\" err=\"context canceled\" id=0x719262740756c2f2f966793b08c0d553edfe9c779a1222e24e6db7670550b68c:125567051\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"stopped P2P req-resp L2 block sync client\"\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmJjvZkzSYoWN9YErfAmvToFdZcKZVe4mAPSiqdEHPdWKi\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmUkoC9JAea8iseLPfoKKK2hbw8ndaeddZNLxY3acPavvC\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmDVRaHsMmHQ4K5sfxHUo9RvKUxfKaPbpctq9beqdPddgZ\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmFwgzq5Si9Kih3hvwMuWqSyHDrRiRQ11U2wrtPD53z61H\r\nt=2024-09-19T08:10:58+0000 lvl=error msg=\"Payload execution failed\" block_hash=0x536a9a1628336514b9ac38baed74392cc771860b2d23974209dd65d3c9a8c5a0 err=\"Post \\\"http://op-geth:8551\\\": context canceled\"\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"State loop returned\"\r\nt=2024-09-19T08:10:58+0000 lvl=warn msg=\"halted, idling to avoid immediate shutdown repeats\"\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmLwt7nzuJBK2ozGH2HKuELdTnf5VvtYdNJgkGC2kaGD1q\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmPrvHfMsXvFKXGKMCiq1rooXNCn3feytCZrPW6XBxESwk\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmFBZsVcm7VZrFGFSPqpSqkwo692y4XwAHfmGFUtd83ZVA\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm2fivrZa6tnk55T4FouWCG1QbrihZ4zQ7fY6Tre9o57vq\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm1AMWdJHLXSbuXqZwCxhsssyGLE8qpu8Wja71CbcriXEF\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmN84YWgu4PmbQ7AFTVUDJYzNYYVJ8CU2rvZhKRuKtQUW6\r\nt=2024-09-19T08:10:58+0000 lvl=info msg=\"stopped peer discovery\"`\r\n\r\n", "OPEN", 0, "wetezos", "2024-09-19T09:30:42Z", "2025-02-10T16:29:16Z", null, "ethereum-optimism/op-geth", "2025-08-31 01:48:24"]
["I_kwDOI7W0xc6ndNi5", 1288, "Daily DEX Volumes - Dune API", "Use Dune API to pull daily trade volumes at a pool level from dex trades.\n\nWe currently have Defillama DEX Volume data, which covers a nearly exhaustive list of chains and DEXs. But we can use Dune to pull pool-level data in the interim, to identify what is moving top-level metrics.", "OPEN", 0, "MSilb7", "2025-01-24T13:23:42Z", "2025-02-12T13:46:39Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:48:25"]
["I_kwDOKIwiaM6oXGOB", 1310, "2025-01-01..2025-01-31 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 6 days, 8:35:22 | 6 days, 1:20:59 | 12 days, 15:04:44 |\n| Time to close | 3 days, 2:17:52 | 3 days, 3:34:00 | 5 days, 23:02:42 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 8 |\n| Number of items closed | 7 |\n| Number of most active mentors | 0 |\n| Total number of items created | 15 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Wrong miner.recommit value | https://github.com/ethereum-optimism/docs/issues/1295 | [Wazabie](https://github.com/Wazabie) | 0:04:42 | 0:24:18 | None |\n| [L2 Testnet Tutorial] Highlight the need for using the latest release versions in the monorepo and op-geth repo | https://github.com/ethereum-optimism/docs/issues/1282 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| Adding a notice on OP_BATCHER_DATA_AVAILABILITY_TYPE | https://github.com/ethereum-optimism/docs/issues/1269 | [brokewhale](https://github.com/brokewhale) | None | 3 days, 3:34:00 | None |\n| [L2 Testnet Tutorial] Add steps on how to spin up op-challenger | https://github.com/ethereum-optimism/docs/issues/1263 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| [L2 Testnet Tutorial] L2 genesis and rollup configuration file creation | https://github.com/ethereum-optimism/docs/issues/1262 | [sbvegan](https://github.com/sbvegan) | 10 days, 18:54:56 | None | None |\n| [L2 Testnet Tutorial] update the L1 contract deployment section | https://github.com/ethereum-optimism/docs/issues/1261 | [sbvegan](https://github.com/sbvegan) | 3 days, 23:31:51 | None | None |\n| Add link to Bedrock Release page or remove reference to it in \"Getting Started\" | https://github.com/ethereum-optimism/docs/issues/1247 | [Red-Pandaz](https://github.com/Red-Pandaz) | 8 days, 3:10:07 | 8 days, 6:57:38 | None |\n| [DOCS] Potential errors in \"Bridging ETH to OP Mainnet with Viem\u201d - Deposit ETH part | https://github.com/ethereum-optimism/docs/issues/1240 | [opfocus](https://github.com/opfocus) | None | 3 days, 22:58:36 | None |\n| Revise Create L2 Testnet Tutorial | https://github.com/ethereum-optimism/docs/issues/1231 | [cpengilly](https://github.com/cpengilly) | None | None | None |\n| op-deployer bootstrap command is not working as expected | https://github.com/ethereum-optimism/docs/issues/1229 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| Feedback for \u201cDeposit flow\u201d | https://github.com/ethereum-optimism/docs/issues/1226 | [brucexu-eth](https://github.com/brucexu-eth) | 14 days, 11:14:32 | None | None |\n| [DOCS]Potential Missing Steps in \"Communicating between OP Stack and Ethereum in Solidity\" Tutorial | https://github.com/ethereum-optimism/docs/issues/1217 | [opfocus](https://github.com/opfocus) | 18:36:04 | None | None |\n| [DOCS] Missing href in Link: ./OP_STACK/Superchain_explainer | https://github.com/ethereum-optimism/docs/issues/1214 | [AGMASO](https://github.com/AGMASO) | None | 4 days, 9:46:05 | None |\n| 2024-12-01..2024-12-31 metrics report for opened prs | https://github.com/ethereum-optimism/docs/issues/1210 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 22:12:13 | None |\n| 2024-12-01..2024-12-31 metrics report for closed issues | https://github.com/ethereum-optimism/docs/issues/1209 | [circleci-repo-docs[bot]](https://github.com/circleci-repo-docs[bot]) | None | 22:12:13 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-01-01..2025-01-31`", "CLOSED", 0, "unknown", "2025-02-01T00:21:13Z", "2025-02-14T22:56:31Z", "2025-02-14T22:56:31Z", "ethereum-optimism/docs", "2025-08-31 01:48:27"]
["I_kwDOKIwiaM6oXGJs", 1309, "2025-01-01..2025-01-31 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 110 days, 2:25:06 | 27 days, 15:33:46 | 291 days, 0:22:48 |\n| Time to close | 104 days, 15:19:59 | 64 days, 7:11:08 | 291 days, 0:22:52 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 21 |\n| Number of most active mentors | 0 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Wrong miner.recommit value | https://github.com/ethereum-optimism/docs/issues/1295 | [Wazabie](https://github.com/Wazabie) | 0:04:42 | 0:24:18 | None |\n| Adding a notice on OP_BATCHER_DATA_AVAILABILITY_TYPE | https://github.com/ethereum-optimism/docs/issues/1269 | [brokewhale](https://github.com/brokewhale) | None | 3 days, 3:34:00 | None |\n| Add link to Bedrock Release page or remove reference to it in \"Getting Started\" | https://github.com/ethereum-optimism/docs/issues/1247 | [Red-Pandaz](https://github.com/Red-Pandaz) | 8 days, 3:10:07 | 8 days, 6:57:38 | None |\n| [DOCS] Potential errors in \"Bridging ETH to OP Mainnet with Viem\u201d - Deposit ETH part | https://github.com/ethereum-optimism/docs/issues/1240 | [opfocus](https://github.com/opfocus) | None | 3 days, 22:58:36 | None |\n| [DOCS] Missing href in Link: ./OP_STACK/Superchain_explainer | https://github.com/ethereum-optimism/docs/issues/1214 | [AGMASO](https://github.com/AGMASO) | None | 4 days, 9:46:05 | None |\n| Broken link | https://github.com/ethereum-optimism/docs/issues/1204 | [KyryloKilin](https://github.com/KyryloKilin) | 9 days, 9:46:54 | 9 days, 9:46:54 | None |\n| Section for Standard Config | https://github.com/ethereum-optimism/docs/issues/1187 | [ZakAyesh](https://github.com/ZakAyesh) | 3 days, 14:23:10 | 41 days, 18:11:56 | None |\n| Holocene upgrade script 404 not found | https://github.com/ethereum-optimism/docs/issues/1178 | [Chomtana](https://github.com/Chomtana) | None | 39 days, 23:41:59 | None |\n| [2024 Q4 Audit] [Update focus and scope] | https://github.com/ethereum-optimism/docs/issues/1176 | [krofax](https://github.com/krofax) | None | 24 days, 18:03:52 | None |\n| [2024 Q4 Audit] builders/chain-operators/features/preinstalls.mdx | https://github.com/ethereum-optimism/docs/issues/1109 | [ZakAyesh](https://github.com/ZakAyesh) | 78 days, 9:43:05 | 78 days, 9:43:05 | None |\n| [2024 Q4 Audit] builders/tools/overview.mdx | https://github.com/ethereum-optimism/docs/issues/1072 | [Wazabie](https://github.com/Wazabie) | None | 64 days, 7:11:08 | None |\n| Asterisc & Kona Documentation | https://github.com/ethereum-optimism/docs/issues/1067 | [pauldowman](https://github.com/pauldowman) | 0:30:27 | 62 days, 19:27:12 | None |\n| Docs updates for 64-bit multi-threaded Cannon | https://github.com/ethereum-optimism/docs/issues/1066 | [pauldowman](https://github.com/pauldowman) | 2 days, 18:42:19 | 65 days, 20:31:03 | None |\n| [2024 Q4 Audit] builders/chain-operators/deploy/genesis.mdx | https://github.com/ethereum-optimism/docs/issues/993 | [sbvegan](https://github.com/sbvegan) | None | 106 days, 6:12:58 | None |\n| [2024 Q4 Audit] builders/chain-operators/deploy/overview.md | https://github.com/ethereum-optimism/docs/issues/991 | [sbvegan](https://github.com/sbvegan) | None | 89 days, 5:13:23 | None |\n| [2024 Q4 Audit] builders/chain-operators/configuration/batcher.mdx | https://github.com/ethereum-optimism/docs/issues/920 | [sbvegan](https://github.com/sbvegan) | None | 120 days, 22:12:46 | None |\n| [TUTORIAL] update estimating transaction costs (with the sdk) to viem | https://github.com/ethereum-optimism/docs/issues/595 | [sbvegan](https://github.com/sbvegan) | 291 days, 0:22:52 | 291 days, 0:22:52 | None |\n| [TUTORIAL] tracing deposits and withdrawals (with the sdk) to viem | https://github.com/ethereum-optimism/docs/issues/594 | [sbvegan](https://github.com/sbvegan) | 291 days, 0:20:11 | 291 days, 0:20:11 | None |\n| [TUTORIAL] update viewing deposits and withdrawals (with the sdk) to viem | https://github.com/ethereum-optimism/docs/issues/593 | [sbvegan](https://github.com/sbvegan) | 291 days, 0:22:11 | 291 days, 0:22:11 | None |\n| [TUTORIAL] Rewrite collection of SDK tutorials for Viem | https://github.com/ethereum-optimism/docs/issues/558 | [cpengilly](https://github.com/cpengilly) | 299 days, 22:14:31 | 299 days, 22:14:31 | None |\n| [DOCS] Protocol Versions | https://github.com/ethereum-optimism/docs/issues/555 | [sebastianst](https://github.com/sebastianst) | 45 days, 21:20:39 | 300 days, 22:43:04 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-01-01..2025-01-31 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "unknown", "2025-02-01T00:21:07Z", "2025-02-14T22:56:31Z", "2025-02-14T22:56:31Z", "ethereum-optimism/docs", "2025-08-31 01:48:27"]
["I_kwDOLB-lzc6pzRR6", 592, "Interop Timestamp Invariant - Intermittent Round-trip Denial", "## Overview\n\nThe current [Interop Messaging Spec's timestamp invariant](https://specs.optimism.io/interop/messaging.html#timestamp-invariant) states that:\n\n> The timestamp at the time of inclusion of the initiating message MUST be less than or equal to the timestamp of the executing message as well as greater than or equal to the Interop Start Timestamp.\n\nWhen the dependency set of the superchain contains chains with varying block times, this can create interesting situations where, within _some_ superchain snapshots (but not all,) round-trips between chains are not allowed.\n\n### Superchain STF\n\nThe superchain STF is defined as the transition from one `SuperRoot` to the next `SuperRoot`, every one second. In this transition, chains within the dependency set may or may not have actually progressed, depending on their blocktime.\n\n![Image](https://github.com/user-attachments/assets/d99fc8b0-0fd5-4847-a380-c5dd8541ef21)\n\n### Example Case\n\nFor this example, let's consider there's two chains in the dependency set\n* Chain A (1s blocktime)\n* Chain B (2s blocktime)\n\nAt `t: 3`, for example, Chain A's block timestamp in the superchain snapshot would be `3`, but Chain B's would be `2`. This means that with the current timestamp invariant (`initiating message timestamp MUST be <= executing message timestamp`), an actor would not be allowed to relay an initiating message from Chain A block # 3 within Chain B's block # 1. However, in the very next superchain snapshot @ `t: 4`, the timestamps of the blocks within the snapshot will have equivocated, and round-trip messages will once again be allowed.\n\nThis can create a non-trivial challenge for relaying applications in a post-interop world, where landing intra-block message bundles across multiple chains becomes a more difficult task (requiring targeting specific superchain snapshots, and growing in complexity with the more varied block times in the dependency set.) In the eyes of a user, sometimes their bundles will fail, and sometimes they will succeed.\n\n### Suggestion\n\nTo allow for round-trip messaging within any superchain snapshot, we should find a way to lift the timestamp invariant into a non-local check. A possible route is changing the invariant to:\n\n> The timestamp at the time of inclusion of the initiating message MUST be less than or equal to the largest timestamp observed within the superchain snapshot as well as greater than or equal to the Interop Start Timestamp.\n\nBut this has some downsides, requiring more data to be fed into the verification function for individual message ends. Open to discussion in this issue on other methods to loosen this check.", "OPEN", 0, "clabby", "2025-02-12T16:34:19Z", "2025-02-14T03:36:29Z", null, "ethereum-optimism/specs", "2025-08-31 01:48:28"]
["I_kwDOLB-lzc6omLXf", 574, "fix(isthmus-engine): Unify `engine_newPayloadV4` changes", "## Overview\n\nRight now, the `engine_newPayloadV4` specs differ between the Isthmus spec and the unified L2 execution layer spec:\n\n**Isthmus:**\nhttps://github.com/ethereum-optimism/specs/blob/46e596e544702b64d4d3e12901b61575744a6441/specs/protocol/isthmus/exec-engine.md?plain=1#L181-L190\n\n**Unified:**\nhttps://github.com/ethereum-optimism/specs/blob/46e596e544702b64d4d3e12901b61575744a6441/specs/protocol/exec-engine.md?plain=1#L304-L312\n\nThe unified execution engine document should be updated to reflect the need for an extension to the `ExecutionPayload` type with the `withdrawalsRoot` in Isthmus.", "CLOSED", 0, "clabby", "2025-02-03T21:38:04Z", "2025-02-12T13:12:48Z", "2025-02-12T13:12:48Z", "ethereum-optimism/specs", "2025-08-31 01:48:28"]
["I_kwDOLB-lzc6nMxAJ", 531, "MTCannon: Incorporate simplified futex handling into spec", "## Description\n\nIncorporate [simplified futex handling](https://github.com/ethereum-optimism/optimism/pull/13754) into the [Multithreaded Cannon FPVM spec](https://github.com/ethereum-optimism/specs/blob/975911138e4ada1868e6e4819bd08040c5369d54/specs/experimental/cannon-fault-proof-vm-mt.md).\n\nIn particular, see [this comment](https://github.com/ethereum-optimism/optimism/pull/13754#discussion_r1918313693). ", "CLOSED", 0, "mbaxter", "2025-01-22T19:05:40Z", "2025-02-10T19:54:02Z", "2025-02-10T19:54:02Z", "ethereum-optimism/specs", "2025-08-31 01:48:28"]
["I_kwDOJ_r-bs6pPEFX", 892, "Create orb for mise initialization", "As per this [comment](https://github.com/ethereum-optimism/superchain-registry/pull/890#discussion_r1947171496), we are reusing the same initialization logic across multiple repos. We should create a circleci orb that gets used instead of copying and pasting this logic everywhere.", "CLOSED", 0, "blmalone", "2025-02-07T23:40:49Z", "2025-02-10T19:22:30Z", "2025-02-10T19:22:30Z", "ethereum-optimism/superchain-registry", "2025-08-31 01:48:34"]
["I_kwDOMMiGhs6qIJmv", 338, "feat: eth_call timeouts in fork mode", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nWhen in fork mode, there's some timeouts on eth_call. Requires some investigation but anvil could be doing a good amount of caching that might not be necessary \n\n**Describe the solution you'd like**\nWe could provide a setting such that in op-simulator, we delegate `eth_call` to the real RPC instead of proxying to anvil.\n  - We could even inspect the blocktag. If \"latest\", caching might not be super important. If the tag is for a specific height, caching may be more relevant", "CLOSED", 0, "hamdiallam", "2025-02-14T16:52:17Z", "2025-02-14T21:30:54Z", "2025-02-14T21:30:54Z", "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6p2ZZU", 335, "Print out call trace when a xchain message fails to relay", "When relaying a message through the `L2toL2CrossDomainMessenger` it can be difficult to know where a revert is occurring because the error returned is opaque and masks the underlying error: https://github.com/ethereum-optimism/optimism/blob/3f18df1c8a502136bbe33f10ed1e29a26cd4678a/packages/contracts-bedrock/src/L2/L2ToL2CrossDomainMessenger.sol#L209\n\nThis issue is for logging the trace when the `TargetCallFailed` error is encountered when calling `L2ToL2CrossDomainMessenger#relayMessage`. Often the estimate gas step is where this failure occurs, so make sure that it is able to handle that.", "CLOSED", 0, "tremarkley", "2025-02-12T23:55:19Z", "2025-02-14T19:55:31Z", "2025-02-14T19:55:31Z", "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6jRQHi", 301, "Allow overriding any anvil params", "should support any options here\n\nhttps://book.getfoundry.sh/reference/anvil/#options", "OPEN", 0, "jakim929", "2024-12-13T21:04:19Z", "2025-02-14T23:15:09Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6d5Abk", 259, "Added multi languages \u200b\u200bfor docs and provided more detailed demos/videos about supersim.", "\n**Feature Request**\n\n- Add multi languages for docs [https://docs.optimism.io/stack/interop/supersim](url).\n- embed a more detailed video or demo about supersim.", "OPEN", 0, "hackspaceit", "2024-11-11T10:50:17Z", "2025-02-14T20:57:11Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6dl5tw", 252, "Implement interop Ownable for superchain", "started with some user stories and design paterns for this here -> https://link.excalidraw.com/l/1w98l6TPkr/12Z8xdNQN0Y", "OPEN", 0, "supercontracts", "2024-11-08T12:51:01Z", "2025-02-15T09:32:12Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6cyaRG", 246, "Outdated documentation", "I stumbled upon an outdated / deprecated piece of code in the docs and resolved it proposing the method showned in the video presentation for more info #245.\r\n\r\nLooking more around the docs in these pages:\r\n\r\nhttps://supersim.pages.dev/chain-environment/network-details/op-chain-a\r\nhttps://supersim.pages.dev/chain-environment/network-details/op-chain-b\r\n\r\nThe contracts for the `OptimismPortal` are wrong (at the time of the writting).\r\n\r\nthey should be `0x37a418800d0c812A9dE83Bc80e993A6b76511B57` and `0x35e67BC631C327b60C6A39Cff6b03a8adBB19c2D` respectively\r\n\r\nI also noticed this problem for these different contracts: `L1CrossDomainMessenger` `L1StandardBridge` I'm not sure if there are more contracts with this problem.\r\n\r\n \r\n", "OPEN", 0, "Ethanol48", "2024-11-02T13:36:19Z", "2025-02-14T23:15:47Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6cxmrO", 244, "Enhancement: Clarify 'NotActivated' Error Message for EVM Compatibility Issues", "**Problem**:\r\nWhen executing a script with Foundry against Supersim, the following error was encountered:\r\nEvmError: NotActivated\r\n\r\nThis error is ambiguous and does not provide clear guidance on its cause or resolution.\r\n\r\n**Solution**:\r\nThe issue was resolved by specifying the EVM version as 'cancun' in the `foundry.toml` configuration file:\r\n\r\n```toml\r\nevm_version = \"cancun\"\r\n```\r\nRecommendation: To enhance developer experience and facilitate troubleshooting, it is recommended to update the error handling mechanism to provide more descriptive messages. For instance, replacing \"NotActivated\" with a message like \"EVM version incompatibility detected. Consider setting evm_version = 'cancun' in your configuration.\" would offer clearer guidance to users.\r\n", "CLOSED", 0, "ismailmoazami", "2024-11-02T06:04:25Z", "2025-02-14T22:48:17Z", "2025-02-14T22:48:16Z", "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6asYsb", 204, "supersim admin API (read)", "Useful read-only APIs for devs using supersim programmatically\r\n\r\nwrite APIs out of scope\r\n\r\n**general**\r\n- JSON RPC so it's easily usable with `cast rpc`\r\n\r\n**some example endpoints**\r\n- ready(): used for checking whether the service is ready to use\r\n- getConfig(): returns config of the chains (RPC URLs, addresses, etc.\r\n- getL1Addresses(chainId): returns contract addresses for given chainId\r\n- getL2Addresses(chainId): same as above but for L2 contracts\r\n- getL2ToL2MessageByMsgHash(msgHash)\r\n- getL2ToL2MessageByTxHash(msgHash)\r\n- getL1ToL2MessageByTxHash(l1DepositTxHash)\r\n- listL1ToL2Messages(optional chainId)\r\n- listL2ToL2Messages(optional chainId)\r\n- getAutoRelayedMessages", "OPEN", 0, "jakim929", "2024-10-17T17:30:24Z", "2025-02-14T23:28:49Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6YnN9s", 183, "anvil tmp state growth issues in supersim", "## The issue\r\nanvil generates state files while running. these files continue to grow the longer anvil runs and are not automatically deleted. this issue is amplified by the fact that supersim runs with 2s block times, which causes the state files to grow even more. On my macbook these files are being stored under the `/Users/<username>/.foundry/anvil/tmp/` directory.\r\n\r\n## Recommended fix\r\nanvil provides a `--max-persisted-states` states flag to help with this (see this issue from foundry: https://github.com/foundry-rs/foundry/issues/8399). I recommend we set this to a low number for now and if there is a user demand for making this configurable we can add a cli flag that allows them to configure it.\r\n\r\n## Background\r\nThe `--max-persisted-states` flag controls how many blockchain state snapshots are persisted (saved) during the execution of the local Ethereum development chain. State snapshots refer to stored representations of the blockchain at a specific point in time. Anvil allows developers to \"snapshot\" the current state of the chain, which can later be restored (using the `evm_revert` JSON-RPC call). This feature is useful for testing because you can run a series of tests, revert the chain to a prior state, and then run another set of tests on the exact same blockchain state. \r\n\r\nThe `--max-persisted-states` flag sets a limit on how many of these snapshots (states) are saved or persisted on disk. This is useful for controlling disk usage and preventing your system from filling up with old or unnecessary snapshots. Without this flag, Anvil will keep all snapshots, potentially using a lot of disk space if you create a large number of them during testing. By using the `--max-persisted-states` flag, you can limit the number of snapshots to a certain number. For example, if you set it to 10, Anvil will only keep the last 10 snapshots, and older snapshots will be deleted as new ones are created.", "OPEN", 0, "tremarkley", "2024-10-02T00:13:52Z", "2025-02-14T23:29:02Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6XO54R", 166, "automation for dependencies & outputs", "these will become difficult to manage. should think of better automation to make sure we can autogenerate\r\n\r\ninputs\r\n- monorepo contract version (commit hash)\r\n- foundry version (based on date)\r\n\r\noutputs\r\n- periphery contract addresses\r\n- genesis files\r\n- docs updates for configuration parameters", "OPEN", 0, "jakim929", "2024-09-19T20:01:58Z", "2025-02-14T23:29:16Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6XN3rg", 164, "foundryup clone for installing supersim", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\nIdeally there is a standard way for installing supersim. We don't need to reinvent the wheel here - `foundryup works great for foundry. The main benefits of this approach over things like homebrew:\n- Can install any commit, even from forks\n- Optimized for hackers/contributors - if somebody wants to share a patch, they can give a command that instantly installs it on another machine\n\nThis could be called `supersimup` or something like that", "OPEN", 0, "tynes", "2024-09-19T17:38:06Z", "2025-02-14T23:29:32Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6TB8_H", 108, "Add ability to load state and dump state for supersim", "", "OPEN", 0, "tremarkley", "2024-08-14T20:22:48Z", "2025-02-14T23:29:47Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOMMiGhs6TBxmo", 104, "Config Improvements", "- toml file that gets parsed and the values are passed in as cli args", "OPEN", 0, "tremarkley", "2024-08-14T19:53:01Z", "2025-02-14T23:09:49Z", null, "ethereum-optimism/supersim", "2025-08-31 01:48:44"]
["I_kwDOKIsnqM6qJRqQ", 608, "Implement checkStateDiff Function in Example Templates", "Currently, the GasConfig, OwnerTransfer, SetGameType and DisputeGameUpgrade template have an empty `checkStateDiff` function implemented.\n\nAt some point we should revisit these tasks and implement this function.", "CLOSED", 0, "ElliotFriedman", "2025-02-14T19:31:18Z", "2025-09-24T19:44:22Z", "2025-09-24T19:44:22Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6p1e7I", 593, "Make invoking a task easy", "Right now, invoking a task looks something like this in our _new_ superchain ops 2.0 system:\n```\nSIMULATE_WITHOUT_LEDGER=1 OWNER_SAFE=0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A SCRIPT_NAME=GasConfigTemplate just --justfile ../../../single.just simulate\n```\nWe should be able to automatically determine `SCRIPT_NAME` from the `config.toml` file.\n- `SCRIPT_NAME`: This value is explicitly defined inside config.toml.\n\nWe cannot automatically determine the `OWNER_SAFE`. Therefore we should specify this role in the `config.toml` file. \n\nAdditionally, I think we could get UX wins by consolidating task commands inside the Justfile at `src/improvements/justfile`. This Justfile could support commands that are smart enough to abstract away messier command syntaxes:\n- `just task simulate <path_to_task>`\n- `just task execute <path_to_task>`\n- `just task approve <path_to_task>`\n- `just task --justfile ../../../justfile.just simulate <path_to_task>` (example inside a task directory)\n- etc\nThis approach allows the commands to automatically determine the appropriate Justfile (`single.just` or `nested.just`) based on the upgrade-controller.", "CLOSED", 0, "blmalone", "2025-02-12T21:15:40Z", "2025-09-24T19:44:50Z", "2025-09-24T19:44:50Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6poB-J", 580, "Failing scheduled tasks should alert via slack", "For checking the superchain-registry commit is on the latest _and_ ensuring that the monorepo integration tests pass, we should alert when they fail to slack so that we can promptly take action.", "CLOSED", 0, "blmalone", "2025-02-11T16:13:15Z", "2025-02-11T22:36:08Z", "2025-02-11T22:36:08Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6pg8DL", 577, "Test Failure - Latest Foundry Version", "On the current foundry version, the ByteCodeComparison tests consistently fail:\n\n```\n[FAIL: call didn't revert at a lower depth than cheatcode call depth] test_differentBytecode_reverts() (gas: 193632)\nTraces:\n  [193632] BytecodeComparison_compare_Test::test_differentBytecode_reverts()\n    \u251c\u2500 [42237] \u2192 new MockContract@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f\n    \u2502   \u2514\u2500 \u2190 [Return] 209 bytes of code\n    \u251c\u2500 [82329] \u2192 new VeryDifferentContract@0x2e234DAe75C793f67A35089C9d99245E1C58470b\n    \u2502   \u2514\u2500 \u2190 [Return] 411 bytes of code\n    \u251c\u2500 [0] VM::expectRevert(custom error 0xf28dceb3:  +BytecodeComparison: diff in bytecode length)\n    \u2502   \u2514\u2500 \u2190 [Return]\n    \u2514\u2500 \u2190 [Revert] revert: BytecodeComparison: diff in bytecode length\n\n[PASS] test_identicalBytecode_succeeds() (gas: 222231)\n[PASS] test_multipleAllowedDiffs_succeeds() (gas: 10018)\n[FAIL: call didn't revert at a lower depth than cheatcode call depth] test_unallowedDiff_reverts() (gas: 7141)\nTraces:\n  [7141] BytecodeComparison_compare_Test::test_unallowedDiff_reverts()\n    \u251c\u2500 [0] VM::expectRevert(custom error 0xf28dceb3:  ?BytecodeComparison: unexpected diff found at index:2, byte:0xff)\n    \u2502   \u2514\u2500 \u2190 [Return]\n    \u2514\u2500 \u2190 [Revert] revert: BytecodeComparison: unexpected diff found at index:2, byte:0xff\n\n[FAIL: call didn't revert at a lower depth than cheatcode call depth] test_wrongDiffContent_reverts() (gas: 8507)\nTraces:\n  [8507] BytecodeComparison_compare_Test::test_wrongDiffContent_reverts()\n    \u251c\u2500 [0] VM::expectRevert(custom error 0xf28dceb3:  ?BytecodeComparison: unexpected diff found at index:2, byte:0xff)\n    \u2502   \u2514\u2500 \u2190 [Return]\n    \u2514\u2500 \u2190 [Revert] revert: BytecodeComparison: unexpected diff found at index:2, byte:0xff\n\n[FAIL: call didn't revert at a lower depth than cheatcode call depth] test_wrongDiffPosition_reverts() (gas: 7990)\nTraces:\n  [7990] BytecodeComparison_compare_Test::test_wrongDiffPosition_reverts()\n    \u251c\u2500 [0] VM::expectRevert(custom error 0xf28dceb3:  ?BytecodeComparison: unexpected diff found at index:2, byte:0xff)\n    \u2502   \u2514\u2500 \u2190 [Return]\n    \u2514\u2500 \u2190 [Revert] revert: BytecodeComparison: unexpected diff found at index:2, byte:0xff\n\nSuite result: FAILED. 4 passed; 4 failed; 0 skipped; finished in 2.94s (20.34ms CPU time)\n```\n\n\nforge version:\n\n```\nforge --version\nforge Version: 1.0.0-nightly\nCommit SHA: 2b107e5c99a1e16607820f15036e36e115a0bcbf\nBuild Timestamp: 2025-02-10T00:23:03.711506000Z (1739146983)\nBuild Profile: maxperf\n```\n", "CLOSED", 0, "ElliotFriedman", "2025-02-11T00:00:47Z", "2025-09-24T19:45:28Z", "2025-09-24T19:45:28Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6pgMU5", 576, "Make sure that each newly created task has a .env file", "Right now, if a signer wanted to sign a task with the just command, they have to pass in environment variables directly. In reality, all tasks should have their own environment variables so that the don't conflict with the users own dev environment. \n\nThis might mean that we continue using the same commands like so: \n```\nSIMULATE_WITHOUT_LEDGER=1 just --dotenv-path $(pwd)/.env --justfile ../../../nested.just simulate foundation\n```\n\nwhere:\n```\n--dotenv-path $(pwd)/.env\n```\nloads the `.env` file from task. We no longer need addresses in this `.env` file which is a big UX win. ", "CLOSED", 0, "blmalone", "2025-02-10T22:02:50Z", "2025-02-11T16:47:40Z", "2025-02-11T16:47:39Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6pcuia", 571, "We must delegate call to OPCM from superchain-ops", "This involves using @maurelian's new MultiCall3DelegateCall contract. \n\nAs part of the superchain-ops improvements, we must provide the ability to swap in different MultiCall3 contracts based on whether the task is using OPCM or not.", "CLOSED", 0, "blmalone", "2025-02-10T15:57:29Z", "2025-02-14T22:14:12Z", "2025-02-14T22:14:11Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6pZAyx", 569, "CI Errors `mise deps` rate reach limit", "Seems that we reach a rate limiting with `mise deps` that is causing the CI to fail. \nSuggestions: \n- Maybe we can cache the `mise deps` if there is common dependencies to download or we need to check the permission of the `GITHUB_TOKEN` to know what sort of rate limit is applied to it.\n\n<img width=\"1725\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bcb7ec76-72a6-4cca-92e6-121f15ad15e6\" />\n\nFor example this pull request:: https://github.com/ethereum-optimism/superchain-ops/pull/544", "CLOSED", 0, "Ethnical", "2025-02-10T09:57:17Z", "2025-09-24T19:45:56Z", "2025-09-24T19:45:56Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6pPUQK", 566, "clean up config.toml files for tests", "Right now looking at a TOML file it's hard to know what it's purpose is. I suggest we have a directory that holds all TOML files that have descriptive names. We can get rid of `test/tasks/mock/examples` entirely.\n\nA good rule of thumb is to have one TOML file per test case. This means that if we change one TOML file other tests should be breaking. \n\n![Image](https://github.com/user-attachments/assets/0ebcc08f-e0a7-43b9-bd02-6b351ab2117c)\n", "CLOSED", 0, "blmalone", "2025-02-08T00:55:12Z", "2025-02-14T18:25:58Z", "2025-02-14T18:25:49Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6o4vqk", 549, "Double check that AddressRegistry is pulling addresses in from the correct place", "Right now the addresses are being pulled in from `addresses.json` [here](https://github.com/ethereum-optimism/superchain-ops/blob/c488cc20457545e744f465a2f1383b11ecdf5364/src/improvements/AddressRegistry.sol#L78). We need to confirm that this addresses.json file is the one that's kept up to date. \n\n\nWe should ensure that we use this issue as a way to track that the superchain-registry contains a scheduled job to make sure `addresses.json` is always up to day. Reach out to Slipper here on ETA. ", "CLOSED", 0, "blmalone", "2025-02-05T16:42:13Z", "2025-02-10T19:33:34Z", "2025-02-10T19:33:32Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6n5BRc", 493, "Deploy new sepolia chain for internal testing of new upgrade tools", "Using [op-deployer](https://github.com/ethereum-optimism/optimism/tree/develop/op-deployer), we should deploy a new sepolia chain on L1. This will act as a testing environment to prove the new tooling is working as expected. ", "CLOSED", 0, "blmalone", "2025-01-28T21:23:21Z", "2025-02-10T19:29:33Z", "2025-02-10T19:29:31Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDOKIsnqM6n4-N3", 491, "CI Job to ensure that the superchain-registry dependency is always the latest", "This job should be scheduled so it doesn't block merging of other tasks. \n\nWe always want to make sure we have the latest view into scr to avoid problems. \n\n~Option 1: check our commit vs latest commit is the easy way.~\nOption 2: Ideally we only update _if an address has changed or we added a new address_. This is more work. ", "CLOSED", 0, "blmalone", "2025-01-28T21:14:58Z", "2025-02-11T16:14:08Z", "2025-02-11T16:14:07Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:48:59"]
["I_kwDODjvEJM6qJ9IS", 14386, "Code freeze MIPS contracts", "### Description\n\nCode freeze MIPS contracts ahead of deployment.", "CLOSED", 0, "mbaxter", "2025-02-14T21:31:07Z", "2025-02-14T21:36:08Z", "2025-02-14T21:36:07Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6psbSy", 14330, "Incorrect __gap Size in ERC721Bridge.sol", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\nThe `__gap` size in `ERC721Bridge.sol` is incorrect. Given that the total consumed storage is 3 slots (2 bytes + 30 bytes, 20 bytes, and 20 bytes), the gap should be 47, not 46, to align with the rule that the next contract storage slot should start at a 50-slot boundary.\n\nBreakdown of Storage Variables per Slot:\n- 1st Slot: [uint8 _initialized](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/ecd2ca2cd7cac116f7a37d0e474bbb3d7d5e1c4d/contracts/proxy/utils/Initializable.sol#L62), [bool _initializing](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/ecd2ca2cd7cac116f7a37d0e474bbb3d7d5e1c4d/contracts/proxy/utils/Initializable.sol#L67), [bytes30 spacer_0_2_30](https://github.com/ethereum-optimism/optimism/blob/op-contracts-v180-blueprints-script/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L13) (Total: 32 bytes)\n- 2nd Slot: [address messenger](https://github.com/ethereum-optimism/optimism/blob/op-contracts-v180-blueprints-script/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L17) (20 bytes)\n- 3rd Slot: [address otherBridge](https://github.com/ethereum-optimism/optimism/blob/op-contracts-v180-blueprints-script/packages/contracts-bedrock/src/universal/ERC721Bridge.sol#L21) (20 bytes)\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\nno steps\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\nUpdate the storage gap from `46` to `47` to ensure proper alignment with the storage slot allocation rules.\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\nContract Version Reference\n- OpenZeppelin: ecd2ca2cd7cac116f7a37d0e474bbb3d7d5e1c4d\n- OP Contracts: v180-blueprints-script (latest?)\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "tak1827", "2025-02-12T02:10:31Z", "2025-02-12T02:10:31Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6piMwQ", 14309, "Issue Running a Local Development Environment with Rootless Docker", "Hey Dev Team, \n\nI am following the instructions on https://docs.optimism.io/stack/dev-node . \n\nI am trying to run my optimism node on a remote server, which I have not been given root access. To accomplish this I have had to clone to kurtosis github repo and build the binary on my machine, replacing every instance of \"/var/run/docker.sock:/var/run/docker.sock\" to my rootless docker.sock located at export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock, while also setting up that DOCKER_HOST variable. \n\nQuoting their contributing docs-> \"Once the project has built, run ./cli/cli/scripts/launch-cli.sh as if it was the kurtosis command\"\n\nI am using that command to run, once I have set up a directory with the specified network-config.yaml as specified in the link. \n\n```bash\n./kurtosis/cli/cli/scripts/launch-cli.sh run github.com/ethpandaops/optimism-package --args-file ./network-config.yaml\n```\n\nThis correctly starts a kurtosis engine and runs but then has the output:\n\n![Image](https://github.com/user-attachments/assets/6b609853-bc48-47d9-a2d2-5f999f7875a1)\n\nAs you can see only two UUIDs are running compared to the 7 on the linked guide. \n\nAlthough running docker ps gives me this output:\n\n![Image](https://github.com/user-attachments/assets/893994f4-81fc-441a-bc99-0c6155e0b376)\n\n\n\nSo I still tried to run the cast send command to interact with the environment. I am having difficulties there as well.\n\nWith this command:\n\n```bash\ncast send --mnemonic 'test test test test test test test test test test test junk' --mnemonic-path \"m/44'/60'/0'/0/0\" \\\n    --to \"<standard bridge address>\" --amount \"<amount in ETH>eth\" --rpc-url \"http://127.0.0.1:<rpc port of el-1-geth-lighthouse service>\"\n```\n\nI cannot seem to find my standard bridge address, you specified that it should be in the output from doing the kurtosis run but I do not seem to see it. \n\nAlso --mnemonic-path and --to are not flags according to the docs for cast send on foundry. https://book.getfoundry.sh/reference/cast/cast-send\n\n\nWas wondering if I could get clarification on all of this. Trying to run some benchmarks on optimism on a cloud server. \n\n", "OPEN", 0, "nic225", "2025-02-11T05:32:57Z", "2025-02-11T21:48:04Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6pdTPp", 14278, "Multi client execution tests", "Rename `op-e2e/opgeth` to `op-e2e/execution` and generalise types too like rename \nhttps://github.com/ethereum-optimism/optimism/blob/a98b851d7f8ea7c73276f29f5ff23f564db4230c/op-e2e/opgeth/op_geth.go#L43-L56\nto `OpExecutionClient`\n\nRef https://github.com/paradigmxyz/reth/issues/14267#issuecomment-2640759609 cc @meyer9 \n", "OPEN", 0, "emhane", "2025-02-10T16:47:37Z", "2025-02-10T17:07:11Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6pbDa3", 14269, "`op-challenger` is resolving games already resolved", "When multiple `op-challenger`s are running, they'll all try to resolve the same game.\n\n[Here](https://sepolia.etherscan.io/address/0x80faca158091866f3c549007a659e082bff872c8) is an example where there're 3 op-challenger instances trying to resolve the same game, thus only one succeeded , the other two both failed. \n\nIdeally `op-challenger` should automatically skip games which are already resolved.", "CLOSED", 0, "blockchaindevsh", "2025-02-10T13:39:17Z", "2025-02-10T21:48:13Z", "2025-02-10T21:48:12Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6pMSwV", 14249, "[Tracking] Isthmus End-to-End Tests", "Tracks all end-to-end tests that need to be created for Isthmus.\n\n- https://github.com/ethereum-optimism/optimism/pull/13934", "CLOSED", 0, "meyer9", "2025-02-07T16:27:32Z", "2025-09-24T17:30:27Z", "2025-09-24T17:30:27Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6pDKqG", 14227, "op-e2e: add e2e test to ensure EIP-2935 contract exists at genesis with Isthmus active", "Currently, we test the network upgrade transaction for EIP-2935, but we should also check that the contract exists at genesis.\n\nhttps://github.com/ethereum-optimism/optimism/pull/14110#issuecomment-2640527332", "CLOSED", 0, "meyer9", "2025-02-06T17:36:15Z", "2025-02-13T00:10:36Z", "2025-02-13T00:10:36Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6o746J", 14201, "Debug and reenable slow DisputeGameFactory upgrade tests", "`DisputeGameFactory` upgrade tests are ridiculously slow, specifically `testFuzz_findLatestGames` and `test_findLatestGames`. I'm disabling them for now, will re-enable at a later point once they get debugged.", "CLOSED", 0, "smartcontracts", "2025-02-06T01:11:46Z", "2025-02-10T18:48:16Z", "2025-02-10T18:48:16Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6oxf9G", 14160, "op-program: Ensure interop does not load l2 chain ID local key", "", "CLOSED", 0, "ajsutton", "2025-02-05T00:05:27Z", "2025-02-11T19:52:52Z", "2025-02-10T22:26:08Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6ovate", 14142, "OPCM Fix: Failure when addGameType due to common saltMixer (OPCM - Upgrade 13)", "**Context:** [OPContractsManager.sol#L634](https://github.com/spearbit-audits/OP-Upgrade-13-review-200125/blob/46249650df816dbaff97647dbe67388e9f8e42d0/OPContractsManager.sol#L634)\n\n**Description:**\n\nThe function `addGameType` allows for multiple game types to be simultaneously deployed/upgraded. Additionally, the function allows for the `delayedWETH` address to be set to `address(0)`, meaning the game type needs a new deployment of the `DelayedWETH` rather than an upgrade.\n\nHowever, if two game types (for the same chain id) have their `delayedWETH` address set to zero, then a collision in the create2 address will prevent the second one from being deployed, reverting the entire transaction -- if the `saltMixer` parameter is the same, which is likely to happen, as these values are usually version tags.\n\nFurthermore, the same `saltMixer` is used to deploy the game implementations, which **breaks the invariant** that the **implementation version** is typically used as entropy.  \n\nAs seen in [OPContractsManager.sol#L1125](https://github.com/ethereum-optimism/optimism/blob/7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L1125), the version is explicitly included in the salt calculation:  \n\n```solidity  \ncomputeSalt(_l2ChainId, \"v2.0.0\", \"PermissionedDisputeGame\"),\n```  \n\nUsing the same `saltMixer` across different deployments **violates this pattern** and may lead to inconsistencies in contract versioning and deployment tracking.\n\n\n\n**Recommendation:**\n\nA different salt should be used for the `delayedWETH` for each game type -- or the deployment of a new proxy should be skipped if the `create2` address already has code deployed to it.\nFurthermore, a different salt variable should be used for deploying the game type implementation, rather than reusing the `DelayedWETH` salt.\n\n**Optimism:** \n\n**Spearbit:** \n", "CLOSED", 0, "maurelian", "2025-02-04T18:29:51Z", "2025-02-15T16:27:36Z", "2025-02-15T16:27:36Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6ovaHa", 14141, "OPCM Fix: Missing checks in OPCM (OPCM - Upgrade 13)", "**Description:**\nThe OPContractsManager functions as a deployment script for various on-chain deploys and upgrades. To prevent potential mistakes that could occur during these operations, it should enforce comprehensive validation checks, which are currently incomplete.\n\nThis issue will enumerate the missing checks that should be implemented to improve security and reliability.\n\n1. [OPContractsManager.sol#L875](https://github.com/ethereum-optimism/optimism/blob/7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L875)  `DeployInput.startingAnchorRoot` in the deploy function is missing a check against `0x000...0000`, currently it's just checking the length ` if (_input.startingAnchorRoot.length == 0) revert InvalidStartingAnchorRoot();`. Also the length check could be more specific since the only valid length is known.\n2. [OPContractsManager.sol#L660-L670](https://github.com/ethereum-optimism/optimism/blob/7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L660-L670) | [OPContractsManager.sol#L684-L694](https://github.com/ethereum-optimism/optimism/blob/7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L684-L694) The `addGameType` is missing checks against the configurability parameters [Spec:configurability](https://specs.optimism.io/protocol/configurability.html#fault-game-max-depth)\n3.  [OPContractsManager.sol#L448](https://github.com/ethereum-optimism/optimism/blob/7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L448) Missing checks for the **OpChainConfig** parameters, this should be checked at least in the scripts same as you do for the deploy\n4. [OPContractsManager.sol#L483-L485](https://github.com/ethereum-optimism/optimism/blob/7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L483-L485) We only verify the `superchainConfig` for `optimismPortal` while we should verify for every contract that does contain this. \n", "CLOSED", 0, "maurelian", "2025-02-04T18:28:33Z", "2025-02-13T20:56:15Z", "2025-02-13T20:56:15Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6ovZyX", 14140, "OPCM fix: addGameType does not emit an event (OPCM - Upgrade 13)", "**Context:** [OPContractsManager.sol#L708](https://github.com/ethereum-optimism/optimism/blob/7d6d15437b7580b022f4c8c1ea9c0cd8d2e587e1/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L708)\n\n**Description:**\nThe `addGameType` function does not emit any event. While in the docs is not specified that this should emit an event, we recommend to add one to better track what exactly was deployed.\n\n**Recommendation:**\nConsider adding a special event for `addGameType`\n", "CLOSED", 0, "maurelian", "2025-02-04T18:27:46Z", "2025-02-13T16:40:18Z", "2025-02-13T16:40:18Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6n2bi1", 14020, "op-program: Intermediate trie nodes are unavailable after block re-execution", "When the client hints at the host to rebuild a block, we attach the host's own prefetcher to serve preimage requests for the block build. While the client is able to successfully rebuild the block, the block data, including trie nodes for the transactions and receipts tries, are not available to the original client that created the hint.\n\nThis is because the host has no visibility into the state created by the second client invocation. And once the second client is done building the block, the intermediate state is deleted from memory.\n\nAs a result, the initial client that triggered the block rebuild will be unable to get rebuilt block data from the host.", "CLOSED", 0, "Inphi", "2025-01-28T15:45:15Z", "2025-02-11T19:52:47Z", "2025-01-31T01:54:16Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nwQC1", 14013, "op-program: Use common routines to build deposited transactions", "Refactor op-program the block replacement routine to use common logic in the op-node.", "CLOSED", 0, "Inphi", "2025-01-28T01:52:09Z", "2025-02-13T03:34:55Z", "2025-02-13T03:34:55Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nvstz", 14009, "Cross-safety checks during consolidation does not ensure message inclusion", "The interop op-program consolidation routine assumes that the [oracle has the block of the executing message](https://github.com/ethereum-optimism/optimism/blob/e3a320152d067c0083d18835220d938c822210d7/op-program/client/interop/consolidate.go#L157). While this is the correct assumption, the program fails to actually guarantee that the executing message is included in the block. Which can occur if the executing message hash doesn't match the initiating message.\n\nThe correct behavior is to retrieve the emitted log at the index specified in the executing message, and ensure the hashes match up.", "CLOSED", 0, "Inphi", "2025-01-27T23:44:10Z", "2025-02-11T19:52:46Z", "2025-02-11T18:44:40Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nesGV", 13969, "feat(cannon): Support full `mips64r2` ISA", "## Overview\n\n`cannon` does not currently support the full `mips64r2` ISA ([spec](https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MIPS_Architecture_MIPS64_InstructionSet_%20AFP_P_MD00087_06.05.pdf)). If we want to be able to support a wider variety of programs running on `cannon`, such as `kona`, we'll need to complete support of the instruction set rather than only using the subset of `r2` instructions that the Go compiler is emitting (MIPS III).\n\nA rough list of instructions that we need to add (which the implementer of this issue should double check) is:\n\n```\nSEB Sign-Extend Byte \nSEH Sign-Extend Halftword \nDEXT Doubleword Extract Bit Field \nDEXTM  Doubleword Extract Bit Field Middle \nDEXTU  Doubleword Extract Bit Field Upper \nDINS  Doubleword Insert Bit Field \nDINSM  Doubleword Insert Bit Field Middle \nDINSU  Doubleword Insert Bit Field Upper\nDSBH  Doubleword Swap Bytes Within Halfwords\nDSHD  Doubleword Swap Halfwords Within Doublewords\nDROTR Doubleword Rotate Right\nDROTR32 Doubleword Rotate Right Plus 32 \nDROTRV Doubleword Rotate Right Variable\nROTR Rotate Word Right\nROTRV Rotate Word Right Variable\nMADD.fmt Floating Point Multiply Add (noop - soft float mandate)\nMSUB fmt Floating Point Multiply Subtract (noop - soft float mandate)\nNMADD fmt Floating Point Negative Multiply Add (noop - soft float mandate)\nNMSUB fmt Floating Point Negative Multiply Subtract (noop - soft float mandate)\nRECIP fmt Reciprocal Approximation (noop - soft float mandate)\nRSQRT fmt Reciprocal Square Root Approximation (noop - soft float mandate)\n```\n\nRelevant issue from `kona` for `mips64r2` target support: https://github.com/op-rs/kona/issues/942", "CLOSED", 0, "clabby", "2025-01-24T16:25:02Z", "2025-09-03T15:02:53Z", "2025-09-03T15:02:53Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nNhpV", 13929, "Descope Liquidity Migration Interop Contracts", "We believe that the majority of cross chain transactions with be ether sends and stablecoin sends. To simplify the rollout of interop, we are descoping the liquidity migration feature. This enabled any deposited token to be upgraded into a superchain erc20 token in a way that is opt in for the user. We will reintroduce this feature again in the future.\n\nIdeally we can keep the contracts in the repo but just not deploy them as part of the genesis, but that may add complexity. Open to either deleting them in a single commit that can be reverted in the future or another solution that just doesn't include them in the L2 genesis.", "OPEN", 0, "tynes", "2025-01-22T21:03:53Z", "2025-02-10T16:50:43Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLys", 13906, "op-challenger: Update action tests to include verifying the SuperSplitAdapter generates correct game inputs", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:28:40Z", "2025-02-11T19:53:04Z", "2025-02-11T03:34:07Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLtI", 13905, "op-challenger: Verify SuperTraceProvider generates correct claims as part of action tests", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:28:17Z", "2025-02-11T19:53:01Z", "2025-01-24T02:45:30Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLdf", 13903, "op-challenger: interop - Handle transition to invalid state correctly when an optimistic block can\u2019t be derived from data available on L1", "(ie block was not local-safe at the game\u2019s L1 head) - need to ensure challenger's top-half trace provider transitions to the `keccak('invalid')` state correctly.\n\n\nThe fault dispute game state transition says that if it tries to derive an optimistic block for a chain but can\u2019t because it reached the game\u2019s L1 head before finding the necessary data, the transition goes to the invalid transition hash (`keccak256(\u201dinvalid\u201d)`).\n\nop-challenger needs to know exactly when this transition will occur. To do this it will need information from the supervisor\u2019s database about when blocks become local safe or cross safe. It will use the following rules when calculating the claim for a specific step.\n\n- If this is step 0 (ie we are at a timestamp boundary), request the super root for that timestamp. If it was cross safe at the game\u2019s L1 head, use the super root, otherwise use invalid.\n    - Reasoning: If the super root isn\u2019t cross safe, then an earlier step deriving an optimistic block must have had insufficient data. Thus we would have transitioned to the invalid state at an earlier step and thus the current claim must also be the invalid state.\n- If not step 0, fetch the super root for the previous timestamp transition (ie the timestamp we are transitioning *from*). If it *was not* cross safe at the game\u2019s L1 head, the expected claim is the invalid state\n    - Reasoning: The prior timestamp boundary was not cross safe so by the reasoning above, we must have transitioned to the invalid state before then and are thus still at the invalid state.\n- Fetch the super root for the next timestamp transition (ie the timestamp we are transitioning *to*). If it *was* cross safe at the game\u2019s L1 head then all optimistic blocks must be able to be derived successfully. Do *not* use the invalid state for this claim.\n- If the previous timestamp *was* cross safe and the next timestamp *was not* cross safe, then one of the optimistic blocks in this timestamp transition cannot be derived and we must find which.  Request the local safe block number at the game\u2019s L1 head for each chain from op-supervisor. Iterate in chain ID order to find the first game which is not local safe at the game\u2019s L1 head. The step which derives that chain\u2019s optimistic block is when the game transitions to the invalid state. If our step is at or after that step we should use the invalid sate.", "CLOSED", 0, "ajsutton", "2025-01-22T01:27:15Z", "2025-02-11T19:52:53Z", "2025-02-04T02:44:21Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLS5", 13902, "op-challenger: Implement SyncValidator for super games using op-supervisor sync status API", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:26:30Z", "2025-02-11T19:52:46Z", "2025-02-07T01:16:34Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLNo", 13901, "op-challenger: New kona executor to pass appropriate args for interop", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:26:09Z", "2025-02-11T19:52:58Z", "2025-01-22T01:49:40Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLJ1", 13900, "op-challenger: New op-program executor to pass appropriate args for interop", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:25:59Z", "2025-02-11T19:52:54Z", "2025-01-22T21:00:49Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLHH", 13899, "op-challenger: New SplitAdapter to convert claims from the top half of the game to inputs required for bottom half", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:25:46Z", "2025-02-11T19:52:53Z", "2025-01-24T00:58:50Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFLFR", 13898, "op-challenger: New TraceProvider for super root / transition state claims in top half of game", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:25:39Z", "2025-02-11T19:52:58Z", "2025-01-22T01:49:24Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFK4d", 13895, "op-challenger: Recognise new interop game type", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:25:07Z", "2025-02-11T19:52:57Z", "2025-01-22T01:49:18Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFK1q", 13894, "op-challenger: Accept multiple l2 rpc and rollup endpoints", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:24:55Z", "2025-02-11T19:52:54Z", "2025-01-24T00:58:46Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFKz7", 13893, "op-supervisor: Add sync status RPC that reports the highest L1 block that has been processed by all chains.", " Allows challenger to know if its safe to play the game.", "CLOSED", 0, "ajsutton", "2025-01-22T01:24:47Z", "2025-02-11T19:52:47Z", "2025-02-05T03:13:29Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFKwl", 13892, "op-supervisor: Update the supervisor client with  new method for local safe height at L1 block", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:24:34Z", "2025-02-11T19:52:48Z", "2025-01-24T14:59:27Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFKsO", 13891, "op-supervisor: Add RPC that returns what the local safe was for each chain in the dependency set at a given L1 block", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:24:15Z", "2025-02-11T19:52:57Z", "2025-01-22T01:35:42Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFKpx", 13890, "op-supervisor: Add field to super root response that reports the L1 block that the super root became cross safe", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:24:04Z", "2025-02-11T19:52:48Z", "2025-01-28T22:37:10Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFKmi", 13889, "op-supervisor: Add RPC to return super root and optimistic and canonical blocks for a specific timestamp", "(optimistic and canonical would only differ if canonical block is a deposit-only replacement).", "CLOSED", 0, "ajsutton", "2025-01-22T01:23:54Z", "2025-02-11T19:52:57Z", "2025-01-22T01:35:30Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFKZu", 13888, "op-program:  Implement generating optimistic block in host program if it has been replaced by a deposit only block", " Implement generating optimistic block in host program if it has been replaced by a deposit only block. Make prestates available. This is required to perform the consolidation step so the FPP can verify that there was an invalid message and the block was replaced by a deposit only block", "CLOSED", 0, "ajsutton", "2025-01-22T01:23:02Z", "2025-02-11T19:52:56Z", "2025-01-22T01:35:20Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFKEy", 13885, "op-program: Ensure transition is a complete no-op when the claimed timestamp is reache", "ie when agreed prestate is a super root at the claimed timestamp, the expected claim is that super root). This makes trace extension work\n\n\nThe L2BlockNumber local key is being repurposed to provide a timestamp instead of a block number. Furthermore, it will always provide the timestamp provided when creating the game and not adjust it based on the post state claim\u2019s position.\n\nWith the pre-interop dispute game the L2BlockNumber value was specified to the post state position because op-program was designed to apply as many blocks as needed so had to be told the L2 block number the post claim was for in order to know when to stop. With interop however, the fault proof program will always execute a single step and stop, so the only information it needs is which timestamp the game overall stops at so that it can stop derivation at that point.", "CLOSED", 0, "ajsutton", "2025-01-22T01:21:52Z", "2025-02-11T19:52:56Z", "2025-01-22T01:35:10Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJ8q", 13884, "op-program/cannon: Build prestates with interop enabled", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:21:20Z", "2025-02-11T19:52:55Z", "2025-01-22T01:35:05Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJ5D", 13883, "op-program: Support transition to invalid state when generating the optimistic block and L1 head is reached", "When the L1 head is reached prior to deriving the block required for the next timestamp, the expected claim is `keccak(\"invalid\")`. Every step from `keccak(\"invalid\")` leads to `keccak(\"invalid\")`. This avoids the possibility of proposing the current safe head with a far future timestamp.\n\nThe contracts must prevent creating a game with `keccak(\"invalid\")` as the root claim.\n\nThe challengeL2BlockNumber mechanism will be removed.", "CLOSED", 0, "ajsutton", "2025-01-22T01:21:07Z", "2025-02-11T19:52:55Z", "2025-01-22T01:34:55Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJuo", 13882, "op-program: Consolidation step reorgs to a deposit only block", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:20:30Z", "2025-02-11T19:53:00Z", "2025-01-28T03:59:26Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJqm", 13881, "op-program: Support consolidation step that finishes with super root (happy path)", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:20:13Z", "2025-02-11T19:52:55Z", "2025-01-22T01:34:44Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJm7", 13880, "op-program: Support no-op step where all optimistic blocks are generated and only step is incremented", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:19:56Z", "2025-02-11T19:52:54Z", "2025-01-22T01:34:39Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJi9", 13879, "op-program: Support step from transition state with some optimistic blocks to add the next optimistic block", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:19:38Z", "2025-02-11T19:53:00Z", "2025-01-22T01:34:37Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJhP", 13878, "op-program: Support configuring host with info to fetch from multiple L2 chains", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:19:30Z", "2025-02-11T19:52:59Z", "2025-01-22T01:34:28Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJeW", 13877, "op-program: Support first step from superroot to transition state with optimistic block of first chain", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:19:19Z", "2025-02-11T19:52:59Z", "2025-01-22T01:34:25Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6nFJcb", 13876, "op-program: Separate bootstrap/validation and core state transitions", "State transitions are kept isolated from fault proof game specific details. Will simplify implementing interop and make reusing code for other context simpler.", "CLOSED", 0, "ajsutton", "2025-01-22T01:19:10Z", "2025-02-11T19:52:58Z", "2025-01-22T01:34:08Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6lVasL", 13621, "op-deployer: Update bootstrap commands to skip redeployment if bytecode has not changed", "", "CLOSED", 0, "mslipper", "2025-01-07T22:16:49Z", "2025-02-10T17:07:49Z", "2025-02-10T17:07:47Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6lUE6l", 13617, "OPCM Upgrades Support", "", "CLOSED", 0, "mslipper", "2025-01-07T18:42:19Z", "2025-02-10T17:08:47Z", "2025-02-10T17:08:47Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6lT3ME", 13615, "op-node: SOAP messages being sent from op-node to EL", "At Nethermind we're running op-node together with the Nethermind client, and from time to time both OP and Base nodes send SOAP messages for an unrelated protocol: [TR-069](https://en.wikipedia.org/wiki/TR-069)\n\nAn example of messages that we might receive is the following:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<soap_env:Envelope\nxmlns:soap_env=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:soap_enc=\"http://schemas.xmlsoap.org/soap/encoding/\"\nxmlns:cwmp=\"urn:dslforum-org:cwmp-1-2\">\n<soap_env:Body>\n<cwmp:Inform>\n<DeviceId>\n<Manufacturer>DISCOVERYSERVICE</Manufacturer>\n<OUI>DISCOVERYSERVICE</OUI>\n<ProductClass>DISCOVERYSERVICE</ProductClass>\n<SerialNumber>SdvKJzhzwN</SerialNumber>\n</DeviceId>\n<Event soap_enc:arrayType=\"cwmp:EventStruct[1]\">\n<EventStruct>\n<EventCode>M ScheduleInform</EventCode>\n<CommandKey />\n</EventStruct>\n</Event>\n</cwmp:Inform>\n</soap_env:Body>\n</soap_env:Envelope>\n```\n\nIt's not clear to us why we're getting these kind of messages but they cause issues since we're expecting all request to be JSON objects, thus failing during deserialization.\n\nThe original issue and more details are available in https://github.com/NethermindEth/nethermind/issues/8015#issue-2772482935", "CLOSED", 0, "emlautarom1", "2025-01-07T18:07:33Z", "2025-02-10T20:23:19Z", "2025-02-10T20:16:41Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6jJtR_", 13380, "Detect superchain-registry changes affecting upgrade fork tests (OPCM - Upgrade 13)", "_TODO: clean this up_\n\nChanges to 'superchain-registry/superchain/configs/' which affect fork tests should be detected and sent alerts to #notify-ci-failures. \n\n\n[Context](https://github.com/ethereum-optimism/optimism/pull/13323/files#r1876796143) \n\n> A job that runs every few hours and tags us in #notify-ci-failures on slack seems like a good way to account for that\n> Could add a CI job to make sure superchain registry commit is up to date\n\n", "OPEN", 0, "maurelian", "2024-12-13T02:19:58Z", "2025-02-11T13:54:55Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6irSbB", 13327, "impossible to deploy a custom gas token enabled chain with op-deployer", "Currently, even if the custom gas token is enabled in the `intent.toml`:\n\n```\n[globalDeployOverrides]\n  useCustomGasToken = true\n  customGasTokenAddress = \"0xe6ABD81D16a20606a661D4e075cdE5734AB62519\"\n```\n\nThe deployed contracts will not enable custom gas token.\n\n", "CLOSED", 0, "blockchaindevsh", "2024-12-10T07:27:54Z", "2025-02-10T17:07:30Z", "2025-02-10T17:07:25Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6iNV3e", 13272, "Expose saltMixer via intent file", "Right now the salt mixer is not exposed via the intent file. The current behavior tries to read it from state.json and it if doesn't exist it'll generate a random value. This was discussed in more depth on [discord](https://discord.com/channels/1244729134312198194/1273519241076670526/1314283100536311809).", "CLOSED", 0, "blmalone", "2024-12-05T21:04:22Z", "2025-02-10T17:08:30Z", "2025-02-10T17:08:29Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6g0AOE", 13118, "`op-deployer` should disable gov token by default", "We don't want chains launching with the gov token set. On OP Mainnet, this is the OP token contract, but other chains can make their own tokens by deploying their own (normal) token contracts. That way, we can reserve that address to be the OP token contract on every chain -- an important assumption for interop. We don't want address overlaps across the Superchain! \n\nI think the solution here is to add \n\n```\n[globalDeployOverrides]\nenableGovernance = false\n``` \n\nto the default intents file generated by op-deployer. ", "CLOSED", 0, "tessr", "2024-11-27T10:18:16Z", "2025-02-10T17:06:14Z", "2025-02-10T17:06:14Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6ccr7r", 12744, "op-deployer: some parameters do not work for subcommand `inspect` and meet some error for intent.toml config", "**Bug Description**\r\nop-deployer:\r\n1. Some parameters do not work for subcommand `inspect` \r\n    1. `--workdir` is uselss when execute `op-deployer  inspect genesis/rollup/l1/deploy-config`\r\n    2. `--outfile` is uselss when execute `op-deployer  inspect genesis/rollup/l1/deploy-config`, I can only redirect the std out into a file.\r\n2. Meet some error for intent.toml config:\r\n    1. After execute `op-deployer init`, the `intent.toml` in workdir has two fields:\r\n         ```\r\n         [[chains]]\r\n           eip1559Denominator = 50\r\n           eip1559Elasticity = 6\r\n         ```\r\n         But when I delete them and execute `op-deployer apply xxxx`, it meets assert error:\r\n         ```\r\n         Application failed: error in pipeline stage apply: failed to combine L2 init config: combined deploy config failed validation: config field L2InitializationConfig failed checks: config field EIP1559DeployConfig failed checks: invalid deploy config: EIP1559Denominator cannot be 0\r\n         ```\r\n         I think those two fields should have default value, even I delete it, it should still work by using default value.\r\n        \r\n**Steps to Reproduce**\r\n1. for op-deployer version, I use this release : https://github.com/ethereum-optimism/optimism/releases/tag/op-deployer%2Fv0.0.3\r\n2. I follow the doc from https://docs.optimism.io/builders/chain-operators/tools/op-deployer\r\n    1. execute `op-deployer init --l1-chain-id 11155111 --l2-chain-ids <l2-chain-id> --workdir .deployer`\r\n    2. execute `op-deployer apply --workdir .deployer --l1-rpc-url <rpc-url> --private-key <private key hex>`\r\n    3. in doc, it shows we need to enter `.deployer` dir, so it's strange, if the parameter can provide `--workdir` then way do I need to enter this dir. So when I tested in the parent dir and provide `--workdir .deployer`, it does not work. Then if I enter the dir `.depoyer` dir, and without `--workdir .deployer` it can work. So I think `--workdir` is useless.\r\n    4. also for `--outfile`, it's useless, I can only use the command like:\r\n       ```\r\n       op-deployer  inspect rollup xxx --workdir workspace --outfile rollup.json > rollup.json\r\n       ```\r\n      to export the output into a file.\r\n\r\n**Environment Information:**\r\nop-deployer version:https://github.com/ethereum-optimism/optimism/releases/tag/op-deployer%2Fv0.0.3\r\nexecute for sepolia\r\n\r\n**Additional context**\r\nBy the way, I hope when exeute `op-deployer apply`, the command line can provide the parameters to set the gas price. In my testing, I meet:\r\n```\r\nINFO [10-31|00:35:48.786] deploying OP chain using existing OPCM   stage=deploy-opchain strategy=live id=0x000000000000000000000000000000000000000000000000000000000ff11783 opcmAddress=0xF564eEA7960EA244bfEbCBbB17858748606147bf\r\nINFO [10-31|00:35:51.699] transaction broadcasted                  id=af200d..9e0b26 nonce=2\r\nINFO [10-31|00:35:51.699] Publishing transaction                   service=transactor tx=c76a3c..c22036 nonce=2 gasTipCap=1,000,000,000 gasFeeCap=22,453,457,530 gasLimit=30,000,000 tx=c76a3c..c22036\r\nINFO [10-31|00:35:52.330] Transaction successfully published       service=transactor tx=c76a3c..c22036 nonce=2 gasTipCap=1,000,000,000 gasFeeCap=22,453,457,530 gasLimit=30,000,000 tx=c76a3c..c22036\r\nINFO [10-31|00:36:39.700] Publishing transaction                   service=transactor tx=c76a3c..c22036 nonce=2 gasTipCap=1,000,000,000 gasFeeCap=22,453,457,530 gasLimit=30,000,000 tx=c76a3c..c22036\r\nINFO [10-31|00:36:39.700] bumping gas price for transaction        service=transactor tx=c76a3c..c22036 nonce=2 gasTipCap=1,000,000,000 gasFeeCap=22,453,457,530 gasLimit=30,000,000\r\nINFO [10-31|00:36:41.485] Transaction successfully published       service=transactor tx=b4bdbf..fa50d9 nonce=2 gasTipCap=1,100,000,000 gasFeeCap=24,698,803,283 gasLimit=30,000,000 tx=b4bdbf..fa50d9\r\nINFO [10-31|00:37:27.699] Publishing transaction                   service=transactor tx=b4bdbf..fa50d9 nonce=2 gasTipCap=1,100,000,000 gasFeeCap=24,698,803,283 gasLimit=30,000,000 tx=b4bdbf..fa50d9\r\nINFO [10-31|00:37:27.699] bumping gas price for transaction        service=transactor tx=b4bdbf..fa50d9 nonce=2 gasTipCap=1,100,000,000 gasFeeCap=24,698,803,283 gasLimit=30,000,000\r\nINFO [10-31|00:37:29.601] Transaction successfully published       service=transactor tx=6cad39..fc2d7c nonce=2 gasTipCap=1,210,000,000 gasFeeCap=27,168,683,612 gasLimit=30,000,000 tx=6cad39..fc2d7c\r\nINFO [10-31|00:38:15.700] Publishing transaction                   service=transactor tx=6cad39..fc2d7c nonce=2 gasTipCap=1,210,000,000 gasFeeCap=27,168,683,612 gasLimit=30,000,000 tx=6cad39..fc2d7c\r\nINFO [10-31|00:38:15.700] bumping gas price for transaction        service=transactor tx=6cad39..fc2d7c nonce=2 gasTipCap=1,210,000,000 gasFeeCap=27,168,683,612 gasLimit=30,000,000\r\nINFO [10-31|00:38:16.768] Transaction successfully published       service=transactor tx=2dc14c..435b04 nonce=2 gasTipCap=1,331,000,000 gasFeeCap=29,885,551,974 gasLimit=30,000,000 tx=2dc14c..435b04\r\nINFO [10-31|00:39:03.699] Publishing transaction                   service=transactor tx=2dc14c..435b04 nonce=2 gasTipCap=1,331,000,000 gasFeeCap=29,885,551,974 gasLimit=30,000,000 tx=2dc14c..435b04\r\nINFO [10-31|00:39:03.699] bumping gas price for transaction        service=transactor tx=2dc14c..435b04 nonce=2 gasTipCap=1,331,000,000 gasFeeCap=29,885,551,974 gasLimit=30,000,000\r\nINFO [10-31|00:39:05.116] Transaction successfully published       service=transactor tx=11582a..b62c13 nonce=2 gasTipCap=1,464,100,000 gasFeeCap=32,874,107,172 gasLimit=30,000,000 tx=11582a..b62c13\r\nINFO [10-31|00:39:51.700] Publishing transaction                   service=transactor tx=11582a..b62c13 nonce=2 gasTipCap=1,464,100,000 gasFeeCap=32,874,107,172 gasLimit=30,000,000 tx=11582a..b62c13\r\nINFO [10-31|00:39:51.700] bumping gas price for transaction        service=transactor tx=11582a..b62c13 nonce=2 gasTipCap=1,464,100,000 gasFeeCap=32,874,107,172 gasLimit=30,000,000\r\nINFO [10-31|00:39:52.768] Transaction successfully published       service=transactor tx=63dc55..dc7bb3 nonce=2 gasTipCap=1,610,510,000 gasFeeCap=36,161,517,890 gasLimit=30,000,000 tx=63dc55..dc7bb3\r\nINFO [10-31|00:40:39.700] Publishing transaction                   service=transactor tx=63dc55..dc7bb3 nonce=2 gasTipCap=1,610,510,000 gasFeeCap=36,161,517,890 gasLimit=30,000,000 tx=63dc55..dc7bb3\r\nINFO [10-31|00:40:39.700] bumping gas price for transaction        service=transactor tx=63dc55..dc7bb3 nonce=2 gasTipCap=1,610,510,000 gasFeeCap=36,161,517,890 gasLimit=30,000,000\r\nINFO [10-31|00:40:40.771] Transaction successfully published       service=transactor tx=5dcb75..f427fb nonce=2 gasTipCap=1,771,561,000 gasFeeCap=39,777,669,679 gasLimit=30,000,000 tx=5dcb75..f427fb\r\nINFO [10-31|00:40:50.117] Transaction receipt not found            service=transactor tx=6cad39..fc2d7c nonce=2 gasTipCap=1,210,000,000 gasFeeCap=27,168,683,612 gasLimit=30,000,000 err=\"context deadline exceeded\"\r\nINFO [10-31|00:40:50.117] Transaction receipt not found            service=transactor tx=c76a3c..c22036 nonce=2 gasTipCap=1,000,000,000 gasFeeCap=22,453,457,530 gasLimit=30,000,000 err=\"context deadline exceeded\"\r\nINFO [10-31|00:40:50.117] Receipt retrieval failed                 service=transactor tx=11582a..b62c13 err=\"Post \\\"https://eth-sepolia.g.alchemy.com/v2/<>\\\": context deadline exceeded\"\r\nINFO [10-31|00:40:50.117] Transaction receipt not found            service=transactor tx=11582a..b62c13 nonce=2 gasTipCap=1,464,100,000 gasFeeCap=32,874,107,172 gasLimit=30,000,000 err=\"context deadline exceeded\"\r\nINFO [10-31|00:40:50.117] Transaction receipt not found            service=transactor tx=b4bdbf..fa50d9 nonce=2 gasTipCap=1,100,000,000 gasFeeCap=24,698,803,283 gasLimit=30,000,000 err=\"context deadline exceeded\"\r\nINFO [10-31|00:40:50.117] Transaction receipt not found            service=transactor tx=5dcb75..f427fb nonce=2 gasTipCap=1,771,561,000 gasFeeCap=39,777,669,679 gasLimit=30,000,000 err=\"context deadline exceeded\"\r\n````\r\nBut in fact this tx is mined after sometime. So if I can set a higher gas price at start, it would not need to bump gas and try for many times.\r\n\r\nAnd for execute apply, it needs to downloads artifacts again, hope there is a paramter to point an existed artifacts so that we do not need to download again for every try.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "atenjin", "2024-10-30T17:08:43Z", "2025-02-10T17:12:09Z", "2025-02-10T17:12:08Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6X8SpG", 12139, "EVM Engineering: Fix `just test-rerun` when a test fails in `setUp`", "In https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/66090/workflows/30c433ad-faae-4974-a2fd-6b9ee1b6b3a3/jobs/2738751, some tests failed during setup. Then `just re-run` failed with \r\n```\r\nNo tests match the provided pattern:\r\n        match-test: `setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp|setUp`\r\n```\r\n\r\nThis may just be a forge bug, but I haven't looked into our setup closely yet", "OPEN", 0, "mds1", "2024-09-25T23:31:02Z", "2025-02-10T16:48:36Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6X75l8", 12136, "Update `FeeVault` to return amount withdrawn after `withdraw()` call", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nTo implement a fee splitter contract based on the `FeeVault` there is a lot of complexity and assumptions required because the amount being withdrawn is not returned from the `withdraw()` function. It would be a minimal diff to return this value, allowing for smart contracts to easily consume it and not need to make extra calls to get the balance of the account. An example of the complexity can be found [here](https://github.com/base-org/contracts/blob/6df77b49e16c2da29d1530b624eb6df4ff00cb2e/src/revenue-share/FeeDisburser.sol)\r\n\r\nSee the implementation below:\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/c19d51bff3285792286a35e7ed10a932e390bcc3/packages/contracts-bedrock/src/universal/FeeVault.sol#L92-L114\r\n\r\nThe main risk in doing so would be around breaking existing contracts that call the `FeeVault` contracts. I do not think it would break the existing contracts as it is possible to not assign return values to variables in solidity", "OPEN", 0, "tynes", "2024-09-25T21:52:51Z", "2025-02-10T16:48:46Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6WJIw1", 11841, "binary code missing for  op-node, op-batcher, and op-proposer.", "\r\n\r\nIn the **Creating Your Own L2 Rollup Testnet** section of the optimism documentation, when running any command related to **./bin/op-node**, **./bin/op-batcher**, **./bin/op-proposer** etc.  for the first time you'll get an error message saying the folder location does not exist (no such file or directory).\r\n\r\nSo, along the line, i notice the program I'm trying to run has not been built yet (doesn't have a binary code to run). I ran the **make** command + the folder-name I'm building to create the bin folder which contains the binary code to execute.\r\n\r\nBut it didn't just end there, i had version compatibility issues while trying to build any section using the **make** command which was frustrating till i found and installed this Microsoft Visual Studio Code extension **Makefile Tools** by microsoft.com. Since then, running the **make** command has never been an issue.\r\n\r\nJust wish to share so others who don't know won't find it frustrating like i did.\r\n", "CLOSED", 0, "jvcByte", "2024-09-11T08:25:42Z", "2025-02-10T16:44:42Z", "2025-02-10T16:44:40Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6U5Kif", 11695, "Optimize Cannon memory merkleization", "## Description\r\n\r\nCannon's memory is currently structured as a binary merkle tree of depth 27 with 32 byte leaf values, representing a 32-bit address space.  There are some performance bottlenecks with the current implementation.  In particular, [cache invalidation](https://github.com/ethereum-optimism/optimism/blob/d520441b008833d8ee8ee69bbe2e8158366279d0/cannon/mipsevm/memory/memory.go#L202-L202) and [merkleization](https://github.com/ethereum-optimism/optimism/blob/d520441b008833d8ee8ee69bbe2e8158366279d0/cannon/mipsevm/memory/memory.go#L134-L141) are expensive. Cache invalidation touches a lot of memory and we have to walk down the tree invalidating cached nodes one by one.  Similarly, we do a lot of hashing when remerkleizing as data is updated. \r\n\r\nSome preliminary prototyping suggests we could get better performance by moving to a radix trie like the [modified Merkle-Patricia Trie (MPT)](https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/) used to store Ethereum state data.  Radix tries can more efficiently store sparse data, minimizing time spent looking up values and reducing merkleization costs.  A benefit of MPTs is that we already have a [Merkle-Patricia Trie solidity implementation](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/L1/OptimismPortal2.sol#L330-L335), which should simplify on-chain integration.  \r\n\r\nWe can start experimenting by implementing a new Memory format using a MPT.  To avoid committing to the new format, we can create a [Memory interface](https://github.com/ethereum-optimism/optimism/blob/d520441b008833d8ee8ee69bbe2e8158366279d0/cannon/mipsevm/iface.go#L11-L11) so that we can swap different memory implementations into the VM while testing.  We'll want to start by benchmarking off-chain performance before thinking about fully integrating any new approach.\r\n\r\nDuring preliminary prototyping with a MPT, we used leaf values of 4096 bytes ([1 page ](https://github.com/ethereum-optimism/optimism/blob/d520441b008833d8ee8ee69bbe2e8158366279d0/cannon/mipsevm/memory/page.go#L23)in the current implementation), with 20-bit keys. We may want to start with an off-the-shelf implementation to see what performance looks like.  We could consider implementing our own MPT if we can't find a sufficiently performant implementation.  We could also consider experimenting with the structure of the trie in other ways, like modifying the branching factor (standard MPTs are hexary - branches have 16 children), though it may be simpler to stick with a standard format.", "OPEN", 0, "mbaxter", "2024-08-30T19:09:30Z", "2025-02-13T19:41:52Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6TykMl", 11563, "Solidity Test Name Formatter", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nWe used to run with a [name formatter](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/checks/names/main.go) for Solidity tests in CI that enforced common style with regards to test naming. At some point, this was removed from CI. When running the script today, there are many failures. We should commit to using the name formatter and fix all of the test names that no longer pass.\r\n\r\nThis is a great task for an AI agent.", "OPEN", 0, "tynes", "2024-08-22T01:19:02Z", "2025-02-10T16:45:28Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6TxZDw", 11558, "L2 Genesis Simplification", "The spec for this is defined in https://github.com/ethereum-optimism/specs/pull/358\n\nThe rationale is in https://github.com/ethereum-optimism/specs/issues/350", "OPEN", 0, "skeletor-spaceman", "2024-08-21T21:43:56Z", "2025-02-10T19:18:14Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6TtyM5", 11546, "ci(proofs): improve how slack notifications on failure are delivered", "In https://github.com/ethereum-optimism/optimism/pull/11015, we offloaded the kontrol proofs compute from CircleCI to github runners hosted by Runtime Verification (RV). \r\n\r\nIdeally, the slack notification would be triggered by a workflow that lives within this monorepo so we have control over notification delivery. However, the current architecture does not support this easily\u2014we initially tried using [slack-github-action](https://github.com/slackapi/slack-github-action) with an `on: status` trigger in the workflow, but *every* commit reports a status so this flooded our github actions.\r\n\r\nInstead, we provided a slack webhook URL to RV (used [here](https://github.com/runtimeverification/optimism-ci/blob/0d4572bede9e83fbca81587900923c7039484e5b/.github/workflows/optimism-ci.yaml#L184)) which posts the failure notification.\r\n\r\nRV is working on improvements to their Kontrol as a Service setup, so around Q4 this year we should be able to update this approach so the slack posting happens from within the monorepo\r\n\r\ncc @raffaele-oplabs @F-WRunTime ", "OPEN", 0, "mds1", "2024-08-21T14:55:10Z", "2025-02-10T16:45:41Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6TJBqM", 11496, "AnchorStateRegistry: emit on tryUpdateAnchorState()", "\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\n* [`AnchorStateRegistry`](https://github.com/ethereum-optimism/optimism/blob/b970f82333e2d01328b35d7b3172772c66ea9db3/packages/contracts-bedrock/src/dispute/AnchorStateRegistry.sol#L85) doesn't emit an event when it updates the anchor.\r\n* The event emited by [`FaultDisputeGame`](https://github.com/ethereum-optimism/optimism/blob/b970f82333e2d01328b35d7b3172772c66ea9db3/packages/contracts-bedrock/src/dispute/FaultDisputeGame.sol#L553) is not very useful.\r\n\r\n**Describe the solution you'd like**\r\n\r\n* `AnchorStateRegistry` should emit something like: `AnchorChanged(uint256 l2BlockNumber, bytes32 rootClaim, address gameProxy)`", "OPEN", 0, "adraffy", "2024-08-15T17:59:46Z", "2025-02-10T16:41:58Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6SbuOT", 11409, "Enhancement of Events in FaultDisputeGame.sol", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nIt is really hard to find a corresponding `FaultDisputeGame` on-chain for a specific withdrawal transaction on L2. Users have to loop through all created games to find the right one.\r\n\r\n**Describe the solution you'd like**\r\n\r\nOne way to solve this problem is to emit the `l2BlockNumber` and the `rootClaim` in the `Resolved` event, so we can use the subgraph to index all events and get the right one or we can directly query events on chain without calling  the `l2BlockNumber` again.\r\n\r\n**Additional context**\r\n\r\nWe have created this PR to resolve this issue. https://github.com/bobanetwork/boba/pull/226\r\n\r\nDoes this make sense, and is it helpful for others?\r\n", "OPEN", 0, "boyuan-chen", "2024-08-08T22:21:03Z", "2025-02-10T16:42:25Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6RNhhc", 11269, "DisputeGameFactory: Find gameIndex that updated AnchorStateRegistry", "**Is your feature request related to a problem? Please describe.**\r\n\r\n* I'd like to be able to figure out the `gameIndex` of the latest anchor before some time bound.\r\n* Currently, this requires a lot of RPC calls.\r\n* This is useful for finding the latest finalized `rootClaim` that's visible across the network.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThis is just an sketch:\r\n\r\n```Solidity\r\n// DisputeGameFactory.sol\r\nfunction findLatestVisibleDefendedGameIndexPlusOne(\r\n    GameType gt, // typically DisputeGameFactory.respectedGameType()\r\n    uint64 t1 // latest timestamp to consider\r\n) external view returns (uint256) {\r\n    i = _disputeGameList.length;\r\n    while (i > 0) {\r\n         GameId id = _disputeGameList[--i];\r\n         (GameType gameType, , address proxy) = id.unpack();\r\n         if (gameType.raw() != gt.raw()) continue; // wrong type\r\n         if (IDisputeGame(proxy).status() != GameStatus.DEFENDER_WINS) continue; // not resolved\r\n         if (IDisputeGame(proxy).resolvedAt().raw() > t1) continue; // not visible\r\n         return i + 1;\r\n    }\r\n    // 0 = not found\r\n}\r\n```\r\n\r\n", "OPEN", 0, "adraffy", "2024-07-29T19:59:53Z", "2025-02-10T16:42:44Z", null, "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6NFRQ2", 10975, "DA, op-batcher: imrovements tracker", "With actively changing blob fee market dynamics we need to:\r\n1) out-of-protocol: adapt the batch-submission operational functionality to maintain fee-accuracy and optimal op-batcher operation costs.\r\n2) in-protocol: adapt the fee-pricing to provide the lowest and most accurate fees to end-users.\r\n\r\n## Out of protocol\r\n\r\nThese changes can be implemented now, to mitigate any short-term issues.\r\n- Runtime batcher configuration:\r\n  - https://github.com/ethereum-optimism/optimism/pull/10897\r\n  - https://github.com/ethereum-optimism/optimism/pull/10837\r\n- Cancellation of in-flight batcher blob transactions, to reset the nonce such that calldata transactions can be submitted and confirmed.\r\n  - https://github.com/ethereum-optimism/optimism/pull/10941\r\n- Parallel processing of L2 chain consolidation (DA derivation parallel to engine processing of p2p blocks): see events processing and later parallel deriver execution:\r\n  - https://github.com/ethereum-optimism/optimism/issues/10865\r\n  - https://github.com/ethereum-optimism/optimism/issues/10864 \r\n- Automatically switch between blobs and calldata\r\n  - https://github.com/ethereum-optimism/optimism/pull/11219\r\n  - https://github.com/bnb-chain/opbnb/pull/209\r\n  - https://github.com/ethereum-optimism/optimism/pull/11059\r\n\r\nIdeas:\r\n- Add back-pressure system, to reduce DA usage of sequencer, by lowering block throughput in terms of total L1 cost dynamically, once the batcher starts to lag behind in work. The sequencer block-building code could inspect the diff between the safe-head and unsafe-head, and the larger the diff, the less L1-cost could be included.\r\n\r\n## In protocol\r\n\r\nThese changes require a breaking change, and thus a coordinated network upgrade.\r\n\r\nIdeas:\r\n- Dynamically swap pricing parameters between calldata and blob configuration, depending on the optimal choice of DA. This lowers costs for users automatically, with the assumption that the batcher is operated optimally also.\r\n- Monitor volatility in DA fees, and increase L1 fee parameters dynamically when high volatility is perceived, to derisk discontinuity between optimistic fees (time of L2 transaction) and realized fees (time of L1 transaction).\r\n- Support multiple batch-submitter addresses to submit for the same chain and inbox, to have more flexibility as batch-submitter, to work around transaction replacement / nonce issues.\r\n  - Warning: this conflicts with the generalized batch-authentication idea of making a L1 contract emit an event to accept/deny data in the inbox.\r\n  - Warning: this conflicts with a new initiative to introduce strict batch-ordering, which can reduce op-node startup/reset time significantly (no need to walk back L1 chain as much) and optimize proofs (much less execution due to much shorter L1 traversal). This is being suggested as a feature on top of the steady-batch-derivation project.\r\n\r\n", "CLOSED", 0, "protolambda", "2024-06-21T17:29:35Z", "2025-02-10T16:41:28Z", "2025-02-10T16:41:26Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6MirdL", 10877, "Interop: SuperchainERC20 Tracking", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThis is a tracking issue for the `SuperchainERC20` feature. The goal of `SuperchainERC20` is to be an application on top of the native interoperability protocol that enables fungible and portable ERC20 tokens across the superchain. This requires a public spec with public feedback to ensure that we are building something useful for builders on the superchain\r\n\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10876\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10875\r\n  - [x] https://github.com/ethereum-optimism/optimism/issues/10874\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10873\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10872", "CLOSED", 0, "tynes", "2024-04-29T20:20:25Z", "2025-02-10T16:19:12Z", "2025-02-10T16:19:11Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDODjvEJM6MrA5L", 10932, "op-geth: Understand why snapshots are getting corrupted on clean shutdowns", "We are sometimes seeing logs like `Failed to journal state snapshot` on shutdown. This does not appear to be due to a hard shutdown, but a race condition. If this occurs, the snapshot has to be regenerated on op-geth which takes 6-12 hours on mainnet and ruins performance in the mean time.", "CLOSED", 0, "trianglesphere", "2024-02-01T16:05:43Z", "2025-02-10T16:39:10Z", "2025-02-10T16:39:08Z", "ethereum-optimism/optimism", "2025-08-31 01:49:16"]
["I_kwDOEf1bQc6rFH-G", 1126, "Express the community call time in GMT format.", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nThe time in the 'delegate expectations' (https://community.optimism.io/token-house/delegate-expectations) is expressed as \"every other Tuesday at 1pm ET\" when it should be \"... Tuesday 19:00 GMT\" according to the good practices. \n\n**Steps to Reproduce**\n1.- Change the text \n\n**Expected behavior**\nN/A\n\n**Environment Information:**\nN/A\n\n**Configurations:**\nN/A\n\n**Logs:**\n\n![Image](https://github.com/user-attachments/assets/361bd9c9-3175-4945-9d45-1c419645ff7a)\n\n\n**Additional context**\nN/A\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.\n\n\n@opmxwell \n", "OPEN", 0, "alexsotodigital", "2025-02-21T23:59:27Z", "2025-02-21T23:59:27Z", null, "ethereum-optimism/community-hub", "2025-08-31 01:50:34"]
["I_kwDOEf1bQc6pF0go", 1123, "Broken URL link - [Fault proof] link - community.Optimisim", "just reporting broken link - since there was an option for it. apologize - dont use github much\n\narticle link: https://www.coinbase.com/developer-platform/discover/protocol-guides/guide-to-base\n\nBroken link: https://community.optimism.io/docs/protocol/2-rollup-protocol#fault-proofs\n\n\nLocated within paragraph:\n\n\"Optimistic rollups are called \u2018Optimistic\u2019 because they assume off-chain transactions are valid and don\u2019t publish proofs of validity for transaction batches posted on-chain. Optimistic rollups instead rely on a fraud-proving process whereby anyone can challenge a rollup batch during a set time window by computing a fault proof. \"\n\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description: broken URL \n- Steps to Reproduce: see above notes\n- Environment Information: PC \n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "EricMoz", "2025-02-06T23:57:14Z", "2025-02-20T22:22:55Z", null, "ethereum-optimism/community-hub", "2025-08-31 01:50:34"]
["I_kwDOEf1bQc6hbroS", 1096, "Won't open", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "ebuse123", "2024-12-01T03:32:59Z", "2025-02-20T22:23:47Z", null, "ethereum-optimism/community-hub", "2025-08-31 01:50:34"]
["I_kwDOEf1bQc6gMoaM", 1092, "Balance", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "Comandante318", "2024-11-24T12:31:08Z", "2025-02-20T22:24:13Z", null, "ethereum-optimism/community-hub", "2025-08-31 01:50:34"]
["I_kwDOEf1bQc6Yk3cs", 1057, "What should this page redirect to?", "**Bug Description**\r\n\r\nWhen I visit this page: https://community.optimism.io/docs/developers/bedrock, I get a 404. Where should the page go to?\r\n", "OPEN", 0, "joaniekube", "2024-10-01T17:21:19Z", "2025-02-20T22:26:12Z", null, "ethereum-optimism/community-hub", "2025-08-31 01:50:34"]
["I_kwDOEf1bQc6VYmIE", 1053, "{   \"name\": \"Mini Token Metadata\",   \"description\": \"Metadata description for the Mini Token\",   \"external_url\": \"https://example.com/token\",   \"image\": \"https://example.com/token/1.png\",   \"attributes\": [     {       \"name\": \"custom field\",       \"value\": \"custom value\"     },     ...   ] }060331123", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nA clear and concise description of what the bug is.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Outline the steps to reproduce the bug.\r\n2. Be specific and detailed to help developers replicate the issue.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\n - Operating System: [e.g. Ubuntu 20.04]\r\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "soenaing656", "2024-09-04T20:48:19Z", "2025-02-20T22:26:40Z", null, "ethereum-optimism/community-hub", "2025-08-31 01:50:34"]
["I_kwDOEf1bQc6UJW_g", 1050, "KT42", "Help please<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\nA clear and concise description of what the bug is.\r\n\r\n**Steps to Reproduce**\r\n\r\n1. Outline the steps to reproduce the bug.\r\n2. Be specific and detailed to help developers replicate the issue.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment Information:**\r\n - Operating System: [e.g. Ubuntu 20.04]\r\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\r\n\r\n**Configurations:**\r\nCommand line flags or environment variables you're using.\r\n\r\n**Logs:**\r\nLogs and/or error messages that help illustrate the issue.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "khthai42", "2024-08-25T21:52:19Z", "2025-02-20T22:26:59Z", null, "ethereum-optimism/community-hub", "2025-08-31 01:50:34"]
["I_kwDOL-xLQ86o1Dnw", 165, "[nat] k8s deployment", "Create the necessary k8s config to deploy nat as a service", "CLOSED", 0, "scharissis", "2025-02-05T10:06:50Z", "2025-02-17T05:27:15Z", "2025-02-17T05:27:14Z", "ethereum-optimism/infra", "2025-08-31 01:50:35"]
["I_kwDOL-xLQ86n7A8w", 153, "[nat] Store and use network/devnet configs", "Store and use network/devnet configs so NAT can run against them. ConfigMap?", "CLOSED", 0, "scharissis", "2025-01-29T05:22:52Z", "2025-02-17T05:27:01Z", "2025-02-17T05:27:00Z", "ethereum-optimism/infra", "2025-08-31 01:50:35"]
["I_kwDOL-xLQ86n7AtF", 152, "[nat] GitOps via Argo", "", "CLOSED", 0, "scharissis", "2025-01-29T05:22:04Z", "2025-02-17T05:26:36Z", "2025-02-17T05:26:34Z", "ethereum-optimism/infra", "2025-08-31 01:50:35"]
["I_kwDOL-xLQ86n5TQA", 145, "[nat] Support updated kurtosis-devnet manifest", "* Consume the new manifest struct definitions as a Go dep\n* Use those to test against a local kurtosis devnet", "CLOSED", 0, "scharissis", "2025-01-28T22:11:00Z", "2025-02-19T19:29:39Z", "2025-02-19T19:29:38Z", "ethereum-optimism/infra", "2025-08-31 01:50:35"]
["I_kwDOL-xLQ86n46Nf", 135, "[nat] Deploy on k8s", "* Cron job (for now)\n* Perhaps a ConfigMap for network/devnet info\n* gitops via argo", "CLOSED", 0, "scharissis", "2025-01-28T21:04:31Z", "2025-02-17T05:28:30Z", "2025-02-17T05:28:29Z", "ethereum-optimism/infra", "2025-08-31 01:50:35"]
["I_kwDOL-xLQ86n44XU", 133, "[nat] Make it a service", "* Make NAT run as a service\n* Containerise\n* Deploy to k8s\n* Run on a schedule\n* Emit prometheus metrics\n* Render a grafana dashboard", "CLOSED", 0, "scharissis", "2025-01-28T20:59:46Z", "2025-02-17T05:29:41Z", "2025-02-17T05:29:40Z", "ethereum-optimism/infra", "2025-08-31 01:50:35"]
["I_kwDOH2Qg5s6qePwm", 511, "op-geth is unable to find available peers", "Hello. \n\nI have an issue with one of my 2 optimism node. It seems that it cannot find peers. To fix it I tried to update it to the latest version v1.11.0. But it didn\u2019t helped. I also tried to completely wiped the node and restart from a snapshot but nothing works. \n\nLast thing I\u2019ve tried is to use the bootnodes of my working node to try to help the one that can\u2019t find peers. But still the problems persist.\n\nThen I\u2019ve enabled tracing on my failing node with the option --vmodule=p2p=5. And this was informative. Here is the output :\u202f\n\n```\nTRACE[02-17|10:54:17.607] Failed p2p handshake                     id=b91022c45880bb18 addr=85.195.78.54:39393 conn=staticdial err=\"too many peers\"\nTRACE[02-17|10:54:17.607] Failed p2p handshake                     id=db71b9b55161d3b6 addr=89.58.54.147:30303 conn=staticdial err=\"too many peers\"\nTRACE[02-17|10:54:17.608] Failed p2p handshake                     id=6cfef258c7a11e60 addr=178.63.50.85:39393 conn=staticdial err=\"too many peers\"\n... (many other logs like this)\nTRACE[02-17|10:54:17.902] Starting protocol eth/68                 id=8063e7fb67a4fd5a conn=staticdial\nDEBUG[02-17|10:54:18.063] Removing p2p peer                        peercount=2 id=8063e7fb67a4fd5a duration=161.569ms req=true err=\"too many peers\"\n```\n\nSo apparently the nodes I\u2019m trying to connect are all overloaded with peers already.\nDo you guys have a list of bootnodes that are available and can accept peers ? \n\nBecause if I remove my bootnodes I more or less get the same errors (with a lot of other ones but still too many nodes is very frequent)", "OPEN", 0, "bgiegel", "2025-02-18T10:58:00Z", "2025-02-18T11:05:31Z", null, "ethereum-optimism/op-geth", "2025-08-31 01:50:37"]
["I_kwDOKIwiaM6pHeyY", 1328, "Page not Found", "https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup   \n\nPage not found. ", "CLOSED", 0, "abhi8960git", "2025-02-07T06:02:42Z", "2025-02-18T17:52:21Z", "2025-02-18T17:52:21Z", "ethereum-optimism/docs", "2025-08-31 01:50:41"]
["I_kwDOKIwiaM6mrAqo", 1262, "[L2 Testnet Tutorial] L2 genesis and rollup configuration file creation", "## Description \n<!-- Write a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand-new docs page? -->\n\nThe genesis and rollup configuration file creation needs to be updated to use the `op-deployer` tool. These file creations are touched on in three locations in the docs:\n\n- https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#generate-the-l2-config-files\n- https://docs.optimism.io/builders/chain-operators/deploy/genesis\n- https://docs.optimism.io/builders/chain-operators/tools/op-deployer#inspect-generate-genesis-files-and-chain-information\n\n## Acceptance criteria\n<!-- Clearly list out the definition of done. -->\n\n- The docs mentioned in the description use the `op-deployer` method for creating the genesis and rollup config files\n\n\n## Resources and support\n<!-- Provide additional documentation, context, and subject matter experts to help us complete this issue. -->\n\n- The [op-deployer docs](https://docs.optimism.io/builders/chain-operators/tools/op-deployer) are up to date\n\n## Action items\n<!-- Clear steps to take to complete this issue -->\n\n1. Update the [OP Stack genesis creation](https://docs.optimism.io/builders/chain-operators/deploy/genesis) documentation with the following changes:\n     1. Update the warning callout to say, \"The following genesis creation information is the legacy method for deploying the OP Stack L1 contracts. We do not recommend you use this method. They're left here for historical context.\" and move it to right above the `Solidity script` header\n     4. Add the instructions included in the `op-deployer` documentation here\n2. Update the [L2 testnet tutorial - Generate the L2 config files](https://docs.optimism.io/builders/chain-operators/tutorials/create-l2-rollup#generate-the-l2-config-files) with the steps from the op-deployer docs.\n", "CLOSED", 0, "sbvegan", "2025-01-17T21:01:23Z", "2025-02-18T16:42:47Z", "2025-02-18T16:42:47Z", "ethereum-optimism/docs", "2025-08-31 01:50:41"]
["I_kwDOKIwiaM6ldG6F", 1229, "op-deployer bootstrap command is not working as expected", "## Description \n\nWe've gotten reports from that the `bootstrap` command is not working as expected. Generally folks are trying to use op-deployer and opcm on Holesky and have been unsuccessful.\n\n## Acceptance criteria\n\n- While this issue persists, there's a callout that says this feature is not working as expected. Either due to a bug or missing documentation.\n- If its missing documentation, the documentation should be updated.\n- If its a bug, the documentation should be updated to notify folks that this features is currently broken\n\n## Resources\n\n- https://docs.optimism.io/builders/chain-operators/tools/op-deployer#opcm-bootstrap\n- Zak had a devsup issue around this\n\n## Action items\n\n1. First open a PR to add a call out to the page to inform users that this is not working as expected \n2. Get peer review and merge\n3. Try out the op-deployer docs for opcm bootstrap\n4. Provide the errors folks have been running into to Slipper, along with our current documentation, and figure out the root cause of the issue.\n5. If its missing documentation, open a PR to add that documentation\n6. Test out the docs\n7. Get peer reivew\n8. merge", "CLOSED", 0, "sbvegan", "2025-01-08T16:54:07Z", "2025-02-18T16:42:36Z", "2025-02-18T16:42:36Z", "ethereum-optimism/docs", "2025-08-31 01:50:41"]
["I_kwDOI7W0xc6rRAxx", 1402, "bug", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "rizkyy702", "2025-02-23T18:00:23Z", "2025-02-23T18:16:37Z", "2025-02-23T18:16:37Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6q6c3E", 1391, "[Metrics] What's Interop Enabled App?", "What's defined as interop enabled app? This is tied with OKRs ", "OPEN", 0, "chuxinh", "2025-02-20T22:47:31Z", "2025-02-20T22:47:31Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6q6cKX", 1390, "[Future] Interop Data Explainer Guide", "Similar to Uni's data guide on V4 hook data:  \n[How to Navigate Uniswap v4 Data](\nhttps://uniswapfoundation.mirror.xyz/c7LDDTWhC2ry6gp0nGqcSKHvNHosJmhPQ-ZuIxqeB2I)", "OPEN", 0, "chuxinh", "2025-02-20T22:46:02Z", "2025-02-20T22:46:02Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6q6YY5", 1387, "Refactor Teleportr Dashboard", "After #1380 is merged, update and refactor [Superbridge & Brid.gg Volume Monitoring](https://app.hex.tech/61bffa12-d60b-484c-80b9-14265e268538/app/d7211b8f-75cb-4ecb-bd53-6e8bf63b053f/latest)", "CLOSED", 0, "chuxinh", "2025-02-20T22:39:00Z", "2025-02-21T23:42:33Z", "2025-02-21T23:42:33Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6q6U3Y", 1385, "[Exploratory] Identify High Quality Tokens", "Methodology to identify if a token is of high quality:\n- Initial analysis showing neither number of transfers or unique senders is good signal\n- Need to look into combining token marketcap, DEX volume and token TVL where applicable", "OPEN", 0, "chuxinh", "2025-02-20T22:33:14Z", "2025-02-20T22:33:14Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6mhBgQ", 1265, "ERC20 Further Enhancement Workstream", "Extended work from #1134 after #1264 being merged.\n\n### Superchain Token Metadata \u2705 \n- Pull data and get constant updates from [optimism.tokenlist.json](https://github.com/ethereum-optimism/ethereum-optimism.github.io/blob/master/optimism.tokenlist.json)\n- There's existing job that's pulling data from the list: #1266 \n- Added api pipeline here #1267 \n\n### Enrich Contract Creation with ERC20 and ERC721 contract mapping \u2705 \n- Identify if a contract created is ERC20 or ERC721\n- Question if we should just create separate token contract creation list as we might want to add additional token specific categorisation (Superchain ERC20, OFT, NTT etc)\n- Enabling us to know the % of Superchainerc20 and interop assets v.s. the rest of token assets on Superchain\n\n### Token Standard Identification \u2705 \n- Pipelining the logic behind [SuperchainERC20 Deployments](https://app.hex.tech/61bffa12-d60b-484c-80b9-14265e268538/app/66ac2029-23ab-4b0d-b9a8-51308dad0941/latest?) for Superchain ERC20 tokens\n- Identify NTT: https://wormholescan.io/#/analytics/ntt\n- Identify OFT\n- Other tokens to consider: Axelar\u2019s Interchain Token Service, Hyperlane\u2019s Warp Token, xERC20\n- Use the above to help us segment TVL by token standards\n\n### Token Metadata  \u2705 \n#1361 \n\n### Token Price Data\n- TODOS: check Defillama API (https://defillama.com/docs/api)", "OPEN", 0, "chuxinh", "2025-01-16T20:05:52Z", "2025-02-20T21:02:12Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6ilbcm", 1125, "Handle isoformat strings in time.py", "We are ingesting datetime strings of this manner: \"2023-07-09T13:47:17.000Z\" from the Agora Api and currently they cannot be processed via any function available in time.py.\n\n\nSpecifically\n- The date_fromstr function expects a date string in YYYY-MM-DD format, not a full ISO timestamp.\n- Other functions like datetime_fromepoch or date_toepoch work with epoch values and not ISO 8601 strings.\n", "CLOSED", 0, "dioptx", "2024-12-09T17:01:55Z", "2025-02-19T20:14:55Z", "2024-12-11T12:43:59Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6ifvlP", 1121, "Github metrics pipeline", "Finalize the GitHub metrics required to enable the Platforms Dashboard", "CLOSED", 0, "dioptx", "2024-12-09T07:28:13Z", "2025-02-19T20:14:51Z", "2025-01-14T14:18:25Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6ifu1D", 1120, "Protocol devX Dashboard V1", "Create a Streamlit dashboard to visualize core metrics for the Platform Team (PR lifecycle, staleness, review load).\n", "OPEN", 0, "dioptx", "2024-12-09T07:26:30Z", "2025-02-19T20:14:50Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOhod", 1035, "Implement the Agora api", "Integrate the Agora API into the analytics pipeline in `src/op_analytics/cli/subcommands/pulls/agora.py`\nby implementing a script to pull, process, and load data into BigQuery.\n\n   - Ensure the script handles all Governance related cases such as:\n     - Delegation updates (partial or full).\n     - Self-delegations.\n     - Abstain votes in voting data.\n", "CLOSED", 0, "dioptx", "2024-11-19T09:08:44Z", "2025-02-19T20:14:55Z", "2025-01-07T13:31:46Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOBfU", 1034, "Implement Total Votable Supply Table", "Create the `total_votable_supply` table following the schema in the [Governance Schema Document](https://docs.google.com/document/d/1G479lQS5q25TJCsGraRoO5NC8Jttu0R9_cRSAYPxY9A/edit?usp=sharing)\n- Calculate and record the total votable supply daily.\n- Calculate the `circulating_supply_share` as `(total_votable_supply / total_circulating_supply) * 100`.", "OPEN", 0, "dioptx", "2024-11-19T08:30:57Z", "2025-02-19T20:14:55Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOBU_", 1033, "Implement Voting Power Snapshots Table", "Create the `voting_power_snapshots` table based on the schema in the [Governance Schema Document](https://docs.google.com/document/d/1G479lQS5q25TJCsGraRoO5NC8Jttu0R9_cRSAYPxY9A/edit?usp=sharing)\n- Develop a process to record the voting power of each delegate at least daily.\n- Store snapshots in a way that they can be linked to specific proposals when needed.\n- Test by retrieving voting power over time for individual delegates.", "OPEN", 0, "dioptx", "2024-11-19T08:30:37Z", "2025-02-19T20:14:54Z", null, "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOBMK", 1032, "Implement Votes Table", "Set up the `votes` table as specified in the [Governance Schema Document](https://docs.google.com/document/d/1G479lQS5q25TJCsGraRoO5NC8Jttu0R9_cRSAYPxY9A/edit?usp=sharing)\n- Implement foreign key relationships with the `proposals` and `delegates` tables.\n- Create scripts to ingest vote data from blockchain events or governance records.\n- Ensure all votes are captured, including `for`, `against`, and `abstain`.\n- For approval vote proposals, populate the `elected_candidates` field appropriately.\n- Record the `voting_power` of each delegate at the time of voting.\n- Create tests for the table", "CLOSED", 0, "dioptx", "2024-11-19T08:30:18Z", "2025-02-19T20:14:54Z", "2025-01-07T13:31:21Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOA_P", 1031, "Implement Proposals Table", "Create the `proposals` table using the schema provided in the [Governance Schema Document](https://docs.google.com/document/d/1G479lQS5q25TJCsGraRoO5NC8Jttu0R9_cRSAYPxY9A/edit?usp=sharing)\n- Develop a process to import existing proposals from governance platforms. Validate data completeness.\n- Handle different proposal types (`standard`, `approval_vote`) appropriately.", "CLOSED", 0, "dioptx", "2024-11-19T08:29:57Z", "2025-02-19T20:14:54Z", "2025-01-07T13:31:21Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOAz3", 1030, "Implement Delegations Table", "Create the `delegations` table according to the schema in the [Governance Schema Document](https://docs.google.com/document/d/1G479lQS5q25TJCsGraRoO5NC8Jttu0R9_cRSAYPxY9A/edit?usp=sharing)\n- Create scripts to ingest historical delegation data.\n    - Agora to pull this data for us since we cannot backfill it from their API.\n- Verify data consistency, particularly with delegation events and revocations.\n- Test queries to retrieve delegation histories for specific delegates or delegators.", "CLOSED", 0, "dioptx", "2024-11-19T08:29:35Z", "2025-02-19T20:14:54Z", "2025-01-07T13:31:20Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOAoc", 1029, "Implement Delegates Table", "Create the `delegates` table in the database as specified in the [Governance Schema Document](https://docs.google.com/document/d/1G479lQS5q25TJCsGraRoO5NC8Jttu0R9_cRSAYPxY9A/edit?usp=sharing)\n- Develop a script to populate the table with existing delegate data.\n    - Extract delegate addresses and names from reliable sources. Handle any inconsistencies or duplicates.\n- Ensure the table can be easily expanded in the future to include additional delegate information.\n- Test the table by querying delegate information to confirm data integrity.", "CLOSED", 0, "dioptx", "2024-11-19T08:29:14Z", "2025-02-19T20:14:53Z", "2025-01-07T13:31:20Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6fOAO8", 1028, "Validate Data Sources for Schemas", "- Review the proposed table schemas outlined in the [Governance Schema Document](https://docs.google.com/document/d/1G479lQS5q25TJCsGraRoO5NC8Jttu0R9_cRSAYPxY9A/edit?usp=sharing)\n- For each table (`delegates`, `delegations`, `proposals`, `votes`, `voting_power_snapshots`, `total_votable_supply`), list all required data points.\n- Identify the sources for each data point & Note any data points that are difficult to procure or have potential quality issues.\n- Propose solutions or alternatives for obtaining missing or unreliable data if applicable", "CLOSED", 0, "dioptx", "2024-11-19T08:28:24Z", "2025-02-19T20:14:53Z", "2025-01-07T13:31:30Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOI7W0xc6cTHsP", 934, "Build Tokens Table", "Pre-Reqs:\n- Raw logs, or token transfer tables - https://github.com/ethereum-optimism/op-analytics/pull/1264\n\nSteps:\n1. Get list of ERC20/721/1155 tokens from either 1) logs (filter to token transfer events) or 2) token transfer pipelines\n2. Call the token contract using an RPC, and read values for relevant fields (i.e. name, symbol, decimals) - also assign a field for token standard\n  i. Note: We also need to pull the mint/burn address for interop, but need to check what function this is.\n3. Build a tokens data table with the schema: blockchain | contract_address |symbol | name | decimals (if available) | token standard | ... [other columns]\n\nOther Notes:\n- For table sizing, we may want to only select tokens once they've reached some total transfer volume (i.e. don't pull until a token has been transferred 10 times)\n- If tokens have upgradable/changeable storage values, we want to catch those (i.e. we need to see if the mint/burn changes for interop). So we may need some workflow where we regularly re-check tokens? And also we'd need to store the changelog table for each tokens (i.e. first run on date X get values, 1, 2, 3 - no changes until the pull on date Y, when we saw values 1, 2, 4).\n- If we want to build a historical token supply data source, we can call each token whenever it's transferred and pull totalSupply\n- Tokens must contain certain functions, per the standards (see [ERC20](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/)), but tokens may contain any number of extra functions. There may be ~more that we want to try to pull if available?\n\n\nUse cases:\n- Any token-based query or data model. Right now we pull from external APIs which are super cumbersome, we should have this data in our own database.\n- (If we call token supply) Total\n\nNext steps:\n- Interop / SuperchainERC20 upgrade monitoring\n- Token prices data source\n- Token Supply", "CLOSED", 0, "MSilb7", "2024-10-29T20:26:38Z", "2025-02-18T21:20:50Z", "2025-02-18T21:20:48Z", "ethereum-optimism/op-analytics", "2025-08-31 01:50:45"]
["I_kwDOKIsnqM6q_sC4", 647, "[Tracking Sim-Seq] Support the Chain Governor 3/3.", "As per suggesting here by @mds1 would be nice to also support the 3/3 of chain governor during the simulation of stacked tasks.\n\nNext steps are:\nTo simulated ALL the tasks from holocene upgrade from (021 to 030) in a row and not only **4** first of the first signing window.\n\nhttps://github.com/ethereum-optimism/superchain-ops/pull/611/files#r1964815892\n\n", "CLOSED", 0, "Ethnical", "2025-02-21T11:52:42Z", "2025-09-24T19:42:58Z", "2025-09-24T19:42:58Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:51:01"]
["I_kwDOKIsnqM6q_q8u", 646, "[Tracking: Sim-Seq] Kill anvil after simulation", "An issue, if `ps aux` doesn't work in the CI. so when using the `ps` to find which pid we neeed to kill doesn't work and make the CI failling.\nIn the future, maybe we should get the PID in the env var and kill it directly at the end.  \n```\n#TODO: In the future, we should kill the anvil fork here?\n```\n\nhttps://github.com/ethereum-optimism/superchain-ops/pull/611/files", "CLOSED", 0, "Ethnical", "2025-02-21T11:50:45Z", "2025-09-24T19:42:44Z", "2025-09-24T19:42:44Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:51:01"]
["I_kwDOKIsnqM6qrfR4", 628, "CI reach rate limite", "We have an issues that make the nodes reach limit the current request and indeed make the CI failing. \nThis seems to be related of the usage of the secret _token_ of the allnodes endpoint. \n\n![Image](https://github.com/user-attachments/assets/c90a28d2-3ddc-4d1a-b874-099ef4ae24a6)\n\nThis execution will show the trace of the issue: https://app.circleci.com/pipelines/github/ethereum-optimism/superchain-ops/3533/workflows/e705dcdb-b906-4fdf-bae6-88a81960de4e/jobs/39781 ", "CLOSED", 0, "Ethnical", "2025-02-19T14:28:25Z", "2025-09-24T19:48:59Z", "2025-09-24T19:48:59Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:51:01"]
["I_kwDOKIsnqM6qJspo", 610, "Add config validations to each template that runs in CI", "\nPer this [comment](https://github.com/ethereum-optimism/superchain-ops/pull/599#discussion_r1956617422).\n\n> Got it, thank you. Another type of test we should have if we don't have it already, is config files of real templates. For example, we can have a ProtocolVersionsUpdate template, and a test config file specifies some random version strings to upgrade too. The ProtocolVersionsUpdate solidity template has validations, and CI runs the test config files for these real templates. This gives us confidence that our templates are always working and pass the validations\n\n\nPermanently running them in CI because they're templates, that way we know templates always work and pass the assertions.\n\n-----\n\nOur current regression tests use an older block. We want to make sure our templates are always useable from the latest block. By running a simulation from the task directory we can make sure the latest block is always used. \n\n`src/improvements/tasks/example/*`:\n    - we have TOML files and .env file and [README.md](http://readme.md/)\n    - keep these as non terminal\n    - Have one example per template make sure it runs in CI.", "CLOSED", 0, "blmalone", "2025-02-14T20:45:18Z", "2025-02-21T16:29:37Z", "2025-02-21T16:29:37Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:51:01"]
["I_kwDOKIsnqM6p-X0b", 596, "Safety checks after performing a delegate call", "A new feature in superchain-ops 2.0 is enabling the parent multisig to delegatecall to a contract. Our initial use case involves OPCM. Instead of using [Multicall3.sol](https://github.com/mds1/multicall/blob/main/src/Multicall3.sol) for batching actions, we are switching to [Multicall3Delegatecall.sol](https://github.com/ethereum-optimism/superchain-ops/blob/d38a5d835ebf93f81be788004266cf59a205bbf4/src/Multicall3Delegatecall.sol), which performs a delegatecall to OPCM.\n\n**_Why use delegatecall?_**\nThe primary reason is to prevent any state changes in OPCM when executing functions. Allowing state modifications in OPCM could lead to non-deterministic behavior for chains integrating with OPCM in the future.\n\n**_Security precautions to detect unwanted behavior early_**\nBy using delegatecall from the upgrade-controller, we introduce a risk: state changes on the upgrade-controller contract itself, which m**ust be avoided at all costs**.\n\nTo mitigate this, I propose that superchain-ops\u2019 simulation step includes a post-execution check to verify that no state changes occurred in both the upgrade-controller contract and OPCM.", "CLOSED", 0, "blmalone", "2025-02-13T17:36:18Z", "2025-02-20T21:28:39Z", "2025-02-20T21:28:39Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:51:01"]
["I_kwDOKIsnqM6pe4N-", 573, "Sepolia Testing Test Cases", "We have deployed a test L2 chain on sepolia. See [this message](https://discord.com/channels/1244729134312198194/1327372079380824267/1337176792376807516) for more information. \n\nIt's important that we track which sepolia tests we've performed so that we know what critical paths we've manually tested. From a high level, we don't really care what upgrade task is selected. We care about testing the higher level flows. This includes single/nested owner safes along with OPCM upgrades. \n\n**Test Cases:** \n- [x] Upgrade task with nested owner safe\n     - [x] Transaction hash: https://github.com/ethereum-optimism/superchain-ops/pull/595#issuecomment-2657670708 https://sepolia.etherscan.io/tx/0x80c22e8eaa3f7071a1806c813d1f342755158a4b8f0de43ccf358de2524022f0\n     - [x] Performed by: @ElliotFriedman \n- [x] Upgrade OPCM task with nested owner safe\n     - [x] Transaction hash: ([see below](https://github.com/ethereum-optimism/superchain-ops/issues/573#issuecomment-2666525155))\n     - [x] Performed by: @ElliotFriedman\n\n", "CLOSED", 0, "blmalone", "2025-02-10T19:39:12Z", "2025-02-21T23:41:51Z", "2025-02-21T23:41:42Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:51:01"]
["I_kwDOKIsnqM6dTX8Z", 368, "Add tests for set-implementation template", "The fp-recovery set implementation task could use a test to ensure it is always ready to use.\n\n> normally what we do for testing in-progress tasks is just simulate them in CI and ensure they don't revert (either the sim itself, or failed solidity checks). So if we do want to test these, I'd suggest something similar, where we do have the extra preceding step of generating the task from the template in CI\n[06:02](https://oplabs-pbc.slack.com/archives/D07EK408M0X/p1730923346605249)\nfor example we always run the security council rehearsal tasks in CI here which ave a similar \"setup from template\" step https://github.com/ethereum-optimism/superchain-ops/blob/efb0f734c65f5657ca07c18c8ac32c3c03331ef7/.circleci/config.yml#L237", "CLOSED", 0, "ajsutton", "2024-11-06T20:04:51Z", "2025-02-21T02:53:05Z", "2025-02-21T02:53:05Z", "ethereum-optimism/superchain-ops", "2025-08-31 01:51:01"]
["I_kwDOMMiGhs6bNXAm", 217, "investigate anvil eth_getBlockByNumber with true not returning tx type in the tx array", "investigate if this is anvil specific or a general issue. also investigate if this happens for other tx types\r\n\r\nrepro: \r\n1. run `anvil --optimism`\r\n2. send a deposit tx\r\n3. `cast block`\r\n4. `cast rpc eth_getBlockByNumber $BlockNumber true`\r\n5. there's no tx type for deposit tx", "CLOSED", 0, "jakim929", "2024-10-22T01:01:59Z", "2025-02-22T19:52:31Z", "2025-02-22T19:52:31Z", "ethereum-optimism/supersim", "2025-08-31 01:51:16"]
["I_kwDODjvEJM6rGcqh", 14494, "op-batcher: does not shutdown gracefully", "When we try to shutdown the batcher it often:\n* takes several seconds\n* logs errors and warnings\n* exists 137 (SIGKILL)\n\n\nSee these Kurtosis logs:\n```\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=info msg=\"Handling receipt\" id=af9623e8f11b1095a218c924586ca936:0\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=warn msg=\"Transaction failed to send\" tx_id=af9623e8f11b1095a218c924586ca936:0 err=\"transaction manager is closed\"\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=error msg=\"error waiting for transactions to complete\" err=\"transaction manager is closed\"\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=warn msg=\"main loop returning\"\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=info msg=\"Receipt processing loop done\"\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=info msg=\"DA throttling loop done\"\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=info msg=\"Batch Submitter stopped\"\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=info msg=\"balance metrics shutting down\"\n2025-02-22 08:22:07 t=2025-02-22T08:22:07+0000 lvl=info msg=\"Batch Submitter stopped\"\n```\n\nThese lines seem to conflict with this comment:\nhttps://github.com/ethereum-optimism/optimism/blob/a10fd5259a3af9a465955b035e16f516327d51d5/op-batcher/batcher/service.go#L413-L417\n\nsince the tx manager being closed results in an error waiting for transactions to complete. \n\nThis could probably be cleaned up. If we shutdown straight after startup, it shuts down cleanly (probably because there are no txs in flight yet). ", "OPEN", 0, "geoknee", "2025-02-22T08:18:19Z", "2025-02-22T08:23:04Z", null, "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6q9WNF", 14481, "Smart contracts style guide: Document use of interfaces", "When modifying the smart contracts in `packages/ops-bedrock` we don't have contracts inherit their interfaces, which can lead to bugs and lost dev cycles. [There are reasons for that](https://discord.com/channels/1244729134312198194/1341296366944784385/1341614013427093564), however, and we should document it in the [Style Guide](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/meta/STYLE_GUIDE.md).\n\n", "CLOSED", 0, "alcueca", "2025-02-21T07:06:36Z", "2025-02-21T10:02:22Z", "2025-02-21T10:02:20Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6qyvS_", 14452, "execution_1  | Fatal: Failed to register the Ethereum service: gap in the chain between ancients [0 - #16488832] and db [#16488839 - #16488838]", "Hi ,\n\nwhen we where running with below version it got stop sycing.\n```\nENV REPO=https://github.com/ethereum-optimism/optimism.git\nENV VERSION=v1.7.6\n\nENV REPO=https://github.com/ethereum-optimism/op-geth.git\nENV VERSION=v1.101315.1\n\n```\n\n**know we have update this latest version but it is giving fatal error as show in subject.**\n\n```\nENV REPO=https://github.com/ethereum-optimism/optimism.git\nENV VERSION=v1.11.0\nENV COMMIT=70fa4491f45b3d5d493394da2a154e3f22b61a5a\nENV REPO=https://github.com/ethereum-optimism/op-geth.git\nENV VERSION=v1.101500.0\nENV COMMIT=9111c8f18ce514916105252f4530782e2ac2b598 ) \n```\n\n[2025-02-20_134444.pdf](https://github.com/user-attachments/files/18883262/2025-02-20_134444.pdf)", "OPEN", 0, "SMRehman-KrypC-Xygle", "2025-02-20T08:25:00Z", "2025-02-20T22:14:21Z", null, "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6qZZ0H", 14399, "op-supervisor: SyncStatus may return incomplete results immediately after startup", "op-supervisor's sync status tracker starts with a blank state then adds each chain as it receives events. If the SyncStatus rpc is called before it has received all events for all chains to populate its initial state, it may return incomplete results which are potentially incorrect.\n\nThe main risk here is if no events have been received for a chain, it won't have an entry in `statuses` at all and so won't be considered when calculating the derived attributes like `MinSyncedL1` and the safe and finalized timestamps. This could lead the challenger to perform incorrect actions and lose bonds.", "CLOSED", 0, "ajsutton", "2025-02-17T21:01:44Z", "2025-02-18T17:07:18Z", "2025-02-18T17:07:17Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6qYPuC", 14398, "kurtosis devnet: just simple-devnet failure with ARM CPU(aarch64 architecture)", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n```\n2025/02/17 16:34:07 Building docker image for project: op-node with tag: op-node:simple-devnet\n2025/02/17 16:34:07 Error: error deploying environment: error rendering template: error processing template: failed to execute template: template: template:17:21: executing \"template\" at <localDockerImage \"op-node\">: error calling localDockerImage: build command failed: exit status 1\nOutput: docker buildx build --load -t op-node:simple-devnet -f ..//ops/docker/op-stack-go/Dockerfile --target op-node-target --build-arg GIT_COMMIT={git_commit} --build-arg GIT_DATE={git_date}  ../\n#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from Dockerfile\n#1 transferring dockerfile: 10.86kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/golang:1.22.7-alpine3.20\n#2 ...\n\n#3 [internal] load metadata for docker.io/library/alpine:3.20\n#3 DONE 0.2s\n\n#2 [internal] load metadata for docker.io/library/golang:1.22.7-alpine3.20\n#2 DONE 0.2s\n\n#4 [builder  1/12] FROM docker.io/library/golang:1.22.7-alpine3.20@sha256:48eab5e3505d8c8b42a06fe5f1cf4c346c167cc6a89e772f31cb9e5c301dcf60\n#4 DONE 0.0s\n\n#5 [op-node-target 1/2] FROM docker.io/library/alpine:3.20@sha256:de4fe7064d8f98419ea6b49190df1abbf43450c1702eeb864fe9ced453c1cc5f\n#5 CACHED\n\n#6 [internal] load build context\n#6 transferring context: 141.72kB 0.0s done\n#6 DONE 0.1s\n\n#7 [builder  2/12] RUN apk add --no-cache curl tar gzip make gcc musl-dev linux-headers git jq bash\n#7 CACHED\n\n#8 [builder  3/12] RUN wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq &&     chmod +x /usr/local/bin/yq\n#8 CACHED\n\n#9 [builder  4/12] COPY ./mise.toml .\n#9 CACHED\n\n#10 [builder  5/12] RUN curl -L https://github.com/casey/just/releases/download/$(yq '.tools.just' mise.toml)/just-$(yq '.tools.just' mise.toml)-x86_64-unknown-linux-musl.tar.gz |     tar xz -C /usr/local/bin just\n#10 0.101 /usr/local/bin/yq: line 1: syntax error: unexpected \"(\"\n#10 0.104 /usr/local/bin/yq: line 1: syntax error: unexpected \"(\"\n#10 0.106   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n#10 0.106                                  Dload  Upload   Total   Spent    Left  Speed\n100     9  100     9    0     0     94      0 --:--:-- --:--:-- --:--:--    93\n#10 0.203 \n#10 0.203 gzip: stdin: not in gzip format\n#10 0.203 tar: Child returned status 1\n#10 0.203 tar: Error is not recoverable: exiting now\n#10 ERROR: process \"/bin/sh -c curl -L https://github.com/casey/just/releases/download/$(yq '.tools.just' mise.toml)/just-$(yq '.tools.just' mise.toml)-x86_64-unknown-linux-musl.tar.gz |     tar xz -C /usr/local/bin just\" did not complete successfully: exit code: 2\n------\n > [builder  5/12] RUN curl -L https://github.com/casey/just/releases/download/$(yq '.tools.just' mise.toml)/just-$(yq '.tools.just' mise.toml)-x86_64-unknown-linux-musl.tar.gz |     tar xz -C /usr/local/bin just:\n0.101 /usr/local/bin/yq: line 1: syntax error: unexpected \"(\"\n100     9  100     9    0     0     94      0 --:--:-- --:--:-- --:--:--    93\n0.203 \n0.203 gzip: stdin: not in gzip format\n0.203 tar: Child returned status 1\n0.203 tar: Error is not recoverable: exiting now\n------\nDockerfile:30\n--------------------\n  29 |     COPY ./mise.toml .\n  30 | >>> RUN curl -L https://github.com/casey/just/releases/download/$(yq '.tools.just' mise.toml)/just-$(yq '.tools.just' mise.toml)-x86_64-unknown-linux-musl.tar.gz | \\\n  31 | >>>     tar xz -C /usr/local/bin just\n  32 |     \n--------------------\nERROR: failed to solve: process \"/bin/sh -c curl -L https://github.com/casey/just/releases/download/$(yq '.tools.just' mise.toml)/just-$(yq '.tools.just' mise.toml)-x86_64-unknown-linux-musl.tar.gz |     tar xz -C /usr/local/bin just\" did not complete successfully: exit code: 2\nerror: Recipe `_docker_build` failed on line 24 with exit code 1\n```\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\nkurtosis version: 1.5.0\njust version: 1.39.0\nmachine: arm(aarch64)\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "mateusfigmelo", "2025-02-17T17:46:24Z", "2025-02-19T15:30:37Z", "2025-02-19T15:30:35Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6qJ8Of", 14385, "Update DeployUtils semgrep rule to catch any cases where args are NOT used", "The following semgrep rule:\n\n```\n  - id: sol-safety-deployutils-args\n    languages: [solidity]\n    severity: ERROR\n    message: _args parameter should be wrapped with DeployUtils.encodeConstructor\n    pattern-regex: DeployUtils\\.(create1|create2|create1AndSave|create2AndSave)\\s*\\(\\s*\\{[^}]*?_args\\s*:\\s*(?!\\s*DeployUtils\\.encodeConstructor\\()\\s*[^}]*?\\}\\s*\\)\n```\n\nDoes NOT catch the case where you don't actually provide the `_args` parameter which allows you to do unsafe things. We need to either fix this rule or add a new rule that catches cases where you use DeployUtils.create without the _args parameter.", "CLOSED", 0, "smartcontracts", "2025-02-14T21:28:43Z", "2025-02-18T17:21:12Z", "2025-02-18T17:21:12Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6p01mL", 14343, "kurtosis-devnet: just simple-devnet fails on spinning L2 components", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nRunning `just simple-devnet` to launch local kt-devnet fails and outputs logs like the following:\n```\nAdding service with name 'op-el-1-op-geth-op-node-op-kurtosis' and image 'us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:latest'\n2025/02/12 18:45:59 Error: error deploying environment: error deploying kurtosis package: execution error: An error occurred executing instruction (number 50) at github.com/ethpandaops/optimism-package/src/el/op-geth/op_geth_launcher.star[130:31]\n```\nPlease check [Gist](https://gist.github.com/dailinsubjam/6011e8053a2c94a0566a1dab760721a8) for full logs. Starting [line 658](https://gist.github.com/dailinsubjam/6011e8053a2c94a0566a1dab760721a8#file-simple-devnet-log-L658) is the full error message. Looks like the failing happens on spinning L2 components.\n\nI am able to run `just simple-devnet` last week, but not sure what changes have been made this week that has effect on running the devnet.\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n1. Checkout latest `develop` (https://github.com/ethereum-optimism/optimism/commit/01ddb2e6a09edf55a7cb2130e0a5b6acd0c2d2fa)\n2. Run `cd kurtosis-devnet && just simple-devnet`\n3. the log says it fails to deploy kurtosis package due to no such file or directory\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n`just simple-devnet` could run smoothly and successfully launch the local kt-devnet.\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n- OS: x86-64 based Amazon Linux 2023\n- kurtosis version: 2.1.0\n- Docker Engine version: 25.0.6\n\n**Configurations:**\nNo required special configurations\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\nFull logs: [Gist](https://gist.github.com/dailinsubjam/6011e8053a2c94a0566a1dab760721a8)\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n", "CLOSED", 0, "dailinsubjam", "2025-02-12T19:44:08Z", "2025-02-18T01:43:16Z", "2025-02-18T01:43:02Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6pzkxP", 14339, "Remove `strict` intent type", "Remove `strict` because its causing confusion. `op-deployer` should instead default to intent type `standard`, which will be updated to auto populate the `ProxyAdmin` and `Challenger` with standard values (as `strict` previously did). Users can still use the `standard-overrides` intent type if they want to initialize with all standard values, but change anything to their custom value", "CLOSED", 0, "bitwiseguy", "2025-02-12T17:04:13Z", "2025-02-18T22:15:09Z", "2025-02-18T22:15:09Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6ptnav", 14331, "kurtosis-devnet: just simple-devnet fails due to reading different forge scripts", "**Bug Description**\n`just simple-devnet` fails and outputs logs like the following:\n\n```\nApplication failed: error in pipeline stage apply: failed to deploy superchain: failed to load DeploySuperchain.s.sol script: could not load script artifact: failed to open artifact \"DeploySuperchain.s.sol/DeploySuperchain.json\": open DeploySuperchain.s.sol/DeploySuperchain.json: no such file or directory\n```\n\nPlease check [Gist](https://gist.github.com/Kourin1996/513cc871283ababfbe377bfbb153df6b) for full logs.\n\nI checked `kurtosis-devnet/contracts-bundle.tar.gz` which includes the artifacts of `forge build` and is used by `op-deployer`. `optimism/kurtosis-devnet/contracts-bundle/forge-artifacts/DeploySuperchain.s.sol` directory has the following files:\n\n```\nDeploySuperchain.default.json\nDeploySuperchain.dispute.json\nDeploySuperchainInput.default.json\nDeploySuperchainInput.dispute.json\nDeploySuperchainOutput.default.json\nDeploySuperchainOutput.dispute.json\n```\n\nThe artifacts did not contain `DeploySuperchain.s.sol/DeploySuperchain.json`, causing op-deployer to fail when reading the script. As a result, `genesis.json` was not generated, leading to the failure of subsequent steps.\n\n**Steps to Reproduce**\n1. Checkout latest `develop` (4b1ecf861)\n2. Run `cd kurtosis-devnet && just simple-devnet`\n3. Confirm No.2 fails and the log says it fails to deploy some contracts due to `no such file or directory`\n\n**Expected behavior**\n`op-deployer` should read proper path of artifacts OR `forge build` should generate appropriate artifacts\n\n**Environment Information:**\n- OS: macOS Sequoia 15.1.1\n- kurtosis version: 1.4.4\n- Docker Engine version: 27.3.1\n\n**Configurations:**\nNo required special configurations", "CLOSED", 0, "Kourin1996", "2025-02-12T06:30:32Z", "2025-02-17T15:22:35Z", "2025-02-17T15:22:33Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6pg-YI", 14303, "contracts: Add interop FaultDisputeGame (permissionless interop game)", "There's an issue to [add the interop PermissionedDisputeGame](https://github.com/ethereum-optimism/optimism/issues/13896), this one is for the interop FaultDisputeGame.", "CLOSED", 0, "pauldowman", "2025-02-11T00:09:13Z", "2025-02-19T17:12:45Z", "2025-02-19T17:12:44Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6oxd1T", 14158, "Downgrade MIPS on OP Sepolia to MIPS.sol", "MT Cannon was deployed on OP Sepolia before the decision to deploy it with OPCM. So we need to switch back to MIPS.sol from MIPS64.sol before the upgrade to support L1 Pectra.", "CLOSED", 0, "pauldowman", "2025-02-05T00:00:31Z", "2025-02-18T15:59:30Z", "2025-02-18T15:59:28Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6olsxD", 14116, "Add MIPS64.sol to code freeze script", "## Description\nWhen MIPS64 is final, add it to [the frozen files](https://github.com/ethereum-optimism/optimism/blob/acf7d6921b89ca7c21f66605287f8959340a13ec/packages/contracts-bedrock/scripts/checks/check-frozen-files.sh#L47) script. ", "CLOSED", 0, "mbaxter", "2025-02-03T20:25:07Z", "2025-02-18T15:55:48Z", "2025-02-18T15:55:47Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6oNjna", 14077, "op-challenger: Handle proposals beyond current chain heads [interop]", "Challenger has to handle the case where the proposed timestamp is in the future so when it requests a super root from supervisor there is no data because the chains haven't reached that timestamp yet. Need to work out what supervisor will return in that case, detect it in challenger and use the invalid hash as the claim (since it is beyond the safe head).\n\nThis is in addition to the case where we can get a super root but it wasn't safe at the game's L1 head (tracked separately).", "CLOSED", 0, "ajsutton", "2025-01-31T00:14:54Z", "2025-02-19T21:50:26Z", "2025-02-19T21:50:26Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6oLZ6s", 14072, "Implementation of OPPrestateUpdater based on OPCM (Upgrade 12)", "https://github.com/ethereum-optimism/optimism/pull/13998", "CLOSED", 0, "maurelian", "2025-01-30T18:42:44Z", "2025-02-19T14:42:59Z", "2025-02-19T14:42:58Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6n5j8w", 14032, "Feature Request: Initialize op-challenger metrics to 0", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nChain operators have reported having difficulty handling metrics that are infrequently recorded.  For example, [vm_execution_time](https://github.com/ethereum-optimism/optimism/blob/750ed2025f4ef00c6c5a9f1ffee90c98fdeb39bf/op-challenger/game/fault/trace/vm/executor.go#L137) is only recorded if the op-challenger reaches the bottom half of a dispute game where running the VM is required. \n\n**Describe the solution you'd like**\nWe should initialize metrics to 0 so they show up immediately.  We could do this in the [`NewTypedVmMetrics`](NewTypedVmMetrics).  ", "CLOSED", 0, "mbaxter", "2025-01-28T23:00:35Z", "2025-02-21T02:57:56Z", "2025-02-21T02:57:54Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6nwPQi", 14012, "op-program: Guard against replacement block used for hazard checks", "The op-program consolidation routine may reorg an optimistic block if it contains invalid messages.\nIt's important that the L2 oracle does not accidentally reference a block that replaces the optimistic block. Otherwise, the interop dependency check would be invalid.\nWe should refactor consolidation a bit to ensure this doesn't happen. Or panic if we detect this occurring so it's caught early in tests.", "CLOSED", 0, "Inphi", "2025-01-28T01:48:48Z", "2025-02-20T21:54:24Z", "2025-02-20T21:54:22Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6nmnj5", 13994, "Document release process updates", "I'm individual contracts, we currently do:\n- release contract semver of 3.12.0\n- during dev, use 3.12.1-beta.1, 3.12.1-beta.2\n- next release of that contract has semver 3.12.1\n\nproposal is to instead switch back to our original approach, where every change bumps the semver\n- release contract semver of 3.12.0\n- during dev, bump to 3.12.1, then 3.12.2 , then 3.12.3\n- next release ends up being 3.12.3\n\nThis is because we don\u2019t need to differentiate between contracts that get released or not, we\u2019re just releasing anything that has changed.", "CLOSED", 0, "maurelian", "2025-01-27T01:32:14Z", "2025-02-19T21:12:24Z", "2025-02-19T21:12:24Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6nYohG", 13961, "op-program: interop - Utilise EIP-2935 to find block by number", "Currently op-program walks back one block header at a time via ParentHash to find the requested block number (ensuring all inputs are verified by hash).  Pectra introduces [EIP-2935](https://eips.ethereum.org/EIPS/eip-2935) which makes block hashes available in a system contract storage and could be used to skip back to old blocks significantly faster.\n\nUpdate the BlockByNumber implementation to use this method, ensuring that caching is updated correctly and can handle not caching the block hash of every block while walking backwards.\n\nBlocked on having Pectra supported on L2.", "CLOSED", 0, "ajsutton", "2025-01-24T00:55:07Z", "2025-02-17T20:50:15Z", "2025-02-17T20:50:14Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6nFMqC", 13912, "contracts: OptimismPortalInterop should only accept superroot games as recognised type", "Or at least we need to ensure we are safe if the recognised game type is accidentally set incorrectly and that invalid withdrawals can't be proven against the single chain roots they use.", "CLOSED", 0, "ajsutton", "2025-01-22T01:32:11Z", "2025-02-20T21:46:23Z", "2025-02-20T21:46:23Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6nFMIl", 13909, "op-proposer: Update op-proposer to propose superroots when the game type is set to the interop game type.", "Consider if it is better to add this to op-challenger instead and deprecate op-proposer.", "CLOSED", 0, "ajsutton", "2025-01-22T01:30:05Z", "2025-02-21T03:18:52Z", "2025-02-21T03:18:52Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6nFLCh", 13897, "op-challenger: Add permissioned interop game type", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:25:30Z", "2025-02-19T03:38:24Z", "2025-02-19T03:38:23Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6mNX0F", 13776, "op-program: Handle invalid transition states during interop consolidation", "The consolidation step of interop derivation needs to handle the case where there are invalid transition states. When this happens, each optimistic block that's found to be invalid must be replaced with a deposit-only block.\n\nThe native block execution hint can be used to prepare the data needed to build a deposit-only block in the program.", "CLOSED", 0, "Inphi", "2025-01-15T00:10:46Z", "2025-02-20T21:57:43Z", "2025-02-20T21:57:42Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6mKxiQ", 13757, "Mini OPCM Upgrades Gov Proposal (Upgrade 12) - Jan 31", "Each piece of upgrade 12 will create mini-posts in the governance forum for each of the proposed features before Cycle 34. \n\nThese posts will be slimmed down versions of the [standard upgrade proposal](https://github.com/ethereum-optimism/OPerating-manual/blob/main/Protocol%20Upgrade%20Template.md), including just the following sections:\n\nThese are not formal proposals to be voted on, and are intended for social signalling and to frontload any discussion \u2014 Ben Jones can provide a blurb to put at the top of each explaining the context of these mini-posts.\n\nThen for Cycle 34, we will still create a standard [Governance protocol upgrade proposal](https://github.com/ethereum-optimism/OPerating-manual/blob/main/Protocol%20Upgrade%20Template.md). We can just pull in content that was written for these mini-posts.", "CLOSED", 0, "maurelian", "2025-01-14T17:23:18Z", "2025-02-19T14:36:51Z", "2025-02-19T14:36:51Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6dMCyo", 12838, "op-batcher: Check whether the throttling interval can be removed", "We should check whether the throttling interval ticker in the throttling loop actually makes sense, since the threshold loop is already triggered by the `l2BlockAdded` signal.\r\n\r\nIf not, we should remove it and then disable throttling by one (or both) of the throttling parameters being 0.\r\n\r\n> I'm wondering now, what's actually the purpose of enabling throttling on this ticker? The only event that can _increase_ pending bytes is adding a block to the queue, which is already covered by the `l2BlockAdded` event channel. I'll get this PR in regardless, as it doesn't hurt, but we should investigate whether we can simplify by removing it. We should then probably revert back to disabling this feature if one of the thresholds is set to 0.\r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/optimism/pull/12735#discussion_r1830464579_\r\n            ", "CLOSED", 0, "sebastianst", "2024-11-06T06:40:52Z", "2025-02-22T08:29:14Z", "2025-02-22T08:29:14Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6YtViD", 12255, "Cannon version STF verification tests for 64-bit MT", "The `make -C cannon cannon-stf-verify` task should be extended to compare states generated by the latest VM against a (pre)-release 64-bit MT-Cannon VM.\n\nThis is probably one of the final issues left in the MT-Cannon project. As it relies on a stable 64-bit MT-Cannon STF before it can be completed.", "CLOSED", 0, "Inphi", "2024-10-02T15:33:13Z", "2025-02-20T20:24:25Z", "2025-02-20T20:24:25Z", "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6Tue5o", 11551, "op-program: remove op-geth Hash Scheme Dependency", "\r\n\r\n**Describe the solution you'd like to see**\r\n\r\nCurrently the preimage data required to execute op-program can only be retrieved from an archive op-geth node using the hash/tree database scheme via `debug_dbGet`. These are the worst performing kind of nodes and often struggle to keep up with op-mainnet loads, preventing us from increasing gas limits. Without this we risk our challenger being unable to counter games in a timely manner because the nodes are unable to keep up with the chain.\r\n\r\n op-program will need to be modified to be able to load L2 world state data and code via a more standard API. Suggestion is to add a new standard `debug_executionWitness` that provides all required state data to execute a block in one call.\r\n\r\n**Additional context**\r\nWe will like to see some open source contributions that can help with this implementation\r\n", "OPEN", 0, "BlocksOnAChain", "2024-08-20T12:43:51Z", "2025-02-18T20:09:55Z", null, "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDODjvEJM6GGEtP", 10202, "Use file-relative paths instead of project-relative", "**Is your feature request related to a problem? Please describe.**\r\n\r\nThese project relative paths:\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/a4c47fe1cdb8b83bfc27482e0e9fc84d3b62b65c/packages/contracts-bedrock/src/libraries/Encoding.sol#L4\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nShould be changed to file relative paths:\r\n\r\n```solc\r\nimport { Types } from \"./Types.sol\";\r\n```\r\n\r\n**Additional context**\r\n\r\nFor example, these files cannot be used in Remix as the npm imports cannot disambiguate \"src/\"\r\n\r\nThis also causes issues with Foundry, where the same file is imported twice causing `T != T` errors.", "OPEN", 0, "adraffy", "2024-04-18T04:50:14Z", "2025-02-18T14:47:19Z", null, "ethereum-optimism/optimism", "2025-08-31 01:51:31"]
["I_kwDOKSJyfM6nFTXO", 627, "@eth-optimism/viem/chains improvements", "- export the devnet chain definitions as well\n- export supersimChains\n- export a mapping of (chainIdentifier => chainId)\n- correctly define L1 for supersim chains - these are wrong / defaulted to op mainnet definitions\n- https://github.com/ethereum-optimism/ecosystem/pull/626", "CLOSED", 0, "jakim929", "2025-01-22T02:00:06Z", "2025-02-26T05:47:18Z", "2025-02-26T05:47:17Z", "ethereum-optimism/ecosystem", "2025-08-31 01:52:39"]
["I_kwDOEf1bQc5w-W89", 898, "Help joining new to community ", "Hello all I am new to the NFT world like to have a place to get help and info", "OPEN", 0, "eblake2", "2023-09-13T23:30:02Z", "2025-03-29T13:56:48Z", null, "ethereum-optimism/community-hub", "2025-08-31 03:24:15"]
["I_kwDOKSJyfM6wfoRA", 714, "Update SuperchainWETH FMA in accordance to SuperchainETHBridge changes", "FMA: https://github.com/ethereum-optimism/design-docs/issues/234#issuecomment-2766863996", "CLOSED", 0, "tremarkley", "2025-03-31T17:14:25Z", "2025-04-04T21:48:05Z", "2025-04-04T21:48:03Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:16"]
["I_kwDOKSJyfM6wfmVc", 712, "Deploy relayer for interop alphanet", "", "CLOSED", 0, "tremarkley", "2025-03-31T17:10:36Z", "2025-04-04T21:55:00Z", "2025-04-04T21:55:00Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:16"]
["I_kwDOKSJyfM6veH8u", 699, "update supersim to contain latest interop contracts", "These changes are primarily from: https://github.com/ethereum-optimism/optimism/pull/14790 and https://github.com/ethereum-optimism/optimism/pull/14883", "CLOSED", 0, "tremarkley", "2025-03-24T17:04:44Z", "2025-03-24T21:35:15Z", "2025-03-24T21:35:14Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:17"]
["I_kwDOKSJyfM6vd4TN", 697, "Update viem to support new executing message requirements", "With the implementation of https://github.com/ethereum-optimism/design-docs/pull/214 there is a new validation mechanism for executing interoperable message. This issue is for updating the viem actions to support this.", "CLOSED", 0, "tremarkley", "2025-03-24T16:41:48Z", "2025-03-25T21:57:11Z", "2025-03-25T21:57:11Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:17"]
["I_kwDOKSJyfM6t9CqI", 684, "Implement rename api key route", "", "CLOSED", 0, "tremarkley", "2025-03-13T21:50:00Z", "2025-03-24T17:26:56Z", "2025-03-14T22:07:49Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:17"]
["I_kwDOKSJyfM6t9Co1", 683, "Implement delete api key route", "", "CLOSED", 0, "tremarkley", "2025-03-13T21:49:57Z", "2025-03-24T17:27:00Z", "2025-03-17T21:49:04Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:17"]
["I_kwDOKSJyfM6tzT1M", 680, "core: upgrade to eslint v9", "older versions are deprecated. We should migrate our eslint config files and consolidate as much as possible\n\nReferences:\n- https://eslint.org/docs/latest/use/configure/migration-guide", "CLOSED", 0, "hamdiallam", "2025-03-13T05:27:25Z", "2025-03-27T17:51:29Z", "2025-03-27T17:51:29Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:17"]
["I_kwDOKSJyfM6j3y8o", 596, "Crossdomain Relayer w/ Indexer", "We need to determine the scope of indexing that we offer developers. This issue is a placeholder until adequate product and engineering scoping can be completed.\n\n**Some key points to keep in mind:** \n* Indexing all chains and events in the growing Superchain could become unwieldy - as the ecosystem grows this will become more resource-intensive.\n* Third party indexing solutions may be a better short/medium-term option, reducing internal complexity and time-to-market. Using a third party would allow the team to focus on core capabilities rather than infrastructure-heavy tasks.\n* If we invest in an OP Labs-based indexing solution, it seems we have consensus that we should focus on a narrow set of events or contracts rather than indexing everything.\n* We may be able to leverage existing infra like the Open Labels Initiative's EAS schema for contract labels, or integrating with existing contract registries.\n\n**Next Steps:** \n1. **Clarify the requirements** - what do our Q1 projects truly need in terms of indexed data? \n-- It seems **contract dashboard** may be the only area where we strictly need indexing, so perhaps we should use a third party solution there. \n2. **Evaluate third-party options** - Explore data providers like Goldsky or open initiatives like Open Labels Initiative to determine if they can cover our most pressing needs. Determine whether these solutions can be leveraged quickly and reliably in Q1.\n", "CLOSED", 0, "fainashalts", "2024-12-19T05:40:46Z", "2025-03-24T18:29:03Z", "2025-03-24T18:29:02Z", "ethereum-optimism/ecosystem", "2025-08-31 03:24:17"]
["I_kwDOL-xLQ86vcyaF", 261, "Add configurable timeout support to op-acceptor", "Useful for supporting long-running NAT tests.", "CLOSED", 0, "teddyknox", "2025-03-24T15:04:15Z", "2025-03-25T02:45:29Z", "2025-03-25T02:45:29Z", "ethereum-optimism/infra", "2025-08-31 03:24:17"]
["I_kwDOL-xLQ86n5AUp", 139, "[nat] Target devnets", "Ensure op-acceptor runs against [remote persistent devnets](https://devnets.optimism.io/), starting with [cheetah](https://devnets.optimism.io/cheetah).", "CLOSED", 0, "scharissis", "2025-01-28T21:20:48Z", "2025-03-24T05:34:28Z", "2025-03-24T05:34:27Z", "ethereum-optimism/infra", "2025-08-31 03:24:17"]
["I_kwDOFpg0Ns6wDWuo", 1109, "to delete", "to delete", "CLOSED", 0, "tuktukyoute", "2025-03-27T16:31:03Z", "2025-03-28T19:46:34Z", "2025-03-28T19:46:14Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 03:24:17"]
["I_kwDOFpg0Ns6uGeFr", 1102, "Token list not updating", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nSeems like there is an error in the process of regenerating the token list. New tokens have been merged but no update was triggered.\n\n**Steps to Reproduce**\nMerge a new token.\n\n**Expected behavior**\nToken list should update at least every other day.\n\n**Environment Information:**\n-\n\n**Configurations:**\n-\n\n**Logs:**\n-\n\n**Additional context**\n-\n\n---", "CLOSED", 0, "onchainguy-btc", "2025-03-14T17:57:28Z", "2025-03-25T17:50:07Z", "2025-03-25T16:00:06Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 03:24:17"]
["I_kwDOL-xLQ86vZPpH", 260, "[acceptance] Proofs Testlib Spike", "Work with Adrian to make a good start on the higher-level devnet-sdk \"testlib\".", "CLOSED", 0, "scharissis", "2025-03-24T09:39:54Z", "2025-04-01T02:23:05Z", "2025-04-01T02:23:04Z", "ethereum-optimism/infra", "2025-08-31 03:24:18"]
["I_kwDOL-xLQ86upjBM", 246, "[acceptance] Test log", "Output a log of the result of all tests. This is useful for debugging.", "CLOSED", 0, "scharissis", "2025-03-19T00:38:55Z", "2025-04-02T21:49:29Z", "2025-04-02T21:49:29Z", "ethereum-optimism/infra", "2025-08-31 03:24:18"]
["I_kwDOKIwiaM6wqNTr", 1552, "[FAQ] What can we set in globalDeployOverrides?", "### FAQ Category\n\nAdd faq item to an existing page\n\n### What page will this FAQ item live?\n\nhttps://docs.optimism.io/operators/chain-operators/tools/op-deployer\n\n### write the question from a developer's perspective\n\nWhat can we set in globalDeployOverrides?\n\n### answer the question identified above as best as possible\n\n[Rollup deployment configurations](https://docs.optimism.io/operators/chain-operators/configuration/rollup) can be set in the `globalDeployOverrides`.\n\n### Additional context\n\nI think the link to https://specs.optimism.io/protocol/configurability.html isn't so helpful as it hasn't included actual key name that we need to set in that area. But we have to make the [Rollup deployment configurations](https://docs.optimism.io/operators/chain-operators/configuration/rollup) page as descriptive as the spec configurability page.", "OPEN", 0, "Chomtana", "2025-04-01T15:45:17Z", "2025-04-01T15:47:42Z", null, "ethereum-optimism/docs", "2025-08-31 03:24:18"]
["I_kwDOKIwiaM6pDFSI", 1327, "[DOCS] Fix : Running a Local Development Environment Tutorial", "\n## Description\nIn the [Running a Local Development Environment](https://docs.optimism.io/chain/testing/dev-node) tutorial:\n\n1. Incorrect L1/L2 funding description - setup script funds L2 accounts, not L1\n2. Broken link to Chain Operators Troubleshooting Guide\n\n## Acceptance criteria\n- [ ] Update funding description to accurately reflect L2 account funding\n- [ ] Fix/update link to Chain Operators Troubleshooting Guide\n- [ ] User should be clear on which layer their accounts are funded\n\n## Action items\n1. Remove or update text about moving ETH to L2\n2. Clarify that setup script handles L2 funding\n3. Update/fix Chain Operators Troubleshooting Guide link\n4. Add verification steps for L2 account funding\n\n## Resources\n- Current page: https://docs.optimism.io/chain/testing/dev-node\n- Broken guide link needs updated URL", "CLOSED", 0, "krofax", "2025-02-06T17:24:54Z", "2025-04-01T17:50:16Z", "2025-04-01T17:50:16Z", "ethereum-optimism/docs", "2025-08-31 03:24:18"]
["I_kwDOFpg0Ns6wxkLs", 1116, "Add CATTBUTT token", "<!-- Edit the body of your new issue then click the \u2713 \"Create Issue\" button in the top right of the editor. The first line will be the issue title. Assignees and Labels follow after a blank line. Leave an empty line before beginning the body of the issue. -->", "CLOSED", 0, "PatrionDigital", "2025-04-02T09:25:22Z", "2025-04-02T09:31:22Z", "2025-04-02T09:31:22Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 03:24:19"]
["I_kwDOFpg0Ns6UaKHl", 916, "Validation script should use the OptimismMintableERC20 interface", "Surfaced in #915 \r\n\r\nL2StandardERC20 imported [here](https://github.com/ethereum-optimism/ethereum-optimism.github.io/blob/master/src/validate.ts#L227) is an outdated interface. L2 tokens just implementing the `IOptimismMintableERC20` interface should be compatible with the validation script without needing to implement the legacy methods as well.\r\n\r\nThis part just needs to be updated", "OPEN", 0, "hamdiallam", "2024-08-27T16:42:43Z", "2025-04-04T17:53:56Z", null, "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 03:24:19"]
["I_kwDOKIwiaM6tv0r9", 1498, "[DOCS] Add PR title no", "<!-- please fill out the description and acceptance criteria to the best to your ability. While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description \n<!-- Write a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand-new docs page? -->\n\n## Acceptance criteria\n<!-- Clearly list out the definition of done. -->\n\n## User stories\n<!-- User stories that illustrate the benefits of this issue. For example, this documentation improvement will allow user X to be able to Y. -->\n\n\n## Resources and support\n<!-- Provide additional documentation, context, and subject matter experts to help us complete this issue. -->\n\n## Action items\n<!-- Clear steps to take to complete this issue -->\n", "CLOSED", 0, "Cryptobos44", "2025-03-12T19:43:15Z", "2025-03-26T01:32:31Z", "2025-03-12T20:59:29Z", "ethereum-optimism/docs", "2025-08-31 03:24:20"]
["I_kwDOH2Qg5s6wC6vn", 563, "`eth_simulateV1` produces incorrect timestamp", "#### System information\n\nGeth version: v1.101503.1-stable-fbc739c3\n\nI cannot share more details about the system since it's provided by a third-party.\n\n#### Expected behaviour\n\nAccording to the spec (https://github.com/ethereum/execution-apis/blob/e56d3208789259d0b09fa68e9d8594aa4d73c725/docs/ethsimulatev1-notes.md?plain=1#L18), `eth_simulateV1` should produce a block in which the timestamp should be \"The timestamp of previous block + `network block time`\"\n\n#### Actual behaviour\n\nThe block produced does not use the network block time (Base Sepolia uses 2 seconds) but instead uses Ethereum Mainnet's default (12 seconds).\n\n#### Steps to reproduce the behaviour\n\nRun the following request to a `base-sepolia` node running op-geth using the version listed above:\n\n```\ncurl --request POST \\\n  --url http://localhost:8545 \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\": 123,\"jsonrpc\": \"2.0\",\"method\": \"eth_simulateV1\",\"params\": [{\"blockStateCalls\":[{\"blockOverrides\":{\"baseFeePerGas\":\"0x9\"},\"stateOverrides\":{\"0xc000000000000000000000000000000000000000\":{\"balance\":\"0x4a817c420\"}},\"calls\":[{\"from\":\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\"to\":\"0x014d023e954bAae7F21E56ed8a5d81b12902684D\",\"maxFeePerGas\":\"0xf\",\"value\":\"0x1\"}]}],\"validation\":true,\"traceTransfers\":true},\"0x1690800\"]}'\n```\n\n#### Backtrace\n\nThe node responds with the following JSON:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 123,\n  \"result\": [\n    {\n      \"baseFeePerGas\": \"0x9\",\n      \"blobGasUsed\": \"0x0\",\n      \"calls\": [\n        {\n          \"returnData\": \"0x\",\n          \"logs\": [\n            {\n              \"address\": \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n              \"topics\": [\n                \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n                \"0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045\",\n                \"0x000000000000000000000000014d023e954baae7f21e56ed8a5d81b12902684d\"\n              ],\n              \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n              \"blockNumber\": \"0x1690801\",\n              \"transactionHash\": \"0x5f66e2c9d5088052095a70e2b0fec9d1e012c643c59e646b9211069552d131ba\",\n              \"transactionIndex\": \"0x0\",\n              \"blockHash\": \"0xdf0cc6f96db6d6b118a354a545f31389e170050c6c7e4da8603bc845362d6188\",\n              \"logIndex\": \"0x0\",\n              \"removed\": false\n            }\n          ],\n          \"gasUsed\": \"0x5208\",\n          \"status\": \"0x1\"\n        }\n      ],\n      \"difficulty\": \"0x0\",\n      \"excessBlobGas\": \"0x0\",\n      \"extraData\": \"0x\",\n      \"gasLimit\": \"0x3938700\",\n      \"gasUsed\": \"0x5208\",\n      \"hash\": \"0xdf0cc6f96db6d6b118a354a545f31389e170050c6c7e4da8603bc845362d6188\",\n      \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"miner\": \"0x4200000000000000000000000000000000000011\",\n      \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      \"nonce\": \"0x0000000000000000\",\n      \"number\": \"0x1690801\",\n      \"parentBeaconBlockRoot\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      \"parentHash\": \"0x13464a4e087734d1f9fd02677aa0609c1ce95279f4a10e394aaee7facae3b8b2\",\n      \"receiptsRoot\": \"0xf78dfb743fbd92ade140711c8bbc542b5e307f0ab7984eff35d751969fe57efa\",\n      \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n      \"size\": \"0x273\",\n      \"stateRoot\": \"0xe8a54ddbdb5f78093c6fade36c1dfbe6496bd7c9c707dd20e68a28bcdbd50ac2\",\n      \"timestamp\": \"0x67e56eec\",\n      \"transactions\": [\n        \"0x5f66e2c9d5088052095a70e2b0fec9d1e012c643c59e646b9211069552d131ba\"\n      ],\n      \"transactionsRoot\": \"0x9e98b5514925784018adeb2ff6ba7ea7d68d030dc25aa3cae96320480ec6bbc0\",\n      \"uncles\": [],\n      \"withdrawals\": [],\n      \"withdrawalsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\"\n    }\n  ]\n}\n\n```\n\nNote the timestamp `0x67e56eec`, which is the timestamp of block `0x1690800` (`0x67e56ee0`) + 12 seconds. Instead, the timestamp should be `0x67e56ee0 + 2 = 0x67e56ee2`. We can check that this is the correct behavior by asking the node for block `0x1690801`:\n\n```\ncurl --request POST \\\n  --url http://localhost:8545/ \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\": 123,\"jsonrpc\": \"2.0\",\"method\": \"eth_getBlockByNumber\",\"params\": [\"0x1690801\", false]}'\n```\n\nThis returns a block with the timestamp `0x67e56ee2`.", "OPEN", 0, "emlautarom1", "2025-03-27T15:55:44Z", "2025-03-27T15:55:44Z", null, "ethereum-optimism/op-geth", "2025-08-31 03:24:20"]
["I_kwDOH2Qg5s6pDETK", 495, "interop: tx-pool re-validate txs", "Revalidate txs in the tx-pool, so the validation work does not become stale\n", "CLOSED", 0, "protolambda", "2025-02-06T17:22:48Z", "2025-03-24T15:14:45Z", "2025-03-24T15:14:44Z", "ethereum-optimism/op-geth", "2025-08-31 03:24:20"]
["I_kwDOH2Qg5s6Me-Je", 337, "Node stuck in \"Generating state snapshot\"", "#### Summary\r\nNode stuck in \"Generating state snapshot\" and not processing new blocks after upgrade to the latest software releases of op-geth (v1.101315.0 -> v1.101315.2) and op-node (v1.7.5 -> v1.7.7).\r\n\r\n#### System information\r\nGeth version: `geth version`\r\n- https://github.com/ethereum-optimism/op-geth/releases/tag/v1.101315.1\r\n- op_geth: \"v1.101315.2\"\r\n\r\n```\r\ngeth --version\r\ngeth version 1.101315.2-stable-7c281983\r\n```\r\nOp-node:\r\n- https://github.com/ethereum-optimism/optimism/releases/tag/v1.7.7\r\n- op_node: \"op-node/v1.7.7\"\r\n```\r\nop-node --version\r\nop-node version v0.10.14-dev\r\n```\r\nOS & Version: Linux Ubuntu\r\n\r\n#### Expected behaviour\r\n- Process new blocks after upgrade/restart of the service\r\n- Generating state snapshot should not block node of processing new blocks\r\n\r\n#### Actual behaviour\r\nGenerating state snapshot process is blocking op-geth of processing new blocks\r\n\r\n#### Logs\r\n\r\nop-geth logs:\r\n````\r\ngeth[37251]: INFO [06-17|09:44:25.167] Generating state snapshot                root=85a73c..ab3243 at=0f1c8e..ddc728 accounts=8,212,647 slots=16,975,488 storage=1.78GiB    dangling=0 elapsed=17m45.437s eta=10h50m31.417s\r\ngeth[37251]: INFO [06-17|09:44:33.169] Generating state snapshot                root=85a73c..ab3243 at=0f326b..ebf92b accounts=8,258,971 slots=16,993,561 storage=1.78GiB    dangling=0 elapsed=17m53.438s eta=10h46m46.576s\r\ngeth[37251]: INFO [06-17|09:44:41.189] Generating state snapshot                root=85a73c..ab3243 at=0f492d..c259f8 accounts=8,307,499 slots=17,021,954 storage=1.79GiB    dangling=0 elapsed=18m1.459s  eta=10h42m47.389s\r\ngeth[37251]: INFO [06-17|09:44:49.207] Generating state snapshot                root=85a73c..ab3243 at=0f5bc9..6d21aa accounts=8,347,047 slots=17,064,430 storage=1.79GiB    dangling=0 elapsed=18m9.477s  eta=10h40m27.745s\r\neth[37251]: INFO [06-17|09:44:57.213] Generating state snapshot                root=85a73c..ab3243 in=0f6b51..25dc0c at=ca889b..4eac13 accounts=8,379,966 slots=17,122,787 storage=1.80GiB    dangling=0 elapsed=18m17.483s eta=10h39m19.246s\r\n````\r\n\r\nop-node logs:\r\n```\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xad94307cc0391975de86ce7a47f50a6022ef2acc99c5839a061df7d85bb321d7:121509358 peer=16Uiu2HAmDzdJ2aupdsshYr8JbsVKd1qKgUwmT3YNSLtazT6Eq7AD\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xad94307cc0391975de86ce7a47f50a6022ef2acc99c5839a061df7d85bb321d7:121509358\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAmTrP55nReSSHC8seJ29DFg1vQKmFXhtdW4GsSkXBPgHSv num=121507552 err=\"failed to read result part of response: stream reset\"\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAm2ZSgLR74xfseQ3YGJEMpAMuuC2q5muzCR77K1YRGavoE num=121507551 err=\"failed to open stream: failed to negotiate protocol: protocols not supported: [/opstack/req/payload_by_number/10/0]\"\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq num=121507550 err=\"peer failed to serve request with code 1: not found\"\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=warn msg=\"cancelling p2p sync range request\" peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq rangeReqId=241\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAm2soquNJBrFk89c48kJMiP857W2TXubux7rQ5w8jhqajd num=121507554 err=\"peer failed to serve request with code 1: not found\"\r\nJun 17 09:44:53 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:53+0000 lvl=warn msg=\"cancelling p2p sync range request\" peer=16Uiu2HAm2soquNJBrFk89c48kJMiP857W2TXubux7rQ5w8jhqajd rangeReqId=241\r\nJun 17 09:44:55 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmQGLnG7sjhQYCkTD9YmB56ALcs7JBXTS2TN8vTaNDNGFr\r\nJun 17 09:44:55 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmEF6SvDakawQHQ3pkeC3zQRw6b6ZQHsNtDHEATm1SgbgL\r\nJun 17 09:44:55 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm4M7kPVxrofcviyS1YYJUcm8pXSWVjjJrqgf9EyS1YFP5\r\nJun 17 09:44:55 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:55+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x67bddca00bc9bff9dd3d184465fd6d1eaf290260e428fc1f743c147c7aa4e70c:121509359 peer=16Uiu2HAmDzdJ2aupdsshYr8JbsVKd1qKgUwmT3YNSLtazT6Eq7AD\r\nJun 17 09:44:55 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmSViPfWUXA8APJcgVKXPp736AHfknVB8ccze4tbMWvvFY\r\nJun 17 09:44:56 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:56+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmCkYPPPG1Ggr37zRsVZUswYQxL9sSVRDgAgoFKfR89pzJ\r\nJun 17 09:44:57 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:57+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x326202ca06865686ecb4a24100fd533ec279f68baab64151fac35a5e02f7b61f:121509360 peer=16Uiu2HAmDzdJ2aupdsshYr8JbsVKd1qKgUwmT3YNSLtazT6Eq7AD\r\nJun 17 09:44:58 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmFkMXtRfYQcksZjhzLH5dytN5JeQNhiyZVRC6x4qBFJYy\r\nJun 17 09:44:58 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:58+0000 lvl=warn msg=\"failed p2p sync request\" peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq num=121507615 err=\"peer failed to serve request with code 1: not found\"\r\nJun 17 09:44:58 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:58+0000 lvl=warn msg=\"cancelling p2p sync range request\" peer=16Uiu2HAmAAP78k6MEFKbZjFvwC2Syr86ePVKJGRa9eXeCqrnXiAq rangeReqId=242\r\nJun 17 09:44:58 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:58+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmFg5sVt6Fee9F44c9FtzZi4Dix8geWjgqku4FQanFSbfq\r\nJun 17 09:44:59 m-optimism-02 op-node[38623]: t=2024-06-17T09:44:59+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm8MXF3pZ3EhKf4MHYx8wCh5E54oFgDLwboCHxNS3MHVEJ\r\n```\r\n\r\n#### CLI\r\n\r\nop-geth:\r\n\r\n```\r\nusr/local/bin/geth \\\r\n    --op-network=op-mainnet \\\r\n    --datadir=/var/lib/optimism/data \\\r\n    --syncmode=snap \\\r\n    --gcmode=archive \\\r\n    --http \\\r\n    --http.addr=0.0.0.0 \\\r\n    --http.port=8545 \\\r\n    --http.vhosts=\"*\" \\\r\n    --http.corsdomain=\"*\" \\\r\n    --http.api=web3,debug,eth,net,engine,geth \\\r\n    --ws \\\r\n    --ws.port=8546 \\\r\n    --ws.addr=0.0.0.0 \\\r\n    --ws.origins=\"*\" \\\r\n    --ws.api=debug,eth,net,engine \\\r\n    --authrpc.addr=127.0.0.1 \\\r\n    --authrpc.port=8551 \\\r\n    --authrpc.jwtsecret=/var/lib/optimism/jwt.txt \\\r\n    --authrpc.vhosts=\"*\" \\\r\n    --metrics \\\r\n    --metrics.addr=0.0.0.0 \\\r\n    --metrics.port=6060 \\\r\n    --port=30303 \\\r\n    --discovery.port=30303 \\\r\n    --maxpeers=500 \\\r\n    --rollup.historicalrpc=https://mainnet.optimism.io \\\r\n    --rollup.disabletxpoolgossip=true \\\r\n    --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io \\\r\n    --rollup.superchain-upgrades \\\r\n    --rollup.halt=major \\\r\n    --verbosity=3\r\n```\r\n\r\n\r\nop-node:\r\n\r\n```\r\n/usr/local/bin/op-node \\\r\n    --syncmode=execution-layer \\\r\n    --l1.trustrpc \\\r\n    --l1.rpckind=basic \\\r\n    --l1=http://IP_ADDRESSS:8545 \\\r\n    --l1.beacon=http://IP_ADDRESSS:5052 \\\r\n    --l2=http://127.0.0.1:8551 \\\r\n    --rpc.addr=127.0.0.1 \\\r\n    --rpc.port=9545 \\\r\n    --l2.jwt-secret=/var/lib/optimism/jwt.txt \\\r\n    --network=op-mainnet \\\r\n    --p2p.peerstore.path=/var/lib/optimism/data/opnode_peerstore_db \\\r\n    --p2p.priv.path=/var/lib/optimism/data/opnode_p2p_priv.txt \\\r\n    --p2p.discovery.path=/var/lib/optimism/data/opnode_discovery_db \\\r\n    --rollup.load-protocol-versions=true \\\r\n    --rollup.halt=major\r\n```", "OPEN", 0, "andreclaro", "2024-06-17T09:59:43Z", "2025-03-28T22:00:43Z", null, "ethereum-optimism/op-geth", "2025-08-31 03:24:20"]
["I_kwDOH2Qg5s6xIBj-", 570, "Remove redundant hack in engine rpc", "This hack \nhttps://github.com/ethereum-optimism/optimism/blob/0bc5fe8d16155dc68bcdf1fa5733abc58689a618/op-node/rollup/types.go#L615-L617\nis redundant as of\nhttps://github.com/ethereum-optimism/op-geth/blob/optimism/eth/catalyst/api.go#L219-L222\nand should be removed in order to adhere to specs\n", "CLOSED", 0, "emhane", "2025-04-04T08:37:52Z", "2025-04-04T08:39:34Z", "2025-04-04T08:39:33Z", "ethereum-optimism/op-geth", "2025-08-31 03:24:21"]
["I_kwDOH2Qg5s6vA7Ky", 553, "core/txpool: Include operator fee in sufficient fund checks", "The txpool currently doesn't include operator fees when checking for sufficient funds. While this is not consensus critical, having this check missing makes for a bad user experience as txs without sufficient op fee wouldn't be outright rejected.\n\nShould be added to `core/txpool/legacypool/list.go:list.Add`.", "CLOSED", 0, "sebastianst", "2025-03-20T17:56:36Z", "2025-03-31T16:10:36Z", "2025-03-31T16:10:36Z", "ethereum-optimism/op-geth", "2025-08-31 03:24:21"]
["I_kwDOH2Qg5s6uTo50", 548, "op-node fails to deserialize `ChainConfig` when `TerminalTotalDifficulty` is in hex string format", "#### System information\n\nGeth version: op-geth@v1.101503.0-rc.3\n\n### The problem\n\nThis problem happens when trying to use `op-node` together with `op-reth` using a custom L2 chain (so the `op-node` asks the execution client for the chain config using a `debug_chainConfig` rpc method).\n\nIn particular main issue is that op-reth has the `terminal_total_difficulty` that is serialized into a hex string with prefix 0x and so this causes a deserialization bug in the `op-node` side, as you can see here:\n\nThe following is op-node logs:\n\n```\nERROR[03-17|10:12:50.874] Error initializing the rollup node       err=\"failed to init L2: failed to load or fetch chain config for id 1115511142: fetching: math/big: cannot unmarshal \\\"\\\\\\\"0x0\\\\\\\"\\\" into a *big.Int\"\nCRIT [03-17|10:12:50.874] Application failed                       message=\"failed to setup: unable to create the rollup node: failed to init L2: failed to load or fetch chain config for id 1115511142: fetching: math/big: cannot unmarshal \\\"\\\\\\\"0x0\\\\\\\"\\\" into a *big.Int\"\n```\n\nI think you can probably implement a custom deserialization so that if that field is in a hex string, you are still able to correctly create the `ChainConfig` struct.\n\nI created the issue here as I see that the `ChainConfig` struct is defined here and `op-node` uses it as a dependency.", "CLOSED", 0, "alessandromazza98", "2025-03-17T09:40:05Z", "2025-03-31T15:00:37Z", "2025-03-31T15:00:36Z", "ethereum-optimism/op-geth", "2025-08-31 03:24:21"]
["I_kwDOLB-lzc6wfLW8", 649, "Clarify `extraData` requirements in protocol specs", "We currently have a wishy-washy definition on the requirements of the `extraData` field in our protocol specs pre-Holocene. This is not correct, as the field is part of the block hash and so needs to have a well-defined value: it must be empty pre-Holocene, except for the genesis block, which may hold any value, if it is a pre-Holocene genesis. Starting with Holocene, it is used to encode the eip-1559 params.", "CLOSED", 0, "sebastianst", "2025-03-31T16:20:35Z", "2025-04-02T18:47:36Z", "2025-04-02T18:47:36Z", "ethereum-optimism/specs", "2025-08-31 03:24:22"]
["I_kwDOLB-lzc6vrcKr", 646, "Isthmus: add operator fee max cost calculation to the specs", "See https://github.com/ethereum-optimism/op-geth/pull/388#discussion_r1972243123, we've established that the operator cost can only reach a number of 77 bits. We should remark this in the specs, it also helps implementations.\n\n<img width=\"783\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/eae3fa53-eeab-4f8f-86bf-1b3a2b61ff56\" />", "CLOSED", 0, "sebastianst", "2025-03-25T18:15:20Z", "2025-04-02T18:25:24Z", "2025-04-02T18:25:23Z", "ethereum-optimism/specs", "2025-08-31 03:24:22"]
["I_kwDOLB-lzc6vgoTs", 644, "OPCM and `ProtocolVersions`", "As of today, we have stopped using the `ProtocolVersions` contract due to it being too much of an overhead to keep up to date. It could be worth simplifying the way that it is used and integrating into OPCM, to guarantee safety over liveness universally (ie prevent syncing the wrong chain with outdated client software)\n\nThink of the `ProtocolVersions.required` field as being a synchronization between the L1 contracts and the client software.  OPCM would call `ProtocolVersions` and be able to modify the `required` field. \n\nOne possible way to manage the versioning: if the L2 client software absolutely will not work with the L1 contracts, we should bump the major version. We could bump the minor/patch versions on other upgrades where the client software doesn't absolutely need to be updated. The L2 client software would have a max known major version and compare it against what is onchain and halt if the onchain version is greater than the known version.\n\nWe could delete/simplify parts of `ProtocolVersions` so that it exactly fits the usecase of universally guaranteeing safety over liveness. With this universal guarantee, then we no longer need to make decisions like the derivation pipeline halting on unknown `ConfigUpdate` event types, it could just ignore them. This will help to decouple the ability to upgrade L1 contracts and L2 client software independently, with an explicit onchain synchronization mechanism.", "OPEN", 0, "tynes", "2025-03-24T22:03:54Z", "2025-04-01T13:22:25Z", null, "ethereum-optimism/specs", "2025-08-31 03:24:22"]
["I_kwDOLB-lzc6i0Nap", 478, "On Faster Blocktimes (Dynamic Blocktimes)", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\nThere is a desire to have faster blocktimes in the OP Stack. From the point of view of the protocol, what is a blocktime exactly?\n\nThe only thing that the protocol sees is the incrementing value in the block header. An OP Stack chain with a 2 second blocktime doesn't mean that it must create a block every 2 seconds - it just means that every block that is produced must have its timestamp incremented by 2. In theory a sequencer could build blocks extremely fast, incrementing the timestamp by 2 seconds until it reaches the maximum its allowed to be ahead of the L1 timestamp.\n\nThe most simple way to think about supporting 1 second blocktimes is to simply make it so that the timestamp increments by 1 and change nothing else about how time is managed within the protocol. This could be introduced via a hardfork and chains that opt in could have their blocktime change to 1 second. There are some chains that support OP Stack based L3s, which would break if they moved to 1 second. There have not been any hardforks yet that chains have opted out of and introducing this sets a precedent. If we wanted to prevent the need for backwards compatibility concerns, then we can allow a chain operator to set their blocktime via the `SystemConfig`. This guarantees backwards compatibility and allows chains to modify their blocktime as they see fit, but is much more complex then simply hardforking in 1 second blocktime.\n\nAnother way to think about supporting 1 second blocktimes is to change the way that time is managed in the OP Stack. Right now every block timestamp is deterministic and known ahead of time. This is similar to L1 after proof of stake. During Ethereum proof of work, the timestamp could be chosen by the miner but it had constraints on what it could be. Allowing for this could enable a more flexible design space with blocktime where its not necessarily enshrined into the protocol. We could change the gas limit as defined in the `SystemConfig` to be the epoch level gas limit rather than the block gas limit. The sequencer could have the right to produce blocks with the same timestamp and choose the timestamp for its blocks but the timestamp must be within a range so that it doesn't fall too far ahead or behind. The block building software now has flexibility with choosing the blocktime now, it becomes a configuration parameter of the sequencer rather than a protocol level config. \n\nHaving an epoch level gas limit doesn't play well with when the sequencer loses its connection to L1. That would mean that the sequencer has a liveness failure more more quickly compared to the existing max sequencer drift rules. The epoch gas limit gets used up and the sequencer must observe the next L1 origin to be able to produce more gas. Perhaps a way around this would be to make the epoch level gas limit instead be a timestamp level gas limit and keep the existing timestamp drift rules. With a cap on the max number of blocks that can be produced with the same timestamp, it forces the same progression of timestamps, which can still move forward building on the same L1 origin until the sequencer drift kicks in.\n\nAllowing the sequencer to choose the timestamp means that it can bias RNG. Application developers should already be aware at this point that the timestamp isn't good for creating on chain RNG.", "OPEN", 0, "tynes", "2024-12-11T01:30:20Z", "2025-04-04T16:50:41Z", null, "ethereum-optimism/specs", "2025-08-31 03:24:22"]
["I_kwDOKIsnqM6f_JRw", 375, "ops fail on ARM machines due to eip712signer incompatibility", "When I follow the playbook verbatim on my M3 Macbook Pro, the OS apparently kills the `eip712signer` process:\n```\n\u279c  019-fp-holocene-upgrade git:(seb/sep-019-fp-holocene) just \\\n   --dotenv-path $(pwd)/.env \\\n   --justfile ../../../nested.just \\\n   sign \\    \n   council 1\nRunning script with assertions\nUsing script /Users/georgeknee/code/ethereum-optimism/superchain-ops/tasks/sep/019-fp-holocene-upgrade/NestedSignFromJson.s.sol\nUsing council safe at 0xf64bc17485f0B4Ea5F06A96514182FC4cB561977\ngetting signer address...\nError: \nCould not connect to Ledger device.\nMake sure it's connected and unlocked, with no other desktop wallet apps open.\n\nContext:\n- received an unexpected empty response\nSigning with: \n\n[\u280a] Compiling...\nNo files changed, compilation skipped\n/var/folders/31/rhx71v1d52n7j67f__hl2qj40000gn/T/just-WDW5sJ/sign: line 95: 78307 Killed: 9               $(git rev-parse --show-toplevel)/bin/eip712sign --ledger --hd-paths \"m/44'/60'/1'/0/0\" -- forge script ${script} --rpc-url ${rpcUrl} --sig \"signJson(string,address)\" ${bundlePath} \"${safe}\"\nerror: Recipe `sign` failed with exit code 137\n```\n\nThe error message is not very helpful, but I managed to work around this by rebuilding eip712signer[ from source](https://github.com/base-org/eip712sign) with the following build flags:\n\n```\nCGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -o eip712sign\ncp eip712sign ../../ethereum-optimism/superchain-ops/bin\n```\n\nCopying the binary over to this repo allows the ops script to complete successfully. \n", "CLOSED", 0, "geoknee", "2024-11-22T18:12:27Z", "2025-03-28T13:20:00Z", "2025-03-28T13:19:58Z", "ethereum-optimism/superchain-ops", "2025-08-31 03:24:31"]
["I_kwDOLB-lzc6vdMYj", 641, "Remove all mentions of deposit context", "There are still mentions of the deposit context in the specs, these need to be removed", "CLOSED", 0, "tynes", "2025-03-24T15:39:02Z", "2025-03-24T20:52:21Z", "2025-03-24T20:52:21Z", "ethereum-optimism/specs", "2025-08-31 03:24:32"]
["I_kwDOLB-lzc6vcuyi", 640, "Interop: tx-plan alpha testing: Transaction executes message within same block (same timestamp)", "~Part of https://github.com/ethereum-optimism/optimism/issues/14529~ Wrong repo", "CLOSED", 0, "pcw109550", "2025-03-24T14:59:55Z", "2025-03-24T15:28:37Z", "2025-03-24T15:04:39Z", "ethereum-optimism/specs", "2025-08-31 03:24:32"]
["I_kwDOLB-lzc6pDBAl", 581, "interop: specify op-supervisor RPC", "The op-supervisor RPC needs to be standardized.\n\nThe spec should be updated to include additional information about how the RPC endpoints should be used\n\n", "CLOSED", 0, "protolambda", "2025-02-06T17:16:02Z", "2025-03-24T15:14:08Z", "2025-03-24T15:14:07Z", "ethereum-optimism/specs", "2025-08-31 03:24:32"]
["I_kwDOLB-lzc6o56Tz", 579, "Fill in Missing Contract Bytecodes [ISTHMUS]", "### Description\n\n#382 introduced the operator fee into the Isthmus hardfork. But since the contracts are not merged and released, the contract bytecode used in the [Isthmus network upgrade transactions](https://specs.optimism.io/protocol/isthmus/derivation.html#network-upgrade-automation-transactions) cannot be filled out in the specs yet. They were left as `TODO`s in #382.\n\nOnce https://github.com/ethereum-optimism/optimism/pull/12166 is merged, a release can be cut that contains the bytecode and source hashes needed to fill in the `TODO`s.\n\nMissing Contract Bytecodes (`TODO`s) that need to be filled in with the bytecode from the release.\n- [Gas Price Oracle](https://github.com/ethereum-optimism/specs/blob/main/specs/static/bytecode/isthmus-gas-price-oracle-deployment.txt)\n- [L1 Block](https://github.com/ethereum-optimism/specs/blob/main/specs/static/bytecode/isthmus-l1-block-deployment.txt)\n- [Operator Fee Vault](https://github.com/ethereum-optimism/specs/blob/main/specs/static/bytecode/isthmus-operator-fee-deployment.txt)\n\n[Isthmus derivation specs](https://github.com/ethereum-optimism/specs/blob/main/specs/protocol/isthmus/derivation.md) have `TODO`s that need to be filled in.\n\n#### Aside\n\nOnce these bytecodes are filled in, https://github.com/alloy-rs/op-alloy/pull/411 can be updated, merged, and an `op-alloy` release can be cut to provide the Isthmus network upgrade transactions.\n\nThe go implementation will also need to be updated with the Isthmus network upgrade transactions.", "CLOSED", 0, "refcell", "2025-02-05T19:09:10Z", "2025-03-24T15:04:10Z", "2025-03-24T15:04:08Z", "ethereum-optimism/specs", "2025-08-31 03:24:32"]
["I_kwDOLB-lzc6orfHJ", 576, "Sanity-check system deposit tx gas marginal wrt EIP-7623", "> we need to sanity-check something: with the increased calldata cost, what effect does this have on system deposit transactions gas usage? Specifically the L1BlockInfo? I think we have some margin in the gas-limit of these, but it may be good to sanity-check anyway.\n\nRef: https://github.com/ethereum-optimism/pm/issues/25#issuecomment-2632520767", "CLOSED", 0, "emhane", "2025-02-04T11:47:42Z", "2025-03-24T15:48:50Z", "2025-03-24T15:48:50Z", "ethereum-optimism/specs", "2025-08-31 03:24:32"]
["I_kwDOLB-lzc6mfnj8", 516, "[Tracking] Isthmus specs", "Tracking isthmus spec. The noop specs are automatically confirmed for inclusion in Isthmus hard fork, because they are needed in order not to break from L1 hardforking.\n\n#### inherited from Pectra\n\n- https://github.com/ethereum-optimism/specs/issues/511\n- https://github.com/ethereum-optimism/specs/issues/506 (noop spec)\n- https://github.com/ethereum-optimism/specs/issues/508 (noop spec)\n- https://github.com/ethereum-optimism/specs/issues/502 (noop)\n- https://github.com/ethereum-optimism/specs/issues/505 (noop)\n- https://github.com/ethereum-optimism/specs/issues/510\n- https://github.com/ethereum-optimism/specs/issues/509\n- https://github.com/ethereum-optimism/specs/issues/503 (nodiff)", "CLOSED", 0, "emhane", "2025-01-16T17:04:40Z", "2025-03-24T15:49:31Z", "2025-03-24T15:49:30Z", "ethereum-optimism/specs", "2025-08-31 03:24:32"]
["I_kwDOMMiGhs6xCpQR", 369, "Error connecting to anvil ports should bubble up in supersim process", "If required ports are unavailable, user should see this in the CLI when starting up Supersim. \n\nCurrent (incorrect) behavior: \n\n```\nINFO [04-01|11:01:18.942] starting supersim\nERROR[04-01|11:01:18.984] anvil terminated with an error           role=anvil name=Local chain.id=900 error=\"exit status 1\"\nt=2025-04-01T11:01:18-0500 lvl=crit msg=\"Application Failed\" err=\"failed to start: orchestrator failed to start: l1 chain Local failed to start: context canceled\\ncontext canceled\"\n```", "OPEN", 0, "fainashalts", "2025-04-03T17:33:51Z", "2025-04-03T17:33:51Z", null, "ethereum-optimism/supersim", "2025-08-31 03:24:40"]
["I_kwDOI7W0xc6xOGh6", 1552, "Add L2Beat TVS", "https://github.com/ethereum-optimism/op-analytics/pull/1548", "CLOSED", 0, "chuxinh", "2025-04-04T20:06:04Z", "2025-04-04T20:06:12Z", "2025-04-04T20:06:12Z", "ethereum-optimism/op-analytics", "2025-08-31 03:24:46"]
["I_kwDOKIsnqM6vqNH7", 789, "Change NESTED.md and SINGLE.md to reflect two-step simulation link", "Base has changed how they print simulation links:\n\n![Image](https://github.com/user-attachments/assets/1406a592-390d-4d8b-8cc8-a6a300eef879)\n\n![Image](https://github.com/user-attachments/assets/87e2fc10-a3f6-4c6f-bc63-85599e6cdc87)\n\nThe instructions in [NESTED.md](https://github.com/ethereum-optimism/superchain-ops/blob/c6a65044b3931e6a18b6616f6863e3d61494746b/NESTED.md?plain=1#L74) and [SINGLE.md](https://github.com/ethereum-optimism/superchain-ops/blob/c6a65044b3931e6a18b6616f6863e3d61494746b/SINGLE.md?plain=1#L57) need to be updated to accomodate this change.", "OPEN", 0, "alcueca", "2025-03-25T16:12:47Z", "2025-03-31T14:19:23Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 03:24:50"]
["I_kwDODjvEJM6wRZvc", 15114, "Use retryproxy for Upgrade tests", "The Upgrade tests for OPCM are becoming increasingly flaky. We should stick the [retryproxy](https://github.com/ethereum-optimism/optimism/blob/develop/op-service/testutils/devnet/proxy.go) in front of our RPC for these tests so that we cut down on the number of flakes.\n\nI believe these are the required steps:\n- Add a `main.go` so that `proxy.go` can be executed on the command line\n- Update circle CI to run a retry proxy in front of the RPC URL being used for the upgrade tests\n- Run the upgrade tests", "OPEN", 0, "smartcontracts", "2025-03-28T22:00:05Z", "2025-03-28T22:00:15Z", null, "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wRWnG", 15113, "Check initialization status in StandardValidator", "StandardValidator should always be checking that all contracts are properly initialized. We need to standardize and enforce this.", "OPEN", 0, "smartcontracts", "2025-03-28T21:52:23Z", "2025-03-28T21:52:32Z", null, "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wN1qx", 15100, "Blob preimage audit with Violet - ZipRequest + funds approval", "", "CLOSED", 0, "BlocksOnAChain", "2025-03-28T15:00:53Z", "2025-03-28T15:01:20Z", "2025-03-28T15:01:20Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wNwcR", 15099, "Isthmus: investigate implementation of `ExecutionPayloadEnvelope.RequestsHash`", "Following up from [Discord](https://discord.com/channels/1244729134312198194/1354469282318389258) reported by @clabby \n\n> where does RequestsHash come from here? https://github.com/ethereum-optimism/optimism/blob/develop/op-service/eth/types.go#L237\n> I can't seem to find any mention of it on L1, and this type is being used for the sequencer to sign. https://github.com/ethereum-optimism/optimism/blob/develop/op-node/p2p/gossip.go#L568-L597\n> It looks like L1, even after pectra, still uses the V3 payload.\nWas added by @proto here: https://github.com/ethereum-optimism/optimism/commit/1d5770cd93a19797c7af2c0e9981265c3a3df847\n\nproto: \n> It's not encoded, so the signing isn't affected I think\nBut we do include it in engine API and block-hash reconstruction\n clabby \n\nclabby:\n> hmmm, it looks like they just added the list of requests, not the hash: https://github.com/ethereum/go-ethereum/blob/a775e68421595d9c3807e68cce7ff2037991a781/beacon/engine/types.go#L106-L113\n> For block reconstruction, they recompute the requests hash from the requests list: https://github.com/ethereum/go-ethereum/blob/a775e68421595d9c3807e68cce7ff2037991a781/beacon/engine/types.go#L266-L270\n> Can you point me towards where the requests hash is included in a payload / payload envelope that's sent to the engine API? I can't find anything, except for the list of requests that's returned by the type given by getPayload ([this](https://github.com/ethereum/go-ethereum/blob/a775e68421595d9c3807e68cce7ff2037991a781/beacon/engine/types.go#L106-L113))\n> It will be encoded if it is set anywhere, in [this branch](https://github.com/ethereum-optimism/optimism/blob/develop/op-node/p2p/gossip.go#L578-L581).\n> If the above checks out, I think we should remove RequestsHash from op-service's payload envelope and do the same thing that we've been doing for withdrawalsRoot pre-isthmus. Since it's a constant value, there's no need to include the commitment in the payload. We just need to return an non-nil, empty list of requests in the payload envelope.\n", "CLOSED", 0, "sebastianst", "2025-03-28T14:52:16Z", "2025-03-28T17:25:24Z", "2025-03-28T17:25:24Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wM1C8", 15095, "op-program: test flake", "```\nFailed\n=== RUN   TestFastCannonBlockHeaderOracle_WithFallback\n=== PAUSE TestFastCannonBlockHeaderOracle_WithFallback\n=== CONT  TestFastCannonBlockHeaderOracle_WithFallback\n    testlog.go:135: writing test log to /var/opt/circleci/data/workdir/tmp/testlogs/TestFastCannonBlockHeaderOracleWithFallback-16745.log\n--- FAIL: TestFastCannonBlockHeaderOracle_WithFallback (1.41s)\npanic: runtime error: slice bounds out of range [4205:4096] [recovered]\n\tpanic: runtime error: slice bounds out of range [4205:4096]\n\ngoroutine 4766 [running]:\ntesting.tRunner.func1.2({0x151bdc0, 0xc000a18330})\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1631 +0x24a\ntesting.tRunner.func1()\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1634 +0x377\npanic({0x151bdc0?, 0xc000a18330?})\n\t/data/mise-data/installs/go/1.22.7/src/runtime/panic.go:770 +0x132\nbufio.(*Writer).Write(0xc000546a00, {0xc0015d2d80?, 0x2dd6cc0?, 0x15e9302?})\n\t/data/mise-data/installs/go/1.22.7/src/bufio/bufio.go:681 +0x1b5\ngithub.com/ethereum/go-ethereum/log.(*TerminalHandler).Handle(_, {_, _}, {{0xc1f1ba6bac39b92e, 0x593df2d8, 0x2dd6cc0}, {0x15e9302, 0x13}, 0xfffffffffffffffc, 0x8c81aa, ...})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/log/handler.go:80 +0x118\ngithub.com/ethereum/go-ethereum/log.(*logger).Write(0xc00054a090, 0xfffffffffffffffc, {0x15e9302, 0x13}, {0xc000794440, 0x4, 0x4})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/log/logger.go:173 +0x2a6\ngithub.com/ethereum/go-ethereum/log.Debug({0x15e9302?, 0x13?}, {0xc000794440?, 0x4?, 0x4?})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/log/root.go:55 +0x10f\ngithub.com/ethereum/go-ethereum/core/rawdb.(*freezerTable).checkIndex(0xc000f16410, 0x6)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:547 +0x5ea\ngithub.com/ethereum/go-ethereum/core/rawdb.(*freezerTable).repairIndex(0xc000f16410)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:401 +0x52\ngithub.com/ethereum/go-ethereum/core/rawdb.(*freezerTable).repair(0xc000f16410)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:233 +0x1f2\ngithub.com/ethereum/go-ethereum/core/rawdb.newTable({0xc0008de620, 0x63}, {0x15d84be, 0x8}, 0xc0009da280, 0xc0009da2d0, 0xc0008960e8, 0x77359400, 0x0, 0x0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:193 +0x668\ngithub.com/ethereum/go-ethereum/core/rawdb.NewFreezer({0xc0008de620, 0x63}, {0x15e5ff8, 0x11}, 0x0, 0x77359400, 0xc0003795f0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer.go:125 +0x60d\ngithub.com/ethereum/go-ethereum/core/rawdb.newChainFreezer({0xc0008de620?, 0x5d?}, {0x15e5ff8?, 0x10?}, 0x10?)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/chain_freezer.go:67 +0xa5\ngithub.com/ethereum/go-ethereum/core/rawdb.NewDatabaseWithFreezer({0x7d90e668a858, 0xc0006a27a0}, {0xc00063c4e0, 0x5d}, {0x15e5ff8?, 0x11?}, 0x0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/database.go:196 +0xa5\ngithub.com/ethereum/go-ethereum/node.openDatabase({{0x0, 0x0}, {0xc00063c420, 0x55}, {0xc00063c4e0, 0x5d}, {0x15e5ff8, 0x11}, 0x0, 0x0, ...})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/node/database.go:54 +0xbe\ngithub.com/ethereum/go-ethereum/node.(*Node).OpenDatabaseWithFreezer(0xc000639b20, {0x15dab72, 0x9}, 0x0, 0x0, {0x0, 0x0}, {0x15e5ff8, 0x11}, 0x0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/node/node.go:753 +0x318\ngithub.com/ethereum/go-ethereum/eth.New(0xc000639b20, 0xc0001c2008)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/eth/backend.go:140 +0x4e5\ngithub.com/ethereum-optimism/optimism/op-program/client/l2/test.NewMiner(0xc0006a6000, {0x20830a0, 0xc0009c9110}, 0x0)\n\t/var/opt/circleci/data/workdir/op-program/client/l2/test/miner.go:74 +0x613\ngithub.com/ethereum-optimism/optimism/op-program/client/l2.TestFastCanonBlockHeaderOracle_GetHeaderByNumber(0xc0006a6000)\n\t/var/opt/circleci/data/workdir/op-program/client/l2/fast_canon_test.go:22 +0x91\ntesting.tRunner(0xc0006a6000, 0x1ed2fd0)\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1689 +0xfb\ncreated by testing.(*T).Run in goroutine 1\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1742 +0x390\npanic: runtime error: slice bounds out of range [4205:4096] [recovered]\n\tpanic: runtime error: slice bounds out of range [4205:4096]\n\ngoroutine 4768 [running]:\ntesting.tRunner.func1.2({0x151bdc0, 0xc000484108})\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1631 +0x24a\ntesting.tRunner.func1()\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1634 +0x377\npanic({0x151bdc0?, 0xc000484108?})\n\t/data/mise-data/installs/go/1.22.7/src/runtime/panic.go:770 +0x132\nbufio.(*Writer).Write(0xc000546a00, {0xc0015d2d80?, 0x2dd6cc0?, 0x15e9302?})\n\t/data/mise-data/installs/go/1.22.7/src/bufio/bufio.go:681 +0x1b5\ngithub.com/ethereum/go-ethereum/log.(*TerminalHandler).Handle(_, {_, _}, {{0xc1f1ba6bac39d382, 0x593e0d2c, 0x2dd6cc0}, {0x15e9302, 0x13}, 0xfffffffffffffffc, 0x8c81aa, ...})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/log/handler.go:80 +0x118\ngithub.com/ethereum/go-ethereum/log.(*logger).Write(0xc00054a090, 0xfffffffffffffffc, {0x15e9302, 0x13}, {0xc000848380, 0x4, 0x4})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/log/logger.go:173 +0x2a6\ngithub.com/ethereum/go-ethereum/log.Debug({0x15e9302?, 0x13?}, {0xc000848380?, 0x4?, 0x4?})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/log/root.go:55 +0x10f\ngithub.com/ethereum/go-ethereum/core/rawdb.(*freezerTable).checkIndex(0xc000e880d0, 0x6)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:547 +0x5ea\ngithub.com/ethereum/go-ethereum/core/rawdb.(*freezerTable).repairIndex(0xc000e880d0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:401 +0x52\ngithub.com/ethereum/go-ethereum/core/rawdb.(*freezerTable).repair(0xc000e880d0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:233 +0x1f2\ngithub.com/ethereum/go-ethereum/core/rawdb.newTable({0xc00063c2a0, 0x5f}, {0x15d84be, 0x8}, 0xc0009da280, 0xc0009da2d0, 0xc0006a0f58, 0x77359400, 0x0, 0x0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer_table.go:193 +0x668\ngithub.com/ethereum/go-ethereum/core/rawdb.NewFreezer({0xc00063c2a0, 0x5f}, {0x15e5ff8, 0x11}, 0x0, 0x77359400, 0xc0003795f0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/freezer.go:125 +0x60d\ngithub.com/ethereum/go-ethereum/core/rawdb.newChainFreezer({0xc00063c2a0?, 0x59?}, {0x15e5ff8?, 0x10?}, 0x10?)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/chain_freezer.go:67 +0xa5\ngithub.com/ethereum/go-ethereum/core/rawdb.NewDatabaseWithFreezer({0x7d90e668a858, 0xc000784300}, {0xc0009b43c0, 0x59}, {0x15e5ff8?, 0x11?}, 0x0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/core/rawdb/database.go:196 +0xa5\ngithub.com/ethereum/go-ethereum/node.openDatabase({{0x0, 0x0}, {0xc0009b4300, 0x51}, {0xc0009b43c0, 0x59}, {0x15e5ff8, 0x11}, 0x0, 0x0, ...})\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/node/database.go:54 +0xbe\ngithub.com/ethereum/go-ethereum/node.(*Node).OpenDatabaseWithFreezer(0xc00078e1c0, {0x15dab72, 0x9}, 0x0, 0x0, {0x0, 0x0}, {0x15e5ff8, 0x11}, 0x0)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/node/node.go:753 +0x318\ngithub.com/ethereum/go-ethereum/eth.New(0xc00078e1c0, 0xc000004388)\n\t/home/circleci/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.2/eth/backend.go:140 +0x4e5\ngithub.com/ethereum-optimism/optimism/op-program/client/l2/test.NewMiner(0xc0006a6340, {0x20830a0, 0xc0005a0360}, 0x4)\n\t/var/opt/circleci/data/workdir/op-program/client/l2/test/miner.go:74 +0x613\ngithub.com/ethereum-optimism/optimism/op-program/client/l2.TestFastCannonBlockHeaderOracle_WithFallback(0xc0006a6340)\n\t/var/opt/circleci/data/workdir/op-program/client/l2/fast_canon_test.go:122 +0x94\ntesting.tRunner(0xc0006a6340, 0x1ed2fc8)\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1689 +0xfb\ncreated by testing.(*T).Run in goroutine 1\n\t/data/mise-data/installs/go/1.22.7/src/testing/testing.go:1742 +0x390\n```\n\nFrom this CI run: https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/85680/workflows/3ff764a6-b938-4395-b47a-aac0b2a3b26d/jobs/3394946/tests", "CLOSED", 0, "protolambda", "2025-03-28T13:22:24Z", "2025-03-28T16:52:29Z", "2025-03-28T16:52:29Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wGoKG", 15089, "op-deployer: integration-test uses wrong chainID for dev keys", "See https://github.com/ethereum-optimism/optimism/blob/0f476b44a3a284855361685b97baeb4bfb26729b/op-deployer/pkg/deployer/integration_test/apply_test.go#L666\n\nAll the keys, and the addresses derived from them, that are created in `newChainIntent` should be unique to the L2, not the L1!\n\nBut the function applies the L1 chain ID instead. If this intent were used for different L2s, all L2s would end up with the same operator addresses.\n\nFor an isolated test of one chain it may not be a problem, but since documentation is sparse, fixing it would set the right example and help avoid future mistakes by copies of this code.\n\n", "OPEN", 0, "protolambda", "2025-03-27T22:16:55Z", "2025-03-27T22:16:55Z", null, "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wE2GC", 15084, "acceptance-tests: ensure cross-client coverage for isthmus", "We have some acceptance tests for isthmus already, including for the withdrawals root feature.\n\nWe should ensure that these tests cover us for chain splits when applied to a devnet. ", "CLOSED", 0, "geoknee", "2025-03-27T18:24:54Z", "2025-03-28T23:39:54Z", "2025-03-28T23:39:54Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wDV08", 15078, "[Keep Stage 1] Write specs", "", "CLOSED", 0, "smartcontracts", "2025-03-27T16:29:54Z", "2025-03-28T15:08:51Z", "2025-03-28T15:08:51Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wDVx9", 15077, "[Keep Stage 1] Review design doc", "", "CLOSED", 0, "smartcontracts", "2025-03-27T16:29:51Z", "2025-03-27T16:34:11Z", "2025-03-27T16:34:10Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wDVvI", 15076, "[Keep Stage 1] Write design doc", "Design doc checklist (see the [SDLC](https://devdocs.optimism.io/pm/sdlc.html)):\n\n- [x] Post design doc as a PR in either the `design-docs` or `design-docs-private` repositories\n- [x] Announce the PR in the [#pm channel](https://discord.com/channels/1244729134312198194/1244729134848938033) on Discord\n- [x] Loop in the leads of each team that might be impacted by your change\n- [x] Schedule design review meeting\n", "CLOSED", 0, "smartcontracts", "2025-03-27T16:29:46Z", "2025-03-27T16:34:32Z", "2025-03-27T16:34:30Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6wDTsP", 15074, "[Keep Stage 1] [Tracking] Role modifications to retain Stage 1 status", "To search for and keep track of this issue's subtasks, use the following short name: `Keep Stage 1`\n", "CLOSED", 0, "smartcontracts", "2025-03-27T16:27:05Z", "2025-03-27T16:33:02Z", "2025-03-27T16:33:02Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6v_jOf", 15067, "op-service: unskip and fix `FuzzAccountResult_StorageProof`", "This test is not being run in CI, and actually fails pretty reliably. It needs debugging and reinstating. ", "CLOSED", 0, "geoknee", "2025-03-27T11:48:31Z", "2025-03-28T23:10:06Z", "2025-03-28T23:10:06Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6v4aWI", 15053, "strengthen fuzzing in CI", "              > I would be interested in also extending the fuzz time by say 3x, and optimize installation of dependencies before launching the fuzzing jobs in parallel.\r\n\r\nDo you want to do this in this PR @geoknee?\r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/optimism/pull/15047#pullrequestreview-2718535302_\r\n            ", "CLOSED", 0, "geoknee", "2025-03-26T21:14:10Z", "2025-03-28T23:10:06Z", "2025-03-28T23:10:06Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6v1KnA", 15046, "op-e2e: fix ActiveSequencerCheckDuration", "When `ActiveSequencerCheckDuration` was introduced it was left set to 0 in programmatic configs, and it seems like this causes instant checking / hot-loops in op-e2e.\nThe `Check()` method should also ensure it's non-zero, so it cannot have the wrong value anymore.\n\nThis applies to both the batcher, proposer, and potentially other services.\n", "OPEN", 0, "protolambda", "2025-03-26T15:05:26Z", "2025-03-26T15:05:26Z", null, "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vrhI0", 15033, "op-node: do not load custom chain config from execution client", "> @alessandromazza98 I discussed this with @sebastianst today. \n> \n> We are minded to solve this problem by a different route. We want to remove the code which has op-node reaching out to op-geth for chain config, even for custom chains. The config should instead be attached to the rollup config and if it isn't this would be an error.  How does that sound to you? \n\n _Originally posted by @geoknee in [#14902](https://github.com/ethereum-optimism/optimism/issues/14902#issuecomment-2752162719)_", "CLOSED", 0, "geoknee", "2025-03-25T18:22:15Z", "2025-03-27T12:25:20Z", "2025-03-27T12:25:20Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vmhp4", 15021, "PrestateTracer returns an error with a specific block", "Curling the following request returns an error on our archive nodes, but returns a response when curling a [3rd party provider](https://docs-demo.optimism.quiknode.pro/)\nRequest:\n```\ncurl http://localhost:8545 -X POST -H \"Content-Type: application/json\" --data '{\"method\":\"debug_traceBlockByNumber\",\"params\":[\"0xc3d55b\", {\"tracer\": \"prestateTracer\", \"tracerConfig\": {\"diffMode\": true}}],\"id\":1,\"jsonrpc\":\"2.0\"}'\n```\nResponse:\n```\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":[{\"txHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"error\":\"TypeError: cannot read property '0x697f8acd2995956244991a1b357941...' of null    in server-side tracer function 'result'\"}]}\n```\nEnvironment:\nOp-geth: [v1.101503.1](https://github.com/ethereum-optimism/op-geth/releases/tag/v1.101503.1)\nOp-node:  [op-node v1.12.2](https://github.com/ethereum-optimism/optimism/releases/tag/op-node%2Fv1.12.2)\nOS: Ubuntu 22.04\n\nThis [issue](https://github.com/ethereum-optimism/optimism/issues/2306#issuecomment-1064275047) suggests there's a bug in the tracer code, though the report issue is not the same method", "OPEN", 0, "abbaahmad", "2025-03-25T10:51:20Z", "2025-03-25T10:51:20Z", null, "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vhPcT", 15017, "check-prestate: Produce periodic report of prestate suitability", "op-chain-ops has a check-prestate function which produces a JSON report for a given prestate hash listing which chains it has up to date config for.\n\nThis is only run on demand so may break without being noticed, but since it necessarily references the latest versions from multiple repos it isn't a good fit for having a pre-merge test in CI.\n\nTo make the information more easily available and provide alerting if the tool stops working, we should set up a job that periodically runs the tool to verify reasonably recent op-program prestates and publish the results as a HTML page somewhere. It should notify slack or discord if the update fails.", "OPEN", 0, "ajsutton", "2025-03-24T23:50:06Z", "2025-03-24T23:50:06Z", null, "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vdXCR", 15008, "Add L2 Pectra NAT tests", "", "CLOSED", 0, "teddyknox", "2025-03-24T15:52:38Z", "2025-03-25T14:37:11Z", "2025-03-25T14:37:11Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vZqGc", 15005, "op-service: tx intent: better construct call inputs", "Based on https://github.com/ethereum-optimism/optimism/pull/14948, we may research better method to construct call input. ", "OPEN", 0, "pcw109550", "2025-03-24T10:18:14Z", "2025-03-24T10:18:18Z", null, "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vWdtk", 15002, "op-challenger: Failing to respond to proposals for super roots prior to genesis", "Proposals with a super root that reference timestamps prior to genesis are not valid. But the challenger still needs to respond to them.\nCurrently, when the challenger sees such proposals it fails to respond with the following error:\n```\nERROR[03-23|23:29:32.033] Failed to calculate all required moves   role=Challenger game=0x33c56EB74b9592670915b6f303dBBE8aDeb0A931 err=\"failed to determine if root claim is correct: failed to retrieve super root at timestamp 4: did not reach genesis time (1742786930) yet\"\n```", "CLOSED", 0, "Inphi", "2025-03-24T03:48:13Z", "2025-03-24T03:52:52Z", "2025-03-24T03:52:51Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vNdSA", 14990, "Supervisor: Rewind can rewind", "When accessing the Local Derivation Database, it is possible for an L2 block height to appear multiple times:\n\n- Block A1 is derived from L1 X\n- Block A2 is derived from L1 Y\n- Block A1 is discovered invalid from L1 Z\n\nWhen this happens, all three entries remain in the database. This means that calls to `derivedNumToFirstSource` will find the *first* source for the L2 block, which is the block that has been invalidated. using `derivedNumToLastSource` will fetch a different L1 height (which could happen naturally), but notably the *hash* of the L2 will be different.\n\nThis `derivedNumToFirstSource` call gets used as part of our `Rewind` routine to reset the Local database. But this rewinds the database farther than it should, rewinding back to the *first* time this block height was seen.\n\nThe Rewind code should check if the block we are rewinding to gets replaced ever, and if it does, should rewind only to the replacement location.", "CLOSED", 0, "axelKingsley", "2025-03-21T21:30:21Z", "2025-03-25T15:11:13Z", "2025-03-25T15:11:13Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6vJvpF", 14980, "Automated prestate verification", "We need a script that can verify if a prestate is valid for a given chain. Ideally it would be given the L1 and L2 chain id's or names. Or op-node and op-geth versions? Note that prestates can be based on standard or custom config. ", "CLOSED", 0, "pauldowman", "2025-03-21T14:24:47Z", "2025-03-27T23:36:24Z", "2025-03-27T23:36:24Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6up-QA", 14945, "Add Prague NAT spec tests", "We will do this at best effort, current approach will be to attempt to run prague execution spec tests located at https://github.com/ethereum/execution-spec-tests/tree/main/tests/prague.", "CLOSED", 0, "teddyknox", "2025-03-19T02:00:17Z", "2025-03-27T21:08:58Z", "2025-03-27T21:08:58Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6up8K3", 14942, "Add NAT test for operator fee update", "We want to fuzz updates and then send L2 transactions updating operator fee parameters and ensure that there is no chain split (i.e. that both op-geth and op-reth agree on the post-state).", "CLOSED", 0, "teddyknox", "2025-03-19T01:54:10Z", "2025-03-24T15:30:50Z", "2025-03-24T15:30:49Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6up7DM", 14941, "Add EIP-7702 NAT test", "...specifically for the batches\n\nhttps://discord.com/channels/1244729134312198194/1351254382649413822/1351259450001985718\n\nSee [op-acceptance-tests/tests/isthmus/withdrawal_root_test.go](https://github.com/ethereum-optimism/optimism/blob/develop/op-acceptance-tests/tests/isthmus/withdrawal_root_test.go) for an example test.", "CLOSED", 0, "teddyknox", "2025-03-19T01:51:07Z", "2025-03-27T18:13:47Z", "2025-03-27T18:13:46Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6uoxZV", 14935, "Supervisor: Crashes when Managed Node closed", "when a node goes offline, for some reason the supervisor gets flooded with Received nil event and crashes\n\n@protolambda says:\n\nthink I might have found the nil event issue\n            case ev, ok := <-m.nodeEvents: // nil, indefinitely blocking, if no node-events subscriber is set up.\n                if !ok {\n                    m.log.Info(\"Closing node\")\n                    return\n                }\nI think we need something like this\nwe account for a nil channel where we're not subscribed. But we didn't handle a closed channel, where reads would return nil\n\n\n", "CLOSED", 0, "axelKingsley", "2025-03-18T21:36:24Z", "2025-03-26T14:58:51Z", "2025-03-26T14:58:51Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6uW8Xx", 14909, "devnet-SDK: support in-process Go system variant (like op-e2e)", "Support an in-process system variant of the op-stack. Like op-e2e, but with no legacy setup quirks.\n\nThis can also replace the `interop.SuperSystem` op-e2e variant, which doesn't do expose unique that cannot be done through the devnet SDK, but which has its own tech-debt already.\n\n", "CLOSED", 0, "protolambda", "2025-03-17T14:13:18Z", "2025-03-27T13:39:19Z", "2025-03-27T13:39:18Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6tl-OY", 14804, "OPCM work for interop proofs deployment", "There will be OPCM work for the interop proofs deployment needed before the Alphanet, this issue is a placeholder to define it.\n", "CLOSED", 0, "pauldowman", "2025-03-12T02:26:23Z", "2025-03-25T16:16:33Z", "2025-03-25T16:16:32Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6tBr-7", 14713, "devnet-sdk: improve wallet utils", "- Don\u2019t assume same keys on every chain. Creates conflicts\n- Op-e2e existing keys: `op-e2e/e2eutils/secret.go` is a bad pattern. Don't recreate that.\n- Funding a new key from a faucet should be easy.\n- Accessing existing keys (used in the deployment/configuration of the L2) should be easy. Maybe use the `devkeys` package just for key identifiers (and not assume there\u2019s one global mnemonic, if network is set up differently)\n\n", "CLOSED", 0, "protolambda", "2025-03-07T12:37:06Z", "2025-03-25T15:41:44Z", "2025-03-25T15:41:42Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6tBpIz", 14712, "devnet-SDK: typing improvements", "Improve the typing of the devnet-SDK identifiers, and reduce magic global constant usage.\n\nThere should be no arbitrary untyped strings or magic constants in devnet SDK (ex: `s.sys.NodeEndpoint(\"sequencer\")` is bad).\n\n", "CLOSED", 0, "protolambda", "2025-03-07T12:31:38Z", "2025-03-27T12:59:21Z", "2025-03-27T12:59:19Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6tBlzR", 14710, "devnet-sdk: Config pattern for test startup", "Tests should be spun up with an Option pattern, applied to a config.\n\nThe config can be used in two ways:    \n- to validate existing system (like gate checks we have now)\n- to instantiate new system (for in-process variant)\n\nGeneral: customize system acquisition based on validators\n\n", "CLOSED", 0, "protolambda", "2025-03-07T12:24:47Z", "2025-03-27T13:03:41Z", "2025-03-27T13:03:40Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6sxgxe", 14663, "Combine redundant contract deployment structs", "We have two nearly identical structs to represent the Implementations contract bundle:\n* [opcm.DeployImplementationsOutput](https://github.com/ethereum-optimism/optimism/blob/develop/op-deployer/pkg/deployer/opcm/implementations.go#L32-L51) (used by deployment script)\n* [inspect.ImplementationsDeployment](https://github.com/ethereum-optimism/optimism/blob/develop/op-deployer/pkg/deployer/inspect/l1.go#L78-L90) (used in the state.json)\n\nWe could likely use `inspect.ImplementationsDeployment` in both cases (or rather, extract that struct into a types package and import it where needed to avoid circular dependencies)?\n\nSame refactor could be applied to all other deploy script outputs and their associated deployment structs. It would be great to only have to maintain one version of all of those structs, especially since it seems they are meant to capture the same exact fields. It would allow us to streamline the `bootstrap` --> `apply` --> `verify` deployer steps as well because we could reliably reference the same field names/json tags across all of those steps without worry of divergence", "CLOSED", 0, "bitwiseguy", "2025-03-05T22:14:58Z", "2025-03-27T20:39:43Z", "2025-03-27T20:39:42Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6sfMw-", 14616, "devnet-SDK: decouple Chain and Node interfaces", "For both L1 nodes and L2 nodes, decouple the idea of a \"chain\" and a \"node\".\n\nA chain should:\n- have a way to access configuration\n- have a way to access deployment info\n- have a way to access nodes by name (and per type, e.g. getting an EL node, or getting a rollup-node)\n\nAn (EL) node should:\n- provide high level interface, to interact with all common RPC client bindings, without leaking the client binding to the test itself.\n  - direct RPC access in a test is bad, it's not DSL, it makes it harder to maintain and apply shared behaviors too.\n\nSimilarly, an interface for a rollup-node, around the rollup-client RPC bindings, is useful to have.\nStart really minimal, interfaces and composition is important. We can expand the interfaces later.\nE.g. the sync-status RPC.\n\nOver time, preventing boilerplate in tests is important. E.g. an interface can provide \"wait for unsafe head change\", instead of making it poll the sync-status manually.\n\nAlso see ticket for expanding the EL op-service client bindings.\n\n", "CLOSED", 0, "protolambda", "2025-03-04T11:07:02Z", "2025-03-24T15:11:57Z", "2025-03-24T15:11:07Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6r-0B6", 14566, "devnet-sdk shell doesn't connect as expected", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\ncast is supposed to connect to the correct RPC endpoint when in a particular chain's devnet-sdk subshell.\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\nWhen connecting to the subshell of a particular chain as deployed via the devnet-sdk like so\n\n```\n$ just simple-devnet\n[...] deploys devnet\n$ just enter-devnet simple-devnet op-kurtosis\nexec go run ../devnet-sdk/shell/cmd/enter/main.go --devnet kt://simple-devnet --chain op-kurtosis\nYou're in a op-kurtosis chain subshell.\n\n\tSome addresses of interest:\n\taddressManager                      = 0xa09727855f4e2454880Cd4227548Af355aAcEaf9\n\tanchorStateRegistryProxy            = 0x0a14202319a90C3078e5De460e9fD580380c6Cc3\n\tdataAvailabilityChallengeImpl       = 0x0000000000000000000000000000000000000000\n\tdataAvailabilityChallengeProxy      = 0x0000000000000000000000000000000000000000\n\tdelayedWETHPermissionedGameProxy    = 0x549f4D679CbC3C2aF968256aa8a75Ed49856257e\n\tdelayedWETHPermissionlessGameProxy  = 0x0000000000000000000000000000000000000000\n\tdisputeGameFactoryProxy             = 0x4Ca14C79Db8591Fa4B392EEAEA5CA77298f867B2\n\tfaultDisputeGame                    = 0x0000000000000000000000000000000000000000\n\tl1CrossDomainMessengerProxy         = 0x6786AA171a109713ebAe15aa3fFe60c65f098a92\n\tl1ERC721BridgeProxy                 = 0x42086874976994603eE2376953EB5575CD9b38Fa\n\tl1StandardBridgeProxy               = 0x36C4c5fDDF57ED192FA57de21362AC274de2f158\n\toptimismMintableERC20FactoryProxy   = 0xAdD5fd2B2c7691bDCBDB7873c26eA0a6894D7531\n\toptimismPortalProxy                 = 0x568340641f74a25a305AE99BAE17B00533f4FBbA\n\tpermissionedDisputeGame             = 0x92e8642ce700AAaF95e9FD7d9A67db7D91EC9AA6\n\tproxyAdmin                          = 0x24E112Ee68C108bCFb03B216F29e521e48B666a8\n\tsystemConfigProxy                   = 0xC5527ebceE0bFb05f9056F13D908E9E20b341F75\n\t\n$ kcat kt://simple-devnet/devnet/env.json | jq '.l2[].wallets[].address'\n\"0x8943545177806ed17b9f23f0a21ee5948ecaa776\"\n\"0xe25583099ba105d9ec0a67f5ae86d90e50036425\"\n\"0x3e95dfbbaf6b348396e6674c7871546dcc568e56\"\n\"0x5918b2e647464d4743601a865753e64c8059dc4f\"\n\"0x589a698b7b7da0bec545177d3963a2741105c7c9\"\n\"0x4d1cb4eb7969f8806e2caac0cbbb71f88c8ec413\"\n\"0xf5504ce2bcc52614f121aff9b93b2001d92715ca\"\n\"0xf61e98e7d47ab884c244e39e031978e33162ff4b\"\n\"0xf1424826861ffbbd25405f5145b5e50d0f1bfc90\"\n\"0xfdce42116f541fc8f7b0776e2b30832bd5621c85\"\n\"0xd9211042f35968820a3407ac3d80c725f8f75c14\"\n\"0xd8f3183def51a987222d845be228e0bbb932c222\"\n\"0x614561d2d143621e126e87831aef287678b442b8\"\n\"0xaff0ca253b97e54440965855cec0a8a2e2399896\"\n\"0xf93ee4cf8c6c40b329b0c0626f28333c132cf241\"\n\"0x802dcbe1b1a97554b4f50db5119e37e8e7336417\"\n\"0xae95d8da9244c37cac0a3e16ba966a8e852bb6d6\"\n\"0x2c57d1cfc6d5f8e4182a56b4cf75421472ebaea4\"\n\"0x741bfe4802ce1c4b5b00f9df2f5f179a1c89171a\"\n\"0xc3913d4d8bab4914328651c2eae817c8b78e1f4c\"\n\"0x65d08a056c17ae13370565b04cf77d2afa1cb9fa\"\n$ optimism/kurtosis-devnet [devnet-sdk-test-porting-1\u25cf] \u00bb cast balance 0x8943545177806ed17b9f23f0a21ee5948ecaa776               \nError: error sending request for url (http://127.0.0.1:32806/)\n\nContext:\n- Error #0: client error (Connect)\n- Error #1: tcp connect error: Connection refused (os error 61)\n```\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\nThe cast command should return the balance of the account properly without a connection error.\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "teddyknox", "2025-02-27T19:09:48Z", "2025-03-24T15:37:23Z", "2025-03-24T15:37:23Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6oM10Y", 14075, "contracts: Update OptimismPortalInterop withdrawal proof verification", "Withdrawals should be proven against the Super root, not a single chain output root.", "CLOSED", 0, "ajsutton", "2025-01-30T22:25:12Z", "2025-03-26T20:43:48Z", "2025-03-26T20:43:48Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6lXezZ", 13627, "all: L1 Pectra support (Upgrade 12)", "The L1 Pectra upgrade introduces a new tx-type and changes to the block-header.\n\n---\nLatest L1 Timeline: \n* Holesky activation February 12th\n* Sepolia actiaction February 19th\n* Mainnet activation mid March (tentative)\n---\n\nThese a breaking change to RPC contents and source-data verification.\n\n**These breaking changes have to be supported to\nnot halt the Fault-Proof or chain upon new unrecognized input data.**\nThis will be prioritized over regular L2 upgrade work.\n\nThis is not *Pectra in L2*. Introduction of Pectra in the L2 itself is tracked here:\nhttps://github.com/ethereum-optimism/optimism/issues/12435\n\nCore Pectra changes that break formats / preimages:\n- Block-header (new requests root attribute)\n- Transactions (EIP-7702, new tx type to decode when traversing batch inbox)\n- Receipts (EIP-7702, new receipt type, no breaking change other than type itself)\n\n### Spec\n\n- [x] Clarify that unknown receipt types are decoded to best ability,\n  - assuming the same receipt format we have for every tx type thus far, to support deposits.\n- [x] Clarify 7702 receipt type can contain valid deposits and system-config events\n- [x] Clarify that batcher-txs of types other than `0`, `1`, `2`, `3` will be ignored by default.\n  - TODO: L3s may also need `0x7e` (deposit tx) to be a valid batcher tx, for force-batches.\n\n### `op-service`,`op-node`,`op-program`\n\n<details>\n<summary> The old plan for op-service, op-node and op-program which we discarded for now is in this fold </summary>\n\n### `op-service`\n\n- [ ] Client bindings integration:\n  - [ ] `sources`: `EthClient.InfoAndTxsByHash` needs to return a list of `GenericTx`.\n    And `ByLabel` and `ByNumber` methods can mirror tha change.\n  - [ ] `testutils`: mirror `sources` API changes on mock utils\n- [ ] RPC block-header verification update\n  - `requestsRoot` optional RPC attribute of block-header needs to be handled in `sources.RPCHeader.verify()`\n- [ ] Core tx type support: (PR in progress - https://github.com/ethereum-optimism/optimism/pull/13628 )\n  - [ ] `eth.GenericTx` interface:\n    - type: to check if we can decode\n    - tx-hash: to verify the transactions-root in block-header (MPT leaf pre-images match tx-hashes: both are keccak hashes of the encoded tx)\n    - tx: to decode the transaction\n    - JSON encode/decode support, err if tx-type is not supported\n    - binary encode/decode support, err if tx-type is not supported\n    - to be used in derivation pipeline\n  - [ ] `eth.OpaqueTransaction` struct:\n    - implements `GenericTx` interface\n    - supports binary such that we can determine the type and tx-hash, even if not knowing how to interpret the binary payload, or how to turn into a JSON tx.\n    - to be used in op-program, around preimages.\n  - [ ] `sources.RawJsonTransaction` struct:\n    - implements `GenericTx` interface\n    - supports JSON such that we can determine the type and tx-hash, even if not knowing all JSON fields, or how to encode as binary.\n    - to be used in op-node, when deriving from a L1 RPC\n\n### `op-node`\n\n- [ ] `node`:\n  - `L1Client` from op-service fits new `derive` changes for L1 data retrieval.\n- [ ] `derive` package:\n  - `InfoAndTxsByHash` needs to return a list of `eth.GenericTx`, not `*types.Transaction`\n  - `FetchReceipts` ideally returns a list of `*types.Receipt` for now if we land minimum 7702 support,\n    even if not the exact right 7702 final version, since the 7702 receipt format has no changes, and it's just the type we need to work.\n- [ ] Sanity-check that the beacon-API format did not change for blobs retrieval.\n\n### `op-program`\n\n- [ ] client:\n  - only decode the tx preimages, when traversing L1, if the tx-type is `0` (legacy), `1` (berlin, 2930), `2` (london, 1559), `3` (cancun, 4844).\n    - Use `eth.OpaqueTransaction` to fit `eth.GenericTx` interface requirement of derivation code.\n  - EIP-7702 receipt support\n  - block-header support: requests-root already supported in block-header. Not future compatible.\n    Ignoring RLP-trailing items may be implemented later, for forward-compatibility.\n- [ ] host:\n  - preparing tx preimages by tx-hash needs to warn if JSON-RPC returns a `RawJsonTransaction` that we don't know how to encode into RLP.\n  - EIP-7702 tx preimages can be supported without RPC fallback once op-geth is updated. This can be changed without breaking state-transition or client side, if L1 breaks things.\n  - For future tx types we need a fallback to prepare the preimage using a non-JSON source, that has the `opaque` form of the tx.\n  - EIP-7702 receipt support\n\n### `op-geth`\n\n- [x] Land the 1.14.12 PR: https://github.com/ethereum-optimism/op-geth/pull/452\n- [ ] Implement and land the upcoming v1.14.13 changes:\n  - Contains EIP-7702: https://github.com/ethereum/go-ethereum/pull/30078\n  - Fixes the internal Geth requests-root Go API churn. Cleanup, good to have.\n  - Milestone of 1.14.13 is 97% complete, but no release yet: https://github.com/ethereum/go-ethereum/milestone/176\n  - We could just merge `master` upstream geth into `optimism`, and not wait for the v1.14.13 remainder.\n  - Blocks the simple approach the EIP 7702 receipt support.\n  - Blocks testing of Pectra L1 support in monorepo Go tests.\n\n### `testing`\n\n- [ ] Action test that creates L1 with Pectra activated, and finalizes a L2 chain with a tx in it.\n- [ ] op-program test to make sure a 7702 tx, 7702 receipt with deposit, and block header with a request, on L1 is not a problem.\n- [ ] Deploy op-stack with OPCM on a L1 Pectra chain (devnet 5 or testnet)\n\n### Later Go work\n\nLater, for better future compatibility against L1 forks:\n- [ ] Introduce `eth.GenericReceipt`, `eth.OpaqueReceipt`, `sources.RawJsonReceipt`: we can introduce the same abstraction for receipts.\n- [ ] Update `FetchReceipts` to return a list of `eth.GenericReceipt`.\n- [ ] `sources.RPCHeader` support for unknown block header fields: unfortunately no way to translate to the RLP without type interpretation.\n- [ ] Update op-program oracle interfaces to handle block-headers that are extended with additional RLP fields.\n  - Block-header hash can then still be computed, without interpreting the new unknown contents.\n\n</details>\n\nInstead we are updating op-geth and monorepo in these PRs:\n* https://github.com/ethereum-optimism/op-geth/pull/480\n* https://github.com/ethereum-optimism/optimism/pull/13958\n\n\n### Rust work\n\nSeparately, in the rust stack:\n- [x] Update Kona / op-rs:\n  - [x] With EIP-7702 (tx/receipt) handling.\n    - Kona [uses](https://github.com/op-rs/kona/blob/84645d337d1b15fed9e645ffdfe1fd43fbf28cfb/crates/executor/src/executor/mod.rs#L140) the `op-alloy`'s `OpReceiptEnvelope` which includes the [EIP-7702 variant](https://github.com/alloy-rs/op-alloy/blob/8643aee1b3024174b559b200b88494dfab8e411c/crates/consensus/src/receipt/envelope.rs#L38-L42).\n  - [x] Block-header handling.\n    - Kona uses `alloy`'s header [for execution](https://github.com/op-rs/kona/blob/main/crates/driver/src/executor.rs#L30) and rpc types. The `alloy` `Header` type already [includes EIP-7702 support](https://github.com/alloy-rs/alloy/blob/main/crates/consensus/src/block/header.rs#L125-L130) in the current version.\n  - [x] Ignore batcher txs with 7702 tx type in derivation pipeline.\n    Even if the tx type decoding might work, to stay in consensus with spec / op-node / op-program.\n    - Ignored by default, but a test has been added [here](https://github.com/op-rs/kona/pull/887).\n- [ ] Plan and implement longer term forward-compatibility strategy for future L1 changes.\n  E.g. through patterns similar to that of `eth.GenerixTx`.\n", "CLOSED", 0, "protolambda", "2025-01-08T06:16:42Z", "2025-03-24T11:08:05Z", "2025-03-24T11:08:04Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6UwDr_", 11676, "interop: FMA - ban-deposits", "link FMA on `specs/interop/derivation.md` under `security considerations`\n\nLink: https://github.com/ethereum-optimism/design-docs/blob/f3aa2db64b1676b5e58ae602acf2ebdba34b617c/security/fma-ban-deposits.md", "CLOSED", 0, "skeletor-spaceman", "2024-08-29T21:39:42Z", "2025-03-27T19:53:52Z", "2025-03-27T19:53:51Z", "ethereum-optimism/optimism", "2025-08-31 03:24:51"]
["I_kwDODjvEJM6xODYg", 15250, "Fix broken proofs action tests", "Fix the action tests broken by https://github.com/ethereum-optimism/optimism/pull/14883. ", "CLOSED", 0, "Inphi", "2025-04-04T19:59:58Z", "2025-04-04T20:09:09Z", "2025-04-04T20:09:07Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xM1Pc", 15248, "[Tracking] Remove or identify immutable usage", "Creating an issue to track the work that will result after #15117 is resolved. Once that's done, we will have to go through every instance where the rule makes an exception and update the corresponding file so that it either (1) explicitly allows the immutable to exist or (2) removes the immutable. This issue can be closed once this is done and there are no longer any exceptions in the rule file.", "OPEN", 0, "smartcontracts", "2025-04-04T16:56:05Z", "2025-04-04T16:56:05Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xICSd", 15241, "Remove redundant hack in engine rpc", "This hack \nhttps://github.com/ethereum-optimism/optimism/blob/0bc5fe8d16155dc68bcdf1fa5733abc58689a618/op-node/rollup/types.go#L615-L617\nis redundant as of\nhttps://github.com/ethereum-optimism/op-geth/blob/optimism/eth/catalyst/api.go#L219-L222\nand should be removed in order to adhere to specs: https://specs.optimism.io/protocol/exec-engine.html\n", "OPEN", 0, "emhane", "2025-04-04T08:39:14Z", "2025-04-04T08:41:27Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xCRq5", 15231, "[Interop Portal] Complete draft governance post", "", "OPEN", 0, "smartcontracts", "2025-04-03T16:43:59Z", "2025-04-03T16:43:59Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xCRoK", 15228, "[Interop Portal] Implementation", "", "CLOSED", 0, "smartcontracts", "2025-04-03T16:43:55Z", "2025-04-03T16:45:17Z", "2025-04-03T16:45:17Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xCRm2", 15226, "[Interop Portal] Write specs", "", "CLOSED", 0, "smartcontracts", "2025-04-03T16:43:51Z", "2025-04-03T16:45:00Z", "2025-04-03T16:45:00Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xCRl6", 15225, "[Interop Portal] Review design doc", "", "CLOSED", 0, "smartcontracts", "2025-04-03T16:43:50Z", "2025-04-03T16:45:05Z", "2025-04-03T16:45:05Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xCRk2", 15224, "[Interop Portal] Write design doc", "Design doc checklist (see the [SDLC](https://devdocs.optimism.io/pm/sdlc.html)):\n\n- [ ] Post design doc as a PR in either the `design-docs` or `design-docs-private` repositories\n- [ ] Announce the PR in the [#pm channel](https://discord.com/channels/1244729134312198194/1244729134848938033) on Discord\n- [ ] Loop in the leads of each team that might be impacted by your change\n- [ ] Schedule design review meeting\n", "CLOSED", 0, "smartcontracts", "2025-04-03T16:43:48Z", "2025-04-03T16:44:54Z", "2025-04-03T16:44:54Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xCFe-", 15219, "op-program: Incorrect documentation regarding number of blocks per state transition", "_Spearbit audit finding_\n\n**Description**\nThe high-level overview says:\n\n\"State transitions on the Superchain happen once per second. Each individual chain within that time can produce a block, several blocks, or no block.\"\n\n(https://hackmd.io/@clabby/ByF1fLivJe)\n\nHowever, that assertion is incorrect since only at most one block per chain per state-transition can be processed by the state transition function.\n\n**Recommendation**\nAll documentation should be reviewed and corrected to remove the false assertion regarding number of blocks per state transition.\n\n", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:21:14Z", "2025-04-03T17:46:47Z", "2025-04-03T17:46:46Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xBRSJ", 15207, "triage and add all relevant issues from the op-program audit for interop", "Add all confirmed findings to the monorepo so we start working on selected findings", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T14:59:28Z", "2025-04-04T15:30:12Z", "2025-04-04T15:29:50Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xA6D7", 15205, "op-program: Bypass of consolidation step due to unbounded superRoot.Chains length", "_Spearbit audit finding:_\n\n**Description**\nA sanity check limits PendingProgress length to less than `ConsolidateStep (127)`, but no similar validation exists for` superRoot.Chains` length in the `stateTransition()` function. If `superRoot.Chains` length exceeds 127, consolidation is never reached, causing potential system stalling.\n\nIn `stateTransition()`, function, the code uses the following logic to decide between deriving an optimistic block or consolidation:\n```\n\nif transitionState.Step < uint64(len(superRoot.Chains)) {\n    // Derive optimistic block\n    // ...\n} else if transitionState.Step == ConsolidateStep {\n    // Run consolidation step\n    // ...\n}\n```\nThe vulnerability arises because:\n\nIt should enter consolidation when `transitionState.Step` reaches `ConsolidateStep` (127).\nIf `superRoot.Chains` length is over 127, the first condition is always true.\nThus, the system keeps deriving optimistic blocks or increments the step.\n\n**Recommendation**:\n```\nImplement a validation check early in the process to ensure superRoot.Chains length is bounded:\n\nfunc stateTransition(logger log.Logger, bootInfo *boot.BootInfoInterop, l1PreimageOracle l1.Oracle, l2PreimageOracle l2.Oracle, tasks taskExecutor) (common.Hash, error) {\n    // Existing code...\n    \n    transitionState, superRoot, err := parseAgreedState(bootInfo, l2PreimageOracle)\n    if err != nil {\n        return common.Hash{}, err\n    }\n    \n    // Add this validation\n    if len(superRoot.Chains) > ConsolidateStep {\n        return common.Hash{}, fmt.Errorf(\"chains length exceeds maximum allowed value of %d\", ConsolidateStep)\n    }\n    \n    // Rest of the function...\n}\n```\n", "OPEN", 0, "BlocksOnAChain", "2025-04-03T14:29:19Z", "2025-04-03T18:18:01Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xA3NJ", 15204, "op-program: No validation of chain order in SuperRoot during state transition", "_Spearbit audit finding_\n\n**Description**:\nThe `stateTransition()` function currently assumes that `SuperRoot.Chains` are properly ordered without explicitly validating this assumption. \nWhile `UnmarshalSuperRoot()` may expect an ordered list, there is no explicit check during the state transition process to ensure the ordering is correct. An improperly ordered list of chains could lead to inconsistent derivation results.\n\nIn the `parseAgreedState() `function, the code unmarshals the SuperRoot:\n\n```\nsuper, err := eth.UnmarshalSuperRoot(transitionState.SuperRoot)\nif err != nil {\n    return nil, nil, fmt.Errorf(\"invalid super root: %w\", err)\n}\n```\n**Recommendation**\nAdd an explicit validation step in the `parseAgreedState()` function to verify the chains are properly ordered to ensure the validity of `SuperRoot` before running the derivation.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T14:25:55Z", "2025-04-03T17:55:24Z", "2025-04-03T17:55:23Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xAwR6", 15201, "op-program: New chain in the dependency set should create a block on activation time to avoid deposits-only block", "_Spearbit audit finding_\n\n**Description**\n`HazardSet.checkChainCanExecute` function is called during `CrossUnsafeHazards` execution. \nThis function ensures that a given chain can execute messages based on the `block.Timestamp.`\n```\n\n// hazard_set.go\nfunc (h *HazardSet) checkChainCanExecute(depSet depset.DependencySet, chainID eth.ChainID, block types.BlockSeal, execMsgs map[uint32]*types.ExecutingMessage) error {\n\tif len(execMsgs) > 0 {\n\t\tif ok, err := depSet.CanExecuteAt(chainID, block.Timestamp); err != nil {\n\t\t\treturn fmt.Errorf(\"cannot check message execution of block %s (chain %s): %w\", block, chainID, err)\n\t\t} else if !ok {\n\t\t\treturn fmt.Errorf(\"cannot execute messages in block %s (chain %s): %w\", block, chainID, types.ErrConflict)\n\t\t}\n\t}\n\treturn nil\n}\n\n// static.go\nfunc (ds *StaticConfigDependencySet) CanExecuteAt(chainID eth.ChainID, execTimestamp uint64) (bool, error) {\n\tdep, ok := ds.dependencies[chainID]\n\tif !ok {\n\t\treturn false, nil\n\t}\n\treturn execTimestamp >= dep.ActivationTime, nil\n}\n```\nThis timestamp check can lead to invalidating a block right after the activation.\n\n**Scenario**:\nThe initial dependency set is configured with 3 chains:\n\nOP mainnet with a 2s block time\nUnichain with a 1s block time\nRandomchain with a 3s block time\nThe dependency activation time is set to `dep.ActivationTime = 100`.\n\nThen, during the consolidation step at timestamp 100, the following blocks will be passed:\n\nOP mainnet: block produced at timestamp 100 (new block)\nUnichain: block produced at timestamp 100 (new block)\nRandomchain: block produced at timestamp 99 (already known)\nThis already known block will not pass the `checkChainCanExecute` as the block it provides is at timestamp 99.\n\nThis block will be replaced to a deposits-only block. However, the block could have already been checked and verified after timestamp 99.\n\n**Recommendation**:\nActivation time for the dependency set should be set such as all chains in the dependency set are producing new blocks.\n- Another way to fix the issue would be to only process deposits-only blocks around the activation timestamp.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T14:18:42Z", "2025-04-03T17:59:22Z", "2025-04-03T17:59:22Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6xAuCs", 15200, "op-program: Blocks are retrieved multiple times from oracle", "_Spearbit audit finding_:\n\n**Description**\n`checkHazards` is called to verify executing messages of a candidate block and their dependencies on other blocks of the dependency set.\n\nCurrently, the checkHazards function executes 3 different functions:\n\n`CrossUnsafeHazards`: the hazard set is built for the candidate. This function calls the oracle to open blocks that will be added to the hazard set.\n`HazardUnsafeFrontierChecks`\n`HazardCycleChecks`: builds a graph for the hazard set. It re-opens every block in the hazard set by calling the oracle.\nWhen `CrossUnsafeHazards` adds a block to the hazard set, it opens this block by calling the oracle but only tracks the `BlockSeal` data (i.e. the hash, number and timestamp of the block) in the `HazardSet.entries. `\n\nThis leads to the `HazardCycleChecks` logic to interact a second time with the oracle for every block in the hazard set.\n\n**Recommendation**:\nThe **HazardSet.entries** could directly store the opened block such that multiple interactions with the oracle are avoided.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T14:16:28Z", "2025-04-03T18:01:43Z", "2025-04-03T18:01:42Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6w_CJR", 15195, "Isthmus Operator Fee Fuzzing Overflow Case", "Commit https://github.com/ethereum-optimism/optimism/commit/696382fc0ab4f14a0bfc7eb9403871c9c981d104, Seed: `1743679586487215000`\n\nFlaking at \n`op-acceptance-tests/tests/isthmus/operator_fee::TestOperatorFee`:\n\nCmd:\n```\n\u279c  operator_fee git:(develop) \u2717 pwd\n/Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee\n\u279c  operator_fee git:(develop) \u2717 DEVNET_ENV_URL=kt://isthmus-devnet/devnet-descriptor-0 go test ./ -run ^TestOperatorFee$ -v -count=1 -timeout=6h\n```\n\nLogs:\n```\n=== RUN   TestOperatorFee/specific_case_2\n=== NAME  TestOperatorFee\n    operator_fee_test.go:78:    INFO [04-03|20:39:21.416] Starting operator fee test               test_case=specific_case_2 operator_fee_constant=0 operator_fee_scalar=0 l1_fee_constant=0             l1_fee_scalar=4,294,967,295\n    operator_fee_test.go:91:    INFO [04-03|20:39:21.416] Setting up clients for L1 and L2 chains\n    multi_client.go:62:         INFO [04-03|20:39:21.416] Running first chain fork detection check\n    multi_client.go:67:         DEBUG[04-03|20:39:21.417] Got L2 head block                        number=891\n    operator_fee_test.go:112:   INFO [04-03|20:39:21.418] Setting up rollup owner wallet\n    operator_fee_test.go:120:   DEBUG[04-03|20:39:21.419] L1 chain ID                              chainID=3,151,908\n    operator_fee_test.go:123:   INFO [04-03|20:39:21.419] Getting L2 chain config\n    operator_fee_test.go:130:   INFO [04-03|20:39:21.419] Creating fee checker utility\n    fee_checker.go:42:          DEBUG[04-03|20:39:21.419] Creating fee checker                     chainID=2,151,908\n    operator_fee_test.go:134:   INFO [04-03|20:39:21.419] Connecting to GasPriceOracle contract\n    operator_fee_test.go:143:   INFO [04-03|20:39:21.420] Getting SystemConfig contract\n    operator_fee_test.go:158:   INFO [04-03|20:39:21.425] Verified GPO contract has correct Isthmus view\n    operator_fee_test.go:161:   INFO [04-03|20:39:21.425] Creating balance reader\n    operator_fee_test.go:166:   INFO [04-03|20:39:21.425] Waiting for L2 chain to produce block 1\n    operator_fee_test.go:171:   INFO [04-03|20:39:21.427] Creating test wallet 1\n    operator_fee_test.go:174:   INFO [04-03|20:39:21.427] Test wallet 1                            address=0xe31F96dc3171b9b2Fd8d26Ec84E2a2A2C919Dc73\n    operator_fee_test.go:176:   INFO [04-03|20:39:21.427] Creating test wallet 2\n    operator_fee_test.go:179:   INFO [04-03|20:39:21.428] Test wallet 2                            address=0xe6C6e58F22fE5e17C30fe8790fB5598C70C55B4D\n    operator_fee_test.go:188:   INFO [04-03|20:39:21.428] Funding rollup owner wallet with 10 ETH\n    operator_fee_test.go:196:   INFO [04-03|20:39:27.441] Funding test wallet with ETH             amount=1,000,000,000,000,000,000\n    operator_fee_test.go:209:   INFO [04-03|20:39:31.459] Updating operator fee parameters         constant=0 scalar=0\n    system_config_contract_utils.go:22: INFO [04-03|20:39:31.459] Updating operator fee params             constant=0 scalar=0\n    system_config_contract_utils.go:28: DEBUG[04-03|20:39:31.460] Using nonce                              nonce=69 wallet=0x589A698b7b7dA0Bec545177D3963A2741105C7C9\n    system_config_contract_utils.go:33: DEBUG[04-03|20:39:31.460] Constructing function call to setOperatorFeeScalars\n    system_config_contract_utils.go:59: DEBUG[04-03|20:39:31.467] Transaction signed                       hash=0x4ace51e65967317b3231a3cbf48e4c0b8e6956e66d0981bdb581df2343764639\n    system_config_contract_utils.go:61: INFO [04-03|20:39:31.467] Sending transaction to the network\n    system_config_contract_utils.go:66: INFO [04-03|20:39:31.469] Waiting for transaction confirmation\n    system_config_contract_utils.go:73: INFO [04-03|20:39:39.473] Transaction confirmed                    block=314 gasUsed=33911\n    operator_fee_test.go:213:   INFO [04-03|20:39:39.478] Operator fee parameters updated          block=314\n    operator_fee_test.go:216:   INFO [04-03|20:39:39.478] Updating L1 fee parameters               l1BaseFeeScalar=4,294,967,295 l1BlobBaseFeeScalar=0\n    system_config_contract_utils.go:105: INFO [04-03|20:39:39.478] Updating L1 fee params                   \"base fee scalar\"=4,294,967,295 \"blob base fee scalar\"=0\n    system_config_contract_utils.go:111: DEBUG[04-03|20:39:39.480] Using nonce                              nonce=70 wallet=0x589A698b7b7dA0Bec545177D3963A2741105C7C9\n    system_config_contract_utils.go:116: DEBUG[04-03|20:39:39.480] Constructing function call to setGasConfigEcotone\n    system_config_contract_utils.go:142: DEBUG[04-03|20:39:39.487] Transaction signed                       hash=0xd6f5161b54931df8bff51faf18c266842b1f322c43b22efcfc0565833f34a2b9\n    system_config_contract_utils.go:144: INFO [04-03|20:39:39.487] Sending transaction to the network\n    system_config_contract_utils.go:149: INFO [04-03|20:39:39.489] Waiting for transaction confirmation\n    system_config_contract_utils.go:156: INFO [04-03|20:39:45.492] Transaction confirmed                    block=315 gasUsed=44318\n    operator_fee_test.go:220:   INFO [04-03|20:39:45.494] Operator fee parameters updated          block=314\n    operator_fee_test.go:224:   INFO [04-03|20:39:45.494] Waiting for L2 nodes to sync with L1 origin where operator fee was set delay=30s\n    operator_fee_test.go:230:   INFO [04-03|20:40:15.502] L1Block base fee scalar                  scalar=4,294,967,295\n    operator_fee_test.go:235:   INFO [04-03|20:40:15.504] L1Block blob base fee scalar             scalar=0\n    operator_fee_test.go:240:   INFO [04-03|20:40:15.506] L1Block operator fee constant            constant=0\n    operator_fee_test.go:245:   INFO [04-03|20:40:15.508] L1Block operator fee scalar              scalar=0\n    operator_fee_test.go:252:   INFO [04-03|20:40:15.510] Sampling initial balances                block=918\n    balance_reader.go:34:       DEBUG[04-03|20:40:15.510] Sampling balances                        block=918 wallet=0xe31F96dc3171b9b2Fd8d26Ec84E2a2A2C919Dc73\n    balance_reader.go:54:       DEBUG[04-03|20:40:15.515] Sampled balances                         baseFee=218,379,161,826,000 l1Fee=41,305,690,994,595 sequencerFee=546,000,000,000 operatorFee=36,893,488,147,419,103,230 wallet=1,000,000,000,000,000,000\n    operator_fee_test.go:254:   DEBUG[04-03|20:40:15.515] Initial balances                         balances=\"BalanceSnapshot{Block: 918, BaseFeeVault: 218379161826000, L1FeeVault: 41305690994595, SequencerFeeVault: 546000000000, OperatorFeeVault: 36893488147419103230, WalletBalance: 1000000000000000000}\"\n    operator_fee_test.go:257:   INFO [04-03|20:40:15.515] Current base fee                         fee=25,709,534\n    operator_fee_test.go:266:   INFO [04-03|20:40:19.022] Transaction confirmed                    block=920 hash=0xbc0f918875cf726a36742f362255b2e18d3966f482dcf83834f78c0ec91305d4\n    operator_fee_test.go:271:   INFO [04-03|20:40:19.022] Sampling final balances                  block=920\n    balance_reader.go:34:       DEBUG[04-03|20:40:19.022] Sampling balances                        block=920 wallet=0xe31F96dc3171b9b2Fd8d26Ec84E2a2A2C919Dc73\n    balance_reader.go:54:       DEBUG[04-03|20:40:19.028] Sampled balances                         baseFee=218,914,771,929,000 l1Fee=41,305,739,098,228 sequencerFee=567,000,000,000 operatorFee=36,893,488,147,419,103,230 wallet=999,999,443,341,792,367\n    operator_fee_test.go:273:   DEBUG[04-03|20:40:19.028] Final balances                           balances=\"BalanceSnapshot{Block: 920, BaseFeeVault: 218914771929000, L1FeeVault: 41305739098228, SequencerFeeVault: 567000000000, OperatorFeeVault: 36893488147419103230, WalletBalance: 999999443341792367}\"\n    operator_fee_test.go:281:   DEBUG[04-03|20:40:19.031] Calculated L1 fee                        fee=48,103,633\n=== NAME  TestOperatorFee/specific_case_2\n    operator_fee_test.go:285: \n                Error Trace:    /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:285\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:65\n                                                        /Users/changwan/Documents/optimism/devnet-sdk/testing/systest/tb.go:51\n                Error:          Received unexpected error:\n                                execution reverted: arithmetic underflow or overflow\n                Test:           TestOperatorFee/specific_case_2\n=== NAME  TestOperatorFee\n    tx_utils.go:174:            INFO [04-03|20:40:19.045] Cleanup: Returning remaining funds from wallet from=0xe31F96dc3171b9b2Fd8d26Ec84E2a2A2C919Dc73 to=0x87BdCE72c06C21cd96219BD8521bDF1F42C78b5e\n=== NAME  TestOperatorFee/specific_case_2\n    tx_utils.go:177: \n                Error Trace:    /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/tx_utils.go:177\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:261\n                                                        /Users/changwan/.local/share/mise/installs/go/1.22.7/src/runtime/panic.go:626\n                                                        /Users/changwan/.local/share/mise/installs/go/1.22.7/src/testing/testing.go:1005\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:285\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:65\n                                                        /Users/changwan/Documents/optimism/devnet-sdk/testing/systest/tb.go:51\n                Error:          Received unexpected error:\n                                failed to send transaction: insufficient funds for gas * price + value: balance 999999443341792367, tx cost 999999443388896000, overshot 47103633\n                Test:           TestOperatorFee/specific_case_2\n                Messages:       Return fund transaction failed\n=== NAME  TestOperatorFee\n    tx_utils.go:174:            INFO [04-03|20:40:19.053] Cleanup: Returning remaining funds from wallet from=0xe31F96dc3171b9b2Fd8d26Ec84E2a2A2C919Dc73 to=0x87BdCE72c06C21cd96219BD8521bDF1F42C78b5e\n=== NAME  TestOperatorFee/specific_case_2\n    tx_utils.go:177: \n                Error Trace:    /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/tx_utils.go:177\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:200\n                                                        /Users/changwan/.local/share/mise/installs/go/1.22.7/src/runtime/panic.go:626\n                                                        /Users/changwan/.local/share/mise/installs/go/1.22.7/src/testing/testing.go:1005\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/tx_utils.go:177\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:261\n                                                        /Users/changwan/.local/share/mise/installs/go/1.22.7/src/runtime/panic.go:626\n                                                        /Users/changwan/.local/share/mise/installs/go/1.22.7/src/testing/testing.go:1005\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:285\n                                                        /Users/changwan/Documents/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:65\n                                                        /Users/changwan/Documents/optimism/devnet-sdk/testing/systest/tb.go:51\n                Error:          Received unexpected error:\n                                failed to send transaction: insufficient funds for gas * price + value: balance 999999443341792367, tx cost 999999443388896000, overshot 47103633\n                Test:           TestOperatorFee/specific_case_2\n                Messages:       Return fund transaction failed\n=== NAME  TestOperatorFee\n    tx_utils.go:174:            INFO [04-03|20:40:19.058] Cleanup: Returning remaining funds from wallet from=0x589A698b7b7dA0Bec545177D3963A2741105C7C9 to=0xE25583099BA105D9ec0A67f5Ae86D90e50036425\n    multi_client.go:69:         INFO [04-03|20:40:21.564] Running second chain fork detection check\n    multi_client.go:74:         DEBUG[04-03|20:40:21.571] Got L2 end block                         number=921\n=== RUN   TestOperatorFee/specific_case_3\n```", "CLOSED", 0, "pcw109550", "2025-04-03T11:46:56Z", "2025-04-04T16:10:16Z", "2025-04-04T16:09:57Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6w9Gu4", 15193, "Feature Request: Add Block Fingerprinting for External Block Builders", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\n\nWhile implementing external block building for OP networks through tools like Rollup-boost, I've encountered a limitation - there is currently no way for block builders to fingerprint blocks to identify which blocks were built by external builders versus the standard sequencer. This is important for block builders to track performance, diagnose any issues, and verify whether their blocks are successfully being included in the chain.\n\n**Describe the solution you'd like**\n\nAdd functionality to OP chains that would allow external block builders to include some form of identification or signature in the blocks they produce. This would enable builders to verify when their blocks are included in the chain.\n\n**Describe alternatives you've considered**\n\nThe only current alternative is to add a custom transaction at the end of the block, but this creates more issues with gas costs, transaction ordering, and implementation complexity.\n\n**Additional context**\n\nUnlike with L1 chains, the extra data field in OP blocks cannot be used for fingerprinting as it is already fully utilized. This leaves external block builders with no reliable mechanism to identify their contributions to the chain.\n\n(cc @danyalprout, @0xKitsune)", "OPEN", 0, "ferranbt", "2025-04-03T08:56:00Z", "2025-04-03T15:28:06Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6w4OrT", 15183, "Bug report", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "FinanceCarrott90", "2025-04-02T20:56:43Z", "2025-04-02T23:42:17Z", "2025-04-02T23:42:17Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6w4NiH", 15182, "Bug", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "FinanceCarrott90", "2025-04-02T20:54:01Z", "2025-04-02T23:42:09Z", "2025-04-02T23:42:09Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6w2ti_", 15177, "devnet-sdk: split T into devtest.T (test-scope) and devtest.P (pkg level)", "This refactors the setup such that the presets are create in TestMain (so that resources can be shared between tests), and the system is hydrated per test-scope (so on misuse of the system, only that test fails).\n", "CLOSED", 0, "protolambda", "2025-04-02T17:51:40Z", "2025-04-03T12:56:36Z", "2025-04-03T12:56:36Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6w16LD", 15173, "op-node: performance issues during batcher update", "**Bug Description**\n\nWhen batcher's max channel duration is big enough (e.g. 10m), the sequencer would send an avalanche of FCUs/getBlockByNumber on each batcher update (with 10m channel it's ~800 FCUs at once).\n\nAt such moment it can happen that the time between FCU and the ensuing getPayload would be ~2.5s. For a block time of 2s that results in blocks being requested late. \n\n**Steps to Reproduce**\n\nSetup a devnet with Sepolia, saw this issue on Unichain\n\n**Expected behavior**\n\nthe time between FCU and getPayload should be less than 2s or the slot time\n\n**Environment**\nOS: Ubuntu\nversion: [op-node/v1.12.1](https://github.com/ethereum-optimism/optimism/releases/tag/op-node%2Fv1.12.1)\n\n**Additional context**\n\nDuring block building we assume a timeout for how long to keep the payload and have it at 2s + 500ms buffer. This lag was causing the builder to return \"Unknown Payload\" as it has already been discarded.", "OPEN", 0, "avalonche", "2025-04-02T16:09:09Z", "2025-04-02T16:09:51Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6w0P5S", 15168, "op-e2e: add coverage for sending a set code tx pre and post isthmus", "", "CLOSED", 0, "geoknee", "2025-04-02T13:59:34Z", "2025-04-03T09:30:32Z", "2025-04-03T09:30:32Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6wi74P", 15143, "devnet-sdk: Log after test completion", "The logger from the test appears to be being used for the components causing a lot of warnings about logging after the test completes as part of shutdown.  e.g. when running `example_test.go`:\n\n```\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:          \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closing proposer                         \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping Proposer                        \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping Proposer                        \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] loop returning                           \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Proposer stopped                         \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopped RPC server                       \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] L2Output Submitter stopped               \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:          \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closed proposer                          \\x1b[32mid\\x1b[0m=L2Proposer-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:          \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closing proposer                         \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping Proposer                        \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping Proposer                        \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] loop returning                           \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Proposer stopped                         \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopped RPC server                       \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] L2Output Submitter stopped               \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:          \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closed proposer                          \\x1b[32mid\\x1b[0m=L2Proposer-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:           \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closing batcher                          \\x1b[32mid\\x1b[0m=L2Batcher-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping batcher                         \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping Batch Submitter                 \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] blockLoadingLoop returning               \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] publishingLoop returning                 \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] receiptsLoop returning                   \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Batch Submitter stopped                  \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopped RPC server                       \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Batch Submitter stopped                  \\x1b[32mid\\x1b[0m=L2Batcher-main-902 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:           \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closed batcher                           \\x1b[32mid\\x1b[0m=L2Batcher-main-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:           \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closing batcher                          \\x1b[32mid\\x1b[0m=L2Batcher-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping batcher                         \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopping Batch Submitter                 \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] blockLoadingLoop returning               \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] publishingLoop returning                 \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] receiptsLoop returning                   \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Batch Submitter stopped                  \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopped RPC server                       \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:             \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Batch Submitter stopped                  \\x1b[32mid\\x1b[0m=L2Batcher-main-901 \\x1b[32mservice\\x1b[0m=batcher\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:           \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closed batcher                           \\x1b[32mid\\x1b[0m=L2Batcher-main-901\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Closing op-node                          \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] State loop returned                      \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Stopped RPC server                       \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-902\"\nWARN [04-01|11:32:13.295] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.295] Interop sub-system stopped               \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-902\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:                \\x1b[31mERROR\\x1b[0m[04-01|11:32:13.295] RPC subscription failed, restarting now  \\x1b[31mid\\x1b[0m=Supervisor-dev \\x1b[31msyncnode\\x1b[0m=syncnode-902-2 \\x1b[31mendpoint\\x1b[0m=RPCSyncSource(ws://127.0.0.1:65203) \\x1b[31mchain\\x1b[0m=902 \\x1b[31merr\\x1b[0m=\\\"websocket: close 1006 (abnormal closure): unexpected EOF\\\"\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:                \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Node events channel closed, stopping     \\x1b[32mid\\x1b[0m=Supervisor-dev \\x1b[32msyncnode\\x1b[0m=syncnode-902-2 \\x1b[32mendpoint\\x1b[0m=RPCSyncSource(ws://127.0.0.1:65203) \\x1b[32mchain\\x1b[0m=902\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Closed op-node                           \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-902 \\x1b[32merr\\x1b[0m=\\\"1 error occurred:\\\\n\\\\t* error stopping sequencer: context canceled\\\\n\\\\n\\\"\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Closing op-node                          \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-901\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:           \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Sequencer has been stopped               \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-901\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:                \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] stopped sequencer                        \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-901 \\x1b[32mlatestHead\\x1b[0m=000000..000000\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] State loop returned                      \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-901\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Stopped RPC server                       \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-901\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Interop sub-system stopped               \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-901\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:              \\x1b[33mWARN \\x1b[0m[04-01|11:32:13.296] Subscription error                       \\x1b[33mservice\\x1b[0m=op-node \\x1b[33mid\\x1b[0m=L2CLNode-sequencer-901 \\x1b[33merr\\x1b[0m=\\\"read tcp 127.0.0.1:65198->127.0.0.1:65218: use of closed network connection\\\"\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:                \\x1b[31mERROR\\x1b[0m[04-01|11:32:13.296] RPC subscription failed, restarting now  \\x1b[31mid\\x1b[0m=Supervisor-dev \\x1b[31msyncnode\\x1b[0m=syncnode-901-1 \\x1b[31mendpoint\\x1b[0m=RPCSyncSource(ws://127.0.0.1:65198) \\x1b[31mchain\\x1b[0m=901 \\x1b[31merr\\x1b[0m=\\\"websocket: close 1006 (abnormal closure): unexpected EOF\\\"\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:                \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Node events channel closed, stopping     \\x1b[32mid\\x1b[0m=Supervisor-dev \\x1b[32msyncnode\\x1b[0m=syncnode-901-1 \\x1b[32mendpoint\\x1b[0m=RPCSyncSource(ws://127.0.0.1:65198) \\x1b[32mchain\\x1b[0m=901\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:               \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Closed op-node                           \\x1b[32mservice\\x1b[0m=op-node \\x1b[32mid\\x1b[0m=L2CLNode-sequencer-901 \\x1b[32merr\\x1b[0m=<nil>\"\nWARN [04-01|11:32:13.296] testlog: panic during flush              recover=\"Log in goroutine after TestExample1 has completed:                \\x1b[32mINFO \\x1b[0m[04-01|11:32:13.296] Closing op-geth                          \\x1b[32mid\\x1b[0m=L2ELNode-sequencer-902\"\n```", "CLOSED", 0, "ajsutton", "2025-04-01T01:35:13Z", "2025-04-03T12:56:37Z", "2025-04-03T12:56:37Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6wiSWl", 15138, "devnet-sdk: more graceful system reuse in devstack", "When reusing an existing orchestrator, and hydrating a new system frontend in a test, reuse existing components, without reloading or recreating services.\n\nThis applies to both `sysgo` and `syskt`\n\n", "CLOSED", 0, "protolambda", "2025-03-31T23:17:20Z", "2025-04-03T12:56:37Z", "2025-04-03T12:56:37Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6wiRmq", 15137, "devnet-sdk: expand devstack DSL", "See what DSL we want to wrap around the `stack.System`, to present the components to the test with.\n\nThings we want from the DSL:\n- hide `ctx` usage\n- provide useful methods for awaiting blocks / changes\n- built-in error handling\n\nThe DSL wraps around interfaces/IDs of the `stack` package exclusively. The `stack` package is the relatively stable part of the devstack. Do not build against the underlying system backends (`sysgo` / `syskt`).\n\nThe `shim` package implements the `stack`. If something is really missing from the `stack`, it can be added, but please be minimal with changes to the `stack`. Not exposing RPC endpoint strings in it is a very intentional idea.\n\nSee `devnet-sdk/devstack/dsl`", "CLOSED", 0, "protolambda", "2025-03-31T23:14:28Z", "2025-10-01T14:39:07Z", "2025-10-01T14:39:07Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6wfxS8", 15129, "op-supervisor: alternative backend", "This ticket represents adding an alternative backend to `op-supervisor` that dynamically returns its response rather than looking up in its local database. The only supported RPC endpoint at first should be `supervisor_checkAccesslist`, all other RPC endpoints should be unsupported for now. The backend name should be `--backend=dynamic-rpc`, indicating that future backends could be dynamic and based on a light client design.\n\nIt is known that in the worst case, the dynamic rpc backed `supervisor_checkAccesslist` will be very slow. It could result in an almost arbitrary number of RPC requests. It should always return the same result as the db backed call to `supervisor_checkAccessList`\n\nThis gives redundancy at ingress. Giving redundancy for finalization is out of scope of this ticket.\n\nThis ticket also does not include reintroducing `supervisor_checkMessages`. We may want to introduce that endpoint again in the future, specifically for monitoring purposes.", "CLOSED", 0, "tynes", "2025-03-31T17:33:08Z", "2025-04-01T18:04:15Z", "2025-04-01T18:04:13Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6wP0z1", 15108, "standard-bridge: Failed to validate that an OptimismMintableErc20 token belongs to a specific bridge", "`_isCorrectTokenPair` function in the StandardBridge assumes that any bridge in that network is the bridge that has the minter role for that token.\n\nThat incorrect assumption makes it impossible to perform the following bridges:\n1. L2-One (ERC20 Token) -> L1 (OptimismMintableErc20) -> L2-Other\n2. L1 (ERC20 Token) -> L2 (OptimismMintableErc20) -> L3\n\nThe fix is simple, we just have to validate that the bridge that controls mint/burn from the mintable token is the same trying to bridge that token in the [_isOptimismMintableERC20](https://github.com/ethereum-optimism/optimism/blob/0f07717bf06c2278bbccc9c62cad30731beeb322/packages/contracts-bedrock/contracts/universal/StandardBridge.sol#L386-L390) function:\n\n```\n    function _isOptimismMintableERC20(address _token) internal view returns (bool) {\n        return\n            (ERC165Checker.supportsInterface(_token, type(ILegacyMintableERC20).interfaceId) &&\n              address(this) == ILegacyMintableERC20(_token).l2Bridge()) ||\n            (ERC165Checker.supportsInterface(_token, type(IOptimismMintableERC20).interfaceId) &&\n              address(this) == IOptimismMintableERC20(_token).bridge());\n    }\n```\n\nNotice the change:\n\n```\naddress(this) == ILegacyMintableERC20(_token).l2Bridge()\n\naddress(this) == IOptimismMintableERC20(_token).bridge()\n```\n\n\n\n", "OPEN", 0, "mikeki", "2025-03-28T18:54:18Z", "2025-03-31T14:18:33Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6wOnVs", 15103, "interop: op-supervisor panics when L2 CL is stopped and restarted", "At commit [9f480717e640591768939ef4cd97bc010f4e2ff0](https://github.com/ethereum-optimism/optimism/commit/9f480717e640591768939ef4cd97bc010f4e2ff0)(most recent commit), with geth: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:4bc345b22fbee14d3162becd197373a9565b7c6d(almost most recent commit) op supervisor panics in the below scenario:\n\n1. Spawn the kt interop devnet: op supervisor and op-node are in sync\n2. Stop the op-node container (choose any L2 chain)\n3. Restart the op-node container\n4. Supervisor panics and halts\n\nPanic log from supervisor\n```\ncrossUnsafe=\"BlockSeal(hash:0xa31f1109cb960d23358f2ffcddc74e811da35a9a5a19840e6fdcd701d0b339a9, number:100, time:1743179200)\"\npanic: send on closed channel\n\tpanic: close of closed channel\n\ngoroutine 175 [running]:\ngithub.com/ethereum-optimism/optimism/op-service/rpc.SubscribeStream[...].func1()\n\t/app/op-service/rpc/stream.go:122 +0x130\ngithub.com/ethereum/go-ethereum/event.NewSubscription.func1()\n\t/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.3.0.20250327000707-c3a989eb882d/event/subscription.go:53 +0x6c\ncreated by github.com/ethereum/go-ethereum/event.NewSubscription in goroutine 179\n\t/go/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.3.0.20250327000707-c3a989eb882d/event/subscription.go:51 +0xd8\n```\n\n+ when i manually start supervisor again, everything seems to become normal again", "CLOSED", 0, "pcw109550", "2025-03-28T16:27:05Z", "2025-04-04T12:03:12Z", "2025-04-04T12:03:12Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6v_zPv", 15070, "op-supervisor: Handle RPC server errors in metrics", "We added server and client metrics but the server is not handling errors properly.", "CLOSED", 0, "unknown", "2025-03-27T12:07:39Z", "2025-04-01T20:33:10Z", "2025-04-01T20:33:10Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6vp62r", 15026, "devnet-sdk: common system2 setup functions", "The devnet-SDK `system2` `Option` functions from the in-process-Go and kurtosis backends need to be accessible from tests without hardcoding the backend kind.\n\nThe `orchestrator` accessible from `Setup` argument into the `Option` should be used to interact with the backend, to make it do the needed things like acquiring or adding nodes.\n\nThen, once that setup part is complete, we want the test to describe the pre-requisite system in a test by applying a list of `Option`, that that then validate the existing system and/or add things to it.\n\nThe problem we have now is that `systemgo` (in-proces go) and `systemext` (kurtosis) both have some options to build a system, but there are no generic option functions that try to apply the options applicable to the actual backend.\n\nWe want options to be used in two ways:    \n- to validate if the existing system has what is needed (like gate checks we have now)\n- to add new components to a system if missing and possible (especially for in-process Go variant)\n", "CLOSED", 0, "protolambda", "2025-03-25T15:45:56Z", "2025-04-01T11:08:54Z", "2025-04-01T11:08:54Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6vp2ZR", 15025, "op-service/apis: create package that hosts interfaces for all RPC APIs", "Put all interfaces in a common package, for easy reference when building helper functions.\n\nRequirements:\n- Each method takes a `ctx` and returns an `error` as last return param\n- Client bindings should use a go interface type-check to ensure they implement the API.\n- Compose interfaces from smaller interfaces where appropriate, so helper functions can select a smaller subset of functionality. E.g. `L2Client` covers both `EthClient` and additional L2 functionality.\n\n", "CLOSED", 0, "protolambda", "2025-03-25T15:40:12Z", "2025-03-31T09:42:05Z", "2025-03-31T09:42:05Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6vdonU", 15010, "Evaluate Withdrawal Root NAT testing", "We have one test for withdrawal root ([withdrawal_root_test.go](https://github.com/ethereum-optimism/optimism/blob/develop/op-acceptance-tests/tests/isthmus/withdrawal_root_test.go#L1)) already, but creating this ticket to track a process for assessing whether it is sufficient to certify the withdrawal root behavior. Completion of this ticket should go hand in hand with the FMA process for withdrawal root.", "CLOSED", 0, "teddyknox", "2025-03-24T16:17:35Z", "2025-03-31T15:48:22Z", "2025-03-31T15:48:21Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6up9wx", 14944, "Run NAT tests more than once to detect flakiness", "This would be done to avoid flakey tests giving a false positive reading when they sometimes test negative. Could be done in combination with fuzzed transactions to ensure the test behavior is tolerant to independent activity.", "CLOSED", 0, "teddyknox", "2025-03-19T01:58:37Z", "2025-03-31T15:25:25Z", "2025-03-31T15:25:25Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6uIDoI", 14892, "Add proofs action test for #14882 \"validate To field non-nil for setcode txs\"", "#14882 adds an important nil check. There's a unit test, but ideally we also have a proofs action test for cross-proof-client coverage.", "CLOSED", 0, "sebastianst", "2025-03-14T21:46:09Z", "2025-04-01T21:04:33Z", "2025-04-01T21:04:33Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6tCQPu", 14715, "Add missing operator fee params `setL1BlockValuesInterop`", "Seems like the interop params is missing params for operator feee recently added to isthmus\nhttps://github.com/ethereum-optimism/optimism/blob/a33bba2fb32f0ddb350e9b672ac6a7207b607b5e/packages/contracts-bedrock/src/libraries/Encoding.sol#L226-L264\n\nfor now the isthmus and interop functions seem identical, right? if so the interop function is probs redundant and best removed for sake of simplicity", "CLOSED", 0, "emhane", "2025-03-07T13:43:35Z", "2025-03-31T09:34:24Z", "2025-03-31T09:34:24Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6pcesb", 14274, "[Tracking] Network Acceptance Testing", "This issue represents the network acceptance testing implementation work required for the isthmus hardfork. Individual tests should be written for each feature.\n\n- L2 Pectra\n- Operator Fee\n- L2 WIthdrawals Root in Header", "CLOSED", 0, "tynes", "2025-02-10T15:35:26Z", "2025-03-31T15:49:12Z", "2025-03-31T15:48:58Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6nFKQl", 13886, "Consolidation action test with heterogenous interop message types.", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:22:26Z", "2025-04-03T15:22:34Z", "2025-04-03T15:22:33Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6jndLw", 13445, "Bitwise expression simplification", "**Description**:\n\nIt seems signed is just ~mask. These lines can be replaced with:\n\n            uint256 mask = (1 << _idx) - 1;\n            uint256 signed = ~mask;\n[packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol#L595-L596)\n            uint256 signed = ((1 << (arch.WORD_SIZE - _idx)) - 1) << _idx;\n            uint256 mask = (1 << _idx) - 1;", "OPEN", 0, "BlocksOnAChain", "2024-12-17T14:02:47Z", "2025-04-04T15:28:31Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6jnYoW", 13442, "Syscall argument error is silently ignored", "**Description**\nThis alignment is a fair assumption, and probably required for C ABI compliance. But as far as defensive programming goes, it is better to fail if the address is misaligned than to silently align it.\n\n**Recommendation**\nFail if the pointer is misaligned.\n\n[packages/contracts-bedrock/src/cannon/MIPS64.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/MIPS64.sol#L584)\n                    uint64 effAddr = a1 & arch.ADDRESS_MASK;", "OPEN", 0, "BlocksOnAChain", "2024-12-17T13:55:18Z", "2025-04-04T15:28:00Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6jnXaQ", 13441, "Tests for branch in delay slot are incomplete (and not needed)", "**Description**\nThe test if (_cpu.nextPC != _cpu.pc + 4), used to detect if there is a jump in the delay slot, has 2 problems:\n\nWill not detect that there is a jump in the delay slot if the previous instruction was a jump to pc + 8;\nIs not strictly needed, given the assumption that the guest code is trusted (i.e. that it will not try to exploit differences between this and other MIPS implementations to cause the execution to diverge).\\\n\n**Recommendation**:\nRemove the tests.\n\n[packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol#L622)\n            if (_cpu.nextPC != _cpu.pc + 4) {\n[packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol#L809)\n            if (_cpu.nextPC != _cpu.pc + 4) {", "OPEN", 0, "BlocksOnAChain", "2024-12-17T13:53:10Z", "2025-04-04T15:28:26Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6jnWzX", 13440, "Most of OP constants are not used", "**Description**\nOf all these OP constants defined, only OP_LOAD_DOUBLE_LEFT and OP_LOAD_DOUBLE_RIGHT are used, but only in some places. In others, the values 0x1A and 0x1B` are used directly.\n\n**Recommendation**\nAt very least, OP_LOAD_DOUBLE_LEFT and OP_LOAD_DOUBLE_RIGHT should be used whenever possible.\n\nBut ideally, all opcodes should have constants to be used though the code, at least on == comparisons, as it would greatly improve the code readability. Even better if the constant names were the same as in the MIPS documentation, e.g. OP_LDR or OP_LDL.\n\n[packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol#L9-L14)\n    uint32 internal constant OP_LOAD_LINKED = 0x30;\n    uint32 internal constant OP_STORE_CONDITIONAL = 0x38;\n    uint32 internal constant OP_LOAD_LINKED64 = 0x34;\n    uint32 internal constant OP_STORE_CONDITIONAL64 = 0x3C;\n    uint32 internal constant OP_LOAD_DOUBLE_LEFT = 0x1A;\n    uint32 internal constant OP_LOAD_DOUBLE_RIGHT = 0x1B;\n[packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/libraries/MIPS64Instructions.sol#L98)\n            if (_args.opcode == 0x27 || _args.opcode == 0x1A || _args.opcode == 0x1B) {", "OPEN", 0, "BlocksOnAChain", "2024-12-17T13:52:04Z", "2025-04-04T15:28:17Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6jkOws", 13436, "Incorrect structured comments about return value of readMem and readMemUnchecked", "As per Spearbit audit findings:\n\nDescription:\nThe comments at MIPS64Memory.sol:13 and MIPS64Memory.sol:28 both read `@return out_ The hashed MIPS state`.  - while they should read `@return out_ The read memory word`.", "OPEN", 0, "BlocksOnAChain", "2024-12-17T07:55:27Z", "2025-04-04T15:17:43Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6jkNg_", 13435, "Comment says 4 bytes, but it is actually the word size", "As per spearbit audit finding, we have the following finding: \n\n**Description**\nComment says 4 bytes, but it is actually the word size. Also, the comment is bellow the aligning operation.\n\n**Recommendation**\nMove the comment above the aligning, and use \"word size\" instead of \"4 bytes\".\n\n[packages/contracts-bedrock/src/cannon/libraries/MIPS64Syscalls.sol](https://cantina.xyz/code/4ea41142-4359-4f62-bfaa-a542172cab5d/packages/contracts-bedrock/src/cannon/libraries/MIPS64Syscalls.sol#L260)\n                // mask the addr to align it to 4 bytes", "OPEN", 0, "BlocksOnAChain", "2024-12-17T07:52:15Z", "2025-04-04T15:28:08Z", null, "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6jeNn_", 13410, "Document manual monorepo steps associated with a new upgrade (OPCM - Upgrade 13)", "When an upgrade occurs on Sepolia or Mainnet, it is likely that some of the ugprade tests may break, or else will just not accurately represent the actual upgrade process\r\n\r\nFor now this github issue, and comments on it, can be used for now to document any steps. \r\n\r\nKnown items: \r\n1. The base chain may need to be update from Mainnet to Sepolia or vice versa. \r\n2. FORK_BLOCK_NUMBER should be updated in the contract's `justfile`\r\n3. [Daily CI run upgrade tests](https://github.com/ethereum-optimism/optimism/issues/13401) may also need to be updated if the previous steps don't address any failures in them.\r\n4. `upgrade()` methods in the contracts (usually only `SystemConfig` and `OPCM`) will need to be reset to empty.", "CLOSED", 0, "maurelian", "2024-12-16T14:54:04Z", "2025-04-01T13:18:00Z", "2025-04-01T13:17:59Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6iyXSo", 13338, "Interop: cleanup op-node interop setup", "After implementing ManagedMode and StandardMode, we can drop the temporary work-around mode.\n\nBlocked by:\n- #13336 \n- #13337 \n\n`op-node/rollup/interop/config.go`:\n- update `Check` to only allow one mode of operation at a time\n- remove `TemporarySetup` (blocked by implementing Managed & Standard mode)\n\n`op-node/rollup/interop/tmpapi.go`:\n- remove `TemporaryInteropServer`\n- remove `TemporaryInteropAPI`\n\n", "CLOSED", 0, "protolambda", "2024-12-10T20:22:54Z", "2025-03-31T09:45:12Z", "2025-03-31T09:45:11Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6fu39i", 13013, "EVM Engineering: add DeputyPauseModule", "General tracking issue for the work related to adding a `DeputyPauseModule` to the Foundation Safe.\n\nDesign doc: https://github.com/ethereum-optimism/design-docs/pull/162", "CLOSED", 0, "smartcontracts", "2024-11-21T15:15:28Z", "2025-04-02T17:24:45Z", "2025-04-02T17:24:45Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6fXWC5", 12990, "proofs: Write runbook to upgrade from v1.8.0 with L2OO to v1.8.0 with permissioned proofs", "", "CLOSED", 0, "ajsutton", "2024-11-19T22:13:06Z", "2025-04-02T15:31:18Z", "2025-04-02T15:31:18Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6YLuAZ", 12176, "Proofs: FaultDisputeGame Automated Refunds", "# Summary\r\n\r\nImprovements to the `FaultDisputeGame` that will automate bond refunds for invalidated games by default, minimizing the need for the `DelayedWETH` contract.\r\n\r\n# Context\r\n\r\nDealing with `FaultDisputeGame` bonds appropriately is an important part of the current OP Stack incident response process. `FaultDisputeGame` stores player bonds inside of the `DelayedWETH` contract which imposes a 7 day delay on bond withdrawals. During this delay period, the 2/2 Safe managed jointly by the Security Council and the Optimism Foundation can hold bonds from specific games or from all games at the same time. Held bonds are transferred to this 2/2 Safe where they can be manually disbursed to the correct recipients.\r\n\r\n# Problem Statement\r\n\r\nAlthough `DelayedWETH` is an effective tool at preventing a buggy or malicious `FaultDisputeGame` from distributing bonds to a potential attacker, the actual process of returning those bonds back to the correct players is underspecified. Underspecified processes can introduce significant stress\r\nto already stressful situations where executive decisions around fallbacks must be made quickly and confidently. We therefore want to introduce alternative low-stress options for bond recovery.\r\n\r\n# Project Updates\r\n\r\n- [2024-09-27] Draft design document is available [here](https://github.com/ethereum-optimism/design-docs/pull/85).\r\n- [2024-09-27] Draft design document is being actively reviewed.\r\n- [2024-10-28] Design document has been approved and merged.\r\n\r\n# Resources\r\n\r\n- [Design document](https://github.com/ethereum-optimism/design-docs/pull/85)", "CLOSED", 0, "smartcontracts", "2024-09-27T15:27:04Z", "2025-04-02T17:25:23Z", "2025-04-02T17:25:23Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6YLs58", 12175, "Proofs: OptimismPortal Withdrawal Invalidation Mitigation", "# Summary\r\n\r\nProposed changes to the `OptimismPortal` that will improve fallbacks so that user withdrawal proofs are not invalidated by default when a fallback is activated.\r\n\r\n# Context\r\n\r\nThe `OptimismPortal` contract allows users to prove withdrawals by demonstrating that those withdrawals exist inside of the state root of a `FaultDisputeGame` instance. Withdrawals can be\r\nfinalized if the `FaultDisputeGame` instance resolves in favor of the defender, the instance is not blacklisted, and the game has sat around for the air-gap period.\r\n\r\nThe `DisputeGameFactory` can create different implementations of the `DisputeGame` which typically have different code and are identified by an integer \"game type\". The `OptimismPortal` currently defines a variable `respectedGameType` which determines the particular `DisputeGame` code that users can utilize when proving and finalizing withdrawals. The \"fallback\" safety net action is the ability for the Guardian or Deputy Guardian address to change the `respectedGameType` variable to some alternative game type (e.g., the `PermissionedDisputeGame`) in the case that the `FaultDisputeGame` contract is found to be buggy.\r\n\r\n# Problem Statement\r\n\r\nThe fallback action of changing the `respectedGameType` variable updates another variable called `respectedGameTypeUpdatedAt` that keeps track of exactly when the respected game type was changed. Currently, the `OptimismPortal` contract enforces that withdrawals can only be proven or finalized against `DisputeGame` contracts that were created with a timestamp greater than the `respectedGameTypeUpdatedAt` variable. This effectively invalidates any withdrawal proofs that were submitted prior to the activation of the fallback mechanism.\r\n\r\nWithdrawal invalidation is a powerful tool in the incident response playbook as it can mitigate the impact of a large number of invalid dispute games at the same time. However, it also forces users to resubmit their withdrawal proofs and wait an additional 7 days to execute a withdrawal. Users have reported that this invalidation and additional delay period is a pain point. This user impact means that the fallback is highly disruptive as a standard security mechanism.\r\n\r\n# Project Updates\r\n\r\n- [2024-09-27] Draft design document is available [here](https://github.com/ethereum-optimism/design-docs/pull/77).\r\n- [2024-09-27] Draft design document is being actively reviewed.\r\n- [2024-10-28] Design document has been approved and merged.\r\n\r\n# Resources\r\n\r\n- [Design document](https://github.com/ethereum-optimism/design-docs/pull/77)", "CLOSED", 0, "smartcontracts", "2024-09-27T15:24:56Z", "2025-04-02T17:25:23Z", "2025-04-02T17:25:23Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6YLrXh", 12174, "Proofs: Basic DelayedWETH Capability Expansion", "# Summary\r\n\r\nSlightly expands the response capabilities within `DelayedWETH` to minimize the number of actions needed to quickly respond and the blast radius of these responses.\r\n\r\n# Context\r\n\r\nThe `DelayedWETH` contract acts as a holding contract for the bonded ETH submitted by any participant in a `DisputeGame` contract. As of the Granite upgrade, each implementation of the `DisputeGame` uses its own `DelayedWETH` contract. Each `DelayedWETH` contract is `Ownable` and is subject to a number of safety net actions by the owner address (holding balances from specific addresses or removing all ETH held in the `DelayedWETH` contract). `DelayedWETH` is additionally subject to the Superchain-wide pause mechanism within the `SuperchainConfig`. Bonds cannot be retrieved by game participants if the Superchain pause is active.\r\n\r\n# Problem Statement\r\n\r\nExisting security mechanisms within the `DelayedWETH` contract are inconvenient and slow down the incident response process. Specifically:\r\n\r\n- The `DelayedWETH.hold(address target)` function creates an approval from the target address to the owner address. Since the target can simply remove this approval, hold MUST be triggered alongside a `transferFrom` in the same transaction. This adds unnecessary complexity to something that could simply be a single transaction.\r\n- The various security mechanisms inside of `DelayedWETH` can only be triggered by the System Owner which has a slow SLA. The Deputy Guardian can act to trigger the Superchain-wide pause, but this is highly disruptive to the entire Superchain ecosystem.\r\n\r\nAdditionally, it should be noted that all ETH inside a `DelayedWETH` contract is pooled together regardless of which games are using the contract. We currently mitigate this by using one `DelayedWETH` contract per game type, but this expands the number of contracts that the System Owner and Guardian roles must manage by at least 2 per additional chain. However, the modifications required to appropriately address this issue are sufficiently extensive that they are considered out of scope for this proposal.\r\n\r\n# Project Updates\r\n\r\n- [2024-09-27] Draft design document is available [here](https://github.com/ethereum-optimism/design-docs/pull/80).\r\n- [2024-09-27] Draft design document is being actively reviewed.\r\n- [2024-10-28] Design document has been approved and merged.\r\n\r\n# Resources\r\n\r\n- [Design document](https://github.com/ethereum-optimism/design-docs/pull/80)", "CLOSED", 0, "smartcontracts", "2024-09-27T15:21:27Z", "2025-04-02T17:25:22Z", "2025-04-02T17:25:22Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6YLpc4", 12173, "Proofs: AnchorStateRegistry Poisoning Protection", "# Summary\r\n\r\nImprovements to the `AnchorStateRegistry` contract that will prevent it from becoming \"poisoned\" with an invalid state.\r\n\r\n# Context\r\nThe `FaultDisputeGame` contract is responsible for managing the process of disputing a fault in the computation of a state transition function. The `FaultDisputeGame` runs the state transition function from some starting state that is known to be valid. We refer to this starting state as the \"anchor state\". In the context of the OP Stack, the anchor state will originally either be the genesis state or the state of the system at some finalized L2 block height that is considered to be correct by social consensus.\r\n\r\n`FaultDisputeGame` contracts pull the current anchor state from the `AnchorStateRegistry` contract. As the system runs, the anchor state is continuously updated to reflect the latest finalized state as viewed by the proof system at any given time. `FaultDisputeGame` instances that resolve in favor of the defender will trigger the `AnchorStateRegistry` to update the anchor state to the newly finalized state.\r\n\r\n# Problem Statement\r\n\r\nThe AnchorStateRegistry can become \"poisoned\" because the ultimate view of state validity currently actually lives inside of the OptimismPortal contract. An anchor state is considered \"poisoned\" if the OptimismPortal contract has blacklisted the dispute game that caused that anchor state to be recognized by the AnchorStateRegistry. Any new FaultDisputeGame contracts that load in this anchor state will operate over a starting state that the OptimismPortal considers to be invalid and will therefore also be considered invalid.\r\n\r\nAlthough a basic mitigation was added in the Granite upgrade that made it possible to reset the anchor state to some different (valid) state, the fundamental problem still remains that poisoned FaultDisputeGame contracts may continue to resolve and further poison the anchor state registry. In this cascading case, the only real solution at the moment is to switch to a new game type as each game type has its own anchor state mapping and therefore is not impacted by any poisoned anchor states in other game types.\r\n\r\nOur problem statement here is therefore that we wish to be able to prevent or mitigate anchor state poisoning more effectively so that we can reduce the surface for issues within the fault proof system as a whole.\r\n\r\n# Project Updates\r\n\r\n- [2024-09-27] Draft design document is available [here](https://github.com/ethereum-optimism/design-docs/pull/76).\r\n- [2024-09-27] Draft design document is being actively reviewed.\r\n- [2024-10-28] Design document has been approved and merged.\r\n\r\n# Resources\r\n\r\n- [Design document](https://github.com/ethereum-optimism/design-docs/pull/76)", "CLOSED", 0, "smartcontracts", "2024-09-27T15:17:06Z", "2025-04-02T17:25:22Z", "2025-04-02T17:25:22Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDODjvEJM6UmjIm", 11663, "MTCannon: Perform static analysis of compiled op-program", "## Description\r\nWe should look into statically analyzing the [op-program compiled for MIPS](https://github.com/ethereum-optimism/optimism/blob/02d5832349a1f469adb00191459333e2032b09b4/op-program/Makefile#L29).  Specifically, it would be helpful to investigate what syscalls and opcodes are actually included (and reachable) in the compiled program.  The goal is to gain confidence that the MIPS VM is fully able to support op-program.  Ideally, we could add some checks to CI to flag any breaking changes in the compiled op-program.\r\n\r\n**Notes**\r\n- @Inphi has done some investigation along these lines previously, and ran into issues where some go packages perform runtime checks on the architecture to determine what syscalls to make.  This means there may be irrelevant syscalls targeting other architectures that are never actually used in the context of MIPS. \r\n- Look into [gocyto](https://github.com/protolambda/gocyto), which may be useful for analysis\r\n\r\n", "CLOSED", 0, "mbaxter", "2024-07-10T19:23:43Z", "2025-04-04T15:13:04Z", "2025-04-04T15:13:04Z", "ethereum-optimism/optimism", "2025-08-31 03:25:10"]
["I_kwDOKSJyfM6xsAXF", 738, "Rename SuperchainWETH to SuperchainETHBridge", "", "CLOSED", 0, "tremarkley", "2025-04-08T22:51:07Z", "2025-04-10T17:37:03Z", "2025-04-10T17:37:03Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6xsAM2", 737, "Remove WETH and IERC7802 extensions from SuperchainWETH contract", "", "CLOSED", 0, "tremarkley", "2025-04-08T22:50:26Z", "2025-04-10T09:40:58Z", "2025-04-10T09:40:58Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6xgofT", 732, "The README links for @eth-optimism/viem are broken when viewed on npmjs.com", "The README for @eth-optimism/viem has links that 404 when viewed on the npmjs website: \nhttps://www.npmjs.com/package/@eth-optimism/viem. This is happening because they are relative links and we need to properly configure the package to point to the correct link: https://stackoverflow.com/questions/62575382/relative-link-from-readme-md-to-another-file-in-package-rendered-in-npmjs\n", "CLOSED", 0, "tremarkley", "2025-04-07T22:20:22Z", "2025-04-07T23:50:36Z", "2025-04-07T23:50:36Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6xOwrv", 726, "Update access list creation on `buildExecutingMessage` to include lookup entry", "", "CLOSED", 0, "tremarkley", "2025-04-04T21:57:24Z", "2025-04-07T20:16:46Z", "2025-04-07T20:16:46Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6xOwNk", 725, "Update supersim relayer to construct access list when relaying l2tol2cdm messages", "", "CLOSED", 0, "tremarkley", "2025-04-04T21:55:45Z", "2025-04-07T21:01:51Z", "2025-04-07T21:01:51Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6w3yhR", 723, "Implement tooltip badge component", "", "CLOSED", 0, "jvmi7", "2025-04-02T19:59:01Z", "2025-04-07T19:50:54Z", "2025-04-07T19:50:54Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6w3xDX", 722, "Implement design updates to UI", "- update primary brand color to red\n- swap out accordion with modal\n- implement mobile designs\n- review leaderboard styles and implement top ranked user in the side nav", "CLOSED", 0, "jvmi7", "2025-04-02T19:56:04Z", "2025-04-07T19:47:38Z", "2025-04-07T19:47:38Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6wfn0K", 713, "Add SuperchainETHBridge to specs", "", "CLOSED", 0, "tremarkley", "2025-03-31T17:13:31Z", "2025-04-09T20:33:27Z", "2025-04-09T20:33:27Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6ve77B", 705, "promise library design doc", "closed by https://github.com/ethereum-optimism/design-docs/pull/216\n", "OPEN", 0, "hamdiallam", "2025-03-24T18:27:24Z", "2025-04-07T11:35:13Z", null, "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6ve7gG", 704, "submarine send design doc", "https://github.com/ethereum-optimism/design-docs/pull/226", "CLOSED", 0, "hamdiallam", "2025-03-24T18:26:34Z", "2025-04-07T11:29:55Z", "2025-03-24T18:26:56Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6veKb4", 702, "open source ponder interop indexer", "", "CLOSED", 0, "hamdiallam", "2025-03-24T17:08:31Z", "2025-04-07T11:07:58Z", "2025-04-07T11:07:58Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6veJKs", 701, "Share package dependencies in ecosystem repo", "", "CLOSED", 0, "hamdiallam", "2025-03-24T17:06:23Z", "2025-04-07T11:07:56Z", "2025-04-07T11:07:56Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6veI7j", 700, "Promise Callback Library", "", "CLOSED", 0, "hamdiallam", "2025-03-24T17:05:59Z", "2025-04-07T11:31:44Z", "2025-04-07T11:31:42Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKSJyfM6uyNmG", 693, "Crossdomain Submarine Sends", "**Is your feature request related to a problem? Please describe.**\nThe L2ToL2CrossDomainMessenger outbox is a public mempool for destination transactions. This can be troublesome for DeFi applications\n\n**Describe the solution you'd like**\nProvide a way to privately send messages cross chain with a commit-reveal structure.", "CLOSED", 0, "hamdiallam", "2025-03-19T16:16:51Z", "2025-04-07T11:30:25Z", "2025-04-07T11:30:23Z", "ethereum-optimism/ecosystem", "2025-08-31 03:26:17"]
["I_kwDOKIwiaM6kxTTW", 1208, "Clarify differences between 2 challenger roles", "The address `0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A` for Challenger on [Contract page for mainnet](https://docs.optimism.io/chain/addresses) is actually [System Config Owner](https://docs.optimism.io/chain/security/privileged-roles#system-config-owner) address.\n\nThe EOA which is resolving games is [0xd22d93fe3341b7f5837ce83b57169c10f06ff0e0](https://etherscan.io/address/0xd22d93fe3341b7f5837ce83b57169c10f06ff0e0).", "CLOSED", 0, "Maar-io", "2024-12-31T13:37:12Z", "2025-04-10T22:54:42Z", "2025-04-10T22:54:41Z", "ethereum-optimism/docs", "2025-08-31 03:26:19"]
["I_kwDOKIwiaM6kBFPj", 1188, "Update \"Chain Differences\" page with post-holocene info", "## Brief Description of the Docs Request\nOn the \"Differences between Ethereum and OP Stack Chains\" update the \"EIP-1559\" [section](https://docs.optimism.io/stack/differences#eip-1559-parameters) with post holocene info.\n\n## Description of the Documentation You'd Like\nPost Holocene hardfork anyone can look up a chain's EIP-1559 parameters on the L1 via that chain's SystemConfig contract.\n\n\n## Additional Context\n\n\n\n <!-- Pylon-Issue-ID:02f02d2a-9aeb-4ab1-a21c-b16e66cc4392 -->", "OPEN", 0, "ZakAyesh", "2024-12-20T01:42:07Z", "2025-04-11T16:26:41Z", null, "ethereum-optimism/docs", "2025-08-31 03:26:19"]
["I_kwDOH2Qg5s6pDFH8", 496, "txpool: provide back-pressure on invalid interop transactions", "After invalidating a tx, stop the source from producing more invalid transactions, with some form of back-pressure.\n\n\n", "CLOSED", 0, "protolambda", "2025-02-06T17:24:34Z", "2025-04-09T18:36:58Z", "2025-04-09T18:36:57Z", "ethereum-optimism/op-geth", "2025-08-31 03:26:19"]
["I_kwDOI7W0xc6yMhqv", 1577, "OFT Token Breakdowns", "Tokens, check with product team on identifying them\n\n1. Using SuperchainDVN\n2. In Superchain, but using some non-SuperchainDVN", "OPEN", 0, "chuxinh", "2025-04-11T20:00:49Z", "2025-04-11T20:00:49Z", null, "ethereum-optimism/op-analytics", "2025-08-31 03:26:20"]
["I_kwDOI7W0xc6xOG2c", 1553, "Build tracking for interop TVL and AOP", "", "CLOSED", 0, "chuxinh", "2025-04-04T20:06:45Z", "2025-04-11T19:57:43Z", "2025-04-11T19:57:43Z", "ethereum-optimism/op-analytics", "2025-08-31 03:26:20"]
["I_kwDOLB-lzc6xMQNH", 655, "Add rollup config data to SystemConfig", "## Background\n\nCurrently, critical rollup configuration values (`block_time`, `seq_window_size`, `max_sequencer_drift`) are only committed on-chain within the opaque absolute prestate hash. \n\nThis issue is the result of a request made by @lucadonnoh. \n\nThis makes these values difficult to access and verify onchain.\n\n## Proposal\n\nMake the RollupConfig parameters directly available on-chain through the SystemConfig contract, rather than only existing in the prestate hash. \n\nThis would:\n\n1. Improve transparency of critical chain parameters\n2. Enable on-chain verification of these values\n3. Support future proof systems by allowing the RollupConfig to be used as a local input to the Fault Proof Program (FPP)\n\n## Scope\n\n### Parameters to expose:\n- `block_time`\n- `seq_window_size` \n- `max_sequencer_drift`\n\n### Key Considerations\n- These values would remain static (not dynamically updatable) in this implementation\n- The values would still be committed in the prestate hash for backward compatibility\n- This approach aligns with existing implementations like op-succinct, which stores a hash of the serialized rollup config on L1\n\n## Non-Goals\n- Making these parameters dynamically updateable (would require significant additional complexity)\n- Removing these values from the prestate hash\n- Changes to L1 info transactions\n\n## Open Questions\n- Should we include any additional parameters beyond the three identified?\n- What's the best way to verify these values match the prestate hash during deployment?", "OPEN", 0, "maurelian", "2025-04-04T15:46:06Z", "2025-04-07T13:23:24Z", null, "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWoxu", 547, "feat(interop-proof): `INVALID` state transition rules", "## Overview\n\nA new behavior to the interop proof's claim validity checking is the concept of transitioning to `keccak256(\"invalid\")` if the L1 head is reached (i.e., the data source was exhaused,) during derivation. Previously, we'd fall into legacy trace extension behavior.\n\nThis should be specified under the fault-proof specific section of the interop proof spec.", "CLOSED", 0, "clabby", "2025-01-23T19:22:39Z", "2025-04-08T02:46:01Z", "2025-04-08T02:46:00Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWoLK", 546, "feat(interop-proof): Padding rules", "## Overview\n\nThe interop proof's `TransitionState` supports \"padding transitions,\" where no new pending output roots are computed, just the `step` gets incremented.\n\nThis is net-new behavior in the fault proof, where previously we'd fall into legacy trace extension behavior. This should be specified within the fault-proof specific sections of the interop proof spec.", "CLOSED", 0, "clabby", "2025-01-23T19:21:11Z", "2025-04-08T02:45:47Z", "2025-04-08T02:45:45Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWkox", 545, "feat(interop-proof): Specify proving an addition to the dependency set", "## Overview\n\nTo add a new chain to the dependency set, the proof has to jump through a few extra hoops due to the lack of a known prestate for the chain that is being added. This process will need to be specified in order to be supported by each implementation of the proof.", "CLOSED", 0, "clabby", "2025-01-23T19:13:09Z", "2025-04-08T02:50:36Z", "2025-04-08T02:50:36Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWjTa", 543, "feat(interop-proof): Specify sub-problem API", "## Overview\n\nThe interop proof introduces a sub-problem API, splitting up the Superchain STF into two parts:\n\n![Image](https://github.com/user-attachments/assets/1e7df3e6-3feb-4ed4-8129-cb837c106a5e)\n\nThis is a bit of an implementation detail, but for the sake of specifying the fault proof, it's worth describing.", "CLOSED", 0, "clabby", "2025-01-23T19:09:54Z", "2025-04-08T02:46:10Z", "2025-04-08T02:46:10Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWiMT", 542, "feat(interop-proof): Specify honest challenger modifications", "## Overview\n\nIn response to the dispute game updates made in #541, the honest challenger will need to adjust its behavior to play the dispute game correctly. We need to specify the changes to the honest challenger behavior that are required to participate effectively within the modified dispute game.", "CLOSED", 0, "clabby", "2025-01-23T19:07:07Z", "2025-04-08T02:48:38Z", "2025-04-08T02:48:38Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWgpC", 541, "feat(interop-proof): Specify dispute game modifications", "## Overview\n\nThe dispute game is being modified as a part of the interop proof to allow for uploading a new local preimage kind, renaming some variables, and removing the L2 block number challenge. These changes need to be specified in order to inform the updates to the `op-challenger`.", "CLOSED", 0, "clabby", "2025-01-23T19:04:06Z", "2025-04-08T02:49:18Z", "2025-04-08T02:49:17Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWgMQ", 540, "feat(interop-proof): Specify `TransitionState` encoding", "## Overview\n\nIn the interop fault proof, the `TransitionState` is a structure used to accumulate pending progress in the flattened super root state transition:\n\n![Image](https://github.com/user-attachments/assets/9d57aef0-e792-44bc-b29d-f78bd12ee903)\n\nThis structure is implemented in both `kona` and `op-program` already:\n* `kona`: https://github.com/op-rs/kona/blob/a59f643d0627320efff49f40f4803741ae9194f1/crates/proof-sdk/proof-interop/src/pre_state.rs#L118-L129\n* `op-program`: https://github.com/ethereum-optimism/optimism/blob/47c00f9975d2455d52263c0e54d52eb4b483b288/op-program/client/interop/types/roots.go#L21\n\nWe should specify the encoding format of this structure, as it is used by the challenger during the top-level of the interop dispute.", "CLOSED", 0, "clabby", "2025-01-23T19:03:05Z", "2025-04-08T02:45:26Z", "2025-04-08T02:45:24Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOLB-lzc6nWfR6", 539, "tracking: Interop Proofs Specification", "## Overview\n\nThis ticket serves as a meta tracker for the specification of the interop proof.\n\nSome good high-level material on the initial design is available @:\n* https://hackmd.io/@clabby/byf1flivje\n* https://drive.google.com/file/d/1Yp4fB7y7wG6jXD5g2MhM7mm4C0ZS1NDT/view?usp=sharing", "CLOSED", 0, "clabby", "2025-01-23T19:00:48Z", "2025-04-08T17:26:32Z", "2025-04-08T17:26:32Z", "ethereum-optimism/specs", "2025-08-31 03:26:34"]
["I_kwDOJ_r-bs6m51h0", 857, "display fault proof status for chains", "When we planned the Superchain Registry initially, we didn't expect chains to spend an extended period of time on permissioned FPs: We thought everyone would get quickly to permissionless FPs (and Stage 1). But as more chains spend a longer time with permissioned FPs, we need a way to call out the distinction (and the Superchain Index wants this info as well). \n\nWe should detect and display whether chains are on:\n\n* Permissionless FPs\n* Permissioned FPs \n* No FPs (still using the L2OO) \n\nAnd display this in the chainList.json/toml files.", "CLOSED", 0, "tessr", "2025-01-20T19:51:32Z", "2025-04-10T15:22:58Z", "2025-04-10T15:22:58Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:26:38"]
["I_kwDOKIsnqM6yKam4", 870, "Improvements with location Hashes + change \"overview\" to \"summary\"", "During the new tasks for the DPM, I had some interesting feedbacks from @geoknee by pairing with him. \n \n1.  The term for \"Overview\" in single is deprecated to \"Summary\" for tenderly.\n2. Domain Hash + MessageHash: We should put after simulation since the signers need to execute this command to generate the hash.\n", "OPEN", 0, "Ethnical", "2025-04-11T16:00:35Z", "2025-04-11T16:00:35Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 03:27:01"]
["I_kwDOKIsnqM6q1f-h", 637, "Check test coverage", "Ensure we have good test coverage of key invariants and behaviors parts of the codebase. For example, we should assert that that the `accountAccesses` returned by `simulateRun are equivalent to those returned by `executeRun` (with the exception of potential differences resulting from e.g. state overrides): https://github.com/ethereum-optimism/superchain-ops/pull/622#discussion_r1961790069", "OPEN", 0, "mds1", "2025-02-20T13:22:20Z", "2025-04-07T19:49:49Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 03:27:01"]
["I_kwDOKIsnqM6Yuefi", 338, "Tenderly <> Forge equivalence checking", "This issue contains two parts:\n- [ ] Part 1: Make sure the domain hash and message hash output by forge matches the one from Tenderly. This is described and tracked in https://github.com/ethereum-optimism/superchain-ops/issues/195#issuecomment-2380240561\n- [ ] Part 2: Make sure the full state diff from forge matches the one from Tenderly. Similar to #195, we'd want to use the Tenderly API here. We can extend this to also compare the state diff listed in the validations file", "OPEN", 0, "mds1", "2024-10-02T18:02:45Z", "2025-04-10T12:39:21Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 03:27:01"]
["I_kwDODjvEJM6yLV7q", 15366, "devnet-sdk: devstack: sysgo start/stop use all orchestrator contexts", "Fix devnet-sdk devstack sysgo to use all package wide contexts when starting/stopping components. Details here: https://github.com/ethereum-optimism/optimism/pull/15310#discussion_r2039717379", "OPEN", 0, "pcw109550", "2025-04-11T17:38:33Z", "2025-04-11T17:38:33Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6x9uJI", 15341, "interop: op-proposer edge case when supervisor returns empty L1 view", "Current interop op-proposer consumes multiple supervisor endpoints, queries the supervisors via `supervisor_syncStatus` and gather block views of each nodes connected by supervisor.\n\n`supervisor_syncStatus` non-error response may include empty `MinSyncedL1` or (`status.MinSyncedL1 == (eth.L1BlockRef{})`) and this is not properly error handled.\n\nPatch op-proposer/proposer/source/source_supervisor.go to fix this.", "CLOSED", 0, "pcw109550", "2025-04-10T13:41:28Z", "2025-04-11T17:36:51Z", "2025-04-11T17:36:51Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6xm5dv", 15293, "Unskip `TestNewDeployAsteriscScript`", "              Let's make an issue to track unskipping and reference it here in a TODO.\r\n\r\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/optimism/pull/15292#discussion_r2033166902_\r\n            ", "CLOSED", 0, "geoknee", "2025-04-08T13:13:54Z", "2025-04-08T16:21:28Z", "2025-04-08T16:21:28Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6xhe0v", 15284, "[Tracking] Messenger Re-emit Initiating Message to be Expiry Proof", "Due to the cost of proving older history, there is a max age of an initiating message. To get around this limitation, it is possible to create a smart contract that lets you poke it to re-emit the initiating message. For this to be secure, its important that there is replay protection on the destination chain.\n\nWe would like to add this functionality to the `L2ToL2CrossDomainMessenger` so that if there is any issue with funds being locked due to the liveness of cross chain messages going down, we do not need to race to bring everything back online again before the expiry window elapses.", "CLOSED", 0, "tynes", "2025-04-08T01:17:46Z", "2025-04-10T18:01:07Z", "2025-04-10T18:01:06Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6xc7Bi", 15273, "`make reproducible-prestate` affected by untracked files", "`make reproducible-prestate` gives a different result if there are untracked files in the repo. It's expected that this would happen if there are custom rollup configs in `op-program/chainconfig/`, but it also happens with other files, e.g. in `op-service` which should not happen.", "OPEN", 0, "pauldowman", "2025-04-07T14:55:54Z", "2025-04-10T12:54:56Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6xX1BD", 15259, "Acccedence; Syllogistic Logic; Concretely SAI-15", "Dear,\n\nWouldn't it be better to implement Cryptography that defies regulations? Since I finished the concept and there are 2 choices between approving Cryptography only or 100% converting your Crypto into Syamailcoin? Will SAI-15 be a priority for Developers to run this? Let's look at it mathematically and this is Reference (https://syamailcointheogwhitepaper.tiiny.site) SAI-15 Key Generation and Encryption Framework\ndef generate_key(self):\n    return secrets.token_bytes(399)\n\ndef encrypt(self, plaintext, key):\n    if len(key) != 399:\n        raise ValueError(\"Key must be exactly 399 bytes\")\n    ciphertext = bytearray()\n    for i, byte in enumerate(plaintext):\n        key_byte = key[i % 399]\n        ciphertext.append(byte ^ key_byte)\n    return bytes(ciphertext)\n\n// Message Schedule and Compression for SAI-15\n// Initialization with 399-byte key\nK = secrets.token_bytes(399)  // 399-byte cryptographic key\nP = bytearray(plaintext)      // Input plaintext as byte array\nR = 64                       // Number of rounds (configurable)\n\n// Processing Steps\nFor i from 0 to R-1:\n    // XOR-based transformation with key\n    S[i] = P[i] \u2295 K[i % 399]\n    // Apply Byzantine Fault Tolerance check (BFT)\n    if BFT_check(S[i], i):\n        S[i] = rotate_left(S[i], i % 8) + i\n    // Sustainable Vault capacity adjustment via PKI\n    S[i] = (S[i] * PKI_factor(i)) % 256\n    // Final state update\n    H[i] = S[i] + (H[i-1] if i > 0 else 0)\n\n// Final 399-byte hash calculation\nH_SAI = bytes(H)\n\n// Mathematical Representation\nHSAI[i] = (P[i] \u2295 K[i % 399]) * PKI_factor(i) + rotate_left(S[i], i % 8) + i\nWhere:\n- P[i]: Plaintext byte at position i\n- K[i % 399]: Key byte cycled through 399 bytes\n- PKI_factor(i): Public Key Infrastructure scaling factor (dynamic based on position)\n- rotate_left(x, n): Left rotation of x by n bits\n- i: Position in the sequence (0 to R-1)\n\nAnd How does this work? First of all you can buy Entropy Pool and Cipher (QSC01) physical product QSC01 for create Heterodyning 144 kHz slow down to 22 kHz and implement Heterodyning to the Place of Communication either outside the blockchain or the underlying process of your coin. From EYL inc and Quside Company.\n\nProof of Fraction is that the Participant must look for the Cubic Fraction from the smallest which is 0.0002231668236 to 1 as much as 50x and given a time of 14.47 Minutes or 868.2 seconds as long as the Circulating Supply touches 9,470,000 to 4,735,001 and when the Supply touches 4,735,000 the time will be divided by 12, 72.35 seconds the time given and when the Supply touches 1,280,000 the time will be divided by 1.96,  36.91326530612244898 seconds time is given and when Supply touches 185.000, 18.83329862557267805 seconds is given.\n\nHydra Sustainable Vault? It is a system to create a Drained Qubit in such a way that Anyone who has a certain number of Syamailcoin can fly it with Hydra up to 941 transit point and 941 it is the return of your Syamailcoin from the transited Node, How do we get started? First you have to create a Hydra system on the Blockchain or Digital, Two you can validate checksum with SLH-DSA, Three You provide a vault for them and the time given is 14.47 Minutes Hydra Sustainable Vault flies Syamailcoin.\n\nIf you don't agree yet, I hope this concept applies to the Crypto you put forward, Open Discussions and Criticism already.\n\n[NIST.FIPS.205.ipd.pdf](https://github.com/user-attachments/files/19469254/NIST.FIPS.205.ipd.pdf)\n\n[2502.20510v2.pdf](https://github.com/user-attachments/files/19469265/2502.20510v2.pdf)\n\n![Image](https://github.com/user-attachments/assets/82a880c5-7e53-47aa-bd4e-9224e03d17e3)\n\nThe third image is the formula for the Underlying which should be listed on the running math of both coding and blockchain before being verified, I can't give all but hope it helps.\n\n![Image](https://github.com/user-attachments/assets/590461e4-4a73-4d55-ad6c-4156b00d6a81)\n\n\nFirst I thank you and I'm not good at drawing Hydra, it's just a question and it's just a question, Why don't we change the Blockchain System to Hydra? How does this can work? Come here.\n\nNo Offense; Blockchain is where one person or group in one address can send transactions to the next party without bank intermediaries and double spending, in Hydra when Alice sends 1 Million coins to Bob = The Hydra system running 14.47% Threshold of Maximum Nodes A.K.A 941 Nodes, 136,627 or 136 Nodes before Checksum with SAI-15 (Hydra so different than Hydra Sustainable Vault) and what the proof of math?. C=\u03a3 F_I ^x\u00b3 / (x\u00b2 + 15)\nr/n when r it's rally on threshold < 14.47% and n it's nitrous on SAI-15.\n\nWhen we can start? We have to create a Hydra System first and then the second is that we test the checksum verification with SAI-15. In Hydra Visualization we can see the transaction already flies and done, if rate on threshold < 14.47%  Actived answer SUI transaction does not run temporarily until it reaches nitrous. So this is fair.\n\nAnalogy to Hydra and Proof of Fraction\n\nIf we relate this to Proof of Fraction in Hydra, then:\n\n1. M-P | M-S | S-P \u2192 Could represent stages in nitrous on SAI-15.\n\nM (Middle Term) \u2192 T+941 on going.\n\nP (Predicate) \u2192 Validation outcome (Threshold and Math Criteria).\n\nS (Subject) \u2192 Transaction in process.\n\nThus, transaction validation can be explained using syllogistic structure!\n\n\n\n2. A-I-I, E-A-O, I-A-I.\n\nCould represent different possible transaction results, depending on the fraction calculated in the PoF system.\n\nExample:\n\nA-I-I: All transactions meet a certain proof of fraction \u2192 Some transactions are validated.\n\nE-A-O: No transactions meet the proof of fraction \u2192 All transactions are rejected.\n\nI-A-I: Some transactions meet the proof of fraction \u2192 Some transactions are accepted.\n\nA-I-I: All Threshold Adjust the criteria 14.47%  \u2192 Done to checksum validation\n\nE-A-O: If you are still at the rally on threshold \u2192 Transaction could not be completed.\n\nI-A-I: Sender complete the validation process before it gets to the Receiver \u2192 Your Hydra it's completed.\n\nFinal Result: Alice prepares a certain amount of funds to send to Bob \u2192 Hydra System Perform checksum validation \u2192 If r (transaction could not be completed) / If n (transaction has been done) \u2192 Complete. \n\nIf sending from the Proof of Fraction Consensus Mechanism is not from the Investment or Wallet results, then after checksum validation \u2192 Acccedence approves 0,0002231668236 Successful Participants up to 1 (Acccedence it's like The dynamics of change from time to time with limited real time).", "CLOSED", 0, "Dan9470000", "2025-04-07T06:53:00Z", "2025-04-07T16:04:14Z", "2025-04-07T16:04:14Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6xK7wm", 15244, "op-deployer: support multiple superchain deployments", "To cover test-cases where we consolidate two chains with different config, we need the following changes to the op-deployer intent:\n- superchains should be named\n- interop-clusters should be named\n- L2 chains should reference their specific superchain and interop-set\n- Allow more than one superchain to be specified in the intent. An L2 chain could ideally reference a superchain by name, and we can omit the superchain from the intent if it's a known name in the registry, e.g. mainnet superchain.\n- Allow more than one interop cluster to be specified in the intent. Same story as superchain, but for smaller sets of chains, on the bleeding edge of interop.\n\nThe intent-builder then more truly describes the range of possible systems, and we can hydrate a test system with the appropriate non-hardcoded superchains / interop-sets.\n\nThe goal is to allow a `sysgo.DeployerOption` to add superchains/clusters/L2 chains as needed, and for the applied-intent and state-output to be expressive enough such that non-hardcoded superchains/clusters can be created in a test.\n", "OPEN", 0, "protolambda", "2025-04-04T13:45:35Z", "2025-10-01T14:39:20Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6xCRjs", 15223, "[Interop Portal] [Tracking] Interop support in the OptimismPortal", "To search for and keep track of this issue's subtasks, use the following short name: `Interop Portal`\n", "OPEN", 0, "smartcontracts", "2025-04-03T16:43:46Z", "2025-04-11T02:25:10Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6w2JCL", 15175, "[Tracker] Interop: Production Infrastructure Architecture", "This collection of tasks needs to be handled before we can have realistic expectations to run a public/production network.\n\n# Why is this Important\nOptimism's Native Interop is based on the ability to avoid including Invalid Interop Messages. *In Practical Terms*, a Sequencer with a functioning Supervisor will be able to determine if Interop Messages are `Cross Unsafe` with a high degree of accuracy.  However, it is not 100% accurate, because cross unsafe data is inherently *unsafe* -- It is an optimistic extension of the chain, but could be proven false if the remote chain reorgs.\n\nBut *In Practical Terms*, what is the likelihood of the remote chain experiencing a reorg? Unsafe reorgs on OP Stack Chains are extremely uncommon currently, with only *one* such event happening on OP Mainnet since Bedrock.\n\nWith Interop based block-invalidation, there is a new opportunity for reorgs on chains - block builders who built their unsafe chain from an invalid message can either fruitlessly extend the invalid chain and pay to publish the batch on the L1 so it can be properly replaced. OR, they may choose instead to drop the stalling unsafe chain aggressively.\n\nThere is a vicious cycle here -- the way for Supervisor Checks to fail is for there to be reorgs. And the way for there to be reorgs is for Supervisor Checks to fail. This suggests that under *normal operation* of a superchain, no invalid messages are ever added to blocks. However, *when* an invalid message is added to a block, it opens the door for more invalid messages to get into the pipeline.\n\nThere are going to be emergent behaviors in superchain stability that we should be prepared to respond to with things like Admin APIs and Leadership Transfers. If a recurrence of invalid messages continually affects the block builders ability to advance the chain, we need the tools to stop interop processing to allow networks to resume normal operation. After normal operation resumes, reintroducing Interop Messages functionality would be safe again.\n\nWe need to start getting experience in these kinds of outcomes by using Kurtosis based Devnets plus large scale Network Automation like the NAT framework being developed. In the meantime, we have a number of practical component behaviors that we want to implement which we *believe* will allow for better network response by block builders and the transaction pipeline.\n\n# Documents and their Action Items\n\n[Topology and Tx Flow for Interop chain Operation](https://github.com/ethereum-optimism/design-docs/pull/218/files)\n\n- [ ] `proxyd` to call `checkAccessList` for Transactions with Interop Access Lists\n- [ ] Make Mempool Igress `checkAccessList` Filter configurable (off for sequencers)\n- [ ] Remove block-builder `checkInterop` call\n- [ ] Introduce recurring `checkInterop` batch call in Mempool\n\n[Transaction Handling FMA](https://github.com/ethereum-optimism/design-docs/pull/249)\n\n- [ ] `proxyd` will need a rate-limit feature to avoid overloading the Supervisor\n  - This is because `proxyd` doesn't have an up to date balance view of the sender\n  - the rate limit can be given heuristics to still allow trustable traffic through\n\n[OP Supervisor FMA](https://github.com/ethereum-optimism/design-docs/pull/233/files)\n\n- [ ] Alternative Validation Implementation (Epic]\n- [ ] Higher Quality Testing (Managed in other Work Streams)\n- [ ] Batcher to limit publishing range to Cross-Unsafe\n- [ ] Sequencer to watch for Cross-Unsafe stalls to reorg\n- [ ] Admin API to disable Interop inclusion during incidents\n- [ ] Conductor to use Supervisor Liveness as potential Leadership Transfer trigger\n- [ ] Implement Standard Mode\n- [ ] Standard Mode should accept multiple Supervisors for comparison\n\n", "OPEN", 0, "axelKingsley", "2025-04-02T16:37:19Z", "2025-04-10T12:37:57Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6wij7o", 15141, "devnet-sdk: Ensure orchestrator runs Cleanup if test panics", "From https://github.com/ethereum-optimism/optimism/pull/15133#discussion_r2021905629\n\nWe should ensure that cleanup functions run correctly if `m.Run()` panics. Currently they are skipped if a test panics.", "CLOSED", 0, "ajsutton", "2025-04-01T00:23:11Z", "2025-04-08T16:48:57Z", "2025-04-08T16:48:56Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6wRxA7", 15117, "Add a semgrep rule to ban immutable variables", "We'd like to add a semgrep rule that bans immutable variables in source contracts. Banning immutables will prevent new contracts from being created that don't play well with multi-chain deployment. Contracts always can selectively disable this rule if it's really needed. \n\nPlease exclude any contracts that fail this rule, we'll then later take on the work of updating the contracts to conform to the rule.", "CLOSED", 0, "smartcontracts", "2025-03-28T22:59:01Z", "2025-04-08T19:50:39Z", "2025-04-08T19:50:39Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6wOsfg", 15104, "interop: op-supervisor's supervisor_syncStatus gives nil value when restarted", "At commit [9f480717e640591768939ef4cd97bc010f4e2ff0](https://github.com/ethereum-optimism/optimism/commit/9f480717e640591768939ef4cd97bc010f4e2ff0)(most recent commit), with geth: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:4bc345b22fbee14d3162becd197373a9565b7c6d(almost most recent commit), when supervisor was stopped and restarted, when we immediately ask the supervisor to serve `supervisor_syncStatus` RPC, it returns\n\n```\n{\n  \"minSyncedL1\": {\n    \"hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"number\": 0,\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"timestamp\": 0\n  },\n  \"safeTimestamp\": 0,\n  \"finalizedTimestamp\": 0,\n  \"chains\": {\n    \"2151908\": {\n      \"localUnsafe\": {\n        \"hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"number\": 0,\n        \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"timestamp\": 0\n      },\n      \"safe\": {\n        \"hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"number\": 0\n      },\n      \"finalized\": {\n        \"hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"number\": 0\n      }\n    },\n    \"2151909\": {\n      \"localUnsafe\": {\n        \"hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"number\": 0,\n        \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"timestamp\": 0\n      },\n      \"safe\": {\n        \"hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"number\": 0\n      },\n      \"finalized\": {\n        \"hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"number\": 0\n      }\n    }\n  }\n}\n```\n\nMaybe the desired behavior is not return this and error the resposne.\n", "CLOSED", 0, "pcw109550", "2025-03-28T16:35:04Z", "2025-04-11T14:59:18Z", "2025-04-11T14:59:17Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6wAru-", 15072, "op-e2e: Migrate Isthmus fork action tests to proofs tests", "The tests in https://github.com/ethereum-optimism/optimism/blob/develop/op-e2e/actions/upgrades/isthmus_fork_test.go should be converted into actions/proof tests so we get additional coverage of the FPs.", "CLOSED", 0, "sebastianst", "2025-03-27T13:19:58Z", "2025-04-10T09:49:12Z", "2025-04-10T09:49:12Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6v5c0K", 15059, "devnet-sdk: change systemgo to use op-deployer instead of interopgen", "op-deployer intents can programmatically be used to run the deployment, and should be used by systemgo.\n\n`interopgen` is an artifact from e2e interop testing before op-deployer was stable, and should be removed.\n\nWith op-deployer, previous forks before interop can also be supported at the same time.\nFor interop, make sure to set the `useInterop` config value.\n\n", "CLOSED", 0, "protolambda", "2025-03-27T00:43:08Z", "2025-04-08T13:46:50Z", "2025-04-08T13:46:50Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6vULad", 14999, "[core-utils] TS Error in fromHexString due to Buffer | string union type", "# \ud83d\udc1b TypeError in `fromHexString` due to `Buffer | string` union\n\n## \ud83d\udce6 Package\n\n- [`@eth-optimism/core-utils`](https://github.com/ethereum-optimism/optimism/tree/tutorials/chain/packages/core-utils)\n\n## \ud83d\udcc1 File\n\n- `packages/core-utils/src/common/hex-strings.ts`\n\n## \ud83e\udde0 Problem\n\nThe `fromHexString` function currently accepts an input of type `Buffer | string` and forwards it directly to `Buffer.from(...)`. This causes a TypeScript compilation error in strict or recent TS environments:\n\n```ts\nexport const fromHexString = (inp: Buffer | string): Buffer => {\n  if (typeof inp === 'string' && inp.startsWith('0x')) {\n    return Buffer.from(inp.slice(2), 'hex')\n  }\n\n  return Buffer.from(inp)\n}\n```\n\n### \u274c Error\n\n```\nTS2769: No overload matches this call.\nArgument of type 'string | Buffer' is not assignable to parameter of type 'WithImplicitCoercion<string>'.\n```\n\nThe `Buffer.from(...)` overloads expect a **single input type**, not a union, and TypeScript cannot safely infer the correct branch.\n\n---\n\n## \u2705 Suggested Fix\n\nUpdate the function to explicitly check for the `Buffer` type before calling `Buffer.from(...)`:\n\n```ts\nexport const fromHexString = (inp: Buffer | string): Buffer => {\n  if (Buffer.isBuffer(inp)) {\n    return inp\n  }\n\n  if (typeof inp === 'string' && inp.startsWith('0x')) {\n    return Buffer.from(inp.slice(2), 'hex')\n  }\n\n  return Buffer.from(inp)\n}\n```\n\nThis is fully backwards compatible, improves type safety, and fixes the compilation error.\n\n---\n\n## \ud83e\uddea Environment\n\n| Tool         | Version     |\n|--------------|-------------|\n| Node.js      | 20.x        |\n| TypeScript   | 5.8.x       |\n| pnpm         | 10.x        |\n\n---\n\n## \ud83d\ude4c Willing to Contribute\n\nHappy to open a PR with this fix if helpful. Let me know!", "CLOSED", 0, "0xChaddB", "2025-03-23T16:29:07Z", "2025-04-10T12:57:54Z", "2025-04-10T12:57:53Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6uzYs7", 14952, "[U17] Complete Implementation", "This ticket represents the burndown for interop", "OPEN", 0, "mslipper", "2025-03-19T18:06:39Z", "2025-04-10T12:59:00Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6unM5p", 14931, "op-e2e/actions: Revisit Isthmus action proofs tests to run intermediary blocks", "Almost all our action proofs tests only run `env.RunFaultProofProgram` at the end of the test, for the latest safe head. This makes sense if the interesting state transitions and derivations happen in the last blocks. But if there are intermediary steps where interesting assertions are made, it should be run at those steps too, because `env.RunFaultProofProgram` only runs the FPP over a single block transition.", "CLOSED", 0, "sebastianst", "2025-03-18T18:37:33Z", "2025-04-08T13:51:22Z", "2025-04-08T13:51:22Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6udT-x", 14919, "interop: Determine database growth over time", "To accurately price the `ExecutingMessages`, we need to know the database growth size of the `op-supervisor`. We should be able to have a formula that approximately estimates how large the database is given a number of chains, the expiry window size and gas limit. \n\nThis ticket is considered complete when there is dashboard that shows the database growth of the supervisor running on a live devnet", "CLOSED", 0, "tynes", "2025-03-18T02:46:31Z", "2025-04-09T14:42:29Z", "2025-04-09T14:42:28Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6uVuow", 14904, "interop: check tx access-list in op-reth ingress", "Use the supervisor_checkAccessList RPC to verify interop transactions that pass go into the op-reth tx-pool, ideally typed/tracked such that they do not require re-verification in the block-building.\n\n", "CLOSED", 0, "protolambda", "2025-03-17T12:38:38Z", "2025-04-10T18:22:01Z", "2025-04-10T18:21:59Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6uOA0k", 14895, "Fail to sync after brute system reboot?", "So thats the log after Ive rebooted Ubuntu system before stopping the running Docker containers\n\nIs corrupted data as a result is a problem here?\n\n`node-1       | t=2025-03-16T09:29:29+0000 lvl=warn msg=\"Dropping past span batch\" origin=0x4966d08af38fac9e2d7cf7d5f49a317e2c1c2a72cd2d53fbbe8cfc58345ac9de:22035835 epoch=0x33db0b1bbeae55992da309619ba92950fe14f46b35fa11a5e0797d56b0e5df9d:22035818 batch_type=SpanBatch batch_timestamp=1741843351 parent_check=0x9aeaeb5a66c7061998d05ce916dace30f0a0b8be origin_check=0xfb8ecbdae2b6200c73b1b40f08c3a2ac4fd8329f start_epoch_number=22035816 end_epoch_number=22035817 block_count=4 txs=0\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=info msg=\"Advancing bq origin\" origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836 originBehind=false\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=info msg=\"created new channel\" stage=channel origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=info msg=\"decoded span batch from channel\" batch_type=SpanBatch batch_timestamp=1741843359 parent_check=0x959428962a65f731d9dc5c21321747e71e0fea1d origin_check=0x33db0b1bbeae55992da309619ba92950fe14f46b start_epoch_number=22035817 end_epoch_number=22035818 block_count=4 txs=0 compression_algo=brotli stage_origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=warn msg=\"span batch has no new blocks after safe head\" origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836 epoch=0x33db0b1bbeae55992da309619ba92950fe14f46b35fa11a5e0797d56b0e5df9d:22035818 batch_type=SpanBatch batch_timestamp=1741843359 parent_check=0x959428962a65f731d9dc5c21321747e71e0fea1d origin_check=0x33db0b1bbeae55992da309619ba92950fe14f46b start_epoch_number=22035817 end_epoch_number=22035818 block_count=4 txs=0\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=warn msg=\"Dropping past span batch\" origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836 epoch=0x33db0b1bbeae55992da309619ba92950fe14f46b35fa11a5e0797d56b0e5df9d:22035818 batch_type=SpanBatch batch_timestamp=1741843359 parent_check=0x959428962a65f731d9dc5c21321747e71e0fea1d origin_check=0x33db0b1bbeae55992da309619ba92950fe14f46b start_epoch_number=22035817 end_epoch_number=22035818 block_count=4 txs=0\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=info msg=\"decoded span batch from channel\" batch_type=SpanBatch batch_timestamp=1741843367 parent_check=0xfc8a81efec71eaf8c7756edc931333949e8c8847 origin_check=0x33db0b1bbeae55992da309619ba92950fe14f46b start_epoch_number=22035818 end_epoch_number=22035818 block_count=4 txs=0 compression_algo=brotli stage_origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=info msg=\"Found next valid span batch\" origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836 epoch=0x33db0b1bbeae55992da309619ba92950fe14f46b35fa11a5e0797d56b0e5df9d:22035818 batch_type=SpanBatch batch_timestamp=1741843367 parent_check=0xfc8a81efec71eaf8c7756edc931333949e8c8847 origin_check=0x33db0b1bbeae55992da309619ba92950fe14f46b start_epoch_number=22035818 end_epoch_number=22035818 block_count=4 txs=0\nnode-1       | t=2025-03-16T09:29:29+0000 lvl=info msg=\"generated attributes in payload queue\" txs=424 timestamp=1741843373\nnode-1       | t=2025-03-16T09:29:31+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAkvLBTPqfA9HHXgnLUQiEJg7EKPb7gu7qMXfJFS79Goy3b\nnode-1       | t=2025-03-16T09:29:31+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAkwSnpTCP4f1ttHa2hKgiwZaa8TFJYWHtNNhYbqKwaYMRu\nnode-1       | t=2025-03-16T09:29:31+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm54DWw6X4WYRNJbFjowjijH3cXM1fMBJtFFHAqSPT1KCX\nnode-1       | t=2025-03-16T09:29:31+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm31LCBALXkJfNGmK1tVkgzQDw9QQoNcFznzBBCYUPUhAD\nnode-1       | t=2025-03-16T09:29:31+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x76550ebef3723b3e190ed9f68d177b9ae9333dd558c4fd5c0d1d63ac8f3b071c:27664012 peer=16Uiu2HAmFXVDgEmZwWUfPkSCmybFwhKNtXD8a5jVR8eyF7TnB2pB txs=152\nnode-1       | t=2025-03-16T09:29:33+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x432fa434d8bebcb0caae28857cb811ffdb2d011c8a683bb55257857d29c62ea1:27664013 peer=16Uiu2HAmD4rsroJjmuYtc8tcrzP6sUtXoPGPWq6fSMLcauS9vE1T txs=174\nnode-1       | t=2025-03-16T09:29:35+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x647fd554986b78fb882b5ea07613ada2c82c075295f57122465a52524859c8cd:27664014 peer=16Uiu2HAmFXVDgEmZwWUfPkSCmybFwhKNtXD8a5jVR8eyF7TnB2pB txs=144\nnode-1       | t=2025-03-16T09:29:36+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm54DWw6X4WYRNJbFjowjijH3cXM1fMBJtFFHAqSPT1KCX\nnode-1       | t=2025-03-16T09:29:36+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm31LCBALXkJfNGmK1tVkgzQDw9QQoNcFznzBBCYUPUhAD\nnode-1       | t=2025-03-16T09:29:36+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAkwSnpTCP4f1ttHa2hKgiwZaa8TFJYWHtNNhYbqKwaYMRu\nnode-1       | t=2025-03-16T09:29:36+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAkvLBTPqfA9HHXgnLUQiEJg7EKPb7gu7qMXfJFS79Goy3b\nnode-1       | t=2025-03-16T09:29:37+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xd280cd5a5b5ffde2c5eff230cbc4afe5c631ab656bfcf858f1338d2e9478808c:27664015 peer=16Uiu2HAmCkejF9EEk3CKmAa1UfD7QLdPNf3jxSLmqpVorirvoQ54 txs=132\nexecution-1  | INFO [03-16|09:29:37.718] Looking for peers                        peercount=1 tried=141 static=0\nnode-1       | t=2025-03-16T09:29:37+0000 lvl=info msg=\"connected to peer\" peer=16Uiu2HAm2WNiLBb8nerb6V4VZ95nsA2KNf3b8T963X5yGBFZQ5Yn addr=/ip4/221.250.255.182/tcp/38070\nnode-1       | t=2025-03-16T09:29:37+0000 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAm2WNiLBb8nerb6V4VZ95nsA2KNf3b8T963X5yGBFZQ5Yn\nnode-1       | t=2025-03-16T09:29:38+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAm2WNiLBb8nerb6V4VZ95nsA2KNf3b8T963X5yGBFZQ5Yn addr=/ip4/221.250.255.182/tcp/38070\nexecution-1  | INFO [03-16|09:29:39.146] Starting work on payload                 id=0x034fd02070d57b51\nexecution-1  | WARN [03-16|09:29:39.181] Ignoring already known beacon payload    number=27,527,013 hash=8fd572..ce1566 age=3d4h6m\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0xcb91bd47ac07759b3b5032d4e71f666ef7f1bea75f2c434e4b7c64af35c22085:27664016 peer=16Uiu2HAmFXVDgEmZwWUfPkSCmybFwhKNtXD8a5jVR8eyF7TnB2pB txs=189\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Inserted new L2 unsafe block\" hash=0x8fd5729626c78696d783a500362b5718ce2f6566c7e2eefcb69882b568ce1566 number=27527013 state_root=0x06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 timestamp=1741843373 parent=0x2477f567ff7c0436c323aeb6c9a076fd0ee29edb5c842bcc8eada06af59fb614 prev_randao=0x92043b6da12bbb4189a66e9d890414764dd1a9e6f81dea1d365a611fc0a7063f fee_recipient=0x4200000000000000000000000000000000000011 txs=424 build_time=9.428s insert_time=95.680ms total_time=9.524s mgas=110.990756 mgasps=11.653459536957696\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"decoded span batch from channel\" batch_type=SpanBatch batch_timestamp=1741843375 parent_check=0x8fd5729626c78696d783a500362b5718ce2f6566 origin_check=0xa472f173991ce7b401b0cc0e4444668e27049f99 start_epoch_number=22035818 end_epoch_number=22035819 block_count=4 txs=0 compression_algo=brotli stage_origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Found next valid span batch\" origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836 epoch=0x33db0b1bbeae55992da309619ba92950fe14f46b35fa11a5e0797d56b0e5df9d:22035818 batch_type=SpanBatch batch_timestamp=1741843375 parent_check=0x8fd5729626c78696d783a500362b5718ce2f6566 origin_check=0xa472f173991ce7b401b0cc0e4444668e27049f99 start_epoch_number=22035818 end_epoch_number=22035819 block_count=4 txs=0\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"generated attributes in payload queue\" txs=358 timestamp=1741843375\nexecution-1  | ERROR[03-16|09:29:39.542] Failed to create sealing context         err=\"missing trie node 06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 (path ) state 0x06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 is not available, not found\"\nexecution-1  | ERROR[03-16|09:29:39.542] Failed to build payload                  err=\"missing trie node 06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 (path ) state 0x06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 is not available, not found\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=warn msg=\"Failed to share forkchoice-updated signal\" state=\"&{HeadBlockHash:0x8fd5729626c78696d783a500362b5718ce2f6566c7e2eefcb69882b568ce1566 SafeBlockHash:0x8fd5729626c78696d783a500362b5718ce2f6566c7e2eefcb69882b568ce1566 FinalizedBlockHash:0x2477f567ff7c0436c323aeb6c9a076fd0ee29edb5c842bcc8eada06af59fb614}\" err=\"Invalid payload attributes\"\nexecution-1  | WARN [03-16|09:29:39.542] Served engine_forkchoiceUpdatedV3        reqid=320 duration=89.001319ms err=\"Invalid payload attributes\" errdata=\"{\\\"err\\\":\\\"missing trie node 06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 (path ) state 0x06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 is not available, not found\\\"}\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=warn msg=\"could not process payload attributes\" err=\"payload attributes are not valid, cannot build block: Invalid payload attributes\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=warn msg=\"Holocene active, requesting deposits-only attributes\" parent=0x8fd5729626c78696d783a500362b5718ce2f6566c7e2eefcb69882b568ce1566:27527013 derived_from=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=warn msg=\"Deriving deposits-only attributes\" origin=0x9ee089f7fe90e3ecba079c8937af7225a2e5f1dc9e6e9f3ced2872d69ddcfdae:22035836\nexecution-1  | ERROR[03-16|09:29:39.620] Failed to create sealing context         err=\"missing trie node 06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 (path ) state 0x06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 is not available, not found\"\nexecution-1  | ERROR[03-16|09:29:39.620] Failed to build payload                  err=\"missing trie node 06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 (path ) state 0x06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 is not available, not found\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=warn msg=\"Failed to share forkchoice-updated signal\" state=\"&{HeadBlockHash:0x8fd5729626c78696d783a500362b5718ce2f6566c7e2eefcb69882b568ce1566 SafeBlockHash:0x8fd5729626c78696d783a500362b5718ce2f6566c7e2eefcb69882b568ce1566 FinalizedBlockHash:0x2477f567ff7c0436c323aeb6c9a076fd0ee29edb5c842bcc8eada06af59fb614}\" err=\"Invalid payload attributes\"\nexecution-1  | WARN [03-16|09:29:39.620] Served engine_forkchoiceUpdatedV3        reqid=321 duration=77.44678ms  err=\"Invalid payload attributes\" errdata=\"{\\\"err\\\":\\\"missing trie node 06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 (path ) state 0x06174ccb73543e5870175db1bbfae0dbaa36c77a6227ef61406fee89e16b2404 is not available, not found\\\"}\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=warn msg=\"could not process payload attributes\" err=\"payload attributes are not valid, cannot build block: Invalid payload attributes\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=error msg=\"deposit only block was invalid\" parent=0x8fd5729626c78696d783a500362b5718ce2f6566c7e2eefcb69882b568ce1566:27527013 err=\"payload attributes are not valid, cannot build block: Invalid payload attributes\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=error msg=\"Critical error\" err=\"failed to process block with only deposit transactions: payload attributes are not valid, cannot build block: Invalid payload attributes\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x76550ebef3723b3e190ed9f68d177b9ae9333dd558c4fd5c0d1d63ac8f3b071c:27664012\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x432fa434d8bebcb0caae28857cb811ffdb2d011c8a683bb55257857d29c62ea1:27664013\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0x647fd554986b78fb882b5ea07613ada2c82c075295f57122465a52524859c8cd:27664014\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xd280cd5a5b5ffde2c5eff230cbc4afe5c631ab656bfcf858f1338d2e9478808c:27664015\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"Optimistically queueing unsafe L2 execution payload\" id=0xcb91bd47ac07759b3b5032d4e71f666ef7f1bea75f2c434e4b7c64af35c22085:27664016\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"stopped listening network address\" addr=/ip4/0.0.0.0/tcp/9222\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAm3qwgs4Bvfx1GJ5qnY4LjPbYCc394kvdjpxuJBsP3SQnW addr=/ip4/184.72.129.189/tcp/9222\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmD4rsroJjmuYtc8tcrzP6sUtXoPGPWq6fSMLcauS9vE1T addr=/ip4/64.31.28.70/tcp/9222\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAm5pvRqPH4fhW16VjCFCC1FqVXEdLJaYWLJxBkovS6qMUN addr=/ip4/65.108.138.187/tcp/30101\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAm4wN4epAyuj82ix2QC1Uc2vQd833szwvsNpLqhubPz8xa addr=/ip4/3.231.138.188/tcp/9222\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAm2EY1i3fBAFCCrDYuHZuXwvnNxRmryxEiLxbuDD4nRFDR addr=/ip4/15.204.100.197/tcp/9222\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmE5LMd4FFtXTH8iCiFmNJhaPziSqxpqpyEh1z45uv7Z1N addr=/ip4/88.198.48.87/tcp/9222\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmFXVDgEmZwWUfPkSCmybFwhKNtXD8a5jVR8eyF7TnB2pB addr=/ip4/142.132.213.242/tcp/9252\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmCkejF9EEk3CKmAa1UfD7QLdPNf3jxSLmqpVorirvoQ54 addr=/ip4/64.130.57.39/tcp/9222\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"stopped P2P req-resp L2 block sync client\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"State loop returned\"\nnode-1       | t=2025-03-16T09:29:39+0000 lvl=info msg=\"stopped peer discovery\"\nnode-1 exited with code 0`", "CLOSED", 0, "EthanBlockson", "2025-03-16T09:38:41Z", "2025-04-10T13:02:06Z", "2025-04-10T13:02:04Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6tsKe_", 14811, "devnet-sdk: decouple clients from chain and stick to nodes", "Chain can have multiple (eth)clients because there can be multiple nodes. ", "CLOSED", 0, "pcw109550", "2025-03-12T13:44:25Z", "2025-04-07T11:21:42Z", "2025-04-07T11:21:41Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6tU2mz", 14757, "retrieve chain's L1 contract addresses onchain", "We should be able to retrieve all of a chain's L1 contract addresses as long as we know the following two addresses:\n* L1StandardBridge\n* SystemConfig\n\nWe need to write a tool that will retrieve all other contact addresses via onchain queries.\n\n## References\n* [google doc](https://docs.google.com/document/d/1MRaORxicdCl2RC4cuN2WirAwYQD7uhbAwKHOy4iLB7I/edit?tab=t.0#heading=h.5y614p3uozzp)\n* [related issue](https://github.com/ethereum-optimism/superchain-registry/issues/604)", "CLOSED", 0, "bitwiseguy", "2025-03-10T17:11:05Z", "2025-04-10T15:22:57Z", "2025-04-10T15:22:57Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6tRq1S", 14749, "`make help` couldn't work", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nRunning `make help` gives me following result\n\n![Image](https://github.com/user-attachments/assets/68fb0cf4-1ec4-4c2b-a92d-5a5aeba78b46)\n\n\nI will fix this later in #14748", "CLOSED", 0, "cocoyeal", "2025-03-10T12:20:26Z", "2025-04-10T13:03:35Z", "2025-04-10T13:03:35Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6sugdN", 14650, "isthmus: OPCM and op-deployer support for Operator Fee", "Follow up to https://github.com/ethereum-optimism/optimism/pull/12166", "CLOSED", 0, "sebastianst", "2025-03-05T16:55:51Z", "2025-04-10T12:53:57Z", "2025-04-10T12:53:57Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6qXKhz", 14397, "The \"CHECK-OPCM-140\" and \"CHECK-OPCM-150\" error codes in ChainAssertions.sol are duplicated.", "**Bug Description**\nThe \"CHECK-OPCM-140\" and \"CHECK-OPCM-150\" error codes in ChainAssertions.sol are duplicated.\n\n**Steps to Reproduce**\nJust [check the code](https://github.com/ethereum-optimism/optimism/blob/42acc178b262b4cdcc75f9b3f4f63941c65bcb8a/packages/contracts-bedrock/scripts/deploy/ChainAssertions.sol#L510).\n\n**Expected behavior**\nUnique error codes.\n\n**Environment Information:**\n - Operating System: MacOS Sequoia 15.3\n - Package Version (or commit hash): packages/contracts-bedrock [42acc17](https://github.com/ethereum-optimism/optimism/commit/42acc178b262b4cdcc75f9b3f4f63941c65bcb8a)\n\n**Logs:**\n```\nFailing tests:\nEncountered 1 failing test in test/L1/DummyRegistry.t.sol:DummyRegistry_Init_Test\n[FAIL: revert: CHECK-OPCM-140] setUp() (gas: 0)\n\nEncountered a total of 1 failing tests, 0 tests succeeded\n```", "CLOSED", 0, "alcueca", "2025-02-17T15:42:11Z", "2025-04-11T16:41:06Z", "2025-04-10T22:31:50Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6qHiow", 14376, "interop: system test with roundtrip messaging between L2 blocks", "L2 blocks with a round-trip message (executing message from A to B, but also B to A) in the same block are difficult to verify without locking. This behavior is handled in the supervisor, but the batcher still needs to submit batches to create local-safe data without waiting for this cross-safety.\n\nSo using local-safe as batcher, instead of cross-safe, makes sense, to prevent this situation.\n\nA test that builds such roundtrip tx then covers the above interop-specific edge-case after the https://github.com/ethereum-optimism/optimism/pull/14265 change.\n\n", "CLOSED", 0, "protolambda", "2025-02-14T15:57:07Z", "2025-04-10T12:41:41Z", "2025-04-10T12:41:40Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6pDUSw", 14230, "interop: op-supervisor sync tests", "The op-supervisor needs sync-tests:\n- start with a chain that exists already, and either an empty starting state or a half-way synced state.\n- run the op-supervisor\n- check sync result: need to complete syncing of the full chain\n- maybe meter / check sync speed\n\n\n", "CLOSED", 0, "protolambda", "2025-02-06T17:56:33Z", "2025-04-10T12:26:17Z", "2025-04-10T12:26:15Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6ov2Jv", 14145, "Add OptimismPortal2, FaultDisputeGame, PermissionedDisputeGame, and AnchorStateRegistry back to code freeze after audit fixes", "Like the tile says, we are removing these contracts from code freeze to make audit fixes. We will add them back when audit fixes are complete.", "CLOSED", 0, "smartcontracts", "2025-02-04T19:28:18Z", "2025-04-08T20:28:06Z", "2025-04-08T20:28:06Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6oLaRa", 14073, "Audit (Upgrade 12)", "", "CLOSED", 0, "maurelian", "2025-01-30T18:43:32Z", "2025-04-09T19:06:43Z", "2025-04-09T19:06:43Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6nWc1L", 13948, "Interop Release \ud83d\ude80", "### High level description of project.\n\nInterop is targeting the release of Interop to Mainnet by Q3'2025.  This item is currently being tracked [in the Interop Roadmap Tracker](https://www.notion.so/oplabs/17ef153ee162804e96b9c2cb3fb61721?v=b79f07ca14b44e12a6391e8308d2e2ae&p=17ef153ee16280b48408e26e6fc71226&pm=s&pvs=31).  More detail will be added as we get closer to the release date but please feel free to reach out with any questions.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "OPEN", 0, "op-aaron", "2025-01-23T18:55:22Z", "2025-04-10T12:59:12Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6nVX01", 13942, "Infra work to setup op-{challenger,dispute-mon} for superchain networks", "As part of the interop proofs work, we need to spend some time on creating all the infra support for Infra that will allow us to setup op-{challenger,dispute-mon} for superchain networks.\n", "CLOSED", 0, "BlocksOnAChain", "2025-01-23T16:40:54Z", "2025-04-10T21:45:39Z", "2025-04-10T21:45:38Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6nFNEB", 13918, "SPIKE: op-program: Determine the maximum age of initiating messages that we can safely handle in fault proofs", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:33:40Z", "2025-04-08T02:44:08Z", "2025-04-08T02:44:08Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6nFMNR", 13910, "SPIKE: Identify migration path to shared DisputeGameFactory", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:30:24Z", "2025-04-08T18:14:41Z", "2025-04-08T18:14:40Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6mL5Pd", 13761, "Create a Runbook for configuring Drippie", "", "CLOSED", 0, "ControlCplusControlV", "2025-01-14T19:36:26Z", "2025-04-09T19:51:54Z", "2025-04-09T19:51:54Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6lTqBD", 13614, "interop: Test Timeout Flakes", "Interop tests sometimes timeout, leading to CI failures:\n\nhttps://app.circleci.com/pipelines/github/ethereum-optimism/optimism/76501/workflows/a6a3f679-70b7-4704-8cc8-a4b7d72f1f2f/jobs/3096989/parallel-runs/0/steps/0-104\n\nThe rarity of this failure was roughly estimated at ~2%, meaning this happens very infrequently. But when it does, it costs our CI infrastructure 10 minutes, which can delay merges to the queue.\n\nLikely, the issue is that the Supervisor doesn't gracefully shut down in all cases, a routine or hanging channel could fail to close if the right race conditions are met.", "CLOSED", 0, "axelKingsley", "2025-01-07T17:34:55Z", "2025-04-10T11:13:48Z", "2025-04-10T11:13:47Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6i3M6b", 13353, "Frequent Delays and Unrecoverable State in Archive Node for Base Network", "### Describe the bug\n\n_[Also reported in reth](https://github.com/paradigmxyz/reth/issues/13290)_\n\nWe are running a Base archive node using reth and op-node. The node frequently encounters delays and never recovers, requiring a manual restart approximately once an hour. This impacts our ability to maintain a reliable archive node.\n\nWe have a script that checks the block s timestamp against and throws alerts when the node is delayed\n\n![Image](https://github.com/user-attachments/assets/25bcc7aa-13fa-48b9-9a9f-377752cb3768)\n![Image](https://github.com/user-attachments/assets/5164e840-9f27-4f9d-a28b-22c0a279ba7e)\n![Image](https://github.com/user-attachments/assets/90f7bcfc-952f-43e4-99a3-43b69d8b8581)\n![Image](https://github.com/user-attachments/assets/0451a95d-a889-4cac-9a59-65f000c9ad0d)\n![Image](https://github.com/user-attachments/assets/bcbad957-6ebe-4a2e-96eb-ebeadc069a04)\n\n**Hardware Specs:**\nProcessor: AMD EPYC\u2122 9454P - 48 core\nHDD :  3x SAMSUNG MZQL27T6HBLA-00A07 \n256 GB RAM: 8x SAMSUNG M321R4GA3BB6-CQKET\n\n**Environment Details**\n- Reth Version: ghcr.io/paradigmxyz/op-reth:v1.1.0\n- Op-node Version: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.9.1\n- Docker: Using docker-compose for service orchestration\n- Host OS: Ubuntu 24.04.1 LTS\n\n### Steps to reproduce\n\n1. Run the services using the provided docker-compose.yml configuration.\n\n**Docker compose:**\n```\nversion: '3.9'\n\nservices:\n  reth:\n    user: root\n    image: my/reth:v1.0.8\n    ports:\n      - '8545:8545' \n      - '8546:8546' \n    volumes:\n      - /opt/reth/data:/root/.local/share/reth/mainnet/\n      - /opt/reth/jwttoken:/root/jwt:ro\n    command: >\n      node\n      --authrpc.addr 0.0.0.0\n      --authrpc.port 8551\n      --authrpc.jwtsecret /root/jwt/jwt.hex\n      --ipcdisable\n      --http --http.addr 0.0.0.0 --http.port 8545\n      --http.api \"debug,eth,net,trace,txpool,web3,reth,ots\"\n      --ws --ws.addr 0.0.0.0 --ws.port 8546\n      --ws.api \"debug,eth,net,trace,txpool,web3,reth,ots\"\n      --rpc-max-logs-per-response 0\n    stop_grace_period: 10m\n\n  lighthouse:\n    user: root\n    image: my/lighthouse:v5.3.0\n    depends_on:\n      - reth\n    ports:\n      - '5052:5052/tcp' \n    volumes:\n      - /opt/lighthouse:/root/.lighthouse\n      - /opt/reth/jwttoken:/root/jwt:ro\n    command: >\n      lighthouse bn\n      --http --http-address 0.0.0.0\n      --execution-endpoint http://reth:8551\n      --execution-jwt /root/jwt/jwt.hex\n      --checkpoint-sync-url https://mainnet.checkpoint.sigp.io\n      --disable-deposit-contract-sync\n    stop_grace_period: 10m\n\n  base_reth:\n    image: ghcr.io/paradigmxyz/op-reth:v1.1.2\n    depends_on:\n      - reth\n      - lighthouse\n    command: >\n        node\n        --chain base\n        --datadir /data\n        --rollup.sequencer-http https://mainnet-sequencer.base.org\n        --rollup.disable-tx-pool-gossip\n        --port 30305\n        --http\n        --http.addr 0.0.0.0\n        --http.port 8549\n        --http.corsdomain \"*\"\n        --http.api all\n        --ws\n        --ws.addr 0.0.0.0\n        --ws.port 8550\n        --ws.origins \"*\"\n        --ws.api all\n        --authrpc.jwtsecret /jwt/jwt.hex\n        --authrpc.addr 0.0.0.0\n        --authrpc.port 9551\n    ports:\n      - 8549:8549/tcp\n      - 8550:8550/tcp\n    volumes:\n      - /opt/base/reth_data:/data\n      - /opt/base/jwt:/jwt\n    stop_grace_period: 10m\n\n  base_rollup_node:\n    image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.10.0\n    depends_on:\n      - reth\n      - lighthouse\n    command: >\n      op-node\n      --network=base-mainnet\n      --syncmode=execution-layer\n      --l1=ws://reth:8546\n      --l1.trustrpc\n      --l1.beacon=http://lighthouse:5052\n      --l2=http://base_reth:9551\n      --l2.jwt-secret=/jwt/jwt.hex\n    volumes:\n      - /opt/base/jwt:/jwt:ro\n    stop_grace_period: 10m\n\nnetworks:\n  default:\n    ipam:\n      config:\n        - subnet: xxx.xxx.xxx.xxx/16\n          gateway: xxx.xxx.xxx.xxx\n```\n\n\n### Node logs\n\n**Observed Behavior**\n```text\n# base_rollup_node\n\nbase_rollup_node_1  | t=2024-12-05T08:18:42+0000 lvl=info msg=\"failed to insert payload\" ref=0xb8ea1ed645599043d65822c8559284c19c480ef2970889c680b4317af80b2537:23298442 txs=53 err=\"temp: failed to update insert payload: failed to execute payload: Post \\\"http://base_reth:9551\\\": context deadline exceeded\"\nbase_rollup_node_1  | t=2024-12-05T08:18:42+0000 lvl=warn msg=\"Engine temporary error\" err=\"temp: failed to update insert payload: failed to execute payload: Post \\\"http://base_reth:9551\\\": context deadline exceeded\"\n```\n\n```\n# base_reth\n\nbase_reth_1         | 2024-12-05T08:18:42.404236Z  INFO Block added to canonical chain number=23298442 hash=0xb8ea1ed645599043d65822c8559284c19c480ef2970889c680b4317af80b2537 peers=37 txs=53 gas=17.24 Mgas gas_throughput=3.36 Mgas/second full=8.7% base_fee=0.01gwei blobs=0 excess_blobs=0 elapsed=5.124570365s\nbase_reth_1         | 2024-12-05T08:18:42.404826Z ERROR Failed to send event: Ok(PayloadStatus { status: Valid, latest_valid_hash: Some(0xb8ea1ed645599043d65822c8559284c19c480ef2970889c680b4317af80b2537) })\n```\n```\n# base_rollup_node\n\nbase_rollup_node_1  | t=2024-12-05T08:16:45+0000 lvl=warn msg=\"failed to notify engine driver of new L2 payload\" err=\"context deadline exceeded\" id=0x0066e8dc4d80d0665bcc378e8b560c0ac6e6c95d1444203d66663bbd93b5f7cc:23298558\nbase_rollup_node_1  | t=2024-12-05T08:16:45+0000 lvl=info msg=\"Received signed execution payload from p2p\" id=0x91e1e5840c68c83a2fb7b3661060465653b4847df388c6236490e9802bff8e81:23298559 peer=16Uiu2HAmPuP3jx4X7pEG9Pxt3Vw6cYqKEGtFG72atmCBaXjkbjug txs=154\nbase_rollup_node_1  | t=2024-12-05T08:16:48+0000 lvl=error msg=\"Payload execution failed\" block_hash=0xb22060ca9ccb90118639ab2293e3075754da8573a4d3f3093b33eadf83979358 err=\"Post \\\"http://base_reth:9551\\\": context deadline exceeded\"\nbase_rollup_node_1  | t=2024-12-05T08:16:48+0000 lvl=info msg=\"failed to insert payload\" ref=0xb22060ca9ccb90118639ab2293e3075754da8573a4d3f3093b33eadf83979358:23298396 txs=358 err=\"temp: failed to update insert payload: failed to execute payload: Post \\\"http://base_reth:9551\\\": context deadline exceeded\"\nbase_rollup_node_1  | t=2024-12-05T08:16:48+0000 lvl=warn msg=\"Engine temporary error\" err=\"temp: failed to update insert payload: failed to execute payload: Post \\\"http://base_reth:9551\\\": context deadline exceeded\"\n```\n\nAnd also I found parts of the logs with the following pattern.\n\n```\n# base_rollup_node\n\nbase_rollup_node_1  | t=2024-12-04T23:30:12+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0x6389343dca7b516a6e2db8af835488044ce733d2ae9a5012b5de2a16c60fc444:21332403 next=0x459f673ce5a5b4b5a595d5f5b9449adc2a3a60b331b62e024efc8b45d89acd9a:21332402 l2block=0x8ac2d86f3a90962797981b20daa663267b7516c00a436680a56fe3e9941ff4e0:23282767\nbase_rollup_node_1  | t=2024-12-04T23:30:12+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0x459f673ce5a5b4b5a595d5f5b9449adc2a3a60b331b62e024efc8b45d89acd9a:21332402 next=0xddedc3ee04f08afcc902a1a672ded25134701252606217e98dd569f7e89fa1d0:21332401 l2block=0x2ea9852298fb6080753807ecc44a1224ce4b729c4782e4a9e23fe021bef8c884:23282761\nbase_rollup_node_1  | t=2024-12-04T23:30:12+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0xddedc3ee04f08afcc902a1a672ded25134701252606217e98dd569f7e89fa1d0:21332401 next=0x5376a4ab58e1d60808a3bdb60d914327c09fdb8a06bdf038d1fc93fc0db70859:21332400 l2block=0x04d8a904c9a707325c4abc0bc94f8bb2085d3291b6af55af4d6ebdf2b5e670f6:23282755\nbase_rollup_node_1  | t=2024-12-04T23:30:12+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0x5376a4ab58e1d60808a3bdb60d914327c09fdb8a06bdf038d1fc93fc0db70859:21332400 next=0x0ec72c4e1fc4423d8879addf4ff582fdf40b594c12ad25a346b06990209e23c9:21332399 l2block=0x0c7a42c1f76efbca8a14e4290f97b47706ff5a4c398d208503bb0e50718e2e39:23282749\nbase_rollup_node_1  | t=2024-12-04T23:30:12+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0x0ec72c4e1fc4423d8879addf4ff582fdf40b594c12ad25a346b06990209e23c9:21332399 next=0xcd60571ee9ac234120891ee1f664d44d4e7d5d926cab710d375e8b6a4de604e2:21332398 l2block=0x6178c72f6cdd5f99b116d6b6676577b825f4966eadd363e6c6130185c8bcc185:23282743\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0xcd60571ee9ac234120891ee1f664d44d4e7d5d926cab710d375e8b6a4de604e2:21332398 next=0xb514ebd7ff6a0200dee05dc806915ac6319518cdb434d9a516fc74b366323411:21332397 l2block=0xcb5ed3594f5828c81c01c271ec3346a3217a226ceb5a2c1250df03ede89f757f:23282737\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0xb514ebd7ff6a0200dee05dc806915ac6319518cdb434d9a516fc74b366323411:21332397 next=0xe9cb1b22e867349cb8d018e3d459f2908aa380bd06cef5e21cb1599efb6a4389:21332396 l2block=0x4c61b75db8849fade883fbae1a9780c732dc4d1c83271772681bb0887f684060:23282731\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0xe9cb1b22e867349cb8d018e3d459f2908aa380bd06cef5e21cb1599efb6a4389:21332396 next=0xc61dc9a15cf0430a3274b6baf828c630db1b7ef81cea90e456c04aff26727c11:21332395 l2block=0x7a72ab9e84b1f99b7db7c7fb966ae3257500fd8c7f512c1943d0160b0e6a6276:23282724\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0xc61dc9a15cf0430a3274b6baf828c630db1b7ef81cea90e456c04aff26727c11:21332395 next=0x1d8934738db4191a2f9b797f9ba98516270a9a3070615ae00010b19de3905dba:21332394 l2block=0x6a6f520e57697ecfb04955391b66e2ac0a95098753918340fe38183111267685:23282718\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0x1d8934738db4191a2f9b797f9ba98516270a9a3070615ae00010b19de3905dba:21332394 next=0x4b5d6e5493ff4f1279b25dfb5956de72d921eceb12955d18c08eb8c4d79b6c27:21332393 l2block=0xce3d271ffb009a7dbf651fbe1ef947ab71325a3a7b9749f6f95ae70c8f1e20fe:23282712\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0x4b5d6e5493ff4f1279b25dfb5956de72d921eceb12955d18c08eb8c4d79b6c27:21332393 next=0x53ef2b94115d27582c45c8db3f651f83f0b3c98c5625aac0af5d51b4c94613cf:21332392 l2block=0x539033eeed14a744877a3ad3514fc7bf23a54faae844ff2c00e57b58480abc86:23282706\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0x53ef2b94115d27582c45c8db3f651f83f0b3c98c5625aac0af5d51b4c94613cf:21332392 next=0xd1af58b96583271cc557f972bd9615ff123ffc6b6abc440489827d19f7c51f76:21332391 l2block=0x26ad4d9b364659301996fac4617b4a206485c978f241809d3bdd569e5ba255f2:23282700\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0xd1af58b96583271cc557f972bd9615ff123ffc6b6abc440489827d19f7c51f76:21332391 next=0xad1ca87a8f78f60f6d63895f99d9cb0c08b1f1599bfdf1ed6ecd9c27a6208c8a:21332390 l2block=0xc3450d23fed27a7eba51d3c1219308779d6348d82e7174cc24867a0cd605c05f:23282694\nbase_rollup_node_1  | t=2024-12-04T23:30:13+0000 lvl=info msg=\"Walking back L1Block by hash\" curr=0xad1ca87a8f78f60f6d63895f99d9cb0c08b1f1599bfdf1ed6ecd9c27a6208c8a:21332390 next=0xeccfe592d2fce76fd4056f099a50c592c755d082f4cd33cd0f347dc6fe5f83c6:21332389 l2block=0x0ce3c30686d43c3537fc5cef790be207937ef7e687be9bec95334793fcf27f2f:23282688\n```\n\n\n**Complete logs**\n[Complete base_reth.log](https://drive.google.com/file/d/1jfky4Ufs0dIx_s5ubiRNW6yokTXUK1Ov/view?usp=drive_link)\n[Complete base_rollup_node.log](https://drive.google.com/file/d/1MRoZHpcFt6k-O-J7VrEXllTgJp4RoSZ3/view?usp=drive_link)\n\n\n### Platform(s)\n\nLinux (x86)\n\n### Container Type\n\nDocker\n\n### What version/commit are you on?\n\nbase_reth version : 1.1.2\nbase_reth image:  ghcr.io/paradigmxyz/op-reth:v1.1.2\n\nbase_rollup_node version: 1.10.0\nbase_rollup_node image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.10.0\n\n### What database version are you on?\n\ndefault\n\n### Which chain / network are you on?\n\nbase-mainnet\n\n### What type of node are you running?\n\nArchive (default)\n\n### What prune config do you use, if any?\n\nnone\n", "CLOSED", 0, "maximalvido", "2024-12-11T09:38:07Z", "2025-04-10T13:10:33Z", "2025-04-10T13:10:32Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6crxfj", 12774, "EVM Engineering: semgrep rule for require messages", "We're moving most of the codebase to custom error messages but there will still be plenty of places like scripts and tests where `require` gets used instead. \r\n\r\n@jsvisa has a nice PR open (#12702) that does some of the work to make sure that all instances of `require` have a corresponding error message.\r\n\r\nWe should have a semgrep rule that enforces this condition so that we don't end up adding new `require` statements that don't have messages.\r\n\r\nTasks for this issue are:\r\n- [ ] Add semgrep rule that enforces the format `require(..., $MSG)`\r\n- [ ] Add tests for the semgrep rule\r\n- [ ] Apply semgrep rule to all files and fix any open instances\r\n\r\nWhen adding the semgrep rule, something along the lines of the following should work:\r\n\r\n```\r\n  - id: sol-style-enforce-require-msg\r\n    languages: [solidity]\r\n    severity: ERROR\r\n    message: Require statement must have an error message\r\n    patterns:\r\n      - pattern: require($ERR);\r\n      - pattern-not: require($ERR, $MSG);\r\n```\r\n\r\nTests for the semgrep rule should be added in `semgrep/sol-rules.t.sol`.\r\n\r\nFor the sake of keeping PRs clean, I generally recommend creating the rule + tests in one PR while excluding files/folders where the rule is violated so that no changes to the contracts are actually required. Afterwards, a second PR can remove the exclusions and fix all of the violations.", "CLOSED", 0, "smartcontracts", "2024-11-01T09:52:44Z", "2025-04-08T20:29:25Z", "2025-04-08T20:29:25Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6coFn4", 12764, "Interop: consolidate op-supervisor and op-geth types", "Op-geth contains an `interoptypes` package: https://github.com/ethereum-optimism/op-geth/tree/optimism/core/types/interoptypes\r\nThese types are a smaller subset of the op-supervisor types. Only what is needed to run the extract the dependencies from a list of log-events, and run the check-messages API.\r\n\r\nThe `Identifier` and `SafetyLevel` types are duplicate.\r\n- `Identifier`, can be moved into op-geth, and then in the op-supervisor types package we can set a Go type alias: `type Identifier = interoptypes.Identifier`\r\n- `SafetyLevel` could also be moved in the same way as the above, but maybe there's a more lean API we can use, that doesn't require a safety-level to be specified. \r\n\r\n", "CLOSED", 0, "protolambda", "2024-10-31T20:23:25Z", "2025-04-10T12:21:06Z", "2025-04-10T12:21:05Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6cR51N", 12731, "Discussion: Remove mocks from test suite?", "This ticket is a placeholder to remind us to have a discussion around the inclusion of mocks in our test suite before we go to mainnet as this is a larger policy issue we should align on internally.\r\n\r\n_Originally asked by @mds1 in https://github.com/ethereum-optimism/optimism/pull/12514#discussion_r1809493899_\r\n            ", "CLOSED", 0, "op-aaron", "2024-10-29T17:40:54Z", "2025-04-10T21:55:12Z", "2025-04-10T21:55:12Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6YNZuK", 12185, "Interop: more specific handling for future-data errors", "In cross-safe head validation, we may be processing an executing message. That executing message references a block which is derived from some L1 block.\r\n\r\nif that L1 block is not known, we return an `ErrFuture`. However, that case can be disambiguated further based on if this information is expected to be in the future, or if it's just plain wrong.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/blob/850c044e649561a0745961be4f452aea6af93ee8/op-supervisor/supervisor/backend/safety/safety.go#L258", "CLOSED", 0, "axelKingsley", "2024-09-27T20:02:38Z", "2025-04-10T12:16:22Z", "2025-04-10T12:16:21Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6WY7LK", 11892, "Contract scripts: Compose with vm.etch, library, or inheritance (E.g. SetPreinstalls)", "To compose different scripts, we have different options:\r\n- `vm.etch` to temporarily bring in the script contract: works well when the thing is encapsulated, and minimizes compilation time\r\n- `library`: works well to mix-in util functions, but means that the script on its own is not calleable. For `SetPreinstalls.s.sol` we do want to run it on its own (to install preinstalls into the L1 dev genesis). A separate script entry-point, that uses the same library, ends up adding code, but avoids the `vm.etch` nicely.\r\n- `ineheritance`: i.e. mix in the contract into the script; we end up with weird temporarily contract overlap. This is better used for actual contract inheritance, rather than adding utils functions into scope that are supposed to be encapsulated.\r\n\r\n`SetPreinstalls.s.sol` is the current main example, but we may want to set a standard approach, and find more occurrences where scripts can be standardized to work in a consistent way.\r\n\r\n", "CLOSED", 0, "protolambda", "2024-09-12T18:51:38Z", "2025-04-10T13:16:02Z", "2025-04-10T13:16:01Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6U4d2z", 11693, "Interop: check reorgs", "When an L2 block has cross-L2 dependencies, and any of those dependencies is cross-verified but does not match the expected executed message, then we need to reorg.\n\nThe local-safe and cross-safe DBs should be rewound to drop the invalidated L1 blocks.\nThe events DB should rewind such that the remaining L2 blocks are consistent with the local-safe DB (i.e. all history matches the post-reorg local-safe DB, or it's ahead of the last known local-safe L2 block).\n\nThe effects of this reorg should be picked up by the op-node, which will also have to follow the reorg.\n\n", "CLOSED", 0, "protolambda", "2024-08-30T17:15:06Z", "2025-04-10T11:12:36Z", "2025-04-10T11:12:34Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6TyhO_", 11561, "Modularizing the Monorepo", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nThe monorepo is quite large still and its still unclear who owns what code ([example](https://github.com/ethereum-optimism/optimism/pull/11455#discussion_r1723018262)). This creates many issues with flakey tests and code review.\r\n\r\nThe protocol monorepo should contain a minimal set of reference implementations for the Optimism protocol. Additional things should live elsewhere. This ensures that there are fewer negative externalities in CI or pulling in newer versions of `op-geth`.\r\n\r\nThe following packages should be moved to the [infra](https://github.com/ethereum-optimism/infra) repo or their own repo:\r\n- [op-bootnode](https://github.com/ethereum-optimism/optimism/tree/develop/op-bootnode)\r\n- [op-conductor](https://github.com/ethereum-optimism/optimism/tree/develop/op-conductor)\r\n- [op-heartbeat](https://github.com/ethereum-optimism/optimism/tree/develop/op-heartbeat)\r\n\r\nThe following packages should be considered to be moved to their own repo:\r\n- [op-chain-ops](https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops)\r\n- [op-wheel](https://github.com/ethereum-optimism/optimism/tree/develop/op-wheel)\r\n- [contracts-bedrock](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock)\r\n", "CLOSED", 0, "tynes", "2024-08-22T01:04:29Z", "2025-04-10T13:18:09Z", "2025-04-10T13:18:08Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6Miq_4", 10847, "Interop: op-supervisor overlay over logdb, to allow for later forking.", "We can structure the connection between the backend and the logdb to allow for an overlay, such that we can have multiple different variants on top of the same DB snapshot. This would greatly increase the utility for redundant (and competitive) block-building.", "CLOSED", 0, "protolambda", "2024-06-13T20:49:00Z", "2025-04-10T12:14:11Z", "2025-04-10T12:14:10Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM6HyvXi", 10398, "ci: Use `versions.json` consistently in Circle CI config", "In https://github.com/ethereum-optimism/optimism/pull/9117, installation of a new tool `eth2-testnet-genesis` was added to the Circle CI config. It references the version from the `versions.json` file. However, other software that is installed in CI still hardcodes the version, leading to inconsistent use of versions, for example (incomplete list)\r\n* nvm version\r\n* node version (the keyword `nvm` is used in `versions.json` to set the node version, this should also be improved)\r\n* geth\r\n* foundry\r\n\r\nThe version can be accessed like `$(jq -r .eth2_testnet_genesis < versions.json)`, see also https://github.com/ethereum-optimism/optimism/pull/9117/commits/b9216e21f12bce9a43a0c0b7dc990f561dde8ce3.\r\n\r\nIdeally we specify as many versions as possible in the `versions.json` file and then consistently use them across different contexts, e.g. in CI as well as the ci-builder.\r\n\r\nNote that it may be necessary to specify additional versions in the versions file, and possibly also some checksums for some software, like geth.", "CLOSED", 0, "sebastianst", "2024-05-03T18:39:01Z", "2025-04-10T13:20:08Z", "2025-04-10T13:20:08Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM5z1TJB", 7685, "op-service: refactor RPC-server util to build on op-service HTTPServer for graceful shutdown handling", "The `httputil.HTTPServer` has better shutdown handling, to fully close and allow for force-close, while propagating any errors. And it has more customization options and proper HTTP-server address reporting too.\r\n\r\nThe RPC server util should build around that, and provide the same shutdown features.\r\n\r\nThis can then be used by the go services like op-batcher and op-proposer, and maybe op-challenger.\r\n\r\nIdeally we also deduplicate more code with the op-node RPC server, which uses some custom RPC server definition still.\r\n", "CLOSED", 0, "protolambda", "2023-10-14T15:42:32Z", "2025-04-07T11:09:43Z", "2025-04-07T11:09:43Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM5uFg-J", 6740, "op-service: RPC transport options ", "- [ ] extend RPC transport options\r\n  - We could support:\r\n    - websocket RPC, like geth\r\n    - IPC RPC, like geth\r\n    - attaching in-process: this can make tests faster, by not depending on http requests/servers.", "CLOSED", 0, "protolambda", "2023-08-11T14:37:03Z", "2025-04-10T13:49:59Z", "2025-04-10T13:49:58Z", "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDODjvEJM5jSDnf", 5435, "Discrep in op-geth DoEstimateGas() logic leads to mempool zombies in rare cases", "**Describe the bug**\r\nWhen L2geth checks a transaction against the block gas limit, it fails to account for the system transaction in the block.\r\n\r\ntypical Optimism system TX gas used = 46,913  (but varies)\r\n\r\nIn other words, in DoEstimateGas, only the raw block gas limit is used (25,000,000) instead of the appropriate (25,000,000 - 46,913) = 24,953,087\r\n\r\nIf a contract call is submitted which consumes between 24,953,087 and 25,000,000 gas, it is accepted into the mempool but never settles in a block as there will never be a block with sufficient gas available for it due to the offset from the Optimism system tx in every block. \r\n\r\n**To Reproduce**\r\nThis can be reproduced by calling a gas guzzler contract, e.g. one which accepts and stores an arbitrary array of numbers. Adjust your call's array length in order to hit the gas \"sweet spot\".\r\n\r\n**Expected behavior**\r\nWhat should happen is the call results in error \"gas required exceeds allowance\" instead of reaching the mempool.\r\n\r\n**Notes/Suggestions**\r\nSince it is challenging to know the exact gas expense of a systemTx ahead of time, maybe the best way to solve this is to add a buffer to the block gas limit for the limit check.   (blockGasLimit - 10%) or something similar.  A single execution consuming all the gas would be an oddity anyway, so this should solve it well.\r\n\r\n", "OPEN", 0, "bstr156", "2023-04-13T04:17:44Z", "2025-04-10T13:44:11Z", null, "ethereum-optimism/optimism", "2025-08-31 03:27:16"]
["I_kwDOKSJyfM6zA-6m", 749, "enforce max limit of api keys that can be created", "", "CLOSED", 0, "tremarkley", "2025-04-17T20:25:00Z", "2025-04-17T22:28:11Z", "2025-04-17T22:28:11Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6yNwxM", 742, "Update optimism docs to use SuperchainETHBridge instead of SuperchainWETH", "", "CLOSED", 0, "tremarkley", "2025-04-11T23:53:58Z", "2025-04-16T21:59:44Z", "2025-04-16T21:59:44Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6xsA06", 740, "viem: Remove SuperchainWETH actions from viem and update them to use SuperchainETHBridge", "", "CLOSED", 0, "tremarkley", "2025-04-08T22:52:32Z", "2025-04-14T18:45:45Z", "2025-04-14T18:45:45Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6xsAl0", 739, "Update supersim to use SuperchainETHBridge and remove SuperchainWETH", "", "CLOSED", 0, "tremarkley", "2025-04-08T22:51:57Z", "2025-04-14T18:44:39Z", "2025-04-14T18:44:39Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6xaqf3", 729, "L2ToL2CDM RelayedMessage return field design doc", "Closed By https://github.com/ethereum-optimism/design-docs/pull/227", "CLOSED", 0, "hamdiallam", "2025-04-07T11:33:41Z", "2025-04-14T16:54:02Z", "2025-04-14T16:54:01Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6wFV2Z", 710, "Handle redirect on optimism.io/apps page", "- Need to update k8s repo\n- Need to update optimism.io marketing site", "CLOSED", 0, "jvmi7", "2025-03-27T19:15:49Z", "2025-04-14T17:14:19Z", "2025-04-14T17:14:19Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6vd-K9", 698, "Update optimism docs for manually relaying message", "Update the example in the optimism docs to use the new validation mechanism introduced with https://github.com/ethereum-optimism/design-docs/pull/214", "CLOSED", 0, "tremarkley", "2025-03-24T16:50:59Z", "2025-04-16T21:56:19Z", "2025-04-16T21:56:19Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6t9CuR", 688, "Implement rename api key ux", "", "CLOSED", 0, "tremarkley", "2025-03-13T21:50:13Z", "2025-04-17T23:16:13Z", "2025-04-17T23:16:13Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6t9CtP", 687, "Implement delete api key ux", "", "CLOSED", 0, "tremarkley", "2025-03-13T21:50:10Z", "2025-04-17T23:11:20Z", "2025-04-17T23:11:20Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6t9CsS", 686, "Implement api key table ui", "", "CLOSED", 0, "tremarkley", "2025-03-13T21:50:07Z", "2025-04-17T23:08:40Z", "2025-04-17T23:08:40Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOKSJyfM6t9CrK", 685, "Implement create new api key ux", "", "CLOSED", 0, "tremarkley", "2025-03-13T21:50:04Z", "2025-04-17T22:21:33Z", "2025-04-17T22:21:33Z", "ethereum-optimism/ecosystem", "2025-08-31 03:28:40"]
["I_kwDOL-xLQ86yBzXU", 278, "Update NetChef devnet.json generator to match current schema", "**Bug Description**\n\nDevnet SDK has been updated recently such that the schema of the devnet env files produced by NetChef has fallen out of date (the kurtosis-devnet generation logic _has_ been kept up to date). These env files are used for running acceptance tests against these networks. \n\nThis ticket encapsulates two subtasks:\n\n1. Update the logic in NetChef to generate devnet.json files in the current schema accepted by devnet-sdk. That logic is located in [optimism/infrastructure-services/netchef/pkg/devnet_env.go](https://github.com/ethereum-optimism/infrastructure-services/blob/main/netchef/pkg/devnet_env.go). (this ticket)\n\n2. Add a CI-integrated test suite for this functionality in the optimism monorepo, such that if the devnet.json schema is changed in the future it will automatically trigger a failing test, indicating that the author should first update NetChef client (https://github.com/ethereum-optimism/optimism/issues/15358)", "CLOSED", 0, "teddyknox", "2025-04-10T20:32:23Z", "2025-04-14T19:58:23Z", "2025-04-14T19:58:22Z", "ethereum-optimism/infra", "2025-08-31 03:28:40"]
["I_kwDOL-xLQ86wiWTB", 268, "[acceptance] op-acceptor has significant overhead to native go-test", "As discovered and reported by @pcw109550 , when the tests are run via op-acceptor they are significantly slower.\n\n> I just ran below two commands\ngo test ./... -v -count=1 -timeout=6h at op-acceptance-tests/tests/isthmus\njust acceptance-test \"isthmus\" \"isthmus\"\nand the below command which uses the acceptor took more than 3x time compared to directly running the test\nGate: isthmus (2577.5s)\n\u251c\u2500\u2500 Status: pass\n\u251c\u2500\u2500 Tests: 9 passed, 0 failed, 0 skipped\n\u251c\u2500\u2500 Test: github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/isthmus (2574.0s) [status=pass]\n\u2502       \u2502       \u251c\u2500\u2500 Test: TestERC20Bridge (637.9s) [status=pass]\n\u2502       \u2502       \u2514\u2500\u2500 Error: === RUN   TestERC20Bridge\n\nWe need to investigate and remedy this.", "CLOSED", 0, "scharissis", "2025-03-31T23:32:27Z", "2025-04-17T01:11:26Z", "2025-04-17T01:11:24Z", "ethereum-optimism/infra", "2025-08-31 03:28:40"]
["I_kwDOKIwiaM6yX4BL", 1572, "Feedback for \u201cChain architecture\u201d", "Currently, op-deploy can only deploy contracts with fraud proof. I want to deploy an old version of the contract without fraud proof, but the documentation is no longer available. How can I deploy it?", "CLOSED", 0, "zhuangql", "2025-04-14T10:18:25Z", "2025-04-14T23:00:01Z", "2025-04-14T23:00:00Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6ySYWJ", 1571, "[2024 Q4 Audit] [page-path]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\n<!-- Write a description of the current state of the page. -->\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisk\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>", "CLOSED", 0, "issamhaimour", "2025-04-13T09:47:44Z", "2025-04-14T22:57:40Z", "2025-04-14T22:57:40Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6wij4m", 1550, "2025-03-01..2025-03-31 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 9:45:37 | 0:37:02 | 1 day, 16:59:45 |\n| Time to close | 1 day, 17:04:41 | 1:31:24 | 4 days, 0:10:40 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 10 |\n| Number of items closed | 92 |\n| Number of most active mentors | 0 |\n| Total number of items created | 102 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Updating title of Reading logs explainer | https://github.com/ethereum-optimism/docs/pull/1548 | [zainbacchus](https://github.com/zainbacchus) | 0:48:45 | 0:49:03 | None |\n| Update upgrade-13.mdx | https://github.com/ethereum-optimism/docs/pull/1547 | [trianglesphere](https://github.com/trianglesphere) | 0:01:15 | 0:02:25 | None |\n| fix: Wrong op-node p2p port in base-config.mdx | https://github.com/ethereum-optimism/docs/pull/1546 | [cleot](https://github.com/cleot) | None | None | None |\n| Add RC-alpha for testing purposes | https://github.com/ethereum-optimism/docs/pull/1545 | [zainbacchus](https://github.com/zainbacchus) | 0:02:13 | 1:31:24 | None |\n| Adding Uni V4 deployment to Devnet | https://github.com/ethereum-optimism/docs/pull/1544 | [zainbacchus](https://github.com/zainbacchus) | None | 1:57:51 | None |\n| Remove fault proofs language | https://github.com/ethereum-optimism/docs/pull/1543 | [krofax](https://github.com/krofax) | 1:14:16 | 1:14:20 | None |\n| Updated U14 Sepolia launch | https://github.com/ethereum-optimism/docs/pull/1542 | [ZakAyesh](https://github.com/ZakAyesh) | 0:00:34 | 0:03:31 | None |\n| Update upgrade-13 mainnet activation date | https://github.com/ethereum-optimism/docs/pull/1541 | [brokewhale](https://github.com/brokewhale) | 0:01:20 | 17:31:44 | None |\n| fix word.txt | https://github.com/ethereum-optimism/docs/pull/1540 | [krofax](https://github.com/krofax) | None | None | None |\n| Migrating to permissionless fault proofs on OP Stack | https://github.com/ethereum-optimism/docs/pull/1539 | [krofax](https://github.com/krofax) | 1 day, 13:45:30 | None | None |\n| Update \"Running a Local Development Environment\" Tutorial | https://github.com/ethereum-optimism/docs/pull/1538 | [krofax](https://github.com/krofax) | 1 day, 15:29:26 | None | None |\n| Bump next from 14.2.21 to 14.2.25 | https://github.com/ethereum-optimism/docs/pull/1537 | [dependabot[bot]](https://github.com/dependabot[bot]) | None | None | None |\n| Bump @babel/runtime from 7.23.2 to 7.27.0 | https://github.com/ethereum-optimism/docs/pull/1536 | [dependabot[bot]](https://github.com/dependabot[bot]) | None | None | None |\n| Add description for admin_sequencerActive RPC endpoint | https://github.com/ethereum-optimism/docs/pull/1535 | [VolodymyrBg](https://github.com/VolodymyrBg) | 2 days, 2:30:46 | 2 days, 3:02:38 | None |\n| Upgrade 14: MT-Cannon and Isthmus L1 Contracts Notice | https://github.com/ethereum-optimism/docs/pull/1534 | [krofax](https://github.com/krofax) | 0:36:22 | 14:16:16 | None |\n| Superchain upgrades | https://github.com/ethereum-optimism/docs/pull/1533 | [krofax](https://github.com/krofax) | 0:33:47 | 5:24:15 | None |\n| Update upgrade-13.mdx | https://github.com/ethereum-optimism/docs/pull/1532 | [sbvegan](https://github.com/sbvegan) | 0:00:53 | 0:04:00 | None |\n| quick update on shifting timelines | https://github.com/ethereum-optimism/docs/pull/1531 | [sbvegan](https://github.com/sbvegan) | 0:00:52 | 0:05:13 | None |\n| Remove legacy legacy deployment script from docs | https://github.com/ethereum-optimism/docs/pull/1529 | [krofax](https://github.com/krofax) | 6:42:02 | 11:28:51 | None |\n| Bridging Standard ERC-20 tutorial update | https://github.com/ethereum-optimism/docs/pull/1528 | [krofax](https://github.com/krofax) | 1 day, 18:30:04 | 3 days, 23:56:16 | None |\n| Bridging your custom ERC-20 tutorial update | https://github.com/ethereum-optimism/docs/pull/1527 | [krofax](https://github.com/krofax) | 3 days, 3:14:24 | 4 days, 0:10:40 | None |\n| Fixed 2 typos on interop explainer | https://github.com/ethereum-optimism/docs/pull/1526 | [HanzCEO](https://github.com/HanzCEO) | 0:11:06 | 0:11:27 | None |\n| Tutorial: Upgrade ERC20 to support interop | https://github.com/ethereum-optimism/docs/pull/1525 | [qbzzt](https://github.com/qbzzt) | None | None | None |\n| feat : add and update rpc-providers | https://github.com/ethereum-optimism/docs/pull/1524 | [jaerius](https://github.com/jaerius) | 6:25:42 | 6:25:58 | None |\n| fix: correct spelling of 'OptimismPortal' in upgrade-13 notice | https://github.com/ethereum-optimism/docs/pull/1523 | [hash1go](https://github.com/hash1go) | 2 days, 20:00:29 | 2 days, 20:00:34 | None |\n| Sb/u13 notice update | https://github.com/ethereum-optimism/docs/pull/1522 | [sbvegan](https://github.com/sbvegan) | None | 0:15:32 | None |\n| tools/op-deployer: clarify contract locator schemes and requirements | https://github.com/ethereum-optimism/docs/pull/1521 | [jsvisa](https://github.com/jsvisa) | 14:05:22 | None | None |\n| Update the metadata presentation | https://github.com/ethereum-optimism/docs/pull/1520 | [qbzzt](https://github.com/qbzzt) | None | None | None |\n| Sb/u13 notice page | https://github.com/ethereum-optimism/docs/pull/1519 | [sbvegan](https://github.com/sbvegan) | None | 14:56:42 | None |\n| Fixes various redirects | https://github.com/ethereum-optimism/docs/pull/1518 | [bradleycamacho](https://github.com/bradleycamacho) | 0:02:11 | 0:04:09 | None |\n| Updating gas target | https://github.com/ethereum-optimism/docs/pull/1517 | [zainbacchus](https://github.com/zainbacchus) | 0:12:18 | 0:12:41 | None |\n| updating project board link | https://github.com/ethereum-optimism/docs/pull/1516 | [sbvegan](https://github.com/sbvegan) | None | 0:08:09 | None |\n| Sb/blob fee bug notice | https://github.com/ethereum-optimism/docs/pull/1515 | [sbvegan](https://github.com/sbvegan) | 0:05:23 | 0:35:33 | None |\n| Updating URL for xERC20 + Superchain Interop | https://github.com/ethereum-optimism/docs/pull/1513 | [zainbacchus](https://github.com/zainbacchus) | 0:04:29 | 0:04:37 | None |\n| Fix algolia keys | https://github.com/ethereum-optimism/docs/pull/1511 | [krofax](https://github.com/krofax) | 0:03:09 | 0:33:13 | None |\n| Fix Grammar, Formatting & Terminology | https://github.com/ethereum-optimism/docs/pull/1509 | [PixelPil0t1](https://github.com/PixelPil0t1) | 5:31:40 | None | None |\n| fix correction docs | https://github.com/ethereum-optimism/docs/pull/1507 | [Guayaba221](https://github.com/Guayaba221) | 2 days, 15:58:37 | 2 days, 15:58:50 | None |\n| updaing notice page | https://github.com/ethereum-optimism/docs/pull/1506 | [sbvegan](https://github.com/sbvegan) | None | 0:12:48 | None |\n| fix: interop message passing | https://github.com/ethereum-optimism/docs/pull/1504 | [pcw109550](https://github.com/pcw109550) | 3:43:09 | 3:43:15 | None |\n| Fix Grammar, Links & Prepositions | https://github.com/ethereum-optimism/docs/pull/1503 | [Hopium21](https://github.com/Hopium21) | 7:24:42 | 7:25:01 | None |\n| fixing redirect to superchain explainer | https://github.com/ethereum-optimism/docs/pull/1502 | [sbvegan](https://github.com/sbvegan) | 0:03:15 | 5 days, 9:07:09 | None |\n| Reading logs in superchain interop | https://github.com/ethereum-optimism/docs/pull/1501 | [krofax](https://github.com/krofax) | 3:51:13 | 9 days, 3:55:13 | None |\n| Update superchain explainer with interop callout | https://github.com/ethereum-optimism/docs/pull/1500 | [bradleycamacho](https://github.com/bradleycamacho) | 1:29:03 | 1:32:26 | None |\n| Updated safedb env variable | https://github.com/ethereum-optimism/docs/pull/1499 | [bradleycamacho](https://github.com/bradleycamacho) | 0:07:03 | 0:10:20 | None |\n| fix: fix regex to support both quote types in `href` | https://github.com/ethereum-optimism/docs/pull/1497 | [0xkg](https://github.com/0xkg) | None | None | None |\n| chore: fix typo in results table | https://github.com/ethereum-optimism/docs/pull/1496 | [hexcow](https://github.com/hexcow) | 0:15:56 | 0:16:35 | None |\n| Fix Algolia API Key Security Issue | https://github.com/ethereum-optimism/docs/pull/1495 | [krofax](https://github.com/krofax) | 0:43:26 | 1:45:05 | None |\n| docs: Fix incomplete sentence | https://github.com/ethereum-optimism/docs/pull/1494 | [0xminds](https://github.com/0xminds) | 6:14:57 | 6:15:26 | None |\n| Update pectra-changes.mdx | https://github.com/ethereum-optimism/docs/pull/1492 | [sbvegan](https://github.com/sbvegan) | 0:00:54 | 0:02:58 | None |\n| Isthmus notice page template | https://github.com/ethereum-optimism/docs/pull/1491 | [bradleycamacho](https://github.com/bradleycamacho) | 0:05:16 | None | None |\n| Sb/pectra u12a update | https://github.com/ethereum-optimism/docs/pull/1490 | [sbvegan](https://github.com/sbvegan) | 0:42:44 | 1:10:18 | None |\n| Remove extraneous 'Optimism' from predeploy section | https://github.com/ethereum-optimism/docs/pull/1489 | [zainbacchus](https://github.com/zainbacchus) | 0:04:15 | 0:04:20 | None |\n| Update forced-transactions | https://github.com/ethereum-optimism/docs/pull/1488 | [geoknee](https://github.com/geoknee) | 16:03:42 | 1 day, 20:26:04 | None |\n| fix spelling issues | https://github.com/ethereum-optimism/docs/pull/1486 | [sky-coderay](https://github.com/sky-coderay) | 2 days, 2:37:30 | 2 days, 2:37:36 | None |\n| fix:simplify-metadata-logic | https://github.com/ethereum-optimism/docs/pull/1485 | [cpengilly](https://github.com/cpengilly) | 2 days, 16:01:52 | 18 days, 14:13:49 | None |\n| node-operators-metakeywords | https://github.com/ethereum-optimism/docs/pull/1484 | [cpengilly](https://github.com/cpengilly) | None | 18 days, 15:45:09 | None |\n| stack-directory-metakeywords | https://github.com/ethereum-optimism/docs/pull/1483 | [cpengilly](https://github.com/cpengilly) | None | 18 days, 17:30:20 | None |\n| chain-operators-metakeywords | https://github.com/ethereum-optimism/docs/pull/1480 | [cpengilly](https://github.com/cpengilly) | None | 19 days, 1:34:02 | None |\n| Add links for ERC-7802 | https://github.com/ethereum-optimism/docs/pull/1479 | [bradleycamacho](https://github.com/bradleycamacho) | 0:14:56 | 0:15:02 | None |\n| Adds consensus advertising config to conductor docs | https://github.com/ethereum-optimism/docs/pull/1478 | [zhwrd](https://github.com/zhwrd) | 0:10:32 | 0:10:44 | None |\n| Clean up SuperchainERC20 explainer | https://github.com/ethereum-optimism/docs/pull/1477 | [zainbacchus](https://github.com/zainbacchus) | 0:13:05 | 0:26:27 | None |\n| Best practice cleanup | https://github.com/ethereum-optimism/docs/pull/1476 | [richardgreg](https://github.com/richardgreg) | 13:08:06 | 5 days, 10:13:32 | None |\n| New testtttt | https://github.com/ethereum-optimism/docs/pull/1475 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Test-new-pnpm-fixes | https://github.com/ethereum-optimism/docs/pull/1474 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Test-blessings-fix | https://github.com/ethereum-optimism/docs/pull/1472 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Change cache version | https://github.com/ethereum-optimism/docs/pull/1471 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Use the @eth-optimism/viem package to transfer ERC-20 tokens | https://github.com/ethereum-optimism/docs/pull/1470 | [krofax](https://github.com/krofax) | 10:46:14 | None | None |\n| testing | https://github.com/ethereum-optimism/docs/pull/1469 | [krofax](https://github.com/krofax) | 3:57:12 | 4:10:38 | None |\n| test revert | https://github.com/ethereum-optimism/docs/pull/1468 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Revert \"update logic\" | https://github.com/ethereum-optimism/docs/pull/1467 | [bradleycamacho](https://github.com/bradleycamacho) | 0:01:21 | 0:07:45 | None |\n| test do not merge | https://github.com/ethereum-optimism/docs/pull/1466 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Fix lockfile | https://github.com/ethereum-optimism/docs/pull/1465 | [krofax](https://github.com/krofax) | None | None | None |\n| Test-meta do not merge | https://github.com/ethereum-optimism/docs/pull/1464 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Fix pnpm | https://github.com/ethereum-optimism/docs/pull/1463 | [krofax](https://github.com/krofax) | None | None | None |\n| stack/devnet: cast command is changed after 1.0 | https://github.com/ethereum-optimism/docs/pull/1462 | [jsvisa](https://github.com/jsvisa) | 1:36:56 | 2:27:08 | None |\n| Fixing the run node from source tutorial | https://github.com/ethereum-optimism/docs/pull/1461 | [sbvegan](https://github.com/sbvegan) | 0:01:37 | 0:14:22 | None |\n| New supersim branch | https://github.com/ethereum-optimism/docs/pull/1460 | [bradleycamacho](https://github.com/bradleycamacho) | 1:14:06 | 1:14:12 | None |\n| Automatically fix broken links | https://github.com/ethereum-optimism/docs/pull/1459 | [krofax](https://github.com/krofax) | 0:37:41 | 1:35:25 | None |\n| fixes the main branch | https://github.com/ethereum-optimism/docs/pull/1458 | [bradleycamacho](https://github.com/bradleycamacho) | 2:43:39 | 2:57:19 | None |\n| add manual job | https://github.com/ethereum-optimism/docs/pull/1457 | [raffaele-oplabs](https://github.com/raffaele-oplabs) | 0:00:51 | 0:03:07 | None |\n| adding op-verifier tutorial | https://github.com/ethereum-optimism/docs/pull/1456 | [sbvegan](https://github.com/sbvegan) | 1:04:30 | 7:46:53 | None |\n| Supersim install clarification | https://github.com/ethereum-optimism/docs/pull/1455 | [bradleycamacho](https://github.com/bradleycamacho) | 0:09:27 | None | None |\n| removed duplicate | https://github.com/ethereum-optimism/docs/pull/1454 | [Danyylka](https://github.com/Danyylka) | 19:28:17 | 19:28:21 | None |\n| Update account-abstraction.mdx | https://github.com/ethereum-optimism/docs/pull/1453 | [cpengilly](https://github.com/cpengilly) | None | None | None |\n| update logic | https://github.com/ethereum-optimism/docs/pull/1452 | [cpengilly](https://github.com/cpengilly) | None | 0:00:40 | None |\n| feat: Enhance README with badges, social links, and improved formatting | https://github.com/ethereum-optimism/docs/pull/1451 | [NikolaiKryshnev](https://github.com/NikolaiKryshnev) | None | None | None |\n| update husky fix | https://github.com/ethereum-optimism/docs/pull/1450 | [krofax](https://github.com/krofax) | 0:00:43 | 1:38:44 | None |\n| Update sequencer window time | https://github.com/ethereum-optimism/docs/pull/1449 | [bradleycamacho](https://github.com/bradleycamacho) | 0:12:26 | 1:47:16 | None |\n| Update rollup.mdx | https://github.com/ethereum-optimism/docs/pull/1448 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Testing CI | https://github.com/ethereum-optimism/docs/pull/1447 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Update sequencer window default time | https://github.com/ethereum-optimism/docs/pull/1446 | [bradleycamacho](https://github.com/bradleycamacho) | 0:00:46 | None | None |\n| update word | https://github.com/ethereum-optimism/docs/pull/1445 | [krofax](https://github.com/krofax) | None | None | None |\n| adding op-contracts/v1.8.0 | https://github.com/ethereum-optimism/docs/pull/1444 | [sbvegan](https://github.com/sbvegan) | None | 1:29:53 | None |\n| updating batcher and proposer releases | https://github.com/ethereum-optimism/docs/pull/1443 | [sbvegan](https://github.com/sbvegan) | 0:06:04 | 0:06:28 | None |\n| fix: Fixed redundant regex pattern for JSX link matching | https://github.com/ethereum-optimism/docs/pull/1442 | [hexcow](https://github.com/hexcow) | 0:35:00 | None | None |\n| metadata-3directories | https://github.com/ethereum-optimism/docs/pull/1441 | [cpengilly](https://github.com/cpengilly) | None | 0:03:18 | None |\n| fix metadata | https://github.com/ethereum-optimism/docs/pull/1440 | [cpengilly](https://github.com/cpengilly) | None | 0:09:33 | None |\n| feat: add and update categories app-devs | https://github.com/ethereum-optimism/docs/pull/1439 | [cpengilly](https://github.com/cpengilly) | None | 0:39:22 | None |\n| spelling errors | https://github.com/ethereum-optimism/docs/pull/1438 | [Danyylka](https://github.com/Danyylka) | 17:51:00 | 17:51:07 | None |\n| Improve redirect link automation | https://github.com/ethereum-optimism/docs/pull/1437 | [krofax](https://github.com/krofax) | 0:14:08 | 0:14:30 | None |\n| Test Pr do not merge | https://github.com/ethereum-optimism/docs/pull/1436 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| logic updates + superchain directory | https://github.com/ethereum-optimism/docs/pull/1434 | [cpengilly](https://github.com/cpengilly) | None | 0:27:11 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-03-01..2025-03-31`", "CLOSED", 0, "opgitgovernance", "2025-04-01T00:23:02Z", "2025-04-14T23:00:45Z", "2025-04-14T23:00:45Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6wijUG", 1549, "2025-03-01..2025-03-31 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 55 days, 10:27:15 | 2 days, 22:32:34 | 163 days, 8:10:34 |\n| Time to close | 115 days, 1:15:52 | 21 days, 8:01:05 | 340 days, 11:41:18 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 13 |\n| Number of most active mentors | 0 |\n| Total number of items created | 13 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [DOCS] Add PR title | https://github.com/ethereum-optimism/docs/issues/1514 | [Hakkmihakim](https://github.com/Hakkmihakim) | None | 3 days, 10:08:08 | None |\n| [DOCS] Add PR title no | https://github.com/ethereum-optimism/docs/issues/1498 | [Cryptobos44](https://github.com/Cryptobos44) | 1:16:14 | 1:16:14 | None |\n| Bridging | https://github.com/ethereum-optimism/docs/issues/1493 | [busyman44](https://github.com/busyman44) | 0:01:03 | 2 days, 0:04:17 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1487 | [issamhaimour](https://github.com/issamhaimour) | None | 4 days, 11:17:30 | None |\n| [DOCS] Add OP Atlas page to the governance docs | https://github.com/ethereum-optimism/docs/issues/1435 | [C-Emily-Furlong](https://github.com/C-Emily-Furlong) | 2 days, 13:29:40 | 2 days, 13:29:40 | None |\n| [DEVNET] Issue with Starting Devent due to Default `cl_type: lighthouse` in Documentation | https://github.com/ethereum-optimism/docs/issues/1406 | [opfocus](https://github.com/opfocus) | 3 days, 7:35:27 | 13 days, 12:16:20 | None |\n| [DOCS] Outdated \"Building a node from source\" | https://github.com/ethereum-optimism/docs/issues/1360 | [Hugoo](https://github.com/Hugoo) | 21 days, 8:01:05 | 21 days, 8:01:05 | None |\n| Revise Create L2 Testnet Tutorial | https://github.com/ethereum-optimism/docs/issues/1231 | [cpengilly](https://github.com/cpengilly) | None | 68 days, 1:15:16 | None |\n| [2024 Q4 Audit] Review and update the focus and scope sections across all audit reports | https://github.com/ethereum-optimism/docs/issues/1177 | [krofax](https://github.com/krofax) | None | 95 days, 0:55:37 | None |\n| [2024 Q4 Audit] Revise chain-operators/management/best-practices.mdx | https://github.com/ethereum-optimism/docs/issues/994 | [sbvegan](https://github.com/sbvegan) | None | 147 days, 11:21:52 | None |\n| [DOCS] [TUTORIAL] Generalize running an OP sepolia node from source for any chain | https://github.com/ethereum-optimism/docs/issues/697 | [cpengilly](https://github.com/cpengilly) | 305 days, 8:20:03 | 305 days, 8:19:27 | None |\n| [TUTORIAL] how to challenge a L2 state output | https://github.com/ethereum-optimism/docs/issues/600 | [sbvegan](https://github.com/sbvegan) | None | 349 days, 6:31:46 | None |\n| [DOCS] Update RPC methods with op stack chain info | https://github.com/ethereum-optimism/docs/issues/159 | [cpengilly](https://github.com/cpengilly) | None | 483 days, 3:29:09 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-03-01..2025-03-31 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "opgitgovernance", "2025-04-01T00:21:00Z", "2025-04-14T23:00:45Z", "2025-04-14T23:00:45Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6tDc50", 1482, "[DOCS] Include tutorial for changing Batcher address", "## Description \nFor chain operators, changing the batcher address within the L1 smart contracts is an important workflow for us to provide some guidance. \n\nSome ideas where we could place this content:\n\n- A new section in the [batcher configuration page](https://docs.optimism.io/operators/chain-operators/configuration/batcher)\n- A new section within [rollup operations](https://docs.optimism.io/operators/chain-operators/management/operations)\n- A new section within [tutorials](https://docs.optimism.io/operators/chain-operators/tutorials)\n- Or we could create whole new pages under [Chain Management ](https://docs.optimism.io/operators/chain-operators/management) for managing the proposer and the batcher.\n\nI am partial to the last option.\n\n\n## Acceptance criteria\nSome basic steps in the docs to illustrate how to update the batcher address.\n\n## User stories\nThis documentation will allow chain operators to update the batcher address for their chain without having to contact dev support.\n\n\n## Resources and support\n- Zak Ayesh (feel free to reach out to me)\n\n\n## Action items", "OPEN", 0, "ZakAyesh", "2025-03-07T15:54:37Z", "2025-04-14T16:41:10Z", null, "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6tDWxo", 1481, "[DOCS] Include tutorial for changing proposer address", "## Description \nFor chains using permissioned fault proofs, changing the proposer address within the L1 smart contracts is an important workflow on which we should provide some guidance. \n\nSome ideas where we could place this content:\n\n- A new section in the [proposer configuration page](https://docs.optimism.io/operators/chain-operators/configuration/proposer)\n- A new section within [rollup operations](https://docs.optimism.io/operators/chain-operators/management/operations)\n- A new section within [tutorials](https://docs.optimism.io/operators/chain-operators/tutorials)\n- Or we could create whole new pages under [Chain Management ](https://docs.optimism.io/operators/chain-operators/management) for managing the proposer and the batcher ([ticket for batcher here](https://github.com/ethereum-optimism/docs/issues/1482)).\n\nI am partial to the last option.\n\n\n## Acceptance criteria\nSome basic steps in the docs illustrating how to update the proposer address.\n\n## User stories\nThis documentation will allow chain operators to update the proposer address for their chain without having to contact dev support.\n\n\n## Resources and support\n- Zak Ayesh (feel free to reach out to me)\n\n- Pylon issue where I describe the steps: https://app.usepylon.com/issues?conversationID=df093f58-1e53-4792-9074-9c9facba69c6\n\n## Action items\n\n", "OPEN", 0, "ZakAyesh", "2025-03-07T15:44:36Z", "2025-04-14T17:08:22Z", null, "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6MhIFT", 750, "[DOCS] Add more detail on \"Configuration Options\" pages.", "## Brief Description of the Docs Request\r\nFor the two configuration options pages:\r\n\r\n- [Execution Layer Configuration Options](https://docs.optimism.io/builders/node-operators/configuration/execution-config)\r\n- [Consensus Layer Configuration Options](https://docs.optimism.io/builders/node-operators/configuration/consensus-config)\r\n\r\nMore detail must be given on the different configuration variables and their arguments. For example, more detail on exactly what the `syncmode` configuration variable does and what exactly changing it's argument does to the node. \r\n\r\n## Description of the Documentation You'd Like\r\nWe could add an extra tab to each variables description for more in-depth information on exactly when and how to use each configuration option and how that affects the operation of the node.\r\n\r\n## Links to Related Pages\r\n- [Execution Layer Configuration Options](https://docs.optimism.io/builders/node-operators/configuration/execution-config)\r\n- [Consensus Layer Configuration Options](https://docs.optimism.io/builders/node-operators/configuration/consensus-config)\r\n\r\n## Additional Context\r\n\r\nDev support was trying to help partners with configuration issues, but it was unclear even to us what side effects different configuration options may have to begin troubleshooting issue without relying on the engineers.\r\n", "CLOSED", 0, "ZakAyesh", "2024-06-17T14:26:56Z", "2025-04-14T23:04:39Z", "2025-04-14T23:04:38Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6JnQb-", 706, "Best practices guide for node config", "<!-- please fill out the following the best to your ability and properly label the issue -->\n\n## Brief Description of the Docs Request\nWe need a best practices guide for node configurations to better educate node and chain ops\n\n## Description of the Documentation You'd Like\nWe now have a few other best practices guides that can be used as a guide or template for this request. Node operators need this. I'd imagine that chain operators would be next \ud83d\udc9f \n\n## Links to Related Pages\nbase config - https://docs.optimism.io/operators/node-operators/configuration/base-config\nconsensus config - https://docs.optimism.io/operators/node-operators/configuration/consensus-config\nexecution config - https://docs.optimism.io/operators/node-operators/configuration/execution-config\nhow to run a node in superchain - https://docs.optimism.io/operators/node-operators/rollup-node - link out to the new best practice guide from this page\n\n", "CLOSED", 0, "cpengilly", "2024-05-21T17:26:31Z", "2025-04-14T23:04:00Z", "2025-04-14T23:03:58Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6JnIUr", 704, "Add Recommended Flags for `op-node`", "<!-- please fill out the following the best to your ability and properly label the issue -->\n\n## Brief Description of the Docs Request\nWe need useful/recommended flags for `op-node`. \n\n## Description of the Documentation You'd Like\nWe already have [recommended flags](https://docs.optimism.io/operators/node-operators/configuration/base-config#recommended-flags-for-op-geth-configuration) for `op-geth` and would like to have the same developer education info for op-node\n\n## Links to Related Pages\nrecommended flags for `op-geth` - https://docs.optimism.io/operators/node-operators/configuration/base-config#recommended-flags-for-op-geth-configuration\n\n\n", "CLOSED", 0, "cpengilly", "2024-05-21T17:04:33Z", "2025-04-14T23:03:45Z", "2025-04-14T23:03:43Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOKIwiaM6It4R-", 686, "[DOCS] Update pause functionality ", "The Pause functionality described on https://docs.optimism.io/stack/security/pause is outdated, as it predates recent expansion of the pause functionality. More info can be found here:\r\n- https://gov.optimism.io/t/upgrade-proposal-4/7534\r\n- https://blog.oplabs.co/improved-superchain-incident-response/", "CLOSED", 0, "mds1", "2024-05-13T19:53:04Z", "2025-04-14T23:03:00Z", "2025-04-14T23:03:00Z", "ethereum-optimism/docs", "2025-08-31 03:28:41"]
["I_kwDOH2Qg5s6y4N4F", 586, "chain with custom rollup.json (op-node) and genesis-l2.json (op-geth) fails to get payload with custom isthmus activation time", "#### System information\n\nGeth version: `op-geth:v1.101503.2`\nCL client & version: `op-node:v1.13.0`\nOS & Version: Linux\nCommit hash : N/A\n\n#### Expected behaviour\n\nMy active sequencer should be able to build blocks\n\n#### Actual behaviour\n\nMy op-node returns the error `Engine temporary error` `failed to insert execution payload: failed to execute payload: Unsupported fork` when trying to advance its unsafe block\n\n#### Steps to reproduce the behaviour\n\nTake a correctly running OP stack system that uses custom `rollup.json` and `genesis-l2.json` files to specify its chainconfig (i.e. it doesn't use the --network CLI flag) and then add `\"isthmusTime\": 1744819200,` to the `genesis-l2.json` and add `\"isthmus_time\": 1744819200,` to the `rollup.json`. These times are 1 day prior to the Isthmus hardfork activation on sepolia. Then start your sequencers, you will see them return this error.\n\n\n#### Backtrace\n\nNo backtrace, the errors I posted above are all the errors I have\n\n\n\n\n#### Short Term Fix\n\nAdd a non-nil value for `pragueTime` in `genesis-l2.json`, such as `\"pragueTime\": 1744819200,`, which will cause the [the op-geth code snippet here that is throwing the original \"Unsupported fork\" error](https://github.com/ethereum-optimism/op-geth/blob/optimism/eth/catalyst/api.go#L756) to not enter the `if` statement. You could probably pass any non-nil time that is prior to the current blocktime for `pragueTime` and it would work;  you just need to get the return value of `api.eth.BlockChain().Config().LatestFork` to be `forks.Prague`\n", "CLOSED", 0, "Melvillian", "2025-04-17T00:41:55Z", "2025-04-17T16:00:53Z", "2025-04-17T16:00:53Z", "ethereum-optimism/op-geth", "2025-08-31 03:28:42"]
["I_kwDOH2Qg5s6yM1Ft", 581, "declare: -A: invalid option in sync-superchain-sh", "When attempting to run the prestate check [described here](https://www.notion.so/oplabs/Isthmus-Sepolia-Mainnet-1d2f153ee162800880abe1b47910c071?pvs=4#1d2f153ee16280498f4eda6147f5ca1f), I encounter an error on this line:\n\nhttps://github.com/ethereum-optimism/op-geth/blob/2b9abb39077cb88f6e8a513f09a5ea2c2569dfed/sync-superchain.sh#L36\n\nError is: \n\n```\n/var/folders/0q/st7c8k5j35n177ry_l_fy9gc0000gq/T/checkprestate2486756722/sync-superchain.sh: line 36: declare: -A: invalid option\n```\n\nI am running the following bash version:\n\n```\nGNU bash, version 3.2.57(1)-release (arm64-apple-darwin24)\nCopyright (C) 2007 Free Software Foundation, Inc.\n```\n\nAnd can repro the issue in a bash shell. \n\n```\nbash-3.2$ declare -A\nbash: declare: -A: invalid option\n```\n", "CLOSED", 0, "maurelian", "2025-04-11T20:53:02Z", "2025-04-14T15:54:09Z", "2025-04-14T08:20:42Z", "ethereum-optimism/op-geth", "2025-08-31 03:28:42"]
["I_kwDOH2Qg5s6xo8sh", 575, "prestateTracer returns an error for a specific block", "#### System information\n\nop-geth version: `1.101503.2`\nop-node version: `v1.13.0`\nOS & Version: Ubuntu 22.04\n\n#### Expected behaviour\n\nThe correct result for the RPC method:\n\n```\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":[{\"result\":{\"0x697f8acd2995956244991a1b3579416d168a5111\":{\"balance\":\"0x27ccd68afbfe6d\",\"nonce\":6,\"code\":\"0x\",\"storage\":{}},\"0xecdca28b61d398ca1e2442e7958e2724a9cf0c98\":{\"balance\":\"0x243887b18ceba9\",\"nonce\":8,\"code\":\"0x\",\"storage\":{}}}}]}\n```\n\n#### Actual behaviour\n\nA broken result, an error which does not even have the `\"error\"` tag required by the JSON-RPC 2.0 spec:\n\n```\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":[{\"txHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"error\":\"TypeError: cannot read property '0x697f8acd2995956244991a1b357941...' of null    in server-side tracer function 'result'\"}]}\n```\n\n#### Steps to reproduce the behaviour\n\n`curl` the node like\n\n```\ncurl -X POST -H \"Content-Type: application/json\" --data '{\"method\":\"debug_traceBlockByNumber\",\"params\":[\"0xc3d55b\", {\"tracer\": \"prestateTracer\", \"tracerConfig\": {\"diffMode\": true}}],\"id\":1,\"jsonrpc\":\"2.0\"}' http://localhost:8545\n```\n\n#### Comments\n\n- The only related issue we've been able to find is [this one](https://github.com/ethereum-optimism/optimism/issues/2306#issuecomment-1064275047) from 2022.\n- The [block in question, nr 12834139,](https://optimistic.etherscan.io/block/12834139) is from the pre-Bedrock era so perhaps there is an interaction with the legacy database involved here.\n", "OPEN", 0, "jkbrsn", "2025-04-08T16:18:10Z", "2025-04-14T14:46:32Z", null, "ethereum-optimism/op-geth", "2025-08-31 03:28:42"]
["I_kwDOH2Qg5s6rnROq", 523, "interop: Remove checkMessages fallback", "Once the interop devnet is torn down, we should remove the fallback RPC to `supervisor_checkMessages` introduced by https://github.com/ethereum-optimism/op-geth/pull/522. We shouldn't ever be using the old RPC in prod.", "CLOSED", 0, "Inphi", "2025-02-25T18:09:21Z", "2025-04-18T19:53:43Z", "2025-04-18T19:53:42Z", "ethereum-optimism/op-geth", "2025-08-31 03:28:42"]
["I_kwDOH2Qg5s587UNt", 220, "After pruning, op-geth prompts an error log \"missing trie node\"", "Hi, team, I am the developer of opBNB. I am trying to execute the pruning function of op-geth, because as the data increases, our node's disk usage is getting larger and larger. I noticed that op-geth retains relevant code about pruning from geth, so I thought it should be able to work directly. However, when I tried to execute the pruning command and then restart the node, the node reported an error: \"State not available, ignoring new payload\", and the block height was stuck. I use optimism in the latest code on the optimism branch, start devnet locally, and try to reproduce this issue. I found that the problem can be reproduced, but the error message is different. op-geth will directly report an error: \"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\n\r\n#### System information\r\n\r\nGeth version: optimism branch(commit hash: ec72ec6a285e85761a21d6700af8c52513fed9eb)\r\nCL client & version: optimism b4c313da5c93e8c5109954ef3b2ec4f67a913579\r\nOS & Version: macOS\r\nCommit hash : ec72ec6a285e85761a21d6700af8c52513fed9eb\r\n#### Expected behaviour\r\nAfter executing the pruning command, the node is able to run normally.\r\n\r\n#### Actual behaviour\r\n\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\" is reported in the op-geth log, and the block height is stuck.\r\n\r\n\r\n#### Steps to reproduce the behaviour\r\n1. Shut down the nodes that need to be pruned.\r\n2. Execute the pruning command: `geth snapshot prune-state --datadir {the data dir of your node}.`\r\n3. See the log of successful pruning: \"State pruning successful\".\r\n4. Start the nodes and notice that op-geth will roll back the unsafe block height by 127 blocks and continue to produce blocks based on this.\r\n5. After the unsafe height produces 1 block, the second block will be stuck and continuously print the error log: \"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\".\r\n\r\n#### Backtrace\r\n\r\n````\r\nl2-1  | + VERBOSITY=3\r\nl2-1  | + GETH_DATA_DIR=/db\r\nl2-1  | + GETH_CHAINDATA_DIR=/db/geth/chaindata\r\nl2-1  | + GENESIS_FILE_PATH=/genesis.json\r\nl2-1  | + cat /genesis.json\r\nl2-1  | + jq -r .config.chainId\r\nl2-1  | + CHAIN_ID=901\r\nl2-1  | + RPC_PORT=8545\r\nl2-1  | + WS_PORT=8546\r\nl2-1  | + '[' '!' -d /db/geth/chaindata ]\r\nl2-1  | + echo '/db/geth/chaindata exists.'\r\nl2-1  | /db/geth/chaindata exists.\r\nl2-1  | + exec geth '--datadir=/db' '--verbosity=3' --http '--http.corsdomain=*' '--http.vhosts=*' '--http.addr=0.0.0.0' '--http.port=8545' '--http.api=web3,debug,eth,txpool,net,engine' --ws '--ws.addr=0.0.0.0' '--ws.port=8546' '--ws.origins=*' '--ws.api=debug,eth,txpool,net,engine' '--syncmode=full' --nodiscover '--maxpeers=0' '--networkid=901' --rpc.allow-unprotected-txs '--authrpc.addr=0.0.0.0' '--authrpc.port=8551' '--authrpc.vhosts=*' '--authrpc.jwtsecret=/config/jwt-secret.txt' '--gcmode=archive' --metrics '--metrics.addr=0.0.0.0' '--metrics.port=6060' '--authrpc.jwtsecret=/config/test-jwt-secret.txt'\r\nl2-1  | INFO [01-23|09:26:34.108] Config environment variable found        envvar=GETH_MINER_RECOMMIT\r\nl2-1  | INFO [01-23|09:26:34.113] Enabling metrics collection \r\nl2-1  | INFO [01-23|09:26:34.113] Enabling stand-alone metrics HTTP endpoint address=0.0.0.0:6060\r\nl2-1  | INFO [01-23|09:26:34.113] Starting metrics server                  addr=http://0.0.0.0:6060/debug/metrics\r\nl2-1  | INFO [01-23|09:26:34.114] Maximum peer count                       ETH=0 LES=0 total=0\r\nl2-1  | INFO [01-23|09:26:34.114] Smartcard socket not found, disabling    err=\"stat /run/pcscd/pcscd.comm: no such file or directory\"\r\nl2-1  | INFO [01-23|09:26:34.116] Enabling recording of key preimages since archive mode is used \r\nl2-1  | WARN [01-23|09:26:34.116] Disabled transaction unindexing for archive node \r\nl2-1  | INFO [01-23|09:26:34.116] Set global gas cap                       cap=50,000,000\r\nl2-1  | INFO [01-23|09:26:34.116] Initializing the KZG library             backend=gokzg\r\nl2-1  | INFO [01-23|09:26:34.139] Allocated trie memory caches             clean=307.00MiB dirty=0.00B\r\nl2-1  | INFO [01-23|09:26:34.139] Using pebble as the backing database \r\nl2-1  | INFO [01-23|09:26:34.139] Allocated cache and file handles         database=/db/geth/chaindata cache=512.00MiB handles=524,288\r\nl2-1  | INFO [01-23|09:26:34.149] Opened ancient database                  database=/db/geth/chaindata/ancient/chain readonly=false\r\nl2-1  | INFO [01-23|09:26:34.150] State scheme set to already existing     scheme=hash\r\nl2-1  | INFO [01-23|09:26:34.159]  \r\nl2-1  | INFO [01-23|09:26:34.159] --------------------------------------------------------------------------------------------------------------------------------------------------------- \r\nl2-1  | INFO [01-23|09:26:34.159] Chain ID:  901 (unknown) \r\nl2-1  | INFO [01-23|09:26:34.159] Consensus: Optimism \r\nl2-1  | INFO [01-23|09:26:34.159]  \r\nl2-1  | INFO [01-23|09:26:34.159] Pre-Merge hard forks (block based): \r\nl2-1  | INFO [01-23|09:26:34.159]  - Homestead:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Tangerine Whistle (EIP 150): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Spurious Dragon/1 (EIP 155): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Spurious Dragon/2 (EIP 158): #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Byzantium:                   #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Constantinople:              #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Petersburg:                  #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Istanbul:                    #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Muir Glacier:                #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Berlin:                      #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - London:                      #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Arrow Glacier:               #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Gray Glacier:                #0        (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  \r\nl2-1  | INFO [01-23|09:26:34.159] Merge configured: \r\nl2-1  | INFO [01-23|09:26:34.159]  - Hard-fork specification:    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md \r\nl2-1  | INFO [01-23|09:26:34.159]  - Network known to be merged: true \r\nl2-1  | INFO [01-23|09:26:34.159]  - Total terminal difficulty:  0 \r\nl2-1  | INFO [01-23|09:26:34.159]  - Merge netsplit block:       #0        \r\nl2-1  | INFO [01-23|09:26:34.159]  \r\nl2-1  | INFO [01-23|09:26:34.159] Post-Merge hard forks (timestamp based): \r\nl2-1  | INFO [01-23|09:26:34.159]  - Shanghai:                    @0          (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md) \r\nl2-1  | INFO [01-23|09:26:34.159]  - Regolith:                    @0          \r\nl2-1  | INFO [01-23|09:26:34.159]  - Canyon:                      @0          \r\nl2-1  | INFO [01-23|09:26:34.159]  \r\nl2-1  | INFO [01-23|09:26:34.159] --------------------------------------------------------------------------------------------------------------------------------------------------------- \r\nl2-1  | INFO [01-23|09:26:34.159]  \r\nl2-1  | INFO [01-23|09:26:34.160] Loaded most recent local block           number=1674 hash=ef8c6c..047f39 td=0 age=1m31s\r\nl2-1  | INFO [01-23|09:26:34.160] Loaded most recent local finalized block number=0    hash=25888b..7cc416 td=0 age=57m19s\r\nl2-1  | WARN [01-23|09:26:34.160] Head state missing, repairing            number=1674 hash=ef8c6c..047f39 snaproot=9f7e0e..950757\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local header          number=1674 hash=ef8c6c..047f39 td=0 age=1m31s\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local block           number=1547 hash=ea27c1..e1ea55 td=0 age=5m45s\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local snap block      number=1674 hash=ef8c6c..047f39 td=0 age=1m31s\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local finalized block number=0    hash=25888b..7cc416 td=0 age=57m19s\r\nl2-1  | WARN [01-23|09:26:34.165] Enabling snapshot recovery               chainhead=1547 diskbase=1547\r\nl2-1  | INFO [01-23|09:26:34.165] Initialising Ethereum protocol           network=901 dbversion=8\r\nl2-1  | INFO [01-23|09:26:34.165] Initialized transaction indexer          limit=0\r\nl2-1  | INFO [01-23|09:26:34.165] Loaded local transaction journal         transactions=0 dropped=0\r\nl2-1  | INFO [01-23|09:26:34.165] Regenerated local transaction journal    transactions=0 accounts=0\r\nl2-1  | INFO [01-23|09:26:34.166] Chain post-merge, sync via beacon client \r\nl2-1  | INFO [01-23|09:26:34.166] Unprotected transactions allowed \r\nl2-1  | INFO [01-23|09:26:34.166] Gasprice oracle is ignoring threshold set threshold=2\r\nl2-1  | WARN [01-23|09:26:34.166] Engine API enabled                       protocol=eth\r\nl2-1  | INFO [01-23|09:26:34.166] Starting peer-to-peer node               instance=Geth/v0.1.0-unstable-ec72ec6a-20240122/linux-arm64/go1.21.6\r\nl2-1  | INFO [01-23|09:26:34.173] IPC endpoint opened                      url=/db/geth.ipc\r\nl2-1  | INFO [01-23|09:26:34.173] New local node record                    seq=1,705,998,567,560 id=d19a3e268ba2155d ip=127.0.0.1 udp=0 tcp=30303\r\nl2-1  | INFO [01-23|09:26:34.173] Started P2P networking                   self=\"enode://3dfcd24f82706c6138b6565c1039ac25d4f73143b2bf7fa68b59f974957970d0c80c3f156823292bb2ac78b55e3511e21828ad38186f9c53986242f902a07f58@127.0.0.1:30303?discport=0\"\r\nl2-1  | INFO [01-23|09:26:34.173] Loaded JWT secret file                   path=/config/test-jwt-secret.txt crc32=0x890e18e0\r\nl2-1  | INFO [01-23|09:26:34.173] HTTP server started                      endpoint=[::]:8545 auth=false prefix= cors=* vhosts=*\r\nl2-1  | INFO [01-23|09:26:34.174] WebSocket enabled                        url=ws://[::]:8546\r\nl2-1  | INFO [01-23|09:26:34.174] WebSocket enabled                        url=ws://[::]:8551\r\nl2-1  | INFO [01-23|09:26:34.174] HTTP server started                      endpoint=[::]:8551 auth=true  prefix= cors=localhost vhosts=*\r\nl2-1  | INFO [01-23|09:26:36.627] Starting work on payload                 id=0xf1a827e46744b1a9\r\nl2-1  | INFO [01-23|09:26:36.628] Updated payload                          id=0xf1a827e46744b1a9 number=1548 hash=902bfe..25e188 txs=1 withdrawals=0 gas=47617 fees=0 root=e6990f..b2d60c elapsed=1.324ms\r\nl2-1  | INFO [01-23|09:26:36.628] Stopping work on payload                 id=0xf1a827e46744b1a9 reason=delivery elapsed=1\r\nl2-1  | WARN [01-23|09:26:36.629] Ignoring already known beacon payload    number=1548 hash=902bfe..25e188 age=5m45s\r\nl2-1  | INFO [01-23|09:26:36.650] Starting work on payload                 id=0x1ba3ea315e748ab3\r\nl2-1  | ERROR[01-23|09:26:36.650] Failed to create sealing context         err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | WARN [01-23|09:26:36.650] Error building payload update            id=0x1ba3ea315e748ab3 err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | ERROR[01-23|09:26:36.751] Failed to create sealing context         err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | WARN [01-23|09:26:36.751] Error building payload update            id=0x1ba3ea315e748ab3 err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | ERROR[01-23|09:26:36.751] Error building any payload               id=0x1ba3ea315e748ab3 err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | WARN [01-23|09:26:36.751] Served engine_getPayloadV3               conn=192.168.167.4:35002 reqid=1597 duration=100.529029ms err=\"Unknown payload\"\r\nl2-1  | WARN [01-23|09:26:36.751] Served engine_getPayloadV3               conn=192.168.167.4:35002 reqid=1598 duration=\"15.667\u00b5s\"   err=\"Unknown payload\"\r\nl2-1  | INFO [01-23|09:26:36.751] Stopping work on payload                 id=0x1ba3ea315e748ab3 reason=delivery elapsed=101\r\n````\r\n\r\nI have identified the cause of the problem based on code analysis. When pruning, in order to prevent the impact of chain reorganization, the target block height for pruning is set to the bottom-most layer of difflayer by default. This conclusion can also be obtained from the pruning log: \r\n```\r\nINFO [01-23|09:25:44.052] Selecting bottom-most difflayer as the pruning target root=9f7e0e..950757 height=1547\r\n```\r\nTherefore, after pruning, only the state data of block 1547 is retained, and the state data of other blocks is deleted.\r\nAfter restarting op-geth, it found that the latest block height 1674 is missing state data, and will start to roll back the chain head until it rolls back to 1547. This can be seen from the following log\uff1a\r\n```\r\nl2-1  | WARN [01-23|09:26:34.160] Head state missing, repairing            number=1674 hash=ef8c6c..047f39 snaproot=9f7e0e..950757\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local header          number=1674 hash=ef8c6c..047f39 td=0 age=1m31s\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local block           number=1547 hash=ea27c1..e1ea55 td=0 age=5m45s\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local snap block      number=1674 hash=ef8c6c..047f39 td=0 age=1m31s\r\nl2-1  | INFO [01-23|09:26:34.164] Loaded most recent local finalized block number=0    hash=25888b..7cc416 td=0 age=57m19s\r\nl2-1  | WARN [01-23|09:26:34.165] Enabling snapshot recovery               chainhead=1547 diskbase=1547\r\n```\r\nNext, we can see 1548 blocks of high processing logs:\r\n```\r\nl2-1  | INFO [01-23|09:26:36.627] Starting work on payload                 id=0xf1a827e46744b1a9\r\nl2-1  | INFO [01-23|09:26:36.628] Updated payload                          id=0xf1a827e46744b1a9 number=1548 hash=902bfe..25e188 txs=1 withdrawals=0 gas=47617 fees=0 root=e6990f..b2d60c elapsed=1.324ms\r\nl2-1  | INFO [01-23|09:26:36.628] Stopping work on payload                 id=0xf1a827e46744b1a9 reason=delivery elapsed=1\r\nl2-1  | WARN [01-23|09:26:36.629] Ignoring already known beacon payload    number=1548 hash=902bfe..25e188 age=5m45s\r\n```\r\nAlthough the status data of 1548 has been deleted, its header, body, and other data are still present. Therefore, the newPayload method will ignore the 1548 block and print the following log:\r\n```\r\nl2-1  | WARN [01-23|09:26:36.629] Ignoring already known beacon payload    number=1548 hash=902bfe..25e188 age=5m45s\r\n```\r\nThe Code at: https://github.com/ethereum-optimism/op-geth/blob/ec72ec6a285e85761a21d6700af8c52513fed9eb/eth/catalyst/api.go#L540\r\nTherefore, when executing block 1549, the forkchoiceUpdated method threw an error:\r\n```\r\nl2-1  | INFO [01-23|09:26:36.650] Starting work on payload                 id=0x1ba3ea315e748ab3\r\nl2-1  | ERROR[01-23|09:26:36.650] Failed to create sealing context         err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | WARN [01-23|09:26:36.650] Error building payload update            id=0x1ba3ea315e748ab3 err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | ERROR[01-23|09:26:36.751] Failed to create sealing context         err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | WARN [01-23|09:26:36.751] Error building payload update            id=0x1ba3ea315e748ab3 err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\nl2-1  | ERROR[01-23|09:26:36.751] Error building any payload               id=0x1ba3ea315e748ab3 err=\"missing trie node e6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c (path ) state 0xe6990f13932a9ac0e593d193129c3d792f2181cbb8c63f18ffa32d1d3eb2d60c is not available, not found\"\r\n```\r\nThis is because in `api.eth.Miner().BuildPayload(args)`, the logic for creating the context environment for building block height is called, and the specific code is at: https://github.com/ethereum-optimism/op-geth/blob/ec72ec6a285e85761a21d6700af8c52513fed9eb/miner/worker.go#L743\r\nIf the parent block is missing the state, then the context cannot be built and an error will be returned. The reason my version reports \"State not available, ignoring new payload\" is because of this condition: `if historicalBackend, ok := w.eth.(BackendWithHistoricalState); ok {`, which is equal to true in my case.\r\nAlthough in my version, `historicalBackend.StateAtBlock` will try to re-execute the missing parent block to obtain the stateDB structure, there is a bug here: https://github.com/ethereum-optimism/op-geth/blob/ec72ec6a285e85761a21d6700af8c52513fed9eb/miner/worker.go#L749 The `Copy` method on this line does not perform a deep copy of `state.Database`, so the next line's `release()` will delete the reconstructed state data from the dirties cache, causing an error in the execution of block 1549. This error will not cause the block to fail, but it will result in a different state hash and block hash after the block is executed. Eventually, when the code reaches https://github.com/ethereum-optimism/op-geth/blob/ec72ec6a285e85761a21d6700af8c52513fed9eb/eth/catalyst/api.go#L586, an error will be thrown.\r\n\r\n#### My questions are:\r\n1. Do you have any plans for pruning support? Do you have any suggestions for fixing the issues I encountered during testing?\r\n2. Could you help me confirm if the fail reasons I have identified are correct?", "CLOSED", 0, "welkin22", "2024-01-23T11:58:19Z", "2025-04-15T23:40:19Z", "2024-02-02T05:01:40Z", "ethereum-optimism/op-geth", "2025-08-31 03:28:42"]
["I_kwDOLB-lzc6vgQtO", 643, "Airgapped Cross Chain Ether", "Depending on the outcomes of https://github.com/ethereum-optimism/design-docs/issues/225, it may be the case that we will want to have an airgap specifically for cross chain `ether` sends. This would be a \"two step\" transfer, where you register and finalize, and is meant to exist so that if a register finalizes that shouldn't, we can pause. This would prevent the worst case scenario of an invalid cross chain message finalizing that mints a ton of `ether` from the `ETHLiquidity` contract.\n\nThis would rely on a monitoring service and the ability to pause with a relatively low SLA, because we don't want to make the cross chain send take too long. If we built the two step transfer mechanism in a generic way, then its possible for any app dev to plug into it.\n\nThe major downside of this approach is that we would need to make sure the expiry window works well through a pause, one way to do it would be to `sstore` on a register and `sload` on the execute, so that the `Identifier`/`ExecutingMessage` event emission isn't needed on the execute step. A pause would mean that we manually go in and block a registered message. Not super ideal but could work for an MVP", "CLOSED", 0, "tynes", "2025-03-24T21:08:44Z", "2025-04-14T17:46:16Z", "2025-04-14T17:46:15Z", "ethereum-optimism/specs", "2025-08-31 03:28:45"]
["I_kwDODjvEJM6zAs5x", 15454, "Executing message load test", "Fill an entire devnet up to gas target with just executing messages for X hours and ensure that proxyd/ingress filtering/supervisor can stably handle the load as requested by @K-Ho ", "CLOSED", 0, "op-aaron", "2025-04-17T19:42:11Z", "2025-04-17T20:21:33Z", "2025-04-17T20:21:32Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6zAdkV", 15452, "geth: rapid disk use after State Snapshot Generation", "[Check this Explore](https://optimistic.grafana.net/goto/IGUHd7JNg?orgId=1)\n\nSometimes when a state snapshot is generated, it causes a sudden rapid disk usage that far exceeds normal usage.\n\nThis doesn't happen for all generations, but happens sometimes on base nodes.\n\n## Debugging\n\nThe snapshot comes from Rebuild: https://github.com/axelKingsley/go-ethereum/blob/b2b0e1da8cac279bf0466885d1abdc5d93402f41/core/state/snapshot/snapshot.go#L717, \nbased on the logs.\n\nI added \"[Failed to load snapshot\" to my search](https://optimistic.grafana.net/goto/MxHlOnJHg?orgId=1), and found that every time we do this snapshot generation is due to a failure to load the snapshot, because it doesn't match the head:\n\n![Image](https://github.com/user-attachments/assets/5e9ab0cc-2ba6-462d-a253-df2c8d337c4f)\n\nWhat I notice is that the `have` is being updated to the `want`, but then the `want` changes. Not yet sure why that is. Perhaps there's a secondary process or application that's messing with the snapshot?", "OPEN", 0, "axelKingsley", "2025-04-17T19:04:17Z", "2025-04-17T19:14:25Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6y-54b", 15450, "DeployConfig and Deploy.s.sol refactor work", "Creating this as a parent issue to encapsulate two child tasks.\n\n1. https://github.com/ethereum-optimism/optimism/issues/15455\n2. https://github.com/ethereum-optimism/optimism/issues/14460\n\nThe high level theme here is to align the way that we deploy contracts for testing in the monorepo with the way that we deploy them using op-deployer. \n\nBefore this work is done, an outline of the approach should be created. A call may also be useful to align on the approach.", "OPEN", 0, "maurelian", "2025-04-17T15:31:36Z", "2025-04-17T20:11:45Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6y8Qps", 15444, "Bridge Deposit Issue", "Trying to deposit some funds on my l2 chain through this command \n\n\n`cast send --rpc-url $ETH_L1_RPC --value 1ether --private-key $USER_PRIVATE_KEY $OPTIMISM_PORTAL_PROXY_ADDR\n`\n\n\n\n\n\n\n ```\ncast send --rpc-url https://ethereum-sepolia-rpc.publicnode.com --value 0.1ether --private-key 0xf745a 0xad64a9b12cf2ffcdd7ebb04d9d26f8543f8aa54a\n\nblockHash            0xc529d8657579d1e5f658d8d55d023e067ee267eef25677fa9772595c6f9802da\nblockNumber          8136395\ncontractAddress      \ncumulativeGasUsed    10343545\neffectiveGasPrice    28889037\nfrom                 0xb1353B2D920B7d52A0c900F3a5fB9582Ed73Bc73\ngasUsed              126451\nlogs                 [{\"address\":\"0xad64a9b12cf2ffcdd7ebb04d9d26f8543f8aa54a\",\"topics\":[\"0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32\",\"0x000000000000000000000000b1353b2d920b7d52a0c900f3a5fb9582ed73bc73\",\"0x000000000000000000000000b1353b2d920b7d52a0c900f3a5fb9582ed73bc73\",\"0x0000000000000000000000000000000000000000000000000000000000000000\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000049000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000016345785d8a000000000000000186a0000000000000000000000000000000000000000000000000\",\"blockHash\":\"0xc529d8657579d1e5f658d8d55d023e067ee267eef25677fa9772595c6f9802da\",\"blockNumber\":\"0x7c26cb\",\"transactionHash\":\"0x95ef1bb5dc7ad330642c33c2a2286c07fd7a6e52aba87315d55dc4807b0e9528\",\"transactionIndex\":\"0x61\",\"logIndex\":\"0xbb\",\"removed\":false}]\nlogsBloom            0xnroot                 \nstatus               1 (success)\ntransactionHash      0x95ef1bb5dc7ad330642c33c2a2286c07fd7a6e52aba87315d55dc4807b0e9528\ntransactionIndex     97\ntype                 2\nblobGasPrice         \nblobGasUsed          \nauthorizationList    \nto                   0xAD64a9B12CF2FfCDD7Ebb04d9d26f8543f8aa54a\n\n```\n\nI am not getting any funds on my L2 how to check that or suggest me any script to follow?\n", "OPEN", 0, "DSHIVAAY-23", "2025-04-17T10:52:32Z", "2025-04-17T10:52:32Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6yyKdN", 15428, "op-proposer Failed to get proposal", "I deploying op-proposer using the command below:\n\n`./op-proposer   --poll-interval=12s   --rpc.port=8560   --rollup-rpc=http://localhost:9545/   --l2oo-address=0x9C58E6076014312E612889DAb10591E423e19d13   --private-key=0x00  --l1-eth-rpc=http://101.44.25.36:8545/`\n\nand I get this err\n\n\n\npls help, how can I handle it\n\n\n\n\n", "OPEN", 0, "DSHIVAAY-23", "2025-04-16T12:28:16Z", "2025-04-17T10:33:54Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6yrG5X", 15423, "Alerts and dashboard for invalid proposer failure", "The invalid proposer occasionally fails due to gas spikes. (On Sepolia we have increased the timeout for retries, and increased the fee multiplier). But the Proofs team wasn't directly alerted (platforms was). \n\nWe should have metrics in prometheus so we can get alerted for this directly and have a dashboard.", "CLOSED", 0, "pauldowman", "2025-04-15T21:12:23Z", "2025-04-15T21:58:12Z", "2025-04-15T21:58:12Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ydkmk", 15402, "Update Netchef to produce devnet env files that devnet-sdk accepts", "Code location: [ethereum-optimism/infrastructure-services/netchef/pkg/devnet_env.go](https://github.com/ethereum-optimism/infrastructure-services/blob/main/netchef/pkg/devnet_env.go)", "OPEN", 0, "teddyknox", "2025-04-14T20:08:58Z", "2025-04-14T20:08:58Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ydhwE", 15401, "Ensure netchef compliance with devnet-sdk env schema", "Ensure netchef compliance: This test will be more difficult because netchef lives in the closed-source [infrastructure-services](https://github.com/ethereum-optimism/infrastructure-services) repo, and this repo already has a golang dependency on the optimism monorepo. This means the monorepo cannot pull in netchef by golang dependency in order to run a test, and necessitates defining a versioned manual dependency on netchef within the optimism monorepo so that a CI task may circumvent circular dependency checks and verify schema compliance in a unit test.", "OPEN", 0, "teddyknox", "2025-04-14T20:03:04Z", "2025-04-14T20:05:28Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ydhgI", 15400, "Add test ensuring kurtosis-devnet adheres to denvet-sdk env schema", "", "OPEN", 0, "teddyknox", "2025-04-14T20:02:36Z", "2025-04-14T20:05:19Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ydhYs", 15399, "Add test ensuring that devnet-sdk only accepts devnet env files in the defined schema", "Ensure devnet-sdk compliance: Add a check during the initialization of devnet-sdk for testing that the input devnet env file is valid according to the schema", "OPEN", 0, "teddyknox", "2025-04-14T20:02:23Z", "2025-04-14T20:05:09Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ydhTO", 15398, "Define a JSON schema for devnet env files in the optimism monorepo", "", "OPEN", 0, "teddyknox", "2025-04-14T20:02:13Z", "2025-04-14T20:05:01Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ycaKd", 15395, "cannon: Add timeout for preimage oracle to prevent VM from stalling", "Currently, when the host cannot process a preimage request, it only logs an error without notifying the client. This creates a problematic scenario where:\n\n1. The client program makes a preimage request\n2. The host fails to process it and only logs an error\n3. The client hangs indefinitely waiting for a response that will never come\n\nWhile this behavior provides good protection for the host against invalid requests, it causes cannon executions to stall permanently when preimage requests fail.\n\nWhat we should do is add a generous timeout for requests to the [`ProcessPreimageOracle`](https://github.com/ethereum-optimism/optimism/blob/d032aea4ab029918b4ac0cec6f0a07de08590ed3/cannon/cmd/run.go#L205). This would allow the VM to terminate gracefully when a preimage request is likely invalid, ensuring that stalled executions short-circuit so the challenger knows what's happened.", "OPEN", 0, "Inphi", "2025-04-14T18:08:48Z", "2025-04-14T18:08:48Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6yWFr3", 15385, "Reduce `setL1BlockValuesEcotone` frequency", "The L1Block.sol contract states that `The L1Block predeploy gives users access to information about the last known L1 block. Values within this contract are updated **once per epoch** (every L1 block) and can only be set by the \"depositor\" account, a special system address. Depositor account transactions are created by the protocol whenever we move to a new epoch.` That is, L1Block information is expected to be set once per epoch. However, `setL1BlockValuesEcotone` is actually called per L2 block. I notice that L2 blocks in the same epoch have the same L1 information. What is the need of setting L1 block values for every L2 block?\n\n", "OPEN", 0, "LampardNguyen234", "2025-04-14T07:24:25Z", "2025-04-14T23:11:21Z", null, "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6xcsBO", 15271, "devnet-sdk/devstack: match functions and labels", "Selecting a service, like an op-node or EL, shouldn't be as difficult as manually retrieving the known IDs, inspecting each service, and selecting one, or doing hardcoded `ids[0]` type lookups.\n\nInstead, we should change the getter functions to take a `Matcher[ID, Service]`, which IDs implement (just identity matcher), but which we can program additional lookups with.\nE.g. `ActiveSequencer`, `Any`, `Labeled(OpRethVendor)`, etc.\n\nThe \"vendor\" should be a kind of label, attached when relevant/known, to identify the kind of client. E.g. op-reth vs op-geth, or op-node vs op-rs, etc.\n\n\n", "CLOSED", 0, "protolambda", "2025-04-07T14:36:43Z", "2025-04-14T20:13:20Z", "2025-04-14T20:13:20Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6xa2o_", 15268, "devnet-sdk/devstack: create DSL shims for each service, with Escape functions", "Create shims for each service (shim in dsl, wrapping around the respective service interface of the stack package), so we can start writing tests and porting over tests.\n\nAdd Escape function to each shim, that exposes the underlying service. We can then find usages of those escape calls, and extend the DSL to support the tests better, without blocking test migration.\n\n", "CLOSED", 0, "protolambda", "2025-04-07T11:52:58Z", "2025-04-14T20:44:33Z", "2025-04-14T20:44:33Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6xPHdR", 15251, "Create op-program tag with Sepolia hardfork time", "We need a new op-program release for the Isthmus hardfork for Sepolia.", "CLOSED", 0, "pauldowman", "2025-04-04T23:12:35Z", "2025-04-14T20:48:57Z", "2025-04-14T20:48:57Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6xCABC", 15214, "op-program: Incorrect error type when timestamp invariant is broken", "_Spearbit audit finding_\n\n**Description**\nSimilarly to issue #10, when the timestamp invariant is broken the error message is untyped and and the check in isInvalidMessageError will return false for them.\n\nWhile no path has been so far found to exploit this particular error -- this should be changed to a properly typed error message.\n\n", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:12:20Z", "2025-04-17T20:20:35Z", "2025-04-17T20:20:34Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6vMvH3", 14988, "op-program: Incorrect error type in initiating message block not found leads to invalid fault proof", "This was discovered during a spearbit audit. Where an untyped error propagated during hazard checks does not result in block replacement.\n\nThere are two areas where this occurs:\n- when the log index of the message being executed doesn't exist - https://github.com/ethereum-optimism/optimism/blob/78e668925784a68395d82bdd09a7028618c759d6/op-program/client/interop/consolidate.go#L300C2-L300C4\n- when the referenced block number of the initiating message isn't in the canonical oracle - https://github.com/ethereum-optimism/optimism/blob/78e668925784a68395d82bdd09a7028618c759d6/op-program/client/interop/consolidate.go#L356\n\nIn both cases, the error should be typed as `ErrConflict` to trigger block replacement.\n\n", "CLOSED", 0, "Inphi", "2025-03-21T19:45:03Z", "2025-04-17T04:15:37Z", "2025-04-17T04:15:36Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6vCSZ-", 14975, "op-program: Quadratic resource consumption in validating existence of initiating messages", "per early audit findings:\n\nContains iterates through each log in the entire block, requiring all receipts from the block being processed, that is a O(n) complexity with n being the block size.\n\nAs this function is called for each executing message to check if the corresponding initiating message exists, in the worst case scenario this is O(n^2) with the size of the block.\n\nWith the cost of producing logs and executing messages being low in terms of gas, this is likely to result in significant resource consumption above the necessary.\n\nSince the consolidation process is already O(m^2) with the number of chains, this could lead to the impossibility of proving a state transition as the number of chains scale.\n\nIF other issues are found that further compound resource consumption, this could lead to more severe impact even with small number of chains in the dependency set.", "CLOSED", 0, "Inphi", "2025-03-20T20:49:22Z", "2025-04-17T04:54:48Z", "2025-04-17T04:54:48Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6vCRe8", 14974, "E2E testing of the Super DG and challenger", "Dup the existing e2e DG cases for the interop case with Supersystem.\n\nblocked by:\n- https://github.com/ethereum-optimism/optimism/issues/14804\n- op-deployer support for the OPCM migration ", "CLOSED", 0, "Inphi", "2025-03-20T20:47:24Z", "2025-04-15T20:00:41Z", "2025-04-15T20:00:40Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ttLk6", 14815, "Finalize withdrawals on L2 for testing (OPCM - Upgrades)", "Kelvin has created some withdrawals on OP Sepolia:\n- ", "CLOSED", 0, "maurelian", "2025-03-12T15:10:23Z", "2025-04-14T20:04:15Z", "2025-04-14T20:04:15Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6tFw27", 14730, "Update cannon-stf-verify when latest 64-bit Cannon stabilizes", "### Description\n\nAs part of https://github.com/ethereum-optimism/optimism/issues/13447, we are making new changes to 64-bit Cannon.  As a result, we will have to temporarily disable the [cannon diff testing for 64-bit Cannon](https://github.com/ethereum-optimism/optimism/blob/91a0be3e8b81799ad42f64cd4b0a00ac8b8334c7/cannon/Dockerfile.diff#L41-L46).  This is because the state transition function is changing (necessitating a new [`StateVersion`](https://github.com/ethereum-optimism/optimism/blob/91a0be3e8b81799ad42f64cd4b0a00ac8b8334c7/cannon/mipsevm/versions/version.go#L26-L27)), so we now expect to see a diff between the version of Cannon in develop and the version that was tagged at [`cannon/v1.4.0`](https://github.com/ethereum-optimism/optimism/blob/91a0be3e8b81799ad42f64cd4b0a00ac8b8334c7/cannon/Dockerfile.diff#L28).\n\nWe should re-enable this diff testing once the VM code is stable. ", "CLOSED", 0, "mbaxter", "2025-03-07T21:23:57Z", "2025-04-17T15:35:23Z", "2025-04-17T15:35:22Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6s6NvY", 14683, "OP Deployer v0.0.11 generates incorrect L1 hash on Pectra networks", "When deploying a chain to an L1 with Pectra activated, the L1 block hash emitted by `op-deployer inspect rollup` is incorrectly generated. For example, a chain starting at Sepolia block [7086425](https://sepolia.etherscan.io/block/7846025) has the hash `0xcd22aea81b468f56e781f099f2583575ec01819e87a01a18797bc8e460c7a2bb` in the state file when the actual block hash is `0xe8b39adb6388ce828f4598aa95b32befe384da784539d9be53a2162a9e26afed`\n\nThis is likely because we use Geth's `ethclient` library to fetch the start block header. `ethclient` returns a `types.Header` struct, which calculates the hash on-the-fly based on the consensus rules of the included Geth version. Instead, we need to perform a raw RPC call to `eth_getHeaderByNumber` and store the block number/hash directly in state. We can also use this as an opportunity to clean up the start by only storing the relevant fields in the state, i.e. `hash` and `number`.\n\nThis will need to be cherry-picked to the `0.0.x`, `0.2.x`, and `develop` lineages.\n\nReported by: Alchemy", "CLOSED", 0, "mslipper", "2025-03-06T16:56:05Z", "2025-04-16T16:38:19Z", "2025-04-16T16:38:19Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6smrgH", 14638, "Remove game type (uint32).max hack", "As per TODO in DeputyGuardianModule.t.sol:\n```\n // Game type(uint32).max is reserved for setting the respectedGameTypeUpdatedAt timestamp.\n        // TODO(kelvin): Remove this once we've removed the hack.\n```", "CLOSED", 0, "ajsutton", "2025-03-05T01:03:58Z", "2025-04-14T14:49:38Z", "2025-04-14T14:49:38Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6qxgaY", 14449, "op-dispute-mon: Update credit claim timing rules", "The changes to when credit can be claimed affects dispute-mon's rules for `Found unclaimed credit` and early withdrawal of credit (https://github.com/ethereum-optimism/optimism/blob/4428d1070fc7a6c3f072d56afa8a3a26a46a9e09/op-dispute-mon/mon/bonds/monitor.go#L87-L115).\n\nReview these rules and update for new versions of the contracts. Monitoring should be unchanged for contracts prior to FaultDisputeGame 1.4.0.", "CLOSED", 0, "ajsutton", "2025-02-20T05:15:31Z", "2025-04-14T04:07:17Z", "2025-04-14T04:07:16Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6ivr2g", 13331, "Modify Test Setup to use `op-deployer` rather than `Deploy.s.sol` (OPCM - Upgrade 13)", "In order to standardize on the use of `op-deployer` for deployment, we should enshrine in our test setup as the method for deploying contracts.\n\nThe invocation of `op-deployer` could be done in one of two ways: \n1. via the `just test` command. \n2. via the FFI calls in `Deploy.s.sol`.\n\nMy instinct is that the first will be cleaner.\n\nEither way, the deployed contracts will then need to be saved by reading from the resulting `state.json` file created by `op-deployer`, and writing to the [`deploymentOutFile`](https://github.com/ethereum-optimism/optimism/blob/upgrade-against-registry/packages/contracts-bedrock/scripts/Artifacts.s.sol#L43). \n\nIf the first option is chosen, then it should be possible to generate the `deploymentOutfile` using `jq` directly. \n\nOtherwise that work will need to be done using forge-std's json parsing and fs utilities. An example of the latter approach (solidity driven), can be seen in #13323. \n\n", "CLOSED", 0, "maurelian", "2024-12-10T15:12:17Z", "2025-04-17T20:11:06Z", "2025-04-17T20:11:05Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDODjvEJM6bDAus", 12540, "op-challenger: Register additional PreimageOracles", "Add a CLI arg to op-challenger that configures it to monitor a PreimageOracle at a specific address even if it is not currently used by a game implementation.  This can be used to prevent invalid large preimages being added to a new PreimageOracle before it is used in a game implementation, and then later when games are created using that oracle use the previously published invalid preimage to affect game outcomes.\n\nNot sure if this is worth doing as deploying a new PreimageOracle isn't common and it's likely easier to just manually check the `proposals` array is still empty within 24 hours of using it for a game implementation. It's also pretty similar to having invalid proposals in a new DisputeGameFactory deployment prior to getting challenger fully setup.", "CLOSED", 0, "ajsutton", "2024-10-21T04:06:18Z", "2025-04-14T04:06:09Z", "2025-04-14T04:06:09Z", "ethereum-optimism/optimism", "2025-08-31 03:29:09"]
["I_kwDOKIsnqM6zALVw", 909, "tryStorageLayoutLookup in AccountAccessParser should be able to handled tightly packed variables", "> We should make whatever decoding approach we come up with mirror what it looks like in tenderly.\n\n\n\nRight now the `tryStorageLayoutLookup` function has the following function signature: \n```solidity\nfunction tryStorageLayoutLookup(string memory _contractName, bytes32 _slot, bytes32 _oldValue, bytes32 _newValue)\n        internal\n        view\n        returns (DecodedSlot memory decoded_)\n```\n\nIn reality, many changes can occur in a single slot, so we could change this function to return an array: \n```solidity\nfunction tryStorageLayoutLookup(string memory _contractName, bytes32 _slot, bytes32 _oldValue, bytes32 _newValue)\n        internal\n        view\n        returns (DecodedSlot[] memory decoded_)\n```\n\nright now, if we detected a slot that is shared, we don't try to decode it. Completing this issue would require being able to decode these shared slots: \n\n```solidity\n            if (isSlotShared(layout, _slot)) {\n                return DecodedSlot({kind: \"\", oldValue: \"\", newValue: \"\", summary: \"\", detail: \"\"});\n            }\n```", "OPEN", 0, "blmalone", "2025-04-17T18:20:34Z", "2025-04-17T18:38:08Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 03:29:10"]
["I_kwDOKIsnqM6yoEL2", 888, "Custom Additional Per-Task Validations", "We currently lack some validations with the new task framework that were happening with the old framework. I think we need a way to add back per-task custom validations, especially those which we now exclude as _expected errors_.\n\nThe new scops task framework works with template Solidity scripts that also define generic validations that run for all tasks. But then it is expected that the on-chain `StandardValidator` returns some errors. E.g. in the case of the Sepolia Unichain Isthmus prestate upgrade (U15), we define the following list of expected erros:\nhttps://github.com/ethereum-optimism/superchain-ops/blob/f42ea91b0951acc67c4453a09b25412789eb2754/src/improvements/tasks/sep/012-opcm-update-prestate-v300-uni/config.toml#L10-L17\n\nBut what's now missing are assertions what these values should be _instead_. E.g. the first expected error is `PROXYA-10: ProxyAdmin owner is not set to L1 PAO multisig - expected`. But we don't have any assertions who should be the right PAO instead. **Worst case, this can lead to us ignoring wrong values because we just dismiss this check as an expected error.**\n\nI see two solutions\n1. Add optional validation Solidity scripts to tasks, that would probably inherit the template so all fields and functions are available as they are in the template. So there would be a solidity script for a task like in the old framework, but only optionally. This option solves the problem very generically.\n2. Improve the `StandardValidator` errors to include contextual information, so that the asserted errors also assert on the alternative field values instead. E.g. in the above example, the error code `PROXYA-10` could be extended to include the actually found owner in parenthesis, like `PROXYA-10(0x<actual-address>)`. This would probably work for most errors and ensure when we expect errors, we also implicitly assert on the alternative value.", "OPEN", 0, "sebastianst", "2025-04-15T15:33:30Z", "2025-04-15T16:05:23Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 03:29:10"]
["I_kwDOKIsnqM6tgm9t", 741, "Create Upgrade 14 task(s) for Mainnet", "\nCreate Upgrade 14 task(s) for Mainnet for:\n- OP\n- Ink\n- Soneium", "CLOSED", 0, "mbaxter", "2025-03-11T15:36:46Z", "2025-04-15T15:11:48Z", "2025-04-15T15:11:47Z", "ethereum-optimism/superchain-ops", "2025-08-31 03:29:10"]
["I_kwDOKIsnqM6tgmeL", 740, "Create Upgrade 14 task(s) for Sepolia", "## Description\n\nCreate Upgrade 14 task(s) for Sepolia\n\nFor guidance, see Upgrade 13 work:\n- OPCM template - https://github.com/ethereum-optimism/superchain-ops/pull/664\n- Sep: op, ink, soneium - https://github.com/ethereum-optimism/superchain-ops/pull/709\n- Sep: base - https://github.com/ethereum-optimism/superchain-ops/pull/719\n- Sep: unichain - https://github.com/ethereum-optimism/superchain-ops/pull/720\n- Mainnet: op, ink, soneium - https://github.com/ethereum-optimism/superchain-ops/pull/721\n- Mainnet: base - https://github.com/ethereum-optimism/superchain-ops/pull/722\n- Mainnet: unichain - https://github.com/ethereum-optimism/superchain-ops/pull/723", "CLOSED", 0, "mbaxter", "2025-03-11T15:36:20Z", "2025-04-16T20:33:53Z", "2025-04-16T20:33:53Z", "ethereum-optimism/superchain-ops", "2025-08-31 03:29:10"]
["I_kwDOJ_r-bs6i9ndt", 784, "validation: refactor superchain-versions check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:26:32Z", "2025-04-15T14:09:10Z", "2025-04-15T14:09:10Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9nJb", 783, "validation: refactor superchain-genesis check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:25:38Z", "2025-04-15T14:09:43Z", "2025-04-15T14:09:43Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9nAz", 782, "validation: refactor superchain-config check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:25:19Z", "2025-04-15T14:10:06Z", "2025-04-15T14:10:06Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9mzY", 781, "validation: refactor start-block check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:24:45Z", "2025-04-15T14:10:05Z", "2025-04-15T14:10:05Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9msW", 780, "validation: refactor security-configs check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:24:26Z", "2025-04-15T14:10:05Z", "2025-04-15T14:10:05Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9mmY", 779, "validation: refactor rollup-config check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:24:10Z", "2025-04-15T14:10:05Z", "2025-04-15T14:10:05Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9mXH", 778, "validation: refactor resource-config check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:23:38Z", "2025-04-15T14:10:04Z", "2025-04-15T14:10:04Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9mJF", 777, "validation: refactor optimism-portal-2 check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:23:01Z", "2025-04-15T14:10:04Z", "2025-04-15T14:10:04Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9l7o", 776, "validation: refactor key-handover check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:22:25Z", "2025-04-15T14:10:03Z", "2025-04-15T14:10:03Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9lwE", 775, "validation: refactor gpo-params check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:21:58Z", "2025-04-15T14:10:03Z", "2025-04-15T14:10:03Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9lma", 774, "validation: refactor governed-by-optimism check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:21:34Z", "2025-04-15T14:10:33Z", "2025-04-15T14:10:33Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9lXn", 773, "validation: refactor gas-token check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:20:57Z", "2025-04-15T14:10:32Z", "2025-04-15T14:10:32Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9k-V", 771, "validation: refactor fault-game-params check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:19:54Z", "2025-04-15T14:10:32Z", "2025-04-15T14:10:32Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9kxq", 770, "validation: refactor data-availability check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:19:20Z", "2025-04-15T14:10:32Z", "2025-04-15T14:10:32Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOJ_r-bs6i9km6", 769, "validation: refactor chainID check", "", "CLOSED", 0, "bitwiseguy", "2024-12-11T21:18:51Z", "2025-04-15T14:10:31Z", "2025-04-15T14:10:31Z", "ethereum-optimism/superchain-registry", "2025-08-31 03:29:16"]
["I_kwDOMMiGhs6xdIVD", 374, "Support websocket on supersim L2s", "Support websocket for op chain a and op chain b.\nOnly the L1 currently supports websocket", "CLOSED", 0, "OscBacon", "2025-04-07T15:15:07Z", "2025-04-16T19:33:20Z", "2025-04-16T19:10:29Z", "ethereum-optimism/supersim", "2025-08-31 03:29:22"]
["I_kwDOFpg0Ns6zRLg7", 1130, "OL token cannot be withdrawn", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\nThe OL token (`0xeeb221a559f4ad1746f41460807e56d06d198a58`) specifies a Base bridge override to ensure it can be listed in this repository, but the `burn` function always reverts. \n\nsuperbridge.app sources from this repository and users are running into issues because they're not able to withdraw.\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\nThe OL token should be listed for deposits only.\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description: OL token is not able to be withdrawn\n- Steps to Reproduce: Navigate to https://superbridge.app/base/ol?direction=withdraw and enter an amount\n", "OPEN", 0, "AlexBHarley", "2025-04-21T05:50:10Z", "2025-04-21T05:50:10Z", null, "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 03:31:05"]
["I_kwDOL-xLQ86zhWCZ", 293, "[acceptance] Get CI Stable", "CI success rate is currently less than 10%. Lets get it above 75%.", "CLOSED", 0, "scharissis", "2025-04-22T18:50:03Z", "2025-04-24T06:26:52Z", "2025-04-24T06:26:52Z", "ethereum-optimism/infra", "2025-08-31 03:31:05"]
["I_kwDOL-xLQ86vZMTu", 259, "[acceptance] Release Readiness Process", "Define and publish guidance around releasing devnets, using our acceptance criteria.", "CLOSED", 0, "scharissis", "2025-03-24T09:35:33Z", "2025-04-22T08:10:22Z", "2025-04-22T08:10:22Z", "ethereum-optimism/infra", "2025-08-31 03:31:05"]
["I_kwDOL-xLQ86sxzn_", 217, "[acceptance] Add Release Readiness docs to PM repo/site", "Add our release readiness process doc into the pm repo, alongside the SDLC, and show it in the [program management book](https://pm.optimism.io/).", "CLOSED", 0, "scharissis", "2025-03-05T22:52:58Z", "2025-04-22T18:35:10Z", "2025-04-22T18:35:09Z", "ethereum-optimism/infra", "2025-08-31 03:31:05"]
["I_kwDOKSJyfM6z73T2", 753, "`.extend(walletActionsL2())` overwrites `wallet.interop` instead of extending it.", "**Bug Description**\n\n`.extend(walletActionsL2())` overwrites `wallet.interop` instead of extending it, so you only get four functions instead of all the expected functions after an `.extend(publicActionsL2()).extend(walletActionsL2())`.\n\n\n**Steps to Reproduce**\n\n1. Create the directory structure.\n\n   ```sh\n   pnpm init\n   pnpm install viem\n   pnpm install @eth-optimism/viem\n   ```\n\n2. Create the application as `app.mjs`:\n\n   ```javascript\n   import {\n       createWalletClient,\n       http,\n       publicActions,\n       getContract\n   } from 'viem'\n   import { privateKeyToAccount } from 'viem/accounts'\n   import { interopAlpha0 } from '@eth-optimism/viem/chains'\n   import { walletActionsL2, publicActionsL2 } from '@eth-optimism/viem'\n\n   const privateKey = \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\"\n   const account = privateKeyToAccount(privateKey)\n\n   const wallet = createWalletClient({\n     chain: interopAlpha0,\n     transport: http(),\n     account\n   }).extend(publicActions)\n       .extend(publicActionsL2())\n       .extend(walletActionsL2())\n\n   console.log(\"wallet.interop after .extend(publicActionsL2()) and .extend(walletActionsL2())\")\n   console.log(wallet.interop)\n\n   const wallet2 = createWalletClient({\n     chain: interopAlpha0,\n     transport: http(),\n     account\n   }).extend(publicActions)\n       .extend(publicActionsL2())\n  \n   console.log(\"wallet.interop after .extend(publicActionsL2()) only\")\n   console.log(wallet2.interop)\n   ```\n\n3. Run the application.\n\n   ```sh\n   node app.mjs\n   ```\n\n   The output will be:\n\n   ```\n   wallet.interop after .extend(publicActionsL2()) and .extend(walletActionsL2())\n   {\n     sendCrossDomainMessage: [Function: sendCrossDomainMessage],\n     relayCrossDomainMessage: [Function: relayCrossDomainMessage],\n     sendSuperchainERC20: [Function: sendSuperchainERC20],\n     sendETH: [Function: sendETH]\n   }\n   wallet.interop after .extend(publicActionsL2()) only\n   {\n     buildExecutingMessage: [Function: buildExecutingMessage],\n     estimateSendCrossDomainMessageGas: [Function: estimateSendCrossDomainMessageGas],\n     estimateRelayCrossDomainMessageGas: [Function: estimateRelayCrossDomainMessageGas],\n     estimateSendSuperchainERC20Gas: [Function: estimateSendSuperchainERC20Gas],\n     estimateSendETHGas: [Function: estimateSendETHGas],\n     getCrossDomainMessages: [Function: getCrossDomainMessages],\n     getCrossDomainMessageStatus: [Function: getCrossDomainMessageStatus],\n     simulateSendCrossDomainMessage: [Function: simulateSendCrossDomainMessage],\n     simulateRelayCrossDomainMessage: [Function: simulateRelayCrossDomainMessage],\n     simulateSendSuperchainERC20: [Function: simulateSendSuperchainERC20],\n     simulateSendETH: [Function: simulateSendETH]\n   }\n   ```\n\n**Expected behavior**\n\nI'd.expect `.extend` to extend `wallet.interop` rather than overwrite it. If that is impossible, create `wallet.publicInterop` and `wallet.walletInterop`.\n\n**Environment Information:**\n\nOS: WSL and MacOS\nPackage version: `@eth-optimism/viem` version 0.4.7\n\n**Configurations:**\n\nN/A\n\n**Logs:**\n\nN/A\n\n**Additional context**\n\nN/A\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "qbzzt", "2025-04-25T02:11:25Z", "2025-04-25T02:11:25Z", null, "ethereum-optimism/ecosystem", "2025-08-31 03:31:05"]
["I_kwDOKSJyfM6zV7I9", 750, "Relayer design doc", "", "CLOSED", 0, "tremarkley", "2025-04-21T17:03:51Z", "2025-09-08T17:12:07Z", "2025-09-08T17:12:07Z", "ethereum-optimism/ecosystem", "2025-08-31 03:31:05"]
["I_kwDOKSJyfM6ybyMF", 744, "L2ToL2CDM RelayedMessage specs & code changes", "Design doc has been merged: #729 \n\nJust requires & followup with the spec and implementation", "CLOSED", 0, "hamdiallam", "2025-04-14T16:54:49Z", "2025-04-21T03:43:29Z", "2025-04-21T03:43:29Z", "ethereum-optimism/ecosystem", "2025-08-31 03:31:05"]
["I_kwDOKSJyfM6yakEe", 743, "Add USDT0 bridging activity", "Per designs, add section to educate users on how to bridge assets from stargate: https://www.figma.com/design/BI6WbU09y81vQ8jaQ131OC/Points-Programme?node-id=2103-16291&t=wjpjyrvakdFLqW5O-4", "CLOSED", 0, "pharger", "2025-04-14T14:45:30Z", "2025-04-21T17:00:50Z", "2025-04-21T17:00:50Z", "ethereum-optimism/ecosystem", "2025-08-31 03:31:05"]
["I_kwDOKSJyfM6xaikL", 727, "mock sponsored sender", "Provide a json-rpc server that can act as an endpoint for sponsored transactions. The relayer will leverage this to abstract away key management and scalability\n\nThis endpoint implements\neth_chainId\neth_sendTransaction\n\n\nInfluenced by, h/t @jakim929 : https://github.com/jakim929/mock-jsonrpc-walle", "CLOSED", 0, "hamdiallam", "2025-04-07T11:21:17Z", "2025-04-21T03:43:27Z", "2025-04-21T03:43:27Z", "ethereum-optimism/ecosystem", "2025-08-31 03:31:05"]
["I_kwDOKSJyfM6kBDot", 598, "Dev Console: API Key Functionality", "This issue covers the creation and retrieval of API keys for dev console users. There is an [initial service implemented in k8s](https://github.com/ethereum-optimism/k8s/tree/master/kustomize/ecosystem/ecosystem-api-key-service) that can form the basis for starting this work. \n\nStarting from the above, some considerations: \n* Some architectural work is needed to ensure this works securely and in a scalable way, and we should ensure docker-compose works easily for maintenance. \n* This service should be fully tested. \n* A frontend flow is needed for the console: \n\n1. User logs in/signs up (there is some work needed here around how/if we can connect their profile to their Agora profile on the Foundation side) \n3. An API key is generated\n4. They can check their profile for that API key once generated\n** Design is Required for the frontend portion**\n\nEng Tasks\n- [x] #689\n- [x] #682\n- [x] #683\n- [x] #684\n- [x] #685\n- [x] #686\n- [x] #687\n- [x] #688\n- [x] #749\n", "CLOSED", 0, "fainashalts", "2024-12-20T01:34:39Z", "2025-04-21T22:56:22Z", "2025-04-21T22:56:22Z", "ethereum-optimism/ecosystem", "2025-08-31 03:31:05"]
["I_kwDOKIwiaM6yNWDa", 1567, "<!-- Write any additional comments here when opening the pull request -->", "<!-- Write any additional comments here when opening the pull request -->\r\n\r\n> **Note**\r\n>This code review checklist is intended to serve as a starting point for the author and reviewer, although it may not be appropriate for all types of changes (e.g. fixing a spelling typo in documentation).  For more in-depth discussion of how we think about code review, please see [Code Review Guidelines](../blob/main/docs/CODE_REVIEW_GUIDELINES.md).\r\n\r\n# Author\r\n<!-- NOTE: Do not modify these when initially opening the pull request.  This is a checklist template that you tick off AFTER the pull request is created. -->\r\n\r\n- [x] **Self-review** your own code in GitHub's web interface[^1]\r\n- [x] Add **automated tests** as appropriate\r\n- [x] Update the [**manual tests**](../blob/main/docs/testing/manual_testing)[^2] as appropriate\r\n- [ ] Check the **code coverage**[^3] report for the automated tests\r\n- [x] Update **documentation** as appropriate (e.g [**README.md**](../blob/main/README.md), [**Architecture.md**](../blob/main/docs/Architecture.md), [**CHANGELOG.md**](../blob/main/CHANGELOG.md), etc.)\r\n- [x] **Run the app** and try the changes\r\n- [x] Pull in the latest changes from the **main** branch and **squash** your commits before assigning a reviewer[^4]\r\n\r\n> **Note**\r\n> It is good practice to provide before and after UI  **screenshots** in the description of this PR. This is only applicable for changes that modify the UI.\r\n\r\n# Reviewer\r\n\r\n- [ ] Check the code with the [Code Review Guidelines](../blob/main/docs/CODE_REVIEW_GUIDELINES.md) **checklist**\r\n- [ ] Perform an **ad hoc review**[^5]\r\n- [ ] Review the **automated tests**\r\n- [ ] Review the **manual tests**\r\n- [ ] Review the **documentation**, [**README.md**](../blob/main/README.md), [**Architecture.md**](../blob/main/docs/Architecture.md), etc. as appropriate\r\n- [ ] **Run the app** and try the changes[^6]\r\n\r\n[^1]: _Code often looks different when reviewing the diff in a browser, making it easier to spot potential bugs._\r\n[^2]: _While we aim for automated testing of the application, some aspects require manual testing. If you had to manually test something during development of this pull request, write those steps down._\r\n[^3]: _While we are not looking for perfect coverage, the tool can point out potential cases that have been missed. Code coverage can be generated with: `./gradlew check` for Kotlin modules and `./gradlew connectedCheck -PIS_ANDROID_INSTRUMENTATION_TEST_COVERAGE_ENABLED=true` for Android modules._\r\n[^4]: _Having your code up to date and squashed will make it easier for others to review. Use best judgement when squashing commits, as some changes (such as refactoring) might be easier to review as a separate commit._\r\n[^5]: _In addition to a first pass using the code review guidelines, do a second pass using your best judgement and experience which may identify additional questions or comments. Research shows that code review is most effective when done in multiple passes, where reviewers look for different things through each pass._\r\n[^6]: _While the CI server runs the app to look for build failures or crashes, humans running the app are more likely to notice unexpected log messages, UI inconsistencies, or bad output data. Perform this step last, after verifying the code changes are safe to run locally._\n\n_Originally posted by @HonzaR in https://github.com/Electric-Coin-Company/zashi-android/pull/1848_@", "CLOSED", 0, "Iambarry1", "2025-04-11T22:23:35Z", "2025-04-26T09:36:59Z", "2025-04-14T23:00:32Z", "ethereum-optimism/docs", "2025-08-31 03:31:06"]
["I_kwDOLB-lzc6znjcd", 677, "Clean up RPC docs filesystem", "- Move the existing RPC specs all into one /protocol/rpc directory. E.g. the supervisor RPC is already specified.\n- Add references to the docs we moved these out of.\n- Create a document for each RPC namespace. E.g. rpc-admin.md, rpc-optimism.md, rpc-engine.md, rpc-interop.md, rpc-supervisor.md, rpc-opp2p.md, etc.", "OPEN", 0, "emhane", "2025-04-23T10:16:16Z", "2025-04-23T10:31:36Z", null, "ethereum-optimism/specs", "2025-08-31 03:31:11"]
["I_kwDOLB-lzc6zeCLx", 674, "op-stack: document RPCs", "- Move the existing RPC specs all into one `/protocol/rpc` directory. E.g. the supervisor RPC is already specified.\n- Add references to the docs we moved these out of. \n- Create a document for each RPC namespace. E.g. `rpc-admin.md`, `rpc-optimism.md`, `rpc-engine.md`, `rpc-interop.md`, `rpc-supervisor.md`, `rpc-opp2p.md`, etc.\n- Call out when an RPC method has different uses depending on scope. E.g. `admin_start` is available in most Go monorepo services, but start behavior may be slightly different for some. And op-node has a few extra `admin` endpoints that aren't available anywhere else.\n- Some RPC types may be shared. Put those in a `rpc-types.md` document.\n- Follow the RPC documentation style of the current supervisor RPC specs.\n- Add specs for all the APIs in the monorepo `op-service/apis` package (see `doc.go` about type naming of the interfaces in Go)\n\nChecklist, by namespace:\n- [ ] `engine`\n- [ ] `admin`\n  - [ ] common service methods\n  - [ ] op-node admin methods (used by conductor)\n  - [ ] op-proposer `admin_startProposer` / `admin_stopProposer`\n  - [ ] op-batcher `admin_startBatcher` / `admin_stopBatcher`\n  - [ ] op-challenger (does not have an RPC yet, but should have one)\n- [ ] `optimism`: op-node node namespace\n- [ ] `batcher` new debug API, cc @geoknee \n- [ ] `opstack` new block building / committing / sequencing API, cc @protolambda \n- [ ] `sequencer` experimental op-test-sequencer API, cc @protolambda \n- [ ] `faucet` experimental faucet API\n- [ ] `eth`: additions / customizations of op-signer\n- [ ] `debug`: op-geth addition of the `debug_chainConfig` endpoint\n- [ ] `opp2p`: op-node P2P API\n- [ ] `supervisor`: op-supervisor API, soon multi-client\n- [ ] `interop`: op-node API as used in managed-mode endpoint\n", "OPEN", 0, "protolambda", "2025-04-22T12:49:26Z", "2025-04-23T10:31:43Z", null, "ethereum-optimism/specs", "2025-08-31 03:31:11"]
["I_kwDOLB-lzc6x-WuH", 660, "Error codes for supervisor RPC errors", "Spec out error codes for supervisor RPC API errors.\n\nSpec'd error codes are necessary for RPC APIs. This need becomes clear when communication happens between different implementations of the API, like in multi client topology. Implementations need to be able to deserialise each others' negative feedback as deterministically as each others' positive feedback in order to approach recovery correctly in times of network congestion.\n\nhttps://github.com/ethereum-optimism/optimism/blob/e22cdd9af00698d2fd04683a5bbddd27292c4c98/op-supervisor/supervisor/types/error.go#L5-L40\n\n", "CLOSED", 0, "emhane", "2025-04-10T14:36:06Z", "2025-04-24T15:25:12Z", "2025-04-24T15:25:11Z", "ethereum-optimism/specs", "2025-08-31 03:31:11"]
["I_kwDOLB-lzc6uY6Sl", 628, "[Tracker] Update Out of Date Interop Specs", "There are a bunch of interop specs that are out of date. This ticket represents the work required to update them to be correct.", "OPEN", 0, "tynes", "2025-03-17T16:46:09Z", "2025-04-24T20:05:57Z", null, "ethereum-optimism/specs", "2025-08-31 03:31:11"]
["I_kwDOLB-lzc6nvvIh", 557, "Merge experimental MT-Cannon specs page into main Cannon page", "[This multi-threaded Cannon specs page in the experimental section](https://specs.optimism.io/experimental/cannon-fault-proof-vm-mt.html) should be merged into the Cannon specs as part of shipping MT Cannon. \n\nThe main Cannon page should just be up to date with the current version (64 bit & MT), since it will be the only version.", "CLOSED", 0, "pauldowman", "2025-01-27T23:53:20Z", "2025-04-24T22:27:52Z", "2025-04-24T22:27:52Z", "ethereum-optimism/specs", "2025-08-31 03:31:11"]
["I_kwDOLB-lzc6nWj2a", 544, "feat(interop-proof): Specify new hints", "## Overview\n\nSeveral new hints have been added, and some hints have been extended, to support pre-state fetching + multiplexing requests over L2 chains. These hints should be specified as part of the effort to make hints within the proof implementation standardized.", "CLOSED", 0, "clabby", "2025-01-23T19:11:15Z", "2025-04-24T15:15:17Z", "2025-04-24T15:15:17Z", "ethereum-optimism/specs", "2025-08-31 03:31:11"]
["I_kwDOKIsnqM6YuoBq", 339, "Add storage layout and ABI compatibility checks", "Some tasks upgrade contract implementations. When this happens we want confidence that (1) the new implementation has a compatible storage layout, and (2) the new ABI is backwards compatible, unless we explicitly choose to allow a breaking change to the ABI (e.g. when deprecating old methods and getters)\r\n\r\nBased on the state diff from foundry and Tenderly (ref #338) we should be able to detect when an implementation is changing. We'll need to account for how each of the three proxy types (`Proxy.sol`, `L1ChugsplashProxy.sol`, and `ResolvedDelegateProxy.sol`) stores their implementations to ensure each one is identified.\r\n\r\nOpenZeppelin has https://github.com/OpenZeppelin/openzeppelin-foundry-upgrades which we might be able to use directly to save ourselves some effort and gain confidence the implementation of the checks is correct. Even if we can't use it directly, we might be able to pull some code or algorithms from it:\r\n\r\nIf we have to implement everything ourselves, then for each changed implementation we need to:\r\n- Fetch the old storage layout\r\n    - If the old implementation address matches a known `op-contracts/vX.Y.Z` release in the superchain registry ([mainnet releases](https://github.com/ethereum-optimism/superchain-registry/blob/main/validation/standard/standard-versions-mainnet.toml), [sepolia releases](https://github.com/ethereum-optimism/superchain-registry/blob/main/validation/standard/standard-versions-sepolia.toml)), then we can fetch the storage layout JSON from `https://github.com/ethereum-optimism/optimism/tree/op-contracts/vX.Y.Z/packages/contracts-bedrock/snapshots/[abi|storageLayout]/ContractName.json`\r\n    - If the old implementation does not match a known release, we may have to fetch the source code from etherscan/blockscout and compile it with the right settings\u2014I don't think either explorer has an API to retrieve the storage layout. We might also be able to use cast here, I believe it has some utilities for getting storage layouts\r\n- Fetch the new storage layout\r\n    - The new storage will be governance approved, so the addresses must be in the superchain registry and therefore we can always use the above \"known release\" approach\r\n- Compare the ABIs. An initial implementation can be: If the ABIs are identical, or the only change is new methods, check passes. Otherwise, check fails. This is likely not perfect, but it's conservative and we can improve this over time\r\n- Compare the storage layout: This is critical and nuanced check so I'm intentionally leaving out the details for now. We can probably pull an equivalence checking algorithm from existing tooling like hardhat and OZ, which have tools for upgrade safety\r\n", "OPEN", 0, "mds1", "2024-10-02T18:18:20Z", "2025-04-21T18:05:57Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 03:31:21"]
["I_kwDOMMiGhs6zgDo6", 388, "Websocket does not properly subscribe / unsubscribe to event logs", "![Image](https://github.com/user-attachments/assets/e542fcd0-5fc4-495b-9085-6bc22acbda9f)\n\n`useWatchContractEvent` from `wagmi` only watches / subscribes to event logs when using a proper websocket transport (note: it does not work with http).\n\nSee use here:\nhttps://github.com/owlprotocol/veraswap/blob/bfc8f37bd66bb0607ab55873d470a0f157c5875a/packages/veraswap-app/src/routes/index.tsx#L215-L226\n\nFrom what I understand, the websocket you expose for op chain a and b doesn't fully behave like the underlying anvil rpc websockets", "OPEN", 0, "OscBacon", "2025-04-22T16:09:01Z", "2025-04-23T13:48:22Z", null, "ethereum-optimism/supersim", "2025-08-31 03:31:41"]
["I_kwDOMMiGhs6zf_KP", 387, "Forge script execution is much slower than with 3 regular anvil chains", "https://github.com/owlprotocol/veraswap/blob/feat/superchain-interop/packages/veraswap-sdk/script/DeployLocal.s.sol\n\nWith anvil 0 private key and ` supersim --interop.autorelay --l1.port 8547 `:\n```\nforge script ./script/DeployLocal.s.sol --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 --broadcast\n```\n\nI believe supersim is slower with transaction simulation", "OPEN", 0, "OscBacon", "2025-04-22T16:00:49Z", "2025-04-22T16:00:49Z", null, "ethereum-optimism/supersim", "2025-08-31 03:31:41"]
["I_kwDOMMiGhs6zI1iM", 384, "Supersim crashes after superchain erc20 token bridge", "note that anvil processes are also left, so I need to manually `killall anvil` after\n\non supersim 48:\n```\nINFO [04-18|19:36:54.443] L2ToL2CrossChainMessenger#SentMessage    sourceChainID=901 destinationChainID=902 nonce=0 sender=0x4200000000000000000000000000000000000028 target=0x4200000000000000000000000000000000000028 msgHash=0x2234a960f53d78ab680d662a2d41b5c7984922b49c4e0343178d95bc6f6c62e3 txHash=0xe31e95d1c4aee54aa6060458027d2a73438112bcefb5ca9fcb7711c5e3a2e122\nINFO [04-18|19:36:54.443] SuperchainTokenBridge#SendERC20          chain.id=901 token=0x2Eb2838feBfB326803fF33C4F54cd2d3561ce6Ed from=0x428EEb3EDE1f2273AeADEe8ad061c7510A794f68 to=0x428EEb3EDE1f2273AeADEe8ad061c7510A794f68 amount=1,000,000,000,000,000,000 destination=902\nINFO [04-18|19:36:56.427] L2ToL2CrossChainMessenger#RelayedMessage sourceChainID=901 destinationChainID=902 nonce=0 sender=0x4200000000000000000000000000000000000028 target=0x4200000000000000000000000000000000000028 msgHash=0x2234a960f53d78ab680d662a2d41b5c7984922b49c4e0343178d95bc6f6c62e3 txHash=0xfc84650cacf1709f7781624d001a3710f5f80198548630625637845e10ab7378\nINFO [04-18|19:36:56.427] SuperchainTokenBridge#RelayERC20         chain.id=902 token=0x2Eb2838feBfB326803fF33C4F54cd2d3561ce6Ed from=0x428EEb3EDE1f2273AeADEe8ad061c7510A794f68 to=0x428EEb3EDE1f2273AeADEe8ad061c7510A794f68 amount=1,000,000,000,000,000,000 source=901\nfatal error: concurrent map read and map write\n\ngoroutine 5657 [running]:\ngithub.com/ethereum-optimism/supersim/opsimulator.(*OpSimulator).processWSRequest(0xc0007ae2c0, {0x1180328, 0xc000e02190}, 0x1, {0xc0040c3600, 0x66, 0x200}, 0xc0007ae9a0)\n        /home/circleci/project/opsimulator/opsimulator.go:698 +0xd37\ngithub.com/ethereum-optimism/supersim/opsimulator.(*OpSimulator).handleWebSocket.func1.1(0x44973d?, {0xc0040c3600?, 0x8c6be5?, 0xc001120ed0?})\n        /home/circleci/project/opsimulator/opsimulator.go:579 +0x46\ncreated by github.com/ethereum-optimism/supersim/opsimulator.(*OpSimulator).handleWebSocket.func1 in goroutine 2812\n        /home/circleci/project/opsimulator/opsimulator.go:578 +0x97\n\ngoroutine 1 [chan receive, 2 minutes]:\nmain.main.LifecycleCmd.func1(0xc000718040)\n        /home/circleci/.go_workspace/pkg/mod/github.com/ethereum-optimism/optimism@v1.13.1-0.20250410172414-74484297d1f9/op-service/cliapp/lifecycle.go:64 +0x2e6\ngithub.com/urfave/cli/v2.(*Command).Run(0xc00071a160, 0xc000718040, {0xc000034080, 0x4, 0x4})\n        /home/circleci/.go_workspace/pkg/mod/github.com/urfave/cli/v2@v2.27.5/command.go:276 +0x97d\ngithub.com/urfave/cli/v2.(*App).RunContext(0xc000524a00, {0x11802f0, 0xc000714000}, {0xc000034080, 0x4, 0x4})\n        /home/circleci/.go_workspace/pkg/mod/github.com/urfave/cli/v2@v2.27.5/app.go:333 +0x5a5\nmain.main()\n        /home/circleci/project/cmd/main.go:77 +0x51f\n\ngoroutine 12 [chan receive]:\ngithub.com/ethereum/go-ethereum/metrics.(*meterTicker).loop(0x4a10d80)\n        /home/circleci/.go_workspace/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.5.0.20250401164435-02dfe8692a3c/metrics/meter.go:159 +0x59\ncreated by github.com/ethereum/go-ethereum/metrics.(*meterTicker).add in goroutine 1\n        /home/circleci/.go_workspace/pkg/mod/github.com/ethereum-optimism/op-geth@v1.101503.2-rc.5.0.20250401164435-02dfe8692a3c/metrics/meter.go:145 +0xbc\n\ngoroutine 50 [syscall, 2 minutes]:\nos/signal.signal_recv()\n        /home/circleci/.local/share/mise/installs/go/1.22.3/src/runtime/sigqueue.go:152 +0x29\nos/signal.loop()\n        /home/circleci/.local/share/mise/installs/go/1.22.3/src/os/signal/signal_unix.go:23 +0x13\ncreated by os/signal.Notify.func1.1 in goroutine 1\n        /home/circleci/.local/share/mise/installs/go/1.22.3/src/os/signal/signal.go:151 +0x1f\n```", "CLOSED", 0, "OscBacon", "2025-04-18T17:42:11Z", "2025-04-22T21:15:46Z", "2025-04-22T17:19:06Z", "ethereum-optimism/supersim", "2025-08-31 03:31:41"]
["I_kwDODjvEJM60FeIc", 15582, "op-node stuck after upgrading to v1.13.0", "The log shows that \"Deriver system is resetting\":\n\n```\nApr 26 01:04:50 ip-xx t=2025-04-26T01:04:50+0000 lvl=warn msg=\"Deriver system is resetting\" err=\"reset: cannot continue derivation until Engine has been reset\"\nApr 26 01:05:42 ip-xx: t=2025-04-26T01:05:42+0000 lvl=warn msg=\"failed to notify engine driver of new L2 payload\" err=\"context deadline exceeded\" id=0x433632bfd1487ed0e42a9fd76375e82d84ae76fd8d8ddcefa326ccfd80b5c980:29420082\n```\n\nVersion: \n```\n# ./op-node --version\nop-node version v1.13.0-5f003211-1743511639\n```\n\nThe geth client did not receive notification from op-node so that it stop importing block as well, but if I attach to the flag to ` --synctarget=xxx` to geth command, it can go on for a while, so I think the issue happens on op-node.   I used the `--synctarget=xxx` flag to sync from 5 days ago, will this cause the problem? Here is the log from op-geth:\n```\nINFO [04-26|00:56:59.410] Loaded most recent local block           number=29,419,480 hash=7be2d7..f08dc2 age=11m52s\nINFO [04-26|00:56:59.410] Loaded most recent local finalized block number=29,127,579 hash=34ca83..ca7eb2 age=6d18h21m\nINFO [04-26|00:56:59.410] Loaded last snap-sync pivot marker       number=27,165,263\nINFO [04-26|00:56:59.434] Initialized transaction indexer          range=\"last 2350000 blocks\"\nINFO [04-26|00:56:59.434] Initialising Ethereum protocol           network=8453         dbversion=9\n```\n\nThe local finalized block number seems quite old\n\n\nWhat can I do to resolve this?\n\n", "CLOSED", 0, "unclezoro", "2025-04-26T01:36:32Z", "2025-04-26T01:57:50Z", "2025-04-26T01:57:50Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6z_f2B", 15565, "op-service: enable/disable JWT auth per RPC handler route", "The RPC in op-service supports routing, e.g. `/foo` can be serving a different RPC thna `/bar`.\nWe want to enable the JWT auth to be specific to only some routes. The global JWT option can just be the default.\n\nThis unblocks the (test-)sequencer to keep auth on the critical endpoints (sequencing/reorg capabilities), while removing auth from the endpoints like `/txs/<name>` where transactions are received with the regular `eth_sendRawTransaction` (as forwarded by op-geth).\n", "CLOSED", 0, "protolambda", "2025-04-25T11:20:32Z", "2025-04-25T16:50:20Z", "2025-04-25T16:50:20Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6z6LlS", 15558, "[kurtosis-devnet] create tests for proxyd", "The optimism-package repository is lacking a lot of tests, which makes it potentially a liability.\nTracked [here](https://github.com/ethpandaops/optimism-package/pull/232)", "CLOSED", 0, "serpixel", "2025-04-24T20:27:32Z", "2025-09-10T20:16:16Z", "2025-09-10T20:16:16Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6z2m-c", 15546, "setFastFaultGameImplementation() -> DeployFastFaultGame2.run()", "In order to ensure that the contracts deployed in our test suite are the same as those deployed by op-deployer we should simplify `Deploy.s.sol` by removing any custom deployment logic that re-implements functionality that exists in the [deployment scripts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/deploy) used by `op-deployer`.\n\nSpecifically, `setFastFaultGameImplementation()` should be removed, and replaced by calls to a new DeployFastFaultGame2.s.sol script i.e via a `DeployFastFaultGame2.run()` call.", "OPEN", 0, "AmadiMichael", "2025-04-24T14:11:05Z", "2025-04-24T14:52:10Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6z2mWp", 15545, "setSuperPermissionedGameImplementation() -> DeploySuperPermissionedGame2.run()", "In order to ensure that the contracts deployed in our test suite are the same as those deployed by op-deployer we should simplify `Deploy.s.sol` by removing any custom deployment logic that re-implements functionality that exists in the [deployment scripts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/deploy) used by `op-deployer`.\n\nSpecifically, `setSuperPermissionedGameImplementation()` should be removed, and replaced by calls to a new DeploySuperPermissionedGame2.s.sol script i.e via a `DeploySuperPermissionedGame2.run()` call.", "OPEN", 0, "AmadiMichael", "2025-04-24T14:10:21Z", "2025-04-24T14:51:39Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6z2llx", 15544, "setSuperFaultGameImplementation() -> DeploySuperFaultGame2.run()", "In order to ensure that the contracts deployed in our test suite are the same as those deployed by op-deployer we should simplify `Deploy.s.sol` by removing any custom deployment logic that re-implements functionality that exists in the [deployment scripts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/deploy) used by `op-deployer`.\n\nSpecifically, `setSuperFaultGameImplementation()` should be removed, and replaced by calls to a new DeploySuperFaultGame2.s.sol script i.e via a `DeploySuperFaultGame2.run()` call.", "OPEN", 0, "AmadiMichael", "2025-04-24T14:09:37Z", "2025-04-24T14:51:00Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6z2fmm", 15542, "Replace setAlphabetFaultGameImplementation() with DeployAlphabetVM2.run()", "In order to ensure that the contracts deployed in our test suite are the same as those deployed by op-deployer we should simplify `Deploy.s.sol` by removing any custom deployment logic that re-implements functionality that exists in the [deployment scripts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/deploy) used by `op-deployer`.\n\nSpecifically, `setAlphabetFaultGameImplementation()` should be removed, and replaced by calls to a new DeployAlphabetVM2.s.sol script i.e via a `DeployAlphabetVM2.run()` call.", "OPEN", 0, "AmadiMichael", "2025-04-24T14:02:03Z", "2025-04-24T14:02:03Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zuLtE", 15536, "Update SDLC (VERSIONING.md) with steps to take after cutting a release:", "Update SDLC (VERSIONING.md) with steps to take after cutting a release: \n1. Delete `contract.upgrade()` functions\n2. Remove those calls from `opcm.upgrade()`\n", "OPEN", 0, "maurelian", "2025-04-23T20:53:22Z", "2025-04-23T20:53:54Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zuK0u", 15535, "OPCM `upgrade()` always upgrades all contracts", "We should move towards always upgrading all contracts to reduce churn in the upgrade path. \n\nThus `opcm.upgrade()` should be modified to: \n1. Call `upgradeTo()` on all proxies (this section will thus become static).\n2. Do `contract.upgrade()` on contracts where necessary (only this section will need to change).\n", "OPEN", 0, "maurelian", "2025-04-23T20:51:37Z", "2025-04-23T20:53:17Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6ziA6Q", 15512, "kurtosis-devnet: hide current output under verbose", "Currently we drop a lot of verbose output that may not really be needed. We have multiple ways to organize this output in the terminal, either by hiding the output under different levels of verbosity or by implementing a LESS output.", "OPEN", 0, "serpixel", "2025-04-22T20:22:28Z", "2025-04-22T20:22:30Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zgh3l", 15511, "kurtosis-devnet: add rotatory welcome message", "Add a rotatory welcome message (disabled with a flag / a file placeholder) that tells users about the newest features available on kurtosis devnet.\n\nThe background behind this is that oftentimes we have new features developed but there's no external visibility of these, by publishing a message at the beginning people should be able to use the new features.", "CLOSED", 0, "serpixel", "2025-04-22T17:07:14Z", "2025-09-10T20:20:44Z", "2025-09-10T20:20:44Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zgfNT", 15510, "kurtosis-devnet: implement selective devnet containers to speed up startup", "Make kurtosis services sptional to improve deployment speed as currently deployments are slow due to deploying unnecessary components for certain use cases \nMaking components optional would offer more flexibility in creating minimized configuration", "OPEN", 0, "serpixel", "2025-04-22T17:02:00Z", "2025-04-22T17:02:02Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zgcZY", 15509, "kurtosis-devnet: automatically enable mise shell and upgrade dependencies", "We should ensure users are having mise activated and with the dependencies up to date.\n\nThis will enable us to reduce a bunch of issues users face due to outdated dependencies, versions or wrong environments.", "CLOSED", 0, "serpixel", "2025-04-22T16:56:56Z", "2025-04-22T20:11:06Z", "2025-04-22T20:11:06Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zZ5xq", 15492, "interop: Include interop prestate variant in reproducibility output", "Currently the `op-program/scripts/build-prestates.sh` script only looks for cannon ST and cannon mt64 variants of the prestate. For the interop release we need it to pick up the -interop variant as well.\n\n* Update the script\n* Update standard-prestates yaml file in superchain-registry to add the new variant for each release that already has it (the latest version of the build-prestates.sh script is used to rebuild all tags so any existing tag that builds a -interop variant will now start being included. That's fine, we've included cannon64 variants with a lot of tags prior to it actually being ready to ship too.", "CLOSED", 0, "ajsutton", "2025-04-22T05:23:34Z", "2025-04-24T20:22:36Z", "2025-04-24T20:22:36Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zZXWT", 15490, "Incorporate a standard Decentralized Identity solution into the OP Stack", "\n\n**Is your feature request related to a problem? Please describe.**\nWe're exploring ways to make identity-based applications easier to build on chains developed with the OP Stack. Currently, integrating decentralized identity systems (such as those from Iden3 or Privado ID) requires manual deployment and configuration, which creates friction for developers looking to build identity-enabled dApps on Optimism-based chains.\n\n\n**Describe the solution you'd like**\nWe propose incorporating [Iden3 identity contracts](https://github.com/iden3/contracts) as **preinstalled contracts** in the OP Stack, similar to the system contracts described [in the Optimism documentation](https://docs.optimism.io/operators/chain-operators/features/preinstalls).\n\nThese contracts form the **core on-chain state and validation layer** required for issuing, proving, and verifying credentials. Including them as preinstalls would make identity primitives available by default in any new OP chain, enabling a broader ecosystem of decentralized identity applications with minimal setup.\n\nThere's no particular documentation regarding how to add contracts as preinstalls but there is issue [#395](https://github.com/ethereum-optimism/developers/discussions/395) that links to the following [commit](https://github.com/ethereum-optimism/optimism/commit/c95677184b5e60803f310913326afdbf60d6587e#diff-2b05d0be8d7d8de7870ac51225a0728adeb9a6df9819eaa654c455a23b8f509e) where we can see how the l2 genesis is formed and so inspecting the repository we found the following places where modifications may be needed:\n```\n* contracts-bedrock/src/libraries/Preinstalls.sol\n* contracts-bedrock/test/L2/Preinstalls.t.sol\n* contracts-bedrock/scripts/SetPreinstalls.s.sol\n```\n\n**Describe alternatives you've considered**\nNot including a pre-installed identity system means that every developer has to do their own research and manually deploy identity contracts, which leads to fragmentation and reinventing the wheel each time.\n\n**Additional context**\nThis feature request is a byproduct of the [Optimism Mission Request: \u201cZK Toolkit for ZK Application Developers\u201d](https://gov.optimism.io/t/ready-to-vote-zk-toolkit-for-zk-application-developers/7444). In that Mission, we worked on adapting the Iden3 and Privado ID ecosystems to be fully functional within Optimism. Please take a look at the project in [its main GitHub repository](https://github.com/wakeuplabs-io/opid).\nWith this feature request, we aim to take that work further by making decentralized identity **super easy to use across the entire OP Stack ecosystem.**\nThis proposal supports the broader goal of the ZK Identity Toolkit Mission: to provide developers with a zero-knowledge toolkit that enables trusted, privacy-preserving relationships between apps and users.\nWe believe that making identity infrastructure a native part of the OP Stack will significantly accelerate the development of ZK-powered applications across the Superchain.\n", "OPEN", 0, "wakeuplabs", "2025-04-22T03:42:10Z", "2025-04-22T03:42:10Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zWx3-", 15483, "External documentation for interop infrastructure", "Work with devsup to co-develop documentation for patner infra providers and chain operators.", "OPEN", 0, "zhwrd", "2025-04-21T19:04:48Z", "2025-04-21T19:04:48Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zWwWw", 15482, "op-supervisor: public rpc for external node operators", "We want to spin up a public rpc that can be used by external node operators to sync nodes without running all chains in the interop set (standard mode)\n\nIn this ticket we should design the rpc solution and incorporate into netchef / betanet as well as consider scaling / operational aspects for sepolia / mainnet.", "OPEN", 0, "zhwrd", "2025-04-21T19:01:12Z", "2025-04-21T19:02:06Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zVp9P", 15480, "[Tracker] Interop: Infrastructure", "Tracker for platform infrastructure related work for interop", "OPEN", 0, "zhwrd", "2025-04-21T16:25:14Z", "2025-04-21T16:25:14Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zK0mW", 15472, "kurtosis-devnet: create contracts and prestate in parallel", "Currently the flow looks like this:\n\n1. Build prestate\n2. Build contracts\n3. Build docker images\n4. Prepare template\n5. Deploy\n\nWe can speed up the process by ensuring 1) and 2) run in parallel with 3).", "CLOSED", 0, "serpixel", "2025-04-19T00:00:28Z", "2025-04-25T21:00:56Z", "2025-04-25T21:00:56Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6zFmTh", 15458, "Execution payload from Isthmus hard fork is marshalled as BlockV3 but published to BlockV4 topic", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n\nWhen Isthmus is activated, `op-node` marshalled the execution payload as BlockV3, but published it to BlockV4 topic, causing a validation error:\n\n```\nt=2025-04-18T09:34:38+0000 lvl=info msg=\"Publishing signed execution payload on p2p\" id=0x545b9e90ebd0073e6c4429ea609239269c4bb8c551308bd34c40f6c56603c167:142\nt=2025-04-18T09:34:38+0000 lvl=warn msg=\"invalid envelope payload\" topic=blocksV4 err=\"unexpected extra data offset: 528 <> 560\" peer=16Uiu2HAmHqrXGts25TtKMBRHtvhWZLNypsobKoggpZye1XQtJpbZ\nt=2025-04-18T09:34:38+0000 lvl=debug msg=\"validated blockv4\" topic=blocksV4 result=REJECT from=self\nt=2025-04-18T09:34:38+0000 lvl=warn msg=\"failed to publish newly created block\" id=0x545b9e90ebd0073e6c4429ea609239269c4bb8c551308bd34c40f6c56603c167:142 hash=0x545b9e90ebd0073e6c4429ea609239269c4bb8c551308bd34c40f6c56603c167 err=\"validation failed\"\n```\n\nWhat happened was:\n1. `SimpleAsyncGossiper.gossip` is called:\n   1. `OpNode.PublishL2Payload` is called:\n      1. `ExecutionPayload.MarshalSSZ` is called. Although Isthmus is enabled, `payload.InferVersion()` returns `BlockV3` because the `*payload.WithdrawalsRoot` equals to `types.EmptyWithdrawalsHash`.\n      1. `publisher.publishRawSignedPayload` is called. The logic is `if p.cfg.IsIsthmus(timestamp) { return p.blocksV4.topic.Publish(ctx, out) } else { ... }`. Note that the condition in the if statement is true.\n         1. The validator (the return value of `BuildBlocksValidator`) is called, and then throws an error `unexpected extra data offset: 528 <> 560`.\n\nIn summary:\n- When marshalling, `payload.InferVersion()` is used and returned `BlockV3`.\n- When publishing , `if p.cfg.IsIsthmus(timestamp)` is used and therefore, the data is published to `BlockV4` topic.\n- The `BlockV3` payload being sent to `BlockV4` topic caused a validation error.\n\n**Steps to Reproduce**\n\nEnable Isthmus at the genesis block, and enable P2P.\n\n**Expected behavior**\n\nIf a payload is marshalled  as `BlockV3`, it should be published to the `BlockV3` topic (i.e. `p.blocksV3.topic.Publish` instead of `p.blocksV4.topic.Publish`)\n\n**Environment Information:**\n\nMacOS\n\nWe made some modifications, but here is the base commit:\n\n```\ncommit b2a5bc202c267ea91176676e43e8e9b217d20680\nAuthor: Sebastian Stammler <seb@oplabs.co>\nDate:   Wed Apr 9 23:02:06 2025 +0200\n \n    go: update op-geth@v1.101503.3-rc.1 to fix Worldchain configs (#15319)\n    \n    pulls in superchain-registry@84838da8305c55bdd28c0eea1fd4fd65c097e296\n```\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n\nHere is my temporary workaround:\n\n```diff\n-func (p *publisher) publishRawSignedPayload(ctx context.Context, timestamp uint64, data []byte) error {\n+func (p *publisher) publishRawSignedPayload(ctx context.Context, timestamp uint64, data []byte, version eth.BlockVersion) error {\n \t// compress the full message\n \t// This also copies the data, freeing up the original buffer to go back into the pool\n \tout := snappy.Encode(nil, data)\n \n-\tif p.cfg.IsIsthmus(timestamp) {\n+\tif p.cfg.IsIsthmus(timestamp) && version == eth.BlockV4 {\n```\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "kien-rise", "2025-04-18T09:48:59Z", "2025-04-24T14:52:16Z", "2025-04-24T14:52:15Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6y5JGe", 15441, "interop: Create script to prepare migration calldata", "We will need to run this migration on quite a few chains so need to make it simple to gather the required inputs.\n\nFor chains going to a 1-of-1 dependency set this would require:\n\n- Select the latest, valid dispute game proposal to use as the dispute game index input\n- Fetch the preimage of that game\u2019s output root (`optimism_outputAtBlock` rpc from op-node)\n- Fetch the block header for that block (`eth_blockByRoot` rpc from op-geth)\n\nOutput this information in a format that's easy to use in a call to OPCM.migrate\n\nhttps://github.com/ethereum-optimism/optimism/blob/b8b1bc1e9b8c27982f7466bb8f0a7ff78c113f21/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L1235-L1249\n\nFor chains being merged into the same dependency set we will need to ensure the dispute games used are for blocks with the same timestamp.  That will mean manually proposing suitable dispute games. The dispute game creation can be handled by `op-challenger create-game` subcommand but this script should make it easy to specify a specific dispute game to use instead of the latest.", "CLOSED", 0, "ajsutton", "2025-04-17T03:38:15Z", "2025-04-22T05:03:53Z", "2025-04-22T05:03:52Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6y5G-E", 15440, "interop: Update OPCM migration to create super root from dispute games", "Currently OPCM interop migration tasks a user supplied super root as the new startingAnchorRoot, assuming that it is correct. To simplify the validation process required by signers and improve safety of the upgrade, we want to avoid the need to trust the provided anchor state and instead calculate it on chain based on verifiable inputs.\n\nSpecifically we want to remove the `Proposal startingAnchorRoot` input from\nhttps://github.com/ethereum-optimism/optimism/blob/b8b1bc1e9b8c27982f7466bb8f0a7ff78c113f21/packages/contracts-bedrock/src/L1/OPContractsManager.sol#L1235-L1241\n\nInstead this is replaced by three inputs per chain:\n- Index in the chain\u2019s current `DisputeGameFactory` of a finalized dispute game that resolved as valid\n    - These games must all have the same timestamp\n- Preimage of the `OutputRoot` proposed in that game (ie the `BlockOutput` that hashes to the root claim).\n- The block header that\u2019s the preimage of the `latestBlockhash` from that `BlockOutput` (this includes the timestamp)\n\nThe conversion process is then (conceptually, we should optimise as appropriate):\n- Verify the provided dispute game index exists and is a finalized game that resolved as valid and hasn\u2019t been blacklisted etc.\n- Get the chain ID from the dispute game (`FaultDisputeGame.l2ChainID()` - this isn\u2019t part of the `IDisputeGame` interface but it\u2019s present on all game type implementations we currently support)\n- Get the output root from those dispute games (`IDisputeGame.rootClaim()`)\n- Verify the provided `BlockOutput` hashes to that output root\n- Verify the provided block header hashes to the `latestBlockhash` from the provided `BlockOutput`\n- Get the timestamp from the provided block header\n\nThat gives us the `OutputRoot`, timestamp and chain ID for every chain. We can then build the super output:\n\n- Verify the timestamp for all chains are the same\n    - With different block times there are some valid cases where the timestamp doesn\u2019t have to be the same, but verification is much simpler by requiring it to be the same and it has no real impact on the migration process.\n- Verify the chains were provided in ascending chain ID order (or sort them but that\u2019s more complex)\n- Concatenate those values in the right order to build a super output\n- Hash it to get the super root\n\nThe Proposal startingAnchorState input we\u2019re removing can now be substituted by that super root and it\u2019s timestamp as the L2 sequence number. The rest of the migration should follow the existing process.\n\nFor additional technical background: https://www.notion.so/oplabs/Migrating-to-Super-Roots-1d8f153ee1628048a337c79e39dbcbdd?pvs=4", "CLOSED", 0, "ajsutton", "2025-04-17T03:32:03Z", "2025-04-22T13:24:48Z", "2025-04-22T13:24:48Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6yBzmB", 15358, "Keep devnet env producers and consumers in sync", "Associated with P/PS doc: [Keeping devnet env producers and consumers in sync](https://www.notion.so/oplabs/P-PS-Keeping-devnet-env-producers-and-consumers-in-sync-1d1f153ee1628054b7a2d4db21972639)\n\nA devnet env file is a json file with an inventory of node endpoints, addresses, wallets, and configuration associated with a particular network, used for the purpose of running devnet-sdk tests against that network. Both [kurtosis-devnet](https://github.com/ethereum-optimism/optimism/tree/develop/kurtosis-devnet) and [netchef](https://github.com/ethereum-optimism/infrastructure-services/tree/main/netchef) are configured to produce one of these files after a deploy, although recently [netchef\u2019s devnet env generator](https://github.com/ethereum-optimism/infrastructure-services/blob/main/netchef/pkg/devnet_env.go) fell out of sync with the devnet env schema expected by devnet-sdk. The [short-term fix](https://github.com/ethereum-optimism/optimism/issues/15402) is straightforward: update the netchef generator. But as devnet-sdk continues to develop it seems likely this kind problem will continue to recur unless CI testing checks prevent changes to the devnet-sdk devnet env schema without corresponding changes to both kurtosis-devnet and netchef.\n\nThe following subtickets prescribe steps to avoiding schema misalignment in the future.", "OPEN", 0, "teddyknox", "2025-04-10T20:32:46Z", "2025-04-23T06:48:36Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6xqOpl", 15299, "interop: Proposal migration", "Now that OPCM can handle migrating pre-interop chains to a single DGF and shared ETHLockBox, we still need to lock down this migration for fault proofs.\n\nWe've got to make sure all Super Dispute Games created after interop are anchored by a trusted chain state. @ajsutton has a cool [PoC](https://github.com/ajsutton/migratoor) that does this migration by anchoring the initial super root state on finalized output roots. This is a clean and trustless procedure.\n\nWe need to take this PoC and turn it into something production-ready that works with superchain upgrades. I'm thinking OPCM would handle migrating the proposals and updating the ASR, but I'm not 100% on that. Let's look into our options here.", "CLOSED", 0, "Inphi", "2025-04-08T18:27:58Z", "2025-04-22T13:24:11Z", "2025-04-22T13:24:10Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6xawWh", 15266, "op-test-sequencer: devnet-sdk reorg test", "Once integrated into devnet-sdk (blocked by #15264 ), we can write a devnet test that uses the op-test-sequencer to force an L2 chain reorg.\n\n## Non-forced reorg (sequencer equivocation)\n\nhttps://github.com/ethereum-optimism/optimism/issues/15330\n\n\n## Sequencer includes valid message, then gets invalidated\n\nhttps://github.com/ethereum-optimism/optimism/issues/15499\n\n## Sequencer includes invalid message, and immediately gets reorged\n\nhttps://github.com/ethereum-optimism/optimism/issues/15500\n\n## Interop message derivation reorg\n\nhttps://github.com/ethereum-optimism/optimism/issues/15333", "CLOSED", 0, "protolambda", "2025-04-07T11:43:13Z", "2025-04-22T12:13:40Z", "2025-04-22T12:13:38Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6xCHAg", 15220, "op-program: Bedrock contracts test setup fails due to incorrect Solady library mapping", "_Spearbit audit finding_\n\n**Description**\nThe ForkLive.s.sol file imports the Solady library with the following.\n\n`import { LibString } from \"solady/src/utils/LibString.sol\";\n`\nHowever, the Foundry remapping already accounts for the src directory. This makes compilation through forge build fail.\n\n**Recommendation**\n\nFix the import in ForkLive.s.sol.\n\n```\ndiff --git a/packages/contracts-bedrock/test/setup/ForkLive.s.sol b/packages/contracts-bedrock/test/setup/ForkLive.s.sol\nindex 40e9c94e3..7ac455bd5 100644\n--- a/packages/contracts-bedrock/test/setup/ForkLive.s.sol\n+++ b/packages/contracts-bedrock/test/setup/ForkLive.s.sol\n@@ -14,7 +14,7 @@ import { Deploy } from \"scripts/deploy/Deploy.s.sol\";\n // Libraries\n import { GameTypes, Claim } from \"src/dispute/lib/Types.sol\";\n import { EIP1967Helper } from \"test/mocks/EIP1967Helper.sol\";\n-import { LibString } from \"solady/src/utils/LibString.sol\";\n+import { LibString } from \"solady/utils/LibString.sol\";\n \n // Interfaces\n import { IFaultDisputeGame } from \"interfaces/dispute/IFaultDisputeGame.sol\";\n```", "OPEN", 0, "BlocksOnAChain", "2025-04-03T16:23:15Z", "2025-04-23T20:37:46Z", null, "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6w0SMA", 15169, "op-program: Checking for message expiration after receipt processing prevents pruning indexes, increase resources", "_Spearbit finding:_\n\n**Description**\n\nIn the present implementation the initiating message/s timestamp is checked for expiration **after the message is retrieved from the block.**\n\n- This defeats the purpose of limiting the need of keeping receipts indexed forever -- and actually make nodes that prune their indexes unable to prove a state transition.\n\nRunning the op-program would require having all receipts from all blocks available regardless of expiration settings, since any message from any receipt from any block might need to be retrieved for validation.\n\n**Recommendation**\nThe check for expiration should be moved to just after the block header is retrieved in `CanonBlockByNumber` (or in `Contains`) and before any further data from the block is retrieved (especially the receipts).\n\n- We should even do the check directly in `HazardSet.build`, before` deps.Contains` call \ud83d\udc4d\n\nNote: this might also affect other systems such as supervisor/sequencer.", "CLOSED", 0, "BlocksOnAChain", "2025-04-02T14:02:37Z", "2025-04-24T23:53:05Z", "2025-04-24T23:53:04Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6wsJdr", 15156, "Add option to supervisor_checkAccesslist API enabling redundant access checks using L2 RPCs", "Implement the `supervisor_checkAccesslist` part of the solution described in #15128 within op-supervisor. ", "CLOSED", 0, "teddyknox", "2025-04-01T19:16:01Z", "2025-04-21T16:50:29Z", "2025-04-21T16:50:29Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6wfXQC", 15128, "[Tracker]: Add impl redundancy to superchain mempool ingress checks", "One problem with op-supervisor is that it's a central point of failure for superchain safety. That is, if op-supervisor were to incorrectly assess the interop safety of a block then nothing else would detect this and the real superchain state would diverge from the \"true\" superchain state. The only thing worse than a chain fork is total consensus on some bad state.\n\nHow do we fix this? By introducing protocol implementation redundancy into the process of determining the real superchain state. The simplest way to do this would be to implement an alternate version of op-supervisor in a \"clean room\" to minimize the chance that any bugs appearing in the second implementation of the supervisor protocol also appear in the first. This would be a large undertaking, and apparently one ChainSafe is working on now.\n\nBut there are smaller steps that we could take that still meaningfully improve the implementation redundancy of the op-supervisor setup. One such way exists within the `supervisor_checkAccesslist` endpoint, which is called by `op-node` and EL client mempool implementations to reduce the chance of including an invalid executing message. \n\nThe implementation could be made more robust by locally introducing redundancy within the call to `checkAccess(acc types.Access, execAt types.ExecutingDescriptor) (eth.BlockID, error)`. Instead of relying exclusively on the chainDB to [execute the access check](https://github.com/ethereum-optimism/optimism/blob/8c91990820bead891d8744ee9d5cb016ddfdf9a1/op-supervisor/supervisor/backend/backend.go#L428), as below:\n\n```golang\n\t// Check if message exists\n\tbl, err := su.chainDBs.Contains(acc.ChainID, types.ContainsQuery{\n\t\tTimestamp: acc.Timestamp,\n\t\tBlockNum:  acc.BlockNumber,\n\t\tLogIdx:    acc.LogIndex,\n\t\tChecksum:  acc.Checksum,\n\t})\n\tif err != nil {\n\t\treturn eth.BlockID{}, err\n\t}\n```\n\n...we could add redundancy to this check by also making `eth_getTransactionReceipt` RPC calls to op-supervisor's managed L2 nodes, and checking that the two results match.\n\nWe can expect this redundant `Contains()` implementation to take strictly longer than the non-redundant DB-based implementation, since the latency introduced by receipt-fetching was the main motivation for maintaining a centralized log of receipts in op-supervisor to begin with. To balance the cost of running `supervisor_checkAccesslist` in this mode against the increased RPC load it would place on an op-supervisor's managed L2 nodes (and hence, denial-of-service risk), we will add a field to the API's request object controlling whether a redundant, synchronous check is enabled, so that the check may be disabled at the outer-most perimeter of the transaction-inclusion pipeline. As pointed out by @protolambda, it is prudent to use the more efficient check on the outer perimeter and the more costly check on the inner perimeter to mitigate potential DOS attacks.\n\nFinally we will update the inner tx-inclusion perimeter caller to `supervisor_checkAccesslist` to pass along this option configuration so that the redundant check is enabled. This inner perimeter caller will likely be the transaction mempool ingress validator, where the outer perimeter caller may be the proxyd instance abstracting over these instances. However, the exact location of the redundant caller is subject to change with the result of the recent [interop topology design](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/interop-topology.md#solution-summary).\n\nTODO:\n* Define exact failure mode that is being mitigated by this solution ([FMA doc](https://github.com/ethereum-optimism/design-docs/blob/f3aa2db64b1676b5e58ae602acf2ebdba34b617c/security/fma-message-passing-contracts.md#fm2-validatemessage-references-an-invalid-or-non-existent-initiated-message))\n* In the words of @axelKingsley:\n  > \"It is a little strange maybe that the Supervisor is checking with its Managed Nodes, when it is responsible for maintaining those nodes in the first place -- like, if a bug would cause the DB to have invalid data, that invalid data has a high likelihood of poisoning the Managed Nodes anyway. BUT I agree that this is a good incremental step.\"\n\n  Leaving this as a a reminder to investigate the exact feedback loops that this solution is vulnerable to.\n\nRelated documents:\n- https://github.com/ethereum-optimism/design-docs/pull/233\n- https://github.com/ethereum-optimism/design-docs/pull/222\n- [Interop Topology](https://github.com/ethereum-optimism/design-docs/blob/d4d703d4c927912efd01f033b207e78c35a42877/protocol/interop-topology.md)", "CLOSED", 0, "tynes", "2025-03-31T16:43:21Z", "2025-04-21T16:50:59Z", "2025-04-21T16:50:59Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6v4O5i", 15052, "SPIKE: op-acceptance testlib experiment", "Experiment with building a higher level testlib for writing acceptance tests/op-e2e tests.\n\n## Key Hypotheses\n\n- It is possible to develop a testlib to provide a higher level abstraction for tests that makes writing tests faster and easier by:\n    - providing ready-to-use helper functions for setup actions\n    - minimising boiler plate code\n    - leveraging consistent naming and patterns with a focus on ease of discoverability\n- When tests are faster and easier to write, developers will adopt them earlier in the development cycle and write more tests\n- When tests are developed earlier in the cycle, development velocity increases as bugs are found sooner when they are cheaper to fix.\n\n## Key Metrics\n\n- Number of developers writing e2e tests\n- Percentage of issues that add or update e2e tests before being resolved\n- Reduction in time between merging production code and merging e2e tests\n- Reduction in time spent at end of projects on testing and fixing identified bugs", "CLOSED", 0, "ajsutton", "2025-03-26T20:45:35Z", "2025-04-24T01:01:44Z", "2025-04-24T01:01:43Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6vz84k", 15042, "kurtosis-devnet: detect/remediate common docker-related failure modes", "We should front-load some sanity checks for Docker/Kurtosis issues we know encounter every now and then\n\nTentative list:\n- dangling kurtosis network. sometimes enclave cleanup leaves a docker network behind. Symptom: creating new enclave of the same name ends up failing because of that existing network. Remediation: cleanup preemptively if the network exists but the enclave doesn't\n- engine version mismatch. Kurtosis is sometimes fussy about versions, requiring an (old) engine to be killed / cleaned up before the client can interact with the system again. Remediation: Start engine as early as possible, detect failure to do so and engage in global cleanup", "CLOSED", 0, "sigma", "2025-03-26T13:33:21Z", "2025-04-24T21:18:58Z", "2025-04-24T21:18:58Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6vp_g4", 15027, "devnet-sdk: add minimal in-process Faucet implementation", "Implement a faucet, and create an `system2.Option` that adds the faucet, wrapped into a `system2.Faucet`, to the system.\n\nA faucet is chain-specific. The devnet-system can attach a default faucet to each network.\n\nThe faucet may provide:\n- a method to request ETH to be sent to a specific address\n- a method to request a new pre-funded EOA with some ETH\n- a method to get a return-address, to send remaining unused ETH to\n\nIt's a responsibility of the system-orchestrator implementation to make instantiated user-keys (from faucets or otherwise), and to collect any remaining test ETH after test execution (not needed for any ephemeral test backends).\n\n\n", "CLOSED", 0, "protolambda", "2025-03-25T15:52:57Z", "2025-04-25T10:51:42Z", "2025-04-25T10:51:42Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6voH8D", 15022, "kurtosis-devnet: frontload enclave creation", "we should create the enclave as early as possible to:\n- absorb the latency while we build the other pre-requisites (docker images, ...)\n- fail early in case there's a kurtosis engine/client mismatch\n\nWe can do that when #14932 lands, as it introduces a separate enclave manager construct.", "CLOSED", 0, "sigma", "2025-03-25T13:23:42Z", "2025-04-22T13:47:02Z", "2025-04-22T13:47:01Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6sAIvb", 14569, "OPCM: ensure contract `upgrade` methods are called in `opcm.upgrade`", "We need to ensure that, if any L1 source contracts that have an `upgrade` method, that upgrade method is called in the `OPContractsManager.upgrade` method. Ideally, if OPCM was missing this, tests would fail. But that will not always be the case, so we should have a go script to traverse the AST to verify this. The spec is roughly:\n\n- Collect all `upgrade` functions from the L1 artifacts\n- Look at the AST for `OPCM.upgrade(..)`\n- Make sure that the AST contains a function call to `X.upgrade` for each X in step 1\n\ncc @maurelian @smartcontracts ", "CLOSED", 0, "mds1", "2025-02-27T22:12:43Z", "2025-04-24T16:40:44Z", "2025-04-24T16:40:44Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6rnOe3", 14527, "[Tracker] Operator Fee (Isthmus)", "- [x] Design - https://github.com/ethereum-optimism/design-docs/pull/81 \n- [x] Spec - https://github.com/ethereum-optimism/specs/pull/382\n- [x] https://github.com/ethereum-optimism/optimism/pull/12166\n- [x] https://github.com/ethereum-optimism/op-geth/pull/388", "CLOSED", 0, "lewejahlil", "2025-02-25T18:04:09Z", "2025-04-24T15:28:40Z", "2025-04-24T15:28:40Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6q6K7c", 14475, "op-e2e: Add tests for super-cannon games", "Add e2e tests for super-cannon game types that execute the full dispute game. At minimum showing we can dispute all the way down to step() for each sub-problem in the STF.", "CLOSED", 0, "ajsutton", "2025-02-20T22:06:12Z", "2025-04-23T20:34:12Z", "2025-04-23T20:34:12Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6pDIIb", 14224, "interop: op-supervisor - database during upgrade", "Handle op-supervisor database initialization / syncing during the upgrade activation time.\n\nRelated to #13732 ", "CLOSED", 0, "protolambda", "2025-02-06T17:30:48Z", "2025-04-21T15:15:23Z", "2025-04-21T15:15:22Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6onMm0", 14127, "interop: test-sequencing milestone 0.4: implement remaining RPC endpoints", "see https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md#milestone-0-testing-scope", "CLOSED", 0, "protolambda", "2025-02-04T00:28:51Z", "2025-04-22T11:32:47Z", "2025-04-22T11:32:46Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6onL6k", 14124, "interop: test-sequencing standard-signer/committer/publisher", "See https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md#milestone-0-testing-scope", "CLOSED", 0, "protolambda", "2025-02-04T00:26:10Z", "2025-04-25T13:29:41Z", "2025-04-25T13:29:40Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6gdUNY", 13069, "[Tracker] OPCM Upgrades (Upgrade 13)", "## Description\n\nThis is a tracking issue for the work outlined in the [L1 Upgrades Design Doc](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/l1-upgrades.md).\n\n## Milestone: Devnet\n\nItems which must be completed prior to the devnet deployment.\n\n- [x] #13079 \n- [x] #13339\n- [x] #13073\n- [x] #13589\n- [x] #13076\n- [x] #13072\n- [x] #13071  \n- [x] #13671\n- [x] #13682\n\n## Milestone: Betanet (Feb 4)\n\n- [x] #13362\n- [x] https://github.com/ethereum-optimism/optimism/issues/14815\n\n\n## Milestone: Testnet (Feb 20)\n\nItems which must be completed prior to the testnet deployment.\n\n- [x] #13078\n- [x] #13644\n- [x] #13401\n- [x] #13593\n- [x] #13077\n- [x] #13070\n- [x] #13388\n- [x] #13836\n- [x] #13993\n- [x] #13996\n- [x] #13411\n- [x] #13081\n- [x] #14140\n- [x] #14141 \n- [x] #14142\n- [x] #14173\n- [x] #13835\n- [ ] #13607\n- [ ] https://github.com/ethereum-optimism/design-docs/issues/200\n- [ ] #13080\n\n## Milestone: Governance Proposal (Feb 27)\n\n- [x] Post Proposal\n\n## Milestone: Mainnet (April 2)\n\nItems which must be completed prior to the mainnet deployment.\n\n- [x] #13082\n- [ ] #13380\n- [x] https://github.com/ethereum-optimism/superchain-registry/issues/806\n- [x] https://github.com/ethereum-optimism/optimism/issues/13599\n- [x] https://github.com/ethereum-optimism/optimism/issues/13994\n- [x] https://github.com/ethereum-optimism/optimism/issues/14569\n\n## Milestone: Post-Mainnet\n\nItems which must be completed shortly after mainnet.\n\n- [x] #14815\n- [x] #13074\n- [x] #13331\n- [x] #13410\n- [ ] #14055\n- [ ] #13228\n- [ ] #14235\n- [ ] #14460\n", "CLOSED", 0, "maurelian", "2024-11-25T19:51:02Z", "2025-04-24T16:40:45Z", "2025-04-14T20:04:03Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDODjvEJM6ced-3", 12750, "OptimismMintableERC20Factory Storage Update", "[Design doc](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/superchain-erc20/storage-upgrade.md)\r\n\r\nThis task has been deprioritized by the OP team and will be revisited next year. For now, it\u2019s unclear which milestone this task will be part of, so it will remain without one.\r\n\r\nIt\u2019s important to note that Wonderland already has the specs and part of the implementation ready to continue when this task is resumed.", "CLOSED", 0, "gotzenx", "2024-10-30T20:11:30Z", "2025-04-21T15:32:08Z", "2025-04-21T15:32:08Z", "ethereum-optimism/optimism", "2025-08-31 03:32:01"]
["I_kwDOFpg0Ns6xeB98", 1122, "Use Superchain Registry to pull in chains available for tokenlist", "Instead of maintaining a list of chains ourselves in this repo, we should pull in the chain from the superchain registry. \n\nDefinition of Done: \n- validate flow uses superchain registry to check whether a chain is available\n- chains.ts is deleted\n- readme is updated with instructions around this change", "CLOSED", 0, "fainashalts", "2025-04-07T16:46:02Z", "2025-09-02T17:33:35Z", "2025-09-02T17:33:35Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ860dF1d", 299, "[acceptance] kpi metrics: instrument tests", "Add basic prometheus instrumentation to op-acceptor so that we can estimate the number of tests we run per week against persistent devnets.", "CLOSED", 0, "scharissis", "2025-04-29T08:40:30Z", "2025-05-01T00:24:18Z", "2025-05-01T00:24:18Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ86zhWpy", 294, "[acceptance] CI Improvements", "- Failing fast if the devnet doesn't spin up\n- Clearly showing the devnet has spun up successfully (or not)\n- Implementing more smoke tests to assertain basic devnet health\n- Investigating more targeted notifications, based on the failures (eg. if the devnet fails to spin up only notify Platforms, not Protocol)", "CLOSED", 0, "scharissis", "2025-04-22T18:51:20Z", "2025-04-29T00:45:25Z", "2025-04-29T00:45:25Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ86rgF8S", 205, "[acceptance] Release Readiness Checklist", "* Define an initial acceptance test list (to be used to test & promote devnets)\n  * The list will be performed manually to begin with and we'll slowly automate it over time\n  * [Sample checklist](https://www.notion.so/oplabs/Public-Devnet-Acceptance-Testing-16ff153ee162805cb484e4f08b1a44b8?pvs=4#16ff153ee16280d69affcda93172e9ba)\n  * Also define AT's based on our [OPM SLOs](https://optimistic.grafana.net/goto/C6o_SL5Hg?orgId=1)\n", "CLOSED", 0, "scharissis", "2025-02-25T07:06:50Z", "2025-04-28T00:15:43Z", "2025-04-28T00:15:43Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ86qxT2w", 196, "[nat] metrics - add more dimensions to the metrics", "It would also be nice to emit metrics with labels such as\n`gate=<>, suite=<>, test=<>`\nfor grouping tests together along with the run_id", "CLOSED", 0, "scharissis", "2025-02-20T04:35:10Z", "2025-05-01T00:24:17Z", "2025-05-01T00:24:16Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ86qxTWn", 195, "[nat] metrics - add metric for when a test/suite/gate is skipped", "Emit a \"totals\" metric for the number of skipped validators.\n\nRelated discussion:\nhttps://github.com/ethereum-optimism/infra/pull/171#discussion_r1960122494", "CLOSED", 0, "scharissis", "2025-02-20T04:33:26Z", "2025-05-01T00:24:17Z", "2025-05-01T00:24:17Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ86qxSs8", 194, "[nat] metrics - review Counters vs Gauges", "Experiment with the metrics and decide which should be Counters and which should be Gauges.\n\nRelated discussion:\nhttps://github.com/ethereum-optimism/infra/pull/171#discussion_r1960121340", "CLOSED", 0, "scharissis", "2025-02-20T04:31:10Z", "2025-05-01T00:24:18Z", "2025-05-01T00:24:17Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ86qxR_L", 193, "[nat] metrics - add network dimension", "When we emit metrics we don't know the 'network' we're running against. Let's either find a way to obtain it and add it to our metrics, or remove it from our metrics entirely.\n\neg. _runner.go_:\n```\nfunc (r *runner) RunTest(metadata types.ValidatorMetadata) (*TestResult, error) {\n\t...\n\tmetrics.RecordValidation(\"todo\", r.runID, metadata.ID, metadata.Type, result.Status) // TODO: handle network\n        ...\n}\n```", "CLOSED", 0, "scharissis", "2025-02-20T04:28:43Z", "2025-04-29T19:18:24Z", "2025-04-29T19:18:24Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOL-xLQ86qR_LF", 189, "[acceptance] Define initial set of Platforms tests", "Define an initial set of Platforms tests for us to implement on the [Acceptance Criteria](https://www.notion.so/oplabs/Acceptance-Criteria-176f153ee162802db9aafd717078a2f4?pvs=4#1adf153ee16280709913e8c31d0d0e41) notion page.", "CLOSED", 0, "scharissis", "2025-02-17T05:52:48Z", "2025-04-28T22:07:30Z", "2025-04-28T22:07:30Z", "ethereum-optimism/infra", "2025-08-31 03:33:09"]
["I_kwDOEf1bQc624cMF", 1145, "Brief title", "### Description\n\n_No response_", "OPEN", 0, "johnaAr555", "2025-05-16T07:55:57Z", "2025-05-16T07:55:57Z", null, "ethereum-optimism/community-hub", "2025-08-31 04:54:35"]
["I_kwDOKIwiaM60xa7V", 1595, "2025-04-01..2025-04-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 13:50:15 | 0:47:53 | 1 day, 15:43:08 |\n| Time to close | 15:10:45 | 4:17:21 | 1 day, 22:28:21 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 13 |\n| Number of items closed | 26 |\n| Number of most active mentors | 0 |\n| Total number of items created | 39 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Update fact-sheet.mdx | https://github.com/ethereum-optimism/docs/pull/1593 | [zainbacchus](https://github.com/zainbacchus) | 0:05:24 | None | None |\n| Validating OP Stack deployments with op-validator | https://github.com/ethereum-optimism/docs/pull/1592 | [krofax](https://github.com/krofax) | None | None | None |\n| Update account-abstraction.mdx | https://github.com/ethereum-optimism/docs/pull/1591 | [joalavedra](https://github.com/joalavedra) | None | None | None |\n| Refactor RPC page to create Superchain RPC directory | https://github.com/ethereum-optimism/docs/pull/1590 | [krofax](https://github.com/krofax) | 0:46:18 | 4:44:24 | None |\n| How do use `cast` to relay messages | https://github.com/ethereum-optimism/docs/pull/1589 | [qbzzt](https://github.com/qbzzt) | 14:12:34 | None | None |\n| fix(typo): Upgrade 15 Notice (s/Isthumus/Isthmus) | https://github.com/ethereum-optimism/docs/pull/1588 | [wbnns](https://github.com/wbnns) | 0:00:56 | 0:03:34 | None |\n| remove legacy method | https://github.com/ethereum-optimism/docs/pull/1587 | [krofax](https://github.com/krofax) | None | None | None |\n| Guide for validating OP Stack deployments with op-validator | https://github.com/ethereum-optimism/docs/pull/1586 | [krofax](https://github.com/krofax) | None | 1 day, 2:50:59 | None |\n| updated the smart contract deployment guide | https://github.com/ethereum-optimism/docs/pull/1585 | [krofax](https://github.com/krofax) | 0:09:00 | 0:25:49 | None |\n| Audit of SuperERC20 deployment tutorial. | https://github.com/ethereum-optimism/docs/pull/1584 | [qbzzt](https://github.com/qbzzt) | 1 day, 14:56:37 | None | None |\n| Deploying new dispute games with OPCM | https://github.com/ethereum-optimism/docs/pull/1583 | [krofax](https://github.com/krofax) | 0:55:17 | 2 days, 16:29:13 | None |\n| TESTING DO NOT MERGE | https://github.com/ethereum-optimism/docs/pull/1582 | [bradleycamacho](https://github.com/bradleycamacho) | 0:37:19 | None | None |\n| Audit of interop message passing tuturial | https://github.com/ethereum-optimism/docs/pull/1581 | [qbzzt](https://github.com/qbzzt) | 0:10:55 | None | None |\n| Op deployer update | https://github.com/ethereum-optimism/docs/pull/1580 | [krofax](https://github.com/krofax) | 0:49:28 | 23:21:54 | None |\n| Update op-geth/op-node for U15 | https://github.com/ethereum-optimism/docs/pull/1579 | [bradleycamacho](https://github.com/bradleycamacho) | 0:16:01 | 0:28:13 | None |\n| adding custom genesis guidance | https://github.com/ethereum-optimism/docs/pull/1578 | [sbvegan](https://github.com/sbvegan) | 0:06:09 | 4:17:21 | None |\n| Upgrade ERC20 tokens for interop | https://github.com/ethereum-optimism/docs/pull/1577 | [qbzzt](https://github.com/qbzzt) | 4:38:53 | None | None |\n| U15: New absolute prestate and op-challenger | https://github.com/ethereum-optimism/docs/pull/1576 | [sbvegan](https://github.com/sbvegan) | 0:19:57 | 17:08:39 | None |\n| fix: fix code snippets in interop tutorials | https://github.com/ethereum-optimism/docs/pull/1575 | [tremarkley](https://github.com/tremarkley) | 14:11:58 | 19:56:26 | None |\n| Tutorial: custom bridges (also how do have SuperchainERC20 equivalence without using the same addresses) | https://github.com/ethereum-optimism/docs/pull/1574 | [qbzzt](https://github.com/qbzzt) | 17:58:03 | None | None |\n| Managing the proposer address | https://github.com/ethereum-optimism/docs/pull/1573 | [krofax](https://github.com/krofax) | 1 day, 3:33:39 | None | None |\n| Add ETH predeploys to Interop Predeploys section | https://github.com/ethereum-optimism/docs/pull/1570 | [zainbacchus](https://github.com/zainbacchus) | 1 day, 22:41:50 | 1 day, 22:41:57 | None |\n| fix(interop): update outdated interop manual relay and viem tutorials | https://github.com/ethereum-optimism/docs/pull/1569 | [tremarkley](https://github.com/tremarkley) | 2 days, 10:17:22 | 2 days, 10:17:34 | None |\n| fix: rename SuperchainWETH to SuperchainETHBridge | https://github.com/ethereum-optimism/docs/pull/1568 | [tremarkley](https://github.com/tremarkley) | 0:45:22 | 0:45:26 | None |\n| Fix missing redirect | https://github.com/ethereum-optimism/docs/pull/1566 | [bradleycamacho](https://github.com/bradleycamacho) | 0:01:00 | 0:06:45 | None |\n| Update execution-config.mdx devp2p/disc defaults | https://github.com/ethereum-optimism/docs/pull/1565 | [emhane](https://github.com/emhane) | None | None | None |\n| Interop nav work | https://github.com/ethereum-optimism/docs/pull/1564 | [bradleycamacho](https://github.com/bradleycamacho) | 23:03:15 | 23:14:22 | None |\n| Smart contract section | https://github.com/ethereum-optimism/docs/pull/1563 | [bradleycamacho](https://github.com/bradleycamacho) | 0:06:16 | None | None |\n| Correct CLI flag name from throttle-interval to throttle-threshold | https://github.com/ethereum-optimism/docs/pull/1562 | [Kourin1996](https://github.com/Kourin1996) | 0:07:55 | 0:15:29 | None |\n| Remove the Mainnet date | https://github.com/ethereum-optimism/docs/pull/1561 | [krofax](https://github.com/krofax) | 1:09:36 | 1:26:22 | None |\n| Sb/u15 callout | https://github.com/ethereum-optimism/docs/pull/1560 | [sbvegan](https://github.com/sbvegan) | None | 0:12:52 | None |\n| superchain pause withdrawal test notice and docs updates | https://github.com/ethereum-optimism/docs/pull/1559 | [sbvegan](https://github.com/sbvegan) | 0:18:45 | 0:40:11 | None |\n| Update pectra-changes.mdx | https://github.com/ethereum-optimism/docs/pull/1558 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| Add utm tracking to all our optimism.io links | https://github.com/ethereum-optimism/docs/pull/1557 | [krofax](https://github.com/krofax) | 1:26:52 | 1 day, 21:33:56 | None |\n| Add clarification for OP-Supervisor | https://github.com/ethereum-optimism/docs/pull/1556 | [zainbacchus](https://github.com/zainbacchus) | 0:10:29 | 0:10:35 | None |\n| Fix broken link | https://github.com/ethereum-optimism/docs/pull/1555 | [Hopium21](https://github.com/Hopium21) | None | None | None |\n| Update ETH tutorial title | https://github.com/ethereum-optimism/docs/pull/1554 | [zainbacchus](https://github.com/zainbacchus) | 9:08:19 | 9:08:44 | None |\n| Update upgrade-14.mdx | https://github.com/ethereum-optimism/docs/pull/1553 | [sbvegan](https://github.com/sbvegan) | None | 0:46:31 | None |\n| Add Support for Nethermind on OP Docs | https://github.com/ethereum-optimism/docs/pull/1551 | [stdevMac](https://github.com/stdevMac) | 6 days, 8:01:56 | None | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-04-01..2025-04-30`", "CLOSED", 0, "opgitgovernance", "2025-05-01T00:21:45Z", "2025-05-05T18:40:46Z", "2025-05-05T18:40:46Z", "ethereum-optimism/docs", "2025-08-31 04:54:36"]
["I_kwDOKIwiaM60xaqv", 1594, "2025-04-01..2025-04-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 163 days, 17:20:01 | 156 days, 16:45:10 | 330 days, 14:44:24 |\n| Time to close | 150 days, 0:41:26 | 77 days, 4:51:26 | 329 days, 0:54:15 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 10 |\n| Number of most active mentors | 0 |\n| Total number of items created | 10 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Feedback for \u201cChain architecture\u201d | https://github.com/ethereum-optimism/docs/issues/1572 | [zhuangql](https://github.com/zhuangql) | 12:41:35 | 12:41:35 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1571 | [issamhaimour](https://github.com/issamhaimour) | None | 1 day, 13:09:56 | None |\n| <!-- Write any additional comments here when opening the pull request --> | https://github.com/ethereum-optimism/docs/issues/1567 | [Iambarry1](https://github.com/Iambarry1) | None | 3 days, 0:36:57 | None |\n| [DOCS] Add documentation for op-deployer intent file configuration | https://github.com/ethereum-optimism/docs/issues/1505 | [seromenho](https://github.com/seromenho) | 0:23:37 | 46 days, 19:18:45 | None |\n| [DOCS] Fix : Running a Local Development Environment Tutorial | https://github.com/ethereum-optimism/docs/issues/1327 | [krofax](https://github.com/krofax) | 12 days, 0:52:38 | 54 days, 0:25:22 | None |\n| Clarify differences between 2 challenger roles | https://github.com/ethereum-optimism/docs/issues/1208 | [Maar-io](https://github.com/Maar-io) | 3 days, 5:18:07 | 100 days, 9:17:29 | None |\n| [DOCS] Add more detail on \"Configuration Options\" pages. | https://github.com/ethereum-optimism/docs/issues/750 | [ZakAyesh](https://github.com/ZakAyesh) | 301 days, 8:37:42 | 301 days, 8:37:42 | None |\n| Best practices guide for node config | https://github.com/ethereum-optimism/docs/issues/706 | [cpengilly](https://github.com/cpengilly) | 328 days, 5:37:27 | 328 days, 5:37:27 | None |\n| Add Recommended Flags for `op-node` | https://github.com/ethereum-optimism/docs/issues/704 | [cpengilly](https://github.com/cpengilly) | 328 days, 5:59:10 | 328 days, 5:59:10 | None |\n| [DOCS] Update pause functionality | https://github.com/ethereum-optimism/docs/issues/686 | [mds1](https://github.com/mds1) | 336 days, 3:09:55 | 336 days, 3:09:56 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-04-01..2025-04-30 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "opgitgovernance", "2025-05-01T00:20:48Z", "2025-05-05T18:41:22Z", "2025-05-05T18:41:22Z", "ethereum-optimism/docs", "2025-08-31 04:54:36"]
["I_kwDOKIwiaM6uEIqU", 1505, "[DOCS] Add documentation for op-deployer intent file configuration", "## Description  \nIt would be helpful to have documentation for **OP-Deployer configurations** in a similar format to the [`deploy-config`](https://docs.optimism.io/operators/chain-operators/configuration/rollup) file, detailing all the possible properties and values for the intent file.  \n\nCurrently, for non-documented properties, users must manually inspect the `op-deployer` codebase to identify relevant properties and their usage. Clear documentation would streamline this process and improve the developer experience.  \n\nThis documentation should provide clarity on available options, especially for key configurations like **Alt-DA mode**, **Fault Proofs**, and other relevant settings.  \n\n## Acceptance criteria  \n- Create a dedicated page or section detailing the **intent file** configuration structure.  \n- Include explanations for each possible property and its values.  \n- Provide examples for common configurations such as enabling/disabling **Fault Proofs** and setting up **Alt-DA mode**.  \n- Ensure documentation aligns with the latest `op-deployer` release.\n- (Optional but ideal) Specify the **`op-deployer`** version that introduces or modifies each configuration property to improve clarity for developers working with older versions.  \n\n## User stories  \n- As an OP Stack chain operator, I want to reference clear documentation for the `op-deployer` intent file so that I can confidently configure my deployment.  \n- As a developer using Alt-DA, I need to know how to set up the intent file to ensure my custom data availability solution is properly integrated.  \n\n## Resources and support  \n- The [`deploy-config`](https://docs.optimism.io/operators/chain-operators/configuration/rollup) documentation serves as a good reference model.  \n\n## Action items  \n- Identify the complete list of intent file properties.  \n- Create documentation with descriptions, value types and examples.\n- Publish the new documentation and update relevant links across the OP Stack documentation site.  ", "CLOSED", 0, "seromenho", "2025-03-14T14:00:39Z", "2025-05-05T17:15:40Z", "2025-04-30T09:19:24Z", "ethereum-optimism/docs", "2025-08-31 04:54:36"]
["I_kwDOKIwiaM6Z6A2s", 980, "[DOCS] Dedicated paymaster section ", "## Brief Description of the Docs Request\r\n\r\nI am requesting the inclusion of a dedicated \"Paymaster\" section linked to the \"Account Abstraction\" (AA) page.\r\nWhile there is some [technical guide](https://github.com/ethereum-optimism/ecosystem/tree/main/docs/superchain-paymaster) available, there is no consolidated section covering all things Paymaster on the main docs.\r\n\r\n## Description of the Documentation You'd Like\r\n\r\nThe documentation should provide an overview of the Paymaster feature. It should include a guide that explains the role of Paymasters in AA, how to implement them on Optimism, and any best practices or examples. The [technical guide](https://github.com/ethereum-optimism/ecosystem/tree/main/docs/superchain-paymaster) can be referenced, but the new docs page should be more comprehensive and developer-friendly.\r\n\r\n## Links to Related Pages\r\n\r\n- Existing Optimism AA page: https://docs.optimism.io/builders/tools/build/account-abstraction\r\n- Existing technical guide on Paymasters: https://github.com/ethereum-optimism/ecosystem/tree/main/docs/superchain-paymaster\r\n\r\n## Additional Context\r\n\r\nCurrently, developers looking to implement Paymasters on Optimism need to refer to scattered resources or the [technical guide](https://github.com/ethereum-optimism/ecosystem/tree/main/docs/superchain-paymaster). A dedicated section in the docs would centralize this information, making it easier for developers to find and use. Given the increasing focus on Account Abstraction and the role of Paymasters, this addition will help streamline the development process for those building on Optimism.\r\n", "CLOSED", 0, "krofax", "2024-10-11T20:16:42Z", "2025-05-05T18:40:22Z", "2025-05-05T18:40:22Z", "ethereum-optimism/docs", "2025-08-31 04:54:36"]
["I_kwDOL-xLQ8611Ccy", 311, "[acceptance] Test: base; rpc connectivity", "Add a simple test into the `base` gate which checks RPC connectivity across the network.", "CLOSED", 0, "scharissis", "2025-05-09T02:45:33Z", "2025-05-09T02:46:09Z", "2025-05-09T02:46:07Z", "ethereum-optimism/infra", "2025-08-31 04:54:36"]
["I_kwDOL-xLQ86zhVX_", 292, "[acceptance] ensure ATs work against interop alphanet", "https://devnets.optimism.io/interop-alpha.html", "CLOSED", 0, "scharissis", "2025-04-22T18:48:36Z", "2025-05-09T02:42:13Z", "2025-05-09T02:42:13Z", "ethereum-optimism/infra", "2025-08-31 04:54:36"]
["I_kwDOL-xLQ86rhVeF", 206, "[nat] Use devnet environment manifest from netchef", "netchef can now produce the manifest we need. let's point op-nat at it.\n\nReference:\n* https://github.com/ethereum-optimism/infrastructure-services/pull/365", "CLOSED", 0, "scharissis", "2025-02-25T09:00:04Z", "2025-05-09T02:41:29Z", "2025-05-09T02:41:28Z", "ethereum-optimism/infra", "2025-08-31 04:54:36"]
["I_kwDOFpg0Ns62a3pm", 1141, "generate-token-list-workflow CI task is failing in main - preventing new token additions from passing validations", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\nThe generate-token-list-workflow CI task is failing in main. This is preventing validations from passing for all\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\nSee latest CI task in main\nhttps://github.com/ethereum-optimism/ethereum-optimism.github.io/runs/41871399377\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\nCI should pass in main\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\nCI\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\nCI\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\nCI\nhttps://github.com/ethereum-optimism/ethereum-optimism.github.io/runs/41871399377\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\nN/A\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "bstchow", "2025-05-13T15:38:49Z", "2025-05-14T16:00:23Z", "2025-05-14T16:00:23Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 04:54:37"]
["I_kwDOKSJyfM62bfpW", 802, "Fix EventLogPoller flakyness in CI workflow", "The EventLogPoller.spec.ts file is giving us issues in CI. the test flakes quite a bit and wastes time as we just need to re-trigger the test and let it run again. \n\nReconsider the logic here and modify the test to make it more robust in CI", "OPEN", 0, "jvmi7", "2025-05-13T16:44:23Z", "2025-05-13T16:44:33Z", null, "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM61NdgQ", 776, "Spec out social share card for twitter + warpcast", "", "CLOSED", 0, "jvmi7", "2025-05-05T16:38:34Z", "2025-05-13T16:45:51Z", "2025-05-13T16:44:56Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM61Nc7Z", 775, "Various boost mode UI updates", "https://www.notion.so/oplabs/Superstacks-Engineering-Tracking-1ddf153ee162808a84d8f47e2313bd15?p=1dff153ee162800d8ba6eb1df42f1b37&pm=s\n\nhttps://www.notion.so/oplabs/Superstacks-Engineering-Tracking-1ddf153ee162808a84d8f47e2313bd15?p=1e5f153ee16280e28104fef36a2f631e&pm=s\n\nhttps://www.notion.so/oplabs/Superstacks-Engineering-Tracking-1ddf153ee162808a84d8f47e2313bd15?p=1e7f153ee16280ae9b88cc7a5db22d2b&pm=s\n\nhttps://www.notion.so/oplabs/Superstacks-Engineering-Tracking-1ddf153ee162808a84d8f47e2313bd15?p=1eaf153ee16280b5915bf5d82526df5f&pm=s", "CLOSED", 0, "jvmi7", "2025-05-05T16:37:40Z", "2025-05-13T16:37:31Z", "2025-05-13T16:37:31Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM61NccR", 774, "Update title for boost mode activated", "https://www.notion.so/oplabs/Superstacks-Engineering-Tracking-1ddf153ee162808a84d8f47e2313bd15?p=1e5f153ee16280f8ac5bf0cbccb3c72f&pm=s", "CLOSED", 0, "jvmi7", "2025-05-05T16:36:44Z", "2025-05-13T16:37:29Z", "2025-05-13T16:37:29Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM60ZSgg", 759, "Fix 404 not found page flakyness on Superstacks", "Remove FF check for this", "CLOSED", 0, "jvmi7", "2025-04-28T23:47:05Z", "2025-05-13T16:37:27Z", "2025-05-13T16:37:26Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM60VicO", 754, "docker publishing pipeline in ecosystem", "", "CLOSED", 0, "hamdiallam", "2025-04-28T16:44:35Z", "2025-05-14T19:02:44Z", "2025-05-14T19:02:44Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM6ve7Ll", 703, "incentivized relays design doc", "framework for onchain incentives that can drive relays in the syperchain", "CLOSED", 0, "hamdiallam", "2025-03-24T18:26:00Z", "2025-05-12T15:18:08Z", "2025-05-12T15:18:08Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM6mV0JV", 618, "StandardBridge Bindings", "", "CLOSED", 0, "hamdiallam", "2025-01-15T20:02:21Z", "2025-05-15T17:20:58Z", "2025-05-15T17:20:57Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM6mV0IB", 617, "CrossDomainMessenger Bindings", "", "CLOSED", 0, "hamdiallam", "2025-01-15T20:02:19Z", "2025-05-15T17:21:03Z", "2025-05-15T17:21:02Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM6mUK4O", 616, "OptimismPortal Bindings", "", "CLOSED", 0, "hamdiallam", "2025-01-15T16:32:20Z", "2025-05-15T17:20:19Z", "2025-05-15T17:20:18Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM6kAw3a", 597, "op-viem & op-wagmi --> optimism viem/wagmi", "Based on the meeting notes [here](https://docs.google.com/document/d/1S4YbQEZsnsCBKdDeVcNxe_50DvcH-P3aP6bBwMibRQI/edit?tab=t.0), we need to make some updates to our viem and wagmi packages to ensure needed functionality remains available to developers.\n\nBindings for L1/L2 Pathways\n- [x] #616\n- [x] #617\n- [x] #618\n\nSuperchain Registry\n- [x] #614\n\nMisc\n- [ ] Remove all references to op-viem\n- [ ] Remove all references to the SDK (complete deprecation)\n- [ ] Ecosystem package documentation\n\nOnce these tasks are complete, we should also evaluate any places (if any) we're using op-viem internally so we can switch to our own implementation. There appear to be [a couple of places](https://github.com/search?q=org%3Aethereum-optimism%20op-viem&type=code) we may want to check on. ", "OPEN", 0, "fainashalts", "2024-12-20T00:29:43Z", "2025-05-15T17:21:03Z", null, "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM60l9rF", 762, "Implement Learn more modal for Boost section", "", "CLOSED", 0, "jvmi7", "2025-04-30T00:58:37Z", "2025-05-05T16:36:08Z", "2025-05-05T16:36:08Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM60l9m0", 761, "Implement 2x Boost UI update", "", "CLOSED", 0, "jvmi7", "2025-04-30T00:58:19Z", "2025-05-05T16:36:07Z", "2025-05-05T16:36:07Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM60ZR_P", 758, "Implement frontend UI for Superchain OG Boost", "", "CLOSED", 0, "jvmi7", "2025-04-28T23:45:36Z", "2025-05-05T16:35:31Z", "2025-05-05T16:35:31Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM60ZR3I", 757, "Implement backend route for Superchain OG boost", "", "CLOSED", 0, "jvmi7", "2025-04-28T23:45:15Z", "2025-05-05T16:36:00Z", "2025-05-05T16:36:00Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM60VugT", 755, "Superchain OG Boost Feature", "Implement the Superchain OG boost feature for the superstacks UI", "CLOSED", 0, "tarunkhasnavis", "2025-04-28T17:06:05Z", "2025-05-05T16:36:12Z", "2025-05-05T16:36:12Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOKSJyfM6xakMN", 728, "auto relayer ecosystem app", "Leveraging #702  & #727, provide a TS relayer app using our viem library to relay messages from the L2ToL2CrossDomainMessenger between chains\n\nOptionally include a \"Local\" mode such that we require a stateful service like ponder and can leverage #727 as a library as well instead of as a service", "CLOSED", 0, "hamdiallam", "2025-04-07T11:23:56Z", "2025-05-05T17:03:36Z", "2025-05-05T17:03:36Z", "ethereum-optimism/ecosystem", "2025-08-31 04:54:39"]
["I_kwDOL-xLQ862_bF-", 357, "proxyd: (interop-message-validation) Possible optimizations in proxyd to avoid/soften the IO to supervisor", "There's a lot of preflight processing which supervisor does on its end to before even validating what's backed by the supervisor DB.\n\nThose static preprocessing routines can be potentially performed in proxyd to reject the incoming entries failing them without needing to IO with the supervisor.\n\nMoreover, the inbox entries decided to be sent to supervisor for validation can be potentially duplicated, which unnecessarily exhausts the supervisor further.\n\nA/C:\n- proxyd to perform static access parsing checks on its end\n- proxyd to perform deduplication of inbox entries on a per-access basis before sending them to supervisor.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T13:25:01Z", "2025-05-17T00:05:48Z", "2025-05-14T17:59:10Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOL-xLQ862_b35", 362, "proxyd: (interop-message-validation) Bounding/limiting the access lists\u2019 sizes within the incoming transaction", "Beyond the req size check (which has the freedom to be a bit flexible), what truly matters is the size of access list entries sent to the supervisor for final validation.\n\nWe don't want to exhaust the supervisor potentially sending thousands of these entries.\n\nA/C:\n- After all the processing and optimization, proxyd should be capable of limiting the access list entries decided to be forwarded to supervisor for the validation.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T13:05:20Z", "2025-05-17T00:10:20Z", "2025-05-14T19:01:26Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOL-xLQ862_beO", 361, "proxyd: (interop message validation) Bounding/limiting the requests\u2019 size housing the interop params", "Many a times, there's a direct correlation between the size of the incoming transaction req body and the payload which gets sent to the supervisor for validation.\n\nAnd currently, proxyd can potentially exhaust the supervisor as well as itself with some static checks, if an arbitrarily large incoming transaction req is processed blindly.\n\nA/C:\n- In favor of not exhausting the backing supervisor, proxyd should have an interop specific check on the size of the incoming transaction as early in the message-validation path as possible.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T13:01:59Z", "2025-05-17T00:08:53Z", "2025-05-16T21:05:24Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOL-xLQ862_bVr", 360, "proxyd: (interop-message-validation) Interop-specific sender rate limits scoped per client", "Although proxyd has support for global and even method-specific override rate limits, there still be different traffic patterns between a non-interop sendRawTransaction v/s an interop one.\n\nTherefore, proxyd should have a way to define rate limits scoped per client dedicated to interop message validation\n\nA/C:\n- Proxyd has support for configuring and exercising the interop-specific rate limits on the caller.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T12:58:23Z", "2025-05-17T00:09:36Z", "2025-05-14T19:01:21Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOL-xLQ862_bQl", 359, "proxyd: (interop message validation) Adherence to interop error code\u2019s spec", "There's a interop error code spec which describes a mapping between the errors returned by supervisor v/s RPC Error codes. Proxyd should adhere to that spec when returning interop-related errors to its clients.\n\nCurrently, supervisor doesn't expose them rightfully in its RPC.\n\nA/C:\n- Proxyd rightfully adheres to interop error code spec when returning interop-related errors", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T12:55:48Z", "2025-05-17T00:09:28Z", "2025-05-14T19:01:14Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOL-xLQ862_bJy", 358, "proxyd: (interop message validation) Interpretability of interop transactions and supervisor-backed validation against them", "A/C:\n- Proxyd should be able to interpret incoming interop transaction\n- It should be supervisor-aware to validate that incoming transaction", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T12:53:39Z", "2025-05-17T00:09:23Z", "2025-05-14T19:01:05Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOL-xLQ862UEU1", 342, "[acceptance] DEVSTACK_ORCHESTRATOR=sysext", "`DEVSTACK_ORCHESTRATOR=sysext` should be new default to work with op-devstack. Lets set this if unset.\n\nFor example:\n```\nDEVSTACK_ORCHESTRATOR=sysext\nDEVNET_ENV_URL=devnets/alpaca-devnet.json # path to the devnet manifest\ngo run cmd/main.go \\\n  --gate interop \\                  # The gate to run\n  --testdir ../../optimism/ \\       # Path to the directory containing your tests\n  --validators validators.yaml \\   \n```\n\nBut it'd probably best to add this within the Go code.", "CLOSED", 0, "scharissis", "2025-05-13T04:16:42Z", "2025-05-16T13:27:22Z", "2025-05-16T13:27:21Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOL-xLQ86yJlz_", 280, "[op-acceptor]: failure logs barely readable", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nWhen an op-acceptor test fails, the Go logs are buried in a string-escaped json output, which makes it unnecessarily difficult to identify the issue.\n\nWe should have a readable output available, even though internally we leverage json output for `go test`\n\nsee https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/86781/workflows/842e21e1-5cff-4ae4-a87f-352d1d0acdc8/jobs/3428774 for an example", "CLOSED", 0, "sigma", "2025-04-11T14:37:26Z", "2025-05-13T23:42:47Z", "2025-05-13T23:42:47Z", "ethereum-optimism/infra", "2025-08-31 04:54:40"]
["I_kwDOLB-lzc62VPuu", 702, "Clarify and document the peer scoring mechanism", "From the [docs](https://specs.optimism.io/protocol/rollup-node-p2p.html#peer-management):\n\n> Peers may be banned if their performance score is too low, or if an objectively malicious action was detected.\n\nHowever the scoring mechanism is not described. Additionally, it would be good for node operators to understand:\n\n1. How to keep the peer score up\n2. How the score itself is determined\n3. How to resolve a continuous peer ban\n4. What are the implications/effects of a continuous peer ban", "OPEN", 0, "kamikazechaser", "2025-05-13T07:19:42Z", "2025-05-13T07:19:42Z", null, "ethereum-optimism/specs", "2025-08-31 04:54:41"]
["I_kwDOH2Qg5s6246d_", 608, "how to disable rate limit", "is there any way to disable the rate limit\n\nrecently always show \"over rate limit\" it's annoying\n\nis there any thing like\n\n--http.ratelimit  --rpc.ratelimit  ?\n\nplease help", "CLOSED", 0, "kugimiya530", "2025-05-16T08:47:43Z", "2025-05-16T20:07:38Z", "2025-05-16T20:07:37Z", "ethereum-optimism/op-geth", "2025-08-31 04:54:43"]
["I_kwDOH2Qg5s61sOwe", 600, "Adopt upstream v.1.15.11", "Upstream release: https://github.com/ethereum/go-ethereum/releases/tag/v1.15.11\n\nWe need to merge this into op-geth.\nAnd update the monorepo dependencies to this new op-geth version then.\n\nBlocked by:\n- `1.15.4...7`: https://github.com/ethereum-optimism/op-geth/pull/571\n- `1.15.8...10`: https://github.com/ethereum-optimism/op-geth/pull/593\n\nop-geth PR: https://github.com/ethereum-optimism/op-geth/pull/602\nMonorepo PR: https://github.com/ethereum-optimism/optimism/pull/15829\n", "CLOSED", 0, "protolambda", "2025-05-08T08:47:15Z", "2025-05-15T14:31:30Z", "2025-05-15T14:31:30Z", "ethereum-optimism/op-geth", "2025-08-31 04:54:43"]
["I_kwDOH2Qg5s60iZ9f", 595, "check if upstream merge will conflict with interop diff", "We still need to do the upstream merge for at least:\n\n```\n1.15.4, 1.15.5, 1.15.6, 1.15.7, 1.15.8, 1.15.9, 1.15.10\n```\n\nwe would like to know if the diffs overlap with the diffs for interop. ", "CLOSED", 0, "geoknee", "2025-04-29T16:27:07Z", "2025-05-16T12:51:31Z", "2025-05-16T12:51:31Z", "ethereum-optimism/op-geth", "2025-08-31 04:54:43"]
["I_kwDOH2Qg5s6vcuEA", 559, "Merge upstream geth/v1.15.{4,5,6,7}", "The first two releases were Prague fixs for Holesky and Sepolia, but still contained a few other changes. The next two contain features that are needed for other work. The earlier we catch up with upstream, the better.", "CLOSED", 0, "sebastianst", "2025-03-24T14:59:00Z", "2025-05-15T12:55:27Z", "2025-05-15T12:55:27Z", "ethereum-optimism/op-geth", "2025-08-31 04:54:43"]
["I_kwDOKIsnqM62y-Yo", 991, "Cache RPC responses in CI for improved performance", "forge caches RPC responses automatically, they are saved to `~/.foundry/cache/rpc/{chain}/{blockNumber}`, so there is probably just some CI config we need to save/load the cache to improve CI performance\n\nWe have code in the monorepo that handles this caching based on the pinned block: https://github.com/ethereum-optimism/optimism/blob/b6a82c2de9c9372d3012e73e702e9671579425b7/.circleci/config.yml#L869-L915", "OPEN", 0, "mds1", "2025-05-15T16:32:11Z", "2025-05-15T16:32:11Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 04:55:00"]
["I_kwDOJ_r-bs61FCgb", 1003, "chek fail", "<!--\nNeed help?\nRefer to the design review meeting guidelines: https://github.com/ethereum-optimism/design-docs\n-->\n\n**Title of Meeting**\n<!--\nOne sentence overview of the meeting\n-->\n\n**Date, Time and Duration**\n<!--\nConsider using https://www.worldtimebuddy.com/ to help schedule\nMeetings default to 30 minutes, please ask for more if necessary\n-->\n\n**Link to design doc**\n<!--\nInclude a link to the PR for the design doc or other links to be discussed\n-->\n\n**Additional Context**\n<!--\nAny additional information that the attendees should know ahead of time?\n-->\n\n**Requested Attendees**\n<!--\nWho should attend the meeting?\n-->", "CLOSED", 0, "datis56", "2025-05-04T13:03:57Z", "2025-05-07T03:16:50Z", "2025-05-07T03:16:50Z", "ethereum-optimism/superchain-registry", "2025-08-31 04:55:04"]
["I_kwDOJ_r-bs61FCcE", 1002, "\u0628\u0631\u0631\u0633\u06cc", "<!--\nNeed help?\nRefer to the design review meeting guidelines: https://github.com/ethereum-optimism/design-docs\n-->\n\n**Title of Meeting**\n<!--\nOne sentence overview of the meeting\n-->\n\n**Date, Time and Duration**\n<!--\nConsider using https://www.worldtimebuddy.com/ to help schedule\nMeetings default to 30 minutes, please ask for more if necessary\n-->\n\n**Link to design doc**\n<!--\nInclude a link to the PR for the design doc or other links to be discussed\n-->\n\n**Additional Context**\n<!--\nAny additional information that the attendees should know ahead of time?\n-->\n\n**Requested Attendees**\n<!--\nWho should attend the meeting?\n-->", "CLOSED", 0, "datis56", "2025-05-04T13:03:25Z", "2025-05-07T03:16:37Z", "2025-05-07T03:16:37Z", "ethereum-optimism/superchain-registry", "2025-08-31 04:55:04"]
["I_kwDOJ_r-bs61FCZw", 1001, "\u0628\u0631\u0631\u0633\u06cc \u0641\u0627\u06cc\u0644", "<!--\nNeed help?\nRefer to the design review meeting guidelines: https://github.com/ethereum-optimism/design-docs\n-->\n\n**Title of Meeting**\n<!--\nOne sentence overview of the meeting\n-->\n\n**Date, Time and Duration**\n<!--\nConsider using https://www.worldtimebuddy.com/ to help schedule\nMeetings default to 30 minutes, please ask for more if necessary\n-->\n\n**Link to design doc**\n<!--\nInclude a link to the PR for the design doc or other links to be discussed\n-->\n\n**Additional Context**\n<!--\nAny additional information that the attendees should know ahead of time?\n-->\n\n**Requested Attendees**\n<!--\nWho should attend the meeting?\n-->", "CLOSED", 0, "datis56", "2025-05-04T13:03:10Z", "2025-05-07T03:16:57Z", "2025-05-07T03:16:57Z", "ethereum-optimism/superchain-registry", "2025-08-31 04:55:04"]
["I_kwDOJ_r-bs6t1yuN", 938, "Check addresses to be checksummed", "Some addresses in standard-version-sepolia.toml do not have the correct Ethereum checksum format. This causes issues when importing the file in Solidity.\n\nAll Ethereum addresses should be correctly checksummed to prevent Solidity import errors, we should implement a check in the CI pipeline to detect incorrectly formatted addresses when modifying addresses.", "CLOSED", 0, "JosepBove", "2025-03-13T10:00:34Z", "2025-05-07T18:07:38Z", "2025-05-07T18:07:38Z", "ethereum-optimism/superchain-registry", "2025-08-31 04:55:04"]
["I_kwDODjvEJM62uvO7", 15955, "Transactions getting vanished after few hours", "I am on optimism tags/v1.13.2 , Transactions on my L2 are getting vanished after few hours, Balances reverts  back, contract deployments not exist, Please  help.\nNote, My Chain was paused for few days and I restarted everything again, Previous contracts and balances are there. Issue is happening after we reindexed the geth node. ", "CLOSED", 0, "9mmDev", "2025-05-15T10:10:28Z", "2025-05-16T17:05:19Z", "2025-05-16T17:05:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62pdZm", 15944, "Make it easy to build op-program with custom config", "It's multiple steps to build op-program for a new devnet, a bash script (or something) to automate this would save a lot of time.", "OPEN", 0, "pauldowman", "2025-05-14T21:30:54Z", "2025-05-14T21:30:54Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62m7JA", 15931, "devstack: sysext backend doesn't expose L2 rollup config properly", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\nexample of test-facing issue:\n\n```\nblockTime := sys.L2Chain.Escape().RollupConfig().BlockTime\n```\n\nthis currently sets the blocktime to 0, which is obviously incorrect\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "sigma", "2025-05-14T16:20:36Z", "2025-05-15T04:08:13Z", "2025-05-15T04:08:13Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62lhN6", 15922, "scr: add ops tool to create/update depsets", "", "OPEN", 0, "bitwiseguy", "2025-05-14T14:16:13Z", "2025-05-16T17:45:25Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62iN8v", 15907, "op-node/p2p: improve observability into peer scores", "As of now it is difficult to understand and observe the p2p peer scoring behaviour in op-node. We should add metrics and improve logging (e.g. print the reasons why a peer is being negatively scored if possible) to help debugging efforts when there is a drop in peer connectivity. ", "OPEN", 0, "geoknee", "2025-05-14T09:19:11Z", "2025-05-15T21:25:47Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d-PN", 15900, "interop: load test with tx filled with mega large event", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:49:21Z", "2025-05-15T15:52:19Z", "2025-05-15T15:52:17Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d-OR", 15899, "interop: load test w/ tx that executes messages in a loop", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:49:19Z", "2025-05-15T15:52:23Z", "2025-05-15T15:52:22Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d-NZ", 15898, "interop: load test w/ tx that executes many valid messages, and last message is invalid", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:49:17Z", "2025-05-15T15:52:32Z", "2025-05-15T15:52:31Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d-Me", 15897, "interop: load test w/ tx with exec msg that passes tx-pool checks, but not block-building", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:49:14Z", "2025-05-15T15:52:53Z", "2025-05-15T15:52:51Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d9t6", 15896, "interop: load test w/ tx w/ many tiny events", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:47:56Z", "2025-05-15T15:52:57Z", "2025-05-15T15:52:56Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d9tC", 15895, "interop: load test w/ txs that take near (leave room for system tx) 30M gas, but have invalid exec msg", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:47:54Z", "2025-05-15T15:53:21Z", "2025-05-15T15:53:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d9rP", 15894, "spam txs with exec msg, from same tx source reference", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:47:52Z", "2025-05-15T15:53:02Z", "2025-05-15T15:53:01Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d9qS", 15893, "spam txs with exec msg from different addresses", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:47:49Z", "2025-05-15T15:53:09Z", "2025-05-15T15:53:07Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62d9o7", 15892, "interop: spam txs with exec msg from same address", "", "CLOSED", 0, "teddyknox", "2025-05-13T21:47:45Z", "2025-05-15T15:53:13Z", "2025-05-15T15:53:12Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62bC5b", 15886, "FMA testing checklist", "", "CLOSED", 0, "teddyknox", "2025-05-13T15:56:02Z", "2025-05-14T18:00:21Z", "2025-05-14T18:00:20Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62azM2", 15884, "interop: Ensure new chains can be created post-interop", "Review the process for creating new chains post-interop and ensure it works with op-deployer/opcm and has suitable documentation. Need to decide on what is in scope for which releases - ie we could require new chains to continue to use pre-interop genesis then migrate and activate the fork initially but would need to document that (and at some point we will want to be able to create new chains with interop enabled at genesis).\n\nAlso need to decide whether/when to support deploying new chains into a dependency set together or if when deploying multiple chains in the same intent file they still go into their own separate dependency sets.", "OPEN", 0, "ajsutton", "2025-05-13T15:32:14Z", "2025-05-14T14:35:31Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62aYBI", 15879, "Upgrade Inventory is defined in netchef", "# Description\n* Create an netchef manifest which will be the canonnical manifest which will contain the componets to deploy and upgrade an devnet into interop\n\n* Nice to have, use the manifest + netchef without needing to un/comment interop components by hand", "CLOSED", 0, "jelias2", "2025-05-13T14:55:13Z", "2025-05-14T20:37:28Z", "2025-05-14T20:37:27Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62aUA4", 15877, "Upgrade Runbook can be completed in less than 3 hours", "Description\n\nThe actual upgrade to take two permissionless L2s to an interop enabled permissionless L2 should take less than 3 hours. \n\nTime measured is the time from when the upgrade portion of the upgrade runbook begins to when the upgrade is completed and inital validation of interop is completed. Proofs validation and withdrawals may take longer than the 3h", "CLOSED", 0, "jelias2", "2025-05-13T14:49:59Z", "2025-05-16T18:19:23Z", "2025-05-16T18:19:22Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62ZaQJ", 15873, "op-supervisor: add custom [Marshal|Unmarshal]Toml functions to StaticConfigDependencySet", "To prevent extraneous depset data from being written to every chain config .toml file in the scr, we should add custom `StaticConfigDependencySet.MarshalTOML` and `StaticConfigDependencySet.UnmarshalTOML` methods that match the JSON ones [here](https://github.com/ethereum-optimism/optimism/blob/develop/op-supervisor/supervisor/backend/depset/static.go#L71-L87).\n\nWe should also add toml tags to each field that will be written into the chain configs.", "CLOSED", 0, "bitwiseguy", "2025-05-13T13:34:25Z", "2025-05-16T16:59:22Z", "2025-05-13T20:20:31Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62SU7Z", 15863, "Supervisor initial sync state in action tests differs from Sequencer initial sync state", "As demonstrated in [interop_fork_test.go](https://github.com/ethereum-optimism/optimism/blob/develop/op-e2e/actions/interop/interop_fork_test.go#L93). This is confusing and adds complexity to test-writing.", "OPEN", 0, "teddyknox", "2025-05-12T22:01:42Z", "2025-05-12T22:01:42Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62STca", 15859, "interop: op-node: Implement prioritization per event-source", "Part of the op-node simplification P/PS proposal. By prioritizing some of the sources we can rely more on the important things being processed timely.\n", "CLOSED", 0, "protolambda", "2025-05-12T21:57:27Z", "2025-05-12T22:21:23Z", "2025-05-12T22:21:22Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62SS9O", 15858, "interop: op-node: move external inputs to event system", "Utilize the event system to simplify the op-node driver code by feeding inputs directly into the event system rather than going through an extra channel hop.\n", "CLOSED", 0, "protolambda", "2025-05-12T21:56:02Z", "2025-05-15T13:47:22Z", "2025-05-15T13:47:21Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62QxLm", 15851, "Flashblocks Support", "Integrate Flashblocks interop interop devnets and validate cross-chain behavior.\n\nThis issue tracks the work to complete [this Interop workstream](https://www.notion.so/oplabs/Flashblocks-Support-1eff153ee162805e9928d88cff38697f).", "OPEN", 0, "alfonso-op", "2025-05-12T18:52:29Z", "2025-05-12T18:52:34Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62P78E", 15846, "Messaging testing checklist", "", "OPEN", 0, "teddyknox", "2025-05-12T17:20:26Z", "2025-05-15T15:47:10Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62P7nt", 15845, "Upgrade testing checklist", "", "OPEN", 0, "teddyknox", "2025-05-12T17:19:50Z", "2025-05-15T15:47:06Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62OU2d", 15839, "interop: devstack: acceptance test tx messaging migration poc", "PoC for generalizing existing message tests. Current [NAT interop messaging tests](https://github.com/ethereum-optimism/optimism/issues/14529) are developed using legacy devnet-sdk stack. Need to migrate these tests using devstack to make them targeting both sysgo and sysext backends, as well as applying DSL.", "CLOSED", 0, "pcw109550", "2025-05-12T14:37:33Z", "2025-05-12T16:21:19Z", "2025-05-12T16:21:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62OQ2O", 15838, "op-devstack: sysext: fix op-faucet", "sysext op faucet wrapper is not aware of url path, experiencing\n```\nt=2025-05-12T13:52:28+0000 lvl=warn msg=\"Served faucet_requestETH\" conn=172.16.0.1:45186 reqid=3 duration=29.332\u00b5s err=\"the method faucet_requestETH does not exist/is not available\"\nt=2025-05-12T13:52:48+0000 lvl=warn msg=\"Served faucet_requestETH\" conn=172.16.0.1:45186 reqid=1 duration=153.701\u00b5s err=\"the method faucet_requestETH does not exist/is not available\"\nt=2025-05-12T13:52:49+0000 lvl=warn msg=\"Served faucet_requestETH\" conn=172.16.0.1:45186 reqid=2 duration=59.206\u00b5s err=\"the method faucet_requestETH does not exist/is not available\"\n```\nthese kind of errors.\n\nThe sysext must initialize op-faucet clients by append path(`/chain/<chainID>`) to their url. [Doc](https://github.com/ethereum-optimism/optimism/tree/develop/op-faucet#overview)", "CLOSED", 0, "pcw109550", "2025-05-12T14:32:00Z", "2025-05-12T22:42:54Z", "2025-05-12T22:42:54Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM62GuI_", 15827, "Stage 1.4 shipping checklist", "Tracking some things that need to be done before shipping Asterisc:\n\n- [x] Give Coinbase security the opportunity to audit\n- [ ] Publish the audit results in https://github.com/ethereum-optimism/optimism/tree/develop/docs/security-reviews", "CLOSED", 0, "pauldowman", "2025-05-11T20:49:52Z", "2025-09-03T15:03:21Z", "2025-09-03T15:03:21Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM618Jsk", 15820, "Interop: generalize sync tests poc", "Port `TestL2CLResync` to target sysgo and sysext(kt-devnet).", "CLOSED", 0, "pcw109550", "2025-05-09T14:59:40Z", "2025-05-12T12:07:40Z", "2025-05-12T12:07:40Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM61y6Rq", 15800, "[U16] StandardValidator Validation Overrides", "Validation-override framework\n\na. Add a `ValidationOverrides` struct and an optional one-element array arg to `validate()`.  \nb. Hard-code default role addresses in the contract; fall back to overrides only when supplied.  \nc. Enforce: if `overrides.length > 0` then `_allowFailure` must be `true`, else revert.  \nd. Prepend the default error string `HAS-OVERRIDES` whenever overrides are used.  \ne. Handle the following concrete override cases:  \n   \u2022 `guardian` (newly checked, ignore paused state).  \n   \u2022 `l1ProxyAdminOwner` (Base & Uni chain\u2013specific addresses only), so we need to ensure that their alternative L1PAOs are only accepted when their SystemConfig's are input).\n   \u2022 `challenger` (Base-specific).  \n\nSee the [design doc](https://github.com/ethereum-optimism/design-docs/pull/280) for a sample impl.", "CLOSED", 0, "maurelian", "2025-05-08T20:27:19Z", "2025-05-14T17:23:00Z", "2025-05-14T17:23:00Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM61y02W", 15797, "[U16] Update Anchor Root Validation approach", "> A few suggestions on the anchor root validation:\n> - For permissioned chains, I would suggest we verify:\n>   - The root is either 0xdead or non-zero\n>   - The l2 sequence number is 0 if the root is 0xdead, non-zero otherwise\n> - For permissionless chains, we want to verify:\n>   -  The root is not equal to 0xdead or 0x0\n>   -  The l2 sequence number is not zero\n> \n> The ASR checks are really important for permissionless. \n> \n> Also, post U13, we can use [`getAnchorRoot`](https://github.com/ethereum-optimism/optimism/blob/15bd851853f0c93cacadc2d3b81049ea1609a87d/packages/contracts-bedrock/src/dispute/AnchorStateRegistry.sol#L147-L157) without a gameType argument.  The roots are now shared across games.  \n\n _Originally posted by @mbaxter in [#15018](https://github.com/ethereum-optimism/optimism/issues/15018#issuecomment-2751698743)_", "CLOSED", 0, "maurelian", "2025-05-08T20:18:01Z", "2025-05-15T17:38:25Z", "2025-05-15T17:38:24Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM60C0At", 15574, "Migrate devnet-sdk acceptance tests to devstack framework", "Update the `op-acceptance-tests/tests/interop` package to use devstack.\n", "CLOSED", 0, "protolambda", "2025-04-25T17:29:20Z", "2025-10-01T14:39:49Z", "2025-10-01T14:39:49Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zdm0c", 15499, "Test cross-reorg of chain A occurs due to equivocation reorg by sequencer of chain B", "Craft a L2 message starts as valid, and is included. But then we reorg the initiating side (before it is batch-submitted), which invalidates the executing side.\n\nTo make this work, we need the sequencer on the initiating side to do an equivocating reorg, that removes or changes the initiating message. The sequencer on the executing side will not see this reorg at first, and include the message.\n\nBut then once the reorg happens and is implied, the sequencer will have to reorg their chain to remove the bad executing message.\n\nInitially we expect these reorgs to all be only applied upon cross-safe validation (using the existing reorg logic), when data is confirmed on L1. Later (optimization) we may reuse this test-case if we make the sequencer reorg ahead of the batch-submission.\n\n", "CLOSED", 0, "protolambda", "2025-04-22T12:06:22Z", "2025-05-12T13:53:47Z", "2025-05-09T14:27:22Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zcFl8", 15496, "Interop: tx message testing:  Execute msg with identifier pointing to the exec msg itself (payload hash cannot be right)", "", "CLOSED", 0, "pcw109550", "2025-04-22T09:20:47Z", "2025-05-14T13:52:05Z", "2025-05-05T11:39:11Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zcFU2", 15495, "Interop: tx message testing: Construct random graphs of messages, with cycles or invalid executing messages", "", "CLOSED", 0, "pcw109550", "2025-04-22T09:20:19Z", "2025-05-14T13:51:59Z", "2025-05-05T12:15:15Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zcEsf", 15494, "Interop: tx message testing: Transaction B0 exec chain A1, A0 exec B1: cycle across chains, within same tx", "inter-dependent and cyclic", "CLOSED", 0, "pcw109550", "2025-04-22T09:19:14Z", "2025-05-14T13:51:54Z", "2025-04-28T15:08:24Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zcEXU", 15493, "Interop: tx message testing: Transaction B0 exec chain A1, A0 exec B1: cycle across chains, within same timestamp", "(requires coordinated building, naive test may thus flake, needs to be accounted for)", "CLOSED", 0, "pcw109550", "2025-04-22T09:18:41Z", "2025-05-14T13:51:50Z", "2025-04-28T14:37:21Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zYoyv", 15489, "[acceptance] Cross-chain transactions", "Ensure valid and invalid cross-chain transactions behave as expected.", "CLOSED", 0, "scharissis", "2025-04-22T01:00:17Z", "2025-05-12T17:31:07Z", "2025-05-12T17:31:06Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zYoCh", 15488, "acceptance tests", "Release-readiness gates and acceptance tests for the interop network which are not feature-specific. General or infra-focused tests.", "CLOSED", 0, "scharissis", "2025-04-22T00:57:37Z", "2025-05-12T14:31:16Z", "2025-05-12T14:31:15Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zX18q", 15486, "kt-devnet: add op-faucet", "We need a faucet available for testing across sysgo / syskt\n\nAdd op-faucet to kurtosis-devnet instances so the devstack can develop a dependency to it.", "CLOSED", 0, "sigma", "2025-04-21T21:51:22Z", "2025-05-12T13:20:02Z", "2025-04-24T15:05:38Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6zJp2m", 15467, "Interop: client upgrade acceptance-test", "The upgrade should have an acceptance test that:\n- Starts with pre-interop fork\n- Runs through the fork timestamp\n- Confirms basic pre/post conditions.\n\nThis excludes the proof-scope of the testing, and focuses just on op-node/op-supervisor.\nProof scope may be added independently, or on top of this as follow-up.\n\nBlocked by https://github.com/ethereum-optimism/optimism/issues/15460\nAnd blocked by https://github.com/ethereum-optimism/optimism/issues/13732\n\nThis can be programmed against the `devstack`, such that we can repeat this often against an ephemeral go network, and also kurtosis.\n\nThe test pre and post parts should be split out as two public functions (taking a `devtest.T`) such that we can run the pre- and post-part as independent tests. Since when we run it against a real running network we can only run one or the other.\n", "CLOSED", 0, "protolambda", "2025-04-18T19:55:16Z", "2025-05-12T13:20:01Z", "2025-05-08T09:00:47Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6y9p6F", 15448, "Add support for op-node p2p to devstack's sysgo", "devstack sysgo's L2CL abstraction does not support p2p, which blocks multiple L2CL topology per single L2 Chain. Enable this by plugging in op-node's p2p stack to sysgo L2CL abstraction.", "CLOSED", 0, "pcw109550", "2025-04-17T13:29:02Z", "2025-05-12T14:16:10Z", "2025-04-21T15:10:12Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6yxZsC", 15427, "Supervisor should reconnect to node after node restart", "op-supervisor connects with op-node via ws connection when it starts, or using `admin_addL2RPC`. When op-node restarts and even if it listens with persistent ws endpoint again, op-supervisor fails to reconnect.\n\nNeed a reconnection/connection cleanup logic at op-supervisor. \n\nWe may need this for for fluent [interop sync tests](https://github.com/ethereum-optimism/optimism/issues/15325).", "CLOSED", 0, "pcw109550", "2025-04-16T11:06:23Z", "2025-05-12T17:38:38Z", "2025-04-17T15:27:45Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6ynh6R", 15413, "[devnet-sdk] expose proxyd", "Need to:\n- ensure that kurtosis package support for proxyd is fully functional\n- expose proxyd through devnet-sdk (provide global access over multiple nodes)", "CLOSED", 0, "sigma", "2025-04-15T14:45:50Z", "2025-05-16T19:52:59Z", "2025-04-25T00:02:23Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6ykr4s", 15410, "Interop: tx message testing: Transaction executes message, and later transaction in block initiates it: cycle in block", "", "CLOSED", 0, "pcw109550", "2025-04-15T10:29:36Z", "2025-05-14T13:51:43Z", "2025-04-28T14:07:41Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6ybiwh", 15391, "Interop: tx message testing: Transaction executes message, then initiates it: cycle with self.", "", "CLOSED", 0, "pcw109550", "2025-04-14T16:26:22Z", "2025-05-14T13:51:38Z", "2025-04-28T14:07:40Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6yYtdR", 15388, "Interop: tx message testing: Cross-pattern: tx on B executes message from A, and vice-versa within same tx", "", "CLOSED", 0, "pcw109550", "2025-04-14T11:48:39Z", "2025-05-14T13:51:34Z", "2025-04-15T14:10:59Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6yYKp7", 15387, "Interop: tx message testing: Execute message with timestamp > current timestamp", "Issue created for tracking purpose.\n\nFixed by https://github.com/ethereum-optimism/optimism/pull/15149. ", "CLOSED", 0, "pcw109550", "2025-04-14T10:49:45Z", "2025-05-14T13:51:20Z", "2025-04-14T10:50:56Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6yYKSn", 15386, "Interop: tx message testing: Transaction executes message within same block (same timestamp)", "Issue created for tracking purpose.\n\nFixed by https://github.com/ethereum-optimism/optimism/pull/15149. ", "CLOSED", 0, "pcw109550", "2025-04-14T10:49:05Z", "2025-05-14T13:51:27Z", "2025-04-14T10:50:50Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6x8e8p", 15335, "Test that tx, currently invalid, is removed from mempool immediately, even if it will be valid later", "Build inter-dependent txs (i.e. second depends on first) with same sender address, incremented nonce.\n\nThe 2nd tx should be blocked, until the first tx confirms (resubmitting may be necessary), since the access-list checks are static and proactively happen for the second, even when the first is not processed.\n\nLong-term we want to improve the UX by buffering the tx that points to a future event, so that resubmitting is not necessary.\n", "OPEN", 0, "protolambda", "2025-04-10T11:56:31Z", "2025-05-15T15:48:12Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6x8Y5L", 15330, "Test sequencer equivocation resolution", "Test that after a sequencer equivocation (= conflicting unsafe block at same block height) nodes will sync and resolve to a single canonical chain.\n\nTechnically we can cover the following cases:\n  - op-node and op-supervisor reorg together\n  - op-node is on the good chain, while supervisor is on the good chain.\n  - op-supervisor is on the good chain, while op-node is on the wrong chain.\n\nThe first one is most important, where they reorg together.\n\nImplement a basic test like that, where the test-sequencer takes sequencing control and then is instructed by the test (via the bindings to the RPC client), to temporarily stop auto-building blocks, and instead build a block that reorgs the chain.\n\nVerifying the reorg happened: at the same block-height we must have seen two different block-hashes on the same chain.\n", "CLOSED", 0, "protolambda", "2025-04-10T11:46:01Z", "2025-05-12T13:54:16Z", "2025-05-05T14:04:26Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6x8V4G", 15328, "Test L2 node behavior in different L1 finalization scenarios", "Verify that these three events can occur in whatever order and reach eventual consistency:\n  - [ ] finalize L1 when 0/2 op-nodes processed L2 batches, i.e. before local-safe\n  - [ ] finalize L1 when 1/2 op-nodes processed L2 batches, i.e. before local-safe\n  - [ ] finalize L1 when 2/2 op-nodes processed L2 batches, i.e. after cross-safe\n\n\nTo reproduce:\n- Create L2 blocks\n- Submit L2 blocks\n- Finalize the L1 blocks that contain the batch data\n- Different options:\n  - Sync op-node from L1, then apply finality signal to supervisor after\n  - Sync supervisor finality signal, and only then sync op-node from L1\n  - Both of the above, one for chain A, the other for chain B\n\n", "OPEN", 0, "protolambda", "2025-04-10T11:40:48Z", "2025-05-15T15:38:34Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6x8M3K", 15326, "General acceptance testing checklist", "See sub-issues.\n", "CLOSED", 0, "protolambda", "2025-04-10T11:25:00Z", "2025-05-12T14:29:27Z", "2025-05-12T14:29:26Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6x8JFo", 15325, "Sync testing checklist", "This checklist covers sync testing scope of interop.\n\n~Acceptance-test style tests are blocked by #15270 and #15101~\n\nSee sub-issues.", "OPEN", 0, "protolambda", "2025-04-10T11:18:17Z", "2025-10-01T14:39:29Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xcp7A", 15270, "Add control plane support to devnet-sdk", "For some tests we need control operations for some components of the devnet.\nRight now, start/stop operations for op-node and supervisor, but this will be extended later on.", "CLOSED", 0, "sigma", "2025-04-07T14:34:06Z", "2025-05-15T15:38:11Z", "2025-04-22T16:15:31Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xapCE", 15262, "Integrate op-test-sequencer into devnet-sdk", "Integrate op-test-sequencer with devnet-sdk, go and kurtosis, and make a test of a reorg. See sub-issues.", "CLOSED", 0, "protolambda", "2025-04-07T11:31:11Z", "2025-05-15T15:45:18Z", "2025-05-15T15:44:59Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xah5P", 15261, "Interop: tx message testing: Cross-pattern: tx on B executes message from A, and vice-versa within same timestamp", "Subissue of https://github.com/ethereum-optimism/optimism/issues/15092", "CLOSED", 0, "pcw109550", "2025-04-07T11:20:07Z", "2025-05-14T13:51:16Z", "2025-04-10T12:51:39Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xKfXP", 15242, "Interop: tx message testing: Execute message with current timestamp > the lower-bound expiry timestamp", "Subissue of https://github.com/ethereum-optimism/optimism/issues/15092", "CLOSED", 0, "pcw109550", "2025-04-04T12:59:18Z", "2025-05-14T13:51:10Z", "2025-04-07T11:08:41Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xCRqG", 15230, "[Interop Portal] Complete audit", "", "CLOSED", 0, "smartcontracts", "2025-04-03T16:43:58Z", "2025-05-16T21:54:07Z", "2025-05-16T21:54:07Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xCRpQ", 15229, "[Interop Portal] Review FMA", "", "CLOSED", 0, "smartcontracts", "2025-04-03T16:43:56Z", "2025-05-16T21:54:06Z", "2025-05-16T21:54:06Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xCRnm", 15227, "[Interop Portal] Write FMA", "", "CLOSED", 0, "smartcontracts", "2025-04-03T16:43:53Z", "2025-05-16T21:54:06Z", "2025-05-16T21:54:06Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6xBuJD", 15208, "Interop: tx message testing: Execute message that links with initiating message with first, random or last tx of a block.", "Subissue of https://github.com/ethereum-optimism/optimism/issues/15092", "CLOSED", 0, "pcw109550", "2025-04-03T15:41:12Z", "2025-05-14T13:51:05Z", "2025-04-04T12:58:13Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wrqHC", 15151, "Add support for multiple supervisors", "We should extend Kurtosis to support multiple supervisors. This will allow us to validate a network configuration that more closely mimics what we will be running on other devnets and in production (see the [Interop network topology](https://github.com/ethereum-optimism/design-docs/blob/57303e5a070fd78b6fa06f23900c53244a42e2f9/protocol/interop-topology.md), specifically the section describing supervisor redundancy).\n\nRequested by @tynes ", "CLOSED", 0, "alfonso-op", "2025-04-01T18:17:15Z", "2025-05-16T19:52:44Z", "2025-05-09T18:17:50Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wRwDu", 15116, "Interface check should verify that all contracts in the src directory have interfaces", "Right now the interface check script located [here](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/checks/interfaces/main.go) looks for all interface files and then compares them against their corresponding source files.\n\nWe need to add an extra step to this process to also look for all *source* contracts and in the `src/` directory and confirm that all of these source contracts have a corresponding interface file. This is to prevent cases where someone adds a new source contract and forgets to add a corresponding interface. We can have a separate variable that tracks exclusions for this check in case there are specific reasons why a given source contract doesn't need an interface.", "CLOSED", 0, "smartcontracts", "2025-03-28T22:56:05Z", "2025-05-16T22:23:23Z", "2025-05-16T22:23:23Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wPzpV", 15107, "op-conductor: Monitor Execution Layer Health", "**Is your feature request related to a problem? Please describe.**\nWe're running [rollup-boost](https://github.com/flashbots/rollup-boost) in our HA sequencer setup. Since one-to-many cl-to-el communication is not supported, we have a 1:1:1 relationship for each cl:rollup-boost:el.\n\nIn `rollup-boost`, if the builder fails to produce a block, the sequencer built block is used as a fallback. This is great as it keeps the chain live, but presents a problem for us.\n\nIf the builder connected to the sequencer leader goes down, fallback blocks will continue to be produced by the sequencer. `op-conductor` won't be aware of this issue, and will just carry on as normal.\n\n**Describe the solution you'd like**\n`op-conductor` should monitor the health of the execution layer (rollup-boost in our case, but this could be reth or geth as well). If the EL is not healthy, then a different sequencer leader should be chosen if one is available.\n\n**Describe alternatives you've considered**\none-to-many cl-to-el communication would also solve this problem, though I imagine this is much more difficult to solve. ", "CLOSED", 0, "0xForerunner", "2025-03-28T18:51:54Z", "2025-05-15T01:58:04Z", "2025-05-15T01:58:03Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wOXUA", 15101, "Add support for deleting and respawning services", "Interop needs sync testing, especially for below three issues:\n- https://github.com/ethereum-optimism/optimism/issues/15096\n- https://github.com/ethereum-optimism/optimism/issues/15097\n- https://github.com/ethereum-optimism/optimism/issues/15098\n\nThese test scenarios test sync discrepancies between op-supervisor and op-node. Normally, these components will be in sync and view the identical chain head states(unsafe head etc).\n\nTo deliberately trigger upper scenarios, we need a method to\n1. Stop/Start the microservices inside the kt-devnet\n2. Wrap above functions at devnet-sdk for used at testing.\n\nNote that upper functions must be distinguished with pausing the containers or the application service itself. We need to stop the containers or wipe out the containers to simulate an actual out of sync scenario, although may use the persistent volume attached to the containers.\n\nCurrently there is no neat method to simulate this.\n\n\n\n\n", "CLOSED", 0, "pcw109550", "2025-03-28T15:59:34Z", "2025-05-12T14:19:46Z", "2025-04-14T11:08:40Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wNNMn", 15098, "Test that supervisor resets node when it is ahead", "op-node ahead of supervisor, aka supervisor needs to reset the op-node, to reproduce old data. Currently supervisor has only managed mode implemented, so the supervisor will ask the op-node to reset back.", "CLOSED", 0, "pcw109550", "2025-03-28T13:55:26Z", "2025-05-16T08:46:45Z", "2025-05-16T08:46:45Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wNLoo", 15097, "Test supervisor \"fast forwards\" node to latest unsafe block", "supervisor unsafe ahead of op-node unsafe, aka op-node to process new blocks first.\n\nop-node does not know unsafe blocks, so it must process new blocks first. ", "CLOSED", 0, "pcw109550", "2025-03-28T13:52:43Z", "2025-05-15T15:37:46Z", "2025-05-05T19:01:08Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wNKvh", 15096, "Test supervisor \"fast forwards\" node to latest cross-safe block", "supervisor cross-safe ahead of op-node cross-safe, aka op-node can \u201cskip\u201d forward to match safety of supervisor.\n\nop-node unsafe blocks will consolidate to cross-safe. op-node does not have to process block because it already did it.", "CLOSED", 0, "pcw109550", "2025-03-28T13:51:16Z", "2025-05-15T15:28:38Z", "2025-05-15T14:07:34Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wMWPV", 15093, "Interop: tx message testing: point to event-index >= number of logs", "Part of https://github.com/ethereum-optimism/optimism/issues/14529, for interop alpha testing", "CLOSED", 0, "pcw109550", "2025-03-28T12:29:13Z", "2025-05-14T13:50:17Z", "2025-03-28T14:10:15Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wL_8u", 15092, "Interop: tx message testing with action test", "Interop tx tests, within RC Alpha scope, subissue of https://github.com/ethereum-optimism/optimism/issues/13855\n\nWe need action tests because kt-devnet tests are not supporting block builder support. intra block messaging testing will not work against kt-devnet so action test needed.\n\nWe need to force in the tx, since access-list check by sequencer blocks it. This can be done using action tests.\n\n- Success cases:\n  - [x] [Transaction executes message within same block (same timestamp)](https://github.com/ethereum-optimism/optimism/pull/15149)\n  - [x] Transaction on B executes message from A, and vice-versa. Cross-pattern\n    - [x] [Within same timestamp](https://github.com/ethereum-optimism/optimism/pull/15274)\n    - [x] [Within same tx: inter-dependent but non-cyclic txs.](https://github.com/ethereum-optimism/optimism/pull/15389)\n  - [x] ~~Include message with timestamp `==` compared to the block that is being built:\n    too new to include *in* head block timestamp, but just right for next timestamp.~~ Update: not relevant anymore since the access-list change, which doesn't allow this tx to go through the regular tx pool without static check.\n  - [x] Execute message that links with initiating message with:\n    - [x] [first, random or last tx of a block.](https://github.com/ethereum-optimism/optimism/pull/15209)\n- Failure cases:\n  - [x] [Transaction executes message, then initiates it: cycle with self.](https://github.com/ethereum-optimism/optimism/pull/15412) [Fix](https://github.com/ethereum-optimism/optimism/pull/15569)\n  - [x] [Transaction executes message, and later transaction in block initiates it: cycle in block.](https://github.com/ethereum-optimism/optimism/pull/15501) [Fix](https://github.com/ethereum-optimism/optimism/pull/15569)\n  - [x] Transaction B0 exec chain A1, A0 exec B1: cycle across chains.\n    - [x] [Within same timestamp  (requires coordinated building, naive test may thus flake, needs to be accounted for)](https://github.com/ethereum-optimism/optimism/pull/15524)\n    - [x] [Within same tx: inter-dependent and cyclic](https://github.com/ethereum-optimism/optimism/pull/15586)\n  - [x] [Execute message with timestamp `>` current timestamp](https://github.com/ethereum-optimism/optimism/pull/15149)\n  - [x] [Execute message with current timestamp `>` the lower-bound expiry timestamp](https://github.com/ethereum-optimism/optimism/pull/15246)\n  - [x] [Construct random graphs of messages, with cycles or invalid executing messages](https://github.com/ethereum-optimism/optimism/pull/15649)\n  - [x] [Execute msg with identifier pointing to the exec msg itself (payload hash cannot be right)](https://github.com/ethereum-optimism/optimism/pull/15620)\n", "CLOSED", 0, "pcw109550", "2025-03-28T11:49:39Z", "2025-05-14T13:50:44Z", "2025-05-05T12:16:01Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wDWKx", 15082, "[Keep Stage 1] Complete audit", "", "CLOSED", 0, "smartcontracts", "2025-03-27T16:30:21Z", "2025-05-16T21:53:56Z", "2025-05-16T21:53:56Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wDWGh", 15081, "[Keep Stage 1] Review FMA", "", "CLOSED", 0, "smartcontracts", "2025-03-27T16:30:15Z", "2025-05-16T21:53:56Z", "2025-05-16T21:53:56Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6wDV4W", 15079, "[Keep Stage 1] Write FMA", "", "CLOSED", 0, "smartcontracts", "2025-03-27T16:30:01Z", "2025-05-16T21:53:56Z", "2025-05-16T21:53:56Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6v-4A1", 15066, "Interop: tx message testing: construct random directed graph of messages", "Part of https://github.com/ethereum-optimism/optimism/issues/14529, for interop alpha testing", "CLOSED", 0, "pcw109550", "2025-03-27T10:57:53Z", "2025-05-14T13:50:13Z", "2025-03-28T14:13:46Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6voRLJ", 15023, "Interop: tx message testing: Execute message, but with one or more invalid attributes (without the `chain not in dependency set` case)", "Part of https://github.com/ethereum-optimism/optimism/issues/14529, for interop alpha testing", "CLOSED", 0, "pcw109550", "2025-03-25T13:34:38Z", "2025-05-14T13:50:09Z", "2025-03-28T07:40:57Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6vcz6y", 15007, "Interop: tx message testing: Transaction executes message within same block (same timestamp)", "Part of https://github.com/ethereum-optimism/optimism/issues/14529, for interop alpha testing", "CLOSED", 0, "pcw109550", "2025-03-24T15:06:01Z", "2025-05-14T13:50:05Z", "2025-04-02T11:19:06Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6uUzk7", 14902, "op-node fails to deserialize `ChainConfig` when `TerminalTotalDifficulty` is in hex string format", "I've already created [this issue](https://github.com/ethereum-optimism/op-geth/issues/548) in `op-geth` repo because I think the fix should be done in that repo, but I want to copy it also here because people (like me) get the error directly returned by `op-node` when trying to use it together with `op-reth` on a custom L2 chain (that is not in the superchain registry).", "CLOSED", 0, "alessandromazza98", "2025-03-17T11:16:15Z", "2025-05-14T09:44:05Z", "2025-05-14T09:44:05Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6s6B6P", 14681, "Interop: tx message testing: Transaction initiates, and then executes message initial impl without tx plan", "This is the simplest test for alpha testing. devnet-sdk should implement abstractions to support these kind of testing, and `kurtosis-devnet/*` may include this test.\n\nProto is working on tx plan at https://github.com/ethereum-optimism/optimism/pull/14568, introducing a DSL approach for tx testing, but we may experiment on devnet-sdk side before this tx-plan is mature.\n\nWill go for the initial trial of implementation for the most simplest test in a imperative manner(using tx-plan is declaration and DSL. desired)\n\nTo elaborate in this scenario:\n- Run kt interop-devnet. It will spawn interoperable L2 chain A and B. devnet-sdk will wrap it up and make it testable.\n- Send transaction to cross domain messenger at A. Tx data may contain dummy data like `hello world`.\n   - cross domain messenger will emit a event at chain A.\n   - we need `eth_sendRawTransaction` method to be implemented at devnet-sdk \n- Parse chain A's event and make it as a message.\n   - we need `eth_getTransactionReceipt` method to be implemented at devnet-sdk\n- Call chain B's cross domain messenger's relayMessage method, inputting message.\n   -  we need `eth_sendRawTransaction` method to be implemented at devnet-sdk \n- Check that cross domain messenger calls to the target.\n   - Parse chain B's tx's value and check dummy data is present.\n \nUpper scenario can be tested using synchronous API calls. After this impl we may get more info on how we should integrate tx plan to devnet-sdk.\n", "CLOSED", 0, "pcw109550", "2025-03-06T16:34:04Z", "2025-05-14T13:50:22Z", "2025-03-14T16:00:33Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6qixAO", 14416, "op-program: Clean up interop stub flag in main_test.go", "The current testing setup in main_test.go uses a stubbed `--depset.config` flag for interop testing. While other tests use the embedded Sepolia configuration, this test requires a custom configuration because Sepolia doesn't currently have a defined dependency set.\n\nOnce Sepolia has a defined dependency set, we can remove this stub. This will allow us to restore test coverage that verifies flag parsing works correctly for interop superchain networks.", "OPEN", 0, "Inphi", "2025-02-18T18:12:39Z", "2025-05-12T13:33:15Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6onNSM", 14130, "interop: test-sequencing milestone 4 (optional): interop experimentation", "With some communication between the build processes, we can coordinate transaction-inclusion across chains. E.g.:\n\nHost multiple builders in the same Go process.\nConnect multiple instances with streams.\nFollowing a stream (the \"shred\" draft in older interop specs), we can signal when events happen, and when they are rolled back (callstack revert, or tx not included). The other builder can then use the assumed events, or even await them, to build the block of the other chain.\n\nIn the extreme, this allows synchronous EVM calls between chains, without interop spec changes.\n\nWith the remote-state block-building, and the tx-pool access without running a full node, this could potentially also serve as a replica-node, following the \"horizontal tx-pool\" design.\n\nSourced from: https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md#milestone-4-interop-experimentation", "OPEN", 0, "protolambda", "2025-02-04T00:31:34Z", "2025-10-01T14:38:21Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6m1vM4", 13855, "[Tracker] Interop: end to end testing checklist", "See sub-issues categorized according to **DRUMS**:\n- **D**oS / Load\n- **R**eorg\n- **U**pgrade\n- **M**essaging\n- **S**ync", "OPEN", 0, "protolambda", "2025-01-20T12:13:07Z", "2025-05-15T15:49:19Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6jgNQp", 13419, "DeputyPauseModule: superchain-ops scripts", "We'll need three superchain-ops scripts for the `DeputyPauseModule`:\n\n- Script for installing the Module in the first place.\n- Script for updating the Deputy address.\n- Script for updating the `DeputyGuardianModule` address.", "CLOSED", 0, "smartcontracts", "2024-12-16T18:46:16Z", "2025-05-16T21:55:19Z", "2025-05-16T21:55:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6jgLnA", 13416, "[Tracker] DeputyPauseModule", "Tracking issue for getting the DeputyPauseModule into production.", "CLOSED", 0, "smartcontracts", "2024-12-16T18:42:48Z", "2025-05-16T21:55:19Z", "2025-05-16T21:55:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6iDTGd", 13240, "EVM Engineering: transition semver-diff check script to common framework", "We need to convert `check-semver-diff` into a Go script and use the common framework as demonstrated in `contracts-bedrock/scripts/checks/test-names/main.go`.", "CLOSED", 0, "smartcontracts", "2024-12-04T20:58:25Z", "2025-05-16T22:52:52Z", "2025-05-16T22:52:52Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6iCErx", 13225, "EVM Engineering: transition contracts checks to common framework", "Now that we have a common framework for writing contracts checks in Go, we need to transition the existing tasks to use these checks. Each check should come with clear tests when being transitioned.", "CLOSED", 0, "smartcontracts", "2024-12-04T18:03:05Z", "2025-05-16T22:52:56Z", "2025-05-16T22:52:56Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6h6GDI", 13210, "EVM Engineering: remove Foundry snapshots bug workaround once fixed", "Tracking issue to remove the workaround once https://github.com/foundry-rs/foundry/issues/9477 is fixed.", "CLOSED", 0, "smartcontracts", "2024-12-04T01:46:42Z", "2025-05-16T22:40:14Z", "2025-05-16T22:40:14Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM6c1k41", 12802, "EVM Engineering: explore using CommonTest for everything", "Some tests currently use `Bridge_Initializer`, some use `CommonTest`, and other use `Test`. We are already combining `Bridge_Initializer` and `CommonTest` so it might be worth just using `CommonTest` everywhere.\r\n\r\n`CommonTest` definitely works but may make tests take longer. We should benchmark the difference to see if it's significant. If it's not significant, then moving to `CommonTest` everywhere would be nice so that people don't need to think as much when writing tests, especially newer contributors. We could also add a semgrep rule against using `Test` directly so that this gets enforced automatically.", "CLOSED", 0, "smartcontracts", "2024-11-03T15:48:27Z", "2025-05-16T22:53:11Z", "2025-05-16T22:53:11Z", "ethereum-optimism/optimism", "2025-08-31 04:55:28"]
["I_kwDODjvEJM617uh_", 15817, "op-devstack: sysext: fix address book", "kt local devnet description got updated, and sysext addrbook is not aware of it. Update the hardcoded address keys.\n", "OPEN", 0, "pcw109550", "2025-05-09T14:22:18Z", "2025-05-09T14:22:18Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61y-2C", 15803, "[U18] Clarify source of truth for valid config", "There are currently 4 places that define parts of the standard config:\n\n- The [Standard Charter](https://github.com/ethereum-optimism/OPerating-manual/blob/e1b305a96a0b60515cc1111a26e73e1973d9c34e/Standard%20Rollup%20Charter.md#role-configuration-exceptions)\n- The [specs configurability section](https://specs.optimism.io/protocol/configurability.html)\n- The StandardValidator contract\n- The TOML files in the [validation/standard directory](https://github.com/ethereum-optimism/superchain-registry/tree/9095778d45a5066649890ee838f87b27062a0d4d/validation/standard) of the superchain registry\n\nWe should work to remove as many as these redundant references as possible.\n\nThis is largely a governance project.", "OPEN", 0, "maurelian", "2025-05-08T20:38:10Z", "2025-05-08T20:38:10Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61y7yz", 15802, "[U18] Integrate validator success into CI for superchain-registry updates.", "The validator should run in CI when a new chain is added to the registry.\n\nThis is not straightforward due to versioning considerations.", "OPEN", 0, "maurelian", "2025-05-08T20:30:53Z", "2025-05-08T20:30:53Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61y67f", 15801, "[U16] StandardValidator dispute game validation improvements", "1. Accept exactly two valid game-registry states:  \n   i. Both super games registered and NO other games, or  \n   ii. No super games and ONLY (permissionedDisputeGame) OR (permissionedDisputeGame + faultDisputeGame).  \n1. Ensure `respectedGameTypes` matches one of the registered impls in each state.  \n", "OPEN", 0, "maurelian", "2025-05-08T20:28:52Z", "2025-05-09T13:22:08Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61y3sz", 15798, "[U16] Integrate StandardValidator with OPCM", "- Deploy StandardValidator from DeployImplementations*.s.sol.\n- Store its address as an immutable (STANDARD_VALIDATOR) inside OPContractsManager.\n- Update the release pipeline to call validate() during every OPCM deploy / upgrade.\n\nOr consider skipping this and going straight to #15799.", "CLOSED", 0, "maurelian", "2025-05-08T20:23:01Z", "2025-05-08T20:35:37Z", "2025-05-08T20:35:36Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61yzD8", 15796, "Enable non-standard chains to use the OPCM with 'all-in' or 'all-out'", "The OPCM/OPD should be updated so that it only supports two use cases:\n\n1. \u2018All in\u2019 mode: supports chains with one of three PAOs (OPM\u2019s, Base\u2019s, Uni\u2019s) and requires having the [OPM SuperchainConfig](https://github.com/ethereum-optimism/superchain-registry/blob/0831c2509152b457d865634616925ca6240b219e/superchain/configs/mainnet/superchain.toml#L3). \n\n2. \u2018All out\u2019 mode: the PAO must not be one of the three listed above, and the SuperchainConfig must not be the one used by OPM.\n\n[Ref](https://www.notion.so/oplabs/P-PS-OPCM-and-SuperchainConfig-for-non-Optimism-governed-chains-1dcf153ee16280a18e4fca355e8e949c?pvs=4).", "OPEN", 0, "maurelian", "2025-05-08T20:14:24Z", "2025-05-08T20:14:24Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61yXjv", 15794, "Remove the ProxyAdmin from OPCM and StandardValidator structs", "Now that we have the `ProxyAdminOwnedBase`, we should no longer need to provide the `ProxyAdmin` address as input alongside the `SystemConfig` address to functions like `opcm.upgrade()` and `standardValidator.validate()`.", "OPEN", 0, "maurelian", "2025-05-08T19:17:38Z", "2025-05-08T19:17:52Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61wSQB", 15786, "- Merge the New Spec in for `Creator` contracts", "", "OPEN", 0, "BlocksOnAChain", "2025-05-08T15:16:19Z", "2025-05-08T15:16:19Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61wM1I", 15783, "Why is it necessary to ", "Why it is necessary to sleep the second time we sequence a block with the test-sequencer, for example at the location linked below.\n\nhttps://github.com/ethereum-optimism/optimism/pull/15624/files#diff-398c0e2357d3d34407fc27d3502df04b920eb17ba2cd30c91c766b1f2691b260R218-R232\n\nRaised by @nonsense ", "OPEN", 0, "teddyknox", "2025-05-08T15:09:39Z", "2025-05-08T15:10:09Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61wJ9C", 15782, "L2 networks diverge over multiple reorg test runs, leading to errors", "Referencing `CatchUpTo()` is used within test `TestReorgInitExecMsg`:\n\nhttps://github.com/ethereum-optimism/optimism/blob/develop/op-acceptance-tests/tests/interop/reorgs/init_exec_msg_test.go#L115\n\nIf we run this test multiple times (e.g. w/ count=3) the L2 networks diverge in an unexpected way, hence the need for `CatchUpTo()`.\n\nWithout `CatchUpTo()`, by the 2nd or 3rd run the chain intended to include the exec message is behind by up to 120s, and the exec message is correctly (and yet unexpectedly) rejected, preventing the test from proceeding. Likely has something to do with the reorg events that are triggered during the test.", "OPEN", 0, "teddyknox", "2025-05-08T15:06:21Z", "2025-05-09T16:49:37Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61upvL", 15775, "op-supervisor: remove deprecated CrossDerivedFrom from query API", "Remove deprecated CrossDerivedFrom from query API.\nMake sure it's not used anywhere anymore.\n\nUse CrossDerivedToSource instead\n", "CLOSED", 0, "protolambda", "2025-05-08T12:48:32Z", "2025-05-09T16:42:05Z", "2025-05-09T16:42:04Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61VwHL", 15715, "op-proposer: refresh CLI flag documentation", "This is no longer accurate:\n\nhttps://github.com/ethereum-optimism/optimism/blob/da3be71ffbb8a997dff1301bb92a8e08e5c039a6/op-proposer/flags/flags.go#L47-L52\n\n* The proposer does not pull blocks, it pulls output roots\n* It does not in fact poll the op-node with this frequency\n* The reference to legacy L2OO is confusing and uncessary\n\nThis config var sets the frequency of a ticker. \n\nThe proposal does this on each tick: a) check whether it needs to make a proposal to ensure that it proposes every \"proposal_interval\". Only if it needs to propose, it goes ahead and pulls an output root from op-node, and then submits it. ", "CLOSED", 0, "geoknee", "2025-05-06T10:37:00Z", "2025-05-07T19:16:16Z", "2025-05-07T19:16:15Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61P4qk", 15703, "[op-deployer] ensure intent superchain roles are compatible with devnet-sdk, netchef", "During the interop betanet rc deployment today, op-deployer intent had the old superchainRoles field names, which caused an error when trying to run subsequent op-deployer commands. To fix it, we manually edited the intent.toml field names but we should ensure this doesn't happen again during future deployments.", "CLOSED", 0, "bitwiseguy", "2025-05-05T21:10:46Z", "2025-05-06T22:45:55Z", "2025-05-06T22:45:55Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61KziA", 15687, "op-supervisor: close l1accessor subscribers when closed", "Tracked at https://github.com/ethereum-optimism/optimism/pull/15685", "CLOSED", 0, "pcw109550", "2025-05-05T12:25:35Z", "2025-05-05T12:46:24Z", "2025-05-05T12:46:24Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM61KwGV", 15686, "op-acceptance-tests: interop: Fix TestMessagePassing test", "interop NAT test: TestMessagePassing is consistently failing. Fix this.\n\nFirst observed at monorepo commit https://github.com/ethereum-optimism/optimism/commit/6cb5bd23ece57ec8b4b25028bdb9d902d0816d64", "CLOSED", 0, "pcw109550", "2025-05-05T12:19:45Z", "2025-05-07T16:03:27Z", "2025-05-07T16:03:27Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM604WGU", 15653, "op-conductor does not proxy throttling requests from the batcher to non-leader sequencers", "We recently [changed the batcher to throttle all sequencers all of the time](https://github.com/ethereum-optimism/optimism/pull/15603). This has the advantage of not requiring the batcher to need to know anything about which sequencer is active, and also that sequencers will already be throttled if necessary when they become the leader (and we don't need to wait for a roundtrip where the batcher detects the change and re-sends a throttle message). \n\nHowever, when the `miner_setMaxDASize` is proxied to op-conductor, it will return false if that sequencer is not the leader and will neglect to forward the call.\n\nhttps://github.com/ethereum-optimism/optimism/blob/0ff55ddee70efc2d6a5695f92cb877ca947eb94a/op-conductor/rpc/excecution_miner_proxy.go#L30-L40\n\nThis makes sense because op-conductor hadn't anticipated the change we are making in the batcher (to throttle all sequencers all of the time).\nThis results in warn logs every 5s from the batcher. Otherwise it should behave identically to before. It's also an easy fix to op-conductor, which I'll make a PR for.", "CLOSED", 0, "geoknee", "2025-05-01T20:37:00Z", "2025-05-05T12:35:19Z", "2025-05-05T12:35:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM602K_m", 15644, "One StandardValidator version in the repo.", "WIP in #15397 ", "CLOSED", 0, "maurelian", "2025-05-01T15:24:21Z", "2025-05-08T19:15:19Z", "2025-05-08T19:15:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM60ih3-", 15612, "kurtosis-devnet: Break dependency cycle between supervisor and op-geth", "**Description**\n\nAt the moment, `op-geth` requires supervisor URL. At the same time, `op-supervisor` requires `op-geth` (as well as other EL client) URL(s).\n\nWe need to compute the URLs ahead of time (due to complexity of the setup, it will preferably the supervisor URL) so that by the time we are launching the EL clients, we know the supervisor URL(s)", "CLOSED", 0, "janjakubnanista", "2025-04-29T16:41:57Z", "2025-05-09T18:17:39Z", "2025-05-09T18:17:39Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM60if7L", 15611, "kurtosis-devnet: Prepare challenger launcher for multiple supervisors", "**Description**\n\nAt the moment, `op-challenger` is tied to a particular L2. We need to decouple these and move challengers to top-level configuration so that we can integrate with multiple supervisors", "CLOSED", 0, "janjakubnanista", "2025-04-29T16:38:24Z", "2025-05-06T18:39:35Z", "2025-05-06T18:39:35Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM60DSVo", 15577, "Standard validator should check superchainConfig", "Quick issue: \nthe superchainconfig is in the systemconfig and ASR, ensure they match.", "CLOSED", 0, "maurelian", "2025-04-25T18:35:16Z", "2025-05-09T13:12:16Z", "2025-05-09T13:12:15Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM60CwYx", 15572, "op-test-sequencer: complete sequencing loop in fullseq", "The fullseq loop needs to determine the parent-block and L1 origin to build on.\nThis remains from https://github.com/ethereum-optimism/optimism/pull/14604\n\nSee https://github.com/ethereum-optimism/optimism/blob/aa132b3ba30b0433cdeff43c1334cbbeb3ecc185/op-test-sequencer/sequencer/backend/work/sequencers/fullseq/sequencer.go#L67\n\nThis is already in-progress, in a (previously stacked) PR, by @nonsense \nhere: https://github.com/ethereum-optimism/optimism/pull/15338\n", "CLOSED", 0, "protolambda", "2025-04-25T17:21:22Z", "2025-05-07T14:17:32Z", "2025-05-07T14:17:32Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6zuH85", 15534, "Implement `onlyProxyAdmin` protection on all `initialize()` / `upgrade()`", "**Description:**\n\nWe can gain a lot of safety from reinit attacks by ensuring that `initialize()` and `upgrade()` functions can only be called by the `ProxyAdmin`. \n\n**Spec**\n\n1. add `proxyAdmin()` and an `onlyProxyAdmin` modifier to `ProxyAdminOwnedBase`. \n2. add `onlyProxyAdmin` to all `initialize()` and `upgrade()` functions\n3. add a semgrep check to enforce this.\n\nNote: a nice side effect (out of scope here), is that by adding a `proxyAdmin()` getter to the `SystemConfig` we can remove the `proxyAdmin` argument as an input to `opcm.upgrade()`.", "CLOSED", 0, "maurelian", "2025-04-23T20:45:47Z", "2025-05-08T20:12:23Z", "2025-05-08T20:12:23Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6zHYLQ", 15460, "op-node: implement upgrade-tx in derivation", "Blocked by spec: https://github.com/ethereum-optimism/specs/issues/637\n\nImplement changes to the `derive` package to add upgrade-transactions into the interop activation block.\n\n\n", "CLOSED", 0, "protolambda", "2025-04-18T14:15:10Z", "2025-05-06T10:51:43Z", "2025-05-06T10:51:42Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6zBQgZ", 15457, "op-faucet: docker build + run in kurtosis", "op-faucet is a new service, to get accounts in acceptance-tests funded:\nhttps://github.com/ethereum-optimism/optimism/pull/15456\n\nWe need some help from platforms team to get it built in docker + integrated in kurtosis and devnet-sdk environment definition.\n\nIn the op-faucet readme you'll find instructions how it runs and is configured.\n\nIt supports multiple chains, and a single HTTP server, with routes per faucet and per chain, to make faucet requests on as acceptance-test.\nIn kurtosis one op-faucet instance is enough. It's very light-weight.\nIt will need a little bit of templating, to make the YAML file with the faucet keys and endpoint.\n\nThis faucet then can serve parallel different acceptance tests running against the same kurtosis network / devnet.\n\nThis blocks devstack integration of sysext; the user/wallet utils of the new frontend depend on an available faucet to get ETH funds.\n", "CLOSED", 0, "protolambda", "2025-04-17T21:10:55Z", "2025-05-09T12:34:34Z", "2025-05-09T12:34:32Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6zA33B", 15455, "Refactor deploy.s.sol to remove custom deployment logic", "In order to ensure that the contracts deployed in our test suite are the same as those deployed by op-deployer we should simplify `Deploy.s.sol` by removing any custom deployment logic that re-implements functionality that exists in the [deployment scripts](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/scripts/deploy) used by `op-deployer`.\n\nSpecifically, the following functions should be removed, and replaced by calls to the corresponding `DeployX2.s.sol` script (these `_2.s.sol` variants are intended to replace the others eventually).\n\n- [ ] `setAlphabetFaultGameImplementation()` -> `DeployAlphabetVM2.run()`\n- [x] `setCannonFaultGameImplementation()` -> `DeployDisputeGame2.run()`\n- [ ] `setSuperFaultGameImplementation()` -> tbd\n- [ ] `setSuperPermissionedGameImplementation()` -> tbd\n- [ ] `setFastFaultGameImplementation()` -> tbd\n\nIt may also be necessary to use `SetDisputeGameImpl.s.sol` or a direct call to `opcm.addGameType()`\nin order to satisfy the requirements of a given test suite.\n\nI also suspect that the following functions can be removed entirely, but this requires confirmation:\n- [x] `transferDisputeGameFactoryOwnership()`, `transferDelayedWETHOwnership()`, and  `transferPermissionedDelayedWETHOwnership()`\n\nSuggested approach: \n- Implement each of the tasks above independently\n- There should be no changes required to implementation code, and very minimal (if any) changes required to test files\n- The goal is to make `Deploy.s.sol` a very thin wrapper script, which does little more than compose existing scripts into a deployment pipeline.", "OPEN", 0, "maurelian", "2025-04-17T20:09:05Z", "2025-05-08T19:03:12Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6y2RYv", 15435, "op-deployer: verify contracts as part of deployment", "Request from the EVM Safety team: Can we verify the contracts that are deployed as part of the deployment flow?\n\nAs an example from @Ethnical: [This contract](https://etherscan.io/address/0xECAbAeaa1D58261F1579232520C5B460ca58a164) is the `SUPERCHAINADDRESSREGISTRY_StandardValidatorV200`, verifying it would improve readability in the future. It's included in multiple superchain-ops tasks already so it should be verified.", "OPEN", 0, "tessr", "2025-04-16T19:37:36Z", "2025-05-09T13:39:28Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6ypODv", 15416, "Batcher: Accept Interop Pause", "In the event of a interop protocol failure which might be made worse by posting the data to L1, we need an emergency stop which will stop the batcher from posting.\n\nAt a minimum, no work needs to be done because we can simply scale down the batcher. But we should consider an Admin API which allows pauses for smoother operation.", "CLOSED", 0, "axelKingsley", "2025-04-15T17:36:38Z", "2025-05-09T11:58:26Z", "2025-05-09T11:58:19Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6ypIAU", 15414, "Supervisor: Monitoring", "We need to develop a monitoring strategy which tracks things like:\n\n- Total ETH movement over Interop\n- Volume of Accepted / Rejected Interop Messages\n- Any invalid messages which have been included in a block (immediate alert)\n- [Secondary checks against database contents](https://github.com/ethereum-optimism/optimism/pull/15278)\n- A suspicious lack of interop messages in blocks, indicating maybe the Supervisor is down or there is another ingress issue", "CLOSED", 0, "axelKingsley", "2025-04-15T17:25:36Z", "2025-05-05T14:58:11Z", "2025-05-05T14:58:11Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6yDoe7", 15362, "interop: Implement network upgrade transactions", "This represents implementing the network upgrade transactions for the interop upgrade. They need to be implemented both in Go and in Rust. https://github.com/ethereum-optimism/specs/issues/637 defines what they should do at a high level\n\nBlocked by spec: https://github.com/ethereum-optimism/specs/issues/637\n\nRust implementation merged: https://github.com/op-rs/kona/issues/1475", "CLOSED", 0, "tynes", "2025-04-11T01:05:45Z", "2025-05-06T10:52:18Z", "2025-05-06T10:52:16Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6x8t5T", 15337, "Interop: cleanup unused op-geth interop types", "Since the access-list change the interop typing in op-geth is outdated and no longer used.\n\nSpecifically:\n- Message\n- Identifier\n- Any log-event parsing code\n\nThis code is primarily in `core/types/interoptypes` in op-geth, but there may be some other things lingering around, including old API bindings maybe.\n\nRemove this unused code.\n\n", "CLOSED", 0, "protolambda", "2025-04-10T12:20:21Z", "2025-05-10T05:11:14Z", "2025-05-10T05:11:13Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xasCP", 15264, "op-test-sequencer: integrate into devnet-sdk", "Integrate the op-test-sequencer into the new devnet-sdk devstack package:\n- Add interface to `devstack/stack`, make the test-sequencer discoverable from system-level. Since it can be sequencing multiple L2s\n- Add shim to `devstack/shim`, to connect to the test-sequencer main RPC, and any sub-route RPCs\n- Add op-test-sequencer instantiation to `devstack/sysgo`, to start/stop it in-process.\n", "CLOSED", 0, "protolambda", "2025-04-07T11:36:13Z", "2025-05-05T14:04:25Z", "2025-05-05T14:04:25Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xap8p", 15263, "op-test-sequencer: add docker build", "Add the op-test-sequencer to docker:\n- [x] CI config update\n- [x] docker-bake update\n- [ ] docker go stack image update\n\nThis unblocks running it inside of kurtosis.\n\n", "CLOSED", 0, "protolambda", "2025-04-07T11:32:46Z", "2025-05-05T14:04:26Z", "2025-05-05T14:04:26Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xCLrg", 15221, "op-program: Invalid SuperRootVersionV1MinLen constant", "_Spearbit audit finding_\n\n**Description**\n`unmarshalSuperRootV1` checks that the input data length is not lower than 1 + 8 + 32. If it is, an error indicating that the super root data is invalid is returned.\n\nHowever, this length check is incorrect. The SuperRootVersionV1MinLen constant does not account for the expected `ChainIDAndOutput.ChainID` field which adds an additional 32 bytes.\n\nCode snippet\n```\nThe SuperRootVersionV1MinLen constant is 41. According to the associated comment, it corresponds to the version (1 byte), the timestamp (8 bytes) and one chain output root hash (32 bytes).\n\nconst (\n\t// SuperRootVersionV1MinLen is the minimum length of a V1 super root prior to hashing\n\t// Must contain a 1 byte version, uint64 timestamp and at least one chain's output root hash\n\tSuperRootVersionV1MinLen = 1 + 8 + 32\n)\n```\n\nHowever, the decoding in `unmarshalSuperRootV1` shows that it expects an additional ChainID field which is 32 bytes long.\n\n```\nfunc unmarshalSuperRootV1(data []byte) (*SuperV1, error) {\n\t// Must contain the version, timestamp and at least one output root.\n\tif len(data) < SuperRootVersionV1MinLen {\n\t\treturn nil, ErrInvalidSuperRoot\n\t}\n\t// Must contain complete chain output roots\n\tif (len(data)-9)%32 != 0 {\n\t\treturn nil, ErrInvalidSuperRoot\n\t}\n\tvar output SuperV1\n\t// data[:1] is the version\n\toutput.Timestamp = binary.BigEndian.Uint64(data[1:9])\n\tfor i := 9; i < len(data); i += 64 {\n\t\tchainOutput := ChainIDAndOutput{\n\t\t\tChainID: ChainIDFromBytes32([32]byte(data[i : i+32])), // @audit read 32 bytes\n\t\t\tOutput:  Bytes32(data[i+32 : i+64]),                   // @audit read another 32 bytes\n\t\t}\n\t\toutput.Chains = append(output.Chains, chainOutput)\n\t}\n\treturn &output, nil\n}\n\n```\n\n**Recommendation**:\nThe `SuperRootVersionV1MinLen` constant must account for the ChainID field.\n\n```\ndiff --git a/op-service/eth/super_root.go b/op-service/eth/super_root.go\nindex dbe80991a..56fd104c1 100644\n--- a/op-service/eth/super_root.go\n+++ b/op-service/eth/super_root.go\n@@ -20,8 +20,8 @@ var (\n \n const (\n \t// SuperRootVersionV1MinLen is the minimum length of a V1 super root prior to hashing\n-\t// Must contain a 1 byte version, uint64 timestamp and at least one chain's output root hash\n-\tSuperRootVersionV1MinLen = 1 + 8 + 32\n+\t// Must contain a 1 byte version, uint64 timestamp and at least one chain's chainId and output root hash pair\n+\tSuperRootVersionV1MinLen = 1 + 8 + 32 + 32\n )\n \n type Super interface {\n\n```", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:31:32Z", "2025-05-06T23:23:02Z", "2025-05-06T23:23:02Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xCB_V", 15216, "op-program: Invalid unmarshalTransitionSate function name", "_Spearbit audit finding_\n\n**Description**\nThe unmarshalTransitionSate function name is incorrect. It has a typographical error in it.\n\n**Recommendation**\nReplace unmarshalTransitionSate by unmarshalTransitionState.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:15:30Z", "2025-05-06T23:23:03Z", "2025-05-06T23:23:03Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xCA9B", 15215, "op-program: Dependency set is retrieved at each singleRoundConsolidation call", "_Spearbit audit finding:_\n\n**Description**\nThe `singleRoundConsolidation` function is called in a for loop from `RunConsolidation`. At each round, `singleRoundConsolidation` retrieves the constant dependency set.\n\nThis dependency set could be retrieved only once in `RunConsolidation` and passed as an input argument for efficiency purposes.\n\n**Recommendation**\nConsider retrieving the dependency set only once in RunConsolidation and then passing it as a parameter to singleRoundConsolidation.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:13:47Z", "2025-05-08T01:26:53Z", "2025-05-08T01:26:52Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xB9iq", 15212, "op-program: Optimization suggestion - block timestamp can be checked before receipts", "_Spearbit audit finding_\n\n**Description**\nSince the timestamp is a property of the block, there is no need to retrieve the receipt before checking it. The timestamp validation could be moved to the line before the retrieval of receipts.\n\nThis would save considerable resources if there's an execution with an invalid timestamp.\n\n**Recommendation**\nThe timestamp validation should be done before receipts retrieval.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:07:51Z", "2025-05-07T00:11:15Z", "2025-05-07T00:11:15Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xB8rw", 15211, "op-program: HazardUnsafeFrontierChecks function call is not needed", "_Spearbit audit finding_\n\n**Description**\nThe consolidation executed by the op-program makes the assumption that the blocks are cross-unsafe.\n\nThis strong assumption makes all execution happening in `HazardUnsafeFrontierChecks` useless as `IsCrossUnsafe` and `IsLocalUnsafe` will never return any error.\n\n**Recommendation**\nThe call to `HazardUnsafeFrontierChecks` can be removed from `checkHazards`.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:06:15Z", "2025-05-07T00:11:16Z", "2025-05-07T00:11:16Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6xA039", 15203, "op-program: Optimization suggestion - exit hazard checks loop after first block replacement", "_Spearbit audit finding:_\n\n**Description**\nThe current \"eager\" implementation of the hazard checking within a consolidation step keeps iterating over all chains even after a block is marked for replacement (but before actual replacement).\n\nWhile this shouldn't cause any problems in the final result, the blocks found to be valid will still need to be rechecked after the block replacement is actually processed. As most blocks are expected to pass the hazard check this results in unnecessary extra processing.\n\n**Recommendation**:\nA more efficient approach would be to break the loop after the first failed hazard check, replace the block, and advance to the next step -- with all blocks not yet replaced are checked, again exiting early if any hazard check fails.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T14:23:20Z", "2025-05-07T00:11:16Z", "2025-05-07T00:11:15Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6w_i8N", 15197, "op-program: Remove unused parameter candidate from checkChainCanInitiate function", "_Spearbit findings:_\n\n**Description**\n\nThe `candidate` parameter (of type types.BlockSeal) is declared but never used within the `checkChainCanInitiate() `function body. \n\nThe function only uses:\n\ndepSet - To call CanInitiateAt\ninitChainID - Passed to CanInitiateAt and used in error messages\nmsg - To access its Timestamp and for error messages\n\n**Recommendation**:\nConsider removing the unused parameter if unnecessary, or utilize it appropriately.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T12:37:22Z", "2025-05-06T00:58:58Z", "2025-05-06T00:58:57Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6w0WGj", 15170, "op-program: Invalid modulo check in unmarshalSuperRootV1 leads to panic", "_Spearbit finding:_\n\n**Description**:\n`unmarshalSuperRootV1` executes a modulo operation to check that the input data has complete output roots.\n\nHowever, this check is invalid. It should check for complete chain ID and output root pairs\n\n```\nfunc unmarshalSuperRootV1(data []byte) (*SuperV1, error) {\n\t// ...\n\t// Must contain complete chain output roots\n\tif (len(data)-9)%32 != 0 { // @audit invalid, 32 should be 64\n\t\treturn nil, ErrInvalidSuperRoot\n\t}\n```\n\n\n**Recommendation**:\nConsider replacing % 32 by % 64 check if there are complete ChainIDAndOutput structures.", "CLOSED", 0, "BlocksOnAChain", "2025-04-02T14:07:26Z", "2025-05-06T23:23:02Z", "2025-05-06T23:23:02Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6tqG9D", 14809, "Need help with deploy my testnet L2 base on custom L1", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n\nI got stuck when deploying L2 on my L1\n\n`stage=deploy-superchain`\n\n**Steps to Reproduce**\n\nI followed this document:\nhttps://docs.optimism.io/operators/chain-operators/tutorials/create-l2-rollup#step-2-generate-your-l2-genesis-file-and-rollup-file\n\nAt step: Deploy the L1 contracts, I try to run `op-deployer apply` and got stuck in there\n\n**Expected behavior**\n\nCan deploy my contracts to L1\n\n**Environment Information:**\n\n- op-deployer: v0.2.0-rc.1\n\n**Configurations:**\n\n```yaml\nconfigType = \"custom\"\nl1ChainID = 2021\nfundDevAccounts = false\nuseInterop = false\nl1ContractsLocator = \"tag://op-contracts/v2.0.0-rc.1\"\nl2ContractsLocator = \"tag://op-contracts/v1.7.0-beta.1+l2-contracts\"\n\n[superchainDeployment]\n\n[superchainRoles]\n  proxyAdminOwner = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n  protocolVersionsOwner = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n  guardian = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n\n[[chains]]\n  id = \"0x0000000000000000000000000000000000000000000000000000000001346935\"\n  baseFeeVaultRecipient = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n  l1FeeVaultRecipient = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n  sequencerFeeVaultRecipient = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n  eip1559DenominatorCanyon = 250\n  eip1559Denominator = 50\n  eip1559Elasticity = 6\n  [chains.roles]\n    l1ProxyAdminOwner = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n    l2ProxyAdminOwner = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n    systemConfigOwner = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n    unsafeBlockSigner = \"0x21e73120AB1daf03a034cEe4c16Cf788fCf1677c\"\n    batcher = \"0x21F8e9C123887c07933C3b9CeA9FE8347c7E4194\"\n    proposer = \"0x9558B8B2831Db3606857cF480B76344df629885b\"\n    challenger = \"0x53A1EEa21df7927EB0fECDDa8C2E73A1608F326c\"\n```\n\n**Logs:**\n\n```\n./op-deployer  apply --workdir .deployer --l1-rpc-url https://saigon-testnet.roninchain.com/rpc --private-key $GS_ADMIN_PRIVATE_KEY\nINFO [03-12|10:23:29.936] Initialized path database                readonly=true cache=0.00B buffer=0.00B history=0\nINFO [03-12|10:23:29.936] initializing pipeline                    stage=init strategy=live\nINFO [03-12|10:23:30.022] deploying superchain                     stage=deploy-superchain\n```\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->", "CLOSED", 0, "0x0kurooo", "2025-03-12T10:35:47Z", "2025-05-09T13:44:00Z", "2025-05-09T13:44:00Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6tTlK-", 14754, "op-supervisor: Handle non-existent log index correctly", "When looking for a log index higher than what's in a block we should treat it as an Err Conflict not an Err Future.", "CLOSED", 0, "unknown", "2025-03-10T15:07:12Z", "2025-05-09T11:59:44Z", "2025-05-09T11:59:42Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6soaxC", 14642, "op-program: Consider consolidation in the worst-case", "Our target is a 2-chain interop cluster. The objective is to consider whether consolidation as currently implement remains fault-provable in a reasonable amount of time for the most expensive state transitions _under cannon_.\n\nConsolidation introduces additional cost factors, compared to pre-interop derivation, including receipts fetching and canonical block lookup. It'll be worthwhile to consider the following, non-exhaustive, cases:\n- block dependencies that are mostly filled with executing messages and/or receipts.\n- future projection of the earliest canonical block query. And whether the canonical oracle can satisfy such queries in a reasonable amount of time.", "CLOSED", 0, "Inphi", "2025-03-05T05:51:30Z", "2025-05-09T17:00:00Z", "2025-05-09T16:59:30Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6r82qc", 14562, "Deriver system is resetting - failed to fetch blob sidecars for slot 9946383 block 0x4f792564095af9fa5d2e36c112afe0eaecc2080abdcbc01fd5241bd88dd2fc25:20737555", "Bug Description\nOp-node failed to fetch blobs: failed to get blob sidecars for L1BlockRef.\nSteps to Reproduce\n\nTry to sync mainet\nOp-node is stuck on this error.\nExpected behavior\nIt should sync without error\n\nEnvironment Information:\nOp-node and op-geth are deployed using docker-compose. Prysm and Geth are also deployed on same machine.\n\nOp-node version is v1.11.2\nOp-geth version is v1.101500.1\n\ngeth version is ethereum/client-go:v1.15.2\nprysm version is beacon-chain:v5.3.0\n\nP.S. geth is not fully synced, only prysm - but I don't think this causes this sync stuck on op-node.\n\nDo you have any alternative for Beacon node that contain all blockchain data? (Maybe some flags could fix this?)\nI also did some research and sync from scratch of Prysm does not guarantee my beacon node will have all the necessary data. Thank you!", "OPEN", 0, "Andrei-sys", "2025-02-27T15:27:00Z", "2025-05-10T10:58:57Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6q3E1K", 14460, "Deprecate deploy-config (OPCM - upgrades)", "The test scripts (ie. Deploy.s.sol) still depend on test values coming from `hardhat.json`, by way of `DeployConfig.s.sol`. \n\nThis monolithic approach to config has been deprecated in favor of using `op-deployer` which consumes an `intent.toml` file ([example](https://github.com/ethereum-optimism/devnets/pull/34/files#diff-ffdd0d4ec399fb055a0a8d3eb731dcffcf272cec33691f93f1ba14dfe77931ed)). We should replace `hardhat.json` with such an intent file. \n\nThis work is closely related to #13331. \n", "OPEN", 0, "maurelian", "2025-02-20T15:47:44Z", "2025-05-09T13:45:05Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6onLQJ", 14122, "interop: test sequencing tracker", "Implement https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md\n\n", "CLOSED", 0, "protolambda", "2025-02-04T00:23:37Z", "2025-10-01T14:37:55Z", "2025-10-01T14:37:55Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6nwc-W", 14014, "op-program: Simplified ReceiptsByOptimisticBlockHash interface", "The [`ReceiptsByBlockHash`](https://github.com/ethereum-optimism/optimism/blob/e3a320152d067c0083d18835220d938c822210d7/op-program/client/l2/oracle.go#L44) oracle interface was introduced so the program can retrieve the receipts of re-executed blocks. This is really the only use case for `ReceiptsByBlockHash` so it'll be cleaner to re-execute the block as part of fetching the receipts. Then we can remove the [`BlockDataByHash`](https://github.com/ethereum-optimism/optimism/blob/e3a320152d067c0083d18835220d938c822210d7/op-program/client/l2/oracle.go#L40) interface. \n\nNote that what we're not doing is removing the block-data and l2-receipts hint routes. Those two hints will continue to be used by the program. But rather, we're only reworking the Go interfaces a bit.", "CLOSED", 0, "Inphi", "2025-01-28T02:42:14Z", "2025-05-08T21:45:47Z", "2025-05-08T21:45:46Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6nVYZ8", 13943, "Migrating pre-interop chains to Interop.", "We need to work on Migrating pre-interop chains to Interop, as we get closer to our final releases\n", "CLOSED", 0, "BlocksOnAChain", "2025-01-23T16:41:41Z", "2025-05-06T07:27:30Z", "2025-05-06T01:30:10Z", "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6nFMa3", 13911, "SPIKE: Define process for adding new chains to the interop set", "We may not actually implement the support for it in the first release, but we need to know it is feasible to do.", "OPEN", 0, "ajsutton", "2025-01-22T01:31:11Z", "2025-05-09T21:50:09Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM6Td8fT", 11527, "EVM Engineering: Update all `0.8.15` code to `0.8.25`", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nSince we need EIP-1153 for the interop smart contracts, we need to use a more modern Solidity compiler. By only updating some smart contracts to use the new compiler version and keeping the old versions specifically at `0.8.15`, it is creating technical debt. We should update all smart contracts to the same version of solidity.\r\n\r\nTo do this safely, we will also need to create a [failure mode analysis](https://github.com/ethereum-optimism/design-docs/blob/main/assets/fma-template.md) that convinces us that there are no issues. When creating the FMA, it should include anything from the solc changelog from 8.15 to latest to be aware of any bug fixes or changes that impact us.\r\n", "OPEN", 0, "tynes", "2024-08-19T19:59:29Z", "2025-05-09T13:53:25Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDODjvEJM51uy4X", 8023, "Derivation-specs: improve docs on effects/requirements of each derivation stage", "See https://github.com/ethereum-optimism/optimism/pull/7867#discussion_r1377010197\nChanges to the batch-queue affect the other inner stages (attributes queue, engine queue) indirectly with additional assumptions. These should be documented better.\n", "OPEN", 0, "protolambda", "2023-11-02T23:35:14Z", "2025-05-09T14:18:42Z", null, "ethereum-optimism/optimism", "2025-08-31 04:55:30"]
["I_kwDOKSJyfM62bj1B", 803, "Deprecate Console Features (Safe + Deals)", "", "CLOSED", 0, "jvmi7", "2025-05-13T16:52:32Z", "2025-05-19T16:34:05Z", "2025-05-19T16:34:05Z", "ethereum-optimism/ecosystem", "2025-08-31 04:56:36"]
["I_kwDOKSJyfM62bdKE", 801, "Implement social share card feature for OG boosts", "https://www.figma.com/design/BI6WbU09y81vQ8jaQ131OC/SuperStacks-Points-Programme?node-id=2836-46640&m=dev", "CLOSED", 0, "jvmi7", "2025-05-13T16:40:29Z", "2025-05-19T17:17:15Z", "2025-05-19T17:17:15Z", "ethereum-optimism/ecosystem", "2025-08-31 04:56:36"]
["I_kwDOKSJyfM62bcFB", 799, "Implement new table view Pools UI", "https://www.figma.com/design/BI6WbU09y81vQ8jaQ131OC/SuperStacks-Points-Programme?node-id=2836-46640&m=dev", "CLOSED", 0, "jvmi7", "2025-05-13T16:38:24Z", "2025-05-19T17:17:09Z", "2025-05-19T17:17:09Z", "ethereum-optimism/ecosystem", "2025-08-31 04:56:36"]
["I_kwDOKSJyfM60Vu5L", 756, "Scope Refferal Links", "", "CLOSED", 0, "tarunkhasnavis", "2025-04-28T17:06:52Z", "2025-05-19T16:31:41Z", "2025-05-19T16:31:41Z", "ethereum-optimism/ecosystem", "2025-08-31 04:56:36"]
["I_kwDOL-xLQ863MJ_7", 366, "[acceptance] Test: base; convert RPC Connectivity test to use devstack", "We've aligned on moving to op-devstack as soon as possible, so let's convert this test.", "CLOSED", 0, "scharissis", "2025-05-19T10:54:45Z", "2025-05-19T20:52:19Z", "2025-05-19T20:52:18Z", "ethereum-optimism/infra", "2025-08-31 04:56:36"]
["I_kwDOL-xLQ862_cDs", 363, "proxyd: (interop-message-validation) health-aware load balancing", "Currently, proxyd supports supervisor redundancy through the means of \"multicall\" interop_validation.strategy.\n\nIt operates by fanning out an incoming interop transaction to all the supervisor backends for its validation, and the validation succeeds if at least one supervisor responses with a success.\n\nThough this provides HA guarantees for interop message validation, it does end up inducing additional undeserving load on the backing supervisors.\n\nAnother HA-oriented idea which can have lower impact on the backing supervisors is health-aware load-balancing between supervisors.\n\nA/C:\n- Estimate the effort and worthiness of having health-aware load balancing \n- Optionally, implement a \"load-balanced\" strategy under interop_validation which routes the incoming interop transactions to one healthy supervisor at a time in a round robin fashion.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-16T21:15:57Z", "2025-05-21T16:56:20Z", "2025-05-21T16:56:20Z", "ethereum-optimism/infra", "2025-08-31 04:56:36"]
["I_kwDOL-xLQ86271G-", 355, "Support env var config in op-acceptor", "Supporting env vars config within test configuration would enable test frameworks with dynamic options configurable with env vars to be properly configured for tests run with op-acceptor. For example, the devstack/devnet-sdk which can be configured to run tests against sysgo or kurtosis/netchef based on `DEVSTACK_ORCHESTRATOR={sysgo,sysext}`. Right now this is configured externally to op-acceptor which does not allow a single test to be run with different env var configurations within a single run of op-acceptor.\n\ne.g. in a gate config\n\n```\n  - id: interop\n    inherits:\n      - base\n    description: \"Interop network tests.\"\n    tests:\n      - package: github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop\n        env:\n            DEVSTACK_ORCHESTRATOR: sysext\n```", "CLOSED", 0, "teddyknox", "2025-05-16T14:17:02Z", "2025-05-21T19:11:21Z", "2025-05-21T19:11:20Z", "ethereum-optimism/infra", "2025-08-31 04:56:36"]
["I_kwDOL-xLQ86y5Prh", 284, "[acceptance] Test: base; deposit flow", "Implement \"deposits\" from this list [here](https://www.notion.so/oplabs/Acceptance-Criteria-176f153ee162802db9aafd717078a2f4?pvs=4#1adf153ee16280709913e8c31d0d0e41).\n\nWe'd like to verify a complete deposit flow from L1 to L2, including transaction finality and correct token balances.\n\nThis is roughly equivalent to:\n```\ncast send --rpc-url $ETH_L1_RPC --value 1ether --private-key $USER_PRIVATE_KEY $OPTIMISM_PORTAL_PROXY_ADDR\n# wait 1m\ncast balance --rpc-url $DEVNET_PUBLIC_RPC_URL $USER_ADDR\n```\n\n### Implementation\nUse `op-devstack` to deploy a minimal network setup with L1 and L2 nodes. Create a test wallet with funds on L1, initiate a deposit transaction via the L1 bridge contract, and verify the deposit is received on L2 with correct balances. Monitor transaction receipts and event logs to confirm proper finality.", "CLOSED", 0, "scharissis", "2025-04-17T04:04:23Z", "2025-05-22T22:43:52Z", "2025-05-22T22:43:51Z", "ethereum-optimism/infra", "2025-08-31 04:56:36"]
["I_kwDOKIwiaM6Veq9d", 885, "[RPC PROVIDER] Add PR title", "### RPC Provider Name\n\nGetBlock\n\n### RPC Provider Description & Pricing\n\n[GetBlock](https://getblock.io/nodes/op/) provides reliable access to full blockchain nodes via RPC, supporting multiple networks, including Optimism. It's ideal for developers building dApps, smart contracts, and blockchain projects, offering scalable and efficient infrastructure.\r\nIt offers a Pay-as-You-Go flexible pricing based on actual usage, perfect for unpredictable workloads that starts from $29 and also has a free plan for testing that includes 40K requests daily.\n\n### RPC Provider URL\n\nhttps://getblock.io/nodes/op/\n\n### Supported Networks\n\n- [X] OP Mainnet\n- [ ] OP Goerli\n- [X] OP Sepolia\n\n### When did the product go live?\n\n2019\n\n### Is the product open source?\n\nYes\n\n### GitHub URL\n\n_No response_\n\n### Documentation URL\n\nhttps://getblock.io/docs/\n\n### Additional context\n\nGetblock isn't is not displayed on this page https://docs.optimism.io/builders/tools/connect/rpc-providers, although it is also an active provider of Optimism ", "CLOSED", 0, "JoGetBlock", "2024-09-05T13:40:43Z", "2025-05-22T11:13:48Z", "2024-12-02T09:48:03Z", "ethereum-optimism/docs", "2025-08-31 04:56:38"]
["I_kwDOH2Qg5s6vCQBk", 554, "Predeploy state changes are excluded in prestate tracer", "#### System information\n\nGeth version: `Geth version: 1.101503.1`\nOS & Version: LinuxCommit hash\n\n#### Expected behaviour\nSee also:\n\nhttps://github.com/paradigmxyz/reth/issues/15164\n\nprestateTracer in diffMode should record all state diffs.\n\n\n#### Actual behaviour\n\npredeploy addresses (Fee Vaults)\n\n> 0x42..19 BaseFeeVault\n> 0x42..1a L1FeeVault\n\ndon't appear in op-geth output.\n\n\nI believe this happens because the state changers are invoked directly:\n\nhttps://github.com/ethereum-optimism/op-geth/blob/28ddc5e77079a983ec75c7956956013c8564c3b7/core/state_transition.go#L680-L680\n\nand the tracer never records those changes because that one operates on opcode hooks etc.\n\nhttps://github.com/ethereum-optimism/op-geth/blob/28ddc5e77079a983ec75c7956956013c8564c3b7/eth/tracers/native/prestate.go#L104-L104\n\nIt's probably debatable whether these predeploy changes should even appear in the diff.\n\ncc @emhane \n\n#### Steps to reproduce the behaviour\n\nbase:\n```\ncurl <endpoint>\n -X POST -H \"Content-Type: application/json\" --data '{\"method\":\"debug_traceTransaction\",\"params\":[\"0x3629b20b0973042579c9912b7c3360cd3ca56bc5fd9ba0f9bf4db594ba552e74\", {\"tracer\": \"prestateTracer\", \"tracerConfig\": {\"diffMode\": true}}],\"id\":1,\"jsonrpc\":\"2.0\"}'\n```\n[geth.json](https://github.com/user-attachments/files/19361203/geth.json)\n[reth.json](https://github.com/user-attachments/files/19361204/reth.json)\n\n", "OPEN", 0, "mattsse", "2025-03-20T20:44:03Z", "2025-05-19T18:05:53Z", null, "ethereum-optimism/op-geth", "2025-08-31 04:56:39"]
["I_kwDOMMiGhs61-fvH", 390, "Is persistant blockchain state possible ?", "Hello there, \n\nI was wondering it there was a way to have persistant data and not start from scratch each time the blockchain is started ? \n\nWorking on blockchain states and all makes it hard when starting each time from block number 0 \nAny workaround ? \n\nThanks !", "CLOSED", 0, "bengivre", "2025-05-09T19:52:03Z", "2025-05-19T21:21:07Z", "2025-05-19T21:21:06Z", "ethereum-optimism/supersim", "2025-08-31 04:57:03"]
["I_kwDOLB-lzc6zJwPN", 670, "Interop: Specify Supervisor Managed Mode", "Managed Mode is an interface that `op-node` satisfies in order to provide a stable derivation source for the `op-supervisor`.\n\nWe would like for Kona to be able to act in the same way `op-node` does, by providing a stable source for logs and derivation events.\n\nTo that end, we need to create a specification around the existing Managed Mode which Kona may follow.\n\nManaged Mode exchanges are documented in the [README](https://github.com/ethereum-optimism/optimism/blob/develop/op-supervisor/README.md), but we need to track:\n\n- API surface needed to handle orchestration from the Supervisor\n- API surface implicitly needed by the Supervisor (like fetching logs)\n- Subscription Events which must be emitted from Kona/Node to the Supervisor.", "CLOSED", 0, "axelKingsley", "2025-04-18T20:16:07Z", "2025-05-23T14:40:19Z", "2025-05-23T14:40:19Z", "ethereum-optimism/specs", "2025-08-31 04:57:07"]
["I_kwDOKIsnqM63SWTG", 1005, "don't allow setting state variables in a templates _build function", "Discussed [here](https://github.com/ethereum-optimism/superchain-ops/pull/972#discussion_r2096452997). \n\n> good safety feature to track is to assert this. Implementation could be something like:\n> \n> vm.dumpState() -> filter for storage in address(this)\n> do the build method\n> dump state again after build and keccak256(initStateOfThis)) == keccak256(endStateOfThis)\n\nEssentially, if `_build` tries to set any state variables, they will be reverted before `_validate` runs. This behavior is unintuitive and potentially unsafe. It occurs because we revert to the previous snapshot after `_build` completes. See [this line](https://github.com/ethereum-optimism/superchain-ops/blob/main/src/improvements/tasks/MultisigTask.sol#L1091).", "OPEN", 0, "blmalone", "2025-05-19T21:17:41Z", "2025-05-19T21:17:41Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 04:57:13"]
["I_kwDOJ_r-bs63P_V5", 1017, "Have the compliance report function for chains added to \"new\" superchains", "Currently, the compliance report command only works for chains being added to `mainnet` or `sepolia` superchains. \n\nWith #1011 we are adding the ability to add chain(s) to a net new superchain defined by the user. So if we want the compliance report to work for these chains, it needs to be updated to\n* permit a superchain identifier which is an arbitrary string.  \n* be able to look up l1 chain id and rpc urls without leaning on existing superchain information (it can use the information in the staging area)\n* be able to fallback on a default \"standard config\" if one has not been defined yet for this superchain (most likely it never will, we should just compare to the mainnet standard config). \n* once the superchain has been added, `init`-time code should allow the superchain information to be loaded for future validations / report generation. As described here https://github.com/ethereum-optimism/superchain-registry/pull/1011#discussion_r2095738865\n\n\n---\n\n> Tried this but hit an issue #1015 . We only define the \"standard config\" for mainnet and sepolia superchains. Since we add a devnet into a new, unique superchain, we have nothing to compare it to. \n> \n> We could just fallback to comparing to mainnet, or sepolia if they are at least on the same l1?\n\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/superchain-registry/pull/1011#discussion_r2095724446_\n            ", "CLOSED", 0, "geoknee", "2025-05-19T16:34:23Z", "2025-05-20T11:29:55Z", "2025-05-19T21:13:24Z", "ethereum-optimism/superchain-registry", "2025-08-31 04:57:17"]
["I_kwDODjvEJM64JvOV", 16114, "op-contracts: Remove SystemConfig reference from AnchorStateRegistry", "`AnchorStateRegistry` has picked up a reference to `SystemConfig` to check if the chain is paused and to retrieve the guardian role.  But with interop `AnchorStateRegistry` becomes shared across chains and `SystemConfig` remains chain specific.\n\nThe guardian role should be the same for all chains in a cluster, and `SystemConfig.paused` uses the lockbox (which is shared) as the key for checking if the \"individual\" chain is paused so this does give the desired behaviour. However having shared components refer to chain specific components is very dangerous.\n\nGiven `SystemConfig` defers to `SuperchainConfig` for both functions, `AnchorStateRegistry` should be updated to only reference `SuperchainConfig` to keep it isolated to shared components.", "OPEN", 0, "ajsutton", "2025-05-25T20:40:22Z", "2025-05-25T20:42:19Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM64CxEh", 16112, "feat(messaging): add support for batched relay of L2-to-L2 messages", "Currently, `sendMessage()` and `relayMessage()` functions handle only one message per call. When executing complex workflows involving multiple cross-chain interactions, each message must be relayed separately. This introduces latency due to per-message block delays and increases the risk of partial execution.\n\n**Describe the solution you'd like**\n\nI propose the addition of a `relayBatchMessage()` function that enables relaying multiple L2-to-L2 messages atomically or in a tightly grouped context. The intention is to reduce overhead, simplify developer experience, and improve reliability in scenarios with multiple message dependencies.\n\n```solidity\n// pseudo-code\nfunction relayBatchMessage(Identifier[] calldata ids, bytes[] calldata messages) external returns (bytes[] memory results);\n```\n\n**Describe alternatives you've considered**\n\n- Using `sendMessage()` repeatedly with sequential relays, which introduces delay and complexity.\n- Sending messages via a custom contract that later multicalls on the destination \u2014 not ideal as each call still requires a relay step.\n\n**Additional context**\n\nThis would enable:\n- Atomic execution of multiple dependent messages\n- Reduced message latency\n- Better UX for cross-chain apps using L2-to-L2 messaging\n", "OPEN", 0, "codeesura", "2025-05-23T23:47:03Z", "2025-05-23T23:47:03Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM64CJq8", 16110, "op-supervisor: Event System Limitations Encountered During Sync", "After some long period of execution, my local Kurtosis Supervisor went down (likely due to me closing my laptop).\n\nAnd now, I can't get the network back up because the Supervisor is crashing. It crashes because the Event Queue Sanity limit is reached!\n\nLooking at grafana during startup, it seems like this happens when there is a deep queue of unsafe work to catch up on.\n\nEach Local Unsafe Update triggers:\n- Log Indexing\n- Cross Unsafe updates for *all* chains\n\nAnd furthermore, Log Index Events can snowball. Consider this:\n- Chain A is 1000 blocks behind indexing\n- Chain A notifies supervisor of block 1001, creating an indexing event (Ev1)\n- Supervisor indexes blocks 0-10, and there is more work to do, so Supervisor emits a new event for indexing more (Ev1.1)\n- Chain A notifies supervisor of block 1002, creating an indexing event (Ev2)\n- Ev2 indexes some and creates Ev2.1\n- Ev1.1 indexes some more and creates Ev1.1.1\n- ...\n\nSo it would appear that the Supervisor gains linearly more indexing jobs the further behind it is, as every new Unsafe head discovered creates a cycle of indexing events which may trigger themselves.\n\n![Image](https://github.com/user-attachments/assets/25c7bc24-1113-4e1f-89a1-ca79d04448a0)\n\n\nThere are potentially numerous solutions to this problem, ranging in effectiveness and quality:\n- Raise the Queue Sanity Limit: this could get us through some sync issues, but given the linear increase issue documented above, it won't solve everything\n- Utilize prioritization in the Event System to drop unnecessary events when near the limit, or otherwise utilize the rate-limiting features of the Event System. These features are unused so far and may take some integration or other careful consideration to utilize\n- Change the Chain Processor to not create self-triggering cycles when there are already cycles happening.\n\n### Probable Best Solution For Now:\n- When a new indexing event hits the indexer:\n- Check if we are *already* not sync'd up to the target already given (new field called `maxTarget`)\n- If the new target is less than or eq the `maxTarget`, do nothing\n- If the new target is greather than the `maxTarget`, update the max target\n- If the `maxTarget` hasn't been set, allow this event to trigger new work. Otherwise, updating the max target is enough.\n- The indexer should trigger itself to continue working any time it is not done indexing\n- once the indexer is done indexing, it should remove the maxTarget so that it knows work is done, and may be triggered by the next indexing event", "OPEN", 0, "axelKingsley", "2025-05-23T21:27:10Z", "2025-05-23T21:56:59Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM635dsW", 16096, "Payload has bad block hash", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\nop-node stuck in \"Payload has bad block hash\" loops\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n1. Clone https://github.com/Chomtana/simple-optimism-node\n2. Switch to commit [b9b8098908aed7a433a03e5b6b2ed711cfae9a29](https://github.com/Chomtana/simple-optimism-node/commit/b9b8098908aed7a433a03e5b6b2ed711cfae9a29)\n3. Set environment variables in .env\n4. Start simple-optimism-node with `docker compose up -d --build`\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\nIt should be able to sync from scratch\n\nIf we rollback simple-optimism-node to a previous commit [05b11d35f2019d52ce4faeed2c38b836e8f4a95b](https://github.com/Chomtana/simple-optimism-node/commit/05b11d35f2019d52ce4faeed2c38b836e8f4a95b), it will works\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n* Ubuntu 22\n* op-node v1.13.3\n* op-geth v1.101511.0\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n```\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmHNkpHr8JhcX6yDNW4v7EV13A6r4TRbYvNqejvjG6n6Zc\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmFe3Np3zevVGekJTNPJhPfxfQpqyg9uMxnWhnSmLJvTwc\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmDcKsuKVNz5Z3P4PrR2MHNuhaBkNzRzioxg4DBos4Vhz8\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:55+0000 lvl=info msg=\"connected to peer\" peer=16Uiu2HAmDcKsuKVNz5Z3P4PrR2MHNuhaBkNzRzioxg4DBos4Vhz8 addr=/ip4/193.122.156.47/tcp/9222\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:55+0000 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAmDcKsuKVNz5Z3P4PrR2MHNuhaBkNzRzioxg4DBos4Vhz8\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm3jVqY6Czn2m4zKrzoRTUUDXeQ4BHkmiXHfoL6RmGzfb6\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:55+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm1YTtfbQCf7C9g4Xe7rBA7oSDV8c2HzzhvJXLX1Vkc2D4\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:57+0000 lvl=warn msg=\"payload has bad block hash\" topic=blocksV4 bad_hash=0x9fd7d43614e525e2a44de1022a87cd4a07965a4016d8ba679c5bf418cf4b53b8 actual=0x9233173a08286e4a0291ebd782223e089791f21b2441a4008ce03bc585e01791\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:57+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmBjkezXN7FjME165RKjspygPkmVyfYVkFHFjKcViebAVC addr=/ip4/107.6.112.103/tcp/24651\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:01:59+0000 lvl=warn msg=\"payload has bad block hash\" topic=blocksV4 bad_hash=0x793f797387a06fecfe06c023b2b22de366ebe967aaecb6fb9457b9248f23a5d3 actual=0x7d607d7b3df2b79d5b9a4fa092c16846b0730801fecd851813d7ab93d4e53cb1\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:00+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmHJ9EfEiGkkBfvr2zqrRzxEwuxpVQ9HXzQKoNo7d1o7nK\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:00+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm3jVqY6Czn2m4zKrzoRTUUDXeQ4BHkmiXHfoL6RmGzfb6\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:00+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmHNkpHr8JhcX6yDNW4v7EV13A6r4TRbYvNqejvjG6n6Zc\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:00+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmHJ9EfEiGkkBfvr2zqrRzxEwuxpVQ9HXzQKoNo7d1o7nK\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:00+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmFe3Np3zevVGekJTNPJhPfxfQpqyg9uMxnWhnSmLJvTwc\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:00+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAmBjkezXN7FjME165RKjspygPkmVyfYVkFHFjKcViebAVC\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:00+0000 lvl=info msg=\"attempting connection\" peer=16Uiu2HAm1YTtfbQCf7C9g4Xe7rBA7oSDV8c2HzzhvJXLX1Vkc2D4\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:01+0000 lvl=info msg=\"connected to peer\" peer=16Uiu2HAmBjkezXN7FjME165RKjspygPkmVyfYVkFHFjKcViebAVC addr=/ip4/107.6.112.103/tcp/24651\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:01+0000 lvl=info msg=\"Starting P2P sync client event loop\" peer=16Uiu2HAmBjkezXN7FjME165RKjspygPkmVyfYVkFHFjKcViebAVC\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:01+0000 lvl=info msg=\"disconnected from peer\" peer=16Uiu2HAmC7Stf2EqVG8Cz2KMHbwJ437EfbnYK5DL56jS4gL6hBZf addr=/ip4/15.235.226.147/tcp/9222\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:01+0000 lvl=warn msg=\"payload has bad block hash\" topic=blocksV4 bad_hash=0xa3b01737b374467c547554e8bf79a074c742cee803b321d1762155b2583b3520 actual=0x0f2228b6719967aab454f39bcafe6e5eda4acdaf895dd02d1811111504e93e69\nsimple-optimism-node-op-node-1  | t=2025-05-23T06:02:03+0000 lvl=warn msg=\"payload has bad block hash\" topic=blocksV4 bad_hash=0x5e5ff5e9d3ad5c15b967bb20fd6a7d0b4dd94e66870cbe2637e57ed0378c1029 actual=0x35e110eb7965ec5e2569d1cc8a1d99cc417d5d4884afee0a5dedccf60249d9ee\n```\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "Chomtana", "2025-05-23T06:07:59Z", "2025-05-23T17:20:56Z", "2025-05-23T17:20:55Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63rXy8", 16070, "Simplify SuperPermissionedDisputeGame", "SuperPermissionedDisputeGame is large, and could be simplified a lot. It doesn't need to inherit from SuperFaultDisputeGame and can do without many of the attributes such as absolute prestate.", "OPEN", 0, "pauldowman", "2025-05-21T23:01:59Z", "2025-05-22T21:27:14Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63qPzm", 16063, "Document or automate the artifacts creation process", "Related to #16062. \n\nDespite there being many more tags listed in the SCR:\n\n```\ncat validation/standard/standard-versions-mainnet.toml | grep op-contracts/\n[\"op-contracts/v4.0.0-rc.6\"]\n[\"op-contracts/v3.0.0\"]\n[\"op-contracts/v3.0.0-rc.2\"]\n[\"op-contracts/v3.0.0-rc.1\"]\n[\"op-contracts/v2.0.0\"]\n[\"op-contracts/v2.0.0-rc.1\"]\n[\"op-contracts/v1.8.0\"]\n[\"op-contracts/v1.8.0-rc.4\"]\n[\"op-contracts/v1.6.0\"]\n[\"op-contracts/v1.4.0\"]\n[\"op-contracts/v1.3.0\"]\n```\n\nThe only valid tags according to `op-deployer bootstrap` are:\n\n```\n./bin/op-deployer bootstrap implementations --artifacts-locator tag://op-contracts/v4.0.0-rc.6\nApplication failed: failed to populate config: failed to set field ArtifactsLocator: unsupported tag: op-contracts/v4.0.0-rc.6\nValid tags are:\n  op-contracts/v1.6.0\n  op-contracts/v1.7.0-beta.1+l2-contracts\n  op-contracts/v1.8.0-rc.4\n  op-contracts/v2.0.0-rc.1\n  op-contracts/v3.0.0-rc.2\n```\n\nThe process for adding new artifacts should be documented, and ideally automated, such that they are created whenever a new tag is created.", "OPEN", 0, "maurelian", "2025-05-21T20:11:54Z", "2025-05-21T20:11:54Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63fJV3", 16040, "op-devstack or devnet-sdk: test to have the capability to modify the infra backing persistent devnets", "Considering the direction which op-acceptance-tests is embarking upon, which includes writing various tests against chaotic scenario of the infra hosting the network being tested, we need an API/abstraction for the tests to be able to manipulate the backing infra of the persistent devnets at any point in time.\n\nFor example, crashing the sequencer, turning off some pods or polluting a configmap before executing some tests like Sequencer failovers.\n\nObviously, we can't have a generic enough implementation which suits every chain partner of ours but we can have an implementation which works for our persistent devnets.\n\nI imagine something on the lines of having a new ControlSurface (like the one we have for kt in devnet-sdk) abstracting these methods.\n\nA/C:\n- Tests in op-acceptance-tests have readymade abstractions accessible to allow modifying the underlying infra of the persistent devnets at any point in time during the tests' execution.\n- A very simple example base-test checking for sequencer failover by killing the op-geth pods of the active sequencer.", "OPEN", 0, "yashvardhan-kukreja", "2025-05-20T22:51:54Z", "2025-05-20T22:51:54Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63dyAG", 16036, "op-batcher: investigate why sequencing-window expiry recovery does not go well with span-batches", "There appears to be a bug in the batcher continuation code, after the L2 chain has expired, and the sequencer has rebuilt a new chain to be safely submitted.\nThe L2 chain blocks (6 of them in the last test) appear to not align with the point that the batcher starts submitting from.\nSomewhere in the test prior batcher state results in problems, and may need to be cleared somehow.\n\nSee https://github.com/ethereum-optimism/optimism/blob/afb90ebee9c8760a5359b7d39900affcfa53d1da/op-acceptance-tests/tests/interop/seqwindow/expiry_test.go#L137\nAnd setup: https://github.com/ethereum-optimism/optimism/blame/afb90ebee9c8760a5359b7d39900affcfa53d1da/op-acceptance-tests/tests/interop/seqwindow/init_test.go#L19\n", "OPEN", 0, "protolambda", "2025-05-20T19:31:14Z", "2025-10-17T12:26:10Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63dCDs", 16033, "interop: update StandardValidator or OPCM to check that interop migration was successful", "Somewhere we should have assertions that check e.g. two chains in the interop set have the same lockbox, etc. We have tests for these, but after calling `opcm.migrate()` we should be able to verify it was executed successfully. This can be part of the StandardValidator's checks, or it may be inlined into the `migrate()` method if we are ok with releasing a new OPCM", "OPEN", 0, "mds1", "2025-05-20T18:07:48Z", "2025-05-23T23:15:13Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63TMdq", 16019, "Document interop upgrade runbook", "## Description\n\nTake the interop upgrade walkthrough document, clean it up, and share it with the Uniswap Labs engineering team so they can get started on their own devnet (https://github.com/ethereum-optimism/optimism/issues/16017)\n\n## Resources\n\n- [Interop Upgrade Walkthrough - Internal Notion Page](https://www.notion.so/oplabs/Interop-Upgrade-Walkthrough-1e4f153ee16280d8aa74f484627edfad)", "CLOSED", 0, "sbvegan", "2025-05-20T00:02:24Z", "2025-05-23T16:49:21Z", "2025-05-23T16:49:20Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63THji", 16018, "Uniswap Labs & OP Labs interop devnet", "## Description\n\nAfter both OP Labs and Uniswap Labs have run through the devnet process of moving two U16 chains to U17, they will run through the process where each is running their own sequencer in the interop dependency set. The upgrade preparation step outlined in https://github.com/ethereum-optimism/optimism/issues/16017 can be performed independently by each team; however, the upgrade execution will need to be coordinated across the two organizations. This is the rehearsal the orgs will perform prior to the Freya Betanet, which should mirror this process (with the rough edges smoothed out).\n\n## Resources\n\n- @jelias2 (Platforms team)\n- Wed/Th recurring calls\n- [to add: runbook]()", "CLOSED", 0, "sbvegan", "2025-05-19T23:42:56Z", "2025-05-23T16:49:25Z", "2025-05-23T16:49:24Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63TFnA", 16017, "Uniswap Labs runs parallel interop devnet", "## Description\n\nThe Unichain engineering team runs their own two sequencer interoperable devnet. Including running the new node implementations, fault proofs, upgrading from U16 to U17 via OPCM, doing the Super root migration, interop hard fork, and proxyd message validation.\n\nThis includes running the interop migration like we'll do in the subsequent devnet with OP Labs, the Freya Betanet, Sepolia, and Mainnet.\n\n## Action items\n\n**Upgrade preparation:**\n\n1. Identify the releases to be used in this devnet\n2. Deploy a safe to be the L1 ProxyAdmin owner of both chains\n3. Deploy U16 OPCM with `op-deployer bootstrap`\n4. Configure op-deployer intent files for each chain\n5. Use op-deployer to deploy both chains L1 contracts\n6. Use op-deployer to generate the chain artifacts (genesis file and rollup config)\n7. Boot up the offchain services, a set for each chain\n     1. Sequencer (op-node and op-geth)\n     2. op-proposer\n     3. op-batcher\n     4. op-challenger\n     5. proxyd\n     6. conductor\n     7. no op-supervisor yet1. Upgrade the two chains to permissionless fault proofs\n\n**Upgrade execution:**\n\n1. Update the network components with the interop timestamp activation\n2. Deploy op-supervisor\n3. Rotate sequencer to one with interop-ready nodes\n4. Prepare `opcm.migrate()`\n5. `opcm.migrate()` on the chains to migrate them to interop which deploys the new interop FP contracts\n6. Start the post-interop FP services (single op-challenger for the new DisputeGameFactory and keep the other two for the old games)\n7. Await the interop upgrade timestamp\n8. Monitor key events after the interop activation happens\n\n**Post activation validation:**\n\n1. Test proofs functionality after interop activation\n2. Run through release readiness checklist\n3. 7 days later, test a withdrawal via super-root\n\n## Resources\n\n- @jelias2 (Platforms team)\n- Wed/Th recurring calls\n- [to add: runbook]()\n", "CLOSED", 0, "sbvegan", "2025-05-19T23:35:49Z", "2025-05-23T16:49:29Z", "2025-05-23T16:49:28Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63SafF", 16015, "WS-18: Partner Devnet Readiness Support", "## Description\n\nThis is a tracking ticket with the goal of assisting external node-runner partners in being able to participate in the Freya interop devnet so they're prepared for production migrations to the interop system.\n\n## Definition of done\n\n- Partners are ready to run U17 nodes for the upcoming U17 betanet (Freya)", "CLOSED", 0, "sbvegan", "2025-05-19T21:27:24Z", "2025-05-23T21:12:25Z", "2025-05-23T21:12:24Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63SOTY", 16014, "Fix various typos throughout the codebase", "This is a test issue for GitHub Copilot.\n\nGoal is to scan the codebase and search for any typos throughout the repo and fix them. Make as many typo fixes in a single PR as possible. Do not modify files within the packages/contracts-bedrock/src directory.", "CLOSED", 0, "smartcontracts", "2025-05-19T20:59:33Z", "2025-05-19T21:01:11Z", "2025-05-19T21:01:11Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63Ou36", 16001, "Contract Acceptance Tests: DSL PoC using `Call` interface using WETH", "DSL PoC using `Call` interface, implementing basic `Call` interface and simple implementation (WETH).", "CLOSED", 0, "pcw109550", "2025-05-19T14:42:28Z", "2025-05-22T11:56:00Z", "2025-05-22T11:55:59Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63Nx5u", 16000, "Interop: devstack test of sequencing window expiry [sub-issue]", "- [ ] devstack test that forces a sequencing window expiry.\n  - [ ] Configure a system to suggest a very short sequencing window. (Using a `PreDeploy` stage option)\n  - [ ] Use the batcher API to disable batch-submission. (at start of the test)\n  - [ ] Await sequencing window expiry\n  - [ ] Monitor that the old unsafe chain is reorged out as expected\n  - [ ] Monitor that the supervisor stays in sync\n  - [ ] Re-enable the batcher at the end of the test, to keep the system reusable\n", "CLOSED", 0, "protolambda", "2025-05-19T13:23:00Z", "2025-05-19T14:02:16Z", "2025-05-19T14:02:15Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63NNXX", 15998, "Contract Acceptance Tests: `Call` Package with generic DSL", "Define the `call` package with the generic DSL functions that accept some `Call` interface (for the input/output decoding)", "CLOSED", 0, "pcw109550", "2025-05-19T12:35:34Z", "2025-05-22T11:53:29Z", "2025-05-22T11:53:28Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63NFFr", 15995, "op-node: interop: remove StandardMode", "Remove standard mode scaffolding.\n\nThis mode was incomplete, and we are looking to reduce the number of modes for fewer code-paths and easier operation.\n\n", "CLOSED", 0, "protolambda", "2025-05-19T12:23:48Z", "2025-05-19T20:37:11Z", "2025-05-19T20:37:11Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM63M9dD", 15994, "op-deployer:git checkout v1.8.0-rc.4  not matching any existing", "Following docs to use op-deployer to deployer a L2 to Anvil\n\n`git clone https://github.com/ethereum-optimism/optimism.git\n    cd optimism\n    git checkout v1.8.0-rc.4  # Use the desired version\ngit checkout v1.8.0-rc.4 `\n\nTerminal Error:error: `pathspec 'v1.8.0-rc.4' did not match any file(s) known to git`\n", "OPEN", 0, "SZU-CEIE-student", "2025-05-19T12:12:47Z", "2025-05-19T12:12:47Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM627g8S", 15974, "op-fetcher: query for EthLockboxProxy address", "For the superchain-registry to validate depsets, we want to perform an onchain check that all members of the depset share the same EthLockboxProxy and DisputeGameFactoryProxy address. superchain-registry relies on op-fetcher to retrieve these addresses from onchain. Currently op-fetcher does not query for EthLockboxProxy so that address is always set to 0x000...000.\n\n[Here](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/interfaces/L1/IOptimismPortal2.sol#L58) is the method on IOptimismPortal2 that we need to query for that address.", "CLOSED", 0, "bitwiseguy", "2025-05-16T13:43:26Z", "2025-05-19T14:17:19Z", "2025-05-19T14:17:19Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62zJ8c", 15968, "Interop proofs details for governance post", "", "CLOSED", 0, "pauldowman", "2025-05-15T16:50:37Z", "2025-09-03T14:53:38Z", "2025-09-03T14:53:37Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62y8Sw", 15966, "Super root checker script is documented in upgrade runbook", "There will be an [upgrade runbook](https://www.notion.so/oplabs/Interop-Workstreams-1ecf153ee1628076b6f9e2dc38006641?p=1eff153ee16280028daccc84fb04ff46&pm=s) and it needs to include detailed instructions to use the super root checker script.\n\nThe script will also be used by the security council and the public to verify the super roots that will be used in the mainnet upgrade so it should be in a README or somewhere accessible outside of full upgrade runbook (which can link to it).\n\nSee also https://github.com/ethereum-optimism/optimism/issues/15963", "CLOSED", 0, "pauldowman", "2025-05-15T16:29:07Z", "2025-05-22T18:26:13Z", "2025-05-22T18:26:13Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62pAN2", 15942, "Retry RC-Alphanet Recovery", "Let's take a very light-lift to see if recent software updates can recover the Supervisor and Nodes. The following should be done:\n\nHosts:\n- interop-rc-alpha-op-supervisor-sequencer-0\n- interop-rc-alpha-0-opn-geth-f-sequencer-0\n- interop-rc-alpha-1-opn-geth-f-sequencer-0\n\nWhat to do:\n- Build Supervisor image from the latest `develop` (which features a collection of upgrades since the Postmortem)\n- Deploy to Supervisor\n- Restart Supervisor and Nodes and Geths for good measure\n\nWhat to watch:\n- L1 derivation ongoing (provided by Supervisor, derived blocks come back)\n- Indexing work\n- Increase in cross-safe heads (might be eventual)\n\nIf all goes well, perhaps we can recover the network with recovery mode.", "OPEN", 0, "axelKingsley", "2025-05-14T20:27:18Z", "2025-05-23T22:43:27Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62oXYm", 15937, "flashblocks alphanet to be running to act as test candidate favoring acceptance tests' development", "Kurtosis doesn\u2019t currently support the capability of spinning up flashblocks-related devnets.\n\nTherefore, it's worth ensuring having a flashblocks alphanet to direct the local development of acceptance tests to.\n\nThis mostly can be a non-issue considering the current presence of the [flashblocks-alpha](https://github.com/ethereum-optimism/devnets/tree/main/alphanets/flashblocks-alpha) alphanet.\n\nThat being said, it's existing health needs to be re-confirmed to exactly if it's usable or not.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T19:09:08Z", "2025-05-21T21:09:39Z", "2025-05-21T21:09:37Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62n2Aa", 15935, "scr: add tooling to easily add/remove new devnet superchains", "In order to properly test the full end-to-end flow of loading interop depsets from the registry before interop is in production, we need to be able to add devnet chain configs to the registry. Since devnets run within their own superchain, this means we also need to be able to add new superchains (in addition to the existing `mainnet`, `sepolia` and `sepolia-dev-0` ones) to the registry. The definition-of-done for the [interop <> superchain-registry integration workstream](https://www.notion.so/oplabs/Superchain-Registry-Integration-1eff153ee16280e8a0b7dd6e7ed4213d) includes a bullet saying: \"adding and removing superchains from the SR takes less than 20 minutes\". This implies we need some automations.\n\nPerhaps if given a state.json, the [create_config](https://github.com/ethereum-optimism/superchain-registry/blob/main/ops/cmd/create_config/main.go) and [sync_staging](https://github.com/ethereum-optimism/superchain-registry/blob/main/ops/cmd/sync_staging/main.go) commands could be adapted to handle the creation of a new superchain/configs dir when appropriate. I believe currently it won't allow you to add multiple chains at the same time, but we should probably change that so we can add an entire devnet with a multiple-chain interop depset at the same time", "CLOSED", 0, "bitwiseguy", "2025-05-14T18:04:41Z", "2025-05-21T16:14:54Z", "2025-05-21T16:14:54Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62mytC", 15930, "op-devstack: EOAs should refund unused eth after test ends", "This could be useful on long-running sysext networks to avoid depleting the faucet. A `t.Cleanup` in `dsl.*Faucet.Fund` may be sufficient.\n\nForked from discussion [here](https://github.com/ethereum-optimism/optimism/pull/15914#discussion_r2089205780).\n\nh/t @teddyknox ", "OPEN", 0, "joshklop", "2025-05-14T16:05:51Z", "2025-05-23T12:35:53Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62aeQy", 15880, "op-geth: update chain config parsing for interop data", "op-geth does not import scr directly. Rather, it zips up the chain config tomls from a given commit of the scr. After all the chain config tomls include the interop depset data, we should update the zip file used by op-geth. We also need to update op-geth's code that parses the chain config tomls such that it:\n1. has awareness of the `interop_time` hardfork timestamp\n2. has awareness of the interop depset in the chain config, and can populate a depset of 1 when appropriate\n\nFor [2], the code can look something like this:\n```\nif cfg.hardforks.interop_time != nil && cfg.interop_dependencies == nil {\n  cfg.interop_dependencies = new(map[eth.ChainId]StaticConfigDependency)\n  self := StaticConfigDependency{\n    ChainIndex: 0,\n    ActivationTime: cfg.hardforks.interop_time\n  }\n\n  cfg.interop_dependencies[cfg.chainId] = self\n}\n```", "CLOSED", 0, "bitwiseguy", "2025-05-13T15:04:03Z", "2025-05-21T20:41:37Z", "2025-05-21T20:41:37Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62aMHG", 15876, "Interop: op-node prometheus metrics and queries to validate interop upgrade readiness", "# Description\n* op-node and op-supervisor should emit prometheus metrics which will allow operators to query if deployed components are ready for the interop hardfork\n\n# Exit criteria\n* A prometheus metric and a example query on that metric that can be used within monitoring to observe if component is ready for upgrade", "OPEN", 0, "jelias2", "2025-05-13T14:39:29Z", "2025-10-01T14:40:14Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62Zobn", 15874, "[op-conductor-mon] Prefer rollup boost-enabled sequencer election", "A Flashblocks failure mode we need to watch out for is the case where the rollup boost instance of every sequencer fails simultaneously.\n\nTo be able to respond to this scenario in an automated way, we'll want to run at least one backup sequencer that is not configured with rollup boost (just default geth block building). This way, we can fall back to it if all rollup boost-enabled sequencers fail.\n\nHowever if we do this, we should modify conductor's leader election logic such that it prioritizes / prefers rollup boost-enabled sequencers - this will ensure that conductor only selects the non-rollup boost-enabled sequencer as a last resort in case all other sequencers are unhealthy.\n\nNote: this actually would need to be implemented in op-conductor-mon rather than conductor, see [comment](https://github.com/ethereum-optimism/optimism/issues/15874#issuecomment-2894783738).\n\n**Acceptance Criteria**\n- [ ] Short design doc outlining the specific approach\n- [ ] Align on conductor topology - in particular, how many of what sequencer types to run in Labs infra and Sunnyside infra\n- [ ] Implement required changes in conductor\n- [ ] Write op-acceptor tests that verify this failover logic\n\nNote: This is a P0 / blocking capability for the High Availability Interop workstream: https://github.com/ethereum-optimism/optimism/issues/15992", "OPEN", 0, "alfonso-op", "2025-05-13T13:53:35Z", "2025-05-23T12:46:48Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62ZSiq", 15872, "scr: add tests to ensure depset validation is working as expected", "To ensure our depset validation is working, we should add some unit tests with fake chain config .tomls that verify we catch any inconsistencies in depsets", "CLOSED", 0, "bitwiseguy", "2025-05-13T13:24:48Z", "2025-05-21T17:59:13Z", "2025-05-21T17:59:13Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62ZRdK", 15871, "scr: ci validation checks for interop depset consistency", "Whenever any chain config .toml file has a `git diff` from a pr it should trigger a validation that ensures the interop depset is consistent across all chain config .tomls. This means if chainA claims its dependencies are chainA, chainB and chainC, then chainB and chainC must have the same exact depset in their configs. Most chains will just have a depset of 1 (themself)", "CLOSED", 0, "bitwiseguy", "2025-05-13T13:23:18Z", "2025-05-21T17:59:17Z", "2025-05-21T17:59:17Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62ZPWE", 15870, "scr: update chain config .tomls to include interop depset config", "We need to be able to store [this](https://github.com/ethereum-optimism/optimism/blob/develop/op-supervisor/supervisor/backend/depset/static.go#L34-L43) `StaticConfigDependencySet` struct inside the chain config .toml for every chain. Chains that have `interop_time` but no dependencies will have an implied depset of 1 (self) to be populated by op-geth.\n\n## Questions\n1. Will any chains have a non-zero `OverrideMessageExpiryWindow` field? \n    - No, this field should not be included in the chain configs\n2. What `activationTime`/`historyMinTime` should we use for every chain?\n    - `historyMinTime` is being nixed so we can ignore this field\n    - For depsets of 1 (self), no `interop` struct is added to the registry. Instead op-geth will populate the depset of 1 and will set `activation_time = interop_time`\n    - For depsets > 1, `activation_time` MUST be >=  `interop_time`", "CLOSED", 0, "bitwiseguy", "2025-05-13T13:20:49Z", "2025-05-21T17:59:22Z", "2025-05-21T17:59:22Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62Qzy7", 15853, "Runbook Firedrill Exercises", "Requires human intervention, alerts on-call.\n\nThis issue tracks the work to complete [this Interop workstream](https://www.notion.so/oplabs/Runbook-Firedrill-Exercises-1eff153ee1628094a528eeb035db610f).", "OPEN", 0, "alfonso-op", "2025-05-12T18:57:39Z", "2025-05-23T22:42:41Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62QzFE", 15852, "Uniswap Devnet Rehearsals", "This issue tracks the work to complete [this Interop workstream](https://www.notion.so/oplabs/Uniswap-Devnet-Rehearsals-1eff153ee16280a3bfedd28b1c4ddf6b?pvs=25).\n", "OPEN", 0, "alfonso-op", "2025-05-12T18:56:12Z", "2025-05-23T22:42:36Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62Qwex", 15850, "Internal Devnets Rehearsals", "Perform dry-run upgrades on internal devnets to uncover gaps and stabilize the process.\n\nThis issue tracks the work to complete [this Interop workstream](https://www.notion.so/oplabs/Internal-Devnet-Rehearsals-1eff153ee16280569b55edb1b2f8c992).\n\nBelow are the prerequisites to the devnets and the Dod Of done for the devnet rehersal ", "OPEN", 0, "alfonso-op", "2025-05-12T18:51:08Z", "2025-05-23T22:42:51Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62QvnP", 15849, "Kurtosis Interop Support", "Build and maintain a Kurtosis-based multi-chain devnet harness for fast local interop testing.\n\nThis issue tracks the work to complete [this Interop workstream](https://www.notion.so/oplabs/Kurtosis-Interop-Support-1eff153ee1628008beadf3bdd344b6a6).", "OPEN", 0, "alfonso-op", "2025-05-12T18:49:24Z", "2025-05-23T22:41:50Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62QvFa", 15848, "Proxyd Filtering", "Harden the proxy daemon to drop invalid cross chain messages messages efficiently before they reach the sequencer.\n\nThis issue tracks the work to complete [this Interop workstream](https://www.notion.so/oplabs/Proxyd-Filtering-1eff153ee1628093ad93fb2959f4b3ef).", "OPEN", 0, "alfonso-op", "2025-05-12T18:48:20Z", "2025-05-23T22:42:45Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62OigU", 15841, "Test that interop upgrade supports unaligned activation times", "Context: https://discord.com/channels/1244729134312198194/1370571786478948506/1370733023926030397", "OPEN", 0, "teddyknox", "2025-05-12T14:55:34Z", "2025-10-01T14:40:02Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM62NgDS", 15835, "Interop: op-proposer: add rpc to manually trigger proposing", "This helps during testing so we can quickly propose an output root and don't need to manually craft the proposal.", "OPEN", 0, "sebastianst", "2025-05-12T13:31:09Z", "2025-05-19T12:38:46Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM61-WC5", 15821, "Benchmark canonical oracle", "Write a benchmark for executing the canonical block oracle that's used by the op-program. Then run the benchmark on sepolia.\n\nRelates to #15285", "CLOSED", 0, "Inphi", "2025-05-09T19:29:24Z", "2025-05-21T18:21:35Z", "2025-05-21T18:21:34Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM615msE", 15812, "op-node: simplify operation modes, move scheduling in one place", "Implement the [P/PS proposal](https://www.notion.so/oplabs/P-PS-Op-node-driver-1ecf153ee16280978aaad322fb3be9ec): trigger timing solely in one place, simplify operation modes of op-node.\n\n", "CLOSED", 0, "protolambda", "2025-05-09T10:48:01Z", "2025-05-22T16:26:59Z", "2025-05-22T16:26:58Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM61sTup", 15769, "Interop: test and handle sequencing-window expiry", "The op-node needs to be able to go through a sequencing window expiry, without the supervisor being forced to halt or go out of sync.\n\nThis should include:\n- [ ] devstack test (see sub-issue)\n- [ ] Any remaining op-node / op-supervisor changes to better accommodate the sequencing window expiry. Some work has been done here already: https://github.com/ethereum-optimism/optimism/pull/15677\n- [ ] In the test, enable sequencing recovery mode via RPC, and confirm that a new tx can be confirmed and finalized after the sequencing window expiry has been healed.\n\n", "CLOSED", 0, "protolambda", "2025-05-08T08:55:37Z", "2025-05-20T20:42:15Z", "2025-05-20T20:42:15Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM60-1gu", 15667, "Add support for Alphabet and Fast games using OPCM.addGameType", "We rely on the Alphabet and Fast games for fast feedback on running some expensive tests asserting dispute game and challenger logic. With the deprecation of `Deploy.setXGameImplementation`, we need an alternative solution (opcm?) to be able to retain the ability to run these tests.\n\nIn general, OPCM.addGameType should be agnostic of the game type being supported. So long as the game blueprint is known to OPCM, it should happily allow chain operators to add that game type. This will be important later on as we extend the set of game types to Kailua and Succinct games.", "CLOSED", 0, "Inphi", "2025-05-02T16:11:44Z", "2025-05-19T14:47:10Z", "2025-05-19T14:47:08Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM60tR99", 15625, "op-program: Skip consolidation pre-interop hard fork", "When the interop hard fork is not yet active, the consolidation step should not check for any executing messages and instead just move to the final super root using the optimistic block roots from its input transition state).\n\nThis allows the fault proof system to be upgraded prior to the hard fork activating and it will simply prove the addition of each new block for chains in the dependency set without applying the new interop message checks.\n\nGiven the L2Inbox contract won't be deployed prior to the hard fork it is impossible to have any executing messages anyway, but seems safest to explicitly check if the hard fork is active.\n\nEnsure there's an action test added for this pre-activation case as part of this.", "CLOSED", 0, "ajsutton", "2025-04-30T16:09:54Z", "2025-05-19T20:52:03Z", "2025-05-19T20:52:02Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6zdoaT", 15500, "Test reorg of local-safe block with invalid message", "Without prior dependency, make an unsafe block that has an invalid executing message.\n\nThe supervisor here triggers the reorg on the executing side, without change to the initiating side.\n\nThis implies the sequencer is malicious. To cover this in integration, we need the test-sequencer to force in the bad tx.\n\n", "CLOSED", 0, "protolambda", "2025-04-22T12:09:02Z", "2025-05-19T12:28:47Z", "2025-05-19T12:28:47Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6zAgth", 15453, "The \"circular dependency\" problem of L1 contract deployment and rollup config", "I'm documenting this partially for myself because it keeps coming up but I can't find a good summary of it. This is an attempt to distill from the conversation with @ajsutton [here](https://discord.com/channels/1244729134312198194/1346601773128745061/1346946442404827258). \n\nThere is a circular dependency when deploying a new chain:\n1. The rollup config requires addresses of deployed contracts (e.g. SystemConfig)\n2. But those contracts can\u2019t be deployed until the chain config exists.\n \nWithout this deployment data, a valid prestate cannot be generated for a fresh chain. This prevents the OPCM from deploying a chains with the permissionless dispute game as it requires a prestate (and the only way to change the prestate is to deploy a new game impl, so at that point you might as well just use `opcm.addGameType()`).\n\nA possible solution is to simulate `opcm.deploy()` offchain with a given `DeployInput`. Since we use CREATE2, the resulting `DeployOutput` should be deterministic, giving us the required contract addresses ahead of time. This would allow us to generate the config before actually deploying anything, breaking the cycle.\n\nHistorically, this was more difficult because `op-node` relied on the specific L1 block number for the `SystemConfig` deployment, but it may now introspect SystemConfig directly.\n\nThe other blocker to having a known prestate without deploying L1 contracts is the generation of the L2 Genesis state. This would be resolved by the [Standard L2 Genesis](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/standard-l2-genesis.md#L1) project (which IMO is more aptly named Multichain Prep L2).", "OPEN", 0, "maurelian", "2025-04-17T19:12:13Z", "2025-05-23T20:53:55Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6xo4OC", 15297, "op-node/p2p: ensure all block topics are configured in the topic score param map", "The op-node is only configuring topic scoring on the V1 block topic:\n\nhttps://github.com/ethereum-optimism/optimism/blob/b4070c5244c8c7ba6d37b9e31fa7d43ada25070d/op-node/p2p/peer_params.go#L48-L66\n\nSee the blocksTopicV1 method: \nhttps://github.com/ethereum-optimism/optimism/blob/f76ef1f2a010a1860423f703eb776d5ae9506049/op-node/p2p/gossip.go#L69-L71\n which only returns the v1 blocks topic\n\nIdeally there could be a test that checks that all blocks topics are configured in the topic score param map. Maybe a good way would be to aggregate available blocks topics in a method [next to their function definitions](https://github.com/ethereum-optimism/optimism/blob/develop/op-node/p2p/gossip.go#L69-L83) that can be iterated over in the test. (as in, for each blocks topic, validate that a topic score params is set in the map).\n\nThis way when a new blocks topic is added, the test would fail without supporting a topic score param config.", "CLOSED", 0, "geoknee", "2025-04-08T16:10:36Z", "2025-05-19T09:50:26Z", "2025-05-19T09:50:26Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6roLIx", 14530, "Reorg testing checklist", "\nSee sub-issues.\n\nNote: devnet testing is blocked by op-test-sequencer, to force in the needed reorgs.\n\nTable: Reason for invalidation vs. State of reorged block at time of reorg\n\n\nHead affected by reorg (not exclusively) | L1 reorg | Cross invalidation | Sequencing window expiry | Sequencer equivocation (either local or cross)\n--------------------------------------- | -------- | ------------------ | ----------- | ---\nUnsafe                                  | \u00a0#15332, #15334, #16061  |   resolves only after batch data                 | #15769      | #15330\nCrossUnsafe                             | \u00a0L1 info might break, but only resolved after batch data        | \u00a0  cannot happen                | #15769      |  #15330 \nLocalSafe                               | \u00a0#15331  | #15500             | #15769      |  #15330 \nCrossSafe                                    | \u00a0#15333  | \u00a0 cannot happen                 | #15769      | #15499", "CLOSED", 0, "protolambda", "2025-02-25T19:55:48Z", "2025-10-01T14:38:49Z", "2025-10-01T14:38:49Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6qGc9Z", 14372, "SuperchainERC20: Prevent Initial Supply Duplication Across Networks", "## **Is your feature request related to a problem? Please describe.**  \nThe **SuperchainERC20** contract currently deploys with the same `initialSupply` across all Superchain networks. This leads to **unexpected supply inflation**, where if a user sets `initialSupply = 1,000,000` on one network, the total supply across all networks becomes `network_count * 1,000,000`.  \n\nThis is problematic because:  \n- It **breaks the expected behavior** of cross-chain tokens, where minting and burning should ensure a unified total supply across all networks.  \n- The **supply is not controlled**, causing economic inconsistencies in tokenomics.  \n- The expected behavior is that a token should start with supply **only on the native chain** and have a `0` supply on all other chains until bridged.  \n\n## **Describe the solution you'd like**  \nTo prevent unintended inflation, I propose modifying the **SuperchainERC20** constructor to include a `nativeChainId` parameter.  \n\n### **Solution**  \n1. **Introduce a `nativeChainId` parameter** in the constructor.  \n2. **Only mint `initialSupply` on the native chain**.  \n3. **Other chains start with `0` supply**, and minting occurs only through bridging.  \n\n### **Code Example:**  \n```solidity\nconstructor(  \n    string memory name,  \n    string memory symbol,  \n    uint256 initialSupply,  \n    uint256 nativeChainId  \n) ERC20(name, symbol) {  \n    if (block.chainid == nativeChainId) {  \n        _mint(msg.sender, initialSupply);  \n    }  \n}  \n```\n\n- This ensures that `initialSupply` is **only created once** on the native chain.  \n- On all other networks, the **initial supply is 0**, and cross-chain bridge transactions will mint new tokens as needed.  \n\n## **Describe alternatives you've considered**  \n1. **Manually burning tokens on extra networks**  \n   - This is inefficient and requires constant monitoring.  \n   - Users may forget or fail to burn tokens, leading to supply inconsistencies.  \n\n2. **Using a global registry to track deployments**  \n   - More complex and introduces additional overhead.  \n   - Would require an external contract or centralized tracking system.  \n\n3. **Enforcing mint/burn strictly via bridge mechanisms**  \n   - The best long-term solution, but it requires deeper integration with Superchain bridge logic.  \n\n## **Additional Context**  \n- This issue affects **all Superchain networks**, leading to **unexpected inflation** of deployed tokens.  \n- Implementing this fix ensures that **total supply remains predictable and controlled**.  \n- This change aligns **SuperchainERC20** with proper **cross-chain asset management best practices**.  \n\nWould love to hear feedback and thoughts from the team on this proposal! \n", "OPEN", 0, "codeesura", "2025-02-14T14:07:10Z", "2025-05-23T22:43:46Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6phzhb", 14307, "op-supervisor: Support cascading block invalidations", "Need to update op-supervisor to correctly invalidate blocks containing executing messages which originally had dependencies satisfied, but then had those dependencies removed when another chain had a deposit-only block inserted instead.\n\nTestInteropFaultProofs_CascadeInvalidBlock from https://github.com/ethereum-optimism/optimism/pull/14266 covers this case.\n\nTracking supporting this in op-program in https://github.com/ethereum-optimism/optimism/issues/14306 which includes an efficient way to check these cascading dependencies, though not sure it applies to op-supervisor's particular situation.", "CLOSED", 0, "ajsutton", "2025-02-11T03:54:16Z", "2025-05-20T08:50:22Z", "2025-03-21T14:10:29Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6pcPvv", 14272, "interop: Metrics and Dashboards for Interop stable devnet", "- Evaluate metrics and dashboards used to evaluate generate network stability\n- Create Stable Devnet specific Dashboard with those metrics for the SD\n  - Include CrossUnsafe/CrossSafe heads to chart\n  - Otherwise should be similar to the important general network dashboards\n- Add a Dashboard for interop-specific things", "CLOSED", 0, "unknown", "2025-02-10T15:16:54Z", "2025-05-20T08:50:21Z", "2025-03-18T22:21:34Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6pDJg4", 14225, "interop: Kurtosis devnet bug-bash", "We need to play-test / bug-bash the Interop kurtosis-devnet more, and identify issues that make it difficult to use or unstable.\n", "CLOSED", 0, "protolambda", "2025-02-06T17:33:46Z", "2025-05-20T08:50:20Z", "2025-04-10T11:10:17Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6onNFI", 14129, "interop: test-sequencing milestone 2 (optional): productionize", "See https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md#milestone-2-production\n\nThis includes using the op-node file-based sequencer-persistence to the full-sequencer config and start function.\n", "OPEN", 0, "protolambda", "2025-02-04T00:30:43Z", "2025-10-01T14:38:05Z", null, "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6oCgtY", 14053, "Interop: testing Go helper-funcs / DSL", "- syntax to build the instruction to above contract, and format it as a signed tx ready to submit.\n    - [x] contract instruction part \u2192 contract call.  Also see #14049 \n        - could use multicall contract, to run multiple instructions in the same tx.\n    - [x] fee payment part \u2192 can be generous with max-fee, simple to include.\n        - May be interesting to make less simple to include later, to stress the sequencer.\n            - pre-processing should be prioritized likely, but how big is the load? Does it withstand with or without prioritization implemented?\n- [ ] ~~interaction to get the tx included in a block \u2192 API calls, with some nice client bindings~~ see op-test-sequencer\n- [ ] ~~interaction to get the tx submitted to regular sequencer~~\n- ~~inspection of post-state:~~ (remainder moved to alpha tx-plan issue)\n    - [ ] inclusion / receipt data of a tx \u2192 DSL to await confirmation / rejection\n    - [ ] supervisor result \u2192 the dependencies we created, query supervisor API to see if e.g. the block becomes cross-safe.\n\n", "CLOSED", 0, "protolambda", "2025-01-29T20:31:27Z", "2025-05-20T08:50:20Z", "2025-02-26T20:05:18Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6nFL4a", 13907, "op-challenger: Load shared DisputeGameFactory address from superchain registry when multiple networks supplied", "Validate all networks use the same shared dispute game factory.", "CLOSED", 0, "ajsutton", "2025-01-22T01:28:59Z", "2025-05-22T14:49:28Z", "2025-05-22T14:49:27Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6mLUA0", 13760, "Interop: Add more metrics to op-supervisor", "We have support for metrics but don't utilize them well yet. We should think of and add reasonable metrics that we can use to monitor the health and status of the supervisor.", "CLOSED", 0, "unknown", "2025-01-14T18:20:03Z", "2025-05-20T08:50:19Z", "2025-02-04T22:38:44Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6lK5G9", 13595, "interop: Walkback on reset failure", "From @axelKingsley \n\n> when the node fails to accept a reset signal, the Supervisor should try a deeper reset, iteratively\n\n> \"Managed Mode\" on the node needs to know if there's a currently ongoing reset, denying new reset signals if one is already going. It can do this by tracking the reset events ", "CLOSED", 0, "unknown", "2025-01-06T17:17:44Z", "2025-05-20T08:50:19Z", "2025-03-05T17:12:37Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6cLFKN", 12721, "Interop: enable cycle checks in supervisor.", "The `HazardCycleChecks` function should be called by the `CrossUnsafeUpdate` and `scopedCrossSafeUpdate` functions.\r\nIdeally with a unit-test on the update functions that the cycles are indeed being checked.\r\n", "CLOSED", 0, "protolambda", "2024-10-29T05:12:14Z", "2025-05-20T08:50:18Z", "2024-10-29T16:26:41Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDODjvEJM6cAbCQ", 12682, "Interop: message dependency cycle detection", "The cross-safe-head verification (See issue #12075 ) needs to detect cyclic dependencies, to prevent messages from assuming state that's not yet there.\r\nThis feature is critical to intra-block messaging safety.\r\n", "CLOSED", 0, "protolambda", "2024-10-28T05:38:57Z", "2025-05-20T08:50:18Z", "2024-10-28T17:09:49Z", "ethereum-optimism/optimism", "2025-08-31 04:57:36"]
["I_kwDOKSJyfM64CfK8", 828, "Decrease claim amounts for superchain faucet", "Lower from 0.1 to 0.05", "CLOSED", 0, "jvmi7", "2025-05-23T22:33:01Z", "2025-05-29T22:45:31Z", "2025-05-29T22:45:31Z", "ethereum-optimism/ecosystem", "2025-08-31 04:58:42"]
["I_kwDOKSJyfM6v3Km-", 709, "Create a self-serve deals section PR worflow for external contributors in the Dev console interface", "", "CLOSED", 0, "jvmi7", "2025-03-26T18:27:46Z", "2025-05-27T21:55:25Z", "2025-05-27T21:55:25Z", "ethereum-optimism/ecosystem", "2025-08-31 04:58:42"]
["I_kwDOL-xLQ864MK3B", 378, "[acceptance] RRC - Specific Criteria", "Update Release Readiness Checklist with more specific gating criteria for promotions (metrics + duration of evaluation)", "CLOSED", 0, "scharissis", "2025-05-26T06:43:00Z", "2025-05-31T00:30:34Z", "2025-05-31T00:30:33Z", "ethereum-optimism/infra", "2025-08-31 04:58:43"]
["I_kwDOL-xLQ863ntT7", 374, "op-acceptor: Output logs to the console and enable extra logs for tests when running in CI", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nWe currently need to SSH into the container in order to see the test logs. This means that debugging the test logs for op-acceptor is very cumbersome on CI as we can't easily figure out what happened.\nAdditionally we are only able to see the `info` level of the test logs which means we may be missing critical information.\n\n**Describe the solution you'd like**\nWe should enable op-acceptor to output the logs to the console on CI and additionally enable custom log levels for the tests.\n\n**Describe alternatives you've considered**\nSSHing into the container, though it may not be straighforward for everybody when dealing with multiple runs.\n", "CLOSED", 0, "serpixel", "2025-05-21T15:27:53Z", "2025-05-27T17:34:09Z", "2025-05-27T17:34:09Z", "ethereum-optimism/infra", "2025-08-31 04:58:43"]
["I_kwDOL-xLQ863deQ3", 370, "[acceptance] op-acceptor crashlooping in k8s", "op-acceptor pod keeps getting restarted on the persistent devnets and we don't know why.\n\nIt was running fine when using the `base` gate but not now that we've swapped to `holocene` (which adds some tests).\n\nWe need to get it healthy again and get the [total tests running](https://optimistic.grafana.net/d/6348708f-659c-49ca-807e-c76ae5dcaa35/acceptance-testing?var-interval=7d&orgId=1&from=now-30d&to=now&timezone=browser) back up.", "CLOSED", 0, "scharissis", "2025-05-20T18:56:18Z", "2025-05-26T07:16:08Z", "2025-05-26T07:16:07Z", "ethereum-optimism/infra", "2025-08-31 04:58:43"]
["I_kwDOL-xLQ86y5QXY", 286, "[acceptance] Test: base; transactions work", "Implement \"blocks\" from this list [here](https://www.notion.so/oplabs/Acceptance-Criteria-176f153ee162802db9aafd717078a2f4?pvs=4#1adf153ee16280709913e8c31d0d0e41).\n\nConfirm we can send transactions on L2.\n\n```\ncast send --rpc-url $DEVNET_PUBLIC_RPC_URL --value 0.01ether --private-key $USER_PRIVATE_KEY $DEST_ADDR\ncast balance --rpc-url $DEVNET_PUBLIC_RPC_URL $DEST_ADDR\n```", "CLOSED", 0, "scharissis", "2025-04-17T04:07:06Z", "2025-05-29T13:05:10Z", "2025-05-29T13:05:09Z", "ethereum-optimism/infra", "2025-08-31 04:58:43"]
["I_kwDOL-xLQ86y5P9h", 285, "[acceptance] Test: base; increasing blocks", "Implement \"blocks\" from this list [here](https://www.notion.so/oplabs/Acceptance-Criteria-176f153ee162802db9aafd717078a2f4?pvs=4#1adf153ee16280709913e8c31d0d0e41).\n\nConfirm public rpc block number is increasing.\n\n```\ncast block-number --rpc-url $DEVNET_PUBLIC_RPC_URL\n```", "CLOSED", 0, "scharissis", "2025-04-17T04:05:31Z", "2025-05-30T21:58:10Z", "2025-05-30T21:58:10Z", "ethereum-optimism/infra", "2025-08-31 04:58:43"]
["I_kwDOL-xLQ86wroFu", 270, "[acceptance] Test: base; geth / reth divergence acceptance test", "It's important that we continue taking steps to treat reth at parity and with the same level of support as geth, especially as an indicator of devnet health.\n\nTowards this end, we should add a devnet acceptance tests that checks for geth / reth divergence.\n\n@yashvardhan-kukreja has previously implemented divergence detection in replica-healthcheck, so we should be able to leverage this work to implement the test.\n\nThis was requested by @tynes.", "CLOSED", 0, "alfonso-op", "2025-04-01T18:13:16Z", "2025-05-28T21:26:21Z", "2025-05-28T21:26:21Z", "ethereum-optimism/infra", "2025-08-31 04:58:43"]
["I_kwDOL-xLQ86qR-DM", 185, "[nat] faster test discovery", "Find tests faster.\nPerhaps cache paths as we search.", "CLOSED", 0, "scharissis", "2025-02-17T05:49:51Z", "2025-05-26T07:09:50Z", "2025-05-26T07:09:49Z", "ethereum-optimism/infra", "2025-08-31 04:58:43"]
["I_kwDOI7W0xc6inZfl", 1133, "Migrate OVM1 Data to New Schema / Folder", "Legacy OVM1 data (before the current OP Mainnet Chain) is necessary for usage and economics. Legacy aggregate data from Dune lives in \n\n`oplabs-tools-data.api_table_uploads.dune_ovm1_daily_data`", "OPEN", 0, "MSilb7", "2024-12-09T20:51:39Z", "2025-05-26T01:47:26Z", null, "ethereum-optimism/op-analytics", "2025-08-31 04:58:43"]
["I_kwDOKIwiaM64pyEp", 1634, "[DOCS] Dune query method for accessing pre-regenesis history is broken", "The current method for [querying pre-regenesis history](https://docs.optimism.io/operators/node-operators/management/regenesis-history) on Dune appears to be no longer working. It might require an update to the query logic. I have forked and modified a query as an example: https://dune.com/queries/5201155\n\ntest example : 0xFaec9e70Cba0b0f174CbAb4B1c19b6CB7CfCA25E", "OPEN", 0, "opfocus", "2025-05-28T16:42:51Z", "2025-05-28T16:48:53Z", null, "ethereum-optimism/docs", "2025-08-31 04:58:45"]
["I_kwDOKIwiaM64QJYw", 1627, "[DOCS] Add PR title", "<!-- please fill out the description and acceptance criteria to the best to your ability. While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description \n<!-- Write a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand-new docs page? -->\n\n## Acceptance criteria\n<!-- Clearly list out the definition of done. -->\n\n## User stories\n<!-- User stories that illustrate the benefits of this issue. For example, this documentation improvement will allow user X to be able to Y. -->\n\n\n## Resources and support\n<!-- Provide additional documentation, context, and subject matter experts to help us complete this issue. -->\n\n## Action items\n<!-- Clear steps to take to complete this issue -->\n", "CLOSED", 0, "sokdara420", "2025-05-26T13:31:13Z", "2025-05-28T15:51:09Z", "2025-05-28T15:51:09Z", "ethereum-optimism/docs", "2025-08-31 04:58:45"]
["I_kwDOLB-lzc64rp_g", 713, "RPC: `optimism_dependencySet` Spec", "Need to add a spec for what is implemented in https://github.com/ethereum-optimism/optimism/pull/16117, the `optimism_syncStatus` RPC endpoint on the `op-node`", "OPEN", 0, "tynes", "2025-05-28T20:14:50Z", "2025-05-28T20:14:50Z", null, "ethereum-optimism/specs", "2025-08-31 04:58:45"]
["I_kwDOLB-lzc6z3oGf", 682, "Add workflow for checking line width", "Add lint workflow for ensuring ~~max~~ line width is same for all files to run on PR. Currently lines 120 or less are accepted. This pr will likely lead to large diffs to get this check to pass, these lint fixes should be addressed in many prs referencing this issue with smaller scope and not whole codebase at once pls.\n", "OPEN", 0, "emhane", "2025-04-24T15:44:02Z", "2025-05-27T12:16:43Z", null, "ethereum-optimism/specs", "2025-08-31 04:58:45"]
["I_kwDOJ_r-bs64_7uF", 1044, "ops: add a test to check that we can invoke `op-deployer` as a binary", "Make the test pass in CI by:\n* creating a temporary directory for the op-deployer binary\n* have the `deployer` package read that in as an env var\n* have the test invoke the binary and check that it responds as expected", "CLOSED", 0, "geoknee", "2025-05-30T17:10:15Z", "2025-05-30T20:19:52Z", "2025-05-30T20:19:52Z", "ethereum-optimism/superchain-registry", "2025-08-31 04:59:16"]
["I_kwDOJ_r-bs641wGM", 1040, "\ud83d\udd04 Chain Registry Changes - 2025-05-29", "## \ud83d\udd04 Chain Changes in Superchain Registry\n\n### \u2796 Removed Chains\n\n- \u274c `test-chain` removed from **mainnet** network\n\n---\n\ud83d\udcca **Total changes:** 1\n\ud83d\udd17 **CircleCI Build:** [View Build](https://circleci.com/gh/ethereum-optimism/superchain-registry/100778)\n\ud83d\udd17 **Commit:** [`fbc9861`](https://github.com/ethereum-optimism/superchain-registry/commit/fbc9861ad7afacb5bf2276e6671e93a65595f409)\n\n---\n*This issue was automatically created by CircleCI when chain changes were detected.*", "CLOSED", 0, "OptimismBot", "2025-05-29T18:09:53Z", "2025-05-29T18:13:55Z", "2025-05-29T18:13:55Z", "ethereum-optimism/superchain-registry", "2025-08-31 04:59:16"]
["I_kwDODjvEJM65Iubc", 16215, "\ud83d\ude80 [Community Tool] Superchain Token Explorer - Multi-chain discovery for OP Stack ecosystem", "# \ud83d\ude80 Superchain Token Explorer - OP Stack Ecosystem Infrastructure\n\n## \ud83c\udf10 Project Overview\nWe're building a token discovery platform specifically designed for the **Optimism Superchain ecosystem**. Currently in MVP stage with full UI infrastructure and seeking community feedback.\n\n## \ud83d\udd17 Links\n- **Live Demo:** https://base-token-explorer.vercel.app/\n- **GitHub:** https://github.com/serayd61/base-token-explorer\n\n\n## \u2705 What's Working Now (MVP)\n- **\ud83c\udf10 Multi-chain UI infrastructure** for 7+ OP Stack chains\n- **\ud83d\udd35 Native OP Stack integration:** Base, OP Mainnet, Mode, Zora, Fraxtal, World Chain, Lisk\n- **\ud83d\udcf1 REST API architecture** with chain-specific responses\n- **\ud83c\udfa8 Superchain ecosystem branding** and user experience\n- **\ud83d\udd27 Developer-ready codebase** (Next.js 15, TypeScript, Python backend)\n\n## \ud83d\udea7 In Development\n- **\u26a1 Real-time block scanning** (architecture ready, implementing Web3 integration)\n- **\ud83d\udca7 Live LP detection** (Uniswap V2/V3 factory contracts)\n- **\ud83d\udcca DexScreener API integration** (for price data)\n- **\ud83d\udd0d Contract deployment tracking** (event listening setup)\n\n## \ud83c\udfaf Vision & Ecosystem Value\n- **Unified Superchain discovery:** One tool for all OP Stack chains\n- **Developer infrastructure:** API-first approach for ecosystem builders\n- **Community-driven:** Open source with contribution-friendly architecture\n- **Grant application ready:** Built specifically for OP Atlas consideration\n\n## \ud83d\udee0\ufe0f Technical Foundation\n- **Frontend:** Next.js 15, TypeScript, Tailwind CSS\n- **Backend:** Python, Web3.py multi-chain scanner (in development)\n- **Architecture:** Microservices ready for scaling\n- **Deployment:** Vercel-compatible, Docker-ready\n\n## \ud83e\udd1d Seeking Community Input\nWe'd love feedback on:\n- **Priority features** for OP Stack ecosystem\n- **Integration opportunities** with existing Optimism tooling\n- **Community needs** for token discovery\n- **Technical architecture** suggestions\n- **Grant application guidance**\n\n## \ud83d\ude80 Next Milestones\n1. **Week 1-2:** Live blockchain scanning implementation\n2. **Week 3-4:** DexScreener integration and real data\n3. **Month 2:** Advanced analytics and notifications\n4. **Month 3:** Mobile app and API expansion\n\n## \ud83d\udca1 Why Share Early?\nWe believe in **building with the community, not just for it**. This early preview demonstrates:\n- Commitment to Superchain ecosystem\n- Solid technical foundation\n- Clear vision and roadmap\n- Professional development approach\n\n## \ud83c\udfc6 Grant Application\nThis project is being developed specifically for **OP Atlas grant consideration** as a community contribution to the Superchain ecosystem.\n\n**We're building the infrastructure that the Superchain ecosystem needs!** \ud83c\udf08\n\n---\n\n**Tags:** #Superchain #OP-Stack #MVP #CommunityFeedback #DeveloperTools", "OPEN", 0, "serayd61", "2025-05-31T21:43:03Z", "2025-05-31T22:06:56Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM65CO1-", 16213, "op-service: RPC call context utils", "Idea to maybe radically change our test flakes: instead of retry-ing on the RPC caller layer, we can retry on the RPC layer itself.\nAnd instead of applying a blanket global 10 second timeout across all RPC usage, we can allow modification.\n\nWe could generalize RPC things like retries and timeout choices by passing the strategy, not the action, via context.\n\nSo not like:\n```\nctx = context.WithTimeout(ctx, timeout) // context.Context, time.Duration\n```\n\nBut more like:\n```\nfn := func(ctx context.Context) context.Context {\n  return context.WithTimeout(ctx, timeout)\n}\nctx = client.WithTimeoutFn(ctx, fn)`\n```\nSo that the `client` RPC package can then identify the timeout strategy, and apply it.\n\nServices internally, and test DSL (!!!) can be set up with root contexts that have a default timeout and retry strategy.\nSo all DSL implementations won't have to be wrapping all RPC calls in `retry.DoX` statements anymore, but instead just annotate the context once, with a good test default, for all future interactions.\n\nAnd when needed, simply by wrapping a new strategy onto the context, calls can be customized when needed (e.g. long-running RPC calls to not time out, or particular retries to happen).\n\nThings I would like to instrument this way:\n- timeouts\n- retries\n  - upon any error, or specific RPC error codes\n  - customize backoff strategy\n  - customize jitter\n\nNote: logging and metrics are better suited to be applied via the RPC tracer functionality, since they do not modify behavior, and need to inspect the error code and have access to the raw JSON.\n", "OPEN", 0, "protolambda", "2025-05-30T22:09:45Z", "2025-10-01T14:40:32Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM65AsKL", 16199, "kurtosis-devnet: CL nodes wrongly tagged as \"http\"", "Root cause:\noptimism-package labels the port \"http\"\n\nImpact:\n\nhttps://github.com/ethereum-optimism/optimism/blob/41036a481e0184bd26ffe25e5de4299babd73ed9/op-devstack/sysext/l2.go#L96 -> workaround in place\n\n", "OPEN", 0, "sigma", "2025-05-30T18:38:10Z", "2025-05-30T20:57:36Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM65AB8w", 16193, "scr: build deployer package wrapper around op-deployer binaries", "We need to support the following versions of op-deployer within the superchain-registry:\n* op-deployer/v0.0.x\n* op-deployer/v0.2.x\n* op-deployer/v0.3.x\n* op-deployer/v0.4.x\n\nTo do this, we need to be able to invoke different binaries of op-deployer instead of importing op-deployer as a go library from the monorepo. This will allow us to properly process incoming state.json files (for devnets or prod chains) from any of the ", "CLOSED", 0, "bitwiseguy", "2025-05-30T17:23:47Z", "2025-05-30T17:24:09Z", "2025-05-30T17:24:08Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM64nusr", 16145, "op-geth: update depset structs for new schema", "Now that https://github.com/ethereum-optimism/optimism/pull/16123 is merged and changes the depset schema, we should adapt the op-geth code so that it uses the same schema", "CLOSED", 0, "bitwiseguy", "2025-05-28T13:33:21Z", "2025-05-28T18:02:02Z", "2025-05-28T18:02:02Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM64ntAq", 16144, "scr: update depset structs/validation for new schema", "Now that https://github.com/ethereum-optimism/optimism/pull/16123 is merged and changes the depset schema, we should adapt the scr code so that it uses the same schema", "CLOSED", 0, "bitwiseguy", "2025-05-28T13:31:00Z", "2025-05-28T15:28:23Z", "2025-05-28T15:28:23Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM64k_nc", 16141, "op-node: Let sync-start not cross into Interop activation", "Op-node's sync-start algorithm needs to be made aware of Interop activation, since it's not responsible for resets post-Interop, only pre-Interop.", "OPEN", 0, "sebastianst", "2025-05-28T09:35:34Z", "2025-05-28T09:35:34Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM64k1wt", 16140, "Interop: Remove anchor point RPC", "In https://github.com/ethereum-optimism/optimism/pull/16008 the anchor block RPC isn't used any more, but the database is initialized from the genesis data, if Interop is active at genesis, or the Interop activation block received by the supervisor.\n\nSo we can remove the anchor point RPC from specs and code.", "OPEN", 0, "sebastianst", "2025-05-28T09:22:37Z", "2025-05-29T14:24:03Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM64TwHJ", 16121, "op-contracts: compilation error in `interfaces/L1/IL1CrossDomainMessengerV160.sol`", "Came across a compilation error while trying to flatten the entire contracts codebase into one file:\n\n```\nError: Source \"interfaces/L1/IOptimismPortal.sol\" not found: File not found. Searched the following locations: \"\".\n --> interfaces/L1/IL1CrossDomainMessengerV160.sol:6:1:\n  |\n6 | import { IOptimismPortal } from \"interfaces/L1/IOptimismPortal.sol\";\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nhttps://github.com/ethereum-optimism/optimism/blob/ec05937c623150d402689fa060e5814190ff7db6/packages/contracts-bedrock/interfaces/L1/IL1CrossDomainMessengerV160.sol#L6\n\nIt looks like this change is/was not mirrored to the interface https://github.com/ethereum-optimism/optimism/pull/13489: https://github.com/ethereum-optimism/optimism/blob/52100a6a0020a97ac4de51fff33545238996029d/packages/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol#L16", "CLOSED", 0, "DaniPopes", "2025-05-26T23:16:35Z", "2025-05-26T23:20:13Z", "2025-05-26T23:20:13Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM63-9Cq", 16102, "Update acceptance-tests-pr CI job to correctly handle forked PRs", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\nForked PRs, such as https://github.com/ethereum-optimism/optimism/pull/15987, are not handled well by the acceptance-tests-pr CI job, specifically the check-for-pr [step fails](https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/90509/workflows/8385d9e2-7d06-45aa-93e1-55fa9be28e35/jobs/3541417), with the error `This is not a pull request. Exiting with error.`.\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n1. open a forked PR\n2. authorize the PR with `/ci authorize <commit hash>`\n3. See the acceptance-tests-pr CI job fail\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\nAcceptance tests should run against forked PRs if they are properly authorized.", "CLOSED", 0, "teddyknox", "2025-05-23T15:18:43Z", "2025-05-27T08:16:35Z", "2025-05-27T08:16:35Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM630bhk", 16083, "interop: simplify the depset config", "- Remove redundant timestamps from the dependency set config. Now that we have the full config set, complementing the depset, we have the activation timestamp to work with. The initial set of interop chains thus does not have to specify dependency-set timestamps.\n- Infer the chainIndex, and rename it to chainCode: most chain IDs fit in 31 bits, and should just be used as the chainCode. Only when the chainID is too large then we need to declare a shorter alias (such that chain DBs / configs can be consistent across instances, for easy copying/replication/backups).\n\n", "CLOSED", 0, "protolambda", "2025-05-22T16:43:02Z", "2025-05-27T18:59:01Z", "2025-05-27T18:59:01Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM63w7iG", 16075, "interop: contracts: remove useInterop from L2Genesis.s.sol", "- Change the `L2Genesis.s.sol` script to insert the interop predeploys if, and only if:\n  - The interop fork is active (just like the fork checks of holocene/isthmus/etc.)\n  - Some special flag is set that the cross-l2-inbox may be initialized at genesis. We do not want the inbox contract to be active when the chain only upgraded to interop and has an empty dependency set.\n    - Note: unlike `useInterop` , the flag should only apply to the inbox precompile proxy state, to match the upgrade-activation logic.\n- Remove `useInterop` from the opcm Go struct that feeds into the `L2Genesis.s.sol` execution, and replace it with above mentioned flag, here:\nhttps://github.com/ethereum-optimism/optimism/blob/12c5398a1725a2aafc3e7abb0711cf761a2b20b1/op-deployer/pkg/deployer/pipeline/l2genesis.go#L96\n\n", "CLOSED", 0, "protolambda", "2025-05-22T11:31:55Z", "2025-05-29T23:00:49Z", "2025-05-29T23:00:49Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM63qN-_", 16062, "Add ability to set `opcm.l1ContractsRelease()` when deploying from local artifacts", "In order to release new L1 contracts, an OPCM and implementations must be deployed using `op-deployer bootstrap implementations`. \n\nIn this workflow, the `opcm.l1ContractsRelease()` is set to `dev` unless the `--artifacts-locator` value is a `tag://` ([ref](https://github.com/ethereum-optimism/optimism/blob/78cf366b641e3d59fd6c34516055781040db8500/op-deployer/pkg/deployer/bootstrap/implementations.go#L73-L77)).\n\nCurrently the only valid tags are:\n\n```\n./bin/op-deployer bootstrap implementations --artifacts-locator tag://op-contracts/v4.0.0-rc.6\nApplication failed: failed to populate config: failed to set field ArtifactsLocator: unsupported tag: op-contracts/v4.0.0-rc.6\nValid tags are:\n  op-contracts/v1.6.0\n  op-contracts/v1.7.0-beta.1+l2-contracts\n  op-contracts/v1.8.0-rc.4\n  op-contracts/v2.0.0-rc.1\n  op-contracts/v3.0.0-rc.2\n```\n\nThus in order to deploy an OPCM with a proper `l1ContractsRelease` string, one must edit the go code to replace `dev` with the desired release.", "CLOSED", 0, "maurelian", "2025-05-21T20:08:04Z", "2025-05-28T04:06:38Z", "2025-05-28T04:06:38Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM63dgdN", 16035, "op-deployer: ensure depsets are included in state.json", "In order for superchain-registry to properly construct new chain configs with interop details from the state.json input, the state.json must include all relevant depset information. There is already a field in the state struct for [InteropDepSet](https://github.com/ethereum-optimism/optimism/blob/develop/op-deployer/pkg/deployer/state/state.go#L41).\n\nOpen questions:\n1. Are users expected to define depsets in their intent.toml, which then gets propagated into the state.json? Or is there another way the depset is defined? Perhaps we should just infer all chains in the state.json are part of the same depset if the `useInterop` flag is set?", "CLOSED", 0, "bitwiseguy", "2025-05-20T19:00:41Z", "2025-05-28T16:31:10Z", "2025-05-28T16:31:09Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM63Qc9K", 16006, "op-e2e: Interop upgrade action test", "", "CLOSED", 0, "teddyknox", "2025-05-19T17:23:28Z", "2025-05-27T16:21:13Z", "2025-05-27T16:21:13Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM63NOSy", 15999, "Contract Acceptance Tests: Implementation based on abigenv2 for `Call` interface", "An implementation using abigenv2 to turn structs easily into bindings by setting the struct fields to functions that produce those `Call` objects.", "CLOSED", 0, "pcw109550", "2025-05-19T12:36:53Z", "2025-05-27T22:29:42Z", "2025-05-27T22:29:42Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62y4PY", 15964, "Integrate fault proof verification into the overall end to end upgrade test", "Integrate the interop proofs validation into the end to end upgrade test created as part of https://www.notion.so/oplabs/End-to-End-Upgrade-Test-Happy-Path-1eff153ee1628037a8f4d4cf295332a2?pvs=4", "CLOSED", 0, "ajsutton", "2025-05-15T16:21:43Z", "2025-05-28T20:40:45Z", "2025-05-28T20:40:45Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62qAIF", 15949, "Kurtosis devnet for interop migrated chains", "The existing [interop kurtosis devnet](https://github.com/ethereum-optimism/optimism/blob/develop/kurtosis-devnet/interop.yaml) is not properly setup for interop fault proofs. This needs to be updated, via `OPCM.migrate`, to finalize the proofs chain setup.\n\nOnly then can we run post-interop acceptance tests for proofs.\n\nThe requirements are [here](https://www.notion.so/oplabs/U17-Proof-Upgrade-1eff153ee16280069c19fcae5c86747d?pvs=4#1f5f153ee1628007921ffe4a429b6cbe).", "OPEN", 0, "Inphi", "2025-05-14T23:14:06Z", "2025-05-28T19:15:00Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62qAFT", 15947, "Kurtosis devnet for pre-interop chains", "Kurtosis needs to support a devnet that contains two isthmus chains at genesis, without an interop activation time. The chains must be setup for Permissionless FPs.\nThis devnet will be used to run [pre-interop readiness acceptance tests](https://github.com/ethereum-optimism/optimism/tree/develop/op-acceptance-tests/tests/isthmus/preinterop).\n\nThere should be two kurtosis devnets:\n\n- Pre-interop for a single chain with `OPCM.migrate`\n- Pre-interop for two chains with `OPCM.migrate`\n\n\nThe requirements are [here](https://www.notion.so/oplabs/U17-Proof-Upgrade-1eff153ee16280069c19fcae5c86747d?pvs=4#1f4f153ee16280839a71f3540dc46387).", "OPEN", 0, "Inphi", "2025-05-14T23:13:58Z", "2025-05-28T19:14:56Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62o_ve", 15941, "Interop Load Testing", "# Motivation\n\nWe need to identify DoS weaknesses possibly introduced by the interop protocol components.\n\n# Method\n\nTo measure the limits of the interop implementation, we need a comprehensive worst-case benchmark. In this case, the benchmark will take the form of a single NAT load test that exercises the system in every conceivably relevant way.\n\n- Multiple EOAs\n- Spam initiating messages of various sizes\n- Spam valid executing messages of various sizes (some massive msgs, some txs with lots of tiny msgs)\n- Spam invalid executing messages. Every combination of invalid `Identifier`s should be attempted.\n\nWe can write the test in such a way that it will run up until the user-configured test deadline. This makes it easy to run the test for minutes, hours, or days.\n\nIf additional configuration is needed at all, the current plan is to use `NAT_INTEROP_LOADTEST_*` env vars. To minimize complexity, we prefer to add cases to the load test without knobs.\n\n# Measurement\n\nTo avoid premature quantification, we do not define precise target metrics (latency, throughput, resource usage) at this stage. That said, we can expect to see several objective issues occur under sufficient load:\n\n- Block building degradation: skipped slots\n- Transaction inclusion latency spikes\n- Bandwidth bottlenecks between the supervisor and op-node\n- Memory usage\n\nThese can be discerned by viewing Grafana dashboards before and after interop activation in a realistic test environment.\n\n**This issue can be closed when we have a load test that enables us to discover the scenarios in which these limits are hit.** Ideally, the insights will prompt clear questions about the system that we can seek to understand and address from first principles in follow-up tasks.", "OPEN", 0, "joshklop", "2025-05-14T20:26:18Z", "2025-05-26T07:07:28Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62muMe", 15928, "Add Kurtosis configuration for a network which enables component redundancy", "The devstack frontend library expects L2 chain has redundant L2 CL+EL pairs, but our [local interop devnet](https://github.com/ethereum-optimism/optimism/blob/develop/kurtosis-devnet/interop.yaml) does not support this yet.\n\nIt would be great if we could differentiate between a `interop-minimal.yaml` (corresponding to the current interop KT config) and `interop-redundant.yaml` (a new config with a redundant verifier node), such that tests such as @pcw109550's https://github.com/ethereum-optimism/optimism/pull/15878 could be run against Kurtosis.", "OPEN", 0, "teddyknox", "2025-05-14T15:58:04Z", "2025-05-30T14:19:33Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62a7mw", 15885, "op-acceptor: seed funder with reproducible ID", "We have a somewhat general problem with op-faucet generating EOAs in sequence in a predictable way.\nWhich means separate test invocations have to be careful not to step on each other's toes\n\nIt would be good to have:\n- op-acceptor generate a unique ID for every run\n- that we can hash together with a test ID\n- that we can then use to seed  the funder in a reproducible way while maintaining reasonable parallelism-friendliness\n\nThe seed should also be captured in test  artifacts so it can be reused as needed", "CLOSED", 0, "sigma", "2025-05-13T15:44:55Z", "2025-05-30T13:29:59Z", "2025-05-30T13:29:58Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62axfy", 15883, "op-acceptor: bridge faucet gap between kt-devnet and persistent devnets", "", "CLOSED", 0, "sigma", "2025-05-13T15:29:32Z", "2025-05-28T18:07:51Z", "2025-05-16T19:25:22Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62ahXc", 15881, "devstack: provide reliable access to op-faucet", "We need:\n- op-faucet in kt-devnet\n- op-faucet integration with op-acceptor", "CLOSED", 0, "sigma", "2025-05-13T15:08:26Z", "2025-05-28T18:07:00Z", "2025-05-28T18:07:00Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM62O358", 15843, "tests: Improve readability of reorg tests", "Reorg tests and other devnet-sdk / op-devstack tests can benefit from improved readability, and better DSL.\n\n- [x] 1. ~~add DSL for new, random, funded EOAs -- the current wallet DSL generates deterministic addresses from seeds, which can create issues when running a test twice with the same wallet, especially in the context of dropped transactions, reused nonces, etc.~~\n    - There is DSL for this already. There is a `dsl.Funder` which can create pre-funded EOAs\n    - @sigma is working on making the EOA generation pseudo-random, depending on an invocation ID + mnemonic. So the test is more reproducible (same invocation ID) while keys are secure (still using mnemonic).\n    - https://github.com/ethereum-optimism/optimism/blob/develop/op-acceptance-tests/tests/interop/reorgs/init_exec_msg_test.go#L40-L44\n- [x] 2. add _must_ DSL for starting/stopping of op-batcher, in order to not have to specify error checking, and retries\n- [x] 3. add DSL for start/stop of op-node sequencer and waiting for it to become active/non-active\n- [x] 4. add DSL for `wait for reorg on L2 chain`, based on block hash and number\n- [x] 5. add DSL for safe-chain progression for a given L2 chain, and that block has not been reorged\n- [x] 6. merge `TestInteropHappyTx` and `TestInitExecMsg` - they are essentially doing the same thing - we could merge if we upgrade TestInitExecMsg to wait until cross-safe progresses and confirms that blocks containing init/exec msgs haven't been reorged out.", "CLOSED", 0, "nonsense", "2025-05-12T15:25:25Z", "2025-05-29T10:50:02Z", "2025-05-29T10:50:02Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM61wS74", 15787, "Merge the New Spec in for Creator contracts", "Depends on https://github.com/ethereum-optimism/optimism/issues/15784", "CLOSED", 0, "BlocksOnAChain", "2025-05-08T15:17:21Z", "2025-05-29T19:54:23Z", "2025-05-29T19:54:23Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM61wQxP", 15784, "Specs for dispute game contracts creator pattern", "Write out a clear technical spec for changes to the DisputeGame contracts based on this design: https://github.com/ethereum-optimism/design-docs/pull/275\n\nPR it into https://github.com/ethereum-optimism/specs/tree/main/specs/fault-proof\n\n", "CLOSED", 0, "pauldowman", "2025-05-08T15:14:27Z", "2025-05-29T14:59:17Z", "2025-05-29T14:59:17Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM60_jVM", 15672, "kt-devnet: re-introduce per-PR checks", "context: recently we've had a lot of issues with PRs inadvertently breaking kurtosis deployments.\n\nidea: reintroduce as lightweight a sanity check as possible to prevent this.\n\nPossible approaches:\n- regular deployment  test as a required check. Trivial, but potentially time-consuming\n- check that runs only  in the merge queue, that live-updates a \"persistent\" devnet in CI (the merge queue enforcing the fact that no concurrency would disrupt the in-place update assumptions)", "OPEN", 0, "sigma", "2025-05-02T18:04:59Z", "2025-05-28T13:48:26Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM60923k", 15665, "supervisor: add RPC logging", "currently, the supervisor RPC has no logging mechanism. That's usually fine, but it would be good to print out warnings when certain admin commands are used.", "OPEN", 0, "axelKingsley", "2025-05-02T14:05:57Z", "2025-05-29T14:25:50Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6z3fZa", 15550, "Update supervisor RPC error codes", "Supervisor needs to return OP protocol specific error codes in RPC error response along with some of existing error messages\nhttps://github.com/ethereum-optimism/optimism/blob/d7af44bcea4932d7613699cae01f0bf55339ca8f/op-supervisor/supervisor/types/error.go#L5-L40\nRef https://github.com/ethereum-optimism/specs/blob/main/specs/interop/supervisor.md#protocol-specific-error-codes\n", "CLOSED", 0, "emhane", "2025-04-24T15:29:38Z", "2025-05-29T14:20:17Z", "2025-05-29T14:20:16Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6zcHrk", 15497, "Interop: tx message testing: Execute message, but the chain not in dependency set", "The sequencer should be honest in this case, in accordance with @pcw109550's comment here https://github.com/ethereum-optimism/optimism/issues/14529", "CLOSED", 0, "pcw109550", "2025-04-22T09:24:15Z", "2025-05-27T14:06:36Z", "2025-05-27T14:06:36Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6xB-yR", 15213, "op-program: Untyped error message in cycle detection", "_Spearbit audit finding_:\n\n**Description**\nThis error message in cycle.go is untyped and thus might plausibly result in state transition failure. No path for exploiting has been found though.\n- However, it's still recommended that the error be properly typed.\n\nDynamic errors in cycle.go, such as https://github.com/ethereum-optimism/optimism/blob/b1a413430428f31db6a96d077d0ae40ac94112a3/op-supervisor/supervisor/backend/cross/cycle.go#L104 need to be carefully inspected.", "OPEN", 0, "BlocksOnAChain", "2025-04-03T16:10:15Z", "2025-05-29T14:14:01Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6xAzP_", 15202, "op-program: Executing message timestamp should be checked before any further execution", "_Spearbit audit finding_\n\n\n**Description**\nThe `HazardSet.build `function executes the message timestamp check after checking the source chain ID and retrieving the source block.\n\nThis leads to unnecessary computations when the message timestamp is invalid (message is expired or is in the future).\n\n**Recommendation**:\nConsider executing timestamp checks before any further processing. The following properties should be checked:\n- the message is not expired\n- the message is not in the future\n\nSpecifically, here: https://github.com/ethereum-optimism/optimism/blob/b1a413430428f31db6a96d077d0ae40ac94112a3/op-supervisor/supervisor/backend/cross/hazard_set.go#L157C2-L171C1", "OPEN", 0, "BlocksOnAChain", "2025-04-03T14:21:41Z", "2025-05-29T14:13:16Z", null, "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6v5Uly", 15057, "devnet-sdk: add op-challenger to in-process Go backend", "Add the op-challenger to the in-process go backend of devnet sdk (the `systemgo` package)\n\nWe need to consolidate / refactor a bunch of the e2e challenger helper functions that set it up.\n\nThere is a draft PR here: https://github.com/ethereum-optimism/optimism/pull/15058\n\n@protolambda and @ajsutton to sync on Monday 31 March to make these changes.\n", "CLOSED", 0, "protolambda", "2025-03-27T00:19:51Z", "2025-05-27T22:18:39Z", "2025-05-27T22:18:38Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6uVtO8", 14903, "interop: change proxyd to check tx access-list", "Use the `supervisor_checkAccessList` RPC to verify interop transactions that pass through proxyd.\nThis parallelizes better than checking transactions only later inside of the sentry nodes.\n\nSee [interop-topology design proxyd](https://github.com/ethereum-optimism/design-docs/blob/1d1ff3a666c1ffba3b8d92e09db08d7efc7234d7/protocol/interop-topology.md?plain=1#L58)", "CLOSED", 0, "protolambda", "2025-03-17T12:36:29Z", "2025-05-30T11:51:31Z", "2025-05-30T11:51:30Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6tkCE6", 14800, "op-supervisor: introduce rewind-lock", "Methods that interact with multiple databases need some guarantee that the state does not get inconsistent during execution. I.e. it needs to be reorg-aware.\n\nReorgs are just implemented as rewinds + new inserts. So what we really need is some way to acquire a \"lock\" (figurative) as function that we can trust up to block N, do some things, and then check if that block N is still there, with a final check, and error if the state changed. The caller can then retry, until the rewind-lock holds.\n\nIdeally we don't need to register the reorg lock upfront, and can adjust it throughout the function. E.g. at first we might only depend on block 3 to stay around, but then we might need block 5, and at the end we then want 5 to be there. But, as we change from 3 to 5, we don't want to accidentally switch to new reorged chain.\n\nI think we can make this some kind of object, that you can register a `eth.BlockID` against, and then take responsibility over unregistering it (with some defer `myRewindLock.Unregister(blockID)` type of thing. \n\nWe need such lock for each chain, in the `ChainsDB`. The same lock can be shared by cross-safe / local-safe / unsafe / cross-unsafe chain state. Any changes should just invalidate the lock.\nAnd then a `myRewindLock.Check()` function should check the state, at the end of the function, before the deferred `.Unregister(blockID)` is called.\n\nThis way we can have parallel DB operations and no weird blocking, and secure the cross-DB operations from resulting in inconsistent reads. The rewind DB path(s) (I think there are currently two) will have to invalidate the lock.\n\nThis functionality is important for the `AccessList` checks: transactions should not be confirmed with half of the access-list applicable to one state of the chain, and half to the post-reorg state of the same chain.\n", "CLOSED", 0, "protolambda", "2025-03-11T21:14:25Z", "2025-05-30T09:47:08Z", "2025-05-30T09:47:08Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6sUXUU", 14603, "Use custom error codes in supervisor api", "Use custom error codes in supervisor ~~`checkMessages`~~ `checkAccessList` API. This makes it easier to support mutliclient env since matching on error codes is safer/more future proof than matching on exact error string messages.\n\nhttps://github.com/ethereum-optimism/optimism/blob/e22cdd9af00698d2fd04683a5bbddd27292c4c98/op-supervisor/supervisor/backend/backend.go#L466-L505", "CLOSED", 0, "emhane", "2025-03-03T11:49:05Z", "2025-05-29T14:23:39Z", "2025-05-29T14:23:28Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6roHvU", 14529, "Interop: tx message testing with kt-devnet", "Interop tx tests, within RC Alpha scope, subissue of https://github.com/ethereum-optimism/optimism/issues/13855\n\nkt-devnet tests are not supporting block builder support. Below is the list that is testable using kt-devnet.\n\n- Success cases:\n  - [x] [Transaction initiates, and then executes message #14681](https://github.com/ethereum-optimism/optimism/pull/14982)\n  - [x] [Transaction initiates and executes multiple messages of self](https://github.com/ethereum-optimism/optimism/pull/14982)\n  - [x] [Transaction that executes the same message twice.](https://github.com/ethereum-optimism/optimism/pull/14982)\n  - [x] [Construct random directed graph of messages](https://github.com/ethereum-optimism/optimism/pull/15049)\n  - [x] [Execute message that links with initiating message with:](https://github.com/ethereum-optimism/optimism/pull/14982)\n    - [x] `0`, `1`, `2`, `3`, or `4` topics in it]\n    - [x] `0`, `10KB` of opaque event data in it\n    - [x] first, random or last event of a tx\n- Failure cases:\n  - [x] Execute message, but with one or more invalid attributes:\n    - [x] [`origin`](https://github.com/ethereum-optimism/optimism/pull/15029)\n      - changed with different addr\n    - [x] [`blocknumber`](https://github.com/ethereum-optimism/optimism/pull/15029)\n      - upper bound: contract allows `uint64`\n    - [x] [`logIndex`](https://github.com/ethereum-optimism/optimism/pull/15029)\n      - [x] valid msg within block, but different event index\n      - [x] upper bound: contract allows `uint32`\n    - [x] [`timestamp`](https://github.com/ethereum-optimism/optimism/pull/15029)\n      - [x] within time window, but not matching block\n      - [x] upper bound: contract allows `uint64`\n    - [x] `chainid`\n      - [x] [valid chain, msg not there](https://github.com/ethereum-optimism/optimism/pull/15029)\n      - [x] chain not in dependency set \u2013 @nonsense working on this\n        - ~~Blocked by https://github.com/ethereum-optimism/optimism/issues/15151~~\n        - https://github.com/ethereum-optimism/optimism/pull/15662\n            - comment by @pcw109550, the upper PR assumes malicious sequencer, but the original intent of this bullet point is for the honest sequencer. So I think we need two separate issues, for honest/malicious sequencer.  \n      - [x] [upper bound: random 32bytes](https://github.com/ethereum-optimism/optimism/pull/15029)\n  - [x] [Execute implied-conflict message: point to event-index `>=` number of logs](https://github.com/ethereum-optimism/optimism/pull/15094)\n", "CLOSED", 0, "protolambda", "2025-02-25T19:50:40Z", "2025-05-27T14:07:24Z", "2025-05-27T14:07:10Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6nFNBA", 13917, "superchain-registry: Update to handle a shared DisputeGameFactory for the interop cluster", "", "CLOSED", 0, "ajsutton", "2025-01-22T01:33:30Z", "2025-05-27T22:50:33Z", "2025-05-27T22:50:32Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6l9sMx", 13732, "Interop: op-supervisor handle interop upgrade", "With interop, the op-supervisor drives the node to sync the right things.\n\nHeading into the upgrade, we need pre-interop derivation to run, and then transition into managed derivation.\n\nWe should make the op-supervisor drive, but not put any of the pre-interop data into the DB\n\nChanges:\n- sync-node in supervisor should not be blocked by the anchor-point; the anchor point will not exist pre-interop\n- data that is received from the op-node should be filtered; pre-interop data should not be sent off as event for DB updating\n- the supervisor should retrieve the anchor-point when it's time for interop, and seamlessly transition to start indexing the chain.\n\nAdditionally, we need:\n- apply additional boundary checks on the DB to enforce the starting point.\n- handle anchor-point in expiry case, when the start of the DB is too old. Do we want to sync from non-0, when past expiry? Something like starting at `max(upgrade_timestamp, current_timestamp - history_size)`. A: always sync from anchor, even if expired log data. But never before interop activation block.\n\n", "CLOSED", 0, "protolambda", "2025-01-13T15:49:57Z", "2025-05-30T12:40:56Z", "2025-05-30T12:40:56Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDODjvEJM6iyWtz", 13337, "Interop: implement StandardMode in op-node", "StandardMode enables the op-node to stay in sync using a read-only supervisor endpoint. It does not serve the op-supervisor.\nParts of the previous interop-deriver can be reused, but it can now be simplified, as it does not need to attempt to keep the remote supervisor in sync.\n\n\n`op-node/rollup/interop/standard.go`:\n- implement a more passive tracking of the supervisor in `StandardMode`\n- make it attach to the rest of the op-node as a deriver/emitter\n- make this compare every new local-unsafe block against the op-supervisor, for cross-unsafe promotion\n- make this compare every new local-safe block block against the op-supervisor, for cross-safe promotion\n- make this check the op-supervisor for new finalized L1, and compare against the local chain\n\n\n", "CLOSED", 0, "protolambda", "2024-12-10T20:21:26Z", "2025-05-30T11:48:15Z", "2025-05-30T11:48:14Z", "ethereum-optimism/optimism", "2025-08-31 04:59:36"]
["I_kwDOL-xLQ865w97O", 395, "[acceptance] op-acceptor; fast-fail if there's an issue with devnet-env", "Fail fast on devnet env issues.", "CLOSED", 0, "scharissis", "2025-06-04T06:24:10Z", "2025-06-04T06:24:25Z", "2025-06-04T06:24:24Z", "ethereum-optimism/infra", "2025-08-31 05:00:44"]
["I_kwDOL-xLQ865w6C-", 393, "[acceptance] op-acceptor - HTML Report", "Produce a simple HTML report for easier interpretation of test results as well as log navigation.", "CLOSED", 0, "scharissis", "2025-06-04T06:18:46Z", "2025-06-04T06:22:47Z", "2025-06-04T06:22:46Z", "ethereum-optimism/infra", "2025-08-31 05:00:44"]
["I_kwDOL-xLQ865wxHH", 392, "[acceptance] op-faucet shim", "Add a faucet shim for persistent devnets to use, since they don't currently run the op-faucet service.", "CLOSED", 0, "scharissis", "2025-06-04T06:06:14Z", "2025-06-04T06:06:53Z", "2025-06-04T06:06:52Z", "ethereum-optimism/infra", "2025-08-31 05:00:44"]
["I_kwDOL-xLQ863dwgq", 372, "[acceptance] op-acceptor should fail-fast when it can't parse the devnet-env.json", "Sometimes in the persistent devnets many/all tests fail with the same issue: devnet-env.json couldn't be parsed.\n\nExample:\n```\n\u251c\u2500\u2500 Test: github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/fjord (206.4s) [status=pass]\n\u2502       \u2502       \u251c\u2500\u2500 Test: TestCheckFjordScript (0.0s) [status=skip]\n\u2502       \u2502       \u2514\u2500\u2500 Error: === RUN   TestCheckFjordScript\n    systest.go:185: precondition not met: failed to create system from URL \"/etc/op-acceptor/devnet-env.json\": failed to load devnet from URL: error fetching devnet data: error parsing JSON: json: cannot unmarshal object into Go struct field L2Cha\nin.l2.services of type []*descriptors.Service\n--- SKIP: TestCheckFjordScript (0.00s)\n```\n\nThis probably occurs because the devnet-env struct was updated after the devnet's devnet-env.json was generated.\n\nIt'd probably be better if the op-acceptor app had a startup check for this and exited early, instead of marking all tests as failures.", "CLOSED", 0, "scharissis", "2025-05-20T19:28:17Z", "2025-06-04T06:27:59Z", "2025-06-04T06:27:57Z", "ethereum-optimism/infra", "2025-08-31 05:00:44"]
["I_kwDOL-xLQ860NfIe", 296, "KPI Metrics - #tests/week", "Add basic instrumentation so that we can extract the number of tests run per week.", "CLOSED", 0, "scharissis", "2025-04-28T00:42:24Z", "2025-06-04T06:10:13Z", "2025-06-04T06:10:12Z", "ethereum-optimism/infra", "2025-08-31 05:00:44"]
["I_kwDOL-xLQ86qR-pw", 187, "[nat] Test timeouts", "Handle test timeouts.", "CLOSED", 0, "scharissis", "2025-02-17T05:51:26Z", "2025-06-02T23:42:38Z", "2025-06-02T23:42:38Z", "ethereum-optimism/infra", "2025-08-31 05:00:44"]
["I_kwDOKIwiaM65Jd30", 1640, "2025-05-01..2025-05-31 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 1 day, 8:17:37 | 19:05:47 | 3 days, 12:49:22 |\n| Time to close | 2 days, 15:10:13 | 19:05:58 | 9 days, 21:33:41 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 11 |\n| Number of items closed | 28 |\n| Number of most active mentors | 0 |\n| Total number of items created | 39 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Update nav titles | https://github.com/ethereum-optimism/docs/pull/1638 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Small breadcrumb fix | https://github.com/ethereum-optimism/docs/pull/1637 | [bradleycamacho](https://github.com/bradleycamacho) | None | 0:03:00 | None |\n| Update SSD reqs | https://github.com/ethereum-optimism/docs/pull/1636 | [bradleycamacho](https://github.com/bradleycamacho) | 0:01:11 | 0:12:09 | None |\n| Fix broken Optimism contract link in custom token bridging tutorial | https://github.com/ethereum-optimism/docs/pull/1635 | [GarmashAlex](https://github.com/GarmashAlex) | 19:05:47 | 19:05:58 | None |\n| Update interop page | https://github.com/ethereum-optimism/docs/pull/1633 | [krofax](https://github.com/krofax) | 23:58:32 | 1 day, 0:29:55 | None |\n| Sequencer node | https://github.com/ethereum-optimism/docs/pull/1632 | [krofax](https://github.com/krofax) | None | None | None |\n| Adding CCT (Chainlink) to interop compatible tokens | https://github.com/ethereum-optimism/docs/pull/1631 | [zainbacchus](https://github.com/zainbacchus) | 2:41:04 | 3:12:08 | None |\n| adding isthmus hf timestamps | https://github.com/ethereum-optimism/docs/pull/1630 | [sbvegan](https://github.com/sbvegan) | None | 0:07:54 | None |\n| How do estimate the cost of interop messages (spoiler: nearly nothing) | https://github.com/ethereum-optimism/docs/pull/1629 | [qbzzt](https://github.com/qbzzt) | 19:36:24 | None | None |\n| Updating links for Superchain Dev Discord | https://github.com/ethereum-optimism/docs/pull/1628 | [Nicca42](https://github.com/Nicca42) | 0:36:58 | 1 day, 21:24:43 | None |\n| fix dead links in repo | https://github.com/ethereum-optimism/docs/pull/1626 | [zeroprooff](https://github.com/zeroprooff) | 3 days, 4:12:19 | None | None |\n| docs: Add usage examples for conductor_commitUnsafePayload RPC method | https://github.com/ethereum-optimism/docs/pull/1625 | [DeVikingMark](https://github.com/DeVikingMark) | 3 days, 11:31:52 | 3 days, 11:32:02 | None |\n| fix(typo): isthumus to isthmus. | https://github.com/ethereum-optimism/docs/pull/1624 | [scharissis](https://github.com/scharissis) | 1 day, 0:26:53 | None | None |\n| Clean up syntax | https://github.com/ethereum-optimism/docs/pull/1622 | [zainbacchus](https://github.com/zainbacchus) | 1 day, 21:15:08 | 1 day, 21:15:15 | None |\n| Update withdrawal flow docs | https://github.com/ethereum-optimism/docs/pull/1621 | [krofax](https://github.com/krofax) | 4:03:43 | None | None |\n| Wiz: Upgrade next to 14.2.25 (resolves 1 finding) | https://github.com/ethereum-optimism/docs/pull/1620 | [wiz-inc-a178a98b5d[bot]](https://github.com/wiz-inc-a178a98b5d[bot]) | 7 days, 18:40:59 | None | None |\n| Update --miner.recommit timing | https://github.com/ethereum-optimism/docs/pull/1619 | [bradleycamacho](https://github.com/bradleycamacho) | 0:14:39 | 0:14:43 | None |\n| Draft U16 notice page | https://github.com/ethereum-optimism/docs/pull/1618 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| docs: update file's name (relaying intertop messages using `cast` | https://github.com/ethereum-optimism/docs/pull/1617 | [gap-editor](https://github.com/gap-editor) | None | None | None |\n| Audit of message passing tutorial | https://github.com/ethereum-optimism/docs/pull/1616 | [qbzzt](https://github.com/qbzzt) | 3 days, 17:59:21 | 8 days, 16:48:05 | None |\n| Add Support for Nethermind on OP Docs | https://github.com/ethereum-optimism/docs/pull/1615 | [bradleycamacho](https://github.com/bradleycamacho) | 1 day, 14:07:01 | None | None |\n| Tutorial for relaying arbitrary log messages (done with attestations) | https://github.com/ethereum-optimism/docs/pull/1613 | [qbzzt](https://github.com/qbzzt) | None | None | None |\n| Pectra fees: use a table to summarize actions | https://github.com/ethereum-optimism/docs/pull/1612 | [geoknee](https://github.com/geoknee) | 0:10:36 | 0:43:57 | None |\n| Remove sdk mentions | https://github.com/ethereum-optimism/docs/pull/1611 | [krofax](https://github.com/krofax) | 1:48:51 | 1:49:57 | None |\n| Generating absolute prestate and preimage files for permissionless proofs | https://github.com/ethereum-optimism/docs/pull/1610 | [krofax](https://github.com/krofax) | 22:34:31 | 3 days, 0:27:18 | None |\n| pectra fees: tweaks from Seb's review | https://github.com/ethereum-optimism/docs/pull/1609 | [geoknee](https://github.com/geoknee) | 1:18:36 | 3:05:23 | None |\n| Add Pectra user fees notice | https://github.com/ethereum-optimism/docs/pull/1608 | [geoknee](https://github.com/geoknee) | 1:08:16 | 1:08:31 | None |\n| Pectra user fees notice | https://github.com/ethereum-optimism/docs/pull/1607 | [bradleycamacho](https://github.com/bradleycamacho) | 3:19:25 | None | None |\n| [WIP] information architecture | https://github.com/ethereum-optimism/docs/pull/1606 | [sbvegan](https://github.com/sbvegan) | None | None | None |\n| Add message expiration doc | https://github.com/ethereum-optimism/docs/pull/1605 | [bradleycamacho](https://github.com/bradleycamacho) | 0:12:16 | 3 days, 6:10:17 | None |\n| Update superchain-withdrawal-pause-test.mdx | https://github.com/ethereum-optimism/docs/pull/1604 | [sbvegan](https://github.com/sbvegan) | 0:07:33 | 0:46:54 | None |\n| interop: recorrect the logic between CrossL2Inbox and op-supervisor | https://github.com/ethereum-optimism/docs/pull/1603 | [joohhnnn](https://github.com/joohhnnn) | None | None | None |\n| Update releases.mdx | https://github.com/ethereum-optimism/docs/pull/1602 | [sbvegan](https://github.com/sbvegan) | None | 0:07:16 | None |\n| Update proposer.mdx | https://github.com/ethereum-optimism/docs/pull/1601 | [geoknee](https://github.com/geoknee) | 0:01:21 | 0:10:03 | None |\n| Audit of Custom SuperchainERC20 Tokens | https://github.com/ethereum-optimism/docs/pull/1600 | [qbzzt](https://github.com/qbzzt) | 23:23:01 | 13 days, 17:25:02 | None |\n| Update OP Stack genesis creation docs | https://github.com/ethereum-optimism/docs/pull/1599 | [krofax](https://github.com/krofax) | 2 days, 12:06:54 | 10 days, 16:44:05 | None |\n| interop: update the code external example. | https://github.com/ethereum-optimism/docs/pull/1598 | [joohhnnn](https://github.com/joohhnnn) | 2 days, 17:04:16 | 2 days, 17:06:30 | None |\n| Batcher config update | https://github.com/ethereum-optimism/docs/pull/1597 | [ZakAyesh](https://github.com/ZakAyesh) | 16:13:35 | 1 day, 2:00:19 | None |\n| Audit of `SuperchainERC20` transfer tutorial | https://github.com/ethereum-optimism/docs/pull/1596 | [qbzzt](https://github.com/qbzzt) | 5 days, 6:30:03 | 13 days, 1:04:00 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-05-01..2025-05-31`", "CLOSED", 0, "opgitgovernance", "2025-06-01T00:22:04Z", "2025-06-02T15:20:07Z", "2025-06-02T15:20:07Z", "ethereum-optimism/docs", "2025-08-31 05:00:45"]
["I_kwDOKIwiaM65JdKR", 1639, "2025-05-01..2025-05-31 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | None | None | None |\n| Time to close | 104 days, 0:21:48 | 104 days, 0:21:48 | 185 days, 13:11:18 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 2 |\n| Number of most active mentors | 0 |\n| Total number of items created | 2 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [DOCS] Add PR title | https://github.com/ethereum-optimism/docs/issues/1627 | [sokdara420](https://github.com/sokdara420) | None | 2 days, 2:19:56 | None |\n| [DOCS] Dedicated paymaster section | https://github.com/ethereum-optimism/docs/issues/980 | [krofax](https://github.com/krofax) | None | 205 days, 22:23:40 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-05-01..2025-05-31 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "opgitgovernance", "2025-06-01T00:21:14Z", "2025-06-02T15:20:07Z", "2025-06-02T15:20:07Z", "ethereum-optimism/docs", "2025-08-31 05:00:45"]
["I_kwDOLB-lzc6zn7WW", 678, "Consensus P2P RPC API", "Add specs for the op-node p2p RPC API\nhttps://github.com/ethereum-optimism/optimism/blob/6cf1026b784090fa60666933c198c24a4b9810b1/op-service/apis/p2p.go#L14-L72\nCheck out the implementation to see if docs are available for each given API method to copy. In case of missing docs, try write the specs for the method so it describes what the Go code is doing, if unclear it's ok to leave that method description as a todo comment.\n\nrust impl:\nhttps://github.com/op-rs/kona/blob/de7df1145f5fd914cc70974b6f78267740a89378/crates/node/rpc/src/jsonrpsee.rs#L57-L127\nhttps://github.com/op-rs/kona/blob/de7df1145f5fd914cc70974b6f78267740a89378/crates/node/rpc/src/net.rs#L72-L221\ngo impl:\nhttps://github.com/ethereum-optimism/optimism/blob/6cf1026b784090fa60666933c198c24a4b9810b1/op-node/p2p/rpc_server.go#L72-L380", "OPEN", 0, "emhane", "2025-04-23T10:49:42Z", "2025-06-04T13:13:48Z", null, "ethereum-optimism/specs", "2025-08-31 05:00:46"]
["I_kwDOH2Qg5s64lQVS", 618, "Interop: Add RPC to drop all interop transactions from mempool", "It is necessary to be able to drop all interop txs from the mempool, in case of a killswitch event to temporarily disable Interop txs.", "OPEN", 0, "sebastianst", "2025-05-28T09:58:05Z", "2025-10-17T12:59:36Z", null, "ethereum-optimism/op-geth", "2025-08-31 05:00:47"]
["I_kwDOH2Qg5s62O1IV", 603, "Interop ingress filter should assign the pending timestamp to exec descriptors", "The ingress filter currently assigns the latest timestamp to exec descriptors:\n\nhttps://github.com/ethereum-optimism/op-geth/blob/e605d07bde55b02f9e0309c330fb87500d80d06f/core/txpool/ingress_filters.go#L48\n\nhttps://github.com/ethereum-optimism/op-geth/blob/e605d07bde55b02f9e0309c330fb87500d80d06f/eth/interop.go#L20-L31\n\nThis means executing messages are unnecessarily delayed by one block when the supervisor uses a stringent [access list policy](https://specs.optimism.io/interop/supervisor.html#access-list-checks), as in the [reference implementation](https://github.com/ethereum-optimism/optimism/blob/23c1fef1f0fe6b626c987eecbfa91fd5e0b66fb0/op-supervisor/supervisor/types/types.go#L344-L346).\n\nAssigning the pending timestamp instead of the unsafe timestamp should fix the issue.", "CLOSED", 0, "joshklop", "2025-05-12T15:21:08Z", "2025-06-03T13:55:30Z", "2025-06-03T13:55:30Z", "ethereum-optimism/op-geth", "2025-08-31 05:00:47"]
["I_kwDOH2Qg5s6YA8Eu", 390, "How to dump all state of addresses", "Is there any way to dump all state of all addresses like `alloc` in `genesis.json`\r\n\r\nI used `dump` command, but not exporting all addresses", "CLOSED", 0, "Eoous", "2024-09-26T12:05:49Z", "2025-06-08T13:56:30Z", "2024-10-10T00:05:05Z", "ethereum-optimism/op-geth", "2025-08-31 05:00:47"]
["I_kwDOKIsnqM66fGyQ", 1064, "Normalized hasing in AccountAccessParser should dynamically find slots", "Using forge StdStorage, we dynamically find slots. Relying on hardcoding slot numbers isn't a good long term solution. See context here: https://github.com/ethereum-optimism/superchain-ops/pull/1053#discussion_r2129187242", "OPEN", 0, "blmalone", "2025-06-08T21:41:21Z", "2025-06-08T21:41:21Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 05:00:54"]
["I_kwDOJ_r-bs65qzFn", 1057, "ensure v4 state files can be processed by `import_devnet`", "", "CLOSED", 0, "bitwiseguy", "2025-06-03T18:26:45Z", "2025-06-04T09:04:53Z", "2025-06-04T09:04:53Z", "ethereum-optimism/superchain-registry", "2025-08-31 05:01:02"]
["I_kwDOJ_r-bs65AHRA", 1047, "inflate dependency set from state.json", "As part of `create_config` and `import_devnet`, we should ensure the depset is pulled out of the state.json and included in the chain config .toml.\n\nRelated pr: https://github.com/ethereum-optimism/superchain-registry/pull/1030", "CLOSED", 0, "bitwiseguy", "2025-05-30T17:33:06Z", "2025-06-02T18:39:19Z", "2025-06-02T18:39:18Z", "ethereum-optimism/superchain-registry", "2025-08-31 05:01:02"]
["I_kwDOJ_r-bs65AF7a", 1046, "use deployer binaries for new chain report `ScanL2`", "ScanL2 runs a genesis comparison check that reports any diffs between the genesis provided in the user's state.json, and a standard genesis produced by the same contracts versions. We should migrate to the new `internal/deployer` package for this check, so that it can be compatible with multiple op-deployer versions.\n\nThis will include the following:\n* verify genesis returned by `op-deployer inspect` is deterministic: need to investigate why the `ExcessBlobGas` and `BlobGasUsed` fields are not deterministic when the output is unmarshaled to `core.Genesis` type\n* add a test ScanL2_test state.json for v2, v3", "CLOSED", 0, "bitwiseguy", "2025-05-30T17:30:51Z", "2025-06-02T18:13:10Z", "2025-06-02T18:13:10Z", "ethereum-optimism/superchain-registry", "2025-08-31 05:01:02"]
["I_kwDOJ_r-bs65AD2j", 1045, "use deployer binaries for `import_devnet` command", "For the `import_devnet` command, we should migrate from the op-deployer go library to the new `internal/deployer` go package. We will need to come up with a way to handle `state.l1ContractsRelease` that are gcp urls instead of contracts tags", "CLOSED", 0, "bitwiseguy", "2025-05-30T17:27:11Z", "2025-06-03T14:41:32Z", "2025-06-03T14:41:32Z", "ethereum-optimism/superchain-registry", "2025-08-31 05:01:02"]
["I_kwDODjvEJM66dLjP", 16331, "Bug Report: Incompatibility and Missing Documentation for OptimismPortal2.sol in Interop Rollup Updates", "\ud83d\udccc Summary\nAfter the recent Optimism Bedrock/Interop updates, including the deployment of OptimismPortal2.sol, there is insufficient documentation and tooling support for developers implementing custom bridges or sequencers. The current version of [Viem](https://viem.sh/) does not support the updated ABI or event structure of OptimismPortal2, causing compatibility issues and runtime errors. This makes it impossible to implement a fully functional native bridge on custom OP Stack chains relying on updated rollup contracts.\n\n\ud83d\udd27 Environment\nClient library: viem@latest\n\nOptimism repo: ethereum-optimism/monorepo (or relevant fork)\n\nOS: macOS/Linux/Ubuntu (Dev Machine + Containerized L2 Infra)\n\nChain: Custom OP Stack L2 with Interop rollup config\n\nPortal Contract Version: OptimismPortal2.sol (post-interop update)\n\n\u26a0\ufe0f Expected Behavior\nABI compatibility with viem\n\nAbility to decode logs/events like WithdrawalProven, WithdrawalFinalized, WithdrawalHalted, etc.\n\nClear migration and usage guidelines for OptimismPortal2.sol\n\nConsistent behavior with prior OptimismPortal (v1)\n\n\ud83d\udca5 Actual Behavior\nABI parsing fails for events with custom struct arguments and new storage access patterns\n\nEvent decoding throws:\n\nvbnet\nCopy\nEdit\nError: Decoding error: unable to decode log for event \"WithdrawalProven\"\nIncompatibility with:\n\nUpdated withdrawal finalization logic\n\nCustom calldata formats\n\nNew state access pattern (anchorStateRegistry, disputeGameFactory references)\n\nNo clear documentation on:\n\nOptimismPortal2.sol deployment procedure\n\nCanonical ABI or address assignment\n\nRequired challenger/attester interactions\n\nPortal upgrade path\n\n\ud83d\udd0d Steps to Reproduce\nSet up a custom OP Stack chain using the interop rollup configuration\n\nDeploy the latest OptimismPortal2.sol\n\nAttempt to:\n\nListen for events using Viem\n\nParse withdrawal logs from L2 \u2192 L1 messages\n\nObserve parsing errors and decoding failures\n\nCheck optimism monorepo/docs for guidelines (none found)\n\n\ud83e\udde9 Related Components\n[OptimismPortal2.sol](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/contracts/L1/OptimismPortal2.sol)\n\n\n\nOP Challenger (dispute game dependencies)\n\nL2 withdraw-prove-finalize lifecycle\n\nAnchorStateRegistry & GameProxy support", "OPEN", 0, "9mmDev", "2025-06-08T10:46:32Z", "2025-06-08T10:46:32Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM66Hq2P", 16308, "`HazardSetFrontierChecks` doesn't flag an error if hazard is not the cross-safe candidate for its chain", "When cross-validating a cross-safe candidate for an L2 chain, the Supervisor is expected to check that each element in the candidate's hazard set is either (a) already validated as cross-safe, or (b) the cross-safe candidate for its own chain. However, currently the code allows hazards with a block number after their chain's cross-safe candidate to pass the check.\n\n### Details\n\nIn the `HazardSafeFrontierChecks` function, if an element `hazardBlock` of the hazard set is not yet in the cross-safe database, it retrieves the cross-safe candidate for its chain and checks for errors:\n\nhttps://github.com/ethereum-optimism/optimism/blob/514ecce3c43457543ee35ad7d18e6deb0481293a/op-supervisor/supervisor/backend/cross/safe_frontier.go#L37-L49\n\nIn line 42, the if statement returns an `ErrConflict` if `hazardBlock` has the same block number as `candidate` but different ID. However, there is no check preventing the case where `hazardBlock` has a different block number from `candidate`, which can happen if `hazardBlock` is a later block and the processing of the cross-safe head hasn't reached it yet.\n\nSince this allows a hazard set to pass the checks even if it has an element that is neither marked as cross-safe nor the cross-safe candidate, this might cause a block to be promoted to cross-safe when it shouldn't.\n\n### Example Scenario\n\n1. Chain A is trying to update its cross-safe head to block A1. A1 includes an executing message referencing an initiating message in block B2 of Chain B, so B2 is added to A1's hazard set.\n2. Chain B's cross-safe candidate is B1, which is B2's parent.\n3. When validating the hazard set for A1, we retrieve the cross-safe candidate B1 for Chain B. B1 and B2 have different block numbers, but no error is flagged even though B2 is neither marked as cross-safe nor the cross-safe candidate.\n4. A1 is promoted to cross-safe.\n5. Later, when Chain B tries to advance the cross-safe head, it realizes that B1 has a conflict and needs to be invalidated. As a consequence, B2 is invalidated as well. Therefore, since it depends on an invalid block, A1 should not have been promoted to cross-safe either.\n\n### Recommendation\n\nIn addition to the existing checks, check if `candidate.Derived.Number < hazardBlock.Number`, and return `ErrFuture` if this is the case, to indicate that we need to wait for the cross-safe head in Chain B to catch up before we can cross-validate the next candidate for Chain A.", "OPEN", 0, "lucasmt", "2025-06-05T20:31:40Z", "2025-06-05T20:45:56Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM66FaIL", 16300, "op-deployer: support verification of L2 contracts", "This would be a useful feature for e.g. predeploys updated in hardforks. \n\nA monkeypatched solution is here for a good starting point https://github.com/ethereum-optimism/optimism/pull/15824 ", "OPEN", 0, "geoknee", "2025-06-05T17:09:31Z", "2025-06-05T17:10:30Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM66EQpX", 16299, "add `validate()` calls to `opcm.upgrade()` , `opcm.deploy()` etc.", "", "OPEN", 0, "maurelian", "2025-06-05T15:25:46Z", "2025-06-05T15:25:46Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM65xH7X", 16273, "[op-acceptance-tests] Report unused tests", "Discover and report unused acceptance tests.\nAll tests should be within a gate and run.", "OPEN", 0, "scharissis", "2025-06-04T06:39:37Z", "2025-06-04T10:04:58Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM65bcdw", 16239, "Test that log events from the upgrade block, when converted into an access-list, fail the check-access-list RPC check", "Successor of https://github.com/ethereum-optimism/optimism/issues/15647", "OPEN", 0, "teddyknox", "2025-06-02T17:12:03Z", "2025-06-02T17:13:38Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM65aWmC", 16233, "[Tracking] AutoStop Functionality", "We need to stop interop liveness if there are invalid messages, and a precautionary protective measure.\n\nAUTO STOP:\n- https://github.com/ethereum-optimism/optimism/issues/16229\n- https://github.com/ethereum-optimism/optimism/issues/16230\n- https://github.com/ethereum-optimism/optimism/issues/16231\n- https://github.com/ethereum-optimism/optimism/issues/16232\n- Platforms: https://github.com/ethereum-optimism/platforms-team/issues/838 \n", "OPEN", 0, "axelKingsley", "2025-06-02T15:39:52Z", "2025-06-06T19:05:11Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM65aVUD", 16232, "Interop AutoStop: Monitoring Service Integration", "The monitoring service should be able to trigger AutoStop, if an invalid message is detected by it.\n\nDoD:\n- Monitoring service features configuration to point at multiple supervisors\n- on certain detected issues, supervisors are sent the AutoStop API command\n- \"certain detected issues\" is well defined and agreed upon", "OPEN", 0, "axelKingsley", "2025-06-02T15:38:13Z", "2025-10-17T12:25:39Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM65aTv6", 16231, "Interop AutoStop: Runbook and Script", "Once AutoStop feature is implemented, we need a document and a script for using the feature manually.\n\nDoD:\n- Script for simple AutoStop checking, enabling, disabling, is available to operators\n- Runbook exists to explain the purpose, best practices and how-to of AutoStop (and will be linked to from many other Supervisor based runbooks)", "OPEN", 0, "axelKingsley", "2025-06-02T15:35:57Z", "2025-10-17T12:25:39Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM65aR_C", 16230, "Interop AutoStop: Supervisor and Node", "From the Auato Stop design doc, https://github.com/ethereum-optimism/optimism/issues/16229\n\nMost of the Auto Stop feature will live in the Supervisor, which must be able to handle an auto-stop signal from an API, and from derivation events. Sequencer, too, must know about this value so it can divert any interop messages during block building.\n\nDoD:\n- Supervisor can return `ErrAutoStop` when `CheckAccessList` is called during AutoStop\n- Supervisor has `CheckAutoStop` and `SetAutoStop` (or better names) Admin RPC\n- Supervisor sends new Managed Node command \"AutoStop\" to tell any downstream Sequencer not to include interop messages. Triggered by block invalidation and replacement (could just leverage the existing event for this)\n- Node tracks the `AutoStop` state from its Supervisor\n- Node uses the `AutoStop` state to divert Interop Messages during block building.", "OPEN", 0, "axelKingsley", "2025-06-02T15:34:00Z", "2025-06-05T19:17:29Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM65aJ98", 16227, "Interop Monitoring: Integrate Monitoring Service with DevStack", "Devstack should have a way to utilize an Interop Monitoring Service, so that way we can design tests for the service.\n\n\nSee tracker: https://github.com/ethereum-optimism/optimism/issues/15178\n\nDoD:\n- Can launch a network acceptance test that includes the monitoring service\n- Tests for the monitoring service exist\n- (optional?) Existing tests use monitoring service for additional checks", "OPEN", 0, "axelKingsley", "2025-06-02T15:23:30Z", "2025-10-17T12:25:38Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM648dUf", 16187, "op-acceptance-tests: Fix interop sync test which relied on supervisor multinode support", "`TestUnsafeChainKnownToL2CL` and `TestUnsafeChainUnknownToL2CL` are set to skip by https://github.com/ethereum-optimism/optimism/pull/16008\n\nThey currently depend on supervisor multi-node support, which is something we're going to drop (https://github.com/ethereum-optimism/optimism/issues/16174). We need to rework this test to use a multi-supervisor setup instead.\n", "CLOSED", 0, "sebastianst", "2025-05-30T10:42:17Z", "2025-06-06T05:59:58Z", "2025-06-05T16:24:56Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM642uQm", 16174, "op-supervisor: Drop multi-node support", "The supervisor currently has (some) multi-node support, to drive multiple managed nodes on the same chain. But it's not fully tested or supported yet. Recently https://github.com/ethereum-optimism/optimism/pull/16008 had to skip the `TestMultiNode` test in `op-e2e/interop/interop_test.go` since it kept failing and it was decided that this is low priority at the moment because the future of multi-node support isn't clear.\n\n~We should decide to either fully invest in it, or drop it completely.~ Edit: we have decided to drop multi-node support for now. This ticket now serves as the tracking ticket for multi-node support removal.", "OPEN", 0, "sebastianst", "2025-05-29T20:00:15Z", "2025-10-01T14:40:23Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM640nIo", 16166, "op-supervisor: Fix ability to provide data for fault proofs with non-genesis interop", "The op-challenger currently doesn't fully support non-Genesis Interop upgrades. When proving the non-genesis activation block, some invalid action occurs (what exactly needs to be investiged).\n\nhttps://github.com/ethereum-optimism/optimism/pull/16008 had to disable some FP tests, which need to be reenabled and the challenger fixed as part of resolving this issue.\n\n- [x] `TestInteropFaultProofs_PreForkActivation` completely disabled, has `invalid` claim instead of expected\n- [x] `TestInteropUpgrade` had to comment out first `assertProgramOutputMatchesDerivationForBlockTimestamp` call that would run the FP at the activation block.", "OPEN", 0, "sebastianst", "2025-05-29T16:06:22Z", "2025-06-06T17:42:28Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM63pf2c", 16061, "Test that L1 reorg correctly triggers L2 reorg of local-unsafe block", "", "CLOSED", 0, "nonsense", "2025-05-21T18:38:41Z", "2025-06-04T13:40:11Z", "2025-06-04T13:40:11Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM63o_ZJ", 16058, "scr: update depset validation to check EthLockboxProxy consistency", "Every chain in a depset should share the same EthLockboxProxy address and DisputeGameFactoryProxy address.  The DepsetChecker tries to ensure this consistency by reading from the addresses.json file populated by the codegen ci job. \n\nThe EthLockboxProxy is now populated in the op-fetcher output, but the superchain-registry cannot import/use the updated version of op-fetcher until https://github.com/ethereum-optimism/optimism/issues/15934 is solved. After that blocker is removed, we should re-enabled the EthLockboxProxy check in the `DepsetChecker.checkOnchain()` method.", "CLOSED", 0, "bitwiseguy", "2025-05-21T17:38:00Z", "2025-06-06T13:24:12Z", "2025-06-06T13:24:12Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM63oh3Q", 16054, "op-acceptance-tests: interop: prioritized load testing metrics", "Because the initial versions of the interop load test will be manually operated, we want to clearly surface relevant metrics. Existing devnet components already expose some useful metrics. We can augment the existing server/network-side metrics with fine-grained client-side metrics from load test itself.\n\nDesired metrics:\n\n* Transaction latency (unsafe, cross-unsafe, and cross-safe)\n* more?\n\nPrior to implementing, we will want to check what metrics are already exposed (e.g., geth's mempool metrics) to make sure we're not duplicating information.\n\nThis may be implemented by exposing a prometheus server in the load test. \n\nFor ease of use internally, it may be desirable to build a simple Grafana dashboard that pulls together relevant network-side (e.g., block time, block size) and client-side (transaction latency) stats as a future task. \n\nIf the load test is intended to be run against kurtosis devnets, https://github.com/ethereum-optimism/optimism/issues/15981 may be a blocker.", "CLOSED", 0, "joshklop", "2025-05-21T16:46:37Z", "2025-06-04T02:44:25Z", "2025-06-04T02:44:24Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM63hv2J", 16045, "flashblocks: Release Readiness Checklist", "Prepare a release readiness checklist dedicated towards determining the readiness of a freshly deployed flashblocks network.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-21T06:26:23Z", "2025-06-04T03:48:25Z", "2025-06-04T03:48:25Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM63gme6", 16044, "op-acceptance-tests: interop: use different EOAs in load test", "The load test in #16032 uses the same EOAs to spam transactions. This could hit existing mempool DoS protections since op-geth op-geth [limits](https://github.com/ethereum-optimism/op-geth/blob/68075997f33907401a93216aa426514c5ddc8870/core/txpool/legacypool/legacypool.go#L1563) the number of concurrent pending txs per account.\n\nFor the interop load test, we want to the interop implementation to be the limiting factor.\n\nTo resolve this, we should spam transactions from different EOAs, maybe even using a fresh EOA each time for simplicity.", "CLOSED", 0, "joshklop", "2025-05-21T03:23:57Z", "2025-06-03T14:10:36Z", "2025-06-03T14:10:36Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62zGFy", 15967, "Scripts to test withdrawals on live network", "We have acceptance tests that can include time travel to test withdrawals but for a live network we'll need something that can be run after the 7-day delay. It should be simple to run (one command).", "CLOSED", 0, "pauldowman", "2025-05-15T16:44:10Z", "2025-06-04T00:19:02Z", "2025-06-04T00:19:01Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62yxJ3", 15963, "Anchor state migration steps are simple and clearly documented in the upgrade runbook", "All anchor state migration need to be documented in the upgrade runbook.\n\nThis includes https://github.com/ethereum-optimism/optimism/issues/15966", "CLOSED", 0, "pauldowman", "2025-05-15T16:08:49Z", "2025-06-05T20:53:12Z", "2025-06-05T20:53:11Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62ywgt", 15962, "Write a doc describing how each interop phase is tested", "Doc started in https://www.notion.so/oplabs/Interop-Proofs-Testing-Coverage-1f4f153ee1628091936df72676fb64ee?pvs=4\n\nDoesn't need to be hugely detailed, but should include pointers for people to find the specific tests/processes/whatever. Basically should be enough to convince people, who already have a reasonable trust in the proofs team, that we are ready to ship.", "CLOSED", 0, "pauldowman", "2025-05-15T16:07:41Z", "2025-06-04T20:44:42Z", "2025-06-04T20:44:42Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62nk4L", 15934, "scr: support multiple op-deployer versions", "PR that revealed the issue caused by a breaking change to the l2genesis script api: https://github.com/ethereum-optimism/superchain-registry/pull/1009\n\nThe new l2genesis script is not compatible with old versions of the op-contracts releases. Those releases have a different l2genesis script in their forge artifacts, which has a different api than the latest l2genesis script expected to be invoked by the go code.\n\nThe plan is to create a mapping of op-deployer versions --> op-contracts releases. Then based on the op-contracts tag read from a state.json, the appropriate op-deployer binary will be used during the `check_genesis_integrity` ci job.", "CLOSED", 0, "bitwiseguy", "2025-05-14T17:36:09Z", "2025-06-03T14:42:17Z", "2025-06-03T14:42:16Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62lniJ", 15925, "Add natspec to StandardValidator", "The StandardValidator should have natspec documentation comments as with other production contracts.", "CLOSED", 0, "maurelian", "2025-05-14T14:24:35Z", "2025-06-02T15:51:23Z", "2025-06-02T15:51:22Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62lm6b", 15924, "Add Semver to StandardValidator", "The StandardValidator should inherit from ISemver just like other production contracts.\nIt also needs to have the usual CI checks on it to ensure it is bumped when changes are made.", "CLOSED", 0, "maurelian", "2025-05-14T14:23:47Z", "2025-06-02T15:51:16Z", "2025-06-02T15:51:15Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62lWOG", 15920, "sync test migration using devstack", "- `TestUnsafeChainUnknownToL2CL`\n- `TestL2CLSyncP2P`(optional)", "CLOSED", 0, "pcw109550", "2025-05-14T14:01:33Z", "2025-06-03T14:18:03Z", "2025-05-29T18:48:21Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62k5T6", 15917, "tx messaging test: check consolidation to safe", "Check happy-path interop message NAT tests to check cross-safe consolidation. Currently the messaging tests does not care about cross-safe head progression.\n", "OPEN", 0, "pcw109550", "2025-05-14T13:28:21Z", "2025-06-03T14:18:22Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62k2Lq", 15915, "op-program: load depset from superchain-registry chain configs", "After the superchain-registry is updated such that all chain configs include a depset, op-program will need to read and use the appropriate depset(s) from the chain configs.\n\nFrom @ajsutton:\n\"We want to avoid parsing the depset multiple times as it increases runtime a fair bit. So just loading the depset for one chain and depending on it being consistent for all chains makes sense (especially since we will have tests in superchain-registry to ensure the configs are consistent).\n\nGiven the loading code is generally shared I suspect op-supervisor would just do the same and load a single depset config.\"", "CLOSED", 0, "bitwiseguy", "2025-05-14T13:24:23Z", "2025-06-03T23:29:11Z", "2025-06-03T23:29:11Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62dk8k", 15889, "op-supervisor: load depset from superchain-registry chain configs", "After the superchain-registry is updated such that all chain configs include a depset, op-supervisor will need to read and use the appropriate depset(s) from the chain configs.\n\n# Questions:\n1. Is reading the depset from an individual chain configs enough, or should the supervisor read all configs for chains in the depset and validate they are equal before proceeding? (i.e. should supervisor trust superchain-registry will only provide valid, consistent depsets, or does it need to revalidate everything?)", "CLOSED", 0, "bitwiseguy", "2025-05-13T20:52:26Z", "2025-06-04T03:59:58Z", "2025-06-04T03:59:57Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM62ZtZ-", 15875, "scr: ensure new chains added to registry include interop data in their config", "We should update the `InflateChainConfig` function, which creates a new chain config from a state.json, to also copy over interop data into the new chain config. If the interop data is missing from the state.json, then we should assume the depset only includes the chain itself.\n\nWe should focus on supporting this functionality during the `import_devnet` flow for now. That is the case we know will have depset info included in the state.json. Including depset info when adding production networks to the registry is a case we will not encounter for awhile and can be refined later.", "CLOSED", 0, "bitwiseguy", "2025-05-13T13:59:58Z", "2025-06-03T18:07:47Z", "2025-06-03T18:07:47Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM61npN6", 15764, "Interop: op-supervisor should run before fork timestamp is selected", "We need to make the fork timestamps optional in dependency-set.\nWhile no exact fork time is known the supervisor should stay and operate in the pre-interop mode.\n\nThis allows node operators to prepare a supervisor, before the upgrade rolls out in superchain registry, so the node operator can prepare their deployment more in advance.\n\nAlso consider reducing it to 1 activation timestamp (per chain, or maybe even global), to simplify the config.\nAnd consider including the block time, to make the activation-block identifiable.\n", "CLOSED", 0, "protolambda", "2025-05-07T20:12:29Z", "2025-06-02T20:55:09Z", "2025-06-02T20:55:08Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM61nhWJ", 15760, "Test one<>many supervisor<>op-node configuration is resilient to isolated op-node failures", "Scenario:\n- 1 regular chain with at least 1 op-node\n- 1 chain with 2+ op-nodes, managed by the same supervisor\n  - make one of the op-nodes fall out of sync\n  - check that the other stays operational\n  - check that the supervisor stays syncing\n  - check that the out-of-sync node catches up back into sync\n\nHaving multiple connected op-nodes per chain will be more common with RPC-like providers, who may not run as many nodes on one of the chains, while running a lot on the other chain. E.g. having a region deployment full of OP Mainnet nodes, and when adding to an interop-set, only a few nodes may be desired for the other chain, to not double the deployed number of nodes.\n\n", "CLOSED", 0, "protolambda", "2025-05-07T20:00:03Z", "2025-06-02T17:53:11Z", "2025-06-02T17:53:10Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM61nYka", 15756, "Interop: op-node: handle fork-time CLI config cases", "What we want:\n- as long as we have legacy mode, make the managed mode optional.\n- if there is a timestamp, warn user if not in managed mode\n  - Include an interop-readiness metric, set to 0\n  - Log (turn into repeated logging once we figure out op-node driving)\n- work on removing legacy mode; managed mode soon becomes default.\n\n~~blocked by https://github.com/ethereum-optimism/optimism/issues/15995~~\nblocked by https://github.com/ethereum-optimism/optimism/issues/15764\n\nDraft PR: https://github.com/ethereum-optimism/optimism/pull/16071\n", "CLOSED", 0, "protolambda", "2025-05-07T19:46:22Z", "2025-06-02T15:03:51Z", "2025-06-02T15:03:51Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM602i7W", 15647, "op-acceptance-tests: Expand Interop activation test", "- Check activation block contains the expected upgrade transactions and executed successfully.\n  - TODO: there is an action test in progress that does this kind of thing already. Need to generalize the helper function, and do better checks to assert transaction-success, and contract-account code-hashes.\n  - The action test isn't sufficient alone, we want to be able to run this as acceptance-test, to check the real networks like betanet RC.\n  - Extend this test: https://github.com/ethereum-optimism/optimism/blob/31c94eec2c07e2a8f6f9511cde9dd1b2fb645ead/op-acceptance-tests/tests/interop/upgrade/post_test.go#L15\n- Check that anchor block of supervisor matches the upgrade timestamp\n- Check that the supervisor has some safety progression:\n    - For each level (local-unsafe, cross-unsafe, local-safe, cross-safe, finalized), check that we see a change.\n    - TODO: this is a duplicate, already ticketed elsewhere.\n- Check that log events from the upgrade block, when converted into an access-list, fail the check-access-list RPC check\n  - TODO: this may be covered in the testing that introduces the `>=` to `>`\n- Confirms that interop message can be included\n", "CLOSED", 0, "protolambda", "2025-05-01T16:18:17Z", "2025-06-02T17:14:24Z", "2025-06-02T17:13:21Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6ybzqI", 15392, "[U16] Review DisputeGame validation approach", "In some [previous ceremonies](https://github.com/ethereum-optimism/superchain-ops/blob/maur/010-base/tasks/holesky/001-pectra-defense/VALIDATION.md#L50) we have used `compareGames.sh` to validate that two dispute games have the same parameters set on them.\n\nThe StandardValidator [covers checking all of these values](https://github.com/ethereum-optimism/optimism/blob/03f8875ebe6dff287656601c14d83055e2d90ad9/packages/contracts-bedrock/src/L1/StandardValidator.sol#L406-L440) aside from the before and after DWETH and ASR.\n\nIf that is something we need to do, one option would be to [somehow retrieve a previously resolved game](https://github.com/ethereum-optimism/optimism/blob/op-contracts/v3.0.0-rc.2/packages/contracts-bedrock/src/L1/OptimismPortal2.sol#L368-L369) from the portal.\n\nAnother option would be to think more carefully about what actually makes an ASR and DWETH valid. Ideally we can check those properties directly rather than simply comparing to some other dispute game.", "CLOSED", 0, "maurelian", "2025-04-14T16:56:56Z", "2025-06-05T15:39:33Z", "2025-06-05T15:39:32Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6x8d1Q", 15334, "Test reorging out an invalid replacement block", "Drop a replacement block, after a L1 reorg re-instates the validity of the original sequenced L2 block.\n\nThis reorg test is low-priority, and does not have to be included in RC Beta.\n\nTechnically this can happen in two ways:\n- L1 reorgs back to the original L1 chain.\n- L1 reorgs to a new L1 chain, that confirms the original L2 block batch (reorg needs to be shallow enough such that the L2 block l1-info still points to an L1 block that was never reorged)\n\n\n", "OPEN", 0, "protolambda", "2025-04-10T11:54:38Z", "2025-06-03T14:18:42Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6x8cYk", 15333, "Test that L1 reorg correctly triggers L2 reorg of cross-safe block", "The cross-safe L2 blocks can reorg out when the L1 reorgs out a L2 batch.\n\nWe may need to include an alternative L2 batch, in case the L2 block we reorg was empty, to differentiate the L2 block with new content.\n\nReproduce this by forcing the L1 to reorg.\n\nThis is blocked by the L1-mode support in op-test-sequencer.\nSee #14128 \n", "CLOSED", 0, "protolambda", "2025-04-10T11:52:19Z", "2025-06-04T13:40:12Z", "2025-06-04T13:40:12Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6x8bTL", 15332, "Test cascading block replacements", "  - [x] replace a deposit-only block (check: action-tested)\n  - [x] replace a full block (check: action-tested)\n  - [ ] replace block that is only invalidated after late other L2s.\n    I.e. there was a L1-scope when it was objectively \"local-safe\" due to missing L2 data.\n       Steps to reproduce:\n       1. Create block on chain A\n       2. Create block on chain B that references something that does not exist on chain A\n       3. Batch-submit block from chain B into L1\n       4. Wait on L1, create empty L1 blocks\n       5. The block of chain B will be local-safe, for now.\n       6. Batch-submit block from chain A (this is \"late\", since block of B was already created after this block of A, and B was submitted earlier)\n       7. When we sync chain A we will discover that chain B is invalid, and the block needs to be replaced.\n", "OPEN", 0, "protolambda", "2025-04-10T11:50:22Z", "2025-06-03T14:18:45Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6x8a0n", 15331, "Test that L1 reorg correctly triggers L2 reorg of local-safe block", "Not to be confused with #15333 \n\nThis is before cross-L2 validation, where the local-safe chain itself is invalidated, due to the L1 change affecting L1 origins.\n\nWe can cover the following cases:\n  - [ ] op-node and op-supervisor reorg together\n  - [ ] op-node is on the good chain, while supervisor is on the good chain.\n  - [ ] op-supervisor is on the good chain, while op-node is on the wrong chain.", "CLOSED", 0, "protolambda", "2025-04-10T11:49:29Z", "2025-06-04T13:40:11Z", "2025-06-04T13:40:11Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6x8Wqn", 15329, "Test that chains sync reliably in different infra configurations", "Test that the chains sync as expected, with different setups, using devstack:\n  - [ ] missing op-node for a chain: warn about lacking source, keep other chains synced\n  - [ ] 1 managed op-node per chain: regular sync\n  - [ ] 2 managed op-nodes per chain: avoid duplicate sync work\n  - [ ] op-node managed by two op-supervisors: need detection, automatic disconnect\n", "CLOSED", 0, "protolambda", "2025-04-10T11:42:16Z", "2025-06-02T17:59:22Z", "2025-06-02T17:59:21Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6x8II3", 15324, "DoS testing checklist", "Implement these tests as acceptance tests, against the devnet-sdk devstack, such that these can run against both the kurtosis devnet, external net, and as same-process Go tests:\n\nThese tests should be possible to direct at proxyd, if proxyd is available in the devstack. (It can be a labeled L2ELNode instance)\n", "CLOSED", 0, "protolambda", "2025-04-10T11:16:46Z", "2025-06-02T14:53:34Z", "2025-06-02T14:53:33Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6xa0oK", 15267, "interop: migrate e2e tests from old supersystem to devstack", "The `op-e2e/interop/supersystem.go` is difficult to write clean tests against and unmaintainable.\n\nAll underlying system functionality is covered by the devstack (devnet-sdk package for e2e testing) already.\n\nWe should port over the tests, introduce some DSL where needed, and remove the old ones.\n", "OPEN", 0, "protolambda", "2025-04-07T11:49:42Z", "2025-06-03T14:17:59Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6vAUqd", 14970, "kurtosis-devnet: Interop Acceptance Tests Pass with rollup-boost + rbuilder", "To ensure that rollup-boost and rbuilder work end to end, we need to run the software as part of our integration testing using kurtosis. \n\nThis ticket represents the work required to get rollup-boost and rbuilder hooked up into kurtosis local devnet, running in CI and running the acceptance tests. We may want a matrix where we sometimes run with rollupboost/rbuilder and sometimes we don't\n\nWe may want to add a way to communicate with this software directly using the `devnet-sdk` clients.\n\nThis ticket says isthmus acceptance tests because the interop acceptance tests may not be complete yet. Ultimately the interop acceptance tests should be able to pass as well", "OPEN", 0, "tynes", "2025-03-20T16:48:01Z", "2025-06-02T17:18:10Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6onM1H", 14128, "interop: test-sequencing milestone 1: L1 mode", "See https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md#milestone-1-l1-mode\n\n\nMinimal version:\n- No L1 CL node\n- Single L1 EL node\n- L2 nodes all connected to this EL\n- Make the test-sequencer\n\nIn op-e2e we have a \"fake beacon node\", that serves a tiny subset of the beacon API to make blobs available to L2 nodes, while basically looping the engine-API instructions to make EL blocks, without any real beacon consensus.\n\nWe can support this type of block-building by:\n- implementing a builder package that connects to engine-API directly, and builds some simple native ethereum blocks (no payload attributes to prepare like in L2)\n- implementing a block type that fits the block interface of the test-sequencer, such that the regular full-sequencer package can loop over this, to build the mock L1 chain like we would with a L2 chain.\n\n", "CLOSED", 0, "protolambda", "2025-02-04T00:29:40Z", "2025-06-04T13:40:12Z", "2025-06-04T13:40:12Z", "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDODjvEJM6onMaA", 14126, "interop: test-sequencing milestone 0.3: attach tx-pool", "See https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md#milestone-0-testing-scope\n\nSupport `eth_sendRawTransaction`, on a unique user RPC route, per configured sequencer.\n\nFor the tx-submitting to work, we need:\n- To not enforce the JWT-Auth on the tx submitting RPC route. So `/sequencer/<x>` still has auth, but `/txs/<x>` should not.\n- To receive the transaction, in a list or maybe even full tx-pool.\n- Have a default mode, where it just forwards the tx to geth, basically like a proxy.\n\nAnd support:\n- `sequencer_includeBest(jobid)`: include best next tx from the tx-pool. (by priority fee). Not important for testing.\n- `sequencer_includeFirst(jobid, address)`: include best next tx from specific address from tx-pool. This is important for testing.\n- `sequencer_includeByHash(jobid, txHash)`: include specific tx from tx-pool\n\nGoal:\n- Services can submit their txs to the EL\n- The EL can configure the sequencer-endpoint to forward txs to the test-sequencer\n- The test-sequencer has full control over inclusion of txs\n  - Automatic\n  - Chosen by the test\n", "OPEN", 0, "protolambda", "2025-02-04T00:28:05Z", "2025-06-02T17:26:41Z", null, "ethereum-optimism/optimism", "2025-08-31 05:01:21"]
["I_kwDOMMiGhs66CIaP", 394, "Hosted API for supersim simulations", "**The Problem**\nCross-chain transactions might fail. Supersim is great for predicting failures of cross-chain interactions. But it's only a local tool. Seems like there is no API for calling it in real time and in large load.\n\nThere are many APIs for simulating transactions in a single chain. But none for cross-chain simulations.\n\n**Proposed Solution**\nHosted API that I can call with a cross-chain transaction calldata, for example to send USDC from Base to Unichain and deposit it into an LP. The API would use supersim to execute it on latest blocks of those two networks and return tx outcome.\n\n**Questions**\n- Does anything like this exist? \n- Do others have this problem? \n- Does supersim see value in this existing?\n- Would supersim be interested in collaborating on building this?", "OPEN", 0, "mazurroman", "2025-06-05T12:52:09Z", "2025-06-05T12:52:09Z", null, "ethereum-optimism/supersim", "2025-08-31 05:01:27"]
["I_kwDOFpg0Ns63Gq0E", 1146, "`10.0.238` is the last version that includes a `dist` directory", "Versions after `10.0.238` do not include a `dist` directory resulting in the following error when attempting to import:\n\n```\nModule not found: Can't resolve '@eth-optimism/tokenlist'\n```", "CLOSED", 0, "brianfryer", "2025-05-18T18:34:41Z", "2025-06-13T20:34:09Z", "2025-06-13T20:34:09Z", "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM67C1zp", 845, "Low balance on sponsored sender workers alerting", "", "OPEN", 0, "tremarkley", "2025-06-11T20:53:49Z", "2025-06-11T20:53:49Z", null, "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM67C1jB", 844, "Failed relays alerting", "", "OPEN", 0, "tremarkley", "2025-06-11T20:53:14Z", "2025-06-11T20:53:14Z", null, "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM67C1PF", 843, "Ponder logging", "", "OPEN", 0, "tremarkley", "2025-06-11T20:52:44Z", "2025-06-11T20:52:44Z", null, "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM67C0oO", 842, "Sponsored Sender logging", "", "OPEN", 0, "tremarkley", "2025-06-11T20:51:44Z", "2025-06-11T20:51:44Z", null, "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM67C0CS", 841, "Relayer logging", "", "OPEN", 0, "tremarkley", "2025-06-11T20:50:47Z", "2025-06-11T20:51:19Z", null, "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM67BtKA", 838, "Index gas tank events related to deposits, withdrawals and claims", "", "CLOSED", 0, "tremarkley", "2025-06-11T18:40:51Z", "2025-06-13T23:43:53Z", "2025-06-13T23:43:53Z", "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM67Br_z", 836, "Gas Tank contract", "", "OPEN", 0, "tremarkley", "2025-06-11T18:38:37Z", "2025-06-11T22:19:36Z", null, "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOKSJyfM62b5PT", 807, "Implement concurrent multiplier endpoint in gateway backend for Superstacks", "", "CLOSED", 0, "jvmi7", "2025-05-13T17:29:08Z", "2025-06-12T22:01:25Z", "2025-06-12T22:01:25Z", "ethereum-optimism/ecosystem", "2025-08-31 05:02:36"]
["I_kwDOL-xLQ862jOMu", 351, "[acceptance] Test: base; Conductor leadership transfer", "We should initiate conductor leadership transfers and ensure conductor and network metrics continue to look healthy.\n\nA couple cases to keep in mind and automate:\n- Test manual triggering of leadership transfer (i.e., testing what op-conductor-ops transfer leader does)\n- Ensure leadership transfer is triggered when the supervisor of the active sequencer goes down (destructive test)\n- Flashblocks-related leadership transfer cases, such as https://github.com/ethereum-optimism/infra/issues/350 and https://github.com/ethereum-optimism/infra/issues/314\n- Once Sunnyside backup sequencers are added to devnet deployments (first time will be as part of the Interop + Flashblocks Alphanet, see its [acceptance criteria](https://github.com/ethereum-optimism/devnets/issues/77)), we should extend these tests to also include leadership transfers to their sequencers.\n\nNote: This is a P0 / blocking capability for the High Availability Interop workstream: https://github.com/ethereum-optimism/optimism/issues/15992", "CLOSED", 0, "alfonso-op", "2025-05-14T10:50:23Z", "2025-06-09T21:03:08Z", "2025-06-09T21:03:08Z", "ethereum-optimism/infra", "2025-08-31 05:02:37"]
["I_kwDOL-xLQ862KHH2", 327, "[acceptance] [sysgo] Test: base; Complete Withdrawal Flow Test", "Test the entire withdrawal process from L2 to L1, including initiation, proof generation, and finalization.\n\n### Implementation\nImplement using op-devstack to configure a test environment with L1 and L2 chains. Initialize a funded account on L2, perform a withdrawal transaction to L1, wait for the challenge period, generate and submit the withdrawal proof, and verify the finalization on L1. Track all transaction hashes and confirm proper state changes on both chains.", "CLOSED", 0, "scharissis", "2025-05-12T08:31:46Z", "2025-06-12T09:22:37Z", "2025-06-12T09:22:37Z", "ethereum-optimism/infra", "2025-08-31 05:02:37"]
["I_kwDOKIwiaM67I_R1", 1657, "[DOCS] Incorrect Docker image references on releases page", "The [node-operators/releases](https://docs.optimism.io/operators/node-operators/releases#docker-images) page includes a section about Docker images, which currently lists:\n\t\u2022\tethereumoptimism/op-node\n\t\u2022\tethereumoptimism/op-geth\n\nHowever, in the section below, example commands reference different image names:\n\t\u2022\toptimism/op-node:<version>\n\t\u2022\toptimism/op-geth:<version>\n\nThere are several issues here:\n\t1.\tThe Docker images listed (ethereumoptimism/op-node, ethereumoptimism/op-geth) are outdated:\n\t\u2022\tethereumoptimism/op-node: last updated 3 years ago ([link](https://hub.docker.com/r/ethereumoptimism/op-node/tags))\n\t\u2022\tethereumoptimism/op-geth: last updated 2 years ago ([link](https://hub.docker.com/r/ethereumoptimism/op-geth/tags))\n\t2.\tThe alternative image names used in examples (optimism/op-node, optimism/op-geth) do not exist on Docker Hub.\n\n## Acceptance criteria\n\n\n\t1.\tThe release documentation should reference the correct and currently maintained Docker images.\n\t2.\tIf Docker images are no longer supported or maintained, this section should be removed or clearly marked as deprecated to prevent confusion.\n", "OPEN", 0, "polskikh", "2025-06-12T10:21:39Z", "2025-06-12T10:22:27Z", null, "ethereum-optimism/docs", "2025-08-31 05:02:38"]
["I_kwDOKIwiaM654CxO", 1644, "[DOCS] Quickstart guide for Superchain Interop env", "<!-- please fill out the description and acceptance criteria to the best to your ability. While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description \nA hand holding/spoon feeding guide on:\n1. TLDR what is the superchain and what interop means for your app (why should an app dev care about interop?)\n2. Walking through each of the tools and why you need them\n    * SuperCLI -> lets you easily manage multichain deployments \n    * Supersim -> local interop testnet env for testing\n    * devnet -> testnet for interop testing\n    * etc\n3. Walk through the SuperchainERC20 repo, explaining _why_ each of the deviations from the base standard where made, with the goal of giving the devs a solid understanding of the design shifts they need to think about when designing for interop. This might be easier to do with the tic-tac-toe example, but ideally the repo we use here is one that is likely to be maintained. \n4. Walk through env set up, deploying a SuperERC20 on a local env, then devnet. \n\n## Acceptance criteria\n* Builds up context from 0 (assuming EVM blockchain development understanding) \n    * What is the Superchain?\n    * What is superchain interop?\n    * Why is it good for my app?\n* Clearly explains the design considerations for interop\n* Hand holds the reader through using each of the interop tools\n\n## User stories\n<!-- User stories that illustrate the benefits of this issue. For example, this documentation improvement will allow user X to be able to Y. -->\nUsers are struggling to find and use the tooling we have built. If we have a better self paced guide devs are more likely to come away with the critical context needed to build interop ready apps. \n\n## Resources and support\n\nRight now we have many users asking about the various parts/tools, and needing to go to multiple resources to get all the answers. By having one, spoon feeding guide we can answer all these questions while providing important design context, and some \"why you should care\" which is missing from docs. \n\nThis is still beneficial even for power devs, as they can skim through the guide to get what they need. For non-power devs, this is a major unlock in understanding. \n\n![Image](https://github.com/user-attachments/assets/5527eb06-9d3e-46d0-9e40-0fc81701e879)\n\n## Action items\n* Ideally we get the techNERDs to review the PR before it goes live, as they (better than anyone) understand what the devs are missing in understanding and context. \n", "OPEN", 0, "Nicca42", "2025-06-04T16:52:15Z", "2025-06-09T17:45:49Z", null, "ethereum-optimism/docs", "2025-08-31 05:02:38"]
["I_kwDOKIwiaM63Lhyg", 1614, "[DOCS] L2OutputOracleProxy is not deployed and op-deployer can't be started without it", "Description\n\nThe guide was taken from [Creating your own L2 rollup testnet](https://docs.optimism.io/operators/chain-operators/tutorials/create-l2-rollup).\nop-deployer does not deploy the L2OutputOracleProxy contract, even though it is required to start op-proposer, which expects the --l2oo-address parameter.\nIn the [op-stack documentation](https://github.com/ethereum-optimism/optimism), L2OutputOracleProxy is marked as deprecated, yet without its address, op-proposer fails to start, leaving the deployment incomplete and causing confusion during network setup.\n\nThis raises uncertainty:\n\t\u2022\tIs L2OutputOracleProxy truly deprecated and no longer needed?\n\t\u2022\tIf it\u2019s still required, why isn\u2019t it deployed automatically?\n\t\u2022\tWhat address should be provided to --l2oo-address if no proxy is created?\n\nAcceptance criteria\n\t\u2022\tClarify the current role of L2OutputOracleProxy in op-proposer\n\t\u2022\tUpdate op-deployer documentation to explain whether this contract must be deployed manually and for what purpose\n\t\u2022\tIf the contract is no longer needed, update op-proposer to remove or replace the --l2oo-address requirement\n\nUser stories\n\t\u2022\tAs a developer, I want all necessary contracts to be deployed automatically so I don\u2019t have to manually intervene or troubleshoot missing components\n\t\u2022\tAs an OP Stack network operator, I want clear guidance on setting up op-proposer to ensure a reliable and complete L2 setup\n\nResources and support\n\t\u2022\t[op-proposer CLI source](https://github.com/ethereum-optimism/optimism/blob/develop/op-proposer/cmd/main.go)\n\t\u2022\t[op-deployer getting-started config](https://github.com/ethereum-optimism/optimism/blob/develop/op-deployer/configs/getting-started.json)\n\t\u2022\t[Discussions around deprecated components](https://github.com/ethereum-optimism/optimism/issues?q=is%3Aissue+L2OutputOracleProxy+deprecated)\n\nAction items\n\t\u2022\tConfirm whether L2OutputOracleProxy is still required in the latest OP Stack version\n\t\u2022\tDetermine if L2OutputOracle address can be used directly without the proxy\n\t\u2022\tAdd optional deployment of L2OutputOracleProxy to op-deployer, if still relevant\n\t\u2022\tUpdate documentation for both op-deployer and op-proposer regarding --l2oo-address\n\nThe last question is \"How to set up L2 Test Rollup in such situation?\".\n", "CLOSED", 0, "stailend", "2025-05-19T09:55:42Z", "2025-06-09T21:36:14Z", "2025-06-09T21:36:13Z", "ethereum-optimism/docs", "2025-08-31 05:02:38"]
["I_kwDOKIwiaM6lNXlG", 1226, "Feedback for \u201cDeposit flow\u201d", "https://docs.optimism.io/stack/transactions/deposit-flow\n\nThe step 5 seems not working:\n\n```\nThe next step is to find the hash of the failed relay. The easiest way to do this is to look in the internal transactions of the destination contract, and select the latest one that appears as a failure. It should be a call to L2CrossDomainMessenger at address 0x420...007. This is the call you need to replay.\n```\n\nAfter opening the link: https://sepolia-optimism.etherscan.io/address/0xEF60cF6C6D0C1c755be104843bb72CDa3D778630#internaltx I cannot find the internal transactions, therefore, I cannot continue the test.\n\nNot sure if it is caused by etherscan or something else.\n\nbtw, I got another question. In step 4, it says \"The transaction will be successful on L1, but then emit a fail event on L2.\", but seems \"L1_RPC=https://sepolia.optimism.io\", is the same as \"export ETH_RPC_URL=https://sepolia.optimism.io\". I am a bit confused, seems they are on the same chain? Can we simulate L1 and L2 on the same chain? Thanks.", "CLOSED", 0, "brucexu-eth", "2025-01-07T02:03:31Z", "2025-06-10T15:43:24Z", "2025-06-10T15:43:24Z", "ethereum-optimism/docs", "2025-08-31 05:02:38"]
["I_kwDOH2Qg5s65wYa7", 623, "eth_getTransactionCount returns incorrect nonce (0x1 instead of 0x0) for pending txs", "The Base node returned an incorrect nonce (0x1 instead of 0x0) from eth_getTransactionCount.\nAs a result, our system used nonce 1 to construct a transaction, causing it to get stuck in the mempool.\n\n`curl --request POST \\\n  --url https://localhost:8545 \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionCount\",\n    \"id\": 1,\n    \"params\": [\n      \"0x73236DdACe4Aaa22A96aE4AF21C48a49ec2c9861\",\n      \"pending\"\n    ]\n  }'`\n\nEnvironment:\n\u2022 Client: Op-Geth,Op-node\n\u2022 Version: v1.101511.0, v1.13.3\n\u2022 Network: Base Mainnet\n\n\nAdditional Notes:\n\u2022 We noticed that Reth v1.4.7 includes a fix for a similar issue.\n\u2022 Op-Geth does not yet appear to have a fix for this.\n", "OPEN", 0, "mukul3097", "2025-06-04T05:16:46Z", "2025-06-12T16:59:13Z", null, "ethereum-optimism/op-geth", "2025-08-31 05:02:38"]
["I_kwDOH2Qg5s6pchKB", 501, "Operator Fee", "Tracking operator fee work in op-geth\n\n[Design doc](https://github.com/ethereum-optimism/design-docs/pull/81/files)", "CLOSED", 0, "teddyknox", "2025-02-10T15:38:32Z", "2025-06-10T19:27:24Z", "2025-06-10T19:27:24Z", "ethereum-optimism/op-geth", "2025-08-31 05:02:38"]
["I_kwDOEf1bQc68sQ6Y", 1165, "broken link - https://community.optimism.io/docs/developers/build/custom-gas-tokens/", "", "OPEN", 0, "offt0theether", "2025-06-22T07:00:30Z", "2025-06-22T07:00:30Z", null, "ethereum-optimism/community-hub", "2025-08-31 06:27:31"]
["I_kwDOKIwiaM694eKA", 1676, "Movement", "## Description  \nThis issue is to request updated or new documentation in support of Movement Network\u2019s integration and use of Optimism infrastructure. Specifically, we would like to ensure the docs reflect:\n\n- MOVE token utility (bridging, staking, governance)\n- DAO setup and integration on Optimism\n- Community contribution guidance (e.g. using Tally, Safe, Ko-fi)\n- Optimism-native features leveraged by Movement Network\n\n## Acceptance criteria  \n- Relevant Optimism documentation updated to include Movement use case  \n- Any Movement-specific pages or references are clearly documented  \n- GitHub and Wiki links to Movement assets are included  \n- Aligned with Optimism documentation structure and tone  \n- Final review by Optimism Docs team\n\n## User stories  \n- As a builder using Movement on Optimism, I want to understand how to stake MOVE or vote in DAO proposals  \n- As a governance participant, I want clarity on how Movement leverages Optimism infra like the OP stack or bridges  \n- As a contributor, I want clear steps to get involved in the Movement DAO from an Optimism perspective\n\n## Resources and support  \n- Website: [https://movementlabs.xyz](https://movementlabs.xyz)  \n- Wiki: [https://wiki.movement.xyz/kokyat](https://wiki.movement.xyz/kokyat)  \n- GitHub: [https://github.com/movementlabsxyz](https://github.com/movementlabsxyz)  \n- Token: 0x3073f7aAA4DB83f95e9FFf17424F71D4751a3073  \n- Governance Tools: Tally, Safe, EAS  \n- SME Contacts: KoKyat, ThaeThae, HanGyi\n\n## Action items  \n1. Review Movement-related tooling on Optimism  \n2. Draft supporting docs or examples  \n3. Link to Movement resources and update references in the docs  \n4. Review with OP Labs Docs team  \n5. Final approval and publish\n\n<!-- Leave a comment (optional) -->\nLooking forward to collaborating! Please let us know if there\u2019s a preferred structure for partner project documentation.", "CLOSED", 0, "cshein45", "2025-06-29T03:17:27Z", "2025-09-11T19:27:09Z", "2025-09-11T19:27:09Z", "ethereum-optimism/docs", "2025-08-31 06:27:31"]
["I_kwDOKIwiaM694dH-", 1674, "## Description of the updates required", "## Acceptance Criteria\n\n- Updated section for MOVE token staking with clear parameters and benefits\n- Visual diagram for DAO governance structure\n- Inclusion of current community funding models (Ko-fi, grants, NFT utility)\n- Bilingual content support (English + Burmese)\n\n## Resources\n\n- [Movement Wiki](https://wiki.movement.xyz/kokyat)\n- [Whitepaper](https://www.movementnetwork.xyz/whitepaper/movement-whitepaper_en.pdf)\n- [GitHub](https://github.com/movementlabsxyz)\n- [Notion Spec](https://www.notion.so/1ab2c82b8cb580ccb5bdcf7625f72c86)\n- SMEs: KoKyat, ThaeThae, HanGyi\n\n## Action items\n\n1. Review linked resources and meet with SMEs (KoKyat, etc.)\n2. Write the first draft of updated content\n3. Share draft with SMEs for feedback\n4. Conduct peer review (e.g. HanGyi or ThaeThae)\n5. Final SME approval\n6. Publish on wiki.movement.xyz\n\n## Github Issue Label Criteria\n\n<details>\n<summary>Priority</summary>\n\n- `p-high`: This is important for public-facing DAO and token communication.\n\n</details>\n\n<details>\n<summary>T-shirt size</summary>\n\n- `s-M`: Moderate work requiring cross-team collaboration and translation.\n\n</details>\n\n<details>\n<summary>Content evaluation</summary>\n\n- `a-moderate`: The page requires several updates and partial rewrites.\n\n</details>\n\n## MDX Metadata Format\n\n```mdx\n---\ntitle: \"Movement DAO Governance & Token Utility\"\ntags: [\"movement-network\", \"dao\", \"tokenomics\", \"funding\"]\ndescription: \"Learn how the Movement Network organizes DAO governance, token staking, and community fundraising via onchain tools.\"\n---\n\n<details>\n<summary>Component tags</summary>\n\n\nl1-contracts\nl2-contracts\nstandard-bridge\nop-gov-token\nop-program\nop-node\ndev-console\n\n</details>\n\n\n<details>\n<summary>Engineering tags</summary>\n\n\neng-growth\neng-devx\neng-protocol\n\n</details>\n```\n\n\n\n\u2e3b", "OPEN", 0, "cshein45", "2025-06-29T03:07:36Z", "2025-06-29T03:09:19Z", null, "ethereum-optimism/docs", "2025-08-31 06:27:31"]
["I_kwDOL-xLQ865xSrw", 397, "[acceptance] Use best gate for the persistent devnets", "Ensure the devnets aren't just using the 'base' gate for acceptance tests but are instead using the most appropriate gate for their target feature(s).", "CLOSED", 0, "scharissis", "2025-06-04T06:53:46Z", "2025-06-26T02:19:57Z", "2025-06-26T02:19:57Z", "ethereum-optimism/infra", "2025-08-31 06:27:31"]
["I_kwDOL-xLQ8627WNb", 354, "[acceptance] flashblocks: transactions", "There a couple of RPCs that have new fields. Our acceptance test could send transactions with these new fields and then verify that things are valid and working.See: https://flashblocks.base.org/docs  Example: curl https://sepolia-preconf.base.org/ -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByNumber\",\"params\":[\"pending\",true],\"id\":1}' # the \u201cpending\u201d field is new and returns the latest pending flashblock", "CLOSED", 0, "scharissis", "2025-05-16T13:25:23Z", "2025-06-25T17:55:15Z", "2025-06-25T17:55:14Z", "ethereum-optimism/infra", "2025-08-31 06:27:31"]
["I_kwDOKSJyfM67QigY", 851, "Set up Bugbash for SuperStacks claim on website", "", "CLOSED", 0, "jvmi7", "2025-06-12T22:07:08Z", "2025-06-24T01:17:38Z", "2025-06-24T01:17:38Z", "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKSJyfM67QhVl", 848, "Clean up claim UI", "- [ ] Wire up rewards amount to claim social share card\n- [ ] Wire up SuperStacks TVL and total participants\n- [ ] Hide claim button on claim success", "CLOSED", 0, "jvmi7", "2025-06-12T22:04:38Z", "2025-06-24T01:17:27Z", "2025-06-24T01:17:27Z", "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKSJyfM67Qf5Q", 847, "Integrate rank + XP into claim endpoint", "", "CLOSED", 0, "jvmi7", "2025-06-12T22:02:02Z", "2025-06-24T01:17:45Z", "2025-06-24T01:17:45Z", "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKSJyfM67BuNM", 840, "Set up job to claim funds from gas tank after relayer has successfully relayed message", "", "CLOSED", 0, "tremarkley", "2025-06-11T18:42:52Z", "2025-06-27T22:07:07Z", "2025-06-27T22:07:07Z", "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKSJyfM67Bt1r", 839, "Update relayer to only relay messages for which the gas tank has funds", "", "CLOSED", 0, "tremarkley", "2025-06-11T18:42:11Z", "2025-06-26T19:14:21Z", "2025-06-26T19:14:21Z", "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKSJyfM62-K_9", 821, "withdrawal pathways for superchain output roots", "After the interop hard fork, the output roots structure for chains will change\n\n**This means the withdrawal code within viem will need to be updated to support superchain set of interoperable chains.**\n\n`OptimismPortal.superRootsActive` is an onchain API that we can use to determine if the chain is post interop hard fork. The OptimismPortal version is likely another easy mechanism\n\n**Case 1**: For > 1 chains in a dependency set, we need an RPC per chain. You used to be able to do these proofs just with the single RPC but this will no longer be the case. `prove(superRoot([chainAOutputRoot, chainBOutputRoot]))`\n\n**Case 2**: For = 1 chains with interop proofs enabled, it's a very slight modification to the proof code. `prove(superRoot([outputRoot]))`. A deterministic way to generate the super root\n\n**Case 3**: If this is any other chain where OptimismPortal.superRootsActive either reverts or returns false, then you use the old proof code.", "OPEN", 0, "hamdiallam", "2025-05-16T19:33:00Z", "2025-06-25T21:40:21Z", null, "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKSJyfM62bclO", 800, "Google analytics tracking for blog posts on optimism.io", "![Image](https://github.com/user-attachments/assets/d6084264-b2f2-4b87-8ca3-857c0cebc83b)", "CLOSED", 0, "jvmi7", "2025-05-13T16:39:20Z", "2025-06-24T01:18:05Z", "2025-06-24T01:18:05Z", "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKSJyfM6xgmLz", 731, "Add Standard Actions to @eth-optimism/viem docs", "Right now the docs for the standard actions inside the @eth-optimism/viem package are not being auto-generated. With this ticket implemented, running `pnpm run docs` inside of the viem package, should autogenerate docs for the non-interop actions in the @eth-optimism/viem package", "CLOSED", 0, "tremarkley", "2025-04-07T22:13:52Z", "2025-06-23T17:03:34Z", "2025-06-23T17:03:34Z", "ethereum-optimism/ecosystem", "2025-08-31 06:27:32"]
["I_kwDOKIwiaM69vf7p", 1671, "[TUTORIAL] How to Update a Fee Vault", "### Tutorial title\n\nHow to Update a Fee Vault\n\n### Tutorial description\n\nThis tutorial will go over how to update a fee vault to have a new recipient and withdrawal network. \n\n\n\n\n\n### Tutorial tags\n\npredeploys, smart contracts\n\n### Skill level\n\nIntermediate\n\n### Hosted on Optimism.io or hosted elsewhere?\n\nHosted on optimism.io\n\n### For tutorials to be hosted on Optimism.io: Tutorial Content\n\n_No response_\n\n### For tutorials hosted elsewhere: URL to tutorial\n\n_No response_\n\n### Additional context\n\nThe general steps are as follows:\n1. Deploy a new fee vault onto the chain ([such as the Sequencer Fee Vault](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/L2/SequencerFeeVault.sol)). Set the new recipient and withdrawal network in the constructor.\n2.  Call the [upgrade function on ProxyAdmin.sol](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/universal/ProxyAdmin.sol#L152) with the proxy address (0x4200000000000000000000000000000000000011 for the Sequencer Fee Vault as an example) and the new implementation address as arguments. This needs to be done as a deposit transaction to do step 2, because the owner of the proxy is the[ L2 ProxyAdmin owner](https://docs.optimism.io/superchain/privileged-roles#l2-proxy-admin), which is the aliased L1 ProxyAdmin owner.", "OPEN", 0, "ZakAyesh", "2025-06-27T16:11:19Z", "2025-06-28T07:39:27Z", null, "ethereum-optimism/docs", "2025-08-31 06:27:32"]
["I_kwDOKIwiaM6uUI1y", 1508, "[DOCS] A suggestion about Bridging ERC-20 Tokens with Viem", "The documentation explicitly states in sections like [Preparing for Optimism SDK deprecation](https://docs.optimism.io/notices/sdk-deprecation) that *The Optimism SDK will be deprecated*. As a result, the guide on [Bridging ERC-20 tokens with viem](https://docs.optimism.io/app-developers/tutorials/bridging/cross-dom-bridge-erc20) **needs to be updated**.  \n\nBefore the documentation is updated, this creates a gap. Would it be possible to provide some clarifications or progress updates? Potential additions could include:  \n\n1. **Status of the Optimism SDK:** My research indicates that the package was last updated four months ago. Has the team decided to continue maintaining the existing features of the Optimism SDK, or will support for them be discontinued?  \n2. **Current support in Viem:** Based on my findings, Viem has limited support for ERC-20 bridging. However, it is still possible for users to complete ERC-20 token bridging using Viem alone.  \n\nUnless I have missed any key information, I believe the Optimism SDK is currently more convenient than Viem for the tutorial's use case. In my [discussion post](https://github.com/ethereum-optimism/developers/discussions/17#discussioncomment-12517600), I highlighted some potential challenges when using Viem alone for this process.  \n\nI would appreciate any feedback on this issue and the discussion I shared.", "CLOSED", 0, "opfocus", "2025-03-17T10:15:46Z", "2025-06-24T16:45:51Z", "2025-06-24T16:45:50Z", "ethereum-optimism/docs", "2025-08-31 06:27:32"]
["I_kwDOH2Qg5s6vJHBQ", 555, "Slow Block Retrieval in op-geth", "Hello, I have synced an op-geth full node, but I often can't retrieve the latest block via HTTP or WebSocket, sometimes experiencing delays of over 6 seconds\u2014how can I fix this, would Reth be a better alternative to Geth, is there any way to optimize Geth for faster block retrieval, are there subscription services like bloXroute that provide real-time blocks without delay, and are there any more affordable alternatives?", "CLOSED", 0, "AikoTsumugi", "2025-03-21T13:24:38Z", "2025-07-05T05:51:09Z", "2025-07-05T05:51:09Z", "ethereum-optimism/op-geth", "2025-08-31 06:27:32"]
["I_kwDODjvEJM6-HU-o", 16618, "op-deployer v0.4.0-rc.2 gives error when run with `standard-overrides`", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\nWith v0.4.0-rc.2 (I tried v0.4.0-rc-5 but that fails at an earlier step, so I tried rc.2) when I run the following command:\n\n```bash\nbin/op-deployer apply --workdir $SOME_TEMP_WORK_DIR \\\n    --l1-rpc-url \"${L1_ETH_RPC_URL}\" \\\n    --private-key \"${DEPLOYER_PRIVATE_KEY}\"\n```\n\nusing this intent.toml:\n\n```toml\nconfigType = 'standard-overrides'\nfundDevAccounts = false\nl1ChainID = 11155111\nl1ContractsLocator = 'tag://op-contracts/v3.0.0-rc.2'\nl2ContractsLocator = 'tag://op-contracts/v3.0.0-rc.2'\nopcmAddress = '0xfbceed4de885645fbded164910e10f52febfab35'\nuseInterop = false\n\n[[chains]]\n  baseFeeVaultRecipient = '0x9654A3786f960dB19a64dFF16FDc34eD6090A760'\n  eip1559Denominator = 50\n  eip1559DenominatorCanyon = 250\n  eip1559Elasticity = 6\n  id = '0x00000000000000000000000000000000000000000000000000000000050e1230'\n  l1FeeVaultRecipient = '0x9654A3786f960dB19a64dFF16FDc34eD6090A760'\n  operatorFeeConstant = 0\n  operatorFeeScalar = 0\n  sequencerFeeVaultRecipient = '0x9654A3786f960dB19a64dFF16FDc34eD6090A760'\n\n  [chains.roles]\n    batcher = '0xeb807C42f290037a11ab63d2cCfF03682308B1Ba'\n    challenger = '0x19FFcD2638Cb70514332254312DF196c3f80fdCB'\n    l1ProxyAdminOwner = '0x9654A3786f960dB19a64dFF16FDc34eD6090A760'\n    l2ProxyAdminOwner = '0xa765a3786f960db19a64dff16fdc34ed6090b871'\n    proposer = '0x417aFd469A6187A9360a29272c6555BdA5B80088'\n    systemConfigOwner = '0x9654A3786f960dB19a64dFF16FDc34eD6090A760'\n    unsafeBlockSigner = '0xA869D0C804dd3EC83B76eC4521BE2147a25a3387'\n\n[globalDeployOverrides]\n  l2BlockTime = 1\n\n[superchainRoles]\n  ProtocolVersionsOwner = '0xfd1d2e729ae8eee2e146c033bf4400fe75284301'\n  SuperchainGuardian = '0x7a50f00e8d05b95f98fe38d8bee366a7324dcf7e'\n  SuperchainProxyAdminOwner = '0x1eb2ffc903729a0f03966b917003800b145f56e2'\n\n```\n\nI expect my OP contracts to be deployed successfully, and instead I get the error:\n\n`Application failed: error in pipeline stage apply: cannot set superchain roles for predeployed OPCM`\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n```\ngit clone --branch op-deployer/v0.4.0-rc.2 --depth=1 https://github.com/ethereum-optimism/optimism.git && \\\n    cd optimism/op-deployer && \\\n    just build\ncp intent.toml $SOME_WORK_DIR\n\nbin/op-deployer apply --workdir $SOME_WORK_DIR \\\n    --l1-rpc-url \"${L1_ETH_RPC_URL}\" \\\n    --private-key \"${DEPLOYER_PRIVATE_KEY}\"\n```\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\nI get a state.json file to be created, which contains the results of a successfully run of the op-deployer pipeline\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\nMac Sequoia 15.5\nop-deployer v0.4.0-rc.2\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n`Application failed: error in pipeline stage apply: cannot set superchain roles for predeployed OPCM`\n\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\nNote that are using `standard-overrides` because we want to set the blocktime to be 1 second, which is different from the default. From skimming through the code it looks like this puts it on a different code execution path where op-deployer then gets confused by the expected initial state of the system, namely that it's trying to use a pre-deployed OPCM but it's also trying to set the superchain roles, which results in the error I pasted above. I want to use the pre-deployed OPCM because that's how contract upgrades in OP work now, and I don't care about setting the superchain roles.\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "CLOSED", 0, "Melvillian", "2025-06-30T19:16:57Z", "2025-06-30T20:32:35Z", "2025-06-30T20:32:35Z", "ethereum-optimism/optimism", "2025-08-31 06:27:35"]
["I_kwDOLB-lzc69SW3n", 734, "Embed consensus node in supervisor", "Placeholder issue for research around deprecating of managed mode RPC API (aka indexing and following API) in favour of embedding op-node in op-supervisor and kona-node in kona-supervisor", "OPEN", 0, "emhane", "2025-06-25T13:42:35Z", "2025-06-25T13:42:35Z", null, "ethereum-optimism/specs", "2025-08-31 06:27:47"]
["I_kwDOLB-lzc67wzyZ", 725, "Add missing Super DA Errors", "Give error codes to data availability errors caused by reorg, from Go impl currently missing in spec \nhttps://github.com/ethereum-optimism/optimism/blob/881dd74bfd383637a5406aeb9f7543287f91fea4/op-supervisor/supervisor/types/error.go#L18-L24\nhttps://github.com/ethereum-optimism/specs/blob/main/specs/interop/supervisor.md#errors", "OPEN", 0, "emhane", "2025-06-16T13:57:25Z", "2025-06-25T12:30:06Z", null, "ethereum-optimism/specs", "2025-08-31 06:27:47"]
["I_kwDOLB-lzc66CzE6", 718, "Add constraints for `supervisor_syncStatus`", "Add that `minSyncedL1`, as well as `safeTimestamp` and `finalizedTimestamp` are set as the min value from the latest block of each l2.\n\nhttps://github.com/ethereum-optimism/optimism/blob/fac40575a8bcefd325c50a52e12b0e93254ac3f8/op-supervisor/supervisor/backend/status/status.go#L117-L131\n\nhttps://github.com/op-rs/kona/blob/eec33fa42ea022a3def549e02a625a5c37982909/crates/supervisor/core/src/rpc/server.rs#L138-L152\n", "CLOSED", 0, "emhane", "2025-06-05T13:39:45Z", "2025-06-26T14:21:52Z", "2025-06-26T14:21:52Z", "ethereum-optimism/specs", "2025-08-31 06:27:47"]
["I_kwDODjvEJM69xhV_", 16612, "op-chain-ops: broken dependency github.com/tyler-smith/go-bip39", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nhttps://github.com/tyler-smith/go-bip39 is no longer hosted on GitHub, and thus is no longer available as a dependency. \n\nHowever, it is still referred on the code. \n\nhttps://github.com/ethereum-optimism/optimism/blob/develop/op-chain-ops/devkeys/hd.go#L8\nhttps://github.com/ethereum-optimism/optimism/blob/develop/go.mod#L62\n\n\nIt's still in proxy.golang.org, but when you don't use GOPROXY, `go mod tidy` breaks.\n\nhttps://proxy.golang.org/github.com/tyler-smith/go-bip39/@v/v1.1.0.info\n\n\n**Steps to Reproduce**\n\nOn a clean clone, \n```\nexport GOPROXY=off\ngo mod tidy\n```\n\nI think this command made me notice this broken dependency. \n```\n go clean -cache -modcache -testcache && go mod download\n```\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\ngo version go1.24.3 darwin/arm64\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n```\n        remote: Repository not found.\n        fatal: repository 'https://github.com/tyler-smith/go-bip39/' not found\n\n```\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "seungjulee", "2025-06-27T19:24:42Z", "2025-06-27T19:34:08Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM69lIto", 16598, "[acceptance] Use block times for waits/timeouts instead of hardcoding values", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nCurrently we're hardcoding long timeouts for tests to succeed on persistent devnets.\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\nUse the block time to potentially calculate the timeouts.\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "OPEN", 0, "serpixel", "2025-06-26T22:23:05Z", "2025-06-26T22:23:05Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM69gH7d", 16586, "Question on op-deployer: Why is ID a hash in ChainState", "Hey team,\n\nAt the time of writing this, in `op-deployer`, it would seem that `ChainState.ID`  is of type `common.Hash`.  found [here](https://github.com/ethereum-optimism/optimism/blob/b6a82c2de9c9372d3012e73e702e9671579425b7/op-deployer/pkg/deployer/state/state.go#L94)\n\nadditionally, that gets compared via `==` in the `Chain` function [here](https://github.com/ethereum-optimism/optimism/blob/b6a82c2de9c9372d3012e73e702e9671579425b7/op-deployer/pkg/deployer/state/state.go#L78)\n\nso, a few questions arise:\n* is that supposed to be the chain id? wouldn't it be more appropriate to have it as an integer type  (such as `uint64` or `big.Int`)? or am I missing something? \ud83e\udd14 \n* if the id should be a hash, should that comparison be using [Hash.Cmp](https://pkg.go.dev/github.com/ethereum/go-ethereum/common#Hash.Cmp) ?\n\nThanks for your help in advance.", "OPEN", 0, "ClaytonNorthey92", "2025-06-26T14:23:55Z", "2025-06-26T14:23:55Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM69YJ5b", 16583, "Unused internal/private function check script", "Discussed: https://github.com/ethereum-optimism/optimism/pull/16470#discussion_r2159077432\n\nThe idea for this is:\n\nThis script would for each contract (e.g ContractA) in the contract-bedrock folder with internal/private functions (e.g functionA and functionB)\n- Go through all artifacts\n- For each artifact, check if ContractA is imported, if it is not, check the next artifact\n- If it is imported, loop through each of that artifacts functions and check if functionA or functionB is invoked, if none of them are invoked after looping, go to the next artifact\n- if e.g functionA is invoked, mark it as true so that it does not need to be checked for again and only check for functionB for other artifacts.\n- once all its internal/private functions are found to be invoked, go to the next contract e.g contractB\n\nA similar system as the one used for the [opcm upgrade checks](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/checks/opcm-upgrade-checks/main.go) can be used for checking through all possible nodes of a function.\n\nThis is nuanced however because there are edge cases like, what if we do not call the internal/private function but we use it's function type as an arg somewhere or for something else, etc", "OPEN", 0, "AmadiMichael", "2025-06-25T23:26:01Z", "2025-06-25T23:26:32Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM69FQuM", 16559, "op-acceptance-tests: interop tx with invalid attribute not evicted from the mempool", "Find out why the interop tx with invalid attribute is _sometimes_ not evicted from the mempool.\n\nRelevant logs by analyzing this [CI failure](https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/94101/workflows/fa3916ed-fb03-4f39-9d81-d576303cdd6b/jobs/3658740/steps), looking at [op-geth logs](https://output.circle-artifacts.com/output/job/b52a398a-80a4-4629-8f90-da42694d3df3/artifacts/0/op-acceptance-tests/kurtosis-logs/interop-devnet--454e38021ce8411eb7770ef1ab5e3e7b/op-el-2151909-node0-op-geth--e3f09dbb1a7c439da31819e6e7906d2c/output.log),\n\n```\nWARN [06-20|19:09:56.007] Transaction was rejected during block-building hash=1ea29c..b2fbe2 err=\"conflicting data\"\n...\nWARN [06-20|19:10:32.011] Transaction was rejected during block-building hash=1ea29c..b2fbe2 err=\"transaction was previously rejected\"\nWARN [06-20|19:11:32.006] Transaction was rejected during block-building hash=1ea29c..b2fbe2 err=\"transaction was previously rejected\"\nWARN [06-20|19:12:32.010] Transaction was rejected during block-building hash=1ea29c..b2fbe2 err=\"transaction was previously rejected\"\nWARN [06-20|19:13:32.009] Transaction was rejected during block-building hash=1ea29c..b2fbe2 err=\"transaction was previously rejected\"\nWARN [06-20|19:14:32.006] Transaction was rejected during block-building hash=1ea29c..b2fbe2 err=\"transaction was previously rejected\"\nWARN [06-20|19:15:32.005] Transaction was rejected during block-building hash=1ea29c..b2fbe2 err=\"transaction was previously rejected\"\n```\nthe rejected tx is keep looping back to the block builder, every 1 minute.\n\nRelated: https://github.com/ethereum-optimism/optimism/pull/16553", "OPEN", 0, "pcw109550", "2025-06-24T14:41:16Z", "2025-06-25T02:57:15Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM69Ehk2", 16558, "op-conductor alerting for indefinite sequencer halts", "Despite the availability of other healthy sequencers worthy of becoming a leader,\nan active leader sequencer can become unhealthy due to a cause not impacting normal block building.\n\nFor example, when there are failing rbuilder health checks while default block building is occurring well.\n\nThis conductor would then be indefinitely stuck on itself to become healthy again even if there are potentially other healthy conductors/sequencers worthy of becoming leader.\n\nThis would expose the network to even more catastrophic unhealthiness while this occurs.\n\nWe should be alerted about this before encountering unsafe stalls.\n\nAcceptance criteria:\n- Have an alert cognizant of this situation with a relevant runbook which guides the engineer to evaluate the health of other sequencers and perform a manual leadership transfer to one of them breaking this indefinite halt.", "CLOSED", 0, "yashvardhan-kukreja", "2025-06-24T13:46:27Z", "2025-06-25T20:37:15Z", "2025-06-25T20:37:15Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM684nWR", 16545, "interop: Spike out op-node/op-supervisor v2", "", "OPEN", 0, "mslipper", "2025-06-23T17:45:28Z", "2025-10-01T14:41:02Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM68xmqk", 16536, "op-acceptance-tests: load test: sometimes onchain balance depletes before offchain budget", "We budget transactions offchain so we can proactively shut down the test before spending too much eth. When the onchain and offchain budgets start with the same amount of eth, we may never hit an overdraft error (the stopping condition). It would be good to understand why this is.", "OPEN", 0, "joshklop", "2025-06-23T07:37:51Z", "2025-06-23T08:41:16Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM68i0yD", 16524, "op-{node|supervisor}: Improve reset logic", "### Purpose\n\nAttempts to consolidate or track related three issues:\n- https://github.com/ethereum-optimism/optimism/issues/16314\n- https://github.com/ethereum-optimism/optimism/issues/16315\n- https://github.com/ethereum-optimism/optimism/issues/16321\n\nAll these three issues are closely related, and desire for below statement\n- Supervisor is responsible for resetting the correct {localUnsafe, crossUnsafe, localSafe, crossSafe, finalized}.\n\nCurrent implementation does not do this, and make op-node decide the correct local unsafe block by traversing local unsafe by itself. Below PRs are the step-by-step evolvement of this op-node side logic:\n- https://github.com/ethereum-optimism/optimism/pull/16052 (unsafe head reset was ignored so fixed)\n- https://github.com/ethereum-optimism/optimism/pull/16312 (optimization: search correct unsafe head backwards)\n- https://github.com/ethereum-optimism/optimism/pull/16276 (optimization: binary search correct unsafe head)\n\nWe want to reduce complexity and isolate the responsibility of the determinism of correct reset target at op-supervisor.\n\nWhen we **move the correct unsafe-head finding logic for reset from op-node to op-supervisor**, we solve because https://github.com/ethereum-optimism/optimism/issues/16314 because it brings consistency; op-supervisor is responsible for all safety levels to reset, and also solve https://github.com/ethereum-optimism/optimism/issues/16315 because while calculating the correct local unsafe reset target from the op-supervisor, op-supervisor must track correct L1 and check L1 origin to determine the target unsafe head to reset, and finally solve https://github.com/ethereum-optimism/optimism/issues/16321 since if a reorg happens, previously correct unsafe blocks will become invalid because their L1 origin will be invalidated(by choosing option 2 at the #16321 issue).\n\n### Goal\n\n**Move the correct unsafe-head finding logic for reset from op-node to op-supervisor** by\n- checking target unsafe's L1 origin validation at the op-supervisor, before we send it to op-node.\n- we may trigger reset on the op-supervisor side to update to unsafe head having correct L1 origin (cherry picked from https://github.com/ethereum-optimism/optimism/issues/16315)\n- we may handle the unsafe-head finding logic different between pre/post interop differently because op-supervisor does not have unsafe DB for pre-interop. (cherry picked from https://github.com/ethereum-optimism/optimism/issues/16314)\n\n### Codepath\n\nRelevant codepath that needs to be visited:\n\n1. op-supervisor consumes `supervisorTypes.ManagedEvent{Reset}`\nhttps://github.com/ethereum-optimism/optimism/blob/ad69223dd421566609d710405393128489b6facd/op-supervisor/supervisor/backend/syncnode/node.go#L268-L270\n2. `resetFullRange()` is called, fetching latest local safe in supervisor db\n3. `initiateReset()` is called, binary searching between the activation block and latest local safe, finding the reset target.\n4. `resetHeadsFromTarget()` is called\n- based on the reset target, it determines {localUnsafe, crossUnsafe, localSafe, crossSafe, finalized}. Currently the local safe is set to target:\nhttps://github.com/ethereum-optimism/optimism/blob/ad69223dd421566609d710405393128489b6facd/op-supervisor/supervisor/backend/syncnode/reset.go#L82-L86\n\nWe now update the comment and pick the latest possible unsafe target at the op-supervisor.\nop-supervisor tracks all relevant info, unsafe head and L1 blocks so it is possible to determine the precise unsafe head.\n\n5. op-node will receive the `Reset()` request from the op-supervisor and will trust the op-supervisor provided unsafe head and only validates against its target EL, like other heads like\nhttps://github.com/ethereum-optimism/optimism/blob/ad69223dd421566609d710405393128489b6facd/op-node/rollup/interop/managed/system.go#L420-L424\n\n\n\n\n\n", "OPEN", 0, "pcw109550", "2025-06-20T12:56:13Z", "2025-06-24T14:42:05Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM67-LDK", 16468, "flashblocks: enable on eris-0", "For having confidence in flashblocks enough for it to be able to run in op-sepolia, we need to enable flashblocks in a non-interop environment like that of eris-0 with the latest components of rollup boost and rbuilder", "CLOSED", 0, "yashvardhan-kukreja", "2025-06-17T14:03:20Z", "2025-06-25T18:05:57Z", "2025-06-25T18:05:56Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM67r6hh", 16437, "Spike: CI SLAs", "Explore whether we'd like to adopt internal SLAs for our continuous integration pipeline. If we would like to do so, produce a first draft and get it ratified.", "CLOSED", 0, "scharissis", "2025-06-16T07:21:42Z", "2025-06-25T05:58:30Z", "2025-06-25T05:58:06Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM67qTAm", 16435, "op-acceptance-tests: interop: add load test with invalid executing messages", "Spam a fixed number of invalid executing messages per slot. See how it affects the latency of valid executing messages. The \"fixed number\" should be configurable.", "CLOSED", 0, "joshklop", "2025-06-16T03:34:05Z", "2025-06-25T13:44:37Z", "2025-06-25T13:44:37Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM67qS9b", 16434, "op-acceptance-tests: interop: add test that maximizes the number of executing messages", "Maximize the number of executing messages per block on two chains at once (rather than just one).", "CLOSED", 0, "joshklop", "2025-06-16T03:33:55Z", "2025-06-23T19:12:21Z", "2025-06-23T19:12:21Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM66_Tuz", 16379, "interop: supervisor <> op-node mode renaming", "This ticket represents the renaming of the supervisor <> node mode renaming per [here](https://oplabs.notion.site/Supervisor-Mode-Naming-Convention-20df153ee16280649630c3a55850d906). The previous names consistently confused people and the new names exist to make it easier to understand what is going on. All mentions of managed mode should be replaced with indexing mode", "CLOSED", 0, "tynes", "2025-06-11T14:56:58Z", "2025-06-23T09:29:17Z", "2025-06-23T09:29:17Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM6602pY", 16362, "Remove redundant assertions outside of the StandardValidator", "The StandardValidator should contain all necessary checks. \n\nThis means that we can remove the redundant checks which occur throughout the contracts package, including: \n- `ChainAssertions.sol`\n- Checks in deploy scripts ([example](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/scripts/deploy/DeployOPChain.s.sol#L542-L548))", "OPEN", 0, "maurelian", "2025-06-10T17:49:22Z", "2025-06-23T08:50:18Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM66TE8n", 16326, "OPCM Migrate Script Improvements", "# Description\n* [This script](https://github.com/ethereum-optimism/optimism/blob/op-program/interop-rc-alpha-migrate/packages/contracts-bedrock/migrate-alphanet.sh) was used to call migrate on the rehearsal-net-0.\n\nThe script should be improved to read inputs from a configuration file, and additionally perform validations on the inputs before calling the migrate function. These validation should involve reading from each of the contract addresses to ensure that they are correct implementations onchain\n\nIdeally the script should read direct from the op-deployer state.json to ensure that inputs are read directly from the source. \n\n\n\n", "CLOSED", 0, "jelias2", "2025-06-06T18:34:56Z", "2025-06-26T20:48:35Z", "2025-06-26T20:48:35Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM66RqbA", 16321, "op-supervisor: Improve reorg during reset behavior", "Currently, reorgs that happen while a reset is ongoing may lead to an outdated reset target. This may even more so be the case because resets are now blocking and reorgs may not be executed in the background.\n\nReorgs and resets are both rare, so we should find a good solution with little complexity to not get to wrong reset targets.\n\nOne solution may be to run resets async again, but then there's more complexity, e.g. detecting in other places that a reorg is in progress. Another solution may be to just check that a reset target is valid before sending it to the node, and if not do another reset. This way, if after the reset, and before sending it to the node, a reorg happens, it would be detected.", "OPEN", 0, "sebastianst", "2025-06-06T15:57:51Z", "2025-06-27T14:55:47Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM66QYRB", 16315, "op-supervisor: Improve L1 origin validity handling during resets", "The supervisor's reset logic currently only checks for consistency between its local safe and the node's safe databases. It doesn't check whether the L1 origin of the target it finds is canonical.\n\nAfter bisecting to a common safe block, we may want to check the L1 origin of the found reset target and if it's not canonical, walk back the safe chain until we find a valid L1 origin. This should probably also trigger an invalidation of the databases after the last canonical L1 block. TBD in how far this is already being taken care of by the Rewinder or in how far it interferes with the Rewinder.\n\nNote that this is also closely related to #16314. The op-node currently does a very similar L1 origin validity walkback from its latest unsafe target. This can probably all be moved to the supervisor for consistency. It's better to let the supervisor always have the authoritative view of the canonical L1 chain.\n\nAlso related: https://github.com/ethereum-optimism/optimism/issues/16321\n\nEdit: see discussions below, during a reset we should just rely on the DB to be consistent. If it turns out that a reset target's L1 origin became invalid, we should just run another reset to find the next newest valid L1 origin. We don't want to add complexity but remove it.", "OPEN", 0, "sebastianst", "2025-06-06T13:52:54Z", "2025-06-27T14:53:56Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM65xFnA", 16271, "[ci] Investigate and improve flakiness", "We've seen a number of CI flakes recently; let's investigate and see what we can improve.", "CLOSED", 0, "scharissis", "2025-06-04T06:35:18Z", "2025-06-24T04:44:09Z", "2025-06-24T04:44:09Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM637-bq", 16097, "Use GoReleaser for op-node/batcher/proposer/challenger release pipeline", "GoReleaser is already used for the `op-deployer` release pipeline.\n\nWe don't have a fully automated release pipeline for the main OP Stack components op-node/batcher/proposer/challenger yet. Docker builds happen via CI jobs but drafting the release notes, to only include commits that changed a file in the component's sub directory in question, is still a manual and error prone task. GoReleaser can greatly simplify this step because it can automatically filter to relevant commits.\n\nHowever, GoReleaser can also fully take over the whole release process, including building binaries and Docker images. We could skip this in a first iteration though, to keep using the current CircleCI Docker build jobs.\n\nI had some limited local success using GoReleaser for op-node with this config:\n```yaml\n# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n\nversion: 2\n\nproject_name: op-node\n\nbefore:\n  hooks:\n    # You may remove this if you don't use go modules.\n    - go mod tidy\n\nbuilds:\n  - id: main\n    main: ./cmd\n    binary: {{ .ProjectName }}\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n    goarch:\n      - amd64\n      - arm64\n    ignore:\n      - goos: windows\n        goarch: arm64\n      - goos: linux\n        goarch: arm64\n    mod_timestamp: \"{{ .CommitTimestamp }}\"\n    ldflags:\n      - -X main.GitCommit={{ .FullCommit }}\n      - -X main.GitDate={{ .CommitDate }}\n      - -X github.com/ethereum-optimism/optimism/{{ .ProjectName }}/version.Version={{ .Version }}\n      - -X github.com/ethereum-optimism/optimism/{{ .ProjectName }}/version.Meta=\n\narchives:\n  - formats: tar.gz\n    # this name template makes the OS and Arch compatible with the results of `uname`.\n    name_template: \"{{ .ProjectName }}-{{.Version}}-{{ tolower .Os }}-{{ .Arch }}\"\n    # use zip for windows archives\n    wrap_in_directory: true\n    format_overrides:\n      - goos: windows\n        formats: zip\n\ndockers:\n  - id: default\n    goos: linux\n    goarch: amd64\n    dockerfile: Dockerfile.default\n    image_templates:\n      - \"us-docker.pkg.dev/oplabs-tools-artifacts/images/{{ .ProjectName }}:{{ .Tag }}\"\n\nchangelog:\n  paths:\n    - {{ .ProjectName }}/\n    - go.mod\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n\ngit:\n  tag_sort: semver\n\nrelease:\n  github:\n    owner: ethereum-optimism\n    name: optimism\n  draft: true\n  make_latest: false\n\nmonorepo:\n  tag_prefix: {{ .ProjectName }}/\n  dir: {{ .ProjectName }}\n```\nI used it to draft the list of relevant commits for the [op-node/v1.13.3](https://github.com/ethereum-optimism/optimism/releases/tag/op-node%2Fv1.13.3) release (I had ascending-by-message ordering enabled, which I removed from above config because I think historical ordering is actually better). Since the tag to release didn't contain the file, I had to move it outside the repo so GoReleaser doesn't complain about a dirty git repo. My invocation was `goreleaser release --clean -f ../.goreleaser.yaml`. \n\nThis config may already work in its templated form for all OP Stack components mentioned above. GoReleaser also supports inclusion of templates, so this could be mostly moved into a template that is then just imported in each component's `.goreleaser.yaml` file.\n\nHowever, there are some open issues to sort out.\n* We either skip the Docker build, and reuse our existing Docker build jobs, or need to create a Dockerfile that works for the components, possibly also in a templated form.\n* I'm not sure if GoReleaser properly selects the correct commit range from current _finalized_ to the previous _finalized_ tag. It includes `-rc.N` tags in its ordering. We could filter out `rc` tags when using GoReleaser so it's only used for finalized tags. But this needs to be investigated.", "OPEN", 0, "sebastianst", "2025-05-23T10:36:58Z", "2025-09-23T09:52:17Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM63fGAp", 16039, "op-acceptance-tests: investigate event logger alternatives for interop load test", "The interop load test may benefit from `EventLogger.sol` alternatives that don't require putting event data in the function signature. This allows the test to e.g., submit large events or many events in a single tx without worrying about transaction size limits.", "CLOSED", 0, "joshklop", "2025-05-20T22:41:35Z", "2025-06-23T19:12:21Z", "2025-06-23T19:12:21Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM63Lh13", 15992, "WS-24: Interop High Availability", "Ensure our systems meet HA targets under Interop load (failover, scaling, uptime).\n\nThis issue tracks the work to complete [this Interop workstream](https://www.notion.so/oplabs/High-Availability-1eff153ee1628055b360e3af73de81f9).\n\nMuch of the work in scope for HA is tracked by other workstreams and these issues are linked below for traceability. Anything in-scope that is not already covered by other workstreams is included as a subissue here.\n\n**P0s**\n- https://github.com/ethereum-optimism/platforms-team/issues/730\n- https://github.com/ethereum-optimism/infra/issues/351\n- proxyd load and DoS protection, see https://github.com/ethereum-optimism/optimism/issues/15848\n- Load testing, including\n  - https://github.com/ethereum-optimism/infra/issues/364\n  - https://github.com/ethereum-optimism/optimism/issues/15941\n  - https://github.com/ethereum-optimism/optimism/issues/15324\n  - https://github.com/ethereum-optimism/infra/issues/379\n- supervisor redundancy for proxyd: https://github.com/ethereum-optimism/infra/issues/363 \n- Interop monitoring service & alerting: https://github.com/ethereum-optimism/optimism/issues/15178\n- https://github.com/ethereum-optimism/infra/issues/378\n- https://github.com/ethereum-optimism/optimism/issues/16202\n\n**P1s**\n- https://github.com/ethereum-optimism/devnets/issues/77 (especially for testing failover to Sunnyside sequencer)\n- https://github.com/ethereum-optimism/optimism/issues/16558\n\n**P2s**\n- https://github.com/ethereum-optimism/platforms-team/issues/804\n- https://github.com/ethereum-optimism/platforms-team/issues/805\n- https://github.com/ethereum-optimism/optimism/issues/15874", "OPEN", 0, "alfonso-op", "2025-05-19T09:55:47Z", "2025-06-24T15:01:02Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM628eYO", 15978, "superchain-ops: add ability to run upgrade tasks against devnets", "After devnets are added to the superchain-registry, we need to be able to test our full upgrade flow against them using superchain-ops task (as we do for production networks).\n\nsuperchain-ops reads from the codegen'ed [addresses.json](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/extra/addresses/addresses.json) file stored in the superchain-registry, then uses that information to pull addresses and other config data from onchain. \n\nRequirements:\n1. addresses.json file includes entries for all devnets in the superchain-registry\n2. superchain-ops has awareness of the l1-rpc-url needed to query the L2 chain's contracts onchain: should we assume the L1 for devnets is always `sepolia` or is there a way for superchain-ops to programmatically discover the appropriate the L1/rpc?", "CLOSED", 0, "bitwiseguy", "2025-05-16T15:25:08Z", "2025-06-24T14:16:17Z", "2025-06-24T14:16:17Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM62yb9q", 15958, "Acceptance testing for the withdrawal path", "We won't be able to finalize withdrawals in a live devnet. But we should be able to prove withdrawals at least\nPerhaps withdrawal finalization can be done only on kurtosis as a separate step.", "CLOSED", 0, "Inphi", "2025-05-15T15:35:35Z", "2025-06-23T01:04:11Z", "2025-06-23T01:04:10Z", "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDODjvEJM6x8gYp", 15336, "Acceptance test Interop contracts", "Higher-level abstractions around CrossL2Inbox need to work.\n\n- [ ] CrossDomainMessenger\n  - [x] Regular message\n      - Currently implemented using the legacy devstack. Needs migration: tracked at https://github.com/ethereum-optimism/optimism/issues/15574\n  - [ ] Check replay protection\n  - [ ] Check resend (in case of message expiry)\n- [ ] Standard Bridge\n\n", "OPEN", 0, "protolambda", "2025-04-10T11:58:58Z", "2025-06-24T08:10:01Z", null, "ethereum-optimism/optimism", "2025-08-31 06:27:47"]
["I_kwDOMMiGhs69HPiT", 411, "Feature Request: enable logging of user specified contracts", "It would be useful if supersim allowed user's to specify contracts that they would like events logged for.\n\nThis was a request from @hexshire (wonderland) and would look something like:\n\n```\nINFO [06-24|13:13:51.834] GasTank#RelayedMessage msgHash=0xced1de8dad0353afef52f9bcf0fed6c1addbd2aa74e4268779cd0d8eb0617d2f sender=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 gasCost=10724000  txHash=0x039e0441ccf175448f387608920664e3d75b10ef01f8fee751b7f2c06f14bcac\n```\n\nThis is similar to the logging that is already done on L2toL2CDM events and interop token bridging events.", "OPEN", 0, "tremarkley", "2025-06-24T17:42:17Z", "2025-06-25T20:38:25Z", null, "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs684Z4v", 410, "Dependency set chain IDs should be uint256", "## Problem\nSupersim [casts](https://github.com/ethereum-optimism/supersim/blob/cc7f61702793da1e68cfbd0624967433f4ecbeb4/config/chain.go#L56) dependency set chain IDs are `uint64`. This is technically not to [spec](https://specs.optimism.io/interop/dependency-set.html#chain-id), as chain IDs can theoretically be as large as `uint256`. Not urgent because, in practice, most chain IDs are very short.\n\n## Solution\nUpdate all chain ID 64bit assumptions to 256bit.", "OPEN", 0, "its-everdred", "2025-06-23T17:23:34Z", "2025-06-23T17:23:34Z", null, "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs683X_E", 409, "include uniswap v4 deployment in supersim", "", "CLOSED", 0, "hamdiallam", "2025-06-23T15:36:39Z", "2025-06-24T14:52:40Z", "2025-06-24T14:52:40Z", "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs68r2rY", 408, "Feature Request: Enable deterministic gas testing by setting a fixed base fee", "\n\n**Feature Request**\n\nWhen testing cross-chain contracts that involve gas cost estimation and reimbursement (like a \"GasTank\" or relayer payment contract), it is very difficult to create deterministic and predictable tests due to the fluctuating `basefee` of the underlying `anvil` instances used by `supersim`.\n\n**Desired Solution**\n\nI would like `supersim` to expose the `--block-base-fee-per-gas` (or its alias `--base-fee`) flag from `anvil`. This would allow users to launch the L1 and L2 chains with a fixed, predictable `basefee`.\n\n\n**Related Docs**\nhttps://getfoundry.sh/anvil/reference#executor-environment-config", "CLOSED", 0, "hexshire", "2025-06-22T02:59:02Z", "2025-06-24T18:15:58Z", "2025-06-24T18:15:58Z", "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs67LtsY", 399, "what's the difference between supersim and interop kurtosis devnet?", "Looks like both are for local devnet, what's the difference?", "OPEN", 0, "zhiqiangxu", "2025-06-12T13:56:23Z", "2025-06-26T00:18:54Z", null, "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs65qkcj", 393, "Enable a user to modify a predeploy", "## Context\nWonderland is protoyping changes to the predeploy, but is unable to use Supersim to test the changes. How can we easily allow someone to modify a predeploy to test future predeploy changes?\n\ncc @hamdiallam  @tremarkley ", "CLOSED", 0, "zainbacchus", "2025-06-03T18:07:53Z", "2025-06-25T21:58:52Z", "2025-06-25T21:58:52Z", "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs6uxotE", 359, "support withdrawals testing", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nTesting withdrawals on testnet incurs a 1 week withdrawal delay which is hard to test against\n\n**Describe the solution you'd like**\nSupersim to support withdrawals\n\nPotential path forwards support:\n- Configure permissioned dispute game configuration on L1 with a special address for each L2 on startup.\n- Seed the OptimismPortal deployment with the same amount of ETH minted for each L2.\n- Every 1m, post the correct output root each L2 on L1 from the special address\n- Withdrawals should then work as is", "OPEN", 0, "hamdiallam", "2025-03-19T15:34:42Z", "2025-06-26T18:26:20Z", null, "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs6gqK2a", 283, "Broken link in Docs for `L2NativeSuperchainERC20.sol`", "Inside [Periphery contracts (L2)](https://supersim.pages.dev/chain-environment/contracts/#periphery-contracts-l2) section of docs , \nthe link to `L2NativeSuperchainERC20.sol` points to https://supersim.pages.dev/contracts/src/L2NativeSuperchainERC20.sol instead of https://github.com/ethereum-optimism/superchainerc20-starter/blob/main/packages/contracts/src/L2NativeSuperchainERC20.sol\n\ndue to which we receive `Document not found (404)` error", "OPEN", 0, "0xumarkhatab", "2024-11-26T16:53:03Z", "2025-06-25T21:31:57Z", null, "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOMMiGhs6RyGEV", 81, "ERC-7683 Support", "ERC-7683 promises a unified interface for intents, and the strategy of supporting it for interop is discussed in [this document](https://docs.google.com/document/d/1IIjXksPsLAj54_fTsE9HwsnXe2z6FJKOS7OLs37JaGM/edit#heading=h.c08sx0r3wtn9). This issue is for reviewing this proposed standard and suggesting ways that the DevX team can support the use of this interface.\r\n", "CLOSED", 0, "fainashalts", "2024-08-02T22:15:04Z", "2025-06-25T21:36:27Z", "2025-06-25T21:36:27Z", "ethereum-optimism/supersim", "2025-08-31 06:27:56"]
["I_kwDOKIsnqM6ziV0O", 923, "Add a quick way to read addresses for a chain if it doesn't exist in the superchain registry.", "Right now to perform an upgrade with the superchain-ops repo your corresponding chain must exist in the superchain-registry. If it doesn't users will either 1) have to add it to main branch 2) create a feature branch and update their submodule for scr to point to this feature branch. \n\nThis is cumbersome. It would be nice if there was an easy way to give superchain-ops the addresses of a chain that doesn't exist in the scr. ", "CLOSED", 0, "blmalone", "2025-04-22T21:02:52Z", "2025-06-26T18:59:52Z", "2025-06-26T18:59:51Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6xGAtI", 838, "Templates should check against StandardValidator contracts", "We agreed that template developers should be responsible for implementing StandardValidator checks when writing their templates (except for templates like FinanceTemplate). This encourages developers to explicitly define what a valid chain should look like post-template execution.\n\nThat said, I think we still need to think more about how this works in practice. Ideally, templates should be stable and not require frequent changes. Requiring updates every time we add a new StandardValidator would be painful. Maybe each config.toml could specify which StandardValidator contract it uses?\n\nComment from @mds1:\n> Agreed with leaning more into StandardValidator, improving it so we don't need so many exceptions, and getting rid of the [hardcoded versioning](https://discord.com/channels/1244729134312198194/1273519241076670526/1357460562602102854). For OPCM tasks the template should specify the corresponding validator. For non-OPCM templates putting this address in the config file seems reasonable. TLDR it seems for now we should prioritize improvements to monorepo upgrade fork tests and StandardValidator over investment into running monorepo tests in superchain-ops\n", "CLOSED", 0, "blmalone", "2025-04-04T02:55:41Z", "2025-06-26T18:52:25Z", "2025-06-26T18:52:25Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6wQodD", 814, "StateOverrideManager always adds the nonce as a state override", "See this commit for more information: https://github.com/ethereum-optimism/superchain-ops/pull/784/commits/2e666a6f899381d1688e4aa18a16cf8abd9a7e48\n\nBecause we simulate locally and increase the parent/child safe nonces, we always get the nonce added as a state override. We should revert back to the starting snapshot then apply the state overrides. ", "CLOSED", 0, "blmalone", "2025-03-28T20:33:27Z", "2025-06-26T18:57:45Z", "2025-06-26T18:57:45Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6vMNvV", 781, "Refactor signFromChildMultisig to reduce noisy terminal output", "The `signFromChildMultisig` function in `MultisigTask.sol` currently returns `VmSafe.AccountAccess[]` and `Action[]` which are then printed to the terminal. \n\nThis creates unnecessarily noisy output that makes it harder to focus on the important information needed for signing.", "CLOSED", 0, "maurelian", "2025-03-21T18:37:48Z", "2025-09-24T19:59:35Z", "2025-09-24T19:59:35Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6u0feh", 777, "Print state diff in markdown format", "The [`print()`](https://github.com/ethereum-optimism/superchain-ops/blob/872d1597c5affe206c5324e29cf6e5adb90d1021/src/libraries/AccountAccessParser.sol#L356) functionality of the AccountAccessParser lib is very helpful, but I find it difficult to compare the output against what is shown by tenderly, because the layout is different. \n\nIt is worth noting also that a change to the Validations.md format is a change to the signing interface, which I think we are trying to avoid. \n\nRequest:\nmodify `print()` or add `printMarkdown()` so that the state diffs will be printing in a format like the previous runbooks:\n\nhttps://github.com/ethereum-optimism/superchain-ops/blob/8e8ce423bcb0bf6412bb3cea487aac3a7a29577c/tasks/eth/006-MCP-L1/VALIDATION.md?plain=1#L141-L158", "CLOSED", 0, "maurelian", "2025-03-19T19:51:45Z", "2025-06-26T18:37:48Z", "2025-06-26T18:37:48Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6unhpY", 770, "Simple UX for users to override Nonces", "At the moment, the new superchain-ops flow provides generic functionality to allow users to supply state overrides. This functionality was introduced in this [PR](https://github.com/ethereum-optimism/superchain-ops/pull/727).\n\nAs it stands, to override a nonce, we must do the following: \n1. Supply the 64 character hex string for both the slot and slot value: [here](https://github.com/ethereum-optimism/superchain-ops/blob/main/test/tasks/StateOverrideManager.t.sol#L56)\n2. Supply the decimal values for the slot key and slot value (slightly better UX than 1): [here](https://github.com/ethereum-optimism/superchain-ops/blob/main/test/tasks/StateOverrideManager.t.sol#L150)\n\nA simpler UX for task developers would be to provide access to a new TOML table called `nonces`. e.g. \n\n```toml\n[nonces]\n0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A = 10 # Nonce 10 for address 0x5a0Aae5...\n```\n\nThis new nonces table should take precedence over any nonces set inside the state overrides table. e.g. Nonce should be set as `10` and not `9` in the example below:\n\n```\n[nonces]\n0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A = 10 # This should take precedence over the state override below.\n\n[stateOverrides]\n0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A = [{key = \"0x0000000000000000000000000000000000000000000000000000000000000005\", value = \"0x0000000000000000000000000000000000000000000000000000000000000009\"}]\n```\n", "CLOSED", 0, "blmalone", "2025-03-18T19:08:15Z", "2025-06-26T18:44:10Z", "2025-06-26T18:44:10Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6uGK2L", 753, "More granular checking of addresses.json so we don't have to update the scr submodule as often.", "An approach here could be to further narrow the comparison. Instead of hashing the whole file. We could check if specific chain ids (that we care about) have changed compared to our local copy. Alternatively, maybe we just look for new system config addresses? We'd still need updates in that case, but then it will change a bit less frequently.\n\nSee the check superchain-registry job in circle ci: https://github.com/ethereum-optimism/superchain-ops/blob/main/.circleci/config.yml#L145 \n\nThe SuperchainAddressRegistry.sol does discovery onchain. Perhaps we can limit the changes to only the seed addresses that it needs? \n", "CLOSED", 0, "blmalone", "2025-03-14T17:21:49Z", "2025-06-26T18:46:02Z", "2025-06-26T18:46:02Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6sAdgI", 686, "Hash Verifiability", "One way to make verifying transaction hashes a lot easier would be to print out the input data that goes into the hash that you're approving as well as the nested hash. It's a relatively minor change but it means you can very easily compute the hash yourself by other means.", "CLOSED", 0, "ElliotFriedman", "2025-02-27T23:14:33Z", "2025-06-26T18:34:37Z", "2025-06-26T18:34:37Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6rx-Xs", 679, "Check domain hash from simulation matches VALIDATIONS.md hash entry.", "In CI we should sim tasks and check that the domain and message hash matches what's in the validations file.\n\nThis assumes that we have already added hashes to the VALIDATIONS file. This should be a separate task. Perhaps the decodAndPrint function on the AccountAccessParser lib can help with this.", "CLOSED", 0, "blmalone", "2025-02-26T15:28:04Z", "2025-06-26T18:36:20Z", "2025-06-26T18:36:20Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6rC8XD", 654, "Prevalidations should be possible and not hindered by when the address registry is available", "\nSee this discussion: https://github.com/ethereum-optimism/superchain-ops/pull/624#discussion_r1963583989\n\nSometimes you will want to validate something is as it should be _before_ executing. We should be able to do this and the fact that the address registry is not yet ready shouldn't stop us. Perhaps we need the address registry to be ready sooner. ", "CLOSED", 0, "blmalone", "2025-02-21T17:55:03Z", "2025-06-26T18:59:02Z", "2025-06-26T18:59:02Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6rClmy", 651, "Make mainnet example for OPCM template under improvements/tasks/example/eth", "Please see this pr for why we need to do this: https://github.com/ethereum-optimism/superchain-ops/pull/650\n\nRight now, OPCM is not deployed to mainnet so we don't have an OPCM address that we can simulate for on mainnet.  ", "CLOSED", 0, "blmalone", "2025-02-21T17:07:53Z", "2025-06-26T18:48:45Z", "2025-06-26T18:48:45Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6rCQ9g", 648, "CI job template_regression_tests could be faster", "We do chain discovery via the address registry for each task that is simulated. If we could either (1) make chain discovery faster with concurrency or (2) read the addresses from the local addresses.json file (down side is we are running a no production code path).\n\nSee PR that introduced this feature: https://github.com/ethereum-optimism/superchain-ops/pull/634 ", "CLOSED", 0, "blmalone", "2025-02-21T16:31:34Z", "2025-06-26T18:40:15Z", "2025-06-26T18:40:15Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6q1YN6", 636, "Revisit MultisigTask Architecture", "https://github.com/ethereum-optimism/superchain-ops/pull/622/files#r1963533681\n\nThe focus of this issue should be to refactor the `MultisigTask.sol` with readability and maintainability in mind. Following the flow of the file right now is not as intuitive as it could be.  ", "CLOSED", 0, "blmalone", "2025-02-20T13:10:07Z", "2025-06-26T18:41:40Z", "2025-06-26T18:41:40Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6qF_uW", 605, "Update tests to use contracts-bedrock safe-tools and stdStorage library", "For tests maintainability and readability use `stdStorage` library to get slots and `lib/optimism/packages/contracts-bedrock/test/safe-tools/SafeTestTools.sol` to generate multiple addresses with priv keys.\n[Ref1](https://github.com/ethereum-optimism/superchain-ops/pull/599#discussion_r1955375482), [Ref2](https://github.com/ethereum-optimism/superchain-ops/pull/599#discussion_r1955377283).", "CLOSED", 0, "prat-gpt", "2025-02-14T13:14:36Z", "2025-06-26T18:47:55Z", "2025-06-26T18:47:55Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6p_hM9", 600, "Update Task Paths for Mainnet Tasks", "Once we have our first mainnet task that will affect mainnet contracts, we should go through the repo and make sure that the monorepo integration tests point to the new mainnet directory. The justfiles `single.just` and `nested.just` may need to be updated too.", "CLOSED", 0, "ElliotFriedman", "2025-02-13T20:09:34Z", "2025-06-26T18:50:37Z", "2025-06-26T18:50:37Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6o6Ct1", 554, "Test: Sepolia task to transfer owner of ProtocolVersions", "`0xfd1D2e729aE8eEe2E146c033bf4400fE75284301` is the Sepolia ProtocolVersions owner.\n\n- Sepolia `ProtocolVersions`: [scr](https://github.com/ethereum-optimism/superchain-registry/blob/main/superchain/configs/sepolia/superchain.toml#L2) -> [etherscan](https://sepolia.etherscan.io/address/0x79ADD5713B383DAa0a138d3C4780C7A1804a8090)\n- `ProtocolVersions` owner: [etherscan](https://sepolia.etherscan.io/address/0xfd1D2e729aE8eEe2E146c033bf4400fE75284301)\n\nOn mainnet, the owner of [`ProtocolVersions`](https://etherscan.io/address/0x8062AbC286f5e7D9428a0Ccb9AbD71e50d93b935) is the Foundation Upgrade Safe (FUS) - [0x847B5c174615B1B7fDF770882256e2D3E95b9D92](https://etherscan.io/address/0x847B5c174615B1B7fDF770882256e2D3E95b9D92)\n\nWe should create a template in superchain-ops 2.0 that transfers the `ProtocolVersions` owner. Then create a task from this template on sepolia that transfers the owner to the sepolia FUS.", "CLOSED", 0, "blmalone", "2025-02-05T19:27:10Z", "2025-06-26T18:49:25Z", "2025-06-26T18:49:25Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6o4sVi", 548, "Update Paths in Improvement Docs", "https://github.com/ethereum-optimism/superchain-ops/pull/545#discussion_r1943220916", "CLOSED", 0, "ElliotFriedman", "2025-02-05T16:36:13Z", "2025-06-26T18:50:49Z", "2025-06-26T18:50:49Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6o0BQc", 547, "Update Fetch-Task to use Mainnet Task Directory", "Currently, the `fetch-task.sh` file reads in files from the `test/task/mock/example/` folder. Once an actual mainnet folder exists, use that instead.", "CLOSED", 0, "ElliotFriedman", "2025-02-05T08:07:29Z", "2025-06-26T18:51:13Z", "2025-06-26T18:51:12Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6oNNBC", 514, "superchain-ops 2.0 - setup a training call", "Invite internal stakeholders to this call to show them how to use the new superchain-ops tooling.\n\nMake sure #492 is completed first.", "CLOSED", 0, "blmalone", "2025-01-30T23:20:11Z", "2025-06-26T18:39:28Z", "2025-06-26T18:39:28Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6lUHjU", 448, "`SIMULATE_WITHOUT_LEDGER` should check the value to `1`", "For now the `SIMULATE_WITHOUT_LEDGER` is used to simulate without the ledger and this is very useful. \nHowever, a \"bug\" can occurs when tasks writer wants to make this as more interactive. \n\nSo we would like to have the \n- `SIMULATE_WITHOUT_LEDGER` = 0 is **disabled**. \n- `SIMULATE_WITHOUT_LEDGER` = 1 is **enabled**. \n\nFor now, only if the `SIMULATE_WITHOUT_LEDGER` is set this will enable this and not check if the value is `0` or `1`. ", "CLOSED", 0, "Ethnical", "2025-01-07T18:48:52Z", "2025-06-26T18:40:50Z", "2025-06-26T18:40:50Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6ZdYW8", 342, "Support for \"stacked\" proposals that have incrementing nonces", "Often times we need to schedule multiple tasks to be executed around the same time, and this requires careful, error-prone nonce coordination to ensure tasks are executed in the right sequence, and the right nonces are hardcoded. Additionally, there is no easy way to have a task automatically simulate all prior dependent tasks.\r\n\r\nThis issue needs some thought on the best way to implement. A rough idea is that a config file or `.env` file lists the names of all dependent tasks. A CI check ensures that these tasks are imported in the solidity script and executed before this task is simulated. The solidity script's execution must be conditional based on the preceeding task statuses, i.e. if it's DRAFT it should be executed, but if it's EXECUTED then we do not want to re-execute it\r\n\r\nThis dependency list can be used to infer the required nonces to avoid needing to hardcode them", "CLOSED", 0, "mds1", "2024-10-09T03:05:42Z", "2025-06-26T18:42:50Z", "2025-06-26T18:42:50Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOKIsnqM6Yuc9k", 337, "Automatically run tasks in CI if task is in a non-terminal state", "In `script/utils/check-task-statuses.sh` we define the following allowed task status:\r\n\r\nhttps://github.com/ethereum-optimism/superchain-ops/blob/4a7d0f398555c9d17c83f84586db29d6743c7a96/script/utils/check-task-statuses.sh#L4\r\n\r\nOf these, the SIGNED (for presigned pauses only), EXECUTED. and CANCELLED statuses are terminal, meaning once a task's status is changed to this value it should never change again.\r\n\r\nWhen we add new tasks, the task author must manually remember to add them to CI (see `just_simulate_sc_rehearsal_1` as an example), but this is easy to forget. Instead, we should have CI do the following:\r\n- Loop over all tasks in all `tasks/*` directories.\r\n- Extract all tasks that have a status that is not a terminal status\r\n- Determine if they are single safe or nested safe tasks (this can be done based on the name of the Solidity file\u2014if it's `NestedSignFromJson` it's a nested safe task, otherwise it's a standard single safe)\r\n- Simulate the task in CI (simulation commands differ for nested vs. standard). For nested safes, we should also simulate the approve calls, which provides an additional mitigation for https://github.com/ethereum-optimism/superchain-ops/issues/268\r\n- The CI job should fail if any approval or simuation fails\r\n\r\nThe reason we filter tasks by \"tasks in a non-terminal status\" instead of \"statues that precede execution\" is to be more robust: If a new task status is added, by default CI will try executing tasks with those status, and we can add that task status to the terminal status list if needed\r\n", "CLOSED", 0, "mds1", "2024-10-02T18:00:06Z", "2025-06-26T18:37:24Z", "2025-06-26T18:37:24Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:28:01"]
["I_kwDOH2Qg5s6pDCyH", 494, "interop: tx-pool interval tx validity checks", "There should be an interval where every `n` seconds, all of the interop transactions are collected from the mempool and a batch JSON-RPC request is used to validate them using the check access list RPC endpoint.\n\nAn optimization would be to prioritize the checks based on tx nonce/fee, but that is only necessary if the initial naive implementation has issues. \n\n\n", "CLOSED", 0, "protolambda", "2025-02-06T17:19:43Z", "2025-06-24T18:04:18Z", "2025-06-24T18:04:18Z", "ethereum-optimism/op-geth", "2025-08-31 06:28:02"]
["I_kwDOKSJyfM7AKBU5", 896, "Move dependency API requests implementation details out of relayer and into a dependency client file", "Reference: https://github.com/ethereum-optimism/ecosystem/pull/887#discussion_r2201505585", "OPEN", 0, "tremarkley", "2025-07-11T18:36:24Z", "2025-07-11T18:36:24Z", null, "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOKSJyfM69KpLv", 872, "Bugbash issues for Superstacks Claim Flow", "https://www.notion.so/oplabs/Bug-Bash-SuperStacks-Claim-214f153ee16280e59585c87d6c21b9c4", "CLOSED", 0, "jvmi7", "2025-06-25T00:32:35Z", "2025-07-10T22:00:37Z", "2025-07-10T22:00:37Z", "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOKSJyfM69KnQR", 871, "Implement Superstacks program has ended state", "", "CLOSED", 0, "jvmi7", "2025-06-25T00:26:56Z", "2025-07-07T23:03:52Z", "2025-07-07T23:03:52Z", "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOKSJyfM688Qc2", 867, "Implement Mini App UI for claim flow", "", "CLOSED", 0, "jvmi7", "2025-06-24T01:19:56Z", "2025-07-07T23:04:49Z", "2025-07-07T23:04:49Z", "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOKSJyfM688QB1", 866, "Configure production deployment for Superstacks Mini App", "Host the app on netlify + verify production build works properly", "CLOSED", 0, "jvmi7", "2025-06-24T01:18:32Z", "2025-07-07T23:04:40Z", "2025-07-07T23:04:40Z", "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOKSJyfM67QiNm", 850, "Implement Airdrop 6 Event log poller instance", "Create an airdrop 6 instance in the event log poller so the isClaimed value persists to true after a user has claimed", "CLOSED", 0, "jvmi7", "2025-06-12T22:06:28Z", "2025-07-07T17:04:38Z", "2025-07-07T17:04:38Z", "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOKSJyfM67Qhwo", 849, "Modify backend endpoints to work with SuperStacks Claim", "Remove delegation check on backend route for superstacks", "CLOSED", 0, "jvmi7", "2025-06-12T22:05:29Z", "2025-07-07T17:04:37Z", "2025-07-07T17:04:37Z", "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOKSJyfM64Cej9", 827, "Scope WorldID Mini App", "Scope out what it takes to implement a mini app for the world app\n\nInitially implement a delegation app to see if this is viable for superstacks", "CLOSED", 0, "jvmi7", "2025-05-23T22:30:13Z", "2025-07-07T23:04:31Z", "2025-07-07T23:04:31Z", "ethereum-optimism/ecosystem", "2025-08-31 06:29:20"]
["I_kwDOH2Qg5s6_wJ5e", 641, "txpool: Filter Tx on Reinjection", "Ingress filters exist in `op-geth` to remove invalid interop transactions.\n\nHowever, when a block is reorged, transactions are re-entered into the mempool without being re-evaluated by the filter.\n\nReinjection: https://github.com/ethereum-optimism/op-geth/blob/2d86a54000be027286145f7aec36dd78fadcf070/core/txpool/legacypool/legacypool.go#L1426\n\nAddTxLocked: https://github.com/ethereum-optimism/op-geth/blob/2d86a54000be027286145f7aec36dd78fadcf070/core/txpool/legacypool/legacypool.go#L991\n\nYou can see the application of filters is actually happening in a higher scope which is not invoked by this call: https://github.com/ethereum-optimism/op-geth/blob/optimism/core/txpool/legacypool/legacypool.go#L1044\n\n\nFix:\nMake the filters apply even on reinjection by moving the filter logic to the locked addTx call\n\nAdditional:\nE2E testing to confirm tx are removed should confirm this", "CLOSED", 0, "axelKingsley", "2025-07-09T20:33:43Z", "2025-07-10T00:11:15Z", "2025-07-10T00:11:15Z", "ethereum-optimism/op-geth", "2025-08-31 06:29:20"]
["I_kwDOH2Qg5s69HdEJ", 633, "txpool: batch interop checks", "# Rationale\n\nThe interval checks added in https://github.com/ethereum-optimism/op-geth/pull/629 are not efficient and can be improved through doing batched RPC calls", "OPEN", 0, "tynes", "2025-06-24T18:03:02Z", "2025-07-08T20:07:59Z", null, "ethereum-optimism/op-geth", "2025-08-31 06:29:20"]
["I_kwDOH2Qg5s64KcB3", 613, "Abnormal CPU usage with latest op-geth ( v1.101511.0 )", "#### System information\n\nGeth version: [v1.101511.0](https://github.com/ethereum-optimism/op-geth/releases/tag/v1.101511.0)\nCL client & version: e.g. lighthouse/nimbus/prysm@v1.0.0\nOS & Version: Ubuntu\nCommit hash : (if `develop`)\n\n#### Expected behaviour\n\nCPU usage should be same with the previous version ( [v1.101503.4](https://github.com/ethereum-optimism/op-geth/tree/v1.101503.4) )\n\n#### Actual behaviour\n\nIt consumes like half of the CPU resources per node, which makes 100% if runs two node. On modern AMD CPU which should have less than 5% of usage in usual\n\n#### Steps to reproduce the behaviour\n\nObserve CPU usage of op-geth after sync finishes\n\n#### Backtrace\n\n````\n[backtrace]\n````\n\nWhen submitting logs: please submit them as text and not screenshots.\n", "CLOSED", 0, "cpuchainorg", "2025-05-26T01:21:36Z", "2025-09-12T12:15:48Z", "2025-09-12T12:15:48Z", "ethereum-optimism/op-geth", "2025-08-31 06:29:20"]
["I_kwDOMMiGhs6vMPV-", 361, "Configurable Dependency Set", "Right now all L2 chains in supersim are in the same dependency set. This issue is for allowing the dependency set to be configurable via a cli flag passed into supersim on startup.", "CLOSED", 0, "tremarkley", "2025-03-21T18:40:55Z", "2025-07-07T15:51:41Z", "2025-07-07T15:51:41Z", "ethereum-optimism/supersim", "2025-08-31 06:29:35"]
["I_kwDODjvEJM7AHZWs", 16672, "op-interop-mon + op-supervisor: authentication story", "Currently, `op-interop-mon` calls `op-supervisor`'s `admin_SetFailsafeEnabled` API.\n\nThis API needs some authentication considerations.\n- Presently, we can rely on the fact that Supervisors are in local networks\n- We should add something like JWT tokens though\n- Especially if there are cross-chain-operator calls (like Chain A wants to AutoStop Chain B), authentication is needed\n\nOptions:\n- JWT: probably the right call. Only downside is it's annoying to set JWT tokens for multiple supervisor endpoints, since the monitor calls Failsafe on a collection of Supervisors\n- Private Network: could ensure access only comes from the correct actors by controlling the API through some private network url redirection.\n\nNeed consult from @jelias2 for best practices. This should be addressed before supervisor is productizable, else unauthorized users could enable Failsafe.", "OPEN", 0, "axelKingsley", "2025-07-11T14:41:20Z", "2025-07-11T14:41:20Z", null, "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM6_509p", 16662, "Extend lint-forge-tests-check-no-build to handle library artifacts", "Currently, the lint-forge-tests-check-no-build script excludes test files under test/libraries/ due to limitations in how it processes artifacts for Solidity libraries. The script assumes contract-style ABIs and cannot reliably introspect functions in libraries, even if they follow the correct naming convention.\n\nMost library tests have already been refactored to follow the style guide, but they remain excluded from validation for now. This issue tracks:\n\n- Updating the script to properly handle library artifacts\n- Enabling lint validation for test/libraries/ folder\n- Removing library tests from the exclusion list\n\nRelated PR comment: [#16614 (comment)](https://github.com/ethereum-optimism/optimism/pull/16614#discussion_r2193273907)", "CLOSED", 0, "aliersh", "2025-07-10T14:33:43Z", "2025-10-02T20:46:31Z", "2025-10-02T20:46:31Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM6_Vvda", 16632, "[acceptance]: flashblocks executes non-interop-transactions with supervisor RPC unavailable", "In an interop setting, rbuilder can be configured with a supervisor URL. Though one expectation from rbuilder is to accept non-interop transactions in the case of that supervisor URL being unavailable.\n\nHave an acceptance-test covering that scenario.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-07T20:19:32Z", "2025-09-04T13:59:47Z", "2025-09-04T13:59:47Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM6_UGiw", 16630, "[acceptance]: flashblocks gate to be aware of flashblocks-websocket-proxy", "flashblocks gate currently only expects the streaming from rbuilders but now, even flashblocks-websocket-proxy serves that flashblocks stream, which should be validated by the acceptance tests", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-07T17:00:36Z", "2025-07-07T17:04:51Z", "2025-07-07T17:04:50Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM6-Ss4K", 16620, "Question on the state initialization of address 0x00-0xff", "I found that in op-stack, the addresses of 0x00-0xff are all initialized with 1wei balance and no contract code. I'm confusing what purpose this is for? Do any functionalities in op-stack rely on this? For my understanding, they are simply some blackhole addresses.\n\nhttps://optimistic.etherscan.io/address/0x00000000000000000000000000000000000000ff\n<img width=\"928\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/713d24cc-da78-4fb2-b763-75ba2e28d2e2\" />", "CLOSED", 0, "KyrinCode", "2025-07-01T13:48:07Z", "2025-10-04T05:01:45Z", "2025-10-04T05:01:45Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM69st_n", 16604, "op-node: Consolidate `interop_blockRefByNumber` and `interop_l2BlockRefByNumber`", "`interop_l2BlockRefByNumber` is temporally added to make the local unsafe target determination work at the supervisor side, introduced at https://github.com/ethereum-optimism/optimism/pull/16557.\n\nThis is a spec change, and need to be updated at https://github.com/ethereum-optimism/specs/blob/main/specs/interop/managed-mode.md.\n\nWe may consolidate this two apis into one, by returning the `L2BlockRef` by using single `interop_l2BlockRefByNumber` API.\n\nWe need to\n- make a spec update\n- and remove the redundant RPC.", "CLOSED", 0, "pcw109550", "2025-06-27T12:13:18Z", "2025-07-08T14:40:21Z", "2025-07-08T14:40:21Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM69siDx", 16603, "Investigate spikes of `local-derived` events in `op-supervisor`", "On occasion we are receiving a ton of events on the op-supervisor, a lot of `local-derived`, but others too, such as `local-unsafe-received`.\n\nWe should investigate what is triggering this, and why are we getting such congestion of inflight events.\n\n<img width=\"1488\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/07de9f6f-e3b4-4f03-976c-9731266f4385\" />\n\nAt 10000 inflight events being processed, the supervisor panics.\n\n<img width=\"749\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/8860e375-a1d6-4dd7-b21d-ec0aa8c9ddbf\" />\n\nRelated: https://github.com/ethereum-optimism/optimism/issues/16335", "CLOSED", 0, "nonsense", "2025-06-27T11:57:56Z", "2025-07-10T11:17:53Z", "2025-07-10T11:17:53Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM686g_x", 16548, "RV Audit - `TestCrossSafeUpdate` testing impossible cases ; No clear `invalid` signal during Hazard Set construction", "See this [test](https://github.com/ethereum-optimism/optimism/blob/e7e42d2b3a8a634788a6ce3781815e21d1a12240/op-supervisor/supervisor/backend/cross/safe_update_test.go#L63)\n\nThis test sets a custom `openBlockFn` to return `ErrAwaitReplacementBlock`, and then asserts that this error message is bubbled up through `scopedCrossSafeUpdate` to `CrossSafeUpdate`.\n\nHowever, the real `OpenBlock` has no capacity to return `ErrAwaitReplacementBlock`. Furthermore, it seems that none of the real implementations of the `CrossSafeDeps` ever return this error.\n\nSo it would seem that `CrossSafeUpdate` does not really handle `ErrAwaitReplacementBlock`, despite tests indicating they do.\n\nThe real way invalidated content is kept from being used in `CrossSafeUpdate` is:\n- When `OpenBlock` is called, the events database has already been truncated back, and so we won't be able to build `HazardSet`s to promote Cross Heads\n- on `addLink`, we deny building on top of invalidated entries, so if a Cross Safe update were to somehow be promoted., it wouldn't be added.\n\nWe should maybe add an explicit check through the dependency set to confirm that the candidate is not invalidated. Existing checks will stop it from proceeding, but it would be better to be explicit. Or at a minimum, we should remove these tests which are not really showing us anything.\n\nWe should also consider strengthening the `InvalidateLocalSafe` function of `ChainsDB`. If any of the steps fail, it bails out early, leaving the databases in a potentially inconsistent state that would make the above behaviors much harder to reason about. https://github.com/ethereum-optimism/optimism/blob/4e9ef1aeffd2afd7a2378e2dc5efffa71f04207d/op-supervisor/supervisor/backend/db/update.go#L266", "OPEN", 0, "axelKingsley", "2025-06-23T21:05:30Z", "2025-07-09T23:31:32Z", null, "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM68gpEQ", 16521, "op-node: Add shim to provide Interop proofs RPCs for trivial-Interop case", "In order to support trivial-interop proofs, we need to create a shim to provide the APIs directly by op-node that are provided by the supervisor, using the legacy safedb included in op-node: \n* `supervisor_superRootAtTimestamp`\n* `supervisor_allSafeDerivedAt`\n* `supervisor_syncStatus` (relevant fields)\n\nAnd end-2-end test must be created that shows that interop proofs work using this shim only, without any supervisor running.\n\nSee parent issue for more context.", "CLOSED", 0, "sebastianst", "2025-06-20T09:59:29Z", "2025-07-09T17:01:21Z", "2025-07-09T17:01:21Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM68gn1T", 16520, "op-node: Add mode to use pre-Interop logic in trivial-Interop case", "We want to add a mode of operation to the op-node that lets it use pre-Interop logic in the trivial-Interop case so that op-node can continue to work without a supervisor in the trivial interop case.\n\nIf no supervisor RPC is provided and the dep set has size 1, this mode should automatically be selected. If the dep set size is >1 and no supervisor RPC is provided, op-node must fail to start.\n\nSee parent issue for more context.", "CLOSED", 0, "sebastianst", "2025-06-20T09:58:02Z", "2025-07-09T17:01:07Z", "2025-07-09T17:01:07Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM68gjE0", 16519, "op-node: Trivial-interop mode without supervisor", "We want to keep the op-node working without a supervisor not only pre-Interop, but also in the _trivial_ interop case, meaning having a dep set of size 1. This is possible because the supervisor's main responsibility (besides driving the L1 chain) is to promote local heads to cross heads\u2014and this happens automatically if the depset is 1, since we effectively disable cross-messages from chains to itself in the trivial case by not deploying the `CrossL2Inbox`. So we can just keep on promoting local to cross immediately like in the pre-Interop case.\n\nTo make this work, we need to identify the code-paths that currently post-Interop reach out to the supervisor and adapt these to work like in the pre-Interop case.\n\nAdditionally, in order to support trivial-interop proofs, we also need to create a shim to provide the APIs directly by op-node that are provided by the supervisor, using the legacy safedb included in op-node: `supervisor_superRootAtTimestamp`, `supervisor_allSafeDerivedAt`, `supervisor_syncStatus` (relevant fields).", "CLOSED", 0, "sebastianst", "2025-06-20T09:52:40Z", "2025-07-09T17:01:32Z", "2025-07-09T17:01:32Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM66-Z_f", 16378, "Improve reliability of acceptance tests", "Acceptance criteria would be that instead of acceptance tests being K-shot 100%, they all become consistently 1-shot 100%.\n\n---\n\nFINDINGS:\n\n- `op-acceptance-tests/tests/interop/reorgs` pkg passes with `-count=5`, so not actionable at the moment. (test took `2005.531s`)\n\n---\n\nTODO:\n\n- [ ] fix flaky pkg-level tests at `op-acceptance-tests/tests/interop/sync/multisupervisor_interop`\n- [ ] fix flaky `TestL2CLAheadOfSupervisor`\n- [x] fix flaky `TestUnsafeChainUnknownToL2CL` -- https://github.com/ethereum-optimism/optimism/pull/16394\n- [x] fix flaky pkg-level tests at `op-acceptance-tests/tests/interop/seqwindow` -- `TestSequencingWindowExpiry` -- fixed at https://github.com/ethereum-optimism/optimism/pull/16393\n- [x] fix flaky pkg-level tests at `op-acceptance-tests/tests/interop/reorgs` -- https://github.com/ethereum-optimism/optimism/pull/16415\n\n---\n\n```\n09/06/2025, 05:28\nTOP10 flakiest acceptance tests (by #flakes):\n\nTestSequencingWindowExpiry (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/seqwindow) [104 flakes]\nTestL2CLAheadOfSupervisor (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/sync/multisupervisor_interop) [97 flakes]\nTestUnsafeChainUnknownToL2CL (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/sync/multisupervisor_interop) [29 flakes]\nTestReorgInvalidExecMsgs/invalid_chain_id (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/reorgs) [21 flakes]\nTestReorgInvalidExecMsgs/invalid_block_number (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/reorgs) [19 flakes]\nTestUnsafeChainUnknownToL2CL (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/sync/redundant_interop) [19 flakes]\nTestL2CLSyncP2P (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/sync/multisupervisor_interop) [15 flakes]\nTestReorgUnsafeHead (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/reorgs) [14 flakes]\nTestReorgInvalidExecMsgs/invalid_log_index (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/reorgs) [10 flakes]\nTestLoad (github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/loadtest) [9 flakes]\n```", "CLOSED", 0, "teddyknox", "2025-06-11T13:51:48Z", "2025-07-09T13:54:16Z", "2025-07-09T13:54:15Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM66yK8C", 16355, "op-supervisor: Revisit rewinder's use of `ChainRewoundEvent`", "The `Rewinder` currently handles `LocalSafeUpdateEvent` by comparing them to the logs database, and if there's a mismatch, rewinds the logs db. At the end it emits `ChainRewoundEvent` with the comment `Emit event to trigger node reset with new heads` above but then in the `IndexingMode`, this event is just ignored, except during ongoing resets, where it would cancel the reset.\n\nThis needs to be revisited. If the logs db gets rewound, but the safe chain isn't, there's no need to cancel a reset, for example.", "CLOSED", 0, "sebastianst", "2025-06-10T13:57:58Z", "2025-07-08T14:13:35Z", "2025-07-08T14:13:35Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM66l_3a", 16335, "op-supervisor: Event overflow on large unsafe head gap", "The supervisor can enter a non-recoverable crash-loop when the unsafe head gap between its log DB and a managed node grows too large. This seems to be caused by the supervisor's `ChainProcessor` entering a loop triggered by a `ChainProcessEvent` event that then internally emits `ChainIndexingContinueEvent`. These stack up, eventually leading to an even overflow panic (taken from `dev-infra-rehearsal-0-bn-op-supervisor-snapsync-0`):\n```\nt=2025-06-09T14:38:12+0000 lvl=debug msg=\"Building new HazardSet\" chain=420120009 worker=cross-unsafe chainID=420120009 block=\"BlockSeal(hash:0xa1a0991221ad53f62f9cbd608dff4eff0b47ea2a27591e304b4a94c27a4d8b1e, number:125630, time:1749236224)\"\nt=2025-06-09T14:38:12+0000 lvl=debug msg=\"Processing block for hazards\" chain=420120009 worker=cross-unsafe chainID=420120009 block=\"BlockSeal(hash:0xa1a0991221ad53f62f9cbd608dff4eff0b47ea2a27591e304b4a94c27a4d8b1e, number:125630, time:1749236224)\"\nt=2025-06-09T14:38:12+0000 lvl=debug msg=\"Successfully built HazardSet\" chain=420120009 worker=cross-unsafe chainID=420120009 block=\"BlockSeal(hash:0xa1a0991221ad53f62f9cbd608dff4eff0b47ea2a27591e304b4a94c27a4d8b1e, number:125630, time:1749236224)\"\nt=2025-06-09T14:38:12+0000 lvl=info msg=\"Updated cross-unsafe\" chain=420120009 crossUnsafe=\"BlockSeal(hash:0xa1a0991221ad53f62f9cbd608dff4eff0b47ea2a27591e304b4a94c27a4d8b1e, number:125630, time:1749236224)\"\nt=2025-06-09T14:38:12+0000 lvl=debug msg=\"Building new HazardSet\" chain=420120010 worker=cross-unsafe chainID=420120010 block=\"BlockSeal(hash:0x9cfcc8f132f5467055073e18d0230eac29c7771e107b1d196442319cae65a0bb, number:241533, time:1749226497)\"\nt=2025-06-09T14:38:12+0000 lvl=debug msg=\"Processing block for hazards\" chain=420120010 worker=cross-unsafe chainID=420120010 block=\"BlockSeal(hash:0x9cfcc8f132f5467055073e18d0230eac29c7771e107b1d196442319cae65a0bb, number:241533, time:1749226497)\"\nt=2025-06-09T14:38:12+0000 lvl=debug msg=\"Successfully built HazardSet\" chain=420120010 worker=cross-unsafe chainID=420120010 block=\"BlockSeal(hash:0x9cfcc8f132f5467055073e18d0230eac29c7771e107b1d196442319cae65a0bb, number:241533, time:1749226497)\"\nt=2025-06-09T14:38:12+0000 lvl=info msg=\"Updated cross-unsafe\" chain=420120010 crossUnsafe=\"BlockSeal(hash:0x9cfcc8f132f5467055073e18d0230eac29c7771e107b1d196442319cae65a0bb, number:241533, time:1749226497)\"\nt=2025-06-09T14:38:12+0000 lvl=error msg=\"Failed to enqueue event\" emitter=chainsDBs event=cross-unsafe-update context=0\npanic: something is very wrong, queued up too many events! Dropping event \"cross-unsafe-update\"\ngoroutine 44 [running]:\ngithub.com/ethereum-optimism/optimism/op-node/rollup/event.(*Sys).emit(0xc00004e600, {0x11badad, 0x9}, 0x0, {0x15578c0, 0xc000d31270}, 0x0)\n\t/app/op-node/rollup/event/system.go:293 +0x245\ngithub.com/ethereum-optimism/optimism/op-node/rollup/event.(*systemActor).Emit(0xc00047e6c0, {0x15578c0, 0xc000d31270})\n\t/app/op-node/rollup/event/system.go:81 +0x65\ngithub.com/ethereum-optimism/optimism/op-node/rollup/event.(*Limiter[...]).Emit(0x1553660, {0x15578c0, 0xc000d31270})\n\t/app/op-node/rollup/event/limiter.go:38 +0xa2\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/db.(*ChainsDB).UpdateCrossUnsafe(0xc0001aab00, {0x190a85ca, 0x0, 0x0, 0x0}, {{0x9c, 0xfc, 0xc8, 0xf1, 0x32, ...}, ...})\n\t/app/op-supervisor/supervisor/backend/db/update.go:180 +0x2e3\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/cross.CrossUnsafeUpdate({0x156f998, 0xc00048e5a0}, {0x190a85ca, 0x0, 0x0, 0x0}, {0x1568bc8, 0xc0001aab00}, {0x15587c0, 0xc000449f70})\n\t/app/op-supervisor/supervisor/backend/cross/unsafe_update.go:77 +0x982\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor/backend/cross.(*CrossUnsafeWorker).OnEvent(0xc0004c2140, {0x1558920?, 0xc000f90ac0?})\n\t/app/op-supervisor/supervisor/backend/cross/unsafe_update.go:93 +0x99\ngithub.com/ethereum-optimism/optimism/op-node/rollup/event.(*systemActor).RunEvent(0xc00047eba0, {{0x1558920?, 0xc000f90ac0?}, 0x41c8?, 0x0?})\n\t/app/op-node/rollup/event/system.go:101 +0x144\ngithub.com/ethereum-optimism/optimism/op-node/rollup/event.(*globalHandle).onEvent(...)\n\t/app/op-node/rollup/event/executor_global.go:252\ngithub.com/ethereum-optimism/optimism/op-node/rollup/event.(*GlobalSyncExec).processEvent(0xc00060cb60?, {{0x1558920?, 0xc000f90ac0?}, 0x2be2?, 0x0?})\n\t/app/op-node/rollup/event/executor_global.go:155 +0xeb\ngithub.com/ethereum-optimism/optimism/op-node/rollup/event.(*GlobalSyncExec).Drain(0xc00060cb60)\n\t/app/op-node/rollup/event/executor_global.go:189 +0x29\ngithub.com/ethereum-optimism/optimism/op-supervisor/supervisor.(*SupervisorService).initBackend.func1()\n\t/app/op-supervisor/supervisor/service.go:87 +0x25\ngithub.com/ethereum-optimism/optimism/op-service/tasks.(*Poller).Start.func1()\n\t/app/op-service/tasks/poll.go:57 +0xa4\ncreated by github.com/ethereum-optimism/optimism/op-service/tasks.(*Poller).Start in goroutine 1\n\t/app/op-service/tasks/poll.go:49 +0x156\n```\n\nWe need to revisit the event flows here to make sure the supervisor can make incremental progress without events stacking too high. In this particular case I suggest we remove the `ChainIndexingContinueEvent` event completely, as it's just used for the chain processor to communicate with itself, and refactor it instead to run a classic outer loop.", "CLOSED", 0, "sebastianst", "2025-06-09T14:41:30Z", "2025-07-10T11:17:54Z", "2025-07-10T11:17:54Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM64dV_X", 16127, "op-acceptor: L1 Network is not accessible when running under devnet-sdk", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nL1 Networks are not accessible when running under devnet-sdk on devstack.\n\n**Steps to Reproduce**\n\nHave a test with:\n\n```\nsys.L1Network.WaitForBlock()\n```\n\n**Expected behavior**\nThe Network should be accessible\n\n**Logs:**\n[Sample Run](https://discord.com/channels/1244729134312198194/1374114479163576493/1374453389890687047)\n", "CLOSED", 0, "serpixel", "2025-05-20T19:07:17Z", "2025-07-11T18:39:35Z", "2025-07-11T18:39:35Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM62o8Z-", 15940, "Netchef to render flashblock websocket config w.r.t the HA conductors setup", "netchef improvements to support automatically bootstrapping flashblocks-websocket-proxy with apt config pointing to all the flashblocks-enabled conductors.\n\nThe flashblocks-websocket-proxy will be reading for the flashblocks from all of these conductors. Though the fact that conductor's have awareness about their leadership status, the flashblock stream would be available from only the leader conductor at any time.", "CLOSED", 0, "yashvardhan-kukreja", "2025-05-14T20:19:01Z", "2025-07-07T16:55:48Z", "2025-07-07T16:55:48Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM61y4MS", 15799, "[U18] Make the StandardValidator into an OPCM component", "This work will integrate the `StandardValidator` into the OPCM following the same patterns as `OPCMDeployer`, `OPCMUpgrader` etc.\n\nThe priorities for the implementation are: \n1. Priority 1: following existing patterns\n2. Priority 2: minimizing the solidity diff\n\nIt will also be necessary to add `challenger` as input to the `op-deployer bootstrap implementation` command. \n\nOnce the StandardValidator is integrated in the OPCM, we can then delete code that treats the StandardValidator as an entity outside of the OPCM:\n1. delete DeployStandardValidator.s.sol\n2. delete op-deployer/.../bootstrap/validator.go\n\nAnd then in a follow up PR:\n- [ ] #16299", "CLOSED", 0, "maurelian", "2025-05-08T20:23:51Z", "2025-07-10T21:01:31Z", "2025-07-10T21:01:31Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM61syjk", 15771, "op-supervisor: update RPC to match error-codes spec", "The supervisor RPC got a nice error codes specification now:\nhttps://github.com/ethereum-optimism/specs/blob/main/specs/interop/supervisor.md#-320600-conflicting_data\n\nWe need to support those RPC codes by checking the error types in the supervisor RPC, and returning the appropriate errors.\n\nAll errors in the supervisor are already typed (see supervisor types package, and `Err...` global vars).\nInspect the error type, and convert it to a `rpc.JsonError` with `ErrorCode` attribute that matches the spec.\nThe original spec may have diverged slightly from the actual set of errors; some error types may need to be added.\nThe errors can be translated into rpc-error-typed errors in the `frontend` package that deals with the RPC specifics.\n\n", "CLOSED", 0, "protolambda", "2025-05-08T09:41:27Z", "2025-07-11T19:30:19Z", "2025-07-11T19:30:19Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM61nwo5", 15765, "Interop: check EL prestate for pre-interop CrossL2Inbox configuration fault", "The CrossL2Inbox should not be included in the L2 genesis state on a chain that uses the latest contracts but that does not active interop at genesis.\n\nOther interop predeploys should also be absent.\nNote that predeploy proxies always exist. So `absent` here means that the proxy implementation reference points to a void contract; the proxy should have default values.\n\nSince this is security-critical, we should add validation checks in the execution-layer code-path that loads this state, to prevent any accidental misconfigured chains from going live.\n\nThis should be done in both op-reth and op-geth.\n", "CLOSED", 0, "protolambda", "2025-05-07T20:28:38Z", "2025-07-10T03:03:24Z", "2025-07-10T03:03:24Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDODjvEJM6yBRJE", 15355, "op-batcher SetMaxDASize issue", "`time=1,744,045,970\nERROR[04-10|19:25:47.509] SetMaxDASize rpc unavailable or broken, shutting down. Either enable it or disable throttling. err=\"the method miner_setMaxDASize does not exist/is not available\"\nINFO [04-10|19:25:47.509] Stopping Batch Submitter\nINFO [04-10|19:25:47.510] blockLoadingLoop returning\nINFO [04-10|19:25:47.510] throttlingLoop returning\nERROR[04-10|19:25:47.510] Failed to query L1 tip                   err=\"getting latest L1 block: Post \\\"https://attentive-warmhearted-sky.ethereum-sepolia.quiknode.pro/9a32d22857fafcc2a92a3854a691c0a2f5b41354/\\\": context canceled\"\nERROR[04-10|19:25:47.510] Error publishing tx to l1                err=\"getting latest L1 block: Post \\\"https://attentive-warmhearted-sky.ethereum-sepolia.quiknode.pro/9a32d22857fafcc2a92a3854a691c0a2f5b41354/\\\": context canceled\"\nINFO [04-10|19:25:47.510] publishingLoop returning\nINFO [04-10|19:25:47.510] receiptsLoop returning\nINFO [04-10|19:25:47.510] Batch Submitter stopped\n^CINFO [04-10|19:25:49.236] Stopping batcher\nINFO [04-10|19:25:49.236] Stopping Batch Submitter\nINFO [04-10|19:25:49.236] Stopped RPC server`\n\n\n\n### this is command \n\n\n ./bin/op-batcher \\\n--l2-eth-rpc=http://localhost:8545 \\\n--rollup-rpc=http://localhost:9545 \\\n--poll-interval=1s \\\n--sub-safety-margin=6 \\\n--num-confirmations=1 \\\n--safe-abort-nonce-too-low-count=3 \\\n--resubmission-timeout=30s \\\n--rpc.addr=0.0.0.0 \\\n--rpc.port=8548 \\\n--rpc.enable-admin \\\n--max-channel-duration=25 \\\n--l1-eth-rpc=$L1_RPC_URL \\\n--private-key=$GS_BATCHER_PRIVATE_KEY", "CLOSED", 0, "abhi8960git", "2025-04-10T19:28:15Z", "2025-07-09T13:37:06Z", "2025-07-09T13:37:06Z", "ethereum-optimism/optimism", "2025-08-31 06:30:01"]
["I_kwDOFpg0Ns7BJ-pP", 1175, "Etherscan --> Blockscout Migration", "We are migrating to Blockscout for OP Mainnet and OP Sepolia. It appears that this repo currently uses Etherscan for these networks.\n\nThis issue is primarily to find every OPM or OP Sepolia reference to Etherscan, replacing with Blockscout. We should also make sure any contracts we are relying on are already verified on Blockscout.\n\nThe new urls for OPM and Sepolia are https://explorer.optimism.io and testnet-explorer.optimism.io", "OPEN", 0, "fainashalts", "2025-07-17T19:07:44Z", "2025-07-17T19:07:44Z", null, "ethereum-optimism/ethereum-optimism.github.io", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ869HWXn", 416, "[acceptance] Port TestPectra to devstack", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nPort TestPectra to devstack so that we can have it running in sysgo and persistent devnets.", "CLOSED", 0, "serpixel", "2025-06-24T17:52:48Z", "2025-07-18T08:30:51Z", "2025-07-18T08:30:51Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ869HVxR", 415, "[acceptance] Port TestERC20Bridge to devstack", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nPort TestERC20Bridge to devstack so that we can have it running in sysgo and persistent devnets.", "CLOSED", 0, "serpixel", "2025-06-24T17:51:45Z", "2025-07-15T23:24:20Z", "2025-07-15T23:24:20Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ869HVV8", 414, "[acceptance] Port TestOperatorFee to devstack", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nPort TestOperatorFee to devstack so that it can run in sysgo and persistent devnets", "CLOSED", 0, "serpixel", "2025-06-24T17:51:10Z", "2025-07-17T19:25:53Z", "2025-07-17T19:25:53Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ869HU_F", 413, "[acceptance] Port TestChainFork to devstack", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nPort TestChainFork to devstack so that it can run on sysgo and persistent devnets.", "CLOSED", 0, "serpixel", "2025-06-24T17:50:31Z", "2025-07-16T03:51:53Z", "2025-07-15T18:48:29Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ869HUbN", 412, "[acceptance] Port TestWithdrawalsRoot to devstack", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nWe need to port the withdrawals root test to devstack in order to have it working in sysgo and persistent devnets. \n", "CLOSED", 0, "serpixel", "2025-06-24T17:49:28Z", "2025-07-15T18:48:38Z", "2025-07-15T18:48:38Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ863MKo1", 367, "[acceptance] Test: base; convert ChainFork test to use devstack", "We've aligned on moving to op-devstack as soon as possible, so let's convert this test.", "CLOSED", 0, "scharissis", "2025-05-19T10:55:43Z", "2025-07-18T08:35:56Z", "2025-07-16T06:47:55Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ862Kf9n", 328, "[acceptance] Test: base; Basic Deposit Flow Test", "Verify complete deposit flow from L1 to L2, including transaction finality and correct token balances.\n\nRelates to #190 \n\n### Implementation\nUse `op-devstack` to deploy a minimal network setup with L1 and L2 nodes. Create a test wallet with funds on L1, initiate a deposit transaction via the L1 bridge contract, and verify the deposit is received on L2 with correct balances. Monitor transaction receipts and event logs to confirm proper finality.", "CLOSED", 0, "scharissis", "2025-05-12T08:58:49Z", "2025-07-18T08:35:44Z", "2025-05-15T08:19:30Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOL-xLQ860dEu0", 298, "[acceptance] test: interop", "Add acceptance test which checks the basic functionality of an interop network.", "CLOSED", 0, "scharissis", "2025-04-29T08:38:34Z", "2025-07-18T09:44:41Z", "2025-07-18T09:44:40Z", "ethereum-optimism/infra", "2025-08-31 06:31:06"]
["I_kwDOEf1bQc7BJpic", 1169, "Etherscan --> Blockscout Migration", "We are migrating to Blockscout for OP Mainnet and OP Sepolia. It appears that this repo currently uses Etherscan for these networks.\n\nThis issue is primarily to find every OPM or OP Sepolia reference to Etherscan, replacing with Blockscout. We should also make sure any contracts we are relying on are already verified on Blockscout.\n\nThe new urls for OPM and Sepolia are `https://explorer.optimism.io` and `testnet-explorer.optimism.io`\n", "OPEN", 0, "fainashalts", "2025-07-17T18:37:15Z", "2025-07-17T18:37:15Z", null, "ethereum-optimism/community-hub", "2025-08-31 06:31:06"]
["I_kwDOKSJyfM7BJ57h", 917, "Etherscan --> Blockscout Migration", "We are migrating to Blockscout for OP Mainnet and OP Sepolia. This repo currently uses Etherscan as the default block explorer for these networks.\n\nThis issue is primarily to find every OPM or OP Sepolia reference to Etherscan, replacing with Blockscout. We should also make sure any contracts we are relying on are already verified on Blockscout.\n\nThe new urls for OPM and Sepolia are https://explorer.optimism.io and testnet-explorer.optimism.io", "OPEN", 0, "fainashalts", "2025-07-17T19:02:26Z", "2025-07-17T19:02:26Z", null, "ethereum-optimism/ecosystem", "2025-08-31 06:31:08"]
["I_kwDOKSJyfM7A91of", 913, "Add verbs endpoint to list all wallets", "## Problem\n\nOnce a verbs wallet is created, there is no way to view existing wallets\n\n## Solution\n\n- [x] Add `getAllWallets` to sdk\n- [x] Add `GET /wallets` to service\n- [x] Add `wallets list` to ui", "OPEN", 0, "its-everdred", "2025-07-16T21:46:30Z", "2025-07-17T00:04:02Z", null, "ethereum-optimism/ecosystem", "2025-08-31 06:31:08"]
["I_kwDOKSJyfM7A9g-e", 912, "Host verbs-ui + verbs-service", "## Problem\n\nverbs-ui + verbs-service aren't hosted anywhere\n\n## Solution\n\nConfigure hosting\n", "OPEN", 0, "its-everdred", "2025-07-16T21:03:14Z", "2025-07-16T21:45:19Z", null, "ethereum-optimism/ecosystem", "2025-08-31 06:31:08"]
["I_kwDOKSJyfM7A7jB-", 910, "Create a verbs-demo UI repo", "## Problem\n\nVerbs functionality is hard to test and visualize\n\n## Solution\n\nCreate a frontend demo app", "CLOSED", 0, "its-everdred", "2025-07-16T17:52:53Z", "2025-07-17T17:27:14Z", "2025-07-17T17:27:14Z", "ethereum-optimism/ecosystem", "2025-08-31 06:31:08"]
["I_kwDOKSJyfM7AtgpA", 907, "Resolve dependency vulnerabilities", "## Problem\n\nSome of our dependencies are potentially [vulnerable](https://app.wiz.io/findings/code-cicd-scans#%7E%28event%7E%28%7E%27353590bd-2ced-5724-98e7-547b939e59ae*2cCI_CD_SCAN*2c2025-07-14T22*3a25*3a47.459779255Z%29%7Efilters%7E%28timestamp%7E%28inTheLast%7E%28amount%7E30%7Eunit%7E%27days%29%29%29%29).\n\n## Solution\n\nUpgrade relevant packages.", "OPEN", 0, "its-everdred", "2025-07-15T17:44:51Z", "2025-07-15T17:47:52Z", null, "ethereum-optimism/ecosystem", "2025-08-31 06:31:08"]
["I_kwDOKSJyfM7Atfl0", 906, "Add wallet to verbs", "## Problem\n\nVerbs requires a wallet package\n\n## Solution\n\nIntegrate with Privy for wallet creation", "CLOSED", 0, "its-everdred", "2025-07-15T17:43:43Z", "2025-07-17T17:27:02Z", "2025-07-17T17:27:02Z", "ethereum-optimism/ecosystem", "2025-08-31 06:31:08"]
["I_kwDOKSJyfM7AtfDA", 905, "Add verbs package and app to ecosystem", "We need a place to put verbs code", "CLOSED", 0, "its-everdred", "2025-07-15T17:43:01Z", "2025-07-16T17:51:37Z", "2025-07-16T17:51:37Z", "ethereum-optimism/ecosystem", "2025-08-31 06:31:08"]
["I_kwDOH2Qg5s69Ua98", 635, "txpool: invalid interop tx conditionally included", "When interop invalid exec msg tx is received, op-geth filters these tx via ingress filter:\nhttps://github.com/ethereum-optimism/op-geth/blob/47ccb23ae85b6d2b1cf3e5e05f7f84bf081c6d30/core/txpool/ingress_filters.go#L17-L19\n\nand never be included in the txpool. However, while running acceptance test we observed that some invalid exec msg is sometimes persist in the mempool.\n\nMonorepo Issue:\n- https://github.com/ethereum-optimism/optimism/issues/16559\n\nReproduction\n- https://github.com/ethereum-optimism/optimism/pull/16569\n\nBecause of https://github.com/ethereum-optimism/op-geth/pull/629, after 12 seconds the invalid tx will eventually be evicted from the mempool.\n\nHowever this is a temporal fix, and there are still time span which the initially invalid txs enter the mempool. \n\nNote that this is non-deterministic, and may be caused due to some race condition.\n\nFind out why this happens and fix.  ", "OPEN", 0, "pcw109550", "2025-06-25T16:24:05Z", "2025-07-15T14:26:07Z", null, "ethereum-optimism/op-geth", "2025-08-31 06:31:08"]
["I_kwDOI7W0xc7BK2Yv", 1697, "Etherscan --> Blockscout Migration", "We are migrating to Blockscout for OP Mainnet and OP Sepolia. It appears that this repo currently uses Etherscan for these networks.\n\nThis issue is primarily to find every OPM or OP Sepolia reference to Etherscan, replacing with Blockscout. We should also make sure any contracts we are relying on are already verified on Blockscout.\n\nThe new urls for OPM and Sepolia are `https://explorer.optimism.io` and `https://testnet-explorer.optimism.io`.", "OPEN", 0, "fainashalts", "2025-07-17T20:39:48Z", "2025-07-17T20:48:12Z", null, "ethereum-optimism/op-analytics", "2025-08-31 06:31:10"]
["I_kwDOKIsnqM7Auj4_", 1131, "Migrate to Blockscout for L2 Block Explorer Needs", "We are migrating to Blockscout for OP Mainnet and OP Sepolia. It appears that this repo currently uses Etherscan for checking verified contracts. \n\nThis issue is primarily to do a find every OPM or OP Sepolia reference to Etherscan, replacing with Blockscout. We should also make sure any contracts we are relying on are already verified on Blockscout.\n\nThis needs fairly minimal changes to the verification script: \n\n```\n--verifier blockscout \n--verifier-url { https://explorer.optimism.io/api/ | https://testnet-explorer.optimism.io/api }\n```\n\nI don't believe you need an API key for blockscout verification. ", "OPEN", 0, "fainashalts", "2025-07-15T19:17:47Z", "2025-07-17T16:47:38Z", null, "ethereum-optimism/superchain-ops", "2025-08-31 06:31:16"]
["I_kwDOKIsnqM69Uuo6", 1106, "UX: When approving and executing after one approval we run into nonce errors", "Copying message that was sent on Slack:\n\n> I had an issue while executing Arena-Z and Swell where I got the following error\n>     \u2514\u2500 \u2190 [Revert] StateOverrideManager: User-defined nonce (31) is less than current actual nonce (32) for contract: 0xc2819DC788505Aac350142A7A707BF9D03E3Bd03\n> This happened once after I executed the approval for the Foundation, then again after I executed the approval for the Security Council. Is that expected?\n\nThe idea should be that we check if the contract has approved the transaction or not before checking the nonce for that contract. This should be straight forward to implement. The workaround for the time being is to manually update the nonces in the `config.toml` file to make the execution work.", "CLOSED", 0, "blmalone", "2025-06-25T16:56:37Z", "2025-07-14T14:31:46Z", "2025-07-14T14:31:46Z", "ethereum-optimism/superchain-ops", "2025-08-31 06:31:16"]
["I_kwDOLB-lzc68KhwF", 731, "Include `chainId` on `ExecutingDescriptor`", "The current [ExecutingDescriptor](https://github.com/ethereum-optimism/specs/blob/main/specs/interop/supervisor.md#executingdescriptor) missing chainId field according to the go-supervisor [implementation](https://github.com/ethereum-optimism/optimism/blob/b1b70913b93a909c188b1c7771d554b0ff1ece1d/op-supervisor/supervisor/backend/backend.go#L581)\n\nAnd based on the backward compat logic seems like it should be an optional field.\n", "OPEN", 0, "sadiq1971", "2025-06-18T13:24:31Z", "2025-07-14T01:33:01Z", null, "ethereum-optimism/specs", "2025-08-31 06:31:25"]
["I_kwDOLB-lzc6z2azT", 680, "Add lint for checking spelling", "Add `codespell` workflow\nhttps://github.com/paradigmxyz/reth/blob/bf59f5816c44725df586fb6311c5e2ff7cbff9a9/.github/workflows/lint.yml#L196-L203", "OPEN", 0, "emhane", "2025-04-24T13:55:41Z", "2025-07-15T11:10:49Z", null, "ethereum-optimism/specs", "2025-08-31 06:31:25"]
["I_kwDODjvEJM7BbF8t", 16752, "\ud83d\udd27 Integrate golangci-lint for Static Code Analysis", "To improve code quality and maintain consistency across the project, I'd like to propose adding golangci-lint to our development workflow.\n\nThis tool helps catch common bugs, enforces style guidelines, and ensures adherence to Go best practices\u2014all with minimal setup and configuration.\n\nWhy this matters:\n\n- Identifies potential bugs early through static analysis\n- Maintains consistent code style and formatting\n- Reduces technical debt over time\n- Speeds up code reviews with automated checks\n\nProposed steps:\n\n- Add golangci-lint configuration file (.golangci.yml) to the root of the repository.\n- Define rules and linters we want to enforce.\n- Update documentation or contributing guide to include linting steps.\n- Integrate it into the CI pipeline to auto-run checks on PRs.\n\nLet me know your thoughts or if you'd like help setting up the initial config. \ud83d\ude80\n\n", "CLOSED", 0, "Saurabh2402", "2025-07-19T08:20:59Z", "2025-07-19T09:59:37Z", "2025-07-19T09:00:45Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7BS2zr", 16746, "Match acceptance test topology to real world topology", "Current local kurtosis interop devnet exposes sequencer to public, which diverges with production. The topology for production should follow([Ref](https://github.com/ethereum-optimism/design-docs/blob/main/security/fma-interop-tx-handling.md#the-solution-design)):\n- All Executing Message are checked once at proxyd ingress.\n- All Executing Message are checked once at Node Mempool ingress (not counting Sequencer).\n- All Executing Message in Node Mempools are Batched at checked on a regular interval.\n- If an Executing Message is ever Invalid, it is discarded and not retried.\n- No Checks are done at Block Building time.\n\nWe do not have proxyd enabled, and the default topology provides single sequencer node per chain, does not test the verifier mempool check etc.\n\nProvide an abstraction for both sysext/sysgo side to match the test environment with production.\n", "OPEN", 0, "pcw109550", "2025-07-18T11:38:29Z", "2025-07-18T11:40:27Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7BKRwI", 16742, "[general health] Add retry mechanisms whilst building docker images", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nWhen building on a high latency sytem, or in CI where requests can be throttled, the docker build can fail because we're not retrying some fetches.\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\nWe would need to add retries to the docker builds with exponential backoffs so that they build correctly. A previous attempt at doing so was botched (see #16739)\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "OPEN", 0, "serpixel", "2025-07-17T19:34:29Z", "2025-07-17T19:44:48Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7BKPIy", 16741, "[acceptance] Run kurtosis tests against op-geth and op-reth repositories", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nWe just had a failing tests in ethereum-optimism after a [merge](https://discord.com/channels/1244729134312198194/1395161638709104740/1395280982751576064) in op-geth. These were detected by tests in ethereum-optimism (by the interop gate, which uses op-geth).\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\nWe could run the kurtosis tests directly in the op-geth and op-reth repositories to ensure ourselves we don't break all the pipelines in the ethereum-project.\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "OPEN", 0, "serpixel", "2025-07-17T19:29:55Z", "2025-07-17T19:29:55Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7BHza8", 16736, "Reorganize mips logic to encapsulate memory access", "This explores an idea to prevent issues like https://github.com/ethereum-optimism/optimism/issues/16483.\n\nLook into reorganizing mips logic to encapsulate memory access logic so that memory tracking and reservation handling are more automatic.", "OPEN", 0, "pauldowman", "2025-07-17T15:41:39Z", "2025-07-17T15:41:39Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7BBjZX", 16731, "op-acceptance-tests: Handle failing test due to the op-geth version bump for `v1.101511.1`", "Interop acceptance tests: `TestExecMessageInvalidAttributes, TestRegularMessage` started to fail after the op-geth version bump. They are skipped to reduce noise, but we should bring them back", "CLOSED", 0, "pcw109550", "2025-07-17T07:08:06Z", "2025-07-18T16:12:28Z", "2025-07-18T16:12:28Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7A8G3A", 16729, "Remove proxyAdmin input from the OpChainConfig struct used as input for OPCM.upgrade()", "The `proxyAdmin` field from the `OpChainConfig` input struct of the upgrade function should be removed. This is not required as an input anymore since it can be gotten via `systemConfigProxy.proxyAdmin()`. NB: The `systemConfigProxy` is a field in the `OpChainConfig` struct.", "OPEN", 0, "AmadiMichael", "2025-07-16T18:40:42Z", "2025-07-16T18:40:42Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7A7g7U", 16728, "Remove proxyAdmin input from the OpChainConfig struct used as input for OPCM.upgrade()", "The `proxyAdmin` field from the `OpChainConfig` input struct of the upgrade function should be removed. This is not required as an input anymore since it can be gotten via `systemConfigProxy.proxyAdmin()`. NB: The `systemConfigProxy` is a field in the `OpChainConfig` struct.", "OPEN", 0, "AmadiMichael", "2025-07-16T17:49:59Z", "2025-07-16T17:49:59Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7AuYBG", 16714, "Migrate to Blockscout", "The Optimism repo [uses Etherscan as its block explorer](https://github.com/search?q=repo%3Aethereum-optimism%2Foptimism%20etherscan&type=code). While for Layer 1 this is fine, we are migrating our OPM and OP-Sepolia block explorer to Blockscout. Most of the needed changes are just find and replace, but we also need to switch L2 contract verification to use Blockscout. This is fairly straightforward:\n\nThis needs fairly minimal changes to the verification script: \n\n```\n--verifier blockscout \n--verifier-url { https://explorer.optimism.io/api/ | https://testnet-explorer.optimism.io/api }\n```\n\nI don't believe you need an API key for blockscout verification. ", "OPEN", 0, "fainashalts", "2025-07-15T18:59:17Z", "2025-07-17T16:46:47Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7AuFlY", 16713, "[validator] enhance validator checks by cross-checking network configs, contract addresses, etc", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nValidate chain deployments: Check network configs, contract addresses, and cross-layer consistency and verify security settings\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "OPEN", 0, "serpixel", "2025-07-15T18:31:41Z", "2025-07-15T18:31:41Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7AuE_1", 16712, "[validator] add kurtosis support to op-validator", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nWe want to run op-validator against kurtosis.\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "CLOSED", 0, "serpixel", "2025-07-15T18:30:44Z", "2025-09-10T20:22:17Z", "2025-09-10T20:22:17Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7AuEsK", 16711, "[validator] run validator automatically on op-acceptor startup", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nWe want to run op-validator automatically against any deployment we make (e.g. make it part of the RRC).\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\nEnsure that we can run op-validator whenever op-acceptor starts, this will ensure we run against any devnets.\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "OPEN", 0, "serpixel", "2025-07-15T18:30:08Z", "2025-07-15T18:30:08Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Apb_R", 16705, "op-sync-tester: Standalone service", "Deploy stand-alone for CI or local dev: configure in k8s once, on a public endpoint with some auth (maybe even multiple auth tokens), and allow anyone with the auth to sync-test against it.", "OPEN", 0, "pcw109550", "2025-07-15T12:34:57Z", "2025-07-15T12:54:02Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Apb5u", 16704, "op-sync-tester,op-devstack: Support sysext", "Deploy in kurtosis. (low priority)", "OPEN", 0, "pcw109550", "2025-07-15T12:34:49Z", "2025-07-15T12:53:46Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Ac9_t", 16690, "spike: discuss out the need of dedicated namespacing of rbuilders", "Considering, rbuilders being EL in their own ways with their own CL i.e. op-node, the metrics they generate can interfere with the metrics of existing EL and CL in the actual node's namespace.\n\nAlso, their non-interfering functioning should make it easier to tear down or spin them up with lower blast radius while being non-intrusive to the actual EL and CL of the respective node.\n\nAll of these things call for deploying rbuilders and its op-node in a dedicated namespace.\n\nBut this can lead additional initial effort as well of orienting the optimism-chart to allow this kind of multi-namespace deployment of resources of a node when it has flashblocks-enabled.\n\nDiscuss and finalize that out for this ticket.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-14T13:40:04Z", "2025-07-15T18:20:03Z", "2025-07-15T18:20:03Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Ac7YN", 16689, "spike: discuss out the need of nvme node deployment of op-rbuilders", "Based on recent observations, it seems that op-rbuilder performs fairly well on a pd-ssd too.\n\nSo finalize on the necessity of deploying rbuilders on nvme-nodes.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-14T13:36:29Z", "2025-07-15T18:12:40Z", "2025-07-15T18:12:40Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Ab8AM", 16683, "op-node: modularize metrics", "The op-node currently has one big metrics struct.\n\nWith struct embedding and interface embedding we can encapsulate the metrics sub-responsibilities, and categorize this.\nThis will make extension of the metrics cleaner, and allow for per-chain parametrization by isolating the chain-specific kinds of metrics.\n\n", "OPEN", 0, "protolambda", "2025-07-14T12:13:38Z", "2025-07-14T12:13:38Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Ab6jM", 16682, "op-node: improve service config", "Improve the op-node service config:\n- separate out the configuration into its own package\n- separate out the legacy config-setup variants that op-e2e uses\n- create room for later config changes\n\n", "OPEN", 0, "protolambda", "2025-07-14T12:11:25Z", "2025-07-14T12:11:25Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Ab4je", 16681, "op-node: organize CLI flags", "The op-node CLI flags should:\n- be grouped by category\n- clearly separate what is deprecated\n- have aliases where needed for compat, but defaults with consistent flag / category / env var naming.\n\nThis allows us to add additional flags better, e.g. when experimenting with embedding of interop functionality from op-supervisor.\n", "OPEN", 0, "protolambda", "2025-07-14T12:08:24Z", "2025-07-14T12:08:24Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7Ab1Xl", 16680, "op-node: split CLI/entrypoint/service/backend", "Split the op-node setup to better encapsulate the separate layers of service framework:\n- CLI: CLI definition, urfave etc.\n- entrypoint: turns CLI into config, returns service as CLI lifetime\n- service: manages peripherals (metrics, pprof, rpc servers), and inner backend\n- backend: business logic of the actual node\n", "CLOSED", 0, "protolambda", "2025-07-14T12:03:54Z", "2025-10-01T14:35:53Z", "2025-10-01T14:35:52Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7AbzVf", 16679, "op-node: improve core setup", "Improve the op-node setup code, to make it more amenable to changes that require big configuration/metrics/RPC adjustments.\n\n", "OPEN", 0, "protolambda", "2025-07-14T12:00:47Z", "2025-07-14T12:00:47Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM7AQGgM", 16677, "op-batcher: duplicate code", "Is `checkTxpool` still needed here\nhttps://github.com/ethereum-optimism/optimism/blob/7a0ab04ea2db5421da689eb77a68e674e4ae9cfe/op-batcher/batcher/driver.go#L465-L470\n\nsince the `publishStateToL1` already check the `checkTxpool`\nhttps://github.com/ethereum-optimism/optimism/blob/7a0ab04ea2db5421da689eb77a68e674e4ae9cfe/op-batcher/batcher/driver.go#L719-L735", "CLOSED", 0, "chuwt", "2025-07-12T14:53:28Z", "2025-07-15T12:43:43Z", "2025-07-15T12:43:43Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6_wRuw", 16656, "E2E: Invalid Interop Tx Reinjection Test", "We need a test that confirms that whenever a block is reorged and the transactions are reinjected to the mempool, interop transactions are re-checked.\n\nIt is unclear if existing E2E tests check this, but it might be covered by: https://github.com/ethereum-optimism/op-geth/issues/635\n\nRegardless, we should confirm E2E test coverage, and establish a test if not present.\n\nThe expected behavior prior to [this PR](https://github.com/ethereum-optimism/op-geth/pull/642) is that invalid interop tx get reinjected to the mempool, skipping filters. The expected behavior once this PR is merged will be that transactions are filtered out appropriately.", "OPEN", 0, "axelKingsley", "2025-07-09T20:50:28Z", "2025-07-14T10:46:22Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6_t_mA", 16653, "Consider making VerifyOPCM a wrapper around DeployImplementations for v2", "# Consider making VerifyOPCM a wrapper around DeployImplementations for v2\n\nCurrently, we have two separate scripts:\n- `DeployImplementations.s.sol` - Deploys implementation contracts\n- `VerifyOPCM.s.sol` - Verifies OPCM deployment\n\nDue to CREATE2's idempotency properties, running `DeployImplementations.s.sol` essentially performs the same verification as `VerifyOPCM.s.sol`. When properly configured, if all contracts are already deployed at their expected addresses, the deployment script will result in zero new deployments - effectively serving as verification.\n\n## Proposal\n\nFor v2 of VerifyOPCM, consider refactoring it to be a wrapper around `DeployImplementations.s.sol` rather than maintaining separate verification logic.\n\n### Considerations\n\nDeployImplementations requires constructor arguments as input, whereas VerifyOPCM ignores them and requires them\nto be [separately verified](https://www.notion.so/oplabs/Contracts-Release-Checklist-op-contracts-v4-0-0-rc-8-216f153ee1628050b3a8c9d1aeb44c76?source=copy_link#216f153ee16280198888fae43976f92e).", "OPEN", 0, "maurelian", "2025-07-09T16:26:48Z", "2025-07-14T20:01:29Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM66iZC9", 16332, "op-node v1.13.3: thousands of stuck goroutines in p2p.SyncClient / libp2p", "**Bug Description**\n\nAfter several hours of uptime, `op-node` (v1.13.3) gets stuck with thousands of goroutines, mostly in `select`, `IO wait`, or `yamux` session handlers. Sync stops working properly. The node appears connected but stops progressing with peers. We suspect an issue with how libp2p/yamux sessions are handled or cleaned up.\n\n**Steps to Reproduce**\n\n1. Start `op-node` v1.13.3 using the official image `us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.13.3` (based on Alpine Linux 3.20).\n2. Let it run for 6\u201312 hours in a production setup with inbound/outbound peer traffic.\n3. Inspect goroutines using `kill -ABRT $(pidof op-node)` or `pprof`.\n4. Observe thousands of goroutines in stuck state, many coming from `libp2p`, `yamux`, or `p2p.(*SyncClient).peerLoop`.\n\n**Expected behavior**\n\nGoroutines should terminate or be cleaned up if the stream or peer becomes inactive or broken. Instead, they accumulate indefinitely, consuming resources and blocking new peer interactions.\n\n**Environment Information:**\n\n- Operating System: Alpine Linux 3.20 (via Docker)\n- Container image: `us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.13.3`\n- Package Version: op-node v1.13.3\n- go-libp2p: v0.36.2\n- go-yamux: v4.0.1\n- go-libp2p-pubsub: v0.12.0\n- CPU: 32-core\n- RAM: 128 GB\n- Disk: NVMe SSD\n- Load: <30% CPU, <40% RAM, disk idle\n\n**Configurations:**\n\nEnvironment variables and CLI:\n```bash\nOP_NODE__L2_ENGINE_AUTH_FILE=/jwtsecret\nOP_NODE__L2_ENGINE_RPC=http://localhost:8551\nOP_NODE__L1=<REDACTED>\nOP_NODE__L1_BEACON=<REDACTED>\nOP_NODE__RPC_ADDR=0.0.0.0\nOP_NODE__RPC_PORT=8547\nOP_NODE__METRICS_ENABLED=true\nOP_NODE__P2P_ENABLED=true\nOP_NODE__P2P_PRIV_PATH=/p2p-node-key.txt\nOP_NODE__P2P_LISTEN_IP=0.0.0.0\nOP_NODE__P2P_TCP_PORT=30303\nOP_NODE__P2P_UDP_PORT=30303\n```\n\n**Logs:**\n\nTruncated example of goroutines:\n```\ngoroutine 3412893 [select]:\ngithub.com/libp2p/go-yamux/v4.(*Stream).Read(0xc012cb2380, ...)\n  stream.go:111\n...\ngithub.com/libp2p/go-libp2p-pubsub.(*PubSub).handleNewStream\n  comm.go:66\n\ngoroutine 4125262 [select, 2612 minutes]:\ngithub.com/ethereum-optimism/optimism/op-node/p2p.(*SyncClient).peerLoop\n  sync.go:589\n\ngoroutine 4646886 [select, 325 minutes]:\ngithub.com/libp2p/go-yamux/v4.(*Stream).Read\n  stream.go:111\n...\ngithub.com/libp2p/go-libp2p-pubsub.(*PubSub).handlePeerDead\n  comm.go:150\n```\n\n**Additional context**\n\n- Problem persists across restarts.\n- System resources are not saturated.\n- We suspect either `op-node` does not cancel dead peer sessions properly, or `libp2p/yamux` streams are not cleaned up under some edge condition.\n- This causes sync issues and degraded networking performance over time.", "OPEN", 0, "artemrootman", "2025-06-09T08:27:34Z", "2025-07-16T13:27:16Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM62qF51", 15950, "op-proposer acceptance tests for interop", "Smoke test the op-proposer asserting valid super proposals are submitted.\n\nThis acceptance test must target [pre-interop migrated chains](https://github.com/ethereum-optimism/optimism/issues/15947) and [interop chains](https://github.com/ethereum-optimism/optimism/issues/15949).\n\nThe scope of this issue is to have it working with sysgo. https://github.com/ethereum-optimism/optimism/issues/16168 is for ensuring that it also works with sysext/Kurtosis when support for that is ready.", "CLOSED", 0, "Inphi", "2025-05-14T23:32:11Z", "2025-07-14T16:54:27Z", "2025-07-14T16:54:27Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM61nj49", 15761, "Interop: add sanity-checks to op-node", "Not all changes from a supervisor may be correct. It's good to sanity-check them, to limit impact of possible bugs.\n\nPre-interop we have a few sanity-checks, like the max-reorg check in the find-sync-start search algorithm.\n\nSpecifically:\n- Never reorg because of a supervisor when interop is not active yet\n- Never reorg more than a day worth of L2 blocks\n- Do not invalidate (local-safe invalidation from interop) blocks pre-interop\n", "CLOSED", 0, "protolambda", "2025-05-07T20:04:01Z", "2025-07-17T09:20:57Z", "2025-07-17T09:20:56Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM61Ayvp", 15678, "op-e2e: Add Super DG test covering unsafe proposals for a non-zero step", "The `TestSuperInvalidateUnsafeProposal` e2e test asserts that the challenger handles [unsafe proposals](https://github.com/ethereum-optimism/optimism/issues/15321) correctly. This test only covers the step=0 case where the first chain is checked for an unsafe proposal.\n\nIf you look at the [logic](https://github.com/ethereum-optimism/optimism/blob/f4c2ccc228d22b3049a7375223d96bcef5e70cf9/op-challenger/game/fault/trace/super/provider.go#L71) for responding to such claims, you'll notice that the step=0 and non-zero case are quite different. So it would be good to add a test that covers the non-zero step case. This is a tricky test to setup as it involves coercing the challenger into moving at certain positions in the top game. For inspiration, look into how a [similar problem was solved](https://github.com/ethereum-optimism/optimism/blob/f4c2ccc228d22b3049a7375223d96bcef5e70cf9/op-e2e/e2eutils/disputegame/cannon_helper.go#L314), where we coerce bottom-game disputes at a specific VM step.", "CLOSED", 0, "Inphi", "2025-05-02T21:46:44Z", "2025-07-17T15:22:50Z", "2025-07-17T15:22:50Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6ylVVj", 15411, "Can not start new node with op-node", "# Issue Description\n\nMy op-node is not running it is stopped with this error\n\n\n![Image](https://github.com/user-attachments/assets/bf5bb711-fa43-4dc3-a736-f72fe9883205)\n\nrun command :Geth\n\n`../build/bin/geth   --datadir ./datadir   --http   --http.corsdomain=\"\"   --http.vhosts=\"\"   --http.addr=0.0.0.0   --http.api=web3,debug,eth,txpool,net,engine   --ws   --ws.addr=0.0.0.0   --ws.port=8546   --ws.origins=\"\"   --ws.api=debug,eth,txpool,net,engine   --syncmode=full   --gcmode=archive   --nodiscover   --maxpeers=0   --networkid=11155111   --authrpc.vhosts=\"\"   --authrpc.addr=0.0.0.0   --authrpc.port=8551   --authrpc.jwtsecret=./jwt.txt   --rollup.disabletxpoolgossip=true`\n\nrun command :Op-node\n`../bin/op-node   --l2=http://localhost:8551/   --l2.jwt-secret=./jwt.txt   --sequencer.enabled   --sequencer.l1-confs=5   --verifier.l1-confs=4   --rollup.config=./rollup.json   --rpc.addr=0.0.0.0   --p2p.disable   --rpc.enable-admin   --p2p.sequencer.key=$GS_SEQUENCER_PRIVATE_KEY   --l1=https://eth-sepolia.public.blastapi.io/   --l1.rpckind=$L1_RPC_KIND\n`\nLog Info:\n```\nERROR[04-15|16:42:17.274] Error initializing the rollup node       err=\"failed to init L1: failed to validate the L1 config: failed to get L1 genesis blockhash: failed to fetch header by num 8122916: failed to verify block hash: computed 0x77200e9b104962c415e061b1805b155be0b9c8efa083d9faf1e11a26c423c744 but RPC said 0x86dc6da898abb21c5e07f8578b2c88f93d424b28a0930d67bc750cbf1f134a97\"\nCRIT [04-15|16:42:17.274] Application failed                       message=\"failed to setup: unable to create the rollup node: failed to init L1: failed to validate the L1 config: failed to get L1 genesis blockhash: failed to fetch header by num 8122916: failed to verify block hash: computed 0x77200e9b104962c415e061b1805b155be0b9c8efa083d9faf1e11a26c423c744 but RPC said 0x86dc6da898abb21c5e07f8578b2c88f93d424b28a0930d67bc750cbf1f134a97\"\n\n```", "CLOSED", 0, "Dnate2001", "2025-04-15T11:39:51Z", "2025-07-16T13:28:27Z", "2025-07-16T13:28:27Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6xh3u9", 15285, "interop: Stress test expiry window", "Create a worst case scenario of running the consolidation step on two blocks with executing messages that refer to initiating messages at the limit of the expiry window. Initiating messages should come from both chains and many executing messages should be included in the same block that reference a range of different blocks within the expiry window. All referenced messages should be valid to ensure they all have to be processed.", "OPEN", 0, "ajsutton", "2025-04-08T02:42:06Z", "2025-07-14T14:58:42Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6vxO-N", 15040, "devnet-sdk: improve private-key management / interfaces", "The addresses of the operator actors in a devnet are needed for some tests. Some addresses are available in configuration, but some are not.\n\nSome of the private keys of the above are needed for some tests to produce interesting/conflicting data.\n\nCurrently we have a `devkeys` package that describes all addresses, and provides a default way to derive keys.\n\nIf we want to run devnet-sdk tests against networks where we don't have all keys/addresses, we need to make it more selective. This is also useful for working against devnets/testnets that have had key-rotations or production-like key management, where it does not match the dev key-derivation.\n\n- `devkeys` addresses/secrets (= combination is \"keys\") interface with error-return\n- `systemext` address-book (to omit error return, and require no-error instead) should be shared in devnet-sdk for other backends to use\n- `devkeys` package needs a simple json-compatible struct, with dicts of addresses and secrets, that implements the keys interface (addresses and secrets can be types themselves, implementing their part of the interface, and simply embedded together for the larger interface). (use `string` as key internally, but take the `devkeys.Key` interface as argument in a getter-function, to do the stringing before lookup)\n- kurtosis keys should be dumped into a json like the above, and then loaded into `systemext` that way. This way we don't enshrine the devkeys HD-derivation into kurtosis.\n\n", "CLOSED", 0, "protolambda", "2025-03-26T09:30:16Z", "2025-07-17T19:50:34Z", "2025-07-17T19:50:34Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6omEfy", 14118, "Look into adding NAT tests for fault proof system", "## Description\n\nLook into writing fault proof acceptance tests with the new [Network Acceptance Tester (NAT) framework](https://github.com/ethereum-optimism/infra/tree/main/op-nat).", "CLOSED", 0, "mbaxter", "2025-02-03T21:21:10Z", "2025-07-17T15:24:53Z", "2025-07-17T15:24:53Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6jvwBR", 13459, "Update NPM Package: @eth-optimism/contracts-bedrock", "### Description\n\nHello team,\n\nI noticed that the NPM package [@eth-optimism/contracts-bedrock](https://www.npmjs.com/package/@eth-optimism/contracts-bedrock) seems to be outdated compared to the latest updates in the repository. Could you please publish an updated version to NPM?", "CLOSED", 0, "Uttam-Singhh", "2024-12-18T08:58:13Z", "2025-07-16T23:17:42Z", "2025-07-16T23:17:42Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6cAjwL", 12686, "Replace Makefiles with Justfiles", "We use Make and Just together right now, and it's confusing. Replacing Make with Just would make monorepo setup easier, and simplify the process of adding new scripts to run since Just is much simpler than Make.", "CLOSED", 0, "mslipper", "2024-10-28T06:01:51Z", "2025-07-16T23:21:30Z", "2025-07-16T23:21:30Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6cAjKJ", 12685, "[Bailiff] Provide feedback to first-time users", "First-time external contributors don't know that their PRs need to be authorized by a member of our team before CI will run. Having Bailiff post a comment describing the process on first-time contributions would make this process easier, and avoid unnecessary questions in Discord.", "CLOSED", 0, "mslipper", "2024-10-28T06:00:26Z", "2025-07-15T19:16:19Z", "2025-07-15T19:16:19Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6cAi17", 12684, "[Bailiff] Emoji-react when Baliff is working", "Bailiff should emoji-react the `/ci authorize <sha>` comment when it receives the webhook and starts the process of authorizing a given PR.", "CLOSED", 0, "mslipper", "2024-10-28T05:59:37Z", "2025-07-15T19:16:15Z", "2025-07-15T19:16:15Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6cAewH", 12683, "[Idea] PR-based release workflow", "Our release process is complicated. Cutting a release of the op-stack, for example, requires a whole bunch of steps:\n\n- Merge changes into the codebase.\n- Tag an RC.\n- Bake the RC, making changes as we see fit\n- \"Finalize\" the RC.\n\nEach RC requires a manual approval step in CircleCI.\n\nWe currently use the tag-service script for this, but it has a few drawbacks:\n\n- No way to perform a \"dry run\" of what will happen prior to running it.\n- No support for multiple version lineages (e.g., you can't use it to backport a change from 1.2.x to 1.1.x).\n- No support for custom release notes, or creating releases on GitHub.\n\nI suggest we deprecate tag-service, and instead adopt a PR-based workflow. It would work similarly to how Changesets used to work, but better and with support for more languages. it would work like this:\n\n1. Someone creates a PR containing a changelog file. The changelog file would define the new tag to be created, and describe what's in it.\n2. The PR gets merged.\n3. A bot goes and creates the tag on GitHub, and generates any associated artifacts/releases.\n\nThe changelog file might look like this:\n\n```\ntag: op-node/v1.2.3\nprerelease: rc.1\n---\n\n> release notes go here\n```\n\nTo finalize an RC, you would remove the `prerelease` identifier. The bot would grab the latest prerelease, and re-tag it with the real full release name.\n\nThis gives us the following advantages over the previous workflow:\n\n- We can remove the approval step in CCI, since approval is given by merging the PR.\n- We make it easy to define human-understandable release notes.\n- We gain the ability to audit our releases, since they appear in our GitHub history.\n\nWe could likely integrate this with op-deployer to get binary builds for free.", "CLOSED", 0, "mslipper", "2024-10-28T05:49:31Z", "2025-07-16T23:21:25Z", "2025-07-16T23:21:25Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6aL_BU", 12448, "op-node: issue with sequencer stop / start behavior", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Bug Description**\r\n<!--\r\nA clear and concise description of what the bug is.\r\n-->\r\nBase Sepolia experienced a ~1 hour chain halt at Oct 14th, 2024. Upon investigation, the sequence of events are listed below\r\n\r\n* HA1 is the leader and is sequencing\r\n* [06:22:44] Upon working on block `16571938`\r\n  * it timed out [06:22:49] trying to insert block into op-geth after 5 seconds\r\n    * log shows `failed to insert execution payload: failed to execute payload: context deadline exceeded`\r\n  * but it did gossip out the unsafe block on op-node side, meaning HA2 & HA3 has the latest block on op-node, and will try to insert it into op-geth themselves (however that'll time out as well)\r\n* [06:22:49] HA1 became unhealthy, and leadership transferred to HA2\r\n* [06:22:49] upon becoming leader, HA2 tries to start sequencer locally, however it cannot because of chain head hash mismatch\r\n  * in HA2 op-geth, it has block `16571937`, which does not match `16571938`\r\n  * conductor tries to get payload from consensus layer, and post 16571938 payload to op-node again\r\nhowever it was rejected immediately [code](https://github.com/ethereum-optimism/optimism/blob/develop/op-node/rollup/clsync/clsync.go#L176), because HA2 has that unsafe payload already\r\n    * `cannot add duplicate payload 0xb7d2dea272494a387e4dc447b681dfd42f043e360a2a51814ecce260eed85a1c:16571938`\r\n  * HA2 also timed out trying to insert 16571938 into op-geth, because of the timeout, later ForkChoiceUpdate call was not executed, thus the chain head was not updated to `16571938`\r\n* [06:22:49-06:22:56] HA2 continues to retry starting sequencer, but cannot (because latest block hash is not updated in op-geth)\r\n  * upon becoming unhealthy itself, HA2 initiates leadership transfer again\r\n* [06:22:56] HA1 became leader again\r\n  * And since HA1 previously is the block builder, it does not have 16571938 in its own [payloadsQueue](https://github.com/ethereum-optimism/optimism/blob/develop/op-node/rollup/clsync/clsync.go#L175), therefore conductor was able to post unsafe payload to op-node again, and trigger [ForkChoiceRequestEvent](https://github.com/ethereum-optimism/optimism/blob/develop/op-node/rollup/clsync/clsync.go#L184) to update chain head\r\n  * However after the chain head is updated, the sequencer does not schedule another sequencing step any more\r\n\r\n\r\n**Steps to Reproduce**\r\n<!--\r\n1. Outline the steps to reproduce the bug.\r\n4. Be specific and detailed to help developers replicate the issue.\r\n-->\r\nWith HA setup, construct a big block that takes longer than 10s (timeout of NewPayload in v1.9.3)\r\n\r\n**Environment Information:**\r\n<!--\r\n - Operating System: [e.g. Ubuntu 20.04]\r\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\r\n-->\r\nop-node: v1.9.2\r\n\r\n**Issues / Expected behavior**\r\n<!--\r\nAdd any other context about the problem here.\r\n-->\r\n\r\nThere are 2 issues here:\r\n* `sequencer.nextActionOK` might still be the false and `sequencer.nextAction` might still be previous time where after resuming sequencing under some circumstances, such as this condition where next payload is restored from Raft consensus.\r\n  * There are likely more places that this needs to be set, but concern right now is that this generally feels brittle and any new changes to the deriver's event pipeline could result in another similar bug in the future \r\n* if NewPayload or similar interaction with op-geth times out, leadership transfer will happen, and only the current sequencer (in this case HA1) will be able to get past it (eventually transfer leadership back to it) because it does not have the unsafe block in its [payloadsQueue](https://github.com/ethereum-optimism/optimism/blob/develop/op-node/rollup/clsync/clsync.go#L175), \r\n  * all the other sequencers fail to become sequencer\r\n  * All the other sequencers will get unsafe payload from CL and tries to insert it => time out, forkchoice update not called\r\n  * once elected to be leader, conductor tries to start sequencing, however, latest block != local block (because new payload timed out, therefore forkchoice update is not called)\r\nconductor tries to get the unsafe payload from raft again and post to op-node, but was rejected immediately because the payload is in the payloadsQueue already\r\n\r\n---\r\n\r\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\r\n- Bug Description\r\n- Steps to Reproduce\r\n- Environment Information\r\n\r\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "0x00101010", "2024-10-14T19:08:48Z", "2025-10-01T14:36:34Z", null, "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6YqWW4", 12240, "Sequencer halting on temporary error", "From an internal report by @mdehoog:\r\n> I'm running an L3 sequencer locally (using Base Sepolia as the \"L1\") and noticed that block building halts pretty consistently, after the following logs:\r\n```\r\nt=2024-10-01T23:05:36+0000 lvl=info msg=\"Started sequencing new block\" parent=0xe3411af59e2177377734ab199d2a8698f07db2a4cb11fdf80dbf228c21ef6024:209 l1Origin=0x74f255a508a8219038aa95e56e39de5aaf7b3b5781b9033b404bcd53a7d1c266:16027824\r\nt=2024-10-01T23:05:36+0000 lvl=warn msg=\"Engine temporary error\" err=\"temp: failed to fetch L1 block info and receipts: querying block: not found\"\r\nt=2024-10-01T23:05:36+0000 lvl=debug msg=\"Engine reported temporary error, but sequencer is not using engine\" err=\"temp: failed to fetch L1 block info and receipts: querying block: not found\"\r\n```\r\n> after this temporary error, there are no more \"Sequencer action\" logs. I'm a little nervous about this happening in prod.\r\nCan anyone explain why we don't schedule another action in [this conditional](https://github.com/ethereum-optimism/optimism/blob/73038c881b48a591c216c880d946f41efb185a32/op-node/rollup/sequencing/sequencer.go#L385-L386)?\r\nhttps://github.com/ethereum-optimism/optimism/blob/73038c881b48a591c216c880d946f41efb185a32/op-node/rollup/sequencing/sequencer.go#L385-L386\r\n\r\nMy initial take:  I think what happens is that when the sequencer enters `startBuildingBlock`, the building state in `d.latest` is cleared because of a previous `d.onPayloadSuccess`. It then hits a temp error and returns, but it never set any field in the `d.latest BuildingState`, which only happens at the end right before emitting a `BuildStartEvent`. This temp error then lands in `onEngineTemporaryError` where it checks if there's any non-zero `BuildState` at `d.latest` to make the decision whether the \"sequencer is using the engine\", and then returns early because it's still clear, so no future action is scheduled.", "CLOSED", 0, "sebastianst", "2024-10-02T10:42:37Z", "2025-07-16T23:22:31Z", "2025-07-16T23:22:31Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDODjvEJM6QwLpt", 11228, "Recovery from sequence window expiration incident", "## High level description\r\nIf op-batcher stops batch submission for a while and the sequence window is expired, op-node starts to generate empty blocks. But even if the op-batcher becomes operational, it's hard to recover batch submission and chain derivation because new batches will be likely dropped. This issue includes details of the situation and proposed solution.\r\n\r\n## Details of the incident\r\n1. For some reason, batches are not submitted for a while and the sequence window expired.\r\n2. op-node generates empty batches and safe head is advanced with empty blocks. Chain reorg occurs.\r\n3. Sequencer builds new blocks after generated empty blocks.\r\n4. op-batcher makes the next batch from the its current safe head and submit the batch. \r\n5. While the new batch is built and submitted to the L1, op-node generates next empty blocks and reorged again.\r\n6. The new batch will be dropped by following reasons:\r\n  i. If the batch has non-empty blocks, it would not be canonical blocks after new empty blocks.\r\n  ii. If the batch has only empty blocks and the batch is a span batch, the first block of span batch is already over sequence window. So the entire batch is dropped.\r\n\r\nRepeat 2~6\r\n\r\nCurrently, we have to do following things manually to recover the chain from the incident.\r\n 1. Block new user TX submissions.\r\n 2. Empty sequencer's TX pool.\r\n 3. Run op-batcher as a singular batch mode until the chain derivation is recovered.\r\n\r\nWe may add these steps to the runbook, but we can improve system to automate these steps.\r\n\r\n## Solution\r\n1. Define a new state of op-node which indicates \"Currently sequence window is expired and generating empty batches\". Let's say this as `incident mode` for now.\r\n2. `incident mode` is enabled when the op-node generates empty block. and disabled when the op-node derives new block from L1 batch.\r\n3. If the op-node is in `incident mode`, sequencer builds empty blocks by setting `NoTxPool` as `true`.\r\n4. `incident mode` is included as a boolean value in the `optimism_syncStatus` RPC response.\r\n5. op-batcher can check if the op-node is `incident mode` by `syncStatus` RPC. If the op-node is in `incident mode`, op-batcher builds singular batch even if it's running as a span batch mode. (Or we can make it build span batch far from the current safe head to avoid sequence window expiration)\r\n\r\n## Discussion\r\nThis change can automate the incident recovery of OP stack chains, but it may be a bit risky because it's touching a lot of important features like sequencing and batch submission. Because this incident situation is very unlikely, we can consider more manual way to recover the system from the incident.", "CLOSED", 0, "ImTei", "2024-07-24T22:05:32Z", "2025-07-16T23:21:04Z", "2025-07-16T23:21:04Z", "ethereum-optimism/optimism", "2025-08-31 06:31:39"]
["I_kwDOKSJyfM7BZAl6", 918, "Move verbs to solo repo", "## Problem\n\nWe intend for verbs to be a standalone project without requiring other ecosystem context\n\n## Solution\n\n- [x] Copy verbs apps to a solo repo\n- [x] Add CI steps to new repo\n- [ ] Remove verbs apps from ecosystem", "CLOSED", 0, "its-everdred", "2025-07-18T22:55:55Z", "2025-09-05T17:40:36Z", "2025-07-23T17:36:43Z", "ethereum-optimism/ecosystem", "2025-08-31 06:32:53"]
["I_kwDOKSJyfM7BJN27", 916, "Host verbs", "## Problem\n\nWe don't have hosting set up for verbs\n\n## Solution\n\nset up hosting for\n- [x] `verbs-ui`\n- [ ] `verbs-service`", "CLOSED", 0, "its-everdred", "2025-07-17T17:50:27Z", "2025-07-23T17:36:38Z", "2025-07-23T17:36:38Z", "ethereum-optimism/ecosystem", "2025-08-31 06:32:53"]
["I_kwDOKSJyfM683YNx", 865, "bring in the interop-alpha demo app as a page into superchain playground", "", "CLOSED", 0, "hamdiallam", "2025-06-23T15:37:00Z", "2025-07-23T16:36:46Z", "2025-07-23T16:36:46Z", "ethereum-optimism/ecosystem", "2025-08-31 06:32:53"]
["I_kwDOKSJyfM683YDv", 864, "Superchain tools RCT Demo", "", "CLOSED", 0, "hamdiallam", "2025-06-23T15:36:45Z", "2025-07-23T16:36:22Z", "2025-07-23T16:36:22Z", "ethereum-optimism/ecosystem", "2025-08-31 06:32:53"]
["I_kwDOKIwiaM7BJskC", 1696, "Etherscan --> Blockscout migration", "We are migrating to Blockscout for OP Mainnet and OP Sepolia. It appears that this repo currently uses Etherscan for these networks.\n\nThis issue is primarily to find every OPM or OP Sepolia reference to Etherscan, replacing with Blockscout. We should also make sure any contracts we are relying on are already verified on Blockscout.\n\nThe new urls for OPM and Sepolia are `https://explorer.optimism.io` and `testnet-explorer.optimism.io`", "CLOSED", 0, "fainashalts", "2025-07-17T18:42:38Z", "2025-07-21T18:59:04Z", "2025-07-21T18:59:04Z", "ethereum-optimism/docs", "2025-08-31 06:32:54"]
["I_kwDOL-xLQ862fsRO", 348, "[acceptance] Bug: Flaky test TestHTMLSummarySink_GeneratesHTMLReport", "This test is flaky in CI (and only CI): **TestHTMLSummarySink_GeneratesHTMLReport**\n\nFailed runs:\n* https://app.circleci.com/pipelines/github/ethereum-optimism/infra/1228/workflows/2276e6f9-849e-4af0-ab60-53e4e94d0a73/jobs/6772/tests#failed-test-0", "CLOSED", 0, "scharissis", "2025-05-14T04:17:27Z", "2025-07-23T06:31:06Z", "2025-07-23T06:31:06Z", "ethereum-optimism/infra", "2025-08-31 06:32:55"]
["I_kwDOL-xLQ86ubmOi", 244, "[acceptance] Bug: wrong exit-code in CI for runtime errors", "Works locally, but not in CI.\n\n```\n=== Failed\n=== FAIL: cmd TestExitCodeBehavior/Runtime_error_should_exit_with_code_2 (0.09s)\n    main_test.go:225: Running op-acceptor with testdir=/tmp/op-acceptor-test-1287960304/non-existent-dir, gate=test-gate-passes, validators=/tmp/op-acceptor-test-1287960304/test-validators.yaml\n    main_test.go:236: Exit code: 1\n    main_test.go:121: \n                Error Trace:    /root/project/op-acceptor/cmd/main_test.go:121\n                Error:          Not equal: \n                                expected: 2\n                                actual  : 1\n                Test:           TestExitCodeBehavior/Runtime_error_should_exit_with_code_2\n                Messages:       Unexpected exit code\n\n=== FAIL: cmd TestExitCodeBehavior (8.50s)\n```", "CLOSED", 0, "scharissis", "2025-03-17T21:51:12Z", "2025-07-24T07:33:03Z", "2025-07-24T07:33:03Z", "ethereum-optimism/infra", "2025-08-31 06:32:55"]
["I_kwDOH2Qg5s7CsnFk", 647, "MiG", "# Rationale\n\nWhy should this feature exist?\nWhat are the use-cases?\n\n# Implementation\n\nDo you have ideas regarding the implementation of this feature?\nAre you willing to implement this feature? Sure", "CLOSED", 0, "Dhy2928", "2025-07-27T02:42:55Z", "2025-07-27T02:43:07Z", "2025-07-27T02:43:07Z", "ethereum-optimism/op-geth", "2025-08-31 06:32:56"]
["I_kwDOH2Qg5s6xfrmp", 573, "core/txpool: Periodically update tracked rollup costs", "The transaction pool recently received some bug fixes to how it tracks rollup costs. We left out a further improvement: since rollup costs can change from block to block, it makes sense to periodically update the total cost in each `list`, taking into account each transaction's updated rollup costs.", "CLOSED", 0, "sebastianst", "2025-04-07T20:02:25Z", "2025-07-21T22:26:05Z", "2025-07-21T22:26:05Z", "ethereum-optimism/op-geth", "2025-08-31 06:32:56"]
["I_kwDOLB-lzc6suPCg", 609, "Upgrade block rules specs", "", "CLOSED", 0, "sebastianst", "2025-03-05T16:25:28Z", "2025-07-21T22:25:15Z", "2025-07-21T22:25:15Z", "ethereum-optimism/specs", "2025-08-31 06:32:56"]
["I_kwDOLB-lzc6PmHrU", 277, "Interop: update the event-index wildcard / intent feature PR", "The idea of specifying a wildcard event-index, to defer the exact connection to initiating-event to the sequencer, was drafted here: https://github.com/ethereum-optimism/specs/pull/108\r\n\r\nThis needs to be updated to account for executing-messages now being declared through events, not statically in a transaction.\r\nLikewise, the link to the initiating message, as inserted by the sequencer, may be declared through an event, to keep all message-dependency data within the log-events scope.\r\n\r\nThis enables more flexible transaction flows, by allowing users to pre-sign multiple interdependent interop txs, without pre-committing to the exact block construction (i.e. no exact event index).\r\n\r\n", "CLOSED", 0, "protolambda", "2024-07-15T16:19:58Z", "2025-07-21T22:25:08Z", "2025-07-21T22:25:08Z", "ethereum-optimism/specs", "2025-08-31 06:32:56"]
["I_kwDODjvEJM7ChlC9", 16823, "\"Why does test_verifyOpcmCorrectness_succeeds() fail only on OP Mainnet upgrade test?\"", "Question: why did the OPContractsManager_Upgrade_Test::test_verifyOpcmCorrectness_succeeds() fail\n  only on the OP Mainnet upgrade test, but not other fork tests?\n\nFailure is here: https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/96304/workflows/c28d50f9-abf3-4738-8bb6-f867367a793a/jobs/3716477\n\nOn base upgrade tests it appears to be skipped.", "OPEN", 0, "maurelian", "2025-07-25T15:19:45Z", "2025-07-25T15:19:59Z", null, "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7CV4_B", 16809, "[Tracking] [Exec Multiplexing] Execution Multiplexing", "", "OPEN", 0, "mslipper", "2025-07-24T16:38:56Z", "2025-07-25T22:53:53Z", null, "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7CV0aA", 16806, "Event System Refactor POC", "", "CLOSED", 0, "mslipper", "2025-07-24T16:32:10Z", "2025-07-24T16:44:45Z", "2025-07-24T16:44:45Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7BpI-T", 16765, "Partner's support criteria evaluation on eris-0", "Use eris-0's flashblocks enablement as a vehicle to test the following criteria:\n\n- A Flashblock enabled sequencer is live on a 2 chain alphanet\n   - Block production must meet a 99.95% SLA\n   - Flashblocks streaming must meet a 90% SLA\n- Fallback to normal sequencer when Flashblocks are not working is tested on a live network", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:59:37Z", "2025-09-15T21:16:20Z", "2025-09-15T21:16:19Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7BpGUX", 16764, "deploy flashblocks-rpc node", "Deploy two flashblocks-rpc serving flashblocks-rpc as per this reference: https://docs.base.org/base-chain/flashblocks/apps", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:56:19Z", "2025-09-29T14:03:01Z", "2025-09-29T14:03:00Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7BpFKN", 16763, "deploy flashblocks-websocket-proxy", "This will point to all the conductors and stream flashblocks from the leader at any point in time.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:54:51Z", "2025-09-11T05:50:53Z", "2025-09-11T05:50:53Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7BpEMl", 16762, "alerting setup of flashblocks", "Have an alerting setup in mainnet to ensure paging the on-call whenever respective issues occur with flashblocks production", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:53:48Z", "2025-09-23T13:55:44Z", "2025-09-23T13:55:43Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7BpC1f", 16761, "enable flashblocks on sunnyside sequencers.", "After the success of enablement of flashblocks on all the sequencers of mainnet, enable them on sunnyside, with basic healthiness criteria.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:52:22Z", "2025-09-23T13:50:16Z", "2025-09-23T13:50:15Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7BpBWH", 16760, "enable flashblocks on the remaining sequencers on OP Labs infra", "Based on the success of flashblocks-enablement on the first sequencer, enable flashblocks on all the other sequencers on op-mainnet.\n\nExpectations:\nOver a 4-day window\n- Block progression SLA should be 99.95%\n- Flashblocks availability should be 95%", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-21T13:50:32Z", "2025-09-11T06:48:36Z", "2025-09-11T06:48:36Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7Bapee", 16751, "Brief title1752906087918", "### Description\n\n_No response_", "CLOSED", 0, "phamhongthai170284-rgb", "2025-07-19T06:26:25Z", "2025-07-21T15:57:06Z", "2025-07-21T15:57:06Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7Apafi", 16699, "op-sync-tester: Session handling and middleware", "Sync tester may have a session to hold stateful information. User can initialize the session with below endpoint:\n\n`/chain/{chain_id}/synctest/{uuid}?head=100&safe=95&finalized=90`\n\nThe call initializes the session with session id using provided {uuid}.\n\nAfter this initialization user may call \n`/chain/{chain_id}/synctest/{uuid}`\nwith relevant JSON RPC to perform the sync test.\n\nHTTP middleware must be added to parse the query parameter, and the uuid path.", "CLOSED", 0, "pcw109550", "2025-07-15T12:32:55Z", "2025-07-23T09:25:15Z", "2025-07-23T09:25:15Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7Ad2VN", 16691, "op-batcher: prevent auto-da switching to calldata if throttling is activated", "Throttling activates when there is a backlog of pending data to write to L1. It's purpose is to limit / slow the amount of additional pending data being generated, so that the backlog can be burned down. While doing this, we should also ensure that we are not limiting the max throughput of the batcher by switching to calldata (from blobs), even if the market conditions are such that this would save money.", "CLOSED", 0, "geoknee", "2025-07-14T14:52:09Z", "2025-07-25T10:33:34Z", "2025-07-25T10:33:34Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM7Ac1EG", 16686, "deploy a flashblocks-websocket-proxy in op-sepolia", "Deploy a flashblocks-websocket-proxy pointing to all the flashblocks-enabled sequencers in op-sepolia.\n\nA/C:\n- If all the active sequencers in op-sepolia are enabled with flashblocks, the flashblocks-websocket-proxy exposes flashblocks on its static endpoint 24x7.\n- If a subset of active sequencer in op-sepolia are enabled with flashblocks, the flashblocks-websocket-proxy serves flashblocks whenever one of them is a leader and serves an empty yet healthy websocket when a non-flashblocks sequencer is a leader.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-14T13:27:50Z", "2025-07-23T19:41:53Z", "2025-07-23T19:41:53Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6_td38", 16651, "Runbook v3 final review", "We need to do a final review of the v3 fault proof incident runbook and remove the \"draft\" label when we're satisfied.\n\n- [x] Review v3\n- [x] Edit v1 and v2 runbooks to indicate clearly which upgrade versions they cover, and to link to the others\n- [x] Update references in other runbooks", "CLOSED", 0, "pauldowman", "2025-07-09T15:39:20Z", "2025-07-22T14:49:12Z", "2025-07-22T14:47:46Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM69TbCR", 16572, "op-batcher: increase observability of memory consumption", "We can track memory consumption in our production deployments, but we would like to have additional observability:\n\n* `pprof` as a first class citizen in kurtosis-devnet\n* CI tests which \n  - measure memory consumption when the batcher is under load\n  - catch any regressions when that consumption goes above some generous threshold\n\nOnly when this is in place can we proceed with #16537 with confidence. ", "CLOSED", 0, "geoknee", "2025-06-25T14:57:47Z", "2025-07-21T15:07:04Z", "2025-07-21T15:07:04Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6839Vx", 16544, "flashblocks: reth-enabled flashblocks node", "flashblocks-rpc (node-reth) to be configured serving flashblocks RPC via base's flashblocks node-reth ", "CLOSED", 0, "yashvardhan-kukreja", "2025-06-23T16:33:44Z", "2025-07-21T13:33:15Z", "2025-07-21T13:33:15Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM68zhET", 16537, "spike(op-batcher): optimize memory consumption", "Especially during periods of l1 congestion, we are seeing memory usage in the batcher spike. There is likely a lot of duplication / copying of data in the current implementation. We should aim to reduce this. \n", "CLOSED", 0, "geoknee", "2025-06-23T10:19:51Z", "2025-07-21T12:54:18Z", "2025-07-21T12:54:18Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM68LzRI", 16496, "enable flashblocks non-publicly on op-sepolia", "Once we gain confidence from flashblocks-enablement of flashblocks in eris-0, we should progress towards deploying flashblocks in op-sepolia.\n\nThis can mean deploying flashblocks with dry_run mode on op-sepolia and testing for all the flashblocks related release readiness markers.\n\nWe also wouldn't want to expose a flashblocks-rpc as a part of this ticket considering the non-public exposure of flashblocks.", "CLOSED", 0, "yashvardhan-kukreja", "2025-06-18T14:56:07Z", "2025-07-21T13:30:28Z", "2025-07-21T13:30:28Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM670Scm", 16452, "[Tracking] [Sync Tester] op-sync-tester: service for mock EL sync testing", "We need to do more long-range sync testing of the L2 consensus-layer.\n\nBut to do so, we are currently stuck creating a full EL deployment: from empty geth DB, or temporary new chain.\nThe EL chain DB of a real chain is too large to replicate easily for quick tests. And too difficult to roll back efficiently.\n\nInstead, we can mock the execution-layer: by serving the engine API, we can make the CL sync. And we can still serve real blocks; the mock engine API is just a mask over the real chain, to make it appear out of sync.\n\n### spec\n\nThis is a new top-level standalone service, with the regular metrics/CLI/RPC setup. See op-faucet for a minimal example.\n\nIt serves an RPC to pretend to be an execution engine (we can use JSON-RPC auth, so we can hide the RPC behind a JWT secret, for CI).\n\nRPC methods to serve:\n- `eth_getBlockReceipts`: serve if `block num < test_head`\n- `eth_getBlockByHash`: serve if `block num < test_head`\n- `eth_getBlockByNumber`: serve if `block num < test_head`\n- `engine_newPayload{V1,V2,V3,V4}`: check that the payload matches the real one. Error if it does not, and abort the sync test.\n- `engine_getPayload{V1,V2,V3,V4}`: return the block that matches the expected block from the block-building job arguments.\n- `engine_forkchoiceUpdated{V1,V2,V3}`: check if the forkchoice hashes are canonical. Update the `test_head`, `test_safe`, `test_finalized` in-memory forkchoice values. And check if the block-building attributes (if any) match the inputs to the actual block.\n- We should NOT have to support `eth_getStorageAt`, but might if we expand with pre-isthmus fault-proof scope.\n- No other RPC methods\n\nAnd for block-label queries, mock `latest = test_head`, and `safe = test_safe`, `finalized = test_finalized`.\n\nDuring the sync test, whenever some expectation is broken, abort the test.\n\nAlso add the option for an artificial processing delay per RPC method, so we can test what a slow execution engine feels like.\n\nAs follow-up in a later iteration of the op-sync-tester we can also mock random errors, like saying the node is syncing, or some temporary error.\n\n### Test Sessions\n\nIf we want, we can use the dynamic HTTP routing to make `/synctest?head=100&safe=95&finalized=90` map to a sync-test RPC session.\nThis way the service never has to restart; different testers can use it in parallel, all with their own test-view of the chain. \n\nOptionally we can support more query params too, e.g. to setup a sync test for the last N blocks, or to select a random range of blocks.\n\nOptionally we can also add an upper-bound, so that the engine API stops responding after reaching a certain block number. This way the test can end more naturally without consuming the full chain.\n\nThe RPC utils in op-service already support access to the HTTP router that serves the websocket.\n\nWe should add a middle-ware option that parses the HTTP query parameters, and attaches them to the `ctx` that is then passed down to the RPC handlers. And attach some mutable session storage, for the sync progress and latest known block-building random payloadID and attributes.\n\nThe RPC handlers can then determine the session from the `ctx` (if we add session middleware, or just use the requester address), as well as the session config / mutable data.\nAnd then just update that session; no global singleton state.\n\n### Usage\n\n- deploy in kurtosis (low priority)\n- deploy in devstack sysgo (for testing the test tool)\n- deploy stand-alone for CI or local dev: configure in k8s once, on a public endpoint with some auth (maybe even multiple auth tokens), and allow anyone with the auth to sync-test against it.\n\nBoth the Rust stack and the Go L2 stack should be able to sync-test against this.\n\n", "OPEN", 0, "protolambda", "2025-06-16T19:21:34Z", "2025-07-25T23:03:37Z", null, "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM66QS0p", 16314, "op-supervisor,op-node: Improve reset unsafe target", "When the supervisor performs a reset target search, it searches for the latest common local safe block between its database and the managed op-node. It then sends a reset request to the node, also setting unsafe targets.\n\nThe cross-unsafe reset target is set to the latest cross-unsafe entry in the supervisor's database.\n\nHowever, the local safe is set to the safe target, potentially being much further behind even the cross-unsafe target. This is done because the op-node currently then performs another validity search between its current unsafe and the provided target.\n\nThis is confusing as the targets are taken at face value for cross-unsafe and both (local|cross)-safe, but not for unsafe. It would be more consistent if the supervisor was be responsible for providing the right reset targets for all labels. The validity search also is currently a slow traversal loop (improved to go backwards with https://github.com/ethereum-optimism/optimism/pull/16312) which will be improved to a binary search with https://github.com/ethereum-optimism/optimism/pull/16276.\n\nIdeally we change this to let the supervisor provide the right local unsafe target. We probably need to handle pre- and post-Interop differently because the supervisor doesn't have the logs DB pre-Interop, which is populated with unsafe blocks.\n\nRelated to #16315", "CLOSED", 0, "sebastianst", "2025-06-06T13:44:41Z", "2025-07-25T14:44:31Z", "2025-07-25T14:44:31Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM630f1m", 16084, "interop: dependency set configuration tracker", "To unblock rehearsal:\n- merge the PR of Adrian to remove the useInterop flag\n  - https://github.com/ethereum-optimism/optimism/pull/16072\n- merge the PR of Seb that introduces the rollup-config subset into supervisor\n  - https://github.com/ethereum-optimism/optimism/pull/16038\n  - blocked by Kurtosis updates\n    - see https://github.com/ethpandaops/optimism-package/pull/283 (may require backport)\n- create a PR to remove the timestamps from original depset config, so it's just a set of chains\n  - https://github.com/ethereum-optimism/optimism/issues/16083\n  - Will require follow-up kurtosis updates\n- update op-program to load new dep-set fully.\n  - ~~TODO: needs issue.~~ Incorporated into the above.\n\nFull scope remainder:\n- ~~make the superchain registry code load the simplified depset. Still copied per chain, but no timestamp info anymore, just a hint \"I'm part of this cluster\", so we don't have to scan the full registry.~~ (tracked below by platforms team)\n  - https://github.com/ethereum-optimism/optimism/issues/15847\n- op-supervisor depset RPC: update the specs PR + monorepo PR for the depset RPC. We want to be able to inspect this data of the supervisor\n  - issue: https://github.com/ethereum-optimism/optimism/issues/15048\n  - PR: https://github.com/ethereum-optimism/optimism/pull/15557\n  - PR v2: https://github.com/ethereum-optimism/optimism/pull/16156\n  - specs PR: https://github.com/ethereum-optimism/specs/pull/684\n- update op-node PR so we can test syncing of the depset chains before interop is scheduled\n  - issue: https://github.com/ethereum-optimism/optimism/issues/15756\n  - PR: https://github.com/ethereum-optimism/optimism/pull/16071\n- `op-node` depset RPC\n  - PR: https://github.com/ethereum-optimism/optimism/pull/16117\n  - specs issue: https://github.com/ethereum-optimism/specs/issues/713\n", "CLOSED", 0, "protolambda", "2025-05-22T16:50:46Z", "2025-07-21T22:41:22Z", "2025-07-21T22:41:22Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM63Z052", 16026, "op-supervisor: cleanup resetTracker todos", "The resetTracker has a few artifacts from previous versions, and is poorly structured and needs unit testing.\nAlso make sure to review if we need rewind-locking in the function that determines the new continuation forkchoice state (this function should be decoupled from the resetTracker).\n", "CLOSED", 0, "protolambda", "2025-05-20T13:17:08Z", "2025-07-21T22:41:50Z", "2025-07-21T22:41:50Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM62ajwf", 15882, "kt-devnet: 1-1 safe multisig as key roles", "What's needed:\n- provisioning of 1-1 (configurable to M-N ?) multisig wallets after L1 is up, and before op-deployer runs\n- point op-deployer to the right addresses\n- expose keys in devnet output", "CLOSED", 0, "sigma", "2025-05-13T15:11:56Z", "2025-07-21T22:33:02Z", "2025-07-21T22:33:02Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM62SUVr", 15861, "interop: op-node: driver constructor function cleanup", "Polish how we create and register driver components. Current NewDriver constructor is bloated.\n\n", "CLOSED", 0, "protolambda", "2025-05-12T22:00:03Z", "2025-07-21T22:28:20Z", "2025-07-21T22:28:20Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM62SUAM", 15860, "interop: op-node: unify and simplify the driver loops", "- Remove legacy timing loop, ~~but keep some version of SyncDeriver~~. We'll instead remove the legacy mode altogether.\n- Create new timing loop, that can hold off on tasks that may be triggered via managed-mode instead\n- ~~Unify managed-mode / standard-mode into the above~~. StandardMode is no longer a thing.\n", "CLOSED", 0, "protolambda", "2025-05-12T21:59:04Z", "2025-07-21T22:26:15Z", "2025-07-21T22:26:15Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM61uccU", 15774, "Interop: activation block reorg support", "The supervisor should not hold onto an unsafe anchor block as if it's finalized.\n\nWe have two design options:\n- ~~Wait for anchor block to be finalized by op-node, before indexing anything.~~\n- \u2705 (chosen solution) Accept anchor-block, but don't promote it to any safety level it is not. Be ready to drop the anchor block when it is invalidated.\n\nNote:\n- local unsafe (contract event logs db) anchor should be initialized without initializing local-safe, if going for the second option. Don't promote unsafe to local-safe accidentally.\n- local safe activation block is always cross-safe\n- finalized block is not persisted; finality is only determined based on whether or not the cross-safe block is derived from a L1 block that fits in the finalized L1 chain\n\nNeeded testing:\n- Reorg out the L2 anchor block\n  - Can be done using the reorg devstack testing from @nonsense \n  - And/or can be done with action-test that rewinds the L2 chain blocks", "CLOSED", 0, "protolambda", "2025-05-08T12:26:18Z", "2025-07-21T22:41:27Z", "2025-07-21T22:41:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM61nnvL", 15763, "Interop: upgrade countdown polish", "- Count down the upgrade in op-node log, and add fork countdown metric (per fork name)\n- Count down the upgrade in op-supervisor log, and add fork countdown metric (per fork name, per chain)\n- Print some fun ascii art upon upgrade, in same spirit of L1 upgrades\n", "CLOSED", 0, "protolambda", "2025-05-07T20:10:06Z", "2025-07-21T22:27:20Z", "2025-07-21T22:27:20Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM61nmYq", 15762, "Interop: metrics for reorgs", "Add to the op-node:\n- metric for backwards block-number changes (likely reorgs)\n\nAdd to the op-supervisor:\n- metric for local-unsafe logs DB rewinds (number of unsafe blocks we rewind), per chain\n- metric for local-safe fromda DB rewinds (number of local-safe blocks we rewind), per chain\n- metric for cross-safe fromda DB rewinds (number of cross-safe blocks we rewind), per chain\n- metric for local-safe invalidation\n- metric for failed access-list RPC checks (assumed user reorg, or just malicious user)\n\n\n", "CLOSED", 0, "protolambda", "2025-05-07T20:08:04Z", "2025-07-21T22:27:09Z", "2025-07-21T22:27:09Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM61nb7D", 15758, "Interop: op-supervisor interop_ready RPC", "The op-supervisor should have an RPC to check the readiness for interop.\n\nThis should list all connected nodes per chain, and if they're healthy or not.\n\n", "CLOSED", 0, "protolambda", "2025-05-07T19:52:21Z", "2025-07-21T22:26:57Z", "2025-07-21T22:26:56Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM61naQA", 15757, "Interop: op-supervisor readiness warnings", "The supervisor should track the number of connected sync nodes per chain, with a metric.\nWhen a particular chain has no connected nodes, the supervisor should emit regular warning logs.\n\nWhen a supervisor is interop-ready, it should set a global interop-readiness metric to 1, and 0 if not ready.\n\nIf a replica is not in the known dependency set, then the replica should be disconnected, and an error should be logged.\n\n", "CLOSED", 0, "protolambda", "2025-05-07T19:49:46Z", "2025-07-21T22:26:51Z", "2025-07-21T22:26:50Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM61nUMG", 15755, "Interop: RC Beta test-run client follow-ups [tracker]", "Also see:\n- https://github.com/ethereum-optimism/op-geth/pull/585\n- https://github.com/ethereum-optimism/optimism/issues/15760  (moved to testnet milestone)", "CLOSED", 0, "protolambda", "2025-05-07T19:37:41Z", "2025-07-21T22:40:51Z", "2025-07-21T22:40:51Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM61Pz31", 15702, "Investigate, Recover RC Alpha", "RC Alphanets 0 and 1 are down and need to be recovered.\n\nTheir current status is:\n- Sequencing Window Lapsed, and now empty blocks are implicitly derived\n- Block production on Sequencers is disabled\n- Conductor is paused on RC-Alpha-1\n\n\n## Outputs\nWe should do this for the following reasons:\n- Bug discovery: issues with recovery should yield tickets we can resolve\n- Runbook content: the exact process for operating on Supervisors can be recorded into runbook specifics\n- Recovery of network: It would be *nice to have* the RC Alphanets recovered\n\n\nI am working on this task and recording my progress outside of this ticket, and will report back here when there are task-relevant updates. i will also use my notes to fill in the incident, post mortem, and runbooks as needed.", "CLOSED", 0, "axelKingsley", "2025-05-05T21:02:32Z", "2025-07-21T22:41:27Z", "2025-07-21T22:41:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6zuH3T", 15533, "OPCM H1 Roadmap Tracker", "A catch all issue for now, will be polished overtime\n\n- [x] #15534\n- [ ] #15535\n- [ ] #15536\n- [ ] #15796 \n- [x] #16188", "OPEN", 0, "maurelian", "2025-04-23T20:45:38Z", "2025-07-23T20:36:19Z", null, "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6zVS4V", 15479, "devnet-sdk: devstack: sysgo: op-node p2p with `Prepared` P2P stack", "sysgo L2CL opnode uses clictx to initialize p2p client which is embedded in op-node. We may swap the p2p stack using the `Prepared` P2P stack which is done at current e2e tests. \n\nThis may enable\n> wrapping a mock p2p network with in-process communication pipes instead of network sockets.\n\nThis is a follow up issue which sparked from https://github.com/ethereum-optimism/optimism/pull/15462#discussion_r2050843879", "CLOSED", 0, "pcw109550", "2025-04-21T15:36:55Z", "2025-07-21T22:14:30Z", "2025-07-21T22:14:30Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6ypj2K", 15418, "Supervisor: Runbooks", "To operate interop in production we need runbooks so operators can:\n\n- Take the Supervisor down and up\n- Pause Interop (ie enable a blanket-denial of interop messages)\n- Fix the supervisor when it is down\n  - Replacing managed nodes\n  - Cleaning a corrupted database", "CLOSED", 0, "axelKingsley", "2025-04-15T18:18:26Z", "2025-07-21T22:14:30Z", "2025-07-21T22:14:30Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6ypPuR", 15417, "Sequencer: Watch for Invalid Unsafe Interop", "When building blocks, it is not 100% guaranteed that invalid interop messages can be aboided, since they rely on content from other chains.\n\nWhen an invalid interop message is encountered, there are a few manifestations possible:\n- Cross Unsafe will always stall, because cross safety can't promote. This could also happen if the Supervisor is slow to sync the other chain.\n- An `ErrConflict` might be noticable from the Supervisor, indicating this interop message is *currently* invalid\n  - If the conflict is against unsafe data, it's not clear if a reorg might fix the conflict on the remote chain\n  - If the conflict is against safe data, it is clear that the message is invalid\n\n\nWhen an invalid message is detected *or* a long term cross-unsafe stall occurs, the supervisor should react by electively rewinding the chain to reorg out that invalid block. This will keep invalid messages from making it into the L1 batches, and will minimize the size of reorgs.\n\n\nFURTHERMORE, the Supervisor, upon discovering an invalid message in its unsafe blocks, should *disable* further inclusion of interop messages. Transactions which declare Access List against the CrossL2Inbox can be dropped from the pool until an operator re-enables the feature. This ensures that there will not be a recurrence of the fault that caused the reorg without an operator present.", "CLOSED", 0, "axelKingsley", "2025-04-15T17:40:05Z", "2025-07-21T22:14:30Z", "2025-07-21T22:14:30Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6ypLpZ", 15415, "op-batcher: Only Submit Cross-Unsafe", "Today, the batcher takes unsafe data and posts it to L1 to promote it into safe data.\n\nHowever, with interop active, not all unsafe blocks are equally suitable for posting.\n\nIf the `cross unsafe` head of the node isn't as far as the `local unsafe` head, the Batcher should only pick up and enqueue the `cross unsafe` data. This is because the chain is currently waiting on additional data before it can become cross safe, and for the batcher to post this data early exposes the risk that this data *will never* become cross-unsafe, which will create a block replacement as a downstream effect.\n\nThe batcher should accept an admin API which sets which head is being tracked, or a runtime flag. Avoiding posting data which isn't cross-unsafe will lead to fewer replacements, but may also lead to safe head stalls, so controlling this behavior will be valuable.\n\n## When should we do this / Blockers\n\nRestricting the Batch contents to `cross-unsafe` means that invalid blocks won't ever be posted to the L1, thus eliminating the chances of a block Invalidation/Replacement.\n\nHowever, if implemented without further handling, this could cause stalls: If there is an invalid message in the unsafe chain, the batcher will eventually run out of data to post to the L1, creating a safe-head stall. Simultaneously, the Sequencer doesn't have any way to fix the invalid message. So the unsafe chain is *invalid*, and the safe chain is *stalled*\n\nWe can fix this by doing one of the following:\n- Allow Sequencers to issue unsafe chain reorgs. Today, nodes expect the Sequencer \"not to equivocate\", and so they only ever accept the first block they see from it. This means the Sequencer is bound to that output, and can't actually affect the network. The spec and implementation should be changed such that the Sequencer is trusted to reorg the network (ie via last-block-wins, or a revision based Fork Choice Rule). Once done, the Sequencer is empowered to course correct when invalid messages are included by issuing an unsafe reorg to remove that block. Once the invalid message is eliminated, cross-unsafe can proceed and there is new data to be published to L1.\n  - Obviously, that \"course correction\" feature should also be done before we implement this change\n- Alternatively, we can further enshrine that the Batcher should never be hooked to anything but the Sequencer. This is already implicitly the case because of sequencing throttling, but now this decision becomes even more critical - a batcher not hooked to a sequencer may create a safe-head stall when the unsafe chain is invalid.\n  - This path *also* requires the sequencer be able to course correct around invalid blocks, because it needs to advance its cross-unsafe head in order for the batcher to proceed.\n\nOption #2 is much easier, but has worse UX for customers, since only the Sequencer and Batcher would know about the reorg until the L1 data is published.", "CLOSED", 0, "axelKingsley", "2025-04-15T17:32:09Z", "2025-07-21T22:14:29Z", "2025-07-21T22:14:29Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6yeNsV", 15406, "op-e2e: Configurable DA type for interop SuperSystem", "The interop `SuperSystem` spins up a batcher that posts batches via calldata.\nHowever, for [interop FP testing](https://github.com/ethereum-optimism/optimism/issues/15311), it is desirable to have a batcher that posts uses blobs rather than calldata. So this issue calls for the ability for the `SuperSystem` user to configure which data availability is used to spin up the local devnet. Ideally, this configuration can be done during [interopgen](https://github.com/ethereum-optimism/optimism/blob/11ace4cdfdef7df9b03e9da530563ecf7336e21f/op-chain-ops/interopgen/recipe.go#L15).", "CLOSED", 0, "Inphi", "2025-04-14T21:24:38Z", "2025-07-23T15:51:47Z", "2025-07-23T15:51:47Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6xLGlt", 15245, "go: use `eth.ChainID` everywhere", "- Change `devkeys` to no longer use `*big.Int`  (non-uint64 size chain IDs should use nested HD derivation path segments to keep chains unique)\n- Change op-deployer to no longer use `common.Hash` and `uint64`. Make sure deployer docs are updated. Maybe keep a backward-compatibility json-unmarshaler for the `0x` prefixed version.\n- Change op-deployer intent-builder to use it consistently\n- Change legacy op-chain-ops to no longer use `uint64`\n- Change op-e2e to no longer use `uint64`\n- Change rollup-config to use it (make sure the json encoding change) is non-breaking)\n- Find any remaining alternative chain ID typing\n\n", "CLOSED", 0, "protolambda", "2025-04-04T14:01:47Z", "2025-07-21T22:14:29Z", "2025-07-21T22:14:29Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6w2vrh", 15178, "[Tracking] Interop Monitoring", "We need a Monitoring Service which can evaluate for bad executing messages and alert operators.\n\nTICKETS:\n\nINTEROP MONITORING SERVICE:\n- https://github.com/ethereum-optimism/optimism/issues/16224\n- https://github.com/ethereum-optimism/optimism/issues/16225\n- https://github.com/ethereum-optimism/optimism/issues/16227\n- https://github.com/ethereum-optimism/optimism/issues/16228\n- https://github.com/ethereum-optimism/optimism/issues/16240\n\nAnd an overlap ticket with the AUTO STOP work:\nhttps://github.com/ethereum-optimism/optimism/issues/16232\n\n", "CLOSED", 0, "tynes", "2025-04-02T17:55:04Z", "2025-07-21T22:14:28Z", "2025-07-21T22:14:28Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6wsKXo", 15157, "Enable redundant op-supervisor checks as part of superchain tx mempool ingress validation", "", "CLOSED", 0, "teddyknox", "2025-04-01T19:17:50Z", "2025-07-21T22:14:28Z", "2025-07-21T22:14:28Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6wiTvt", 15139, "op-service: more reusable logger util to change log-level of sub-logger", "Like the set-log-level API on services, we need to reach into a logger, grab the log-handler, and adjust the level.\n\nWhat is new is that we want this to apply to a fork of a logger, and change the log-level to be different for the two underlying log-handlers.\n\nThis needs to be compatible with the test-logger too.\n\nThe ideal is to have logging in the new devnet-SDK devstack figured out such that we can tune the log-level per service, as well as the global (geth doesn't use local loggers...) log-level.\n\nE.g. a test that's about a batcher should be able to instantiate the system using standard things, but then tweak the batcher logger to a lower filter level.\n\n", "CLOSED", 0, "protolambda", "2025-03-31T23:23:04Z", "2025-07-25T11:38:06Z", "2025-07-25T11:38:06Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6wdLua", 15123, "op-e2e: convert minting-to-delegated-account test to action test", "The test from https://github.com/ethereum-optimism/optimism/pull/15090 should be converted into an `actions/proof` test so it covers the FPPs.", "CLOSED", 0, "sebastianst", "2025-03-31T13:04:00Z", "2025-07-21T22:14:28Z", "2025-07-21T22:14:28Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6wRaa8", 15115, "Add semgrep rule for private/internal functions", "We need to add a new semgrep rule:\n\n- All private/internal functions should start with an underscore\n- All public functions should NOT start with an underscore\n\nMany contracts will fail this check, please exclude any contracts that fail the check at first, then we'll separately take on the work of slowly transitioning these contracts to conform to the rule.", "OPEN", 0, "smartcontracts", "2025-03-28T22:02:22Z", "2025-07-23T20:43:59Z", null, "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6v_oYl", 15069, "op-e2e: Refactor all `Act...` functions to normal calls", "Some random `Act...` functions of our op-e2e actors return functions themselves that have to be called. We don't leverage this functionality in any test, but instead this footgun sometimes makes us forget to call the actual function.\n\nSo we should just refactor them all to just directly do the call.", "CLOSED", 0, "sebastianst", "2025-03-27T11:55:53Z", "2025-07-21T22:14:27Z", "2025-07-21T22:14:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6v2h5K", 15048, "Supervisor RPC `supervisor_dependencySet`", "This ticket represents the work of adding a new RPC endpoint to `op-supervisor`. This endpoint should be called `supervisor_dependencySet` and take a block tag. The number in the block tag should represent a timestamp and we want to be able to accept the \"latest\" string as well, which is why the block tag should be used. Right now there is no concept of the dependency set changing over time, but it will in the future, so we want to make the RPC forwards compatible by having it accept a block tag", "CLOSED", 0, "tynes", "2025-03-26T17:15:53Z", "2025-07-21T22:16:14Z", "2025-07-21T22:16:14Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6vtWEb", 15037, "[Tracking] Interop DoS Protection", "This ticket represents the work to have a secure denial of service resistant interop topology. https://github.com/ethereum-optimism/design-docs/pull/218 proposes a topology alongside action items that will give us confidence in an interop cluster being safe to deploy\n\n- Add a check from within `proxyd` to filter out invalid messages on ingress, see #14903 \n- Create a caching with timeout client for supervisor to be used in the mempool + builder. This alleviates the issue brought up by @axelKingsley in https://discord.com/channels/1244729134312198194/1251353953107578970/1354180358282936391\n- Put an interval check in place in the mempool to invalidate transactions. This helps to reduce risk when not running the block builder checks in production\n- Adding a backpressure feature like described in https://github.com/ethereum-optimism/op-geth/issues/496", "CLOSED", 0, "tynes", "2025-03-25T22:15:13Z", "2025-07-21T22:14:27Z", "2025-07-21T22:14:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6vo8sn", 15024, "Supervisor: Better Candidate Testing", "The code which determines the next cross-safe Candidate, `fromda.Candidate` is a new refactoring of older code which lived in the `db.query` area previously.\n\nCurrent E2E tests and CI checks are all passing, but we have punted on adding explicit testing for this function at the moment.\n\nThis task is to track the addition of better testing for this function.", "CLOSED", 0, "axelKingsley", "2025-03-25T14:31:31Z", "2025-07-21T22:14:27Z", "2025-07-21T22:14:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6vAPmX", 14969, "[Tracker] rbuilder + rollup boost", "We want to have `rbuilder` and `rollup-boost` running on the alphanet as early as possible. This ticket tracks all of the tickets required for this\n\n- [x] https://github.com/ethpandaops/optimism-package/pull/169\n- [ ] https://github.com/flashbots/op-rbuilder/issues/25\n- [x] https://github.com/flashbots/rbuilder/pull/462\n- [x] https://github.com/paradigmxyz/reth/issues/14552\n- [x] https://github.com/paradigmxyz/reth/issues/14557 (blocked by txpool and not that critical to op-rbuilder directly)\n- [ ] https://github.com/flashbots/rollup-boost/pull/121", "CLOSED", 0, "tynes", "2025-03-20T16:39:33Z", "2025-07-21T22:14:26Z", "2025-07-21T22:14:26Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6ucH3I", 14917, "op-reth: Operator Fee Correctness", "There is an issue with `kona` in testing operator fee. @refcell opened https://github.com/bluealloy/revm/pull/2237 which may not completely fix the issue. The issue can be reproduced with the following command from the `kona` repo:\n\n```bash\njust action-tests Test_ProgramAction_OperatorFeeConstistency/HonestClaim-DepositTx-Isthmus\n```", "CLOSED", 0, "tynes", "2025-03-17T23:15:45Z", "2025-07-21T22:16:14Z", "2025-07-21T22:16:14Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6t818D", 14853, "devnet-sdk: Introduce simple DI system for customizing setup", "It would be nice if, when defining a devnet-sdk test, we could simultaneously describe:\n\n1. Constraints on the test's intended subject (i.e. this test expects to run against an Isthmus devnet with available wallets, if it is run against a Holocene devnet then it should skip)\n2. Clients for interacting with the intended subject\n\nAt the moment, #1 is handled by devnet-sdk validators, and #2 is handled by standardized taxonomy of devnet-sdk system objects.\n\nThis works but comes with a few drawbacks:\n\n1. When registering a validator (constraint) on a test subject, the constraint must be specified with respect to an arbitrary chain index, which must then be referenced later to unpack the values from the devnet-sdk system object.\n2. Validators and required clients must be handled independently, leading to redundancy in definitions.\n3. It's difficult to see what aspects of the system object the test interacts with at a glance. Instead you must read the entire test scenario.\n\nAs an alternative, we might consider a simple DI system that allows us to declaratively define test specs which kill two birds with one stone.\n\n```go\n\ntestSpec := TestSpect{\n  SequencerA: MustOpNode(t, WithChain(chainA), WithActiveSequencer(true)),\n  SequencerB: MustOpNode(t, WithChain(chainB), WithActiveSequencer(true)),\n  VerifierB: MustOpNode(t, WithChain(chainB), WithActiveSequencer(false)),\n}\n```\n\nThis is not a burning need at the moment, but I am documenting discussions thus far in case this becomes a pain point.", "CLOSED", 0, "teddyknox", "2025-03-13T21:17:39Z", "2025-07-21T22:14:26Z", "2025-07-21T22:14:26Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6tUoWq", 14756, "Modular Fork Configuration", "# Description\n\nWhenever we add a new fork to the OP Stack, there are many places all over the monorepo where the new fork has to be added or adaptions have to be made (e.g. recent example: https://github.com/ethereum-optimism/optimism/pull/13722). And the list of places is ever changing and growing. This is error prone and hard to maintain.\n\nHardforks can be dealt with in a more modular way, so that a new fork has to (ideally) be added to a _single place_ and everything else just works automatically. Any remaining necessary adaptions are captured by automated failing tests.\n\nIn an exemplary way, modular fork handling was partially implemented for the `op-chain-ops/genesis. UpgradeScheduleDeployConfig` struct in https://github.com/ethereum-optimism/optimism/pull/12506. \n\nBefore a proper design doc is written and approved, this issue is used to collect all those places that would benefit from a more modular way of handling forks.\n\n## Dump of non-modular places and todos\n\n- [ ] move fork names and helpers into own package\n- [ ] Finish `Config.IsActivationBlock`.\n- [ ] `actions/helpers/l2_sequencer.go` `ActBuildL2To(ForkName)`\n- [x] `op-e2e/actions/helpers/env.go` `SetupEnv` fork selection\n       - [ ] Lazy creation of fields as needed\n- [ ] consolidate fork handling in `op-e2e/actions/proofs/helpers/matrix.go` with the new generic one in `rollup`.\n- [ ] https://github.com/ethereum-optimism/optimism/pull/12497 is a great resource for many manual places where forks have to be added\n- [ ] `op-e2e/e2eutils/setup.go`\n- [ ] `op-e2e/actions/upgrades/helpers/config.go` `ApplyDeltaTimeOffset`\n- [ ] `op-e2e/actions/helpers/user_test.go` `testCrossLayerUser`\n- [ ] https://github.com/ethereum-optimism/optimism/pull/12890\n- [ ] same problem reemerges in the kurtosis package https://github.com/ethpandaops/optimism-package/pull/87/files\n- [ ] https://github.com/ethereum-optimism/optimism/pull/13364/files#r1882855106 and other allocs init places\n- [ ] `op-node/rollup/sequencing/sequencer.go` `startBuildingBlock()`", "CLOSED", 0, "sebastianst", "2025-03-10T16:47:06Z", "2025-07-21T22:14:26Z", "2025-07-21T22:14:26Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6tBn-r", 14711, "op-acceptor / devnet-sdk: Introduce room to alter test scheduling", "Introduce room to alter the scheduling of tests based on the availability of a devnet config.\n\nRight now, opportunistically reuse devnet across tests (applies to op-e2e stack).\n\nNote that the Go test runner does not offer this, this is something where:\n- the op-acceptor / test-runner will need to express what systems are \"pending\"\n- the devnet SDK will need to express if a \"pending\" system is preferred and then exit\n- the test runner can then schedule the test against the pending system.\n\nScheduling is difficult and may only make an impact once there are many different systems to choose from.\nThis feature is low-priority until this changes.\n\nRight now, opportunistically reuse devnet across tests.", "CLOSED", 0, "protolambda", "2025-03-07T12:29:20Z", "2025-07-21T22:14:25Z", "2025-07-21T22:14:25Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6suOdM", 14649, "Upgrade gas & upgrade block transaction omission", "During review of https://github.com/ethereum-optimism/optimism/pull/12166, we discovered that some upgrade transactions have a higher gas limit than the typical total system tx gas available (1e6). So we propose to add two new consensus rules to avoid any issues with upgrade transactions going forward:\n\n* We forbid regular user txs in the Isthmus upgrade block (like we already do per policy for Ecotone and Fjord in the sequencer) as a consensus rule.\n* We sum up all upgrade txs gas limits, call this _upgrade gas_, and add the upgrade gas to the upgrade block's payload attributes block gas limit. This is easier than taking a max or so and ensures upgrade transaction can always execute.\n    * Note that we must in general assume that the user deposit txs already consume all the remaining gas limit, and the system tx gas of 1 mio doesn't cover upgrade txs, which is why we add it on top. The SystemConfig rule is `maxResourceLimit` (user deposit gas, usually 2e7) + `systemTxMaxGas` (L1 info deposit and upgrade txs (so far), usually 1e6) <= `gasLimit`\n    * This currently seems uncovered in Fjord btw, so a badly configured low gas limit could have caused an invalid Fjord upgrade block (GPO upgrade takes > 1 mio).", "CLOSED", 0, "sebastianst", "2025-03-05T16:24:29Z", "2025-07-21T22:14:25Z", "2025-07-21T22:14:25Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6sGjYe", 14583, "op-batcher: testing API", "A gap between action-tests and full system tests is the op-batcher:\nfor some tests, we need control when the batch is wrapped-up and submitted.\n\nAfter the op-test-sequencer work is done, a simple op-batcher API to influence the batch scheduler may be enough.\n\nCurrently the batcher determines when to submit batches based on the buffered data,\nthe time, and the sync state of the attached node.\n\nWith an RPC, we can ideally change what L2 blocks are in scope,\nand override when the buffer is considered full enough to submit to L1.\n\nE.g.:\n- `batcher_setL2Scope`: limit the view over the L2 chain\n- `batcher_submitNow`: force-submit the current data, even if the buffer is not full yet\n- `batcher_cursors`: check where the cursor (submitted L2 block, different stages maybe) is at.\n\nTests can then use these to make the batcher submit txs when we want that.\nThe test-sequencer can then receive the tx from a regular `eth_sendRawTransaction` RPC, and confirm it in the right L1 block.\n", "CLOSED", 0, "protolambda", "2025-02-28T15:07:51Z", "2025-07-21T22:14:25Z", "2025-07-21T22:14:25Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6sGg7G", 14581, "op-node: post-interop cleanup", "With the Interop features, and the op-supervisor DB tracking data, we have an opportunity to remove parts of the op-node.\n\nThere may be a way to accelerate this ahead of the interop upgrade, if we embed the op-supervisor functionality inside of op-node, or start using op-supervisor ahead of the interop fork (the chains config can prevent interop messages by timestamp).\n\n## Find-sync-start\n\nThe algorithm we rely on to determine the sync-starting-point is something we want to deprecate.\nIt's complicated, fragile to RPC errors, and slows down the node startup and resets.\nBut we can soon remove it!\n\nWith interop, the op-supervisor maintains a safety-index,\nto determine which L2 blocks were submitted when, and when the blocks become cross-safe.\nAs soon as interop becomes the default, nodes can rely on this safety-index\nfor a single almost-instantaneous API query to determine where to start syncing from.\n\nTo handle historical pre-interop sync, we will need to have a retroactive safety-index,\nor remove syncing from historical L1 data, to not need this functionality more.\n\nThis cuts the `/op-node/rollup/sync` package.\n\n## Finality\n\nLike find-sync-start, finality is maintained differently pre-interop than post-interop.\nPre-interop we needed to maintain an in-memory buffer of past seen derivation updates,\nand match that against incoming L1 finality signals, to determine what is safe to finalize.\n\nWith a persistent database of past derivation updates, the in-memory buffer is no longer necessary.\nThe op-supervisor can instantly report what L2 block is finalized, given any L1 finality scope.\n\nThis cuts the `/op-node/rollup/finality` package.\n\n## Safedb\n\nOp-node currently maintains a database with a mapping of when a L2 block has been derived from a L1 block.\nThis serves the fault-proofs API to query what L2 block can be contested for what game\n(a specific L1 chain scope the L2 block needs to be reproducible from).\n\nWith interop, since we are tracking cross-safety, we already maintain this data,\nin a more detailed, more safe and more systematic way.\nSo, once the op-supervisor becomes the default, we can remove the SafeDB tracking.\n\nThis cuts the `/op-node/node/safedb` package, and simplifies the `/op-node/node/node` package.", "CLOSED", 0, "protolambda", "2025-02-28T15:03:41Z", "2025-07-21T22:14:25Z", "2025-07-21T22:14:25Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6r0SRl", 14547, "kurtosis: remote Go debugging [idea]", "We could add something to the docker builds, to optionally insert the extra gcflags as following:\n```bash\ngo build -gcflags \"all=-N -l\" github.com/ethereum-optimism/optimism/some-service/cmd\n```\n\nAnd then attach to it with Delve (  https://github.com/go-delve/delve/tree/master/Documentation/usage ).\n\nAnd then redefine the docker CMD as (`dlv` will need to be inside the container):\n```bash\ndlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient  exec ./bin/some-service\n```\nAnd bind the port to the host port.\n\nSee intellij example docker file: https://github.com/apronichev/documentation-code-examples/blob/master/debuggingTutorial/Dockerfile\n\nThe Intellij Go remote debug docs also document what docker options to use: https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#step-1-create-a-dockerfile-configuration\nSpecifically, for debugging the process inside the docker container:\n```\n--security-opt=\"apparmor=unconfined\" --cap-add=SYS_PTRACE\n```\n\nThis then allows a remote Go debugging session, from the IDE, configured to connect via port 2345 (ideally we have unique ports per service, or some way to remap ports in kurtosis easily).\n\nThis can potentially make the Kurtosis Golang debug experience a lot more capable. What we were able to do with op-e2e is now possible in kurtosis, with independent breakpoints per service.\n", "CLOSED", 0, "protolambda", "2025-02-26T19:31:37Z", "2025-07-21T22:14:24Z", "2025-07-21T22:14:24Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6rCxKs", 14486, "op-supervisor: rate limit event emissions to op-node", "(this ticket needs triage)\n\nToday, when there is an update to op-supervisor's database, often there is the downstream effect of emitting an update to the Managed Node under it.\n\nHowever, we sometimes make situations where lots of database updates happen at once, like when we react to new data in another chain which *does not* affect the heads of the other chains.\n\nWe should impose a maximum update rate, or some other gate, such that repeated identical datapoints do not put additional pressure on the op-node.", "CLOSED", 0, "axelKingsley", "2025-02-21T17:31:42Z", "2025-07-21T22:14:24Z", "2025-07-21T22:14:24Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6q6Dl7", 14473, "Add devnet-sdk build logic to handle generation of relevant solidity bindings", "Should handle the generation of golang bindings for solidity contracts referenced in devnet-sdk, such as [this one](https://github.com/ethereum-optimism/optimism/pull/14353/files#r1956151039).", "CLOSED", 0, "teddyknox", "2025-02-20T21:48:54Z", "2025-07-21T22:16:14Z", "2025-07-21T22:16:14Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6qsI0J", 14429, "op-batcher: configuration profiles", "We want to add sane configuration profiles for the batcher to make it super easy to set a prod-ready configuration.\n\nInitially we should start with two profiles:\n* high-throughput chains: those that expect to usually fill up channels before hitting the max channel duration.\n* low-throughput chains: those that expect to usually hit a max channel duration, even if ~5h, before filling up a channel.\n\nRelated: https://github.com/ethereum-optimism/optimism/issues/13755", "CLOSED", 0, "sebastianst", "2025-02-19T15:30:54Z", "2025-07-21T22:16:13Z", "2025-07-21T22:16:13Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6qj6sP", 14419, "op-supervisor: Database Pruning", "Database Pruning is a desired feature of the supervisor.\n\n# Why\nBecause an unconstrained database will eventually become too large to hold for large superchains\n\n# How\nSimply slice off the front of the database, behind some threshold distance. \n\n\n### Notes\n- The Anchor Point initialization logic will fail if the first item in the database doesn't match the anchor point given by the node, so a supervisor which boots from a pruned database will fail to come up.", "CLOSED", 0, "axelKingsley", "2025-02-18T20:12:05Z", "2025-07-21T22:16:13Z", "2025-07-21T22:16:13Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6prHcN", 14329, "op-supervisor: multiple block processor sources", "Today, we have the Sync Controllers system, which accepts multiple connections to nodes on the same network, for the purposes of maintaining their sync.\n\nHowever, we also take those RPC endpoints and pass them to a block processor, which attempts to pull the latest receipts from the nodes as soon as possible.\n\nhttps://github.com/ethereum-optimism/optimism/blob/d00998505e175e0f2f14d762ee65e3396ca41610/op-supervisor/supervisor/backend/backend.go#L299\n\nWhen a Processor Source is added, it overwrites any other existing processor source. This means if you have multiple nodes at different sync points, only the last attached one will supply receipt data. If that node is behind the others, you'll be unable to sync receipt data for the nodes who are farther ahead.\n\n\nThe solution here is to accept multiple endpoints and track them all. Attempt to pull the receipts from the first endpoint, then fall back, etc.", "CLOSED", 0, "axelKingsley", "2025-02-11T22:11:50Z", "2025-07-21T22:16:13Z", "2025-07-21T22:16:13Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6pkGhX", 14312, "interop: Establish Alert Criteria", "Establish alerting criteria for the Interop RC Devnet:\n\n- [ ] Standard network alerting\n  - [ ] Work with Platforms Team to determine valuable criteria\n- [ ] Interop / op-supervisor specific alerting\n\n### Acceptance Criteria\n- [ ] Documented alerting criteria\n- [ ] Documented alerting channels\n- [ ] Documented alert handling procedures\n- [ ] Testing via alert simulation", "CLOSED", 0, "unknown", "2025-02-11T09:29:55Z", "2025-07-21T22:16:13Z", "2025-07-21T22:16:12Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6pDVIi", 14231, "interop: op-supervisor bootstrap sync test", "Test that the op-supervisor can bootstrap from an existing op-supervisor, using the bootstrap syncing logic upon op-supervisor startup.\n\n\"bootstrap\" sync is also known as \"snap sync\" (not to be confused with geth snap sync).\nIt is implemented in the `/op-supervisor/backend/db/sync` package.\n\nThis pulls slices of DB data with HTTP range queries, to quickly replicate a sequencer database from another running node.\n\nOn top of the devnet-sdk (after regular sync tests land) we can build a test scenario that has multiple supervisors, where one has been running and the other one is paused and then gets out of sync. And then the test can make the out-of-sync one restart, configured to use bootstrap-sync, to pull the DB changes from the running node.\n\nThis sync mode needs additional documentation, and we should consider changes to not start bootstrap sync from 0 only, to catch up if there's some existing data.\n", "CLOSED", 0, "protolambda", "2025-02-06T17:57:47Z", "2025-07-21T22:16:12Z", "2025-07-21T22:16:12Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6pDOmA", 14228, "interop: L1 read-only interop (exploratory)", "We can index the L1 chain as a read-only source of events.\n\n**This is not currently in scope**, but may be explored as an extension of regular interop.\n\nIn the logsdb, the L1 chain would essentially be indexed just like a \"L2 chain\", and be allowed to emit initiating messages, but not execute any messages (as L1 forkchoice does not enforce interop inbox rules).\n\nAnd the in the fromda DB of local/cross safe is relatively trivial here, since L1 blocks are dependent on the block itself and nothing else.\n\n", "CLOSED", 0, "protolambda", "2025-02-06T17:44:57Z", "2025-07-21T22:16:12Z", "2025-07-21T22:16:12Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6pDKfS", 14226, "interop: op-e2e action test with 7702 interop tx", "With interop, a remote EOA can be used through the interop messaging.\n\nSee gist by @tynes : https://gist.github.com/tynes/48e5b8312fa5739f0bada4059e8af132\n\nThis should be tested in an action-test (or other type of test) to check that 7702 works with interop.\n\n", "CLOSED", 0, "protolambda", "2025-02-06T17:35:52Z", "2025-07-21T22:16:12Z", "2025-07-21T22:16:11Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6onZWq", 14132, "interop: migrate op-e2e tests to use op-deployer internals instead of interopgen", "`interopgen` is built around OPCM op-deployer internals.\n\n`op-deployer` is built around those same `OPCM` internals.\n\nBut there may be ways to reduce `interopgen` and/or remove it altogether, and lean in more on op-deployer abstractions for op-e2e interop system/action tests.\n\nThis will require some investigation into op-deployer, and comparison with `interopgen`, to de-duplicate abstractions where possible.\n\nFor context, `interopgen` was built pre-op-deployer, as a simplified placeholder around OPCM functions, to get interop running.\nReplacing it is not urgent, but may unify code nicely.\n\n", "CLOSED", 0, "protolambda", "2025-02-04T01:20:58Z", "2025-07-21T22:16:11Z", "2025-07-21T22:16:11Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6onNeB", 14131, "interop: test-sequencing milestone 3 (optional): engine mode", "See https://github.com/ethereum-optimism/design-docs/blob/main/protocol/test-sequencing.md#milestone-3-engine-mode", "CLOSED", 0, "protolambda", "2025-02-04T00:32:14Z", "2025-07-21T22:16:10Z", "2025-07-21T22:16:10Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6onDqc", 14120, "interop: transaction confirmation flow", "How should declined interop txs work?\n\nWith interop inevitably some transactions will not meet the interop-safety dependency, and not get included. However, since it's not an onchain revert, and not a gas-price issue you can compare statically, the error is very opaque.\n\nWorse, the sequencer might not have the compute or safety-guarantee it needs to confirm the tx intermittently.\n\nWe want the UX to be fast and clear, but what's the best way to expose this to the user?\n\nIdeas:\n- error-code upon resubmitting the tx: no new RPC, but maybe counter-intuitive or inefficient to poll status this way. But prevents the \n- error-code upon receipt polling: like the above. Maybe better\n- both of the above?\n- A new interop-specific RPC?\n\nAnd the RPC-server might still be separated from the sequencer; so it can be inconsistent with the actual failure reason. Do we want to synchronize this inclusion information across nodes?\nMaybe we inevitably have to, to prevent the same transaction from costing compute on many replicas?\n\nAnother edge-case is that some txs might get delayed because of previous invalid txs from the same RPC sender or address. What do we communicate to the user in this case? It might be a honest user, who mistakenly made the bad txs, who needs the simulation result.\n", "CLOSED", 0, "protolambda", "2025-02-03T23:57:56Z", "2025-07-21T22:16:10Z", "2025-07-21T22:16:10Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6ne2NA", 13972, "supervisor, e2e: Remove multiple L1 sources from tests", "This is a cosmetic issue only and only affects tests as far as I know.\n\nThe E2E tests have an L1 signal associated with them, and that signal is attached to the node. However, in interop Managed Mode, the L1 signal comes from the supervisor.\n\nIn E2E tests (action tests particularly) we need to `ActL1HeadSignal` on the sequencer, but really this shouldn't be required in Managed Mode\n\nhttps://github.com/ethereum-optimism/optimism/blob/c0a81b3dc0c0240faf32d42b18bf4e626550e2ae/op-e2e/actions/interop/reset_test.go#L77", "CLOSED", 0, "axelKingsley", "2025-01-24T16:46:33Z", "2025-07-21T22:16:10Z", "2025-07-21T22:16:09Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6nVaIX", 13945, "FMA: Interop Proofs", "We should create and approve the FMA document to support out interop proofs implementation.\n\nThe FMA should include output from threat modeling.", "CLOSED", 0, "BlocksOnAChain", "2025-01-23T16:44:19Z", "2025-07-21T22:16:09Z", "2025-07-21T22:16:09Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6mKYKI", 13755, "op-batcher: add warnings on potential prod misconfiguration", "There are multiple batcher configurations that are dangerous in a prod environment. We should do some cheap sanity checks at startup and log warnings on potential prod misconfiguration. Probably also worth bumping the whole config at startup too, to help debugging remote batchers.\n\nCases where we want to warn:\n- `num-confirmations` below 5 -> prod L1s can reorg, so should be at least set to 5\n- `data-availability-type` is `blobs` instead of `auto` -> If using `blobs`, probably want to use `auto` in a prod environment instead\n- throttling disabled -> should be enabled in prod\n- `max-pending-tx` < 3 -> there should always be some concurrent txs allowed, to avoid a backlog to build up too quickly\n- if `blobs` or `auto` `da-type` _and_ `target-num-frames == 1`: unusual, should be at least 2\n- `batch-type == 0`: probably want to use `1` (span batches) instead. Should only use singular batches in recovery situations, like recovery from a seq window\n- `max-channel-duration > 1800`: that would be >6h, seems too high for a prod env\n- `max-channel-duration < 25`: that would be <5min, seems too low for a prod env\n- `poll-interval > 12s`: seems to large, should poll regularly\n- `sub-safety-margin < 150`: <30 min, seems too low, there should be a safety margin of 30 min to get a channel on-chain before going over the seq window\n- _anything else?_\n\nWe should also take the opportunity to change some defaults:\n- enable `wait-node-sync` by default, it's working well\n- set default compression algo to brotli\n- set default batch type to span", "CLOSED", 0, "sebastianst", "2025-01-14T16:46:25Z", "2025-07-21T22:16:09Z", "2025-07-21T22:16:09Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6cGQMK", 12703, "[Tracker] Isthmus Upgrade", "This is out of date\n\nGeneral tracking for features proposed to be included in the Isthmus upgrade.\n\n## Pre-requisite\n\n- [x] #13069 \n\n## Isthmus Candidates\n\n### Smart contract work\n\n- [ ] #11527\n    - [ ] [Implementation](https://github.com/ethereum-optimism/optimism/pull/12356)\n    - [x] [PR: make Cannon libraries version agnostic](https://github.com/ethereum-optimism/optimism/pull/13175)\n- [ ] #11558 \n- [ ] #12478 \n    - [ ] [Design Doc](https://github.com/ethereum-optimism/design-docs/pull/143)\n    - [ ] [Implementation]()\n- [ ] #13058 \n    - [x] [PR: import statement cleanup](https://github.com/ethereum-optimism/optimism/pull/13056)\n    - [x] [PR: move interfaces to new top-level folder](https://github.com/ethereum-optimism/optimism/pull/13114)\n- [x] #11093 \n    - [x] [PR: fix stack too deep error in PermissionedDisputeGame](https://github.com/ethereum-optimism/optimism/pull/13141)\n    - [x] [PR: fix stack too deep error in MIPS](https://github.com/ethereum-optimism/optimism/pull/13137)\n    - [x] [PR: fix stack too deep in LibKeccak](https://github.com/ethereum-optimism/optimism/pull/13136)\n- [ ]  #12172\n- [ ] Include Custom Gas Token code\n\n### Other features\n\n- [x] #12044 \n  - [x] [PR op-geth: Isthmus: Tests and misc updates for L2 withdrawals root](https://github.com/ethereum-optimism/op-geth/pull/399) \n  - [x] [PR op-geth: Isthmus: withdrawals root in block header](https://github.com/ethereum-optimism/op-geth/pull/451)\n  - [x] [PR: Config: Add support for Isthmus](https://github.com/ethereum-optimism/optimism/pull/12847)\n  - [x] [PR: Updates for withdrawals root in block header](https://github.com/ethereum-optimism/optimism/pull/13962)\n  - [x] [PR: op-program use withdrawalRoot from header if Isthmus](https://github.com/ethereum-optimism/optimism/pull/14180)\n  - [ ] [PR: Action Tests](https://github.com/ethereum-optimism/optimism/pull/12925)\n- [x] [Operator Fee](https://github.com/ethereum-optimism/specs/pull/382)\n    - [ ] [Design Doc](https://github.com/ethereum-optimism/design-docs/pull/81/files)\n- [ ] [Header Accumulator](https://github.com/ethereum-optimism/specs/pull/259)\n- [x] https://github.com/ethereum-optimism/specs/issues/511\n\n## Probably NGMI this time\n\n- [x] #12435\n- [ ] [Deposit Queue](https://github.com/ethereum-optimism/specs/pull/82)\n- [ ] [Decouple block times between L1 and L2 (or L2 and L3)](https://github.com/ethereum-optimism/specs/issues/416)\n\n---\nNB - the above is all subject to further discussion and agreement; nothing is set in stone just yet. But we are no longer taking further submissions for Isthmus (unless they are extraordinarily important).", "CLOSED", 0, "smartcontracts", "2024-10-28T16:14:51Z", "2025-10-02T16:12:49Z", "2025-10-02T16:12:49Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6cEQac", 12695, "Holocene-D: Pending safe promotion only after full L1 block derivation", "I proposer to change derivation so that the pending safe head is only promoted to safe after all batches have been fully derived from any given L1 block (not only from a single span batch). Otherwise nodes that restart mid-way through derivation can be made to chain split by a malicious batcher, although the setup for such a scenario is not trivial. It could only happen with explicit malicious intent, and would only affect nodes that accidentally restarted mid-way through derivation from a given L1 block.\r\n\r\nThe background is that with Holocene, overlapping singular batches, even if coming from a span batch, are not checked to match the existing safe chain. Past batches are simply fast-dropped. Before holocene, the span batch checks would fetch all overlapping L2 blocks fully and match that the batches' content (transactions, L1 origin, ...) match the blocks' content.\r\n\r\nI beliebe that even pre-Holocene, this can be exploited with singular batches in two closely following batcher transactions, because past singular batches are also fast dropped (details following soon).\r\n- [ ] Action test showing mid-way derivation restart exploit pre-Holocene\r\n\r\n~This change fixes another issue of the current Holocene derivation. Currently, if a batch in a span batch is invalid, or the payload derived from it is invalid, the remaining channel is dropped, so derivation might never processes a batch with the `IsLastInSpan` boolean set to `true`, so the pending safe head would fail to be promoted to safe, even though it can already be considered safe, as no backwards- invalidation occurs.~ (fixed separately in https://github.com/ethereum-optimism/optimism/pull/12724)\r\n\r\nIt should also be noted that with this change, pending safe would have a slightly different meaning post-Holocene. Pre-Holocene, the pending safe was pending in the sense that it may well be reverted by a later invalid batch causing a revert of the full span batch. This is not the case any more with Holocene. Pending safe becomes more of an implementation detail to protect against inconsistent state from mid-way derivation restarts. In Holocene, a _pending safe_ block can already be considered _safe_ because backwards-invalidation got removed with Holocene. So for the purpose of fault proofs, a single block derivation that outputs a pending safe head can already be taken as safe.", "CLOSED", 0, "sebastianst", "2024-10-28T13:00:30Z", "2025-07-21T22:16:08Z", "2025-07-21T22:16:08Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6cAliW", 12688, "Remove old releases", "We have over 2,000 [releases](https://github.com/ethereum-optimism/optimism/releases?page=9) on the monorepo. Most of these are from old, unsupported packages or prereleases which should never be used in prod anyway. Cleaning these up would make it easier to see which software versions matter.\n\nNote that we don't need to delete the underlying git tags since this might inadvertently erase history or break people's builds.", "CLOSED", 0, "mslipper", "2024-10-28T06:05:03Z", "2025-07-21T22:16:08Z", "2025-07-21T22:16:08Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6aLHVe", 12444, "Holocene-D: BatchQueue/Stage improvements tracker", "Collecting follow-up work related to or discovered during https://github.com/ethereum-optimism/optimism/pull/12417\n\n## Blocking\n\n- [x] remove [l1 origin update assertion on single increments](https://github.com/ethereum-optimism/optimism/pull/12417/files/bb06375af4caa36e071a766788f1655d1d084a88#diff-70e161ad6625124a29f49468d591c738ddec2e962fcc198d3a9db85b242c1096R178-R182) after confirmation/disproving\n\n\n## Non-blocking\n\n- [x] #12695\nThe pending safe head should only be promoted to safe after all batches have been fully derived from any given L1 origin. Otherwise nodes that restart mid-way through derivation can be made to chain split by a malicious batcher. Will write down more details soon, but this is very hard to exploit. This becomes more important with Holocene because overlapping span batches aren't fully validated any more. But it is also possible pre-Holocene with channels full of singular batches, which a malicious batcher has the freedom to choose.\n- [ ] Revisit empty batch generation when sequencer window runs out.\nEmpty batch generation currently advances the `l1Block` after all empty batches for an epoch have been generated. It may be better to generate the next epoch's block at the right time and then let the existing `updateOrigin` take care of epoch advancing.\n- [ ] Revisit `originBehind` definition.\nAn origin is currently only considered behind if it's strictly before the parent's L1 origin. However, it may make sense to change the definition to also include equality. This makes sense because no new batches can be included in the parent's L1 origin block.\n- [ ] Use a span batch iterator instead of generating all singular batches at once. This makes particularly sense for Holocene, where we don't backwards-invalidate but only forwards-invalidate.\n- [ ] Revisit `BatchUndecided` status of batches.\nIt is usually used in cases where not enough `l1Blocks` are available yet. However, when we reset to a safe block's l1 origin and start deriving from it, the origin block itself cannot contain any new batches. So when we are at the point of checking batch validity, we have advanced the L1 origin at least one block, so we should always have 2 L1 blocks available. So I believe this status can be removed altogether. This is already asserted in `BatchStage.NextBatch`. It is also used during overlapping span batch validation if the l2fetcher hits an error. This can be handled differently, in a clearer way.\n- [ ] Improve overlapping span batch validation. The l2fetcher fetches full blocks and compares full transaction content. This can probably be improved to work only with MHT roots and headers.\n\n", "CLOSED", 0, "sebastianst", "2024-10-14T17:07:30Z", "2025-07-21T22:16:09Z", "2025-07-21T22:16:08Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Z6evF", 12435, "[Tracker] OP Stack: Support Pectra (Isthmus)", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nOne major benefit of the OP Stack is that it is minimally different from Ethereum. This means that users, developers and infrastructure providers have less chain specific gotchas and more tooling \"just works\". Ethereum periodically has hardforks and we want to keep the OP Stack up to date with the latest features that L1 supports. \r\n\r\nPectra is an upcoming hardfork for Ethereum, its scope is documented in [EIP-7600](https://eips.ethereum.org/EIPS/eip-7600 ). We would like to ship Pectra as soon as possible to the OP Stack when we know the spec is finalized and its ready to be released on L1. This ticket represents the work required to add Pectra support to the OP Stack.\r\n\r\nAs we identify tasks, we can track them here.\r\n\r\n- Span batch changes are required for 7702, see https://github.com/ethereum-optimism/specs/issues/318\r\n  - Span Batch Change - https://github.com/paradigmxyz/optimism/commit/dcc08095e125b42415ad8c9a21d4b11ec1fb2333\r\n- Derisk the fault proof execution of the BLS precompiles\r\n\r\nFrom @ajsutton \r\n\r\n> For whenever we pull Pectra into the OP stack, we will need to do some benchmarking on the new BLS precompiles - there's a pretty high likelihood we'll need to apply the preimage oracle acceleration to them.  Since the G1/G2 MSM precompile pairing check operation has a variable gas cost if it needs to go via the preimage oracle we will need to include a maximum input length for the precompile to ensure any call to it on L2 can be executed on L1 with some gas to spare to store the result in the preimage oracle.\r\n\r\nFor the OP Stack, we activate L1 hardforks with L2 hardforks. Depending on when the code is frozen for Pectra, it will determine when we are able to activate on the OP Stack. It is possible that we are able to include Pectra support in the Isthmus hardfork, see discussion: https://github.com/ethereum-optimism/specs/discussions/373\r\n\r\nAn example PR for adding a hardfork can be found here: https://github.com/ethereum-optimism/optimism/pull/12418", "CLOSED", 0, "tynes", "2024-10-11T21:53:41Z", "2025-07-21T11:14:41Z", "2025-07-21T11:14:41Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6VrkU3", 11793, "Interop: multiple RPCs per chain to fetch receipts from", "Currently we only have 1 RPC backend per chain-monitor in the op-supervisor.\n\nIn https://github.com/ethereum-optimism/optimism/pull/11792 we added an RPC method to add an RPC and a chain-monitor at the same time.\n\nTo have redundancy, we should consider coupling multiple RPCs to a chain-monitor.\n", "CLOSED", 0, "protolambda", "2024-09-06T21:37:53Z", "2025-07-21T22:16:07Z", "2025-07-21T22:16:07Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6VYdEx", 11744, "Interop: Embedded op-node supervisor", "The op-supervisor maintains a view of events, and in devnet 2 a view of the L1 to L2 block safety mapping.\r\n\r\nFor chains not part of an interopability-set, running the op-supervisor would be an extra burden.\r\n\r\nInstead, we can embed the op-supervisor within the op-node, to effectively serve single-chain interop (i.e. interact with past events in the local chain, and maybe also events from L1).\r\n", "CLOSED", 0, "protolambda", "2024-09-04T20:29:29Z", "2025-07-21T22:17:31Z", "2025-07-21T22:17:30Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6S75uy", 11476, "op-challenger: Add rpc server and add txmgr admin rpcs", "`op-challenger` doesn't currently have an `rpc.Server` like the batcher or proposer.\r\n\r\n- [ ] Add rpc server.\r\n- [ ] Attach txmgr admin api to it, after https://github.com/ethereum-optimism/optimism/pull/10897 is done.\r\n\r\n_Follow-up to https://github.com/ethereum-optimism/optimism/pull/10897#discussion_r1704555351_\r\n            ", "CLOSED", 0, "sebastianst", "2024-08-14T08:09:09Z", "2025-07-21T22:17:30Z", "2025-07-21T22:17:30Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6SR6k6", 11390, "op-proposer: Shutdown on failed sync check", "The proposer currently gets stuck at the startup sync check and doesn't shut down.", "CLOSED", 0, "sebastianst", "2024-08-07T19:19:48Z", "2025-07-21T22:17:30Z", "2025-07-21T22:17:30Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6MirOl", 10855, "Interop: redundancy design doc", "The op-supervisor itself needs to serve an RPC that can be replicated and load-balanced, to prevent outages due to single point of failure. See superchain-backend design doc PR comments: https://github.com/ethereum-optimism/design-docs/pull/9\n\nDefinition of done: A document that clearly describes managed mode/multi mode/standard mode and their tradeoffs, and what the cloud topology should be and a recommendation on what engineering work needs to be done to have a stable and relatively cheap devops setup", "CLOSED", 0, "protolambda", "2024-06-04T17:53:29Z", "2025-07-21T22:17:26Z", "2025-07-21T22:17:26Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6MirR9", 10860, "Interop: Standalone service, with disk append-log and non-recursive resolution.", "- [x] ethereum-optimism/optimism#10859\r\n- [x] ethereum-optimism/optimism#10856\r\n- [x] ethereum-optimism/optimism#10857\r\n- [x] ethereum-optimism/optimism#10855\r\n- [x] ethereum-optimism/optimism#10858\r\n- [x] ethereum-optimism/optimism#10847\r\n\r\n", "CLOSED", 0, "protolambda", "2024-05-31T15:59:26Z", "2025-07-21T22:17:27Z", "2024-08-23T21:05:36Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Mq7cr", 10909, "Add generic fork flag and field tests", "In the recent Fjord Sepolia release v1.7.6, the Fjord override flag was missing (added in https://github.com/ethereum-optimism/optimism/pull/10648). We should add generic tests (that will probably use reflection) to assert that fork fields and flags are present in the relevant structs, including for overrides. This can probably be done for both, op-geth and op-node.", "CLOSED", 0, "sebastianst", "2024-05-26T11:57:59Z", "2025-07-21T22:17:27Z", "2025-07-21T22:17:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Mq9Vw", 10914, "Abstract, then remove duplicate code used across `check-hardfork` scripts", "For each hardfork, we have a script in [this directory](https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops/cmd) that can run checks against a live chain. These scripts give us a nice sanity check to confirm the expected hardfork features are working properly when the hardfork is activated. Currently there is a lot of duplicate code across those scripts. We should create a shared `lib` package to eliminate the duplicate code.\r\n\r\nWe can also add a generic `test` action for ALL hardfork scripts that checks that all in-use endpoints (L2 RPC, L2 rollup?, L1 RPC?) are reachable, and on the RPCs that the following methods are accessible:\r\n* json rpc method checks against rpc endpoints (L2 rpc, maybe L1 rpc?)\r\n  * `eth_sendRawTransaction`\r\n  * `eth_getTransactionByBlockHashAndIndex`\r\n  * `eth_getTransactionByHash`\r\n  * `eth_getTransactionCount`\r\n  * `eth_getTransactionReceipt`\r\n  * `eth_getBlockBy...`", "CLOSED", 0, "bitwiseguy", "2024-05-23T13:39:33Z", "2025-07-21T22:17:27Z", "2025-07-21T22:17:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6MirXy", 10869, "Interop: op-supervisor implementation", "The superchain backend implementation is called `op-supervisor`\n\nImplement (split out into sub-issues as needed):\n- [x] ethereum-optimism/optimism#10860\n- [x] #11744\n\n[superchain backend design-doc](https://github.com/ethereum-optimism/design-docs/pull/9)\n\nThis ticket can be considered complete when the standalone service is complete", "CLOSED", 0, "protolambda", "2024-05-16T10:53:48Z", "2025-07-21T22:17:31Z", "2024-09-04T20:32:54Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6ItZoF", 10522, "op-node/rollup/derive: Investigate using a Peek/Discard io.Reader in BatchReader", "The `BatchReader` might be improved to save one buffered reader instantiation by receiving a reader with `Peek` and `Discard` functions.\r\n\r\nIt should be checked if this is feasible in all places where the `BatchReader` is used, and in this case do the change.\r\n\r\n_Original Conversation:_\r\n\r\n              What if we took a peekable/discard reader instead of a generic reader here? Realistically the underlying type is a bytes.Buffer\r\n\r\nAlso, what if we passed the chainspec object to the batcher reader rather than flags like the limit + isFjord (edit: We need a to pass a \"chain rules\" object which contains these values for the pipeline origin).\r\n\r\n_Originally posted by @trianglesphere in https://github.com/ethereum-optimism/optimism/pull/10358#discussion_r1597161467_\r\n            ", "CLOSED", 0, "sebastianst", "2024-05-13T19:05:33Z", "2025-07-21T22:17:26Z", "2025-07-21T22:17:26Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6IbxEP", 10486, "Speedup CI and Git by enforcing index-version 4 via update-index", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nMonorepo speedups are nice, this is an easy change that will be easily adoptable.\r\n\r\n**Describe the solution you'd like**\r\n\r\n1. Enforce monorepo git configuration\r\n\r\n2. Support caching of vendored dependencies (i.e. submodules, etc).\r\n\r\n## Caching Sub Modules via GitHub Actions Cache \r\n\r\nI have created a separate GitHub repo that contains a python script that generates a GitHub workflow that correctly caches submodules for usage. \r\n\r\n> [!IMPORTANT]    \r\n> In principle, we desire that the submodules are cloned and stored in the CI cache. Then we leverage the `--reference` flag to grab objects from this local cache when initialising the submodule - incrementally updating the CI cache should always be cheaper than having to freshly clone each time. \r\n\r\n```bash\r\ngit submodule update --init --reference <cache>/<dep> <dep>\r\n```\r\n\r\n\r\n> https://github.com/sambacha/workflows-cache-submodules/tree/master\r\n\r\n1. Parse Git Submodules: Recursively parse submodules listed in `.gitmodules`.\r\n2. Generate Bash Scripts: Create scripts to set up a reference repository and checkout with reference.\r\n3. GitHub Actions Workflow: Generate a workflow file that caches submodules and uses the latest `@actions/checkout` and `@actions/cache`.\r\n4. Deduplication: Hoist nested submodules by symlinking identical submodules to reduce redundancy.\r\n\r\n### Example generated workflow jobs:\r\n\r\n```yaml\r\n      - name: Setup cache\r\n        id: cache-submodule\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: |\r\n            ~/.cache/git/repo\r\n            ~/.cache/git/submodule1\r\n            ~/.cache/git/submodule2\r\n          key: ${{ runner.os }}-git-${{ hashFiles('**/.git') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-git-\r\n\r\n      - name: Create reference repository\r\n        if: steps.cache-submodule.outputs.cache-hit != 'true'\r\n        run: bash create_reference_repo.sh\r\n\r\n      - name: Checkout with reference\r\n        run: bash checkout_with_reference.sh\r\n```\r\n\r\n\r\n## Suggested settings\r\n\r\nThese settings along with defining a `~/.gitconfig.monorepo` configuration file to support commitgraph and native fsmonitor\r\n\r\n\r\n### Pseduo Merge Bitmaps\r\n\r\n> [see details via github.blog/open-source/git/highlights-from-git-2-46/](https://github.blog/open-source/git/highlights-from-git-2-46/)\r\n\r\n```bash\r\n# configure pseduo-merge bitmaps\r\ngit config bitmapPseudoMerge.all.pattern 'refs/(heads|tags)/'\r\ngit config bitmapPseudoMerge.all.threshold now\r\ngit config bitmapPseudoMerge.all.stableThreshold never\r\n\r\n# generate a new *.bitmap file\r\ngit repack -adb\r\n```\r\n\r\n> [!NOTE]   \r\n> `git refs migrate --ref-format=reftable` should be available in 2.46.0, but is not\r\n\r\n~~~bash\r\ngit config --global pack.allowPackReuse multi\r\ngit multi-pack-index write --bitmap\r\ngit update-index --verbose --index-version 4\r\n~~~\r\n\r\n`~/.gitconfig.monorepo`\r\n```cfg\r\n[core]\r\n    commitgraph = true\r\n    fsmonitor = true\r\n    writeCommitGraph = true\r\n[feature]\r\n    manyFiles = true\r\n```\r\n\r\nwhich can be imported through your `.gitconfig` by\r\n~~~cfg\r\n[include]\r\n    path = ~/.gitconfig.monorepo\r\n~~~\r\n\r\n\r\n### Update Index version 4\r\n\r\n~~~console\r\n$ git update-index --verbose --show-index-version\r\n2\r\n~~~\r\n\r\n~~~console\r\n$ git update-index --verbose --index-version 4\r\nindex-version: was 2, set to 4\r\n~~~\r\n\r\n\r\n### fsmonitor daemon\r\n\r\n> see https://github.blog/2022-06-29-improve-git-monorepo-performance-with-a-file-system-monitor/\r\n\r\n```bash\r\ngit config core.fsmonitor true\r\n```\r\n\r\n```bash\r\ngit fsmonitor--daemon start\r\n```\r\n\r\n**`core.commitgraph`**\r\n\r\nGit will use a commit history cache to significantly speed up history operations, such as `git log` with the `--graph` option.\r\n\r\n**`fetch.writeCommitGraph`**\r\n\r\nImproves performance of commands like `git push -f` and `git log --graph` by writing a commit-graph on every `git fetch`.\r\n\r\n\r\n## References\r\n\r\n### Faster pack generation with multi-pack reuse\r\n\r\nhttps://github.blog/2024-02-23-highlights-from-git-2-44/\r\n\r\n### Measuring Git Performance with OpenTel\r\n\r\nhttps://github.blog/2023-10-16-measuring-git-performance-with-opentelemetry/\r\n", "CLOSED", 0, "sambacha", "2024-05-10T05:42:27Z", "2025-07-21T22:17:25Z", "2025-07-21T22:17:25Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6IYeXe", 10470, "op-node: Increase MaxFrameLength + Check buffer size against FrameLength", "Several Changes\r\n\r\n1. MaxFrameLen should be increased to 10MB from 1MB\r\n2. Inside `func (f *Frame) UnmarshalBinary(r ByteReader) error` we should validate `frameLength` against the remaining bytes\r\n3. We need to update the specs + make MaxFrameLen a clear protocol constant.", "CLOSED", 0, "trianglesphere", "2024-05-09T17:15:19Z", "2025-07-21T22:17:25Z", "2025-07-21T22:17:25Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Mq_bt", 10922, "Deduplicate Block Processor Code", "During https://github.com/ethereum-optimism/optimism/pull/9117 the block processor code in the action tests' `L1Miner` duplicated code from `op-program/client/l2/engineapi/block_processor.go`. There might be an opportunity to deduplicate. ", "CLOSED", 0, "sebastianst", "2024-04-30T20:31:36Z", "2025-07-21T22:17:27Z", "2025-07-21T22:17:27Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Mq_nl", 10923, "op-node: infinite loop on missing L1 origin", "During a recent incident on sepolia-devnet-0 where proxyd-l1 didn't return any L1 blocks, the network halted. op-node was logging in an infinity loop gigabytes of the same repetitive message for 2 days, thousands per second, those three on repeat: \r\n```\r\nt=2024-03-25T17:35:43+0000 lvl=eror msg=\"sequencer failed to start building new block with unclassified error\" err=\"cannot build next L2 block past current L1 origin 0xe294a28445e3a391466ec04d5416d28853614ece9f3c85fd4d19964a039545c4:5540790 by more than sequencer time drift, and failed to find next L1 origin: not found\"\r\nt=2024-03-25T17:35:43+0000 lvl=warn msg=\"Next L2 block time is past the sequencer drift + current origin time\" current=0xe294a28445e3a391466ec04d5416d28853614ece9f3c85fd4d19964a039545c4:5540790 current_time=1711148172 l2_head=0x58e6c5de339f21ef6d736d0add7cd1f90d573775fa52fa8887198f53f7df7350:2332362 l2_head_time=1711148772\r\nt=2024-03-25T17:35:43+0000 lvl=eror msg=\"Error finding next L1 Origin\" err=\"cannot build next L2 block past current L1 origin 0xe294a28445e3a391466ec04d5416d28853614ece9f3c85fd4d19964a039545c4:5540790 by more than sequencer time drift, and failed to find next L1 origin: not found\"\r\n```\r\n", "CLOSED", 0, "sebastianst", "2024-03-25T19:08:46Z", "2025-07-21T22:17:28Z", "2025-07-21T22:17:28Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Mq_u2", 10924, "op-batcher: Fix channel duration tracking discrepancy (head vs channel latest L1 origin)", "https://github.com/ethereum-optimism/protocol-quest/issues/174 improved channel duration tracking by setting a _channel's latest L1 origin + channel duration_ as the timeout for the next channel. This leads to consistent channel durations surviving batcher restarts. However, the timeout is measured against the _L1 head_, not against the current channel's latest L1 origin, leading to effectively _shorter_ channel durations than what's set as the channel duration parameter. This is barely noticeable when setting very long durations, e.g. hours, but on testnets where sometimes durations as short as 2 min are set, this has a strong impact and shrinks the effective duration by over a minute.\r\n\r\nMultiple solutions exist:\r\n* Track the channel duration between latest channel L1 origins. This has the downside that it would require us to effectively introduce a 2nd timeout tracker inside the channel builder, because the current `timeout` field is measured against the latest L1 head.\r\n* Track the latest L1 heads at channel closing, instead of latest L1 origin of channels, and only when restarting the batcher, use the latest channel's L1 origin (or L1 batcher tx inclusion block?) as the starting point for the timeout. This has the benefit that the channel builder's internal tracking mechanism doesn't need to be complicated with a second L1 origin timeout field. But it seems less _clean_ than tracking the L1 origins.", "CLOSED", 0, "sebastianst", "2024-03-25T17:57:02Z", "2025-07-21T22:17:28Z", "2025-07-21T22:17:28Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Mir8M", 10896, "Interop: Go e2e tracker", "Superchain backend:\r\n- [x] ethereum-optimism/optimism#10869\r\n  - [x] ethereum-optimism/optimism#10860\r\n    - [x] ethereum-optimism/optimism#10859\r\n    - [x] ethereum-optimism/optimism#10856\r\n    - [x] ethereum-optimism/optimism#10857\r\n    - [x] ethereum-optimism/optimism#10855\r\n    - [x] ethereum-optimism/optimism#10858\r\n- [x] ethereum-optimism/optimism#10883 \r\n\r\nGeth:\r\n- [x] ethereum-optimism/optimism#10891\r\n- [x] https://github.com/ethereum-optimism/optimism/issues/10867\r\n\r\nDriver / derivation:\r\n- [ ] https://github.com/ethereum-optimism/specs/pull/96\r\n- [x] ethereum-optimism/protocol-quest#192\r\n- [x] ethereum-optimism/optimism#10888\r\n  - [x] https://github.com/ethereum-optimism/protocol-quest/issues/260\r\n    - [x] ethereum-optimism/protocol-quest#262\r\n    - [x] ethereum-optimism/protocol-quest#270\r\n    - [x] ethereum-optimism/protocol-quest#271\r\n    - [x] ethereum-optimism/protocol-quest#272\r\n  - [x] ethereum-optimism/protocol-quest#261\r\n  - [ ] ethereum-optimism/optimism#10865  (see sub-tracking issue)\r\n  - [ ] ethereum-optimism/optimism#10864\r\n- [x] ethereum-optimism/optimism#10887 \r\n\r\n- [x] ethereum-optimism/optimism#10884\r\n- [x] ethereum-optimism/optimism#10885\r\n- [x] https://github.com/ethereum-optimism/protocol-quest/issues/226\r\n\r\nTesting:\r\n- [ ] Low Latency E2E Test", "CLOSED", 0, "hamdiallam", "2024-02-28T18:12:34Z", "2025-07-21T22:17:28Z", "2024-07-30T18:04:56Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6Mq_-6", 10926, "Discovery: Add `opel` key to the execution layer", "We can move V5 bootnodes to the superchain registry and use the ENR text format. It's also possible to use DNS discovery for the EL (a little important b/c reth does not yet support discV5 but is moving in that direction.).\r\n\r\nV5 can be cross network. We will want to split EL and CL. Long term we may want to remove testnet bootnodes & just have mainnet bootnodes.\r\n\r\nRight now most bootnodes are stored as enodes in our code but should be ENRs.", "CLOSED", 0, "trianglesphere", "2024-02-21T01:03:42Z", "2025-07-21T22:17:28Z", "2025-07-21T22:17:28Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6MrBm9", 10937, "txmgr: Improve logs to add `nonce` attributes", "Some logs don't attach the `nonce` attribute, like \"Transaction confirmed\". It helps debugging to have all tx-specific txmgr logs set the `nonce` attribute.", "CLOSED", 0, "sebastianst", "2024-02-09T16:24:19Z", "2025-07-21T22:17:29Z", "2025-07-21T22:17:29Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6MrArQ", 10930, "add `shouldValidate` to Receipt Fetchers; Introduce more tests", "Building off: https://github.com/ethereum-optimism/client-pod/issues/526\r\n\r\nWe fixed the validation of receipts, and along the way noted two open areas of improvement:\r\n\r\n### `shouldValidate`\r\nReceipt Providers' `FetchReceipts` function should be modified to include a boolean `shouldValidate` in the signature. Receipt Providers now have everything they need to handle validation, but we don't want to do multiple redundant rounds of it. Instead, fetchers should consult the boolean to either do the validation directly, or ask an inner scope fetcher to do so.\r\n\r\n### Unit Tests\r\nWe have unit tests which confirm correct behavior of the validation function, and we also have a test at the EL Client level confirming that validation is used by at least one of the fetchers. However, we would also like tests which confirm the following things:\r\n* At the client level, if a receipt fetching fails validation, the invalid data is not returned later from the cache\r\n* At each fetcher level, if `shouldValidate` is true, validation returns an error, and in the case of the caching fetcher, the cache is not populated.\r\n\r\nThese tests will help us confirm that beyond validation being used and being correct, that each fetcher treats validation appropriately.", "CLOSED", 0, "axelKingsley", "2024-02-08T15:21:02Z", "2025-07-21T22:17:29Z", "2025-07-21T22:17:29Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6MrAyb", 10931, "op-service: Deduplicate default logger setup", "We often initialize cmds with\r\n```go\r\n\tcolor := isatty.IsTerminal(os.Stderr.Fd())\r\n\toplog.SetGlobalLogHandler(log.NewTerminalHandler(os.Stderr, color))\r\n```\r\nThese two lines can be merged into a default setter function in `oplog`, like\r\n\r\n```go\r\npackage log // oplog\r\n\r\nfunc SetDefaultGlobalLogHander() slog.Handler {\r\n\tcolor := isatty.IsTerminal(os.Stderr.Fd())\r\n\thandler := log.NewTerminalHandler(os.Stderr, color)\r\n\tSetGlobalLogHandler(handler)\r\n\treturn handler\r\n}\r\n```\r\nThe advantage of returning the handler is that the calling site sometimes also wants to create a normal logger with the same handler.\r\n\r\nThis new function should then be used in all `cmd` where we setup the default log handler in this way.\r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/optimism/pull/8917#discussion_r1478970162_\r\n            ", "CLOSED", 0, "sebastianst", "2024-02-05T22:16:44Z", "2025-07-21T22:17:29Z", "2025-07-21T22:17:29Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDODjvEJM6MrBAb", 10933, "Add Batch BlockByNumber to Client", "RPC clients use an internal `rpcBlock` structure to hold RPC responses before returning back to the caller. Because the `rpcClient` had been unexported, it wasn't possible to write a batch call with that structure from outside the package.\r\n\r\nhttps://github.com/ethereum-optimism/optimism/pull/9246 exported the struct so anyone can build a batch call, but another helpful idea is to simply add batch calls to our clients so they may be used even more simply.", "CLOSED", 0, "axelKingsley", "2024-01-30T15:08:05Z", "2025-07-21T22:17:29Z", "2025-07-21T22:17:29Z", "ethereum-optimism/optimism", "2025-08-31 06:33:18"]
["I_kwDOKIwiaM7Dz4ef", 1710, "[DOCS] Begin documenting `MinBaseFee` feature", "<!-- please fill out the description and acceptance criteria to the best to your ability. While the other sections are optional, it makes resolving the issue much easier. -->\n\n## Description \n<!-- Write a clear and concise description of the docs request. For example, is the request related to an existing page or are you suggesting a brand-new docs page? -->\nWe would like to start work documenting this feature currently in development: \n\n\n\n## Acceptance criteria\n<!-- Clearly list out the definition of done. -->\n*  Chain Operators need to be made aware that setting the minimum too high may have negative impacts on users (making transactions harder to get included). \n* Chain operators need to understand the manner by the parameter is set using a base 2 logarithm. \n\n## User stories\n<!-- User stories that illustrate the benefits of this issue. For example, this documentation improvement will allow user X to be able to Y. -->\n\n\n## Resources and support\n<!-- Provide additional documentation, context, and subject matter experts to help us complete this issue. -->\nhttps://github.com/ethereum-optimism/design-docs/pull/295\nSME: @geoknee, @joshklop , @sebastianst \n\n## Action items\n<!-- Clear steps to take to complete this issue -->\n", "OPEN", 0, "geoknee", "2025-08-01T21:18:19Z", "2025-08-01T21:19:22Z", null, "ethereum-optimism/docs", "2025-08-31 06:34:44"]
["I_kwDOKIwiaM7CAIgh", 1701, "[2024 Q4 Audit] [page-path]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\n<!-- Write a description of the current state of the page. -->\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisk\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>\n\n", "CLOSED", 0, "killers10", "2025-07-23T04:28:48Z", "2025-07-28T14:39:04Z", "2025-07-28T14:39:04Z", "ethereum-optimism/docs", "2025-08-31 06:34:44"]
["I_kwDOKIwiaM6-J088", 1682, "2025-06-01..2025-06-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 20:04:02 | 1:59:48 | 2 days, 10:44:46 |\n| Time to close | 20:24:50 | 3:46:32 | 2 days, 1:40:52 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 11 |\n| Number of items closed | 22 |\n| Number of most active mentors | 0 |\n| Total number of items created | 33 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Update fees.mdx | https://github.com/ethereum-optimism/docs/pull/1680 | [LkingX33](https://github.com/LkingX33) | None | None | None |\n| Update blockspace-charter.mdx | https://github.com/ethereum-optimism/docs/pull/1679 | [LkingX33](https://github.com/LkingX33) | None | None | None |\n| Update predeploy.mdx | https://github.com/ethereum-optimism/docs/pull/1678 | [LkingX33](https://github.com/LkingX33) | None | None | None |\n| Update get-started.mdx | https://github.com/ethereum-optimism/docs/pull/1677 | [LkingX33](https://github.com/LkingX33) | None | None | None |\n| Update event-reads.mdx | https://github.com/ethereum-optimism/docs/pull/1672 | [LkingX33](https://github.com/LkingX33) | None | None | None |\n| Remove devnet information | https://github.com/ethereum-optimism/docs/pull/1670 | [zainbacchus](https://github.com/zainbacchus) | 0:07:09 | 0:15:05 | None |\n| Add missing commands and help text to supersim docs | https://github.com/ethereum-optimism/docs/pull/1669 | [its-everdred](https://github.com/its-everdred) | 0:18:02 | 0:18:07 | None |\n| Proposer config update | https://github.com/ethereum-optimism/docs/pull/1668 | [ZakAyesh](https://github.com/ZakAyesh) | 2 days, 12:15:40 | 2 days, 12:20:36 | None |\n| docs(op-deployer): fix some format typo | https://github.com/ethereum-optimism/docs/pull/1667 | [jsvisa](https://github.com/jsvisa) | 1 day, 18:42:39 | 1 day, 18:42:45 | None |\n| Spin batche | https://github.com/ethereum-optimism/docs/pull/1666 | [krofax](https://github.com/krofax) | None | None | None |\n| Spin up your batcher | https://github.com/ethereum-optimism/docs/pull/1665 | [krofax](https://github.com/krofax) | None | None | None |\n| Bump next from 14.2.21 to 14.2.30 | https://github.com/ethereum-optimism/docs/pull/1664 | [dependabot[bot]](https://github.com/dependabot[bot]) | None | None | None |\n| Updating the cross domain messenger overview | https://github.com/ethereum-optimism/docs/pull/1663 | [sbvegan](https://github.com/sbvegan) | 0:36:17 | None | None |\n| Fix hardware date | https://github.com/ethereum-optimism/docs/pull/1662 | [bradleycamacho](https://github.com/bradleycamacho) | 1:01:45 | 1:01:55 | None |\n| U16 contract upgrades | https://github.com/ethereum-optimism/docs/pull/1661 | [bradleycamacho](https://github.com/bradleycamacho) | 1:35:25 | None | None |\n| Update op-challenger version for upgrade 16 to 1.5.1 | https://github.com/ethereum-optimism/docs/pull/1660 | [pauldowman](https://github.com/pauldowman) | None | None | None |\n| Fix nav issue | https://github.com/ethereum-optimism/docs/pull/1659 | [krofax](https://github.com/krofax) | 2:11:41 | 3:56:11 | None |\n| Update U16 challenger version | https://github.com/ethereum-optimism/docs/pull/1658 | [bradleycamacho](https://github.com/bradleycamacho) | 0:25:10 | 21:26:08 | None |\n| Point audits page to monorepo | https://github.com/ethereum-optimism/docs/pull/1656 | [bradleycamacho](https://github.com/bradleycamacho) | 0:04:27 | 1:02:32 | None |\n| Add Dispute Game Resolve Logic | https://github.com/ethereum-optimism/docs/pull/1655 | [MSilb7](https://github.com/MSilb7) | 1:47:56 | 2:04:44 | None |\n| Interop testing tutorial | https://github.com/ethereum-optimism/docs/pull/1654 | [qbzzt](https://github.com/qbzzt) | None | None | None |\n| fix typo superchain-withdrawal-pause-test.mdx | https://github.com/ethereum-optimism/docs/pull/1653 | [davidjsonn](https://github.com/davidjsonn) | 1 day, 8:19:58 | 1 day, 8:20:04 | None |\n| minor docstring fixups | https://github.com/ethereum-optimism/docs/pull/1652 | [davidjsonn](https://github.com/davidjsonn) | 1 day, 21:06:35 | 1 day, 21:06:41 | None |\n| Update data glossary | https://github.com/ethereum-optimism/docs/pull/1651 | [krofax](https://github.com/krofax) | 1:28:29 | None | None |\n| Data dashboard section | https://github.com/ethereum-optimism/docs/pull/1650 | [bradleycamacho](https://github.com/bradleycamacho) | 2:47:49 | 3:36:54 | None |\n| fix error in pause.mdx | https://github.com/ethereum-optimism/docs/pull/1649 | [davidjsonn](https://github.com/davidjsonn) | 7:23:20 | 7:23:26 | None |\n| Fix deposit flow tutorial | https://github.com/ethereum-optimism/docs/pull/1648 | [krofax](https://github.com/krofax) | 4 days, 4:34:54 | 5 days, 2:49:19 | None |\n| Add op-challenger info to U16 notice page | https://github.com/ethereum-optimism/docs/pull/1647 | [bradleycamacho](https://github.com/bradleycamacho) | 2:14:14 | 2:21:36 | None |\n| Clarify grant perms to SuperchainTokenBridge | https://github.com/ethereum-optimism/docs/pull/1646 | [zainbacchus](https://github.com/zainbacchus) | 0:05:32 | 1:12:13 | None |\n| Proposer setup guide | https://github.com/ethereum-optimism/docs/pull/1645 | [krofax](https://github.com/krofax) | 4 days, 22:59:33 | None | None |\n| Update batcher.mdx | https://github.com/ethereum-optimism/docs/pull/1643 | [sbvegan](https://github.com/sbvegan) | 0:00:58 | 0:07:09 | None |\n| update batcher configs | https://github.com/ethereum-optimism/docs/pull/1642 | [krofax](https://github.com/krofax) | None | None | None |\n| Update mips.go link to current location in multithreaded directory | https://github.com/ethereum-optimism/docs/pull/1641 | [MozirDmitriy](https://github.com/MozirDmitriy) | 19:21:16 | 19:21:30 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-06-01..2025-06-30`", "CLOSED", 0, "opgitgovernance", "2025-07-01T00:21:46Z", "2025-07-28T14:39:19Z", "2025-07-28T14:39:19Z", "ethereum-optimism/docs", "2025-08-31 06:34:44"]
["I_kwDOKIwiaM6-J0oR", 1681, "2025-06-01..2025-06-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 12 days, 1:31:42 | 14 days, 11:14:32 | 20 days, 1:59:19 |\n| Time to close | 91 days, 18:36:49 | 99 days, 6:30:04 | 143 days, 12:13:55 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 3 |\n| Number of most active mentors | 0 |\n| Total number of items created | 3 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [DOCS] L2OutputOracleProxy is not deployed and op-deployer can't be started without it | https://github.com/ethereum-optimism/docs/issues/1614 | [stailend](https://github.com/stailend) | 21 days, 11:40:31 | 21 days, 11:40:31 | None |\n| [DOCS] A suggestion about Bridging ERC-20 Tokens with Viem | https://github.com/ethereum-optimism/docs/issues/1508 | [opfocus](https://github.com/opfocus) | 5:40:04 | 99 days, 6:30:04 | None |\n| Feedback for \u201cDeposit flow\u201d | https://github.com/ethereum-optimism/docs/issues/1226 | [brucexu-eth](https://github.com/brucexu-eth) | 14 days, 11:14:32 | 154 days, 13:39:53 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-06-01..2025-06-30 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "opgitgovernance", "2025-07-01T00:20:58Z", "2025-07-28T14:39:51Z", "2025-07-28T14:39:51Z", "ethereum-optimism/docs", "2025-08-31 06:34:44"]
["I_kwDOKIwiaM6q-FSo", 1401, "[L2 Testnet Tutorial] Clarification Needed on L1 Contract Deployment Doc", "I'm currently working through the \"Deploy the L1 contracts\" section and came across some confusing points that I'd like to clarify.  \n\nFirstly, the documentation recommends using `op-deployer`, but it still mentions the script-based deployment method without explaining how they coexist or which one should be used. This is a bit confusing for someone trying to follow the process step-by-step.  \n\nSecondly, after installing `op-deployer`, I noticed that there's only an executable file and no `bin` folder or `op-deployer` directory as implied in the tutorial. The instructions mention commands like `cd op-deployer` and `./bin/op-deployer`, which don't seem to align with what's actually installed. Since I've already added `op-deployer` to my PATH, I don't think it should require navigating to a non-existent directory or using the `./bin/` prefix.  \n\nI'm new here. If I misunderstand anything, please let me know.\ud83d\ude0a", "CLOSED", 0, "Leoforever123", "2025-02-21T08:47:19Z", "2025-07-31T16:40:45Z", "2025-07-31T16:40:45Z", "ethereum-optimism/docs", "2025-08-31 06:34:44"]
["I_kwDOL-xLQ87CZ15j", 434, "[acceptance] Allow skips", "Currently op-acceptor forces skipped tests to count as failures.\nLet's make this configurable for use-cases where users would like to keep skips as skips.", "CLOSED", 0, "scharissis", "2025-07-25T00:00:43Z", "2025-07-28T00:08:27Z", "2025-07-28T00:08:27Z", "ethereum-optimism/infra", "2025-08-31 06:34:44"]
["I_kwDOL-xLQ86qR9qe", 184, "[nat] Parallel tests", "For performance, allow tests to be run in parallel.", "CLOSED", 0, "scharissis", "2025-02-17T05:48:51Z", "2025-07-28T21:20:41Z", "2025-07-28T21:20:41Z", "ethereum-optimism/infra", "2025-08-31 06:34:44"]
["I_kwDOLB-lzc7C6PR_", 741, "Port `SuperchainConfig` type from superchain-registry", "Add type to spec\nhttps://github.com/ethereum-optimism/superchain-registry/blob/a604bb1031f89f571cc0ae80e10b3523549871e0/ops/internal/config/superchain.go#L70-L77\n\nRef https://github.com/op-rs/kona/pull/2562", "OPEN", 0, "emhane", "2025-07-28T14:02:01Z", "2025-07-28T14:02:11Z", null, "ethereum-optimism/specs", "2025-08-31 06:34:47"]
["I_kwDOLB-lzc650yaE", 717, "Update `SafteyLevel`", "Specs use the term `Unsafe` whereas implementation uses `LocalUnsafe`, like so specs uses `Safe` where impl uses `CrossSafe`.\n\nhttps://github.com/ethereum-optimism/specs/blob/main/specs/interop/supervisor.md#safetylevel\nhttps://github.com/ethereum-optimism/optimism/blob/e6848b15f5dafb3159e993f7aa24844679a44e5b/op-supervisor/supervisor/types/types.go#L284-L305", "CLOSED", 0, "emhane", "2025-06-04T12:14:15Z", "2025-07-30T14:07:03Z", "2025-07-30T14:07:02Z", "ethereum-optimism/specs", "2025-08-31 06:34:47"]
["I_kwDOLB-lzc64zovD", 714, "RPC: `interop_ready`", "Ref https://github.com/ethereum-optimism/optimism/issues/15758", "CLOSED", 0, "emhane", "2025-05-29T14:34:02Z", "2025-07-30T09:02:03Z", "2025-07-30T09:02:03Z", "ethereum-optimism/specs", "2025-08-31 06:34:47"]
["I_kwDOL-xLQ87FlHpQ", 443, "[acceptance] Port TestInteropReadiness to Devstack", "Port the devnet sdk TestInteropReadiness to Devstack.", "CLOSED", 0, "serpixel", "2025-08-12T15:36:20Z", "2025-08-20T22:23:52Z", "2025-08-20T22:23:52Z", "ethereum-optimism/infra", "2025-08-31 08:02:44"]
["I_kwDOL-xLQ87FlG3z", 442, "[acceptance] Port TestBalanceSnapshot to Devstack", "Port the devnet sdk TestBalanceSnapshot to Devstack.", "CLOSED", 0, "serpixel", "2025-08-12T15:35:36Z", "2025-08-19T23:23:06Z", "2025-08-19T23:23:06Z", "ethereum-optimism/infra", "2025-08-31 08:02:44"]
["I_kwDOL-xLQ865xPnC", 396, "[netchef] Persistent devnet faucet wallet", "New persistent devnets should come with a funded wallet which op-acceptor can use as a faucet.\n\nWe need:\n* A wallet (per L2 chain in the network)\n* Funds in the wallet (4 Eth) [amount TBC] (per L2 chain in the network)\n* Updated devnet-env.json with the wallet entries [[example](https://github.com/ethereum-optimism/k8s/pull/6744)]\n\nReference:\n* How/Where op-acceptor uses this: [link](https://github.com/ethereum-optimism/infra/blob/main/op-acceptor/addons/faucet/faucet.go#L105-L106)", "CLOSED", 0, "scharissis", "2025-06-04T06:50:06Z", "2025-08-21T23:14:37Z", "2025-08-21T23:14:34Z", "ethereum-optimism/infra", "2025-08-31 08:02:44"]
["I_kwDOL-xLQ863qW-V", 375, "Incorporate test target setup / teardown as an op-acceptor concern", "Today many of our acceptance tests are unfortunately not compatible with all test target networks (e.g. sysgo, kurtosis, devnet), and will fail without indication that the failure was due to incompatibility (precondition failure) rather than a real problem with the test target (assertion failure). This is something we should fix, and by fixing should make it possible to run any op-acceptor gate against any network configuration procedure and still distinguish test precondition failures from test assertion failures. This is not the default behavior of op-acceptor, in order to enable this the `--allow-skips` flag must be passed.\n\nIn certain contexts however, we do not want to trust the test to check its preconditions. In these contexts if the test precondition were to fail erroneously and cause the rest of the test assertions to be skipped, this would be difficult to catch and the possibility of this would degrade the trustworthiness of acceptance test run.\n\nIf we accept that not all tests will be compatible with all test targets and that we prefer to disable skips in certain contexts, then we must have test target-specific gates in `acceptance-tests.yaml`, e.g. `interop-sysgo`, `interop-kurtosis`. To actually run the gates, also have various corresponding recipes in the `op-acceptance-tests/justfile` which do appropriate test target setup, op-acceptor invocation with corresponding gate configuration, and teardown. The result works, but is somewhat clunky. op-acceptor gate configuration is broken up across this `acceptance-tests.yaml` and the `justfile`.\n\nIt would be nice if test target setup/teardown was a first-class concern of op-acceptor, allowing the user to configure which test targets are supported for a given gate in the `acceptance-tests.yaml`, and allowing the user to invoke op-acceptor directly, rather than through an intermediate justfile recipe. This would also pave the way for running op-acceptor against different test targets within a single run, which is a necessary process for discovering/debugging compatibility between acceptance tests and network-setups.", "CLOSED", 0, "teddyknox", "2025-05-21T20:25:57Z", "2025-08-21T20:48:45Z", "2025-08-21T20:48:44Z", "ethereum-optimism/infra", "2025-08-31 08:02:44"]
["I_kwDOL-xLQ86qR_nj", 190, "[acceptance] implement initial Platforms tests", "Implement an initial set of simple Platforms tests, as determined here.", "OPEN", 0, "scharissis", "2025-02-17T05:54:05Z", "2025-09-12T01:50:26Z", null, "ethereum-optimism/infra", "2025-08-31 08:02:44"]
["I_kwDOKSJyfM7HcBip", 929, "Spike optimism.io react migration", "", "CLOSED", 0, "jvmi7", "2025-08-22T16:29:32Z", "2025-09-08T17:05:19Z", "2025-09-08T17:05:19Z", "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOKSJyfM7HcBD0", 928, "Add one-click-deploy banner + project card to docs homepage", "", "OPEN", 0, "jvmi7", "2025-08-22T16:28:35Z", "2025-08-22T16:28:37Z", null, "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOKSJyfM7HcAb3", 927, "Add heatmap metrics to localchain.optimism.io interface", "https://oplabs-pbc.slack.com/archives/C0972KX67QX/p1755586015147189?thread_ts=1755532744.197969&cid=C0972KX67QX", "OPEN", 0, "jvmi7", "2025-08-22T16:27:29Z", "2025-08-22T16:27:30Z", null, "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOKSJyfM7Hb_3R", 926, "Implement new navigation structure in docs site", "https://www.figma.com/design/KI7tPCi9211oDU4KgtYCFX/Docs?node-id=16342-4976&m=dev", "OPEN", 0, "jvmi7", "2025-08-22T16:26:20Z", "2025-08-22T16:26:21Z", null, "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOKSJyfM7Hb_kv", 925, "Implement Docs Homepage redesign", "https://www.figma.com/design/KI7tPCi9211oDU4KgtYCFX/Docs?node-id=16342-4890&m=dev", "CLOSED", 0, "jvmi7", "2025-08-22T16:25:45Z", "2025-09-08T17:05:37Z", "2025-09-08T17:05:37Z", "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOKSJyfM7HbxD_", 924, "Update font on console.optimism.io", "", "CLOSED", 0, "jvmi7", "2025-08-22T16:01:05Z", "2025-09-02T16:47:56Z", "2025-09-02T16:47:56Z", "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOKSJyfM7Hbwuq", 923, "Update font on docs.optimism.io", "Update font to new brand kit font", "CLOSED", 0, "jvmi7", "2025-08-22T16:00:33Z", "2025-09-02T16:47:57Z", "2025-09-02T16:47:57Z", "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOKSJyfM7BJAKL", 915, "Implement lend verb", "## Problem\n\nWe don't have a lend verb\n\n## Solution\n\n- [x] Wrap Morpho SDK (kevin's branch)\n- [ ] Hard coded single Morpho pool\n- [ ] POST /accounts/create\n- [ ] GET /accounts/{userId}\n- [ ] POST /lending/deposit\n- [ ] GET /lending/positions/{accountId}\n- [ ] POST /lending/withdraw\n- [ ] GET /lending/yield/{positionId}\n- [ ] hardcode [specific USDC market](https://app.morpho.org/unichain/vault/0x38f4f3B6533de0023b9DCd04b02F93d36ad1F9f9/gauntlet-usdc)\n\nendpoints return tx hashes", "CLOSED", 0, "its-everdred", "2025-07-17T17:28:30Z", "2025-08-18T16:58:09Z", "2025-08-18T16:58:09Z", "ethereum-optimism/ecosystem", "2025-08-31 08:02:45"]
["I_kwDOI7W0xc6sKBIi", 1429, "[Exploratory] Interop Enabled App Definiton", "## Proposed Definition\n\n1. A smart contract by any project that's interacting with (`tx_from` / `tr_from`) the  `L2ToL2CrossDomainMessenger`: `0x4200000000000000000000000000000000000023`, and any other smart contracts that builds on top of the smart contract aforementioned (e.g. DEX built on top of cross-chain liquidity layer that sends cross-chain messages to the `L2ToL2CrossDomainMessenger`)\n2. Any smart contract that [validates a cross chain message](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/L2/CrossL2Inbox.sol#L135) on the destination chain and emits an `ExecutingMessage` event. (Note that the `ExecutingMessage` itself doesn't emit the sender address but we can get it from `validateMessage` in traces\n\n\n\n\n\n", "OPEN", 0, "chuxinh", "2025-03-01T00:39:48Z", "2025-08-18T14:04:25Z", null, "ethereum-optimism/op-analytics", "2025-08-31 08:02:46"]
["I_kwDOKIwiaM7FDoeg", 1713, "[2024 Q4 Audit] [page-path]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\n<!-- Write a description of the current state of the page. -->\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisk\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>", "CLOSED", 0, "Saad4343", "2025-08-09T07:48:26Z", "2025-08-19T14:11:30Z", "2025-08-19T14:11:30Z", "ethereum-optimism/docs", "2025-08-31 08:02:48"]
["I_kwDOKIwiaM7DoGaE", 1708, "2025-07-01..2025-07-31 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 19:56:08 | 8:57:10 | 1 day, 17:06:28 |\n| Time to close | 1 day, 15:46:52 | 22:50:24 | 4 days, 22:44:51 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 7 |\n| Number of items closed | 14 |\n| Number of most active mentors | 0 |\n| Total number of items created | 21 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Update Fault Proofs Explainer | https://github.com/ethereum-optimism/docs/pull/1706 | [krofax](https://github.com/krofax) | None | None | None |\n| Update L2 rollup testnet tutorial | https://github.com/ethereum-optimism/docs/pull/1705 | [krofax](https://github.com/krofax) | None | None | None |\n| Quick nethermind fixes | https://github.com/ethereum-optimism/docs/pull/1704 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| docs: update faucet links and sort order in faucets.mdx | https://github.com/ethereum-optimism/docs/pull/1703 | [EnesKeremAYDIN](https://github.com/EnesKeremAYDIN) | None | None | None |\n| Refactor op-challenger documentation and update links | https://github.com/ethereum-optimism/docs/pull/1702 | [krofax](https://github.com/krofax) | None | None | None |\n| Content migration redirects | https://github.com/ethereum-optimism/docs/pull/1700 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| fix lock issues | https://github.com/ethereum-optimism/docs/pull/1699 | [krofax](https://github.com/krofax) | 0:03:05 | 0:03:43 | None |\n| feat: added timestamp of the upgrade, and update the list of affected chains | https://github.com/ethereum-optimism/docs/pull/1697 | [brokewhale](https://github.com/brokewhale) | None | None | None |\n| remove base from u16 | https://github.com/ethereum-optimism/docs/pull/1695 | [bradleycamacho](https://github.com/bradleycamacho) | None | 0:02:56 | None |\n| Fix images links | https://github.com/ethereum-optimism/docs/pull/1694 | [krofax](https://github.com/krofax) | 0:46:59 | 5 days, 3:20:11 | None |\n| Update explorer links | https://github.com/ethereum-optimism/docs/pull/1693 | [krofax](https://github.com/krofax) | 1 day, 6:09:54 | 2 days, 0:23:31 | None |\n| Update upgrade-op-contracts-1-3-1-8.mdx | https://github.com/ethereum-optimism/docs/pull/1692 | [Wazabie](https://github.com/Wazabie) | 1:19:51 | 1:21:49 | None |\n| Migrate docs to Mintlify | https://github.com/ethereum-optimism/docs/pull/1691 | [krofax](https://github.com/krofax) | None | None | None |\n| upgrade 16 change | https://github.com/ethereum-optimism/docs/pull/1690 | [krofax](https://github.com/krofax) | 0:14:11 | 0:17:25 | None |\n| feat: added u16 execution date | https://github.com/ethereum-optimism/docs/pull/1689 | [brokewhale](https://github.com/brokewhale) | 0:01:38 | None | None |\n| Update consensus-config.mdx | https://github.com/ethereum-optimism/docs/pull/1688 | [siljapetasch](https://github.com/siljapetasch) | 1 day, 0:27:37 | 5 days, 1:29:35 | None |\n| Update release-ready callout | https://github.com/ethereum-optimism/docs/pull/1687 | [bradleycamacho](https://github.com/bradleycamacho) | 16:34:30 | 16:34:37 | None |\n| Update consensus-config.mdx | https://github.com/ethereum-optimism/docs/pull/1686 | [siljapetasch](https://github.com/siljapetasch) | 1 day, 5:06:02 | 1 day, 5:06:10 | None |\n| Update rpc-providers.mdx - Add Grove | https://github.com/ethereum-optimism/docs/pull/1685 | [fredteumer](https://github.com/fredteumer) | 1 day, 18:19:25 | 1 day, 18:19:33 | None |\n| Update upgrade-16.mdx | https://github.com/ethereum-optimism/docs/pull/1684 | [maurelian](https://github.com/maurelian) | 0:08:19 | 0:20:38 | None |\n| Fix 404 Link | https://github.com/ethereum-optimism/docs/pull/1683 | [destinyae](https://github.com/destinyae) | 3 days, 22:02:11 | 3 days, 22:02:17 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-07-01..2025-07-31`", "CLOSED", 0, "opgitgovernance", "2025-08-01T00:21:19Z", "2025-08-19T14:11:09Z", "2025-08-19T14:11:09Z", "ethereum-optimism/docs", "2025-08-31 08:02:48"]
["I_kwDOKIwiaM7DoGPw", 1707, "2025-07-01..2025-07-31 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 3:43:10 | 3:43:10 | 6:22:52 |\n| Time to close | 56 days, 14:06:43 | 5 days, 10:10:16 | 129 days, 8:20:48 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 3 |\n| Number of most active mentors | 0 |\n| Total number of items created | 3 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1701 | [killers10](https://github.com/killers10) | None | 5 days, 10:10:16 | None |\n| Etherscan --> Blockscout migration | https://github.com/ethereum-optimism/docs/issues/1696 | [fainashalts](https://github.com/fainashalts) | 0:23:34 | 4 days, 0:16:26 | None |\n| [L2 Testnet Tutorial] Clarification Needed on L1 Contract Deployment Doc | https://github.com/ethereum-optimism/docs/issues/1401 | [Leoforever123](https://github.com/Leoforever123) | 7:02:47 | 160 days, 7:53:26 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-07-01..2025-07-31 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "opgitgovernance", "2025-08-01T00:20:48Z", "2025-08-19T14:11:18Z", "2025-08-19T14:11:18Z", "ethereum-optimism/docs", "2025-08-31 08:02:48"]
["I_kwDOKIwiaM694cYB", 1673, "[2024 Q4 Audit] [page-path]", "## Description of the updates required\n\nThe current content on the page is outdated and does not reflect recent developments in the Movement Network. We need to update information related to the MOVE token utility, DAO governance structure, staking features, and community fundraising initiatives (e.g. Ko-fi, NFTs, grants).\n\nExample page to update: [wiki.movement.xyz/kokyat](https://wiki.movement.xyz/kokyat)\n\n## Acceptance Criteria\n\n- Updated section for MOVE token staking with clear parameters and benefits\n- Visual diagram for DAO governance structure\n- Inclusion of current community funding models (Ko-fi, grants, NFT utility)\n- Bilingual content support (English + Burmese)\n\n## Resources\n\n- [Movement Wiki](https://wiki.movement.xyz/kokyat)\n- [Whitepaper](https://www.movementnetwork.xyz/whitepaper/movement-whitepaper_en.pdf)\n- [GitHub](https://github.com/movementlabsxyz)\n- [Notion Spec](https://www.notion.so/1ab2c82b8cb580ccb5bdcf7625f72c86)\n- SMEs: KoKyat, ThaeThae, HanGyi\n\n## Action items\n\n1. Review linked resources and meet with SMEs (KoKyat, etc.)\n2. Write the first draft of updated content\n3. Share draft with SMEs for feedback\n4. Conduct peer review (e.g. HanGyi or ThaeThae)\n5. Final SME approval\n6. Publish on wiki.movement.xyz\n\n## Github Issue Label Criteria\n\n<details>\n<summary>Priority</summary>\n\n- `p-high`: This is important for public-facing DAO and token communication.\n\n</details>\n\n<details>\n<summary>T-shirt size</summary>\n\n- `s-M`: Moderate work requiring cross-team collaboration and translation.\n\n</details>\n\n<details>\n<summary>Content evaluation</summary>\n\n- `a-moderate`: The page requires several updates and partial rewrites.\n\n</details>\n\n## MDX Metadata Format\n\n```mdx\n---\ntitle: \"Movement DAO Governance & Token Utility\"\ntags: [\"movement-network\", \"dao\", \"tokenomics\", \"funding\"]\ndescription: \"Learn how the Movement Network organizes DAO governance, token staking, and community fundraising via onchain tools.\"\n---\n\n<details>\n<summary>Component tags</summary>\n\n\nl1-contracts\nl2-contracts\nstandard-bridge\nop-gov-token\nop-program\nop-node\ndev-console\n\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\neng-growth\neng-devx\neng-protocol\n\n</details>\n```\n", "CLOSED", 0, "cshein45", "2025-06-29T03:00:56Z", "2025-09-11T19:24:50Z", "2025-09-11T19:24:50Z", "ethereum-optimism/docs", "2025-08-31 08:02:48"]
["I_kwDOJ_r-bs6033mt", 999, "add chain name to addresses.json when TOML files are eventually removed", "This is purely a UX consideration. When I'm debugging I was relying on the TOML files quite a bit. IT would be nice to tell, at a glance, what chainID the chain is for in the addresses.json file. \n\nSomething like this (being conscious about introducing a breaking change):\n\n```json\n  \"10\": {\n    \"AddressManager\": \"0xdE1FCfB0851916CA5101820A69b13a4E276bd81F\",\n    \"AnchorStateRegistryProxy\": \"0x1c68ECfbf9C8B1E6C0677965b3B9Ecf9A104305b\",\n    \"BatchSubmitter\": \"0x6887246668a3b87F54DeB3b94Ba47a6f63F32985\",\n    \"Challenger\": \"0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A\",\n    \"DelayedWETHProxy\": \"0x323dFC63c9B83CB83f40325AaB74b245937cbdF0\",\n    \"DisputeGameFactoryProxy\": \"0xe5965Ab5962eDc7477C8520243A95517CD252fA9\",\n    \"FaultDisputeGame\": \"0x5738a876359b48A65d35482C93B43e2c1147B32B\",\n    \"Guardian\": \"0x09f7150D8c019BeF34450d6920f6B3608ceFdAf2\",\n    \"L1CrossDomainMessengerProxy\": \"0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1\",\n    \"L1ERC721BridgeProxy\": \"0x5a7749f83b81B301cAb5f48EB8516B986DAef23D\",\n    \"L1StandardBridgeProxy\": \"0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1\",\n    \"MIPS\": \"0xF027F4A985560fb13324e943edf55ad6F1d15Dc1\",\n    \"OptimismMintableERC20FactoryProxy\": \"0x75505a97BD334E7BD3C476893285569C4136Fa0F\",\n    \"OptimismPortalProxy\": \"0xbEb5Fc579115071764c7423A4f12eDde41f106Ed\",\n    \"PermissionedDisputeGame\": \"0x1Ae178eBFEECd51709432EA5f37845Da0414EdFe\",\n    \"PreimageOracle\": \"0x1fb8cdFc6831fc866Ed9C51aF8817Da5c287aDD3\",\n    \"Proposer\": \"0x473300df21D047806A082244b417f96b32f13A33\",\n    \"ProxyAdmin\": \"0x543bA4AADBAb8f9025686Bd03993043599c6fB04\",\n    \"ProxyAdminOwner\": \"0x5a0Aae59D09fccBdDb6C6CcEB07B7279367C3d2A\",\n    \"SuperchainConfig\": \"0x95703e0982140D16f8ebA6d158FccEde42f04a4C\",\n    \"SystemConfigOwner\": \"0x847B5c174615B1B7fDF770882256e2D3E95b9D92\",\n    \"SystemConfigProxy\": \"0x229047fed2591dbec1eF1118d64F7aF3dB9EB290\",\n    \"UnsafeBlockSigner\": \"0xAAAA45d9549EDA09E70937013520214382Ffc4A2\",\n    \"chainInfo\": {\n       \"name\": \"OP Mainnet\"\n    }\n  }\n```", "OPEN", 0, "blmalone", "2025-05-01T19:28:02Z", "2025-08-19T17:12:58Z", null, "ethereum-optimism/superchain-registry", "2025-08-31 08:02:59"]
["I_kwDOJ_r-bs6ynLyK", 979, "[ci] create new daily codegen job", "We should run a daily codegen job (on weekdays only?) to ensure external services reading from the codegen files can reliably get data that is no more than 24 hours old. If services want/need actual real-time data, they should read directly from onchain or use a service like op-fetcher to do so (which is what codegen uses).\n\nImplementation:\n* command to run and check for git diffs: `just codegen $SEPOLIA_RPC_URL,$MAINNET_RPC_URL` (those urls are already accessible in circle ci config file, e.g. [here](https://github.com/ethereum-optimism/superchain-registry/blob/main/.circleci/config.yml#L60-L61))\n* need the ci job to be wired such that `OptimismBot` can author the pr and open it against the repo\n* a notification (slack/discord) should be sent to the platforms teams (perhaps tag the secondary on-call engineer) so that they can merge the pr", "OPEN", 0, "bitwiseguy", "2025-04-15T14:20:52Z", "2025-08-19T14:53:27Z", null, "ethereum-optimism/superchain-registry", "2025-08-31 08:02:59"]
["I_kwDOJ_r-bs6eo8EE", 686, "validation: add chain config negative testing", "Much or our validation code is untested, which means we are very prone to bugs like this #685.\n\nWe should be using local dummy data to ensure validation checks catch chains with non-standard or missing data. We should refactor tests as necessary to enable them to be tested in this way. ", "CLOSED", 0, "geoknee", "2024-11-15T10:25:25Z", "2025-10-03T15:02:15Z", "2025-10-03T15:01:52Z", "ethereum-optimism/superchain-registry", "2025-08-31 08:02:59"]
["I_kwDOMMiGhs6zrmGC", 389, "OP Chain A and B rpc response for eth rpc queries is missing content type", "9545: op chain a\n8547: op chain L1\n\n```\n\u276f curl 'http://127.0.0.1:9545/' --verbose \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"jsonrpc\":\"2.0\",\"id\":819,\"method\":\"eth_getTransactionByHash\",\"params\":[\"0x303b2645c26214f8d68506e3cd9cbb6951a0a0a2218c5635215d2ea2d1df0573\"]}'\n*   Trying 127.0.0.1:9545...\n* Connected to 127.0.0.1 (127.0.0.1) port 9545\n* using HTTP/1.x\n> POST / HTTP/1.1\n> Host: 127.0.0.1:9545\n> User-Agent: curl/8.11.1\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 142\n>\n* upload completely sent off: 142 bytes\n< HTTP/1.1 200 OK\n< Access-Control-Allow-Headers: Content-Type, Authorization\n< Access-Control-Allow-Methods: GET, POST, OPTIONS\n< Access-Control-Allow-Origin: *\n< Content-Length: 40\n< Date: Wed, 23 Apr 2025 16:08:56 GMT\n<\n* Connection #0 to host 127.0.0.1 left intact\n{\"jsonrpc\":\"2.0\",\"id\":819,\"result\":null}%\n\u276f curl 'http://127.0.0.1:8547/' --verbose \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"jsonrpc\":\"2.0\",\"id\":819,\"method\":\"eth_getTransactionByHash\",\"params\":[\"0x303b2645c26214f8d68506e3cd9cbb6951a0a0a2218c5635215d2ea2d1df0573\"]}'\n*   Trying 127.0.0.1:8547...\n* Connected to 127.0.0.1 (127.0.0.1) port 8547\n* using HTTP/1.x\n> POST / HTTP/1.1\n> Host: 127.0.0.1:8547\n> User-Agent: curl/8.11.1\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 142\n>\n* upload completely sent off: 142 bytes\n< HTTP/1.1 200 OK\n< content-type: application/json\n< vary: origin, access-control-request-method, access-control-request-headers\n< access-control-allow-origin: *\n< content-length: 40\n< date: Wed, 23 Apr 2025 16:09:03 GMT\n<\n* Connection #0 to host 127.0.0.1 left intact\n{\"jsonrpc\":\"2.0\",\"id\":819,\"result\":null}\n```", "OPEN", 0, "OscBacon", "2025-04-23T16:10:41Z", "2025-08-23T17:40:02Z", null, "ethereum-optimism/supersim", "2025-08-31 08:03:11"]
["I_kwDOKIsnqM7GCsYs", 1162, "Migrate FP recovery tasks", "Migrate blacklist games task to new template framework and remove old FP recovery tasks.", "CLOSED", 0, "pauldowman", "2025-08-14T15:14:13Z", "2025-08-18T22:29:59Z", "2025-08-18T22:29:59Z", "ethereum-optimism/superchain-ops", "2025-08-31 08:03:25"]
["I_kwDODjvEJM7HVATc", 17180, "op-acceptance-tests: Tame `TestWrapETH` flakiness", "", "OPEN", 0, "pcw109550", "2025-08-22T05:13:23Z", "2025-08-22T05:13:33Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7HRuAm", 17178, "Remove Go 1.24 Feature flags", "## Description\n\nAfter Cannon version 8 ships to production, we should drop [related feature flags](https://github.com/ethereum-optimism/optimism/blob/develop/cannon/mipsevm/iface.go#L77). \n\nDepends on: https://github.com/ethereum-optimism/optimism/issues/17177", "OPEN", 0, "mbaxter", "2025-08-21T21:55:32Z", "2025-08-21T21:55:32Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7HRp9s", 17177, "Drop Cannon version 7 support", "## Description\n\nOnce Cannon [version 8](https://github.com/ethereum-optimism/optimism/blob/4b80e71632da569280d857a3ee8e0f52d806b4a6/cannon/mipsevm/versions/version.go#L29) is gov-approved and shipped to production, drop [version 7](https://github.com/ethereum-optimism/optimism/blob/4b80e71632da569280d857a3ee8e0f52d806b4a6/cannon/mipsevm/versions/version.go#L27) - and use 8 as the default throughout the codebase.", "OPEN", 0, "mbaxter", "2025-08-21T21:49:35Z", "2025-08-21T21:49:35Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7HRO1H", 17175, "op-e2e: Improve parallelism in op-e2e FP tests", "The op-e2e fault proof tests that utilize cannon use at most 8 executors to avoid OOM when running on the latitude box. This is a heavy handed approach that leaves alot of parallelism that may still be available on that box.\nLet's use a better method for limiting memory usage in op-e2e tests.", "OPEN", 0, "Inphi", "2025-08-21T21:03:01Z", "2025-08-21T21:03:17Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7HQFDm", 17173, "[op-deployer] generate gnosis safe wrapped calldata", "# Overview\n\n`op-deployer upgrade` creates calldata for the opcm.upgrade tx, but there is an additional step needed before that calldata can be sent.\n\nGnosis safe users (most of our users) need to wrap that calldata within a gnosis safe tx, e.g:\n```\ncast calldata \"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\" \"<opcm-address>\" \"0\" \"<calldata-from-op-deployer-upgrade>\" \"1\" \"0\" \"0\" \"0\" \"0x0000000000000000000000000000000000000000\" \"0x0000000000000000000000000000000000000000\" \"<sig>\"\n```\n\n# Questions\n1. How do we produce the <sig> arg  if the safe has a signature threshold of 1?\n2. How do we produce the <sig> arg if the safe has a signature threshold > 1?\n3. Should we try to actually produce the gnosis safe calldata, or just provide clear instructions for the user based on if they fall in [1] or [2] above?\n4. How should we support users who don't use gnosis safe (e.g. mcp)? Should we provide instructions for their flow or just make it clear they shouldn't use the gnosis safe instructions?\n5. Should we help provide a tenderly simulation link?", "OPEN", 0, "bitwiseguy", "2025-08-21T19:07:21Z", "2025-08-21T19:10:06Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7HKq1J", 17171, "op-batcher: Adapt documentation to new throttling config and defaults", "The page at https://github.com/ethereum-optimism/optimism/tree/develop/op-batcher#data-availability-backlog still mentions old env vars. The main throttling documentation at https://github.com/ethereum-optimism/optimism/blob/develop/op-batcher/throttling.md should also be checked for update needs.", "OPEN", 0, "sebastianst", "2025-08-21T11:58:22Z", "2025-08-21T11:58:22Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7G8vab", 17162, "[FMA Action] Close out Flashblocks spec", "Flashbots have an [existing PR](https://github.com/ethereum-optimism/specs/pull/703) open for the Flashblocks spec. It's nearly complete, creating this issue to track supporting them to close it out.\n\nThis was originally identified as an action item in the Flashblocks FMA [here](https://www.notion.so/flashbots/Flashblock-FMA-1f96b4a0d87680efac13d15aaa1dc464?source=copy_link#2076b4a0d8768042a452fd9e47a2882c).", "CLOSED", 0, "alfonso-op", "2025-08-20T11:48:48Z", "2025-09-11T05:51:09Z", "2025-09-11T05:51:09Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7G1eBS", 17156, "op-program: Revise verify-reproducibility", "The reproducible prestate verification job was modified to work around issues with the mise cache (see [PR #17124](https://github.com/ethereum-optimism/optimism/pull/17124) for details). However, this workaround is fragile and prone to breakage when either mise or the prestate build process changes. For instance, introducing an additional host dependency causes the build to fail.\n\nWe should investigate the root cause of the mise caching issue and implement a more robust, long-term solution to ensure the reproducible prestate verification job remains stable across environment changes.", "OPEN", 0, "Inphi", "2025-08-19T22:42:33Z", "2025-08-19T22:42:33Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GzVRh", 17153, "release and deploy op-conductor with el p2p healthchecks", "op-conductor was implemented el p2p healthcheck [here](https://github.com/ethereum-optimism/optimism/pull/16894).\n\nThis should be released and deployed as a part of op-conductors on op-sepolia.", "CLOSED", 0, "yashvardhan-kukreja", "2025-08-19T18:47:06Z", "2025-09-11T08:08:26Z", "2025-09-11T08:08:25Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GyIKl", 17149, "op-batcher: Improve throttling intensity metric", "The intensity metric is always set for all controllers, to the actual value for the active one and to 0 for the inactive ones. It would be nice to only set the value for the active one so it's immediately visible in Grafana which one is active. A case to handle is that the controller type is changed for a running batcher instance, because unfortunately Prometheus metrics don't allow _unsetting_ a value. We could then just set the last controller's value to 0 so that the new one appears. It's not perfect as the old controller type would then continue to have a 0 value metric.", "CLOSED", 0, "sebastianst", "2025-08-19T16:45:54Z", "2025-09-08T13:53:51Z", "2025-09-08T13:53:51Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GxU5j", 17147, "devtools: Initial ideation and proposal", "**Description**\n\nExplore the current strengths and weaknesses of our toolkit and define:\n\n- The approach to standardization, in particular, standardization of a \"chain descriptor\" - a data structure that completely describes an OP stack chain\n- Use netchef config as inspiration, try to align with it where / if possible\n- The approach to toolkit architecture\n- The rollout roadmap\n- Ratify proposal with Platforms + representative Protocol and Rust team engineers + one rep from contracts development", "OPEN", 0, "janjakubnanista", "2025-08-19T15:32:22Z", "2025-08-22T16:47:07Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GxSjQ", 17146, "devtools: Standardize development tooling", "**Description**\n\nCurrently, the development & deployment tooling lacks standardization and is fragmented by several factors. This makes the learning and usage curve very steep, creates large gaps between the individual tools, and creates a complicated narrative when it comes to developer journey from experimentation to production.\n\nThis issue tracks the progress of exploring, defining, and actioning upon developer tooling standards.\n\n", "OPEN", 0, "janjakubnanista", "2025-08-19T15:29:02Z", "2025-08-22T16:47:12Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GxNpq", 17145, "op-deployer: Add verification guides to OP docs", "**Description**\n\n`op-deployer`'s verification has a limited block explorer & contract support. Instead of broadening the coverage in `op-deployer`, include the following verification scripts in the OP docs:\n\n- [New chain](https://github.com/celo-org/optimism/blob/mc01/verify-new-testnet-deploy/packages/contracts-bedrock/scripts/deploy/verify-new-chain.sh)\n- [Upgrade](https://github.com/celo-org/optimism/blob/mc01/celo-contracts/v3.0.0--1/packages/contracts-bedrock/scripts/deploy/verify-impls.sh)\n- [Validator](https://github.com/celo-org/optimism/blob/mc01/celo-contracts/v3.0.0--1/packages/contracts-bedrock/scripts/deploy/verify-validator.sh)\n\nThese have been adjusted specifically for the Celo chain, but can easily be modified and included in the docs", "OPEN", 0, "janjakubnanista", "2025-08-19T15:22:51Z", "2025-08-19T15:22:51Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7Gwh0j", 17144, "infra threat modelling related to flashblocks delivery", "Currently our flashblocks delivery and deployments are a bit manual and require human intervention to release images that too from external repositories.\n\nA thread modelling activity needs to be done to identify all the painpoints across this toil-y process and make improvements to tackle any attack vectors around it.", "CLOSED", 0, "yashvardhan-kukreja", "2025-08-19T14:27:54Z", "2025-09-10T09:07:30Z", "2025-09-10T09:07:30Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GweAB", 17143, "alert when a non-flashblocks enabled sequencer is unhealthy", "non-flashblocks enabled sequencers are supposed to be backup sequencers for catastrophic situations related to Flashblocks.\n\nTherefore, we should have our non-flashblocks-enabled sequencer to be healthy all the time or alert us otherwise.\n\nA/C:\n- An alert which rings as soon as a non-flashblocks enabled sequencers becomes unhealthy even if it's not the leader.", "CLOSED", 0, "yashvardhan-kukreja", "2025-08-19T14:23:25Z", "2025-09-11T08:07:51Z", "2025-09-11T08:07:50Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GwbQK", 17142, "on-call onboarding and revision for flashblocks", "Considering the operational knowledge needed to smoothly function any flashblocks-oriented incidents or situations, it would be strongly preferable to have an on-call onboarding session or revision, to cover the knowledge, runbooks and references related to flashblocks operations.", "CLOSED", 0, "yashvardhan-kukreja", "2025-08-19T14:20:14Z", "2025-09-30T14:12:29Z", "2025-09-30T07:45:40Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7Gjbv-", 17115, "Tracker: Resolve dependency cycles in op-node components.", "Description here:\n\nhttps://github.com/ethereum-optimism/optimism/pull/17101/files#r2282745163\n\nThis ticket number will be referenced in TODO comments tracking locations of potential DI dependency cycles in op-node for refactor.", "OPEN", 0, "teddyknox", "2025-08-18T15:28:26Z", "2025-08-18T15:28:26Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GeNut", 17108, "op-deployer: version numbering appears non-sequential/confusing", "I'm noticing that releases for op-deployer seem out-of-order\u2014for example, v0.4.2 is followed by v0.2.5 on the releases page. This ordering is counterintuitive and makes it unclear which release should be used.\n\n<img width=\"989\" height=\"1607\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b4a70ab6-1c2f-40f1-8c07-ddd1f2167208\" />", "OPEN", 0, "leovct", "2025-08-18T08:55:02Z", "2025-08-18T08:55:02Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GM25X", 17083, "op-acceptance-tests: Revise safedb EL sync tests", "When we \n```sh\n\u279c  safeheaddb_elsync git:(develop) cd optimism/op-acceptance-tests/tests/safeheaddb_elsync\n\u279c  safeheaddb_elsync git:(develop) grep \"func Test\" safeheaddb_test.go \nfunc TestTruncateDatabaseOnELResync(gt *testing.T) {\nfunc TestNotTruncateDatabaseOnRestartWithExistingDatabase(gt *testing.T) {\n\u279c  safeheaddb_elsync git:(develop) ls\ninit_test.go       safeheaddb_test.go\n\u279c  safeheaddb_elsync git:(develop) go test ./... -count 1\n```\nIt attempts to spawn a sysgo shared state, and runs all tests inside the directory, `TestTruncateDatabaseOnELResync`, `TestNotTruncateDatabaseOnRestartWithExistingDatabase`\n\nEvery test passes when we make the test share the state.\n\nHowever, if we target single test to run:\n```sh\n\u279c  safeheaddb_elsync git:(develop)cd optimism/op-acceptance-tests/tests/safeheaddb_elsync\n\u279c  safeheaddb_elsync git:(develop)go test ./... -run ^TestNotTruncateDatabaseOnRestartWithExistingDatabase$  -count=1\n```\nIt fails. Example logs:\n```\n    assertions.go:369:                  Error Trace:    /Users/changwan/Documents/optimism/op-devstack/dsl/safedb.go:25\n    assertions.go:369:                                                          /Users/changwan/Documents/optimism/op-devstack/dsl/l2_cl.go:335\n    assertions.go:369:                                                          /Users/changwan/Documents/optimism/op-acceptance-tests/tests/safeheaddb_elsync/safeheaddb_test.go:64\n    assertions.go:369:                  Error:          \"4\" is not less than or equal to \"0\"\n    assertions.go:369:                  Test:           TestNotTruncateDatabaseOnRestartWithExistingDatabase\n    assertions.go:369:                  Messages:       safe head db did not go back far enough\n    assertions.go:369:   \n```\nNot flaky but consistent failure.\n\nNeed to revise this tests to pass even we run individually.", "CLOSED", 0, "pcw109550", "2025-08-15T13:12:28Z", "2025-08-19T04:25:17Z", "2025-08-19T04:25:17Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7GLyto", 17082, "op-devstack: potential issue with default host", "A Base user reports getting consistent errors with sysgo tests:\n> I get errors like \"systest.go:185: precondition not met: no acquirer was able to create a system\" and \"Post \"http://[::]:51888/faucet/dev-faucet-901/\": write tcp [::1]:51897->[::1]:51888: write: broken pipe\"\n\nThread for context: [here](https://discord.com/channels/1244729134312198194/1405710555125387405).\n\nTheir local fix:\n```\ndiff --git a/op-devstack/sysgo/faucet.go b/op-devstack/sysgo/faucet.go\nindex c9b630c4d0..2560c04ae4 100644\n--- a/op-devstack/sysgo/faucet.go\n+++ b/op-devstack/sysgo/faucet.go\n@@ -94,7 +94,9 @@ func WithFaucets(l1ELs []stack.L1ELNodeID, l2ELs []stack.L2ELNodeID) stack.Optio\n                        }\n                }\n                cfg := &config.Config{\n-                       RPC: oprpc.CLIConfig{},\n+                       RPC: oprpc.CLIConfig{\n+                               ListenAddr: \"127.0.0.1\",\n+                       },\n                        Faucets: &fconf.Config{\n                                Faucets: faucets,\n                        },\n```", "CLOSED", 0, "scharissis", "2025-08-15T10:42:02Z", "2025-08-18T17:46:31Z", "2025-08-18T17:46:31Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7FT8vp", 17003, "op-up: publish initial release", "Publish an initial v0.1.0 release. Requires debugging some circleci issues with mise. See [this](https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/97329/workflows/81bf7f85-245b-43f8-8886-8886bdd22b98/jobs/3751302) failing job for reference.", "CLOSED", 0, "joshklop", "2025-08-11T14:32:03Z", "2025-08-19T04:12:58Z", "2025-08-19T04:12:58Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7FSb5h", 17001, "Remove two events from event system", "", "CLOSED", 0, "mslipper", "2025-08-11T13:01:15Z", "2025-08-21T08:50:13Z", "2025-08-21T08:50:13Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7CmF8B", 16827, "Create a U16-compatible superchain-ops template to invalidate all existing dispute games by updating the retirement timestamp", "The fault proofs recovery runbook includes a step that invalidates all existing dispute games using [UpdateRetirementTimestampTemplate](https://github.com/ethereum-optimism/superchain-ops/blob/main/src/improvements/template/UpdateRetirementTimestampTemplate.sol), but it's not correct for U16. We need a U16-compatible version.\n", "CLOSED", 0, "pauldowman", "2025-07-26T00:43:13Z", "2025-08-22T20:33:38Z", "2025-08-22T20:33:38Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7CXnXe", 16811, "flashblocks-ws exposure and sharing for RPC providers", "The RPC providers need an accessible flashblocks-websocket-url to power their flashblocks-rpc nodes.\n\nExpose the flashblocks-websocket-proxy for them to be able to access it.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-24T19:19:10Z", "2025-08-19T22:16:32Z", "2025-08-19T22:16:32Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7Apal9", 16700, "op-sync-tester: Support eth namespace", "RPC methods to serve:\n\n- `eth_getBlockReceipts`: serve if `block num < test_head`\n- `eth_getBlockByHash`: serve if `block num < test_head`\n- `eth_getBlockByNumber`: serve if `block num < test_head`\n\nNote that these eth namespaces are not used in CL syncing.\n\n- [ ] ~add a test that exercises the eth_ namespace and the op-sync-tester session~ The testing is done at the unit test level.\n", "CLOSED", 0, "pcw109550", "2025-07-15T12:33:04Z", "2025-08-20T09:39:51Z", "2025-08-20T09:29:53Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM7Ac5Xu", 16688, "enable flashblocks on sunnyside sequencers", "Sunnyside sequencers not being on OP Labs pose a different networking challenge to enable flashblocks.\nYet being active voters in op-sepolia's conductor set, they should also have flashblocks-enabled.\n\nA/C:\n- All of sunnyside's active sequencers serve flashblocks\n- Those flashblocks are websocket-accessible from their op-conductors' websocket URL to which the flashblocks-websocket-proxy, deployed in OP Labs infra, can listen and read to.", "CLOSED", 0, "yashvardhan-kukreja", "2025-07-14T13:33:38Z", "2025-08-19T13:33:24Z", "2025-08-19T13:33:23Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM6405yB", 16168, "Ensure op-challenger and op-proposer acceptance tests work with sysext", "https://github.com/ethereum-optimism/optimism/issues/15948 and https://github.com/ethereum-optimism/optimism/issues/15950 can be implememented with sysgo, but they do need to work with Kurtosis (using sysext). \n\nSince the sysext support isn't ready (waiting for https://github.com/ethereum-optimism/optimism/issues/15947 and https://github.com/ethereum-optimism/optimism/issues/15949) this issue is to ensure that the tests do work with sysext once it's ready. ", "CLOSED", 0, "pauldowman", "2025-05-29T16:37:29Z", "2025-08-21T20:56:58Z", "2025-08-21T20:56:58Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM62y6_l", 15965, "Create op-program prestate for interop upgrade", "Create an op-program release to use as prestate for interop upgrade.  Will be needed for testnet and mainnet releases.", "OPEN", 0, "ajsutton", "2025-05-15T16:26:56Z", "2025-08-20T20:34:08Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM62qAGf", 15948, "op-challenger acceptance tests on interop", "Add acceptance tests asserting op-challenger functionality for interop chains.\nSpecifically, it covers:\n1. op-challenger successfully disputing an invalid proposal up to split depth.\n2. If possible, coverage of op-challenger game resolution.\n\nGame resolution may not be feasible in a kurtosis devnet given how long it takes for games to resolve. But it should be possible to run the acceptance-test on a live network such that it eventually asserts that the game is resolved correctly.\n\nThis acceptance test must target [pre-interop migrated chains](https://github.com/ethereum-optimism/optimism/issues/15947) and [interop chains](https://github.com/ethereum-optimism/optimism/issues/15949).\n\nThe scope of this issue is to have it working with sysgo. https://github.com/ethereum-optimism/optimism/issues/16168 is for ensuring that it also works with sysext/Kurtosis when support for that is ready.", "CLOSED", 0, "Inphi", "2025-05-14T23:14:02Z", "2025-08-21T21:34:05Z", "2025-08-21T21:34:05Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM62p-p3", 15946, "proofs: Interop Acceptance Testing", "Provide acceptance tests on the proofs system for pre-interop and post-interop chains.\nWe will need to first set this up a variety of chain setups on kurtosis so we can validate the acceptance tests locally.", "CLOSED", 0, "Inphi", "2025-05-14T23:09:58Z", "2025-08-21T21:35:21Z", "2025-08-21T21:35:20Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM6xau5F", 15265, "op-test-sequencer: add to devnet env and kurtosis", "Depends on #15263  and #15264 \n \n- [ ] Add op-test-sequencer to devnet env inventory typing in devnet-sdk\n- [x] Add op-test-sequencer to kurtosis as optional service. Like the supervisor, do not group it inside of an L2 chain, but make it flexible as global service, and allow multiple instances.\n- [ ] Add op-test-sequencer to `devstack/sysext` package, by detecting it in the env, and adding it to the hydrated system frontend, like the other services are.\n\n", "CLOSED", 0, "protolambda", "2025-04-07T11:40:48Z", "2025-09-22T18:25:26Z", "2025-09-22T18:25:26Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM6xCETm", 15218, "op-program: Useless version check in parseAgreedState", "_Spearbit audit finding_:\n\n**Description**\nThe `parseAgreedState` function executes the following check.\n\n```\nfunc parseAgreedState(bootInfo *boot.BootInfoInterop, l2PreimageOracle l2.Oracle) (*types.TransitionState, *eth.SuperV1, error) {\n\t// ...\n\tif transitionState.Version() != types.IntermediateTransitionVersion {\n\t\treturn nil, nil, fmt.Errorf(\"%w: %v\", ErrIncorrectOutputRootType, transitionState.Version())\n\t}\nHowever, TransitionState.Version() function always return the IntermediateTransitionVersion constant. This makes the version check useless.\n\nfunc (i *TransitionState) Version() byte {\n\treturn IntermediateTransitionVersion\n}\n```\n\n**Recommendation**\nThe useless check can be removed.", "CLOSED", 0, "BlocksOnAChain", "2025-04-03T16:19:31Z", "2025-08-21T20:59:12Z", "2025-08-21T20:59:11Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM6wzpwb", 15166, "Interop tx fuzzing", "## Introduction\n\nFuzzing the kt-devnet, as well as other networks like interop alpha network will make op-supervisor, L2 CL, L2 EL to cover more code paths and discover bugs, as well as measuring the response time of supervisor RPCs in a more production-like env. Similar approach is done for L1 like [tx_fuzzer](https://github.com/MariusVanDerWijden/tx-fuzz), and containerized as [ethpandaops/tx-fuzz](https://hub.docker.com/r/ethpandaops/tx-fuzz) and added to [ethpandaops/ethereum-package](https://github.com/ethpandaops/ethereum-package/).\n\nWe need some kind of fuzzing tool like [tx_fuzzer](https://github.com/ethpandaops/optimism-package/issues/186) which generates cross chain messages(initating messages + validating messages) to enable this for interop.\n\n## Current Status for interop tx fuzzing\n\n[ethpandaops/optimism-package](https://github.com/ethpandaops/optimism-package/) has an [open issue](https://github.com/ethpandaops/optimism-package/issues/186) that enables tx fuzzing targeting to single L2 network. [PR](https://github.com/ethpandaops/optimism-package/pull/192) by @emhane is open for this. Note that the fuzzer is directly fetched from [tx_fuzzer](https://github.com/MariusVanDerWijden/tx-fuzz), and it is not aware of interop messaging.\n\n## Follow-up tasks\n\nHere is the brief outline to enable interop fuzzing:\n\n1. Fork [tx_fuzzer](https://github.com/MariusVanDerWijden/tx-fuzz) and implement functionality to initiate and validate interop messaging\n    - Nontrivial because now the tx_fuzzer must be aware of two separate L2 chains\n        - https://github.com/ethereum-optimism/optimism/pull/15049 can be referred for the implementation.\n    - Other idea is that let tx_fuzzer pour in only initating messages, and run the autorelayer to execute all the corresponding messages.\n    - There were attempts to fork tx_fuzzer by @scharissis at [here](https://github.com/scharissis/tx-fuzz), and integrated to the earlier version of NAT testing at [here](https://github.com/ethereum-optimism/optimism/blob/nat/op-nat/validators/tests/tx-fuzz.go#L34-L41). Note that the forked version of tx-fuzz was not containerized but directly imported to the NAT tests.\n2. Containerize interop-aware tx_fuzzer and make them importable for optimism-package. \n3. Reuse the interop-aware tx_fuzzer code for NAT testing.\n\n\n\n\n\n\n", "CLOSED", 0, "pcw109550", "2025-04-02T13:02:53Z", "2025-08-19T15:16:34Z", "2025-08-19T15:16:34Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM6ts6zp", 14813, "contract verification improvements", "List of identified areas for improvement:\n\n- [ ] Add support to verify contracts on blockscout. The command should use a common interface that both client types (etherscan, blockscout) adhere to.\n- [ ] Extend the existing command to verify the OpChain contract bundle: currently only Superchain and Implementations bundles are verified", "OPEN", 0, "bitwiseguy", "2025-03-12T14:47:23Z", "2025-09-29T14:25:26Z", null, "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDODjvEJM6Tues5", 11550, "ENG Ideas: Cannon Optimisations ", "**Describe the solution you'd like**\r\nOptimise cannon performance. There\u2019s a range of things that might fit into this category but the key ones are:\r\n\r\n- Introduce a more space efficient format for state snapshots\r\n    - Avoid using excessive system memory when serializing snapshots of client programs that use large amounts of memory (likely by being able to stream the snapshot rather than encoding entirely in memory before writing).\r\n- Optimise memory merkleization\r\n\r\n**Describe alternatives you've considered**\r\nThere are probably things we can do, but we can discussed it further if people are interested.", "CLOSED", 0, "BlocksOnAChain", "2024-08-20T12:48:42Z", "2025-08-18T15:41:08Z", "2025-08-18T15:41:08Z", "ethereum-optimism/optimism", "2025-08-31 08:03:31"]
["I_kwDOKSJyfM7JR-2p", 945, "Spike out status.optimism.io", "", "OPEN", 0, "jvmi7", "2025-09-02T17:33:14Z", "2025-09-13T02:49:24Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JR1bh", 944, "Add motion and animation patterns", "Introduce Framer Motion basics for shared animation patterns.", "OPEN", 0, "jvmi7", "2025-09-02T17:20:53Z", "2025-09-02T17:21:16Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JR1Qq", 943, "Implement core site elements", "Add navigation, footer, hero, and card grid components to the site", "OPEN", 0, "jvmi7", "2025-09-02T17:20:36Z", "2025-09-02T17:21:13Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JR0-7", 942, "Create shared UI package", "Build a reusable UI package with buttons, typography, and layout primitives.", "OPEN", 0, "jvmi7", "2025-09-02T17:20:17Z", "2025-09-02T17:21:04Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JRmOl", 941, "Configure Storybook with Tailwind support", "", "OPEN", 0, "jvmi7", "2025-09-02T17:00:43Z", "2025-09-02T17:01:43Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JRmM5", 940, "Initialize Sanity studio with starter schemas", "", "OPEN", 0, "jvmi7", "2025-09-02T17:00:40Z", "2025-09-02T17:01:54Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JRmJj", 939, "Bootstrap Next.js app with Netlify CI/CD", "", "OPEN", 0, "jvmi7", "2025-09-02T17:00:36Z", "2025-09-02T17:01:41Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JRmFj", 938, "Monorepo setup with shared configs", "", "OPEN", 0, "jvmi7", "2025-09-02T17:00:29Z", "2025-09-02T17:01:21Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7JRl-_", 937, "[Tracking] Optimism marketing site react migration", "# React Migration Project  \n\n[View scoping doc here](https://www.notion.so/Eng-spec-React-migration-25b5831e34528074a668e2a54901d54f)  \n\n## Overview  \nWe are migrating the marketing site to a modern stack using **Next.js 15 + TypeScript**, **Sanity CMS**, and a shared **UI package**. This migration will improve SEO, enable dynamic content management, and provide a scalable foundation for future development.  \n\nThe work will be structured into weekly milestones, with the goal of launching in ~5 weeks while maintaining feature parity with the existing Framer site.  \n\n## Proposed Tech Stack  \n- **Next.js 15** + TypeScript + React for site framework  \n- **Sanity CMS** for content management  \n- **Storybook** for component documentation  \n- **TailwindCSS** + **Framer Motion** for UI and animations  \n- **Mixpanel** for analytics and tracking  \n- **Netlify** for deployment  \n\n\n## Milestones  \n- [ ] Week 1: Foundation  \n- [ ] Week 2: Components  \n- [ ] Week 3: Pages  \n- [ ] Week 4: CMS + Analytics  \n- [ ] Week 5: Launch  \n\n## Migration Plan  \nDevelopment will proceed in parallel while the current Framer site remains live.  \nA **content freeze ~3 days before launch** will ensure full parity before cutover.  \n\n## Launch Checklist  \n- [ ] Configure SEO + redirects  \n- [ ] Optimize performance (images, Lighthouse scores)  \n- [ ] Final content migration and freeze  \n- [ ] QA across browsers and devices  \n- [ ] DNS switch + launch  \n", "OPEN", 0, "jvmi7", "2025-09-02T17:00:20Z", "2025-09-02T17:25:42Z", null, "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKSJyfM7FlNHn", 922, "Update font on app.optimism.io", "Update the typeface using the brand font (Riforma) on https://app.optimism.io/bridge/deposit\n", "CLOSED", 0, "jvmi7", "2025-08-12T15:42:02Z", "2025-09-02T16:47:57Z", "2025-09-02T16:47:57Z", "ethereum-optimism/ecosystem", "2025-09-04 02:24:55"]
["I_kwDOKIwiaM7I6q7K", 1731, "2025-08-01..2025-08-31 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 1 day, 17:05:48 | 10:35:28 | 3 days, 15:42:22 |\n| Time to close | 2 days, 11:29:39 | 7:15:49 | 6 days, 10:58:10 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 2 |\n| Number of items closed | 12 |\n| Number of most active mentors | 0 |\n| Total number of items created | 14 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| Bump next from 14.2.21 to 14.2.32 | https://github.com/ethereum-optimism/docs/pull/1729 | [dependabot[bot]](https://github.com/dependabot[bot]) | None | None | None |\n| Snyk upgrade 1d2964336667e3dc1e18fb53ab478f77 | https://github.com/ethereum-optimism/docs/pull/1726 | [killers10](https://github.com/killers10) | None | None | None |\n| docs: Superchain-ops update | https://github.com/ethereum-optimism/docs/pull/1725 | [blmalone](https://github.com/blmalone) | 0:12:32 | 0:19:13 | None |\n| fix: remove reference to deprecated sdk | https://github.com/ethereum-optimism/docs/pull/1724 | [tremarkley](https://github.com/tremarkley) | 0:05:01 | 0:05:11 | None |\n| Updating font | https://github.com/ethereum-optimism/docs/pull/1723 | [jvmi7](https://github.com/jvmi7) | 18:10:20 | 19:36:27 | None |\n| Remove CGT deprecation notice | https://github.com/ethereum-optimism/docs/pull/1721 | [bradleycamacho](https://github.com/bradleycamacho) | None | 0:04:02 | None |\n| Create npm-gulp.yml | https://github.com/ethereum-optimism/docs/pull/1720 | [killers10](https://github.com/killers10) | None | None | None |\n| Add banner for one click deploy site | https://github.com/ethereum-optimism/docs/pull/1719 | [jvmi7](https://github.com/jvmi7) | 14:06:32 | 14:12:25 | None |\n| Docs homepage redesign | https://github.com/ethereum-optimism/docs/pull/1718 | [jvmi7](https://github.com/jvmi7) | 14:50:56 | None | None |\n| tutorials: clarify the difference between kurtosis devnets and op-up | https://github.com/ethereum-optimism/docs/pull/1717 | [tessr](https://github.com/tessr) | 0:02:22 | 0:08:02 | None |\n| Flashblocks for app devs and chain operators | https://github.com/ethereum-optimism/docs/pull/1716 | [krofax](https://github.com/krofax) | 12 days, 3:19:23 | 12 days, 3:19:58 | None |\n| Tutorial/precompiles | https://github.com/ethereum-optimism/docs/pull/1715 | [MASDXI](https://github.com/MASDXI) | 7:04:23 | 5 days, 9:19:08 | None |\n| Update chain-dev-net.mdx | https://github.com/ethereum-optimism/docs/pull/1714 | [aurexav](https://github.com/aurexav) | 2 days, 17:04:55 | 5 days, 19:49:05 | None |\n| Fix link to sequencer guide in spin-batcher documentation | https://github.com/ethereum-optimism/docs/pull/1709 | [krofax](https://github.com/krofax) | 0:01:38 | 0:03:03 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-08-01..2025-08-31`", "CLOSED", 0, "opgitgovernance", "2025-09-01T00:21:43Z", "2025-09-11T19:26:17Z", "2025-09-11T19:26:17Z", "ethereum-optimism/docs", "2025-09-04 02:24:56"]
["I_kwDOKIwiaM7I6q0z", 1730, "2025-08-01..2025-08-31 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 39 days, 8:27:48 | 39 days, 8:27:48 | 39 days, 8:27:48 |\n| Time to close | 18 days, 16:49:55 | 6 days, 18:20:42 | 45 days, 10:49:11 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 4 |\n| Number of most active mentors | 0 |\n| Total number of items created | 4 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [DOCS] Add PR title | https://github.com/ethereum-optimism/docs/issues/1728 | [killers10](https://github.com/killers10) | None | 17:55:02 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1722 | [Saad4343](https://github.com/Saad4343) | None | 3 days, 6:18:19 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1713 | [Saad4343](https://github.com/Saad4343) | None | 10 days, 6:23:04 | None |\n| [DOCS] Add PR title | https://github.com/ethereum-optimism/docs/issues/1675 | [cshein45](https://github.com/cshein45) | 39 days, 8:27:48 | 60 days, 12:43:14 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-08-01..2025-08-31 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "opgitgovernance", "2025-09-01T00:21:23Z", "2025-09-11T19:26:37Z", "2025-09-11T19:26:37Z", "ethereum-optimism/docs", "2025-09-04 02:24:56"]
["I_kwDOL-xLQ87DZiDy", 440, "[acceptance] Port TestFjord to Devstack", "Is your feature request related to a problem? Please describe.\nPort TestFjord (holocene gate) to devstack so that we can have it running in sysgo and persistent devnets.", "CLOSED", 0, "serpixel", "2025-07-30T19:42:55Z", "2025-09-02T12:53:50Z", "2025-09-02T12:53:31Z", "ethereum-optimism/infra", "2025-09-04 02:24:57"]
["I_kwDOL-xLQ865xg5L", 398, "[acceptance] Get all tests running and passing in persistent devnets", "We've recently made a lot of progress in getting the AT's running in persistent devnets.\n\nLets now use this ticket to capture any remaining work and complete it.\n\n\nReference:\n* [AT dashboard](https://optimistic.grafana.net/d/beb4hnpbhel8gf/network-acceptance-by-network?orgId=1&from=now-7d&to=now&timezone=browser&var-network_name=eris&var-validator_name=&refresh=5s&tab=queries)", "CLOSED", 0, "scharissis", "2025-06-04T07:14:05Z", "2025-09-09T09:29:49Z", "2025-09-03T09:31:00Z", "ethereum-optimism/infra", "2025-09-04 02:24:57"]
["I_kwDOL-xLQ862aHq_", 346, "Script Permissionless Devnet Spinup", "# Description\nImprove the [devnet spinup runbook](https://www.notion.so/oplabs/Devnet-Spinup-Runbook-17af153ee16280f3b610e808143cd02a?pvs=4) permissionless upgrade steps to be a runnable shell script, it should not be copy/paste shell commands. \n\n* Ideally the script should read from a an op-deployer intent or state to minimize human error", "CLOSED", 0, "jelias2", "2025-05-13T14:33:59Z", "2025-09-12T03:23:29Z", "2025-09-12T03:23:11Z", "ethereum-optimism/infra", "2025-09-04 02:24:57"]
["I_kwDOH2Qg5s7Jc0Uk", 668, "op-geth init with large genesis file, level db panic", "i have a large genesis file, which is around 7 GB. \n\ni run below command to init db\n```\n./build/bin/geth --datadir data --gcmode=archive --db.engine=leveldb init --state.scheme=hash genesis.json \n```\nthe trieDB is committed succesfully; however, the `rawdb.WriteGenesisStaateSpec` throws error `panic: snappy: decoded block is too large`\n\nthe error message is clear that leveldb does not allow write such a big value. however, since my genesis file is very large, how to write such a big value to levelDB?\n\ni think wring a 7 GB value to level db as one key value is not appropriate; possible to redesign it that it can be saved in multiple keys?", "CLOSED", 0, "cliff0412", "2025-09-03T13:00:13Z", "2025-09-08T04:32:57Z", "2025-09-08T04:32:57Z", "ethereum-optimism/op-geth", "2025-09-04 02:25:01"]
["I_kwDOH2Qg5s7JcPFN", 667, "Missing events on eth_getLogs calls immediately after newHeads + occasional high latency", "Noticed that calling `eth_getLogs` immediately after receiving a newHead is often missing events. Running on a base node, with exact setup described [here](https://docs.base.org/base-chain/node-operators/performance-tuning)\n\nThis is very frequent when calling for a large range of blocks (ie the last 100) rather than for just the last block - it will however be missing most recent events, so should be unaffected by the range. Have also seen instances of it missing events near the end of the block range but including the latest events, which seems very odd. Haven't been able to confirm if it will happen when calling for 1 block at a time yet.\n\nAlso noticing occasional huge latencies (double digit seconds) on this call, when made with sub100 block ranges, with all other calls we make to our node performing fine. Latency spikes are occurring during volatility == more on-chain activity.\n\nHere's a simple python script which reproduces the issue very consistently on our node - usually seeing an error within 5-10 blocks, although sometimes longer. Script just makes one call immediately after getting newHeads and again 500ms later, and compares the response.\n\n```\nimport asyncio\nimport json\nimport websockets\n\nWS_ENDPOINT = \"ENTER_NODE_HERE\"\nADDRESS = \"0xb2cc224c1c9fee385f8ad6a55b4d94e92359dc59\"\n\nasync def eth_call(ws, method, params):\n    req = {\n        \"jsonrpc\": \"2.0\",\n        \"id\": int(asyncio.get_event_loop().time() * 1000),  # unique-ish ID\n        \"method\": method,\n        \"params\": params\n    }\n    await ws.send(json.dumps(req))\n    while True:\n        msg = await ws.recv()\n        data = json.loads(msg)\n        if \"id\" in data and data[\"id\"] == req[\"id\"]:\n            return data.get(\"result\")\n\nasync def get_logs(ws, from_block, to_block):\n    params = [{\n        \"fromBlock\": hex(from_block),\n        \"toBlock\": hex(to_block),\n        \"address\": ADDRESS\n    }]\n    return await eth_call(ws, \"eth_getLogs\", params)\n\nasync def listen_new_heads():\n    async with websockets.connect(WS_ENDPOINT) as ws:\n        await ws.send(json.dumps({\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": \"eth_subscribe\",\n            \"params\": [\"newHeads\"]\n        }))\n        print(\"Subscribed to newHeads...\")\n\n        while True:\n            msg = await ws.recv()\n            data = json.loads(msg)\n\n            if \"params\" in data and \"result\" in data[\"params\"]:\n                block_number = int(data[\"params\"][\"result\"][\"number\"], 16)\n                print(f\"\\n=== New block: {block_number} ===\")\n\n                # First call\n                logs_1 = await get_logs(ws, block_number - 100, block_number)\n                print(f\" First call for blocks {block_number-100}->{block_number} log count: {len(logs_1)}\")\n\n                # Wait 500ms\n                await asyncio.sleep(0.5)\n\n                # Second call\n                logs_2 = await get_logs(ws, block_number - 100, block_number)\n                print(f\" Second call for blocks {block_number-100}->{block_number} log count: {len(logs_2)}\")\n\n                if logs_1 != logs_2:\n                    print(\" Logs differ between immediate and delayed call!\")\n                    set1 = {json.dumps(l, sort_keys=True) for l in logs_1}\n                    set2 = {json.dumps(l, sort_keys=True) for l in logs_2}\n                    print(\"  Added:\", [json.loads(x) for x in set2 - set1])\n                    print(\"  Removed:\", [json.loads(x) for x in set1 - set2])\n                else:\n                    print(\"Logs are consistent.\")\n\nasyncio.run(listen_new_heads())\n```", "OPEN", 0, "rebrax0", "2025-09-03T12:21:58Z", "2025-09-03T12:25:59Z", null, "ethereum-optimism/op-geth", "2025-09-04 02:25:01"]
["I_kwDOH2Qg5s6cPmZJ", 420, "op-geth init gives \"head block is not reachable\" error", "I am trying to set up optimism on a local testnet (ethereum PoS)\r\n\r\nhowever, when doing the following step (**Initialize op-geth**)\r\n\r\n`build/bin/geth init --datadir=datadir genesis.json`\r\n\r\ni get the following error (\"head block is not reachable\"):\r\n\r\n<img width=\"1201\" alt=\"Screenshot 2024-10-29 at 13 21 24\" src=\"https://github.com/user-attachments/assets/183192de-71df-46cf-8d04-81cb40e1a954\">\r\n\r\nwhat can i do to solve this?", "OPEN", 0, "SyedMuhamadYasir", "2024-10-29T13:52:24Z", "2025-09-04T02:05:06Z", null, "ethereum-optimism/op-geth", "2025-09-04 02:25:01"]
["I_kwDODjvEJM7JeWAh", 17313, "op-sync-tester,op-acceptance-tests: Additional Tests", "Split tests which were tracked at https://github.com/ethereum-optimism/optimism/issues/16703\n\nImplement more tests\n\n- [ ] Multiple CLs, Single Sync Tester: Each CLs will initialize their own mock EL endpoints given by the sync tester. This validates that multiple CLs can sync together.\n- [ ] User Tx with Sync Tester: Current tests only sync blocks which only contain deposit tx. Create user tx inside L2 blocks and check the L2CLs are synced also.", "OPEN", 0, "pcw109550", "2025-09-03T14:50:21Z", "2025-09-03T14:51:04Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7JUN70", 17308, "op-node/p2p/gossip - ConfigureGossip overwrites sane defaults with zero values", "**Bug Description**\n\nhttps://github.com/ethereum-optimism/optimism/blob/develop/op-node/p2p/gossip.go#L146\n```\n\tparams := BuildGlobalGossipParams(rollupCfg)\n\n\t// override with CLI changes\n\tparams.D = p.MeshD\n\tparams.Dlo = p.MeshDLo\n\tparams.Dhi = p.MeshDHi\n\tparams.Dlazy = p.MeshDLazy\n```\nThis sets the params values directly to those passed in. However, if the passed in struct does not have a value explicitly set (eg `MeshDHi`) then the zero value (0 in this case) is used, which replaced the sane default set earlier with `BuildGlobalGossipParams` (12 btw).\n\n**Steps to Reproduce**\nn/a - I've given you the exact code that is wrong.\n\n**Expected behavior**\nShould only overwrite these values when non-zero\n\n**Environment Information:**\nn/a\n\n**Configurations:**\nn/a\n\n**Logs:**\nn/a\n\n**Additional context**\nn/a\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "wood-jp", "2025-09-02T21:18:50Z", "2025-09-04T01:56:27Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7JTnU2", 17306, "Support U16a changes", "", "CLOSED", 0, "pauldowman", "2025-09-02T20:14:53Z", "2025-09-17T15:01:59Z", "2025-09-17T15:01:58Z", "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7JTPc4", 17305, "Aggregate Dispute Game: first pass at design", "This issue is to track that we're doing some thinking and discussion about the design of the aggregate dispute game (multi-proofs).", "OPEN", 0, "pauldowman", "2025-09-02T19:35:59Z", "2025-09-02T20:12:40Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7JRWwr", 17303, "Ensure Kona has passing action tests for Jovian", "", "OPEN", 0, "pauldowman", "2025-09-02T16:37:53Z", "2025-09-02T19:49:23Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7JRV7G", 17302, "Ensure op-program has passing action tests for Jovian", "", "OPEN", 0, "pauldowman", "2025-09-02T16:36:41Z", "2025-09-02T19:49:04Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7JLEnS", 17298, "op-acceptance-tests: Tame `TestPreNoInbox` flakiness", "https://output.circle-artifacts.com/output/job/ae2b8f35-66b9-41cc-86f0-065099e08699/artifacts/0/flaky-test-reports/flaky_tests.html shows `TestPreNoInbox` flaked two times last 14 days(from 2025/9/2).\n\n### Initial analysis of test logs\n\n```json\n{\"Time\":\"2025-08-29T05:41:58.827365591Z\",\"Action\":\"output\",\"Package\":\"github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/upgrade\",\"Test\":\"TestPreNoInbox\",\"Output\":\"    pre_test.go:55:             \\u001b[32mINFO \\u001b[0m[08-29|05:41:58.827] Timestamps                               \\u001b[32minteropTime\\u001b[0m=1,756,446,128 \\u001b[32mnow\\u001b[0m=1,756,446,118\\n\"}\n```\n\nshows that the test clearly started with pre-interop, with scheduled hf time at 1756446128. The upper log was recorded at 1756446118, so past interop.\n\nThe error log(last json in the log)\n```json\n{\"Time\":\"2025-08-29T05:42:24.887231143Z\",\"Action\":\"fail\",\"Package\":\"github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/interop/upgrade\",\"Elapsed\":56.956}\n```\n\nConverting 2025-08-29T05:42:24.887231143Z to unix time -> 1756446144 which clearly passed the interop activation\n\nSuspecting the test is ment to run all pre-interop, so this may be a race condition.\n\n### Possible Fix\n\nAt first glance, we may schedule interop at far more future to tame this.\n", "OPEN", 0, "pcw109550", "2025-09-02T09:07:43Z", "2025-09-17T14:40:49Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7GCcdX", 17069, "Audit for Dispute Game Creator Pattern refactor", "\n[Audit process](https://devdocs.optimism.io/pm/audits.html) requirements:\n- [ ] Threat modelling (scheduled)\n- [ ] [Audit readiness doc](https://www.notion.so/oplabs/Security-Readiness-Dispute-Game-Creator-Pattern-Refactor-24ff153ee16280b582bdf814e8edfa00)\n- [ ] Work with PMO to procure audit\n- [ ] Implement fixes, if any\n- [ ] Publish audit\n- [ ] Retro, if any high severity fixes", "OPEN", 0, "pauldowman", "2025-08-14T14:53:02Z", "2025-09-02T19:25:16Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7F4Hds", 17060, "cannon: Support go1.25", "Test compatibility with go 1.25 and fix any issues.", "OPEN", 0, "ajsutton", "2025-08-13T20:40:41Z", "2025-10-05T21:48:22Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7Fuei6", 17047, "op-sync-tester: Better Session Handling", "The sync tester APIs currently have session validation logic duplicated almost every RPC.\n\npseudocode like\n```\nfunc SomeRPC1(ctx) {\n    if not checksession(ctx) return err\n    do something\n}\nfunc SomeRPC2(ctx) {\n    if not checksession(ctx) return err\n    do something\n}\n```\nremove this duplication by moving the checker logic to the middleware.\n\nAlso revise mutex logic\n", "CLOSED", 0, "pcw109550", "2025-08-13T07:46:32Z", "2025-09-05T14:11:03Z", "2025-09-05T14:11:03Z", "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7FrsJx", 17042, "Op-proposer keeps giving errors for no reason?", "<img width=\"1909\" height=\"904\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/65787e00-7661-45d4-a680-1798b4bfac99\" />\n\nas you can see, there's alot of errors on proposer\n\nplease help", "CLOSED", 0, "SyedMuhamadYasir", "2025-08-13T01:00:38Z", "2025-09-01T21:03:28Z", "2025-09-01T21:03:28Z", "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM7DaUVz", 16910, "cannon: Scale VM Runner", "Although `op-challenger-runner` runs Cannon and the fault proof program(s) continuously, it covers only a small number of mainnet blocks. We should look into increasing it. But since the fault proof program is single-threaded adding capacity only helps if it's just faster CPU, or if we can eliminate bottlenecks such as time waiting on RPC calls. \n\nIntroducing parallelism would require coordination to ensure that the instances are covering different blocks.", "CLOSED", 0, "pauldowman", "2025-07-30T21:13:51Z", "2025-09-03T15:04:14Z", "2025-09-03T15:04:14Z", "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM65xGGP", 16272, "[op-acceptance-tests] Move all AT's into the one workflow", "Move all acceptance tests out of other workflows, such as the \u2018go tests\u2019 job in \u2018main\u2019 workflow, and into the op-acceptance-tests workflow", "CLOSED", 0, "scharissis", "2025-06-04T06:36:16Z", "2025-09-04T01:34:51Z", "2025-09-04T01:34:51Z", "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM6mL5hk", 13764, "Deploy Drippie to Mainnet", "", "CLOSED", 0, "ControlCplusControlV", "2025-01-14T19:37:08Z", "2025-09-03T14:55:38Z", "2025-09-03T14:55:38Z", "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM6df1bM", 12876, "[Tracker] Proofs: use Drippie to manage hot wallet funds for challenger", "Funding the challenger would be easier to manage with Drippie. It is not yet being used on mainnet.  This will include monitoring. ", "CLOSED", 0, "pauldowman", "2024-11-07T22:37:43Z", "2025-09-03T14:55:46Z", "2025-09-03T14:55:46Z", "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDODjvEJM6NpghQ", 11020, "dispute-mon: Multiple rollup node metrics", "Once dispute-mon has support for reading from multiple rollup nodes (#11019), we need to expose additional metrics to support alerting when there are disagreements between nodes or some nodes failing. Each of these should be driven by adding fields to the `EnrichedGameData` to capture the data for a single game, then aggregated by adding a new [`Monitor`](https://github.com/ethereum-optimism/optimism/blob/bde6a96e65d812f33681069009cdf3fa4f1f87d7/op-dispute-mon/mon/monitor.go#L19) in `gameMonitor` that aggregates the data across all games and then reports it to metrics ([`L2ChallengesMonitor`](https://github.com/ethereum-optimism/optimism/blob/bde6a96e65d812f33681069009cdf3fa4f1f87d7/op-dispute-mon/mon/l2_challenges.go#L24) is an example of this kind of monitor implementation).\r\n\r\nMetrics to report:\r\n* Gauge of total number of endpoints that returned an error (other than not found) during the last update cycle - note this is the number of rpcs that had at least 1 failure, so if the same rpc gives an error on 10 games that still counts as 1.\r\n* Gauge of total number of failures (other than not found) in the last update cycle. This counts each error from an rpc as a new event even if the rpc is the same (so one rpc giving 10 errors sets this to 10).\r\n* Gauge of the total number of games where some nodes reported not found and others had the block in the last update cycle.\r\n* Gauge of the total number of games where some nodes reported the output root as safe and others as unsafe in the last update cycle\r\n* Gauge of the total number of games where nodes returned different expected output roots in the last update cycle", "OPEN", 0, "ajsutton", "2024-06-27T00:11:15Z", "2025-09-02T20:41:08Z", null, "ethereum-optimism/optimism", "2025-09-04 02:25:11"]
["I_kwDOLyTYAM7DKZyv", 311, "min-base-fee: conduct Failure Modes Analysis", "Alternative risk modelling is totally acceptable, please check in with @mds1 about the latest advice.\n\nSee https://github.com/ethereum-optimism/design-docs/pull/295 and implementation work can be discovered through the parent tracking ticket. \n\nSpecific TODOs\n- [x] Check how a state growth figure was obtained for the operator fee, and do the same for MinBaseFee\n- [ ] Check the operator fee FMA for any other mitigations which may apply to MinBaseFee", "CLOSED", 0, "geoknee", "2025-07-29T16:38:55Z", "2025-09-05T16:12:44Z", "2025-08-10T23:56:29Z", "ethereum-optimism/design-docs", "2025-09-04 03:00:45"]
["I_kwDOLyTYAM7FUN9l", 316, "min-base-fee: add state growth estimate to FMA", "See the FMA for operator fee for an example. ", "CLOSED", 0, "geoknee", "2025-08-11T14:50:36Z", "2025-08-13T06:01:54Z", "2025-08-13T06:01:54Z", "ethereum-optimism/design-docs", "2025-09-04 03:00:46"]
["I_kwDOLyTYAM7C5zY6", 306, "Congestion-based builder transaction reordering", "Write a design doc on congestion-based builder transaction reordering.\n\nIdea: track DA usage excess over time, exponential cost/score penalty.\n\nCan be implemented outside protocol, test idea for L1 congestion cost component.\n\nMultiple options:\n- virtual cost\n- probabilistic exclusion\n- deterministic scoring-based exclusion", "CLOSED", 0, "sebastianst", "2025-07-28T13:31:09Z", "2025-08-11T12:58:59Z", "2025-08-11T12:58:59Z", "ethereum-optimism/design-docs", "2025-09-04 03:00:46"]
["I_kwDONqt9zM7Eb9HY", 72, "Onchain Builders: Project got flagged inappropriately", "### What are you providing feedback on?\n\nResults - feedback about the OP allocation to projects\n\n### Please describe your feedback\n\nHi!\nIn this PR https://github.com/ethereum-optimism/Retro-Funding/pull/71 my project got flagged for:\n> M6 World MiniApps - NFT and Gaming (no in-store Mini App)\n\nYet in your PR notes, you put:\n> Related projects (ie, projects that are maintained by the same team, share the same deployer, and operate on the same chain) are now aggregated into a single project, generally the first one to have applied to the round\n\nI have multiple mini apps in store, and active. I just aggregated them into one project, as per your rules. Why was I flagged? How can this be fixed?\n\nThanks!\n\n### Please provide references or examples\n\n_No response_", "CLOSED", 0, "sexychinese", "2025-08-06T08:06:34Z", "2025-08-06T17:20:51Z", "2025-08-06T17:20:51Z", "ethereum-optimism/Retro-Funding", "2025-09-04 03:01:04"]
["I_kwDONqt9zM63ncl2", 49, "Dev Tooling: Direct vs Transitive dependencies", "", "CLOSED", 0, "JSeiferth", "2025-05-21T15:09:35Z", "2025-08-04T09:52:09Z", "2025-08-04T09:52:09Z", "ethereum-optimism/Retro-Funding", "2025-09-04 03:01:04"]
["I_kwDOEf1bQc7PmNrL", 1194, "BEPs/BEP2.md", "", "OPEN", 0, "sex21vvv", "2025-10-03T23:54:47Z", "2025-10-03T23:54:47Z", null, "ethereum-optimism/community-hub", "2025-10-13 20:32:15"]
["I_kwDOEf1bQc7PmNpy", 1193, "BEPs/BEP2.md", "", "OPEN", 0, "sex21vvv", "2025-10-03T23:54:40Z", "2025-10-03T23:54:40Z", null, "ethereum-optimism/community-hub", "2025-10-13 20:32:15"]
["I_kwDOEf1bQc7Jqh81", 1184, "Project:", "### High level description of project.\n\nA breif description of what the project. Why do we have this project, what are its goals.\n\n### Label Checks\n\n- [x] I have added the team label for this project (CH, TH, Contributions).\n- [x] I have added the timeline for this project to the issue.", "CLOSED", 0, "sandy143-ui", "2025-09-04T11:39:58Z", "2025-09-04T11:40:10Z", "2025-09-04T11:40:10Z", "ethereum-optimism/community-hub", "2025-10-13 20:32:15"]
["I_kwDOLyTYAM7PXhhx", 342, "Make soft vs. hard-fork terminology consistent", "Context: https://github.com/ethereum-optimism/design-docs/pull/341#discussion_r2399901365", "OPEN", 0, "joshklop", "2025-10-02T21:46:42Z", "2025-10-02T21:46:42Z", null, "ethereum-optimism/design-docs", "2025-10-13 20:32:15"]
["I_kwDOEf1bQc7MB2xp", 1185, "Broken link for CEX listing requests documentation", "The link for CEX listing requests in the Optimism docs appears to be broken:\n\ud83d\udc49 https://community.optimism.io/docs/guides/cex-dev/\n\nWe often get questions from community members about how to request a CEX listing for OP, and we usually point them to this page. Since the link no longer works, is there an updated resource or official guidance we can share with them?\n\nThanks in advance!", "OPEN", 0, "fatemehghassemi", "2025-09-16T16:48:18Z", "2025-09-16T16:48:18Z", null, "ethereum-optimism/community-hub", "2025-10-13 20:32:15"]
["I_kwDOLyTYAM7KlBq1", 336, "[DA Footprint Limit] Conduct threat modelling / failure modes analysis", "", "CLOSED", 0, "geoknee", "2025-09-09T14:19:49Z", "2025-09-15T10:53:58Z", "2025-09-15T10:53:50Z", "ethereum-optimism/design-docs", "2025-10-13 20:32:16"]
["I_kwDOKIwiaM7OOJqF", 1752, "[DOCS] Theme-switcher button text visibility issue in light mode", "## Description \nOn the [Optimism docs site](https://docs.optimism.io/), the **theme-switcher button text** has a visibility issue in **light mode**. When the button is in the opened/active state, the text is not displayed properly and becomes hard to read.\n\nI checked the [official Nextra Docs Theme](https://nextra.site/) and this issue does not appear there, so it seems to be caused by **custom theming** applied on the Optimism Docs site.\n\n**Screenshot (light mode, opened state):**\n<img width=\"299\" height=\"192\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/8a28a0de-3c38-4b46-a09c-bd3f1792bea4\" />\n\n## Acceptance criteria\n\n- Theme-switcher button text should remain clearly visible in light mode, including when opened/active.\n\n- Custom theming should not break contrast or text visibility.\n\n- Verify behavior against the default Nextra Docs Theme for consistency.\n\n## User stories\n\n- As a reader, I want the theme-switcher button text to be legible in all states so I can easily understand and interact with it.\n\n\n## Resources and support\n\n- URL: https://docs.optimism.io\n\n- Component: Theme-switcher button.\n\n- Upstream reference: [Nextra Docs Theme](https://nextra.site/)\n\n## Action items\n\n- Inspect custom CSS/theme overrides affecting the theme-switcher button in light mode.\n\n- Fix text color/contrast issue for the active/opened state.\n\n- Test across both light and dark modes to confirm consistent visibility.\n", "OPEN", 0, "nirwanadoteth", "2025-09-27T05:51:41Z", "2025-09-27T05:51:41Z", null, "ethereum-optimism/docs", "2025-10-13 20:32:24"]
["I_kwDOKIwiaM7LsfFL", 1742, "[DA Footprint Limit] Documentation", "* Should emphasize the risks around setting the scalar \n  - too high (excludes too much traffic)\n  - too low (ineffective at protecting against spam or DA backlogs, throttling becomes likely)\n* When Gas Limit is changed, this scalar should also be changed \n\n---\nhttps://github.com/ethereum-optimism/design-docs/pull/317 WIP design doc\nhttps://github.com/ethereum-optimism/specs/pull/767 WIP specs\nhttps://miro.com/app/board/uXjVJIlXd1Q=/ threat modelling", "OPEN", 0, "geoknee", "2025-09-15T10:58:57Z", "2025-09-15T10:58:57Z", null, "ethereum-optimism/docs", "2025-10-13 20:32:25"]
["I_kwDOKIwiaM7O6tzi", 1778, "2025-09-01..2025-09-30 metrics report for opened prs", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 9:44:31 | 0:59:31 | 21:09:30 |\n| Time to close | 18:23:11 | 0:31:58 | 2 days, 3:21:20 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 6 |\n| Number of items closed | 11 |\n| Number of most active mentors | 0 |\n| Total number of items created | 17 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| U16a comms updates | https://github.com/ethereum-optimism/docs/pull/1776 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Add example code for creating l2 rollup and enhance docs | https://github.com/ethereum-optimism/docs/pull/1775 | [serpixel](https://github.com/serpixel) | 10:55:55 | None | None |\n| Update U16a | https://github.com/ethereum-optimism/docs/pull/1751 | [bradleycamacho](https://github.com/bradleycamacho) | None | 0:31:22 | None |\n| Nav content migration | https://github.com/ethereum-optimism/docs/pull/1750 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| Update op-deployer-setup.mdx | https://github.com/ethereum-optimism/docs/pull/1749 | [scharissis](https://github.com/scharissis) | 8:58:18 | 8:59:47 | None |\n| Bump next from 14.2.21 to 14.2.32 | https://github.com/ethereum-optimism/docs/pull/1748 | [dependabot[bot]](https://github.com/dependabot[bot]) | None | None | None |\n| Bump brace-expansion from 1.1.11 to 1.1.12 | https://github.com/ethereum-optimism/docs/pull/1747 | [dependabot[bot]](https://github.com/dependabot[bot]) | None | None | None |\n| Fix contract address | https://github.com/ethereum-optimism/docs/pull/1745 | [krofax](https://github.com/krofax) | 0:28:08 | 0:31:58 | None |\n| feat: bridge recovery | https://github.com/ethereum-optimism/docs/pull/1744 | [smartcontracts](https://github.com/smartcontracts) | 0:59:31 | None | None |\n| Custom gas tokens draft | https://github.com/ethereum-optimism/docs/pull/1743 | [bradleycamacho](https://github.com/bradleycamacho) | None | None | None |\n| feat: add operator fee vault | https://github.com/ethereum-optimism/docs/pull/1741 | [fakedev9999](https://github.com/fakedev9999) | None | None | None |\n| Fix-u16a | https://github.com/ethereum-optimism/docs/pull/1740 | [brokewhale](https://github.com/brokewhale) | 0:13:08 | 0:13:20 | None |\n| fix: U16a notice page. Added chain operator tasks | https://github.com/ethereum-optimism/docs/pull/1739 | [brokewhale](https://github.com/brokewhale) | 0:29:55 | None | None |\n| Auto-fix: Update breadcrumbs, spelling dictionary and other automated\u2026 | https://github.com/ethereum-optimism/docs/pull/1736 | [bradleycamacho](https://github.com/bradleycamacho) | 3:07:07 | 3:07:17 | None |\n| updated meta | https://github.com/ethereum-optimism/docs/pull/1735 | [krofax](https://github.com/krofax) | 0:24:46 | 0:24:54 | None |\n| U16a notice page | https://github.com/ethereum-optimism/docs/pull/1733 | [bradleycamacho](https://github.com/bradleycamacho) | 2 days, 14:03:50 | 4 days, 18:53:40 | None |\n| Remove dead link in docs | https://github.com/ethereum-optimism/docs/pull/1732 | [drewroberts](https://github.com/drewroberts) | None | None | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:pr created:2025-09-01..2025-09-30`", "CLOSED", 0, "opgitgovernance", "2025-10-01T00:21:48Z", "2025-10-14T12:23:50Z", "2025-10-14T12:23:50Z", "ethereum-optimism/docs", "2025-10-13 20:32:28"]
["I_kwDOKIwiaM7O6tf_", 1777, "2025-09-01..2025-09-30 metrics report for closed issues", "# Issue Metrics\n\n| Metric | Average | Median | 90th percentile |\n| --- | --- | --- | ---: |\n| Time to first response | 40 days, 19:14:33 | 51 days, 11:11:39 | 66 days, 23:36:44 |\n| Time to close | 197 days, 6:32:27 | 74 days, 16:23:54 | 455 days, 11:11:29 |\n| Time to answer | None | None | None |\n\n| Metric | Count |\n| --- | ---: |\n| Number of items that remain open | 0 |\n| Number of items closed | 5 |\n| Number of most active mentors | 0 |\n| Total number of items created | 5 |\n\n| Title | URL | Author | Time to first response | Time to close | Time to answer |\n| --- | --- | --- | --- | --- | --- |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1727 | [killers10](https://github.com/killers10) | None | 14 days, 21:27:52 | None |\n| Movement | https://github.com/ethereum-optimism/docs/issues/1676 | [cshein45](https://github.com/cshein45) | None | 74 days, 16:09:42 | None |\n| [2024 Q4 Audit] [page-path] | https://github.com/ethereum-optimism/docs/issues/1673 | [cshein45](https://github.com/cshein45) | 51 days, 11:11:39 | 74 days, 16:23:54 | None |\n| [DOCS] Suggestion to Add Example for Custom Chains in [Bridging ETH to OP Mainnet with Viem-Supported Networks] | https://github.com/ethereum-optimism/docs/issues/1473 | [opfocus](https://github.com/opfocus) | 1:49:00 | 189 days, 0:04:48 | None |\n| [DOCS] (via Msilb) 'For Indexers & Data Providers' page/callout | https://github.com/ethereum-optimism/docs/issues/326 | [OPMattie](https://github.com/OPMattie) | 70 days, 20:43:00 | 633 days, 2:35:57 | None |\n\n_This report was generated with the [Issue Metrics Action](https://github.com/github/issue-metrics)_\nSearch query used to find these items: `repo:ethereum-optimism/docs is:issue closed:2025-09-01..2025-09-30 -reason:\"not planned\" -label:monthly-report`", "CLOSED", 0, "opgitgovernance", "2025-10-01T00:21:24Z", "2025-10-14T12:23:37Z", "2025-10-14T12:23:37Z", "ethereum-optimism/docs", "2025-10-13 20:32:28"]
["I_kwDOKSJyfM7J93KW", 964, "Rename embedded wallets to hosted wallets", "", "CLOSED", 0, "tremarkley", "2025-09-05T18:34:21Z", "2025-09-05T20:10:41Z", "2025-09-05T20:10:41Z", "ethereum-optimism/ecosystem", "2025-10-13 20:32:40"]
["I_kwDOLyTYAM7LXfSf", 339, "\u0e23\u0e32\u0e22\u0e07\u0e32\u0e19\u0e08\u0e38\u0e14\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "p0992496976-crypto", "2025-09-12T21:02:43Z", "2025-09-12T21:02:43Z", null, "ethereum-optimism/design-docs", "2025-10-13 20:32:59"]
["I_kwDOLyTYAM7LXfKR", 338, "\u0e23\u0e32\u0e22\u0e07\u0e32\u0e19\u0e08\u0e38\u0e14\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "p0992496976-crypto", "2025-09-12T21:02:35Z", "2025-09-12T21:02:35Z", null, "ethereum-optimism/design-docs", "2025-10-13 20:32:59"]
["I_kwDOFpg0Ns7L1ZgO", 1203, "Clarification on PR #1184 and Token Bridging Issue", "Hello \r\n\r\nWhen it\u2019s already merged, why doesn\u2019t the token at 0x672fdBA7055bddFa8fD6bD45B1455cE5eB97f499 bridge to the token at 0x431151F26c48B4D4BEFc34048a0966Bf960A0c50 on Base? Is there something in the config I updated that doesn\u2019t match? Please let me know right away. \r\n\r\nit doesn't detect our token on either side \r\n\r\n \r\n<img width=\"1033\" height=\"756\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fb413505-be99-4e87-ae58-f3ffdac90d3f\" />\r\n\r\n\r\n\r\nthank you\r\n\r\n_Originally posted by @arisarcmarket in https://github.com/ethereum-optimism/ethereum-optimism.github.io/issues/1184#issuecomment-3292788768_\r\n            ", "OPEN", 0, "arisarcmarket", "2025-09-15T23:02:43Z", "2025-09-16T20:31:27Z", null, "ethereum-optimism/ethereum-optimism.github.io", "2025-10-13 20:33:13"]
["I_kwDOFpg0Ns7LsG7d", 1201, "Incorrect address for ETH on Optimism-Sepolia", "```\n\"optimism-sepolia\": {\n      \"address\": \"0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\"\n    }\n```\n\nThis is not a ERC token address rather a normal address on the testnet. \nhttps://sepolia-optimism.etherscan.io/address/0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000", "OPEN", 0, "Prabhat1308", "2025-09-15T10:31:48Z", "2025-09-15T10:31:48Z", null, "ethereum-optimism/ethereum-optimism.github.io", "2025-10-13 20:33:13"]
["I_kwDOKIwiaM6s7UR1", 1473, "[DOCS] Suggestion to Add Example for Custom Chains in [Bridging ETH to OP Mainnet with Viem-Supported Networks]", "I suggest adding the following example to the [Supported Networks](https://docs.optimism.io/app-developers/tutorials/bridging/cross-dom-bridge-eth#supported-networks) section to help users more easily adapt it to their own custom chains.  \n\nBy modifying the code below with the appropriate values for their own test networks, users can quickly configure and integrate their custom OP Stack chains.  \n\n```javascript\nconst { defineChain } = require('viem');\nconst { chainConfig } = require('viem/op-stack')\n\nconst sourceId = 11_155_111 // sepolia\n\nconst optimismSepolia = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 11155420,\n  name: 'OP Sepolia',\n  nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.optimism.io'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Blockscout',\n      url: 'https://optimism-sepolia.blockscout.com',\n      apiUrl: 'https://optimism-sepolia.blockscout.com/api',\n    },\n  },\n  contracts: {\n    ...chainConfig.contracts,\n    disputeGameFactory: {\n      [sourceId]: {\n        address: '0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1',\n      },\n    },\n    l2OutputOracle: {\n      [sourceId]: {\n        address: '0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F',\n      },\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 1620204,\n    },\n    portal: {\n      [sourceId]: {\n        address: '0x16Fc5058F25648194471939df75CF27A2fdC48BC',\n      },\n    },\n    l1StandardBridge: {\n      [sourceId]: {\n        address: '0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1',\n      },\n    },\n  },\n  testnet: true,\n  sourceId,\n})\n```\n\nThis code is from the `chains/definitions/optimismSepolia.ts` file in the `viem` package, with slight modifications.\n\n", "CLOSED", 0, "opfocus", "2025-03-06T19:21:09Z", "2025-09-11T19:25:57Z", "2025-09-11T19:25:57Z", "ethereum-optimism/docs", "2025-10-13 20:33:22"]
["I_kwDOL-xLQ87PLVnw", 482, "[op-acceptor] Forward environment variables to `go test`", "op-acceptor should forward environment variables to `go test`, so that we can pass custom env vars to control text execution.\n\nFor example:\n```\nGETH_OVERRIDE_OSAKA=true op-acceptor ...\n```\nWhen `go test ...` is run, `GETH_OVERRIDE_OSAKA=true` should be set for all tests.", "CLOSED", 0, "scharissis", "2025-10-02T03:34:14Z", "2025-10-02T19:24:39Z", "2025-10-02T19:23:57Z", "ethereum-optimism/infra", "2025-10-13 20:33:29"]
["I_kwDOL-xLQ87LKkym", 462, "[op-acceptor] Package parallelism", "The current implementation of parallelism is sub-optimal. It runs each test in a separate `go test` process, preventing `t.Parallel()` and `devtest.ParallelT()` from working correctly within packages.\nWe should restore the two-level parallelism architecture where op-acceptor manages package-level parallelism and op-devstack manages test-level parallelism within packages.\nAs part of this lets add tests to ensure we don't break this going forward.", "CLOSED", 0, "scharissis", "2025-09-12T01:46:17Z", "2025-10-02T03:23:16Z", "2025-10-02T03:22:46Z", "ethereum-optimism/infra", "2025-10-13 20:33:29"]
["I_kwDOL-xLQ87LKM-T", 460, "[op-acceptor] Bug: progress indicator in Kurtosis", "The newly introduced console progress indicator isn't showing progress in kurtosis-based runs:\n\n```\nINFO [09-11|07:56:09.109] Running test                             test=TestCLAdvance\nINFO [09-11|07:56:18.394] Running test                             test=TestFaucetFund\nINFO [09-11|07:56:29.111] progress update                          gate= suite= completed=0 total=0 percent=0.0% numRunning=0 longestRunning=\nINFO [09-11|07:56:34.156] Running test                             test=TestPublicRpcAdvance\nINFO [09-11|07:56:49.108] progress update                          gate= suite= completed=0 total=0 percent=0.0% numRunning=0 longestRunning=\nINFO [09-11|07:56:50.433] Running test                             test=TestRPCConnectivity\nINFO [09-11|07:56:56.615] Running test                             test=TestTransfer\nINFO [09-11|07:57:09.112] progress update                          gate= suite= completed=0 total=0 percent=0.0% numRunning=0 longestRunning=\nINFO [09-11|07:57:12.514] Package test completed                   package=github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/base total=5 passed=5 failed=0 timeouts=0 duration=44.308049572s\nINFO [09-11|07:57:12.514] Package test result                      package=github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/base status=pass duration=44.308049572s subtests=5 error=<nil>\nINFO [09-11|07:57:12.514] Running validator                        validator=github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/base/deposit\nINFO [09-11|07:57:12.516] Running test package                     package=github.com/ethereum-optimism/optimism/op-acceptance-tests/tests/base/deposit testCount=1\nINFO [09-11|07:57:12.516] Running test                             test=TestL1ToL2Deposit\nINFO [09-11|07:57:29.107] progress update                          gate= suite= completed=0 total=0 percent=0.0% numRunning=0 longestRunning=\nINFO [09-11|07:57:49.119] progress update                          gate= suite= completed=0 total=0 percent=0.0% numRunning=0 longestRunning=\n```\n\nExample CI run: [3858030](https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/100609/workflows/799da796-02fa-4151-aa1e-d2cb29256b59/jobs/3858030)\n\nNote: in that same CI run the gateless in-memory job did correctly show progress ([ref](https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/100609/workflows/799da796-02fa-4151-aa1e-d2cb29256b59/jobs/3858567)).", "OPEN", 0, "scharissis", "2025-09-12T00:52:40Z", "2025-10-02T03:22:19Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:29"]
["I_kwDOL-xLQ8645VUA", 386, "[acceptance] op-acceptor; include setup info in html output", "We could potentially dump the chain setup / status with PrintChain() and then embed that into the HTML results.", "CLOSED", 0, "scharissis", "2025-05-30T04:13:52Z", "2025-10-02T03:20:44Z", "2025-10-02T03:20:44Z", "ethereum-optimism/infra", "2025-10-13 20:33:29"]
["I_kwDOL-xLQ87MMRu8", 467, "proxyd: prepare for Fusaka activation on L1", "1. update to include latest geth blob tx handling. \n    i. we should update to latest version of op-geth\n    ii. should be able to unit test this with a hand crafted cell proof transaction\n2. check that we won\u2019t filter out the new txs and DoS ourselves", "CLOSED", 0, "geoknee", "2025-09-17T10:54:18Z", "2025-09-26T14:28:59Z", "2025-09-17T10:59:06Z", "ethereum-optimism/infra", "2025-10-13 20:33:35"]
["I_kwDOH2Qg5s7C6yYY", 651, "min-base-fee: update `eip1559.CalcBaseFee` to enforce minimum if feature is active", "Requires https://github.com/ethereum-optimism/specs/issues/742 and https://github.com/ethereum-optimism/op-geth/issues/649\n\nhttps://github.com/ethereum-optimism/op-geth/blob/3884f258949215fd1bc1f5fddd1b51dc126d4467/consensus/misc/eip1559/eip1559.go#L135-L137", "CLOSED", 0, "geoknee", "2025-07-28T14:38:41Z", "2025-09-05T16:10:15Z", "2025-09-05T16:10:15Z", "ethereum-optimism/op-geth", "2025-10-13 20:33:50"]
["I_kwDOL-xLQ87KMKzt", 456, "[acceptance] logging - improve a progress indicator", "Our [progress indicator](https://github.com/ethereum-optimism/infra/blob/main/op-acceptor/runner/runner.go#L232-L233) is currently a placeholder; let's implement something (even if it's simple) to improve the UX around awareness of test, package and overall run progress.", "CLOSED", 0, "scharissis", "2025-09-08T00:33:16Z", "2025-09-11T04:21:03Z", "2025-09-11T04:20:43Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ87KMKNU", 455, "[acceptance] op-acceptor: improved logging", "Our logging can and should be improved to show test state better. An example use-case would be when a test run has been running for some time and we check on it, only to find ourselves unable to concretely ascertain what the overall progress is, which tests are running and if any tests seem stalled.\n\nThere's a few options to improve this experience that we should experiment with, including:\n\n- [x] Implementing a progress indicator\n- [ ] Increasing the default log verbosity in CI (it's currently set to 'INFO')\n- [ ] Improving the existing log messages of op-acceptor\n- [ ] Improving the logs of our tests themselves\n- [ ] Improving the logging of op-devstack\n- [ ] Improving the integration/interaction between op-acceptor & op-devstack, from the context of logging\n- [ ] Streaming results instead of batching them till the end (as we currently are)", "OPEN", 0, "scharissis", "2025-09-08T00:31:38Z", "2025-09-12T01:33:48Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ87JptDX", 454, "[sync-tester] Expose More Networks inside CI Box", "## Description\n\nop-sync-tester unlocks testing the L2CL syncing with real chain data without actually writing to the L2 EL, but we need a real data source for this.\n\n[The second milestone of sync-tester](https://github.com/ethereum-optimism/optimism/issues/17253) requires validation of op-node with sync-tester for below networks inside the CI Box:\n- `op-sepolia`, `base-sepolia`, `op-mainnet`, `base-mainnet`.\n\nCurrently the CI box can access below four endpoints:\n- https://ci-sepolia-l1.optimism.io/ (L1 Sepolia EL endpoint) \n- https://ci-sepolia-beacon.optimism.io/ (L1 Sepolia beacon endpoint) \n- https://ci-sepolia-l2.optimism.io/ (L2 OP Sepolia EL endpoint) \n- https://ci-mainnet-l1.optimism.io/ (L1 Mainnet EL endpoint)\n\nWe have all required RPCs(see background section for reason) for testing `op-sepolia` at the moment, but we need more endpoints exposed inside the CI box for testing other networks.\n\nExhaustively listing the required requested endpoints inside the CI Box,\n\n1. L1 Mainnet beacon endpoint\n2. L2 OP Mainnet EL endpoint\n3. L2 Base Mainnet EL endpoint\n4. L2 Base Sepolia EL endpoint\n\n## Background\n\nop-sync-tester is a tool that mocks L2 EL. To test the L2 CL(especially the op-node) targeting the real chain, we needed some synced real L2 EL which is stateful. op-sync-tester mocks upon already synced L2 EL, and gives ease of testing the L2 CL implementation.\n\nTo mock, we need L2 EL endpoint, and to signal the L2 CL, we need L1 EL and L1 Beacon endpoint. \n\n", "CLOSED", 0, "pcw109550", "2025-09-04T10:42:19Z", "2025-09-09T13:51:09Z", "2025-09-09T13:50:45Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ87B7T3w", 429, "[acceptance] withdrawal testing", "The EVM Safety team would like to automate withdrawal testing on persistent devnets. We already have a [Withdrawal Acceptance Test](https://github.com/ethereum-optimism/optimism/blob/709d3eff834d9ef6eb0c1cbcb86f3b1b57807fe9/op-acceptance-tests/tests/base/withdrawal/withdrawal_test.go#L1) , but this may need to extend that to handle their requirements:\n\n> What I'd like to see is effectively:\n1. Deposit some funds via a key controlled by the tool\n2. Immediately [init](https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops/cmd/withdrawal#init) a withdrawal\n3. Immediately [prove](https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops/cmd/withdrawal#prove) the withdrawal\n4. Put the init-tx-hash somewhere convenient so that we can manually [finalize](https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops/cmd/withdrawal#prove) the withdrawal a week later.\n\nPotential targets:\n- persistent devnets\n- local; sysgo/in-memory; should work, but uses FastGame mode\n- local; kurtosis; requires a non-trivial additional support (#402)\n\nRequester: @maurelian \n\nNext steps:\n- Refine requirements\n- Decide on target(s) (sysgo, kurtosis, persistent)\n- Come up with a plan\n\nPotential solution may involve one or two custom gates and tests:\n`op-acceptor --gate withdraw-start`\n`op-acceptor --gate withdraw-end`\n", "OPEN", 0, "scharissis", "2025-07-22T17:43:56Z", "2025-09-12T01:34:05Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ8661EyS", 406, "op-acceptor: contract execution stack trace", "**Is your feature request related to a problem? Please describe.**\nProvide full stack traces (through source maps) when a devstack contract operation is rolled back.\n\n**Describe the solution you'd like**\nWe have a SourceMap module already existing (optimism/op-chain-ops/foundry/sourcefs.go) which should be able to translate SourceMaps.\nWe should try to expand the existing Contracts DSL, perhaps by capturing a write/read error operation and:\nprovide a way to trace the reverted transaciton.\n", "OPEN", 0, "serpixel", "2025-06-10T18:13:09Z", "2025-09-12T01:35:03Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ866oJwT", 402, "[acceptance] [sysext/devnet] Test: base; Complete Withdrawal Flow Test", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\n[#16333](https://github.com/ethereum-optimism/optimism/pull/16333) Implemented the withdrawal test in sysgo only.\n\n**Describe the solution you'd like**\nWe need to create a partial test that does initiate a withdrawal, not prove it. This will allow these to be proved in 7 days time in devnets.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n", "OPEN", 0, "serpixel", "2025-06-09T18:23:37Z", "2025-09-12T01:35:31Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ866oItp", 401, "[acceptance] [sysext] Test: base; Complete Withdrawal Flow Test", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\n[#16333](https://github.com/ethereum-optimism/optimism/pull/16333) Implemented the withdrawal test in devstack (sysgo). We need to implement the missing bindings to port this to kt-devnet.\n\n**Describe the solution you'd like**\nThe withdrawal test should work against kt-devnet.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n", "OPEN", 0, "serpixel", "2025-06-09T18:21:34Z", "2025-09-12T01:35:51Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ864i5Ob", 379, "[acceptance] flashblocks: load tests", "A basic load test simulating a 20-30 RPS traffic against the flashblocks-enabled network.\n\nThe test's expectation to still continuing noticing a healthy stream of flashblocks still producing at a 250ms rate.\n\n", "OPEN", 0, "yashvardhan-kukreja", "2025-05-28T06:10:24Z", "2025-09-12T01:36:42Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862jNrS", 350, "[acceptance] test: flashblocks: sequencer failover when all rollup-boost instances are unhealthy", "We need to test the specific failure mode where the rollup-boost instance for all rollup-boost-enabled sequencers is down or unhealthy.\n\nIn such a case, conductor should successfully transfer leadership to a sequencer that is not running rollup-boost.\n\nFor more info, see https://github.com/ethereum-optimism/optimism/issues/15874", "OPEN", 0, "alfonso-op", "2025-05-14T10:49:40Z", "2025-09-12T01:18:22Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862Wa5a", 345, "[acceptance] Test: base; verify contracts", "Ensure all deployed contracts are verified.\n\n### Implementation\nUse [op-devstack](https://github.com/ethereum-optimism/optimism/tree/develop/op-devstack).\n", "OPEN", 0, "scharissis", "2025-05-13T09:13:27Z", "2025-09-12T01:18:08Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862UH4l", 344, "[acceptance] Flag for t.Short", "Allow op-acceptor callers to pass the [testing.Short ](https://pkg.go.dev/testing#Short) flag to the go test invocations.", "OPEN", 0, "scharissis", "2025-05-13T04:30:17Z", "2025-09-12T01:40:15Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862K9Cf", 335, "[acceptance] Test: base; Transaction Type Support Test", "Verify all Ethereum transaction types (legacy, EIP-1559, etc.) are supported.\n\n### Implementation\nUse [op-devstack](https://github.com/ethereum-optimism/optimism/tree/develop/op-devstack) to set up a test network. Create and submit transactions of each supported type (legacy, EIP-1559, EIP-2930) with various parameter combinations. Verify all transaction types are accepted, processed correctly, and result in the expected state changes.\n", "OPEN", 0, "scharissis", "2025-05-12T09:35:52Z", "2025-09-12T01:40:35Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862K6IK", 334, "[acceptance] Test: base; Node Failure and Recovery Test", "Test system behavior when nodes fail and come back online.\n\n### Implementation\nSet up a multi-node test network using [op-devstack](https://github.com/ethereum-optimism/optimism/tree/develop/op-devstack). Simulate various node failure scenarios (crash, resource exhaustion, network disconnection) for different node types. Restart failed nodes and verify they correctly synchronize and resume normal operation without data corruption or chain inconsistencies.\n", "OPEN", 0, "scharissis", "2025-05-12T09:32:32Z", "2025-09-12T01:40:50Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862K4fZ", 333, "[acceptance] Test: base; Block Proposal and Finalization Latency", "Measure and validate block time consistency and finalization speed.\n\n### Implementation\nDeploy a test network using [op-devstack](https://github.com/ethereum-optimism/optimism/tree/develop/op-devstack). Create timing instrumentation to measure the latency between transaction submission, inclusion in a block proposal, and block finalization. Collect statistics over multiple blocks under different network conditions and validate consistency against expected block times.\n", "OPEN", 0, "scharissis", "2025-05-12T09:30:42Z", "2025-09-12T01:40:59Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862Kv_P", 332, "[acceptance] Test: base; Transaction Throughput Measurement", "Measure maximum transactions per second under various load conditions.\n\n### Implementation\nUsing op-devstack, set up a test network and deploy a transaction generator that creates varying loads of simple and complex transactions. Measure transaction confirmation rates over fixed time periods at different load levels. Calculate transactions per second for each load scenario and identify the maximum sustainable throughput before degradation.\n", "OPEN", 0, "scharissis", "2025-05-12T09:18:08Z", "2025-09-12T01:43:03Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862KtA9", 331, "[acceptance] Test: base; L1 Data Availability Validation", "Verify L2 transactions are properly published to L1 and data can be retrieved from L1 data.\n\n### Implementation\nUse op-devstack to deploy a test network. Submit known transactions on L2, then verify these transactions are properly batched and published to L1 by checking batch submission transactions. Attempt to reconstruct the L2 chain state using only L1 data and compare with the actual L2 state.\n", "OPEN", 0, "scharissis", "2025-05-12T09:13:55Z", "2025-09-12T01:43:13Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862KnFD", 330, "[acceptance] Test: base; Bridge Functionality Under Network Congestion", "Test bridge operations during periods of high network usage and L1 congestion.\n\n### Implementation\nLeverage `op-devstack` to create a test network. Simulate network congestion by generating high transaction volume on L1 through a transaction spammer component. During congestion, perform bridge operations in both directions and monitor transaction inclusion times, success rates, and correct token balances after operations complete.", "OPEN", 0, "scharissis", "2025-05-12T09:06:48Z", "2025-09-12T01:43:24Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862Klgw", 329, "[acceptance] Test: base; Cross-Domain Message Passing Test", "Verify message passing between L1 and L2 in both directions with different payload types and sizes.\n\nChild task of #190 \n\n### Implementation\nUse `op-devstack` to set up a test environment. Deploy messenger contracts on both L1 and L2, then send various message types (small/large payloads, different data formats) between chains using cross-domain messengers. Verify message arrival, payload integrity, and correct execution of any functions triggered by the messages.", "OPEN", 0, "scharissis", "2025-05-12T09:05:07Z", "2025-09-12T01:43:33Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862IuDB", 326, "[acceptance] test: dashboard: conductor monitor", "Try automate the following manual check:\n\n> Check the [Conductor Mon Dashboard](https://optimistic.grafana.net/d/cdlf92t90dxq8d/op-conductor-health-monitor)\nShould be showing all the nodes, conductors all unpaused and healthy", "OPEN", 0, "scharissis", "2025-05-12T06:06:02Z", "2025-09-12T01:17:02Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862ItlD", 325, "[acceptance] test: dashboard: dispute monitor", "Try automate the following manual check(s):\n\n> Check the [Dispute Mon Dashboard](https://optimistic.grafana.net/d/edc89b93vev40c/dispute-monitor)\nNo incorrect forecasts / incorrect results or alerts\nNote: It can take awhile for this to show up", "OPEN", 0, "scharissis", "2025-05-12T06:05:13Z", "2025-09-12T01:16:47Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862ItVJ", 324, "[acceptance] test: dashboard: challenger", "Try automate the following manual check:\n\n> Check the [Challenger Dashboard](https://optimistic.grafana.net/d/d1dc51c1-2ec5-4b85-8d3c-65eefaeab240/bedrock-challenger)\nShould see games in progress, no error logs", "OPEN", 0, "scharissis", "2025-05-12T06:04:35Z", "2025-09-12T01:16:36Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862ItFC", 323, "[acceptance] test: dashboard: proposer", "Try automate the following manual check:\n\n> Check the [Proposer Dashboard](https://optimistic.grafana.net/d/c543e3f0-4d2e-4b49-ac73-99a9363633ad/proposer)\nNo long pending txns, errors, nonce is increasing", "OPEN", 0, "scharissis", "2025-05-12T06:03:59Z", "2025-09-12T01:16:25Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862Is3G", 322, "[acceptance] test: dashboard: batcher", "Try automate the following manual check:\n\n> Check the [Batcher Dashboard](https://optimistic.grafana.net/d/SF0r6OBVz/bedrock-batcher)\nNo long pending txns, errors, nonce is increasing\nSafe head is increasing", "OPEN", 0, "scharissis", "2025-05-12T06:03:26Z", "2025-09-12T01:16:09Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862IslT", 321, "[acceptance] test: dashboard: bedrock networks", "See if the following manual check can be automated (even partially):\n> Check the [Bedrock Networks dashboard](https://optimistic.grafana.net/d/nUSlc3d4k/bedrock-networks?orgId=1&from=now-3h&to=now&timezone=browser&var-network=mainnet-prod&var-node=$__all&var-layer=$__all&var-safety=$__all&refresh=30s)\nChain heads are increasing as expected (unsafe, safe, l1 heads, etc)\nPeer counts are nominal", "OPEN", 0, "scharissis", "2025-05-12T06:02:45Z", "2025-09-12T01:47:40Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862IsDh", 320, "[acceptance] test: dashboard: SLAs", "Determine if any of the SLA violations can be checked automatically in a test. Manually we would check the [SLA dashboard](https://optimistic.grafana.net/goto/WGOaGN1NR?orgId=1) to see if there's any SLA breaches.", "OPEN", 0, "scharissis", "2025-05-12T06:01:32Z", "2025-09-12T01:47:47Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862IrE7", 319, "[acceptance] Dashboard Tests", "Where possible, lets automate the checks that we do in the dashboard.", "OPEN", 0, "scharissis", "2025-05-12T05:59:38Z", "2025-09-12T01:15:40Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862Il6V", 318, "[acceptance] test: flashblocks HA failover", "Flashblocks requires TX ingress to be sent to an op-rbuilder which is peered with active sequencers, validating an HA solution for this and testing should be apart of this acceptance plan.\n\nFlashblocks failover behavior may be different depending on if you failover after the first flashblock, somewhere in the middle of the series of flashblocks within a regular block slot or at the end of it. These variations of the above more general failure modes should be covered.", "OPEN", 0, "scharissis", "2025-05-12T05:48:12Z", "2025-09-12T01:47:59Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862IlYe", 317, "[acceptance] test: rbuilder failure", "A sequencer with default EL block building is selected when rbuilder fails for all sequencers.", "OPEN", 0, "scharissis", "2025-05-12T05:46:41Z", "2025-09-12T01:48:07Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862Ik8O", 316, "[acceptance] test: rollup-boost kill-switch", "Successfully revert to default EL block building when rollup-boost kill switch is activated.", "OPEN", 0, "scharissis", "2025-05-12T05:45:46Z", "2025-09-12T01:48:32Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862IkiE", 315, "[acceptance] rollup-boost reversion", "rollup-boost successfully reverts to default EL block building when rbuilder fails, a reorg is detected or block building latency exceeds threshold", "OPEN", 0, "scharissis", "2025-05-12T05:44:45Z", "2025-09-12T01:48:40Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ862IkNa", 314, "[acceptance] test: flashblocks: sequencer failover", "Sequencer should failover when rollup-boost or rbuilder fails.", "OPEN", 0, "scharissis", "2025-05-12T05:43:50Z", "2025-09-12T01:48:48Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ8601_Xf", 304, "[op-acceptor] feature request: test artifacts capture mechanism", "This issue is not fleshed out yet.\n\nWe have multiple use-cases for capturing various artifacts during/after an acceptance run.\n\n- container logs. acceptance tests in particular can easily be derailed by some service in the op-stack failing to respond in time for example. The logs we currently have access to show the symptom pretty clearly (context deadline expired or similar), but we would need the logs for the containers running the corresponding service(s) in order to move forward.\n- blocks and other chain metadata. Both for understanding what went wrong at the chain state level, and to collect a portfolio of \"interesting\" blocks when specific transactions happen, we should have the ability to extract information from the chain(s) during/after a test, and dump it somewhere discoverable\n\nThis is in addition to more obvious testing artifacts, such as test logs, raw results (XUnit or otherwise), core dumps if applicable, and so on.\n\nIn order to fulfill these needs, we should have the ability to\n- define artifacts of interest\n- orchestrate the collection of these artifacts at the right point in time wrt the test run\n- push them to a centralized place where they can be fetched by whatever process is intereested in using them", "OPEN", 0, "sigma", "2025-05-01T15:00:46Z", "2025-09-12T01:49:05Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ860dEDl", 297, "[acceptance] Flashblocks Tests", "Acceptance tests to check the new flashblocks functionality.", "OPEN", 0, "scharissis", "2025-04-29T08:37:25Z", "2025-09-12T01:10:14Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86t1ODw", 227, "[acceptance] publish multi-platform docker images", "It would be great to make op-acceptance docker images support multi architectures and platforms, for performance reasons.\n\nPerhaps using [manifests](https://console.cloud.google.com/artifacts/docker/oplabs-tools-artifacts/us/images/op-acceptor/sha256:3b1dc173fa9172474989dfc372905dbe9ec7610efbf2706140d6c1c29be4681c;tab=manifest?inv=1&invt=Abr2KQ) (using docker buildx) like [op-geth](https://console.cloud.google.com/artifacts/docker/oplabs-tools-artifacts/us/images/op-geth/sha256:39eda37f75ae17d51d0e659705d26bbc17e45c9034f0afb19bf9051b4b6f9b20;tab=manifest?inv=1&invt=Abr2KQ).", "OPEN", 0, "scharissis", "2025-03-13T09:12:38Z", "2025-09-12T01:49:49Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86s1FPp", 219, "[acceptance] Acceptance Test Release Roadmap", "Make an initial acceptance testing release roadmap showing acceptance tests alongside devnet release dates.\n\nReferences:\n* [Optimism Protocol Roadmap](https://github.com/orgs/ethereum-optimism/projects/117/views/11)\n* [Devnet Tracker](https://github.com/orgs/ethereum-optimism/projects/115/views/1)", "OPEN", 0, "scharissis", "2025-03-06T07:32:17Z", "2025-09-12T01:06:14Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86r2zW5", 207, "[nat] Allow persistent devnet lookups", "## Description\nMake it much more convenient for users to run acceptance tests against a remote devnet, by allowing lookups. Currently a user must locate and download the devnet's environment configuration file (\"devnet-env.json\") then pass that to op-acceptor, such as:\n```\nDEVNET_ENV_URL=/path/to/interop-rc-betanet-op-acceptor/devnet-env.json \\\n  go run cmd/main.go ...\n```\n\nThis change would allow users to simply reference a persistent devnet by name, and perhaps environment, instead such as:\n`--devnet alphanet/aegir`.\n\n## Implementation notes\n* We should decide if we want to include environment (probably not)\n* This would have to look up the manifest from a known location; let's ensure we agree on that location", "OPEN", 0, "scharissis", "2025-02-27T02:49:11Z", "2025-09-12T01:29:25Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86qxm5N", 198, "[nat] return test stdout & stderr", "It would be nice if `TestResult` included the stdout & stderr of each test run.\n\n```\ntype TestResult struct {\n\tMetadata types.ValidatorMetadata\n\tStatus   string\n\tError    string\n\tDuration time.Duration // Track test execution time\n}\n```\n\nExample stdout of a real test:\n\n_stdout_ of `TestSystemWrapETH`:\n```\n === RUN   TestSystemWrapETH\ntime=2025-02-20T08:09:29.878+11:00 level=DEBUG msg=\"checking balance\" wallet=0xa7b30f9e99a248c6d623eaad7bce81217bb84038 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.879+11:00 level=DEBUG msg=\"checking balance\" wallet=0xaff0ca253b97e54440965855cec0a8a2e2399896 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.881+11:00 level=DEBUG msg=\"checking balance\" wallet=0x21dd8d15472844b905e603ddd48a485a630b233b balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.882+11:00 level=DEBUG msg=\"checking balance\" wallet=0xd3f2c5afb2d76f5579f326b0cd7da5f5a4126c35 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.884+11:00 level=DEBUG msg=\"checking balance\" wallet=0x39dc844b8b461c6de6c572cad9585d9f5a8dea6a balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.885+11:00 level=DEBUG msg=\"checking balance\" wallet=0xbb900cf56918a2639daa90c3f7dc5dcd2f5b9935 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.887+11:00 level=DEBUG msg=\"checking balance\" wallet=0x9ef74f0e58fdef70c11e587a45c0a85a3258dcea balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.888+11:00 level=DEBUG msg=\"checking balance\" wallet=0x8e44febeae9c2f2bc89480ae8084328badc496c2 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.890+11:00 level=DEBUG msg=\"checking balance\" wallet=0xf08f610d1956caaab34f18e9e0a122e389496529 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.891+11:00 level=DEBUG msg=\"checking balance\" wallet=0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.892+11:00 level=DEBUG msg=\"checking balance\" wallet=0xb0994e702b603df7191cd68e6544f99126135e34 balance=\"0 ETH\" needed=\"1 ETH\"\ntime=2025-02-20T08:09:29.894+11:00 level=DEBUG msg=\"checking balance\" wallet=0x15947bf05662cad8df55f004c055939b574f18c0 balance=\"0 ETH\" needed=\"1 ETH\"\n    systest.go:161: precondition not met: no available wallet with balance of at least of 1000000000000000000\n--- SKIP: TestSystemWrapETH (0.07s)\nPASS\nok      github.com/ethereum-optimism/optimism/kurtosis-devnet/tests/interop     (cached)\n```\nNote that we have both `go test` output as well as the actual `TestSystemWrapETH` logs interleaved.", "CLOSED", 0, "scharissis", "2025-02-20T05:37:00Z", "2025-09-12T01:03:57Z", "2025-09-12T01:03:25Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86qxWfA", 197, "[nat] metrics - aggregations in service or prometheus", "In summary, do we want metrics like:\n`validations_total`\n\nOR\n`validation{result=[pass|fail|skip]}`\nand then we query/sum in prometheus like:\n`sum by (runID) validation_result{result=\"passed\"}`\n\nRelated discussion:\nhttps://github.com/ethereum-optimism/infra/pull/171#discussion_r1960132681", "OPEN", 0, "scharissis", "2025-02-20T04:44:25Z", "2025-09-12T01:15:31Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86qR-5M", 188, "[nat] Test retries", "Handle test retries, if and where appropriate.", "CLOSED", 0, "scharissis", "2025-02-17T05:52:04Z", "2025-09-12T01:05:23Z", "2025-09-12T01:05:01Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86qR-Xo", 186, "[nat] support test caching", "Support test caching. Ensure we handle this correctly.", "OPEN", 0, "scharissis", "2025-02-17T05:50:41Z", "2025-09-12T01:50:33Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86qR9WG", 183, "[nat] Log warning when no path to test is included", "When a test is referenced without including its full package path NAT must search for it. This dramatically lengthens the runtime.\nWhen this happens we should log a warning, ideally with the path to be included, as a prompt for the user to add it. Ideally this will remind them to add it before they merge the new test(s) to main.\n\nExample (bad):\n```\ntests:\n          - name: TestWallet\n```\n\nExample (good):\n```\ntests:\n          - name: TestWallet\n            package: github.com/ethereum-optimism/optimism/devnet-sdk/system\n``` ", "OPEN", 0, "scharissis", "2025-02-17T05:47:54Z", "2025-09-12T01:50:47Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86qR7nP", 181, "[nat] Use go-test API instead of cmd.Exec", "Instead of calling an external binary with cmd.Exec, use the Go standard library and invoke `go test` via its own internal API. This is tricky, but likely possible.", "OPEN", 0, "scharissis", "2025-02-17T05:42:58Z", "2025-09-12T01:51:27Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86qR43t", 179, "[nat] dashboard for localnet", "Create a nice default dashboard for a localnet so that when we bring up a local devnet we can view acceptance test metrics & results visually.", "OPEN", 0, "scharissis", "2025-02-17T05:34:38Z", "2025-09-12T01:15:19Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86pEMA3", 168, "[nat] Port Isthmus withdrawals root Action Tests", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\nPort isthmus L2 withdrawals storage root feature Action Tests into op-nat so they can be used to debug op-reth in kurtosis.\n\n**Describe the solution you'd like**\nRef https://github.com/paradigmxyz/reth/issues/14267#issuecomment-2640759609 cc @meyer9 \n\n**Describe alternatives you've considered**\nop-reth re-writing the Action Tests in rust - unfeasible currently due to lack of man power, besides doesn't scale to help any other clients than op-reth\n\n**Additional context**\nTo submit L2 withdrawal transactions, likely also need to submit Approve transaction before: https://optimistic.etherscan.io/tx/0xe210005267ed2a8ff0d3231565ada0c0ad805aeb5524984325b142a4f7bbb697. Also see preceding tx in block.", "CLOSED", 0, "emhane", "2025-02-06T19:54:19Z", "2025-09-12T11:40:08Z", "2025-09-12T11:39:43Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86n5PHx", 143, "[nat] smoke tests - op-proposer", "op-proposer proposing valid outputs. Output validity is sanity checked by the op-challenger", "CLOSED", 0, "scharissis", "2025-01-28T21:59:45Z", "2025-09-11T10:30:25Z", "2025-09-11T10:29:59Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86n5PAT", 142, "[nat] smoke tests - op-dispute-mon", "op-dispute-mon running and operating nominally", "CLOSED", 0, "scharissis", "2025-01-28T21:59:26Z", "2025-09-11T10:30:16Z", "2025-09-11T10:29:54Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86n5O0_", 141, "[nat] smoke test - op-challenger", "op-challenger running and operating nominally", "CLOSED", 0, "scharissis", "2025-01-28T21:58:59Z", "2025-09-11T10:30:13Z", "2025-09-11T10:29:48Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ86n5OX4", 140, "[nat] Proofs smoke tests", "Implement the requested [smoke tests](https://www.notion.so/oplabs/Proofs-Devnet-Acceptance-Testing-183f153ee162806f9dd6c4279967d946?pvs=4#183f153ee16280889096ec023bc7be8e) in order to support the Proofs team:\n\n1. op-challenger running and operating nominally\n2. op-dispute-mon running and operating nominally\n3. op-proposer proposing valid outputs. Output validity is sanity checked by the op-challenger", "CLOSED", 0, "scharissis", "2025-01-28T21:57:45Z", "2025-09-11T10:30:12Z", "2025-09-11T10:29:35Z", "ethereum-optimism/infra", "2025-10-13 20:33:56"]
["I_kwDOL-xLQ87MXj9e", 469, "[acceptance] Make it easy to run acceptance tests without the monorepo", "# Description\nCurrently we are quite dependant on the monorepo to run acceptance tests. To run from an external repo presents challenges.\n\n## Challenges\n\n### Contract Artifacts\nSysgo's contract-finding mechanism relies on the monorepo being present. No contract artifacts (they need to be downloaded)\n\n### L2 Challenger Setup\nsysgo\u2019s L2 challenger setup needs monorepo paths (for contracts/scripts). We see an error \u201ccould not find monorepo root\u2026\u201d comes from WithL2ChallengerPostDeploy, which scans upward for the Optimism repo.\nsysgo workaround: remove WithL2Challenger from your embedded minimal preset so the in-memory devnet doesn\u2019t require the monorepo.", "OPEN", 0, "scharissis", "2025-09-18T05:36:01Z", "2025-09-18T05:36:40Z", null, "ethereum-optimism/infra", "2025-10-13 20:33:59"]
["I_kwDOL-xLQ87LKPLV", 461, "[op-acceptor] Log all config at start-up and in the HTML report", "We now have lots of configuration options. Let's log all config at start-up and in the HTML report.\nAs part of this also update the reproducible run section:\n> \"To reproduce this run, set the following environment variables:\"", "CLOSED", 0, "scharissis", "2025-09-12T00:58:04Z", "2025-09-18T05:44:33Z", "2025-09-18T05:44:11Z", "ethereum-optimism/infra", "2025-10-13 20:33:59"]
["I_kwDOI7W0xc7Jwsj1", 1742, "Modify ingestion data quality check for Jovian", "https://github.com/ethereum-optimism/design-docs/pull/317#discussion_r2322169940\n\nToday:\n- Check that block gas used = sum of tx gas used for all txs in that block\n\nJovian:\n- Check that block gas used = sum(max(tx gas used, da footprint)) for all txs in that block\n\ncc @gpgarner @chuxinh ", "OPEN", 0, "MSilb7", "2025-09-04T18:45:04Z", "2025-09-04T18:45:04Z", null, "ethereum-optimism/op-analytics", "2025-10-13 20:34:03"]
["I_kwDOI7W0xc7NFQt1", 1747, "Bitnami images used by dagster helm chart will soon not be available", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\nThis project relies on the [dagster](https://github.com/dagster-io/dagster) helm chart. That helm chart deploys several images from `docker.io/bitnami`. Bitnami is shutting down that repository, see https://github.com/bitnami/charts/issues/35164. Most images are being migrated to `docker.io/bitnamilegacy` but not all are. Dagster has updated [some](https://github.com/search?q=repo%3Adagster-io%2Fdagster+bitnamilegacy&type=code) images to point to the new `docker.io/bitnamilegacy` repository (see chart version `1.11.11`), but not all (as far as I can tell, they forgot [bitnami/minideb](https://github.com/dagster-io/dagster/blob/fedf5745ba90331eb99485832a41171f21f123b5/helm/dagster/values.yaml#L868)). This may be due to the fact that `bitnami/minideb` was not migrated to `docker.io/bitnamilegacy`...\n\nThe image is still up right now, but it may be removed very soon.\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "falcorocks", "2025-09-22T12:21:56Z", "2025-09-22T12:21:56Z", null, "ethereum-optimism/op-analytics", "2025-10-13 20:34:18"]
["I_kwDOH2Qg5s7LRJIt", 679, "Receipt Correction: Failed to decode RLP receipts ( v1.101602.0 )", "#### System information\n\nGeth version: v1.101602.0\nCL client & version: op-node v1.13.6\nOS & Version: Ubuntu host with Docker\nCommit hash : (if `develop`)\n\nNetwork: op-mainnet during full sync\n\n#### Expected behaviour\n\nShould not crash with Receipt Correction error during sync\n\n#### Actual behaviour\n\n```\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n WARN [09-12|12:12:29.712] Receipt Correction: Failed to decode RLP receipts err=\"rlp: expected input string or byte for types.Bloom, decoding into (types.Receipts)[0](types.receiptRLP).Bloom\"\n```\n\n#### Steps to reproduce the behaviour\n\nGeth options\n\n```\n      --op-network=\"op-mainnet\"\n      --rollup.historicalrpc=\"https://mainnet.optimism.io\"\n      --rollup.sequencerhttp=\"https://mainnet-sequencer.optimism.io\"\n      --rollup.disabletxpoolgossip=\"true\"\n      --syncmode=\"snap\"\n      --state.scheme=\"path\"\n      --history.logs=\"0\"\n      --history.transactions=\"0\"\n```\n\nop-node options\n\n```\n      op-node\n      --network=\"op-mainnet\"\n      --syncmode=\"execution-layer\"\n      --l1.rpckind=\"standard\"\n      --l1.trustrpc\n```\n\n#### Backtrace\n\n````\n[backtrace]\n````\n\nWhen submitting logs: please submit them as text and not screenshots.\n", "CLOSED", 0, "cpuchainorg", "2025-09-12T12:19:12Z", "2025-09-21T18:18:49Z", "2025-09-16T11:13:13Z", "ethereum-optimism/op-geth", "2025-10-13 20:34:26"]
["I_kwDOH2Qg5s7N6fWc", 688, "Deduplicate Engine API validations in `Miner.prepareWork`", "We duplicate quite a few validation checks of the payload attributes in `Miner.prepareWork` that are also already done as part of the Engine API validation checks in `eth/catalyst/api_optimism.go`. And we keep adding new checks for new features.\n\nWe also keep bloating up the tests in `miner/payload_building_test.go` to cover all those new checks.\n\nWe should consider dropping all such validations and the tests and just assume that the payload attributes are valid when `Miner.generateWork` is called, because the only external entry point to the miner is via the Engine API `engine_forkchoiceUpdated`. This would save code and headache while not making the overall software less secure. I'm not aware how invalid payload attributes should reach the miner if all invalid attributes are already caught early during FCU call attributes validation.", "OPEN", 0, "sebastianst", "2025-09-25T18:23:13Z", "2025-09-25T19:46:09Z", null, "ethereum-optimism/op-geth", "2025-10-13 20:34:29"]
["I_kwDOH2Qg5s7OxJDa", 691, "jovian: Use `blobGasUsed` to store DA footprint", "The current implementation of DA footprint uses the `gasUsed` field to store the max of total EVM gas used and DA footprint. We have now agreed to switch to using the `blobGasUsed` header field instead, storing only the block total DA footprint inside of it and then determining the max inside the base fee update function.", "CLOSED", 0, "sebastianst", "2025-09-30T11:41:48Z", "2025-10-17T17:49:29Z", "2025-10-17T17:49:29Z", "ethereum-optimism/op-geth", "2025-10-13 20:34:32"]
["I_kwDOH2Qg5s7NIjFS", 685, "ChainConfig.BlobConfig always uses default configs", "While reviewing this I noticed it's not using the receiver `c` at all, and it looks like an upstream config bug.\r\nIt was fixed here, to use the actual config contents: https://github.com/ethereum/go-ethereum/pull/32579\r\nBut that fix wasn't included in the 1.16.3 release, so it will use the default configs instead here (!!!).\r\nWe should be aware of this difference; usage of the blob config won't be accurate on custom BPO settings.\r\n\r\n_Originally posted by @protolambda in https://github.com/ethereum-optimism/op-geth/pull/684#discussion_r2368631950_\r\n            ", "CLOSED", 0, "geoknee", "2025-09-22T15:34:28Z", "2025-10-01T10:24:32Z", "2025-10-01T10:24:32Z", "ethereum-optimism/op-geth", "2025-10-13 20:34:32"]
["I_kwDOH2Qg5s7MNgyp", 682, "op-geth: prepare for Fusaka", "This includes:\n- [x]  op-geth upstream merge to 1.16.3 \n- [x]  op-geth upstream merge to Fusaka release for Sepolia achieved by the cherry pick https://github.com/ethereum-optimism/op-geth/pull/690\n- [ ] op-geth upstream merge or cherry pick for Mainnet", "OPEN", 0, "geoknee", "2025-09-17T12:30:03Z", "2025-10-02T11:02:23Z", null, "ethereum-optimism/op-geth", "2025-10-13 20:34:32"]
["I_kwDOL-xLQ86oj5jr", 158, "[nat]: run in kurtosis", "Linking https://github.com/ethpandaops/optimism-package/issues/152\n\nIdeally we can run `op-nat` in kurtosis so that we can shift left our ability to run and add network acceptance tests", "CLOSED", 0, "tynes", "2025-02-03T16:27:16Z", "2025-09-05T16:11:56Z", "2025-09-05T16:11:34Z", "ethereum-optimism/infra", "2025-10-13 20:34:36"]
["I_kwDOLB-lzc7J6N5Y", 755, "Be explicit about the requirement for `PayloadAttributes.MinBaseFee` to be `nil` pre Jovian.", "If we go this way, the specs should be updated to be explicit about the requirement to be `nil` pre Jovian.\r\n\r\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/op-geth/pull/666#discussion_r2321238041_\r\n            ", "CLOSED", 0, "geoknee", "2025-09-05T13:02:10Z", "2025-09-05T20:12:58Z", "2025-09-05T20:12:58Z", "ethereum-optimism/specs", "2025-10-13 20:34:52"]
["I_kwDOLB-lzc7M9Ayr", 787, "Proposal: Use SSZ hash_tree_root instead of keccak(payload) for SequencerCommitment signatures", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\n\nCurrently, sequencer commitments (preconfirmations) are signed over\n\n```\n\nkeccak256(\ndomain ++ chain\\_id ++ keccak256(payload)\n)\n\n````\n\nThis ties the signature to the raw byte serialization of the full payload.  \nAs a result, verification always requires transmitting the *entire payload*. This makes proofs unnecessarily large and prevents the use of Merkle proofs for lightweight verification. For light clients and zk-based systems (e.g. Colibri stateless clients), this is a major efficiency bottleneck.\n\n---\n\n**Describe the solution you'd like**\n\nDefine the signature message using an **SSZ container and its `hash_tree_root`**, similar to Ethereum consensus:\n\n```python\nclass SequencerCommitment(Container):\n    parent_beacon_block_root: Bytes32\n    execution_payload_header: ExecutionPayloadHeader\n````\n\nThen the signing root becomes:\n\n```\nkeccak256(\n    domain ++ chain_id ++ hash_tree_root(SequencerCommitment)\n)\n```\n\nThis enables:\n\n* **Merkle-friendly proofs**: clients can verify only the necessary fields.\n* **Smaller proofs**: no need to transmit the full payload, only Merkle branches.\n* **Consistency with Ethereum consensus**: aligns with how signing roots are already defined.\n* **Forward-compatibility**: SSZ evolution is safer than raw byte hashing.\n\n---\n\n**Describe alternatives you\u2019ve considered**\n\n* **Status quo**: keep `keccak(payload)` \u2013 works but bloats proofs and prevents efficient verification.\n* **Application-layer Merkleization**: replicate hashing on top of the keccak payload, but this duplicates work and doesn\u2019t integrate cleanly with existing SSZ tooling.\n\n---\n\n**Additional context**\n\n* Current spec reference: [[Rollup Node P2P \u2013 Block signatures](https://specs.optimism.io/protocol/rollup-node-p2p.html)](https://specs.optimism.io/protocol/rollup-node-p2p.html)\n* Ethereum SSZ reference: [SSZ hash\\_tree\\_root](https://ethereum.org/en/developers/docs/data-structures-and-encoding/ssz/)\n* Backwards compatibility path: introduce a **new topic/domain (e.g. v5)**, sequencers can dual-sign during migration, clients accept both formats.\n\nThis change would drastically reduce proof sizes and make OP Stack more compatible with stateless light clients and zk-provers.\n\n", "OPEN", 0, "simon-jentzsch", "2025-09-21T19:40:34Z", "2025-09-21T19:40:34Z", null, "ethereum-optimism/specs", "2025-10-13 20:34:58"]
["I_kwDOLB-lzc7MrIoZ", 781, "Enshrine new convention for Network Upgrade Transactions which deploy new contracts", "Currently, for transactions such as these (example https://specs.optimism.io/protocol/isthmus/derivation.html#l1block-deployment) we choose the `from` address to be a unique account which has `nonce=0`. The choice of `from` affects the deployment address of the contract. Using a fresh account means we can safely set `nonce:0` in the upgrade transaction. \n\nThat unique account tends to be chosen in the `0x421...` namespace. Choosing it correctly involves checking the entire spec history to ensure we aren't reusing an address. This is error prone, particularly when forks get reordered. \n\nA better pattern is \n\n> take the first 20 bytes of the source hash as sender address. That way you have a guaranteed unique deployer address, and thus nonce 0, and thus a unique and deterministic deployed contract address. Without making it coupled to bytecode, so the proxy upgrade tx input stays stable on dev changes\n\nh/t to @protolambda for this idea. \n\nThe source hash is defined here https://specs.optimism.io/protocol/deposits.html#source-hash-computation\n\nNote: the idea of using a CREATE2 type deployment was considered, but discarded in favour of the above approach (in particular it would couple the deployment address and tx input to the contract bytecode, which is undesirable). ", "OPEN", 0, "geoknee", "2025-09-19T10:37:39Z", "2025-09-19T13:34:41Z", null, "ethereum-optimism/specs", "2025-10-13 20:34:58"]
["I_kwDOLB-lzc7Mg31Q", 779, "Improve specs upgrade tx generator script", "We may want to improve the upgrade tx generator script to contain the helper functions from #778 (not committed) so that each hardfork spec only needs to record the invocation env vars. See discussion below for details.\r\n\r\n> these look like generic functionality, could this be put into a reusable script so that only the env vars and the contracts array are in a forks specific generator script?\r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/specs/pull/778#discussion_r2359087425_\r\n            ", "CLOSED", 0, "sebastianst", "2025-09-18T16:44:12Z", "2025-09-19T13:05:40Z", "2025-09-19T13:05:40Z", "ethereum-optimism/specs", "2025-10-13 20:34:58"]
["I_kwDOLB-lzc7MMZUE", 777, "Allow CL clients to parse future SystemConfig.ConfigUpdate events without critical error", "See this P/PS https://www.notion.so/oplabs/P-PS-Allow-CL-clients-to-parse-future-SystemConfig-ConfigUpdate-events-without-critical-error-269f153ee16280fe9c5eec1e7b6640aa?d=0a6f153ee1628275938583be004777b6", "OPEN", 0, "geoknee", "2025-09-17T11:04:14Z", "2025-09-17T11:04:14Z", null, "ethereum-optimism/specs", "2025-10-13 20:34:58"]
["I_kwDOLB-lzc7Lx1O6", 771, "Clean up `protocol/system-config.md`", "For the config update enum, we should specify the number as well as the canonical name (e.g., `MIN_BASE_FEE` and `6`, not just `MIN_BASE_FEE`).\n\nFor config updates added by hard forks, we should consider linking to fork-specific specs to avoid duplication and spec bloat.\n\nFor context and motivation: https://github.com/ethereum-optimism/specs/pull/767#discussion_r2344100039", "OPEN", 0, "joshklop", "2025-09-15T17:21:04Z", "2025-09-16T16:48:25Z", null, "ethereum-optimism/specs", "2025-10-13 20:34:58"]
["I_kwDOLB-lzc7L0zca", 773, "Update the Jovian `daFootprintGasScalar` default value when finalized", "", "OPEN", 0, "joshklop", "2025-09-15T21:41:39Z", "2025-09-23T14:49:38Z", null, "ethereum-optimism/specs", "2025-10-13 20:35:02"]
["I_kwDOLB-lzc7Lxy1X", 770, "Decide how `daFootprintGasScalar` and `minBaseFee` interact with the standard config", "In other words: should they appear in `protocol/configurability.md`? If so, how?\n\nFor context: https://github.com/ethereum-optimism/specs/pull/767#discussion_r2349570530", "OPEN", 0, "joshklop", "2025-09-15T17:17:24Z", "2025-09-23T14:49:19Z", null, "ethereum-optimism/specs", "2025-10-13 20:35:02"]
["I_kwDOLB-lzc7M8-Q9", 786, "Its done", "Its done\r\n\r\n_Originally posted by @ajit2903 in https://github.com/ethereum-optimism/specs/pull/785#pullrequestreview-3250132838_\r\n            ", "CLOSED", 0, "ajit2903", "2025-09-21T19:26:56Z", "2025-09-29T07:52:06Z", "2025-09-29T07:52:06Z", "ethereum-optimism/specs", "2025-10-13 20:35:08"]
["I_kwDOKIsnqM7O5Jgh", 1236, "Better justfile command input validation", "When a user incorrectly uses a command in the `justfile` (e.g. sign) they're not given a meaningful error message to tell them what they've done wrong. A rececnt example is:\n\nError:\n```\nError: bad file '/Users/matthewslipper/dev/superchain-ops/src/addresses.toml': error retrieving table [opsep] value: %!w(<nil>)\nError (get-safe.sh): SAFE_NAME 'FoundationOperationsSafe' not found in /Users/matthewslipper/dev/superchain-ops/src/tasks/eth/022-U16a-opcm-upgrade-v410-base/config.toml\n```\n\nby using the command: \n```\njust --dotenv-path $(pwd)/.env sign foundation-operations 2\n```\n\nIn reality, the command the signer should've been using is:\n```\nHD_PATH=2 just --dotenv-path $(pwd)/.env sign foundation-operations \n```\n\nThe interface had changed and they were using the old interface for the sign command. \n\nI think there is a broader question of whether we want to get rid of the justfile entirely and rely on a more robust cli library. Perhaps one from the Go ecosystem like op-deployer makes use of.", "OPEN", 0, "blmalone", "2025-09-30T21:12:04Z", "2025-09-30T21:13:02Z", null, "ethereum-optimism/superchain-ops", "2025-10-13 20:35:20"]
["I_kwDOLB-lzc7KKFIw", 762, "# Funded Builder Addresses\n\nThis file documents builder addresses that have received mainnet ETH funding for use in the OP Stack, testing, or builder onboarding.\n\n| Address                                    | Amount (ETH) | Mainnet Block | Builder Name   | Notes                    |\n|---------------------------------------------|--------------|---------------|---------------|--------------------------|\n| 0x06EE840642a33367ee59fCA237F270d5119d1356 | 64           | 23311566      | Titan builder | Received 64 ETH funding. |\n", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Is your feature request related to a problem? Please describe.**\n<!--\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n-->\n\n**Describe the solution you'd like**\n<!--\nA clear and concise description of what you want to happen.\n-->\n\n**Describe alternatives you've considered**\n<!--\nA clear and concise description of any alternative solutions or features you've considered.\n-->\n\n**Additional context**\n<!--\nAdd any other context or screenshots about the feature request here.\n-->", "CLOSED", 0, "ajit2903", "2025-09-07T13:45:11Z", "2025-09-10T22:43:36Z", "2025-09-10T22:43:36Z", "ethereum-optimism/specs", "2025-10-13 20:35:27"]
["I_kwDODjvEJM7Kk6sg", 17395, "[DA Footprint Limit] add unit tests", "In op-geth \n \n* Build a block with a fixed DA footprint\n* vary the `da_footprint_gas_scalar`\n* ensure `gasUsed` changes once the scaled up value exceeds the actual gas used\n\nstill open how to do it the easiest way, reusing existing test utils.", "CLOSED", 0, "geoknee", "2025-09-09T14:12:13Z", "2025-10-16T16:07:24Z", "2025-10-16T16:07:24Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7KgiNf", 17387, "[op-acceptance-test] TestOperatorFeeDevstack", "This test is failing on Eris with logs:\n\n```\nt=2025-09-09T06:43:51.945+0000 lvl=info msg=\"initializing orchestrator\" backend=sysext\n=== RUN   TestOperatorFeeDevstack\n    system.go:28:               INFO [09-09|06:43:51.945] Interop is inactive, skipping clusters\n    system.go:51:               INFO [09-09|06:43:51.945] Interop is inactive, skipping supervisors\n    l2.go:391:             INFO [09-09|06:43:51.948] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    l2.go:391:             INFO [09-09|06:43:51.952] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    operator_fee_test.go:32:             INFO [09-09|06:44:03.019] Ensuring L2 is synced with current L1 state...\n    operator_fee_test.go:32:\n=== RUN   TestOperatorFeeDevstack/ZeroFees\n    assertions.go:369:             ERROR[09-09|06:44:23.659]\n    assertions.go:369:             \tError Trace:\t/data/optimism/op-devstack/dsl/operator_fee.go:84\n    assertions.go:369:             \t            \t\t\t\t/data/optimism/op-acceptance-tests/tests/isthmus/operator_fee/operator_fee_test.go:46\n    assertions.go:369:             \t            \t\t\t\t/data/optimism/op-devstack/devtest/testing.go:231\n    assertions.go:369:             \tError:      \tReceived unexpected error:\n    assertions.go:369:             \t            \tupstream dep 1 (*plan.Lazy[struct {}]) failed: operation failed permanently after 5 attempts: insufficient funds for gas * price + value: balance 0, tx cost 24394653041472, overshot 24394653041472\n    assertions.go:369:             \tTest:       \tTestOperatorFeeDevstack\n    assertions.go:369:\n    testing.go:1577: test executed panic(nil) or runtime.Goexit: subtest may have called FailNow on a parent test\n--- FAIL: TestOperatorFeeDevstack (31.71s)\n    --- FAIL: TestOperatorFeeDevstack/ZeroFees (15.60s)\nFAIL\n\nExiting, code: 1\nFAIL\tgithub.com/ethereum-optimism/optimism/op-acceptance-tests/tests/isthmus/operator_fee\t35.035s\n```", "OPEN", 0, "scharissis", "2025-09-09T09:29:15Z", "2025-09-09T09:29:15Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7Kggdy", 17386, "[op-acceptance] TestFees is failing on Eris", "This test is failing on Eris with logs:\n\n```\nt=2025-09-09T06:49:23.939+0000 lvl=info msg=\"initializing orchestrator\" backend=sysext\n=== RUN   TestFees\n    system.go:28:               INFO [09-09|06:49:23.939] Interop is inactive, skipping clusters\n    system.go:51:               INFO [09-09|06:49:23.939] Interop is inactive, skipping supervisors\n    l2.go:391:             INFO [09-09|06:49:23.942] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    l2.go:391:             INFO [09-09|06:49:23.946] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    assertions.go:369:             ERROR[09-09|06:49:39.570]\n    assertions.go:369:             \tError Trace:\t/data/optimism/op-devstack/dsl/operator_fee.go:84\n    assertions.go:369:             \t            \t\t\t\t/data/optimism/op-acceptance-tests/tests/fjord/fees_test.go:25\n    assertions.go:369:             \tError:      \tReceived unexpected error:\n    assertions.go:369:             \t            \tupstream dep 1 (*plan.Lazy[struct {}]) failed: operation failed permanently after 5 attempts: insufficient funds for gas * price + value: balance 0, tx cost 25606600503012, overshot 25606600503012\n    assertions.go:369:             \tTest:       \tTestFees\n    assertions.go:369:\n--- FAIL: TestFees (15.63s)\nFAIL\n\nExiting, code: 1\nFAIL\tgithub.com/ethereum-optimism/optimism/op-acceptance-tests/tests/fjord\t18.896s\n```", "OPEN", 0, "scharissis", "2025-09-09T09:27:49Z", "2025-09-09T09:27:49Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7KgbQO", 17385, "[op-acceptance-tests] TestERC20Bridge fails on Eris", "This test fails on Eris with logs:\n\n```\nt=2025-09-09T06:45:11.299+0000 lvl=info msg=\"initializing orchestrator\" backend=sysext\n=== RUN   TestERC20Bridge\n    system.go:28:               INFO [09-09|06:45:11.299] Interop is inactive, skipping clusters\n    system.go:51:               INFO [09-09|06:45:11.299] Interop is inactive, skipping supervisors\n    l2.go:391:             INFO [09-09|06:45:11.302] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    l2.go:391:             INFO [09-09|06:45:11.306] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    eoa.go:176:                 INFO [09-09|06:45:33.942] deployed WETH                            chainID=11155111 address=0xA04C1B7e122AcAFbB7DAeB36Cd26816950556F62\n    erc20_bridge_test.go:30:    INFO [09-09|06:45:33.942] Deployed WETH token on L1                address=0xA04C1B7e122AcAFbB7DAeB36Cd26816950556F62\n    erc20_bridge_test.go:39:    INFO [09-09|06:45:33.942] Minting WETH tokens on L1                amount=\"10,000,000 gwei\"\n    assertions.go:369:             ERROR[09-09|06:45:49.613] \"\\n\\tError Trace:\\t/data/optimism/op-devstack/dsl/eoa.go:273\\n\\t            \\t\\t\\t\\t/data/optimism/op-acceptance-tests/tests/isthmus/erc20_bridge/erc20_bridge_test.go:43\\n\\tError:      \\tNot e\nqual: \\n\\t            \\texpected: 10000000000000000\\n\\t            \\tactual  : 0\\n\\t            \\t\\n\\t            \\tDiff:\\n\\t            \\t--- Expected\\n\\t            \\t+++ Actual\\n\\t            \\t@@ -1,3 +1,3 @@\\n\\t            \\t (eth.ETH) (len=4) {\\n\\\nt            \\t- (uint64) 10000000000000000,\\n\\t            \\t+ (uint64) 0,\\n\\t            \\t  (uint64) 0,\\n\\tTest:       \\tTestERC20Bridge\\n\\tMessages:   \\tmust have expected token balance\\n\"\n--- FAIL: TestERC20Bridge (38.31s)\nFAIL\n\nExiting, code: 1\nFAIL\tgithub.com/ethereum-optimism/optimism/op-acceptance-tests/tests/isthmus/erc20_bridge\t41.551s\n```", "OPEN", 0, "scharissis", "2025-09-09T09:23:24Z", "2025-09-09T09:23:24Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7KgWWz", 17384, "[op-acceptance-tests] TestL1ToL2Deposit fails on Eris", "This test is failing on Eris devnet, with logs:\n\n```\nt=2025-09-09T06:47:54.970+0000 lvl=info msg=\"initializing orchestrator\" backend=sysext\n=== RUN   TestL1ToL2Deposit\n    system.go:28:               INFO [09-09|06:47:54.970] Interop is inactive, skipping clusters\n    system.go:51:               INFO [09-09|06:47:54.970] Interop is inactive, skipping supervisors\n    l2.go:391:             INFO [09-09|06:47:54.973] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    l2.go:391:             INFO [09-09|06:47:54.977] Loaded devnet keys: 42 L1 system keys, 0 L2 user keys\n    el.go:61:                   INFO [09-09|06:47:55.585] Waiting for online\n    deposit_test.go:32:             INFO [09-09|06:48:03.398] Alice L1 address 0x079c64081364F6fdc5Acd5Be30f794d50A23055a\n    deposit_test.go:32:\n    deposit_test.go:34:             INFO [09-09|06:48:03.412] Alice L1 balance 0\n    deposit_test.go:34:\n    deposit_test.go:38:             INFO [09-09|06:48:03.432] Alice L2 balance 0\n    deposit_test.go:38:\n--- FAIL: TestL1ToL2Deposit (24.35s)\npanic: negative amounts are not supported [recovered]\n\tpanic: negative amounts are not supported\n\ngoroutine 8410 [running]:\ntesting.tRunner.func1.2({0x2543e40, 0x3ab4a60})\n\t/usr/local/go/src/testing/testing.go:1632 +0x230\ntesting.tRunner.func1()\n\t/usr/local/go/src/testing/testing.go:1635 +0x35e\npanic({0x2543e40?, 0x3ab4a60?})\n\t/usr/local/go/src/runtime/panic.go:785 +0x132\ngithub.com/ethereum-optimism/optimism/op-service/eth.WeiBig(0x0?)\n\t/data/optimism/op-service/eth/ether.go:254 +0x85\ngithub.com/ethereum-optimism/optimism/op-acceptance-tests/tests/base/deposit.TestL1ToL2Deposit(0xc0001844e0?)\n\t/data/optimism/op-acceptance-tests/tests/base/deposit/deposit_test.go:59 +0x73e\ntesting.tRunner(0xc0001844e0, 0x37ac560)\n\t/usr/local/go/src/testing/testing.go:1690 +0xf4\ncreated by testing.(*T).Run in goroutine 1\n\t/usr/local/go/src/testing/testing.go:1743 +0x390\nFAIL\tgithub.com/ethereum-optimism/optimism/op-acceptance-tests/tests/base/deposit\t27.607s\n```", "CLOSED", 0, "scharissis", "2025-09-09T09:19:30Z", "2025-09-09T22:35:24Z", "2025-09-09T22:35:24Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7KTvbu", 17365, "op-deployer: not deploying OPChain on Alt L1 (non-standard chain)", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\nMight be related or similar to #16853 \n\n**Bug Description**\n<!--\nA clear and concise description of what the bug is.\n-->\nI am trying to deploy an OP Stack chain on the Citrea L2 (with AltDA config). When I try to deploy using `op-deployer apply`, the superchain and OP Implementations get deployed but always start failing during the `deploy-opchain` stage. \n\n\n**Steps to Reproduce**\n<!--\n1. Outline the steps to reproduce the bug.\n2. Be specific and detailed to help developers replicate the issue.\n-->\n\ncurrently I am checking out to a specific op-deployer version. \n\n```\ncd op-deployer\ngit checkout op-deployer/v0.3.2\njust build\n```\n\nSharing my intent.toml below\n\n```\nconfigType = \"custom\"\nl1ChainID = 5115\nfundDevAccounts = false\nuseInterop = false\nl1ContractsLocator = \"tag://op-contracts/v3.0.0\"\nl2ContractsLocator = \"tag://op-contracts/v3.0.0\"\n \n[superchainRoles]\nproxyAdminOwner = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\nprotocolVersionsOwner = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\nguardian = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\n \n[[chains]]\nid = \"0x000000000000000000000000000000000000000000000000000000000000c388\"  //50056\nbaseFeeVaultRecipient = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\nl1FeeVaultRecipient = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\nsequencerFeeVaultRecipient = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\neip1559DenominatorCanyon = 250\neip1559Denominator = 50\neip1559Elasticity = 6\noperatorFeeScalar = 0\noperatorFeeConstant = 0\n[chains.roles]\n   l1ProxyAdminOwner = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\n   l2ProxyAdminOwner = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\n   systemConfigOwner = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\n   unsafeBlockSigner = \"0xb019a2D88783392A558258D669865C7Ad4e39ec5\"\n   batcher = \"0x0f01190401D7A8ade6A4C7855A5FA600631C84C0\"\n   proposer = \"0xa972A8F63d9B39dBe39e10cDfc0Df92c9425287e\"\n   challenger = \"0x0e74810f0AB1953335A24059DaeFA5f51B003632\"\n[chains.dangerousAltDAConfig]\n   useAltDA = true\n   daCommitmentType = \"GenericCommitment\"\n   daChallengeWindow = 160\n   daResolveWindow = 160\n   daBondSize = 1000000\n   daResolverRefundPercentage = 0\n\n```\n\nrun `op-deployer apply`  with Citrea RPC as the L1 RPC\n\n```\n./bin/op-deployer apply --workdir .deployer \\\n--l1-rpc-url <RPC_URL_FOR_L1> \\\n--private-key <DEPLOYER_PRIVATE_KEY_HEX>\n```\n\n**Expected behavior**\n<!--\nA clear and concise description of what you expected to happen.\n-->\n\nSuccessful deployment of OP Contracts on alt L1.\n\n**Environment Information:**\n<!--\n - Operating System: [e.g. Ubuntu 20.04]\n - Package Version (or commit hash): [e.g. op-node v1.5.1, op-node c934019]\n-->\n\n- Operating System: MacOS\n- Version: `op-deployer/v0.3.2`\n\n\n\n**Configurations:**\n<!--\nCommand line flags or environment variables you're using.\n-->\n\n**Logs:**\n<!--\nLogs and/or error messages that help illustrate the issue.\n-->\n\nThis above `op-deployer apply` command fails and returns the following:\n\n```\nNFO [09-08|16:40:11.228] Initialized path database                readonly=true cache=0.00B buffer=0.00B history=0\nINFO [09-08|16:40:11.228] initializing pipeline                    stage=init strategy=live\nINFO [09-08|16:40:11.689] superchain deployment not needed         stage=deploy-superchain\nINFO [09-08|16:40:11.690] implementations deployment not needed    stage=deploy-implementations\nINFO [09-08|16:40:11.691] deploying OP chain using local allocs    stage=deploy-opchain id=0x000000000000000000000000000000000000000000000000000000000000c388\nWARN [09-08|16:41:08.447] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:11.314] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:13.985] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:16.946] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:19.712] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:22.377] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:25.063] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:27.767] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:30.560] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:33.233] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:35.913] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:38.565] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:41.238] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:43.877] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:46.514] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:49.149] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:51.791] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:54.462] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:57.122] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:41:59.765] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:02.434] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:05.093] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:07.789] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:10.432] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:13.085] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:15.747] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:18.436] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:21.082] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:23.724] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nWARN [09-08|16:42:26.364] Failed to create a transaction, will retry service=transactor err=\"failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nINFO [09-08|16:42:26.364] transaction broadcasted                  id=5c3586..5cecbf nonce=126\nERROR[09-08|16:42:26.364] transaction failed                       id=5c3586..5cecbf completed=1 total=1 err=\"failed to create the tx: operation failed permanently after 30 attempts: failed to call: execution reverted: 0\\x11d%, reason: 0x30116425\"\nApplication failed: failed to broadcast stage deploy-opchain-0x000000000000000000000000000000000000000000000000000000000000c388: 1 error occurred:\n        * failed to create the tx: operation failed permanently after 30 attempts: failed to call: execution reverted: 0d%, reason: 0x30116425\n\n```\n\n**Additional context**\n<!--\nAdd any other context about the problem here.\n-->\n\nTrying to run an OP Chain on Citrea (non-standard EVM compatible chain) (Citrea with an AltDA config also. (Although AltDA config shouldn't necessarily be an issue for contract deployment afaik. \n\n---\n\n\u26a0\ufe0f **Notice:** Issues that do not include the following sections will be subject to closure:\n- Bug Description\n- Steps to Reproduce\n- Environment Information\n\nPlease ensure all required sections are filled out accurately to expedite the debugging process and improve issue resolution efficiency.", "OPEN", 0, "robin-rrt", "2025-09-08T13:12:07Z", "2025-09-08T13:12:07Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7JyMbt", 17332, "Add soneium to contract upgrade tests", "We should add soneium to the contract upgrade tests in CI, simple, just need to configure it\r\n\r\n---\r\n\r\nwe should add soneium here too\r\n\r\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/optimism/pull/17268#discussion_r2322905549_\r\n            ", "OPEN", 0, "smartcontracts", "2025-09-04T20:32:08Z", "2025-09-11T13:15:43Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7JwbRf", 17328, "upgrade rbuilder and node-reth in favor of the reth's chain stall fix", "https://github.com/paradigmxyz/reth/issues/18205#issuecomment-3244992723\n\nThis issue can cause rbuilder-led chain stalls in mainnet. Therefore, once a solution to this problem lands in reth, get that fix propagated to op-rbuilder and base/node-reth, and further use the upgraded image for deployments.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-04T18:28:47Z", "2025-09-11T05:54:45Z", "2025-09-11T05:54:45Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7Js9gP", 17319, "Remove prod-mainnet-sequencer-0 as a voter in mainnet", "That's because it's anyway non-nvme and intentionally kept to be non-flashblocks oriented. Therefore, it will act like a backup sequencer in case of Flashblocks-catastrophes.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-04T14:17:54Z", "2025-09-09T06:40:27Z", "2025-09-09T06:40:24Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7Js8cD", 17318, "create a new sequencer in mainnet with flashblocks called op-opn-geth-f-sequencer-3", "This will ensure an odd number of voters in the finally Raft conductor set in mainnet.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-04T14:16:48Z", "2025-09-09T06:39:55Z", "2025-09-09T06:39:04Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7Js7jj", 17317, "enable flashblocks on op-opn-geth-f-sequencer-1 mainnet", "", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-04T14:15:53Z", "2025-09-11T06:46:54Z", "2025-09-11T06:46:54Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7FShov", 17002, "[Scalar Fix] Implement specification", "Implement the specification in https://github.com/ethereum-optimism/design-docs/pull/299.", "CLOSED", 0, "mslipper", "2025-08-11T13:06:23Z", "2025-10-16T15:33:05Z", "2025-10-16T15:33:05Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7EhQsD", 16975, "kurtosis: Ability to use local op-geth build", "It would be great to be able to tell kurtosis to use a local op-geth build (e.g. the one linked to in `go.mod`), on-demand building an op-geth Docker image.\n\nKurtosis currently just uses the optimism-package op-geth pinned version, which is the latest op-geth release. This means we cannot test local op-geth modifications in Kurtosis.", "OPEN", 0, "sebastianst", "2025-08-06T14:54:56Z", "2025-09-08T12:21:17Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7CV9tM", 16810, "[Tracking] [Scalar Fix] Operator Fee Scalar Fix", "", "OPEN", 0, "mslipper", "2025-07-24T16:46:23Z", "2025-09-12T12:13:17Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM61mqR-", 15753, "kurtosis-devnet: Add genesis checks to optimism-package", "We need to make sure that the L2s advance past genesis before we proclaim a kurtosis devnet as complete.", "CLOSED", 0, "janjakubnanista", "2025-05-07T18:17:03Z", "2025-09-10T20:21:10Z", "2025-09-10T20:21:10Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM6zut2m", 15537, "[kurtosis-devnet] investigate selective service selection", "We want to enable users to selectively start services. This would enable us to, for example, start services using the op-signer but also start them without.\nWe should see if we can create a dependency graph for a specific configuration", "CLOSED", 0, "serpixel", "2025-04-23T22:16:44Z", "2025-09-10T20:16:05Z", "2025-09-10T20:16:05Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM6v3AZl", 15050, "kurtosis-devnet: extract / map L1 chain config", "See https://github.com/ethereum-optimism/optimism/pull/14996 for context and current workaround", "CLOSED", 0, "sigma", "2025-03-26T18:07:06Z", "2025-09-10T20:20:14Z", "2025-09-10T20:20:14Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM6qPqN_", 14390, "kurtosis idempotency / performance", "This is an umbrella issue / high-level plan to get to a better state for kurtosis devnet experience.\n \n\n1. issue: contracts bundle not reproducible (PR: #14365 )\n    - tweak tarball to be bit-reproducible\n    - put it in predictable location so kurtosis sees it as identical (kurtosis issue workaround)\n\n2. issue: docker images not reproducible enough\n   - make sure we disable attestations for dev builds (#14410)\n   - uniquely identify images (kurtosis doesn't moving tags well) (#14411) \n\n3. issue: docker images are still slow to (re-)build (#14409)\n    - make sure we dockerignore everything we can, so that nop-builds are as fast as possible (context transfer is costly)\n\n4. issue: flip/flopping between packages (fileserver / optimism-package) in an enclave ruins idempotency\n    - avoid re-running fileserver when artifacts are identical (#14413)\n    - move contracts bundle into enclave artifact\n        - wrapper needs to create it (note: from the outside we can\u2019t mutate an artifact, so use \u201ccontracts-$HASH\u201d) (#14932)\n        - teach optimism-package to understand \u201cenclave://contracts-$HASH\u201d (ethpandaops/optimism-package#203)\n            - add to list of mounts for op-deployer\n            - leverage op-deployer file locator to point to the mount\n\n5. issue: changes in proofs still churns too much\n    - integrate nginx server into optimism-package to cache-proxy locator by default (well, at least proxy so the URL is predictable, but a cache would be nice to make the whole system more self-contained)\n    - make nginx image tunable\n    - make wrapper build custom nginx, embedding proofs\n        - reason: most of the \u201cbuild\u201d time is spent extracting the proofs locally from a docker image, only to put them in another. We can avoid the roundtrip by creating an  nginx container pre-populated from  the proofs build\n        - adjust nginx config to  serve these proofs on a non-proxied URL\n    - tie that nginx server to the deployment of op-challenger\n\n6. Issue: embedding the devnet descriptor breaks idempotency (#14412)\n    - purely a bug in the wrapper, re-generating a descriptor in-place fails\n\nFinal outcome (hopefully !):\n\n- proper incremental builds, leveraging kurtosis known dependency graph\n- docker images are bit-reproducible, so idempotent builds don\u2019t trigger enclave churn\n- proofs build is as fast as possible (in the order of seconds, not minutes), and doesn\u2019t trigger enclave churn beyond fileserver redeployment\n- only one package run in the devnet enclave, which makes kurtosis\u2019 job tracking changes easier", "CLOSED", 0, "sigma", "2025-02-16T17:34:23Z", "2025-09-10T20:14:10Z", "2025-09-10T20:14:10Z", "ethereum-optimism/optimism", "2025-10-13 20:35:28"]
["I_kwDODjvEJM7N6z-a", 17615, "op-acceptance-tests: Root cause `TestSyncTesterELSync` failures", "Logs\n- https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/101953/workflows/555d5a18-2acf-4e58-8343-a54112c07ff9/jobs/3904841/tests\n- https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/101954/workflows/984e68a5-a447-47e4-bfb6-a7489425ff66/jobs/3904897/tests\n\n```\nt=2025-09-25T17:13:32.952+0000 lvl=info msg=\"Optimistically inserting unsafe L2 execution payload to drive EL sync\" id=0xa50336aae9ad68120c7d0e9dfb478a74730ab806ff90af198a57abd65a00c0b4:35 scope=/pkg chainID=901 kind=L2CLNode id=L2CLNode-verifier-901\nt=2025-09-25T17:13:34.951+0000 lvl=info msg=\"Optimistically inserting unsafe L2 execution payload to drive EL sync\" id=0xa9afa842a9fb19d32be45f1495bd28f26269a9151fbb5d8800a081eee6403333:36 scope=/pkg chainID=901 kind=L2CLNode id=L2CLNode-verifier-901\nt=2025-09-25T17:13:34.953+0000 lvl=warn msg=\"Received payload which has larger block number than EL Sync target\" syncTester=dev-sync-tester-901 chain=901 id=79a884a4-9a62-4cbf-bb9a-a11754c38094 start_fcu=\"{Latest:0 Safe:0 Finalized:0}\" current=36 target=35 scope=/pkg chainID=901 kind=SyncTester id=SyncTester-sync-tester-901\n```\n", "CLOSED", 0, "pcw109550", "2025-09-25T18:53:04Z", "2025-09-26T13:44:12Z", "2025-09-26T13:44:11Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NumV7", 17606, "Recommit mechanism fails due to interrupt signal reuse", "**Problem Description**\nThe recommit mechanism in op-geth fails to work properly, causing blocks to contain only 1 transaction (coinbase) instead of processing transactions from the pool. This results in severely degraded transaction throughput.\n**Root Cause**: The payload.interrupt atomic variable is shared across multiple payload building cycles within the same Payload object. Once the Consensus Layer calls payload.resolve() and sets the interrupt signal to commitInterruptResolve (4), all subsequent recommit update builds immediately abort in commitTransactions() without processing any transactions.\n\n**Current Behavior**\n```\n// First build - works fine\ncommitTransactions start currentTxCount=1 initialInterruptSignal=0\n// ... processes transactions normally\n\n// CL calls resolve(), sets interrupt=4\n\n// Recommit update build - immediately fails\ncommitTransactions start currentTxCount=1 initialInterruptSignal=4\ncommitTransactions interrupted signal=4 processedTxs=0\n```\n\n**Expected Behavior**\nRecommit updates should be able to process transactions from the pool, not immediately abort due to stale interrupt signals from previous resolve calls.\n\n**Solution**\nReset resolve interrupt signals at the beginning of each generateWork call to allow recommit mechanism to function properly.\n**File**: `miner/worker.go`\n**Function**: `generateWork`\nAdd interrupt signal reset logic before `fillTransactions`:\n```\n// Smart interrupt signal handling\ninterrupt := genParam.interrupt\nif interrupt == nil {\n    interrupt = new(atomic.Int32)\n} else {\n    // Reset resolve interrupt at the start of all builds\n    currentSignal := interrupt.Load()\n    if currentSignal == commitInterruptResolve {\n        // Reset resolve interrupt to allow build to continue\n        interrupt.Store(commitInterruptNone)\n        log.Info(\"Reset resolve interrupt for new build\", \"oldSignal\", currentSignal, \"isUpdate\", genParam.isUpdate)\n    }\n    // For update builds, also reset any non-None signal to prevent delayed interrupts\n    if genParam.isUpdate && currentSignal != commitInterruptNone {\n        interrupt.Store(commitInterruptNone)\n        log.Info(\"Reset interrupt for update build\", \"oldSignal\", currentSignal)\n    }\n}\n```\n\n**Impact**\nFixes recommit mechanism: Update builds can now process transactions instead of immediately aborting\nImproves transaction throughput: Blocks can include transactions from the pool via recommit updates\nMaintains safety: Other interrupt types (timeout, new head) still work as expected\nBackward compatible: No changes to external APIs or behavior", "CLOSED", 0, "louisliu2048", "2025-09-25T02:06:14Z", "2025-09-25T10:19:15Z", "2025-09-25T10:19:15Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Ns-dx", 17605, "Replace `setInputCGTEnabled` modifier with `setUp`", "Nit - probably cleaner to add a `setUp` function with a default input and then just have the CGT tests change the input. Also same comment as in other file about modifier vs helper function\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373763526_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T21:56:26Z", "2025-09-25T19:57:04Z", "2025-09-25T19:57:04Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Ns6DA", 17604, "Refactor test contract with `skipIfDevFeatureDisabled`", "Nit - can be included in the original test contract with `skipIfDevFeatureDisabled`\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373758089_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T21:49:22Z", "2025-09-25T19:56:59Z", "2025-09-25T19:56:59Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NszwJ", 17603, "Remove assert from test initializer contract", "Same nit as above, prefer not to test anything in the test initializer contract\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373742751_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T21:36:31Z", "2025-09-25T19:56:53Z", "2025-09-25T19:56:53Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NsGCH", 17601, "Add explicit custom error", "Nit - maybe consider an explicit custom error case for this? Thoughts?\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373746848_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T20:27:32Z", "2025-09-25T19:56:48Z", "2025-09-25T19:56:48Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Nrd8q", 17600, "Add `_authorizeMinter(_minter)` as a helper function.", "Nit - prefer to have this be a helper function (`_authorizeMinter(_minter)`)\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373739904_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T19:46:00Z", "2025-09-25T19:56:41Z", "2025-09-25T19:56:41Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NrXJx", 17598, "Split assertions in tests", "Nit - should really be tested as a separate LiquidityController_Version_Test (same for the other two assertions)\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373739347_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T19:38:16Z", "2025-09-25T19:56:34Z", "2025-09-25T19:56:34Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NrBaK", 17597, "Merge L2ToL1MessagePasser Tests Using DevFeatures", "Same comment as with L1BlockCGT, can also merge into base test file with skipIfDisabled/Enabled\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373736493_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T19:12:49Z", "2025-09-26T12:57:34Z", "2025-09-26T12:57:34Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Nq6e6", 17596, "Merge L1Block Tests Using DevFeatures", "Since we're using the matrix option in CI, no longer necessary to have these inherited versions of the tests\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373734242_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T19:03:40Z", "2025-09-25T19:56:25Z", "2025-09-25T19:56:25Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NqjNN", 17595, "Remove unnecessary `virtual` tags", "Noticed there's a lot of `virtual` diff here - is this still necessary or is it a holdover from the previous Portal tests?\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373732717_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T18:29:26Z", "2025-09-25T19:56:19Z", "2025-09-25T19:56:19Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7No1HJ", 17593, "Refactor test to make it simpler: `OptimismPortal2.sol`", "```\r\n        vm.expectRevert(bytes(\"StandardBridge: function can only be called from an EOA\"));\r\n        (bool revertsAsExpected,) = address(l1StandardBridge).call{ value: 100 }(hex\"\");\r\n        assertTrue(revertsAsExpected, \"expectRevert: call did not revert\");\r\n```\r\n\r\n^ nit, this pattern from L1StandardBridge.t.sol is a bit simpler\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373728374_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T15:57:03Z", "2025-09-25T19:56:14Z", "2025-09-25T19:56:14Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Noqvh", 17592, "Revert `OptimismPortal2.t.sol` diff n2", "Can revert this part of the diff too, the only reason for the constructor diff was because of an older way the tests were being written\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373724278_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T15:44:46Z", "2025-09-25T19:56:09Z", "2025-09-25T19:56:09Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NoqEW", 17591, "Revert `OptimismPortal2.t.sol` diff n1", "Can revert this part of the diff too, the only reason for the constructor diff was because of an older way the tests were being written\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373724278_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T15:44:06Z", "2025-09-25T19:56:03Z", "2025-09-25T19:56:03Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NonKJ", 17590, "Remove `fund()` function.", "Would prefer to remove if there's no clear case for it yet. Worst case if we really need to send ETH to this contract we could always selfdestruct to it. Just want to avoid as much unnecessary code as possible since this contract is critical.\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2376049377_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T15:41:09Z", "2025-09-24T15:43:05Z", "2025-09-24T15:43:05Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NokDw", 17588, "Nit - maybe consider an explicit custom error case for this? Thoughts?", "Nit - maybe consider an explicit custom error case for this? Thoughts?\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373746848_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T15:37:23Z", "2025-09-25T19:55:25Z", "2025-09-25T19:55:25Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Noi9z", 17587, "Nit: in L1BlockCGT this is just `+custom-gas-token`", "Nit: in L1BlockCGT this is just `+custom-gas-token`\r\n\r\n_Originally posted by @smartcontracts in https://github.com/ethereum-optimism/optimism/pull/17412#discussion_r2373701729_\r\n            ", "CLOSED", 0, "hexshire", "2025-09-24T15:35:57Z", "2025-09-25T19:55:14Z", "2025-09-25T19:55:14Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Noger", 17586, "Review Custom Gas Token", "Comments to fix for https://github.com/ethereum-optimism/optimism/pull/17412", "CLOSED", 0, "hexshire", "2025-09-24T15:33:10Z", "2025-09-25T19:54:40Z", "2025-09-25T19:54:40Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NanUD", 17575, "Review Fusaka prestate", "", "OPEN", 0, "pauldowman", "2025-09-23T18:41:37Z", "2025-09-23T18:41:37Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NZYHC", 17571, "CI: Add an extra RPC node", "The CI RPCs are out of capacity and need to be expanded. A new instance needs to be allocated and added to the CI proxyd", "CLOSED", 0, "janjakubnanista", "2025-09-23T16:40:01Z", "2025-09-24T15:49:04Z", "2025-09-24T15:49:04Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NPkRd", 17563, "the method eth_sendRawTransaction does not exist/is not available", "I deployed the testnet and the block output was normal. However, when I called rpc (http:127.0.0.1:8545) to send transactions, an error occurred. Other readable interfaces were normal.\n\n**version**:\nop-node/v1.13.5\nop-geth/v1.101511.1\n\n**config**:\n\n1. env\n\n`\nL1_RPC_URL=https://rpc.ankr.com/eth_sepolia/xx\n\nL1_RPC_RATE_LIMIT=10\nL1_BEACON_URL=https://ethereum-sepolia-beacon-api.publicnode.com\n\n\nSEQUENCER_ENABLED=true\nSEQUENCER_STOPPED=false\n\nPRIVATE_KEY=xx\n\nP2P_LISTEN_PORT=9222\nP2P_ADVERTISE_IP=x.x.x.x\nOP_NODE_P2P_NO_DISCOVERY=true\nOP_NODE_P2P_PEER_BANNING=false\n\nOP_NODE_RPC_PORT=8547\nOP_GETH_HTTP_PORT=8545\nOP_GETH_WS_PORT=8546\nOP_GETH_AUTH_PORT=8551\n\nJWT_SECRET=./jwt.txt\n`\n\n2. op-geth\n\n`#!/bin/bash\nsource .env\n\n./bin/geth \\\n  --datadir=./op-geth-data \\\n  --http \\\n  --http.addr=0.0.0.0 \\\n  --http.port=$OP_GETH_HTTP_PORT \\\n  --http.vhosts=\"*\" \\\n  --http.corsdomain=\"*\" \\\n  --http.api=eth,net,web3,debug,admin,txpool,engine,miner \\\n  --ws \\\n  --ws.addr=0.0.0.0 \\\n  --ws.port=$OP_GETH_WS_PORT \\\n  --ws.origins=\"*\" \\\n  --ws.api=eth,net,web3,debug,admin,txpool,engine,miner \\\n  --authrpc.addr=0.0.0.0 \\\n  --authrpc.port=$OP_GETH_AUTH_PORT \\\n  --authrpc.vhosts=\"*\" \\\n  --authrpc.jwtsecret=$JWT_SECRET \\\n  --syncmode=full \\\n  --gcmode=archive \\\n  --rollup.disabletxpoolgossip=true \\\n  --rollup.sequencerhttp=\"http://127.0.0.1:8547\"\n`\n\n3. op-node\n\n`#!/bin/bash\n\nsource .env\n\n./bin/op-node \\\n  --l1=$L1_RPC_URL \\\n  --l1.rpc-rate-limit=$L1_RPC_RATE_LIMIT \\\n  --l1.beacon=$L1_BEACON_URL \\\n  --l2=http://localhost:$OP_GETH_AUTH_PORT \\\n  --l2.jwt-secret=$JWT_SECRET \\\n  --rollup.config=./rollup.json \\\n  --sequencer.enabled=$SEQUENCER_ENABLED \\\n  --sequencer.stopped=$SEQUENCER_STOPPED \\\n  --verifier.l1-confs=4 \\\n  --p2p.listen.ip=0.0.0.0 \\\n  --p2p.listen.tcp=$P2P_LISTEN_PORT \\\n  --p2p.listen.udp=$P2P_LISTEN_PORT \\\n  --p2p.advertise.ip=$P2P_ADVERTISE_IP \\\n  --p2p.advertise.tcp=$P2P_LISTEN_PORT \\\n  --p2p.advertise.udp=$P2P_LISTEN_PORT \\\n  --p2p.sequencer.key=$PRIVATE_KEY \\\n  --p2p.no-discovery=$OP_NODE_P2P_NO_DISCOVERY  \\\n  --p2p.ban.peers=$OP_NODE_P2P_PEER_BANNING \\\n  --rpc.addr=0.0.0.0 \\\n  --rpc.port=$OP_NODE_RPC_PORT \\\n  --rpc.enable-admin=true \\\n  --log.level=info \\\n  --log.format=json \\\n  --l1.trustrpc=true\n`\n\n**op-geth log**\uff1a\nthe method eth_sendRawTransaction does not exist/is not available\n\n<img width=\"2191\" height=\"597\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bf8a5be7-4beb-4886-b5c5-6bda68e78edf\" />\n\n", "OPEN", 0, "wluisw", "2025-09-23T02:37:38Z", "2025-09-24T09:59:51Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NPjlN", 17562, "dangling `cannon-rollup-config` flag for op-challenger", "It looks like this flag has been removed from `op-challenger`, but there are still references to it in the codebase, e.g.,:\n\n```bash\nDISPUTE_GAME_FACTORY=$(jq -r .DisputeGameFactoryProxy .devnet/addresses.json)\n./op-challenger/bin/op-challenger \\\n  --trace-type cannon \\\n  --l1-eth-rpc http://localhost:8545 \\\n  --rollup-rpc http://localhost:9546 \\\n  --game-factory-address $DISPUTE_GAME_FACTORY \\\n  --datadir temp/challenger-data \\\n  --cannon-rollup-config .devnet/rollup.json  \\\n  --cannon-l2-genesis .devnet/genesis-l2.json \\\n  --cannon-bin ./cannon/bin/cannon \\\n  --cannon-server ./op-program/bin/op-program \\\n  --cannon-prestate ./op-program/bin/prestate.bin.gz \\\n  --l2-eth-rpc http://localhost:9545 \\\n  --mnemonic \"test test test test test test test test test test test junk\" \\\n  --hd-path \"m/44'/60'/0'/0/8\" \\\n  --num-confirmations 1\n```\n\n\nThese should be cleaned up as well.", "OPEN", 0, "blockchaindevsh", "2025-09-23T02:35:18Z", "2025-09-23T02:36:13Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NNCFH", 17561, "Refactor super dispute game contracts to be reusable across chains", "## Description\n\nRefactor `SuperFaultDisputeGame` and `SuperPermissionedDisputeGame` to be reusable across L2 chains.  \n\nFor more details, see [the design doc](https://github.com/ethereum-optimism/design-docs/blob/main/protocol/proofs/dispute-game-creators.md) on this topic, and the work done to refactor the non-super dispute game contracts tracked in [this issue](https://github.com/ethereum-optimism/optimism/issues/12421).", "OPEN", 0, "mbaxter", "2025-09-22T20:55:33Z", "2025-09-22T20:56:57Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NL3lv", 17558, "[OP Supernode] Milestone 1", "", "CLOSED", 0, "mslipper", "2025-09-22T19:29:57Z", "2025-10-15T15:56:59Z", "2025-10-15T15:56:59Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NLytB", 17557, "Record demo", "", "OPEN", 0, "mslipper", "2025-09-22T19:25:04Z", "2025-09-22T19:25:18Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NLqbK", 17556, "[Tracking] OP Supernode", "", "OPEN", 0, "mslipper", "2025-09-22T19:17:23Z", "2025-09-22T19:17:30Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NJH1U", 17554, "Flaky test: TestQueue_Send_MaxPendingMetrics", "This has flaked twice in the past 7 days. Representative run here: https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/101245/workflows/5ca63dac-ba6e-4b15-b923-1e6df00d56d5/jobs/3879467/tests. Looks like a concurrent map write error.", "CLOSED", 0, "mslipper", "2025-09-22T16:14:28Z", "2025-09-23T16:53:32Z", "2025-09-23T16:53:32Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NJGgz", 17553, "Flaky test: TestSubProcess", "See https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/101411/workflows/3701c282-ea8c-45a4-91bf-b05f3b10e203/jobs/3886706/tests for a representative run. This has flaked 14 times over the past week.", "OPEN", 0, "mslipper", "2025-09-22T16:13:04Z", "2025-09-23T15:09:17Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7NIvOT", 17551, "[DA Footprint Limit] Complete implementation", "", "OPEN", 0, "mslipper", "2025-09-22T15:47:49Z", "2025-09-22T15:47:59Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7M_hIA", 17548, "[op-acceptance-tests] Flaky test: TestL2CLAheadOfSupervisor", "## Description\nTestL2CLAheadOfSupervisor has been flaky for quite some time. Lets investigate and fix it.\n\n## (Partial) Flake History\n* [22Sep25](https://app.circleci.com/pipelines/github/ethereum-optimism/optimism/101380/workflows/8d5d9185-1c90-4316-bd80-21a30f2407f6/jobs/3885167/tests)\n\n", "OPEN", 0, "scharissis", "2025-09-22T05:06:21Z", "2025-09-22T05:06:21Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7M9PoD", 17546, "Piloto", "", "CLOSED", 0, "jfjeifkvbk", "2025-09-21T21:00:13Z", "2025-09-26T02:14:24Z", "2025-09-26T02:14:24Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7M8StH", 17544, "op-node Detailed statistics of peer message deliveries", "**Is your feature request related to a problem? Please describe.**\n\n  I run a number of nodes in Base Mainnet. I often see peers that consume place in the peers list of my node and do not participate in blocks propagation process which often lead to significant delays in receiving new blocks. More detailed information in opp2p_peers response about peers activity can significantly help to identify malicious peers, monitor them and ban. Currently only latency parameter can be used to assess peers quality. After disabling per-topic peer scoring in https://github.com/ethereum-optimism/optimism/pull/15719 fields 'firstMessageDeliveries' and 'meshMessageDeliveries' in opp2p_peers  are always filled with zeroes. \n\n**Describe the solution you'd like**\n  It would be great if we can add some additional data to opp2p_peers which will show amount of message deliveries and first message deliveries from each peer. As a workaround I have restored per-topic peer scoring for blocksTopicV{1-4} but a more general approach will be more suitable.", "OPEN", 0, "krif24", "2025-09-21T15:45:32Z", "2025-09-21T15:45:47Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7MQ6Gj", 17505, "Set `FeesDepositor` address on deployer upon deployment", "Once the `FeesDepositor` contract is deployed on L1, its address must be hardcoded in the `l1FeesDepositor` variable in `op-deployer/pkg/deployer/standard/standard.go`. It must be also be updated on the superchain-ops repo, as the value for `l1WithdrawerRecipient` address as long as the chain integrates with this feature.\n\nThe `FeesDepositor` address won't be user-configurable because there will initially be only one contract on L1\nthat forwards fees to the OP network, which is why we need to hardcode it in the deployer.\n\nCurrently is set to a placeholder to avoid an error on a zero address check, but needs to be updated.", "OPEN", 0, "0xDiscotech", "2025-09-17T16:24:22Z", "2025-09-25T15:36:03Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7MAxxE", 17472, "op-batcher: prepare for Fusaka", "When Fusaka activates on L1, the batcher needs to behave differently. \n\nIt needs to send blob transactions with _cell proofs_ rather than _blob_ proofs. See [this doc for more info](https://www.notion.so/oplabs/Fusaka-Blob-Tx-Offchain-compatibility-26bf153ee1628013bb54dccdca75ccbc). We should bring in code from upstream geth to support this, we may need to bake it in if it gets removed from upstream geth.\n\nWe probably need to coordinate activating the new behaviour with Fusaka activation (cell proofs unlikely to work before Fusaka). \n\nFor a v0, we should just add a CLI flag to control the type of transaction used. This allows us to successfully defend Fusaka by having chain operators restart their batcher close to Fusaka activation with the new behavior enabled. \n\n\nWe also need to consider [EIP 7825,](https://eips.ethereum.org/EIPS/eip-7825):  what if calldata batches use too much gas? Also, the intrinsic costs change, which could affect the minimum.", "OPEN", 0, "geoknee", "2025-09-16T15:25:39Z", "2025-10-17T12:29:26Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7LyxRd", 17461, "[rollup-boost flashblocks forwarder][eris-0]: Deployment setup", "Setup `rbuilder -> rollup-boost -> op-conductor -> websocket-proxy` on one sequencer, and setup `rbuilder -> rollup-boost -> websocket-proxy` on the other sequencer.\n\nThis would give us two sequencers to perform the load tests against,", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-15T18:42:30Z", "2025-09-22T15:54:10Z", "2025-09-22T15:54:10Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7LyuLK", 17460, "rollup-boost as flashblocks forwarder on mainnet", "Depending on the success and learnings of setting up rollup-boost as a Flashblocks forwarder in eris-0 and sepolia, deploy the same setup on mainnet.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-15T18:38:05Z", "2025-09-22T15:52:46Z", "2025-09-22T15:52:45Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7LysUC", 17459, "rollup-boost as flashblocks forwarder on sepolia", "Based on the results from eris-0's experimentation and finally decided topology, implement it in sepolia and give it a room of 2 days to observe its stability.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-15T18:35:11Z", "2025-09-22T15:52:33Z", "2025-09-22T15:52:32Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7LjzER", 17448, "op-node invalid block signature unrecognized signer", "<img width=\"2548\" height=\"767\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e1149b4e-97b2-46e1-b66a-bd70d95bf9c4\" />\n\nI encountered the above problems while deploying on the testnet. What could be the reason", "CLOSED", 0, "wluisw", "2025-09-14T15:06:16Z", "2025-09-24T09:59:36Z", "2025-09-24T09:59:36Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7KkzaS", 17394, "ratify design for DA footprint block limit", "", "CLOSED", 0, "mslipper", "2025-09-09T14:04:40Z", "2025-09-23T20:27:21Z", "2025-09-23T20:27:21Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Kg9gz", 17388, "op-sync-tester: Support EL Sync Testing", "We plan to remove the remove req-resp p2p sync path and rely increasingly on EL Sync for keeping the chain state up to date. To ensure this transition is safe, we need to verify that EL Sync is functioning correctly under real-world conditions.\n\nOur sync tester does not validate EL Sync against real chain data yet. We extend the sync tester to include EL Sync checks, confirming that it reliably syncs blocks and state without depending on p2p req-resp.\n\n", "CLOSED", 0, "pcw109550", "2025-09-09T09:54:27Z", "2025-09-23T12:28:16Z", "2025-09-23T12:28:16Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7FSX05", 17000, "[Tracking] [op-up] op-up", "At the offsite hackathon, we managed to get very close to `op-up` working e2e. There are a few remaining items to complete the full flow, and a number of cleanups to productionize the hackathon code.", "CLOSED", 0, "mslipper", "2025-08-11T12:57:18Z", "2025-09-22T15:32:56Z", "2025-09-22T15:32:56Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7Dw77Z", 16947, "op-batcher: revisit usability of throttling config", "* deprecate `throttle-threshold-multiplier`\n* check if there is a minimum (or \"always\") throttle size for transactions\n* should step function be aligned with the start or the end of the range of the linear/quadratic controller? or in the middle?\n* the default values need another look, especially since they relate to pending block da bytes, not total unsafe da bytes (which will be much higher).\n\nrecommended settings \n* minimum threshold should allow for one probably 2 channels to fill up with no throttling\n* max threshold should be 10 to 50x to get decent smoothness. ", "CLOSED", 0, "geoknee", "2025-08-01T15:56:21Z", "2025-09-23T09:51:26Z", "2025-09-23T09:51:26Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7RJsqu", 17835, "op-conductor flashblocks-streaming and raft timeout issues", "Identify the root cause behind the issue of conductor trying to forward flashblocks from rollup-boost.\n\nOne of the identified issues has been\n\n```\n\"error reading from rollup boost WebSocket\" err=\"failed to read: read limited at 32769 bytes\"\n```\n\nMoreover, there had been sporadic issue around conductor raft p2p timeout expiring causing it to transfer leadership despite no unhealthiness.\n\n[Example]([https://optimistic.grafana.net/a/grafana-lokiexplore-app/explore/service/op-conductor/lo[\u2026]sage=false&sortOrder=%22Ascending%22&wrapLogMessage=false](https://optimistic.grafana.net/a/grafana-lokiexplore-app/explore/service/op-conductor/logs?patterns=%5B%5D&from=2025-10-12T01:57:00.000Z&to=2025-10-12T01:59:00.000Z&var-lineFormat=&var-ds=grafanacloud-logs&var-filters=service_name%7C%3D%7Cop-conductor&var-filters=network%7C%3D%7Cmainnet-prod&var-filters=app_kubernetes_io_instance%7C%3D%7Cprod-mainnet-op-opn-geth-f-sequencer-1&var-fields=&var-levels=&var-metadata=&var-jsonFields=&var-patterns=&var-lineFilterV2=&var-lineFilters=&timezone=browser&var-all-fields=&displayedFields=%5B%5D&urlColumns=%5B%5D&visualizationType=%22logs%22&prettifyLogMessage=false&sortOrder=%22Ascending%22&wrapLogMessage=false))", "OPEN", 0, "yashvardhan-kukreja", "2025-10-13T08:23:26Z", "2025-10-13T08:28:05Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7QrYWo", 17814, "op-dispute-mon: Fix handling of out of sync nodes", "When op-dispute-mon is configured with multiple rollup RPCs and one is behind, it should use the in-sync node as source of truth, but is detecting it as a disagreement between them.\n\nIn this case the two nodes returned:\n\n```\nNode 1: Success, output root matching game\nNode 2: err=\"failed to get L2 block ref with sync status: failed to determine L2BlockRef of height 13676523, could not get payload: not found\"\n```\n\nWhich resulted in the `results` array:\n```\nt=2025-10-10T10:55:59+1000 lvl=info msg=\"Got result\" node=0 block=13676523 root=0x0000000000000000000000000000000000000000000000000000000000000000 isSafe=false notFound=true err=<nil>\nt=2025-10-10T10:55:59+1000 lvl=info msg=\"Got result\" node=1 block=13676523 root=0x7b7d60cdbd5b1a652050684e2b9f383eb014c3a9af3f868422363b21c08a34f2 isSafe=true notFound=false err=<nil>\n```\n\nand it logged the error:\n```\nt=2025-10-10T10:55:59+1000 lvl=warn msg=\"Nodes disagree on output root\" l2BlockNum=13676523 firstOutput=0x7b7d60cdbd5b1a652050684e2b9f383eb014c3a9af3f868422363b21c08a34f2 found=1 valid=2\n```\n\nWe're treating `notFound` as a valid result which is correct when the proposal is from a far future block, but incorrect in this case.  We probably need to be smarter somehow...", "CLOSED", 0, "ajsutton", "2025-10-10T01:07:35Z", "2025-10-16T20:43:05Z", "2025-10-16T20:43:05Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7PDBrt", 17686, "Graceful monitoring and alerting of multiple replica-healthchecks per namespace", "Considering deploying an additional replica-healthcheck for the nodes consisting op-rbuilders, we'd have to ensure that our monitoring dashboards and alerts related to replica-healthcheck don't break.\n\nThey might break because a bunch of metrics tend to be aggregated on namespace or/and stack_optimism_io_network, both of which would be same for the rbuilder replica-healthcheck.\n\nThis issue tracks tackling that concerns and turning our dashboards and alerts accordingly.", "OPEN", 0, "yashvardhan-kukreja", "2025-10-01T13:52:56Z", "2025-10-13T13:04:03Z", null, "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7PCzkd", 17680, "Deploy rollup-boost partial healthiness tolerance", "Roll this setting to the devnet -> sepolia -> mainnet to have it in action.", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-01T13:37:44Z", "2025-10-13T08:26:37Z", "2025-10-13T08:26:36Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDODjvEJM7PCwBt", 17678, "rollup-boost partial healthiness tolerance", "An opt-in tolerance for the partial healthiness failures of op-rbuilder in op-conductor so as to ignore one-off harmless blips in op-rbuilder.", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-01T13:33:46Z", "2025-10-13T08:26:45Z", "2025-10-13T08:26:45Z", "ethereum-optimism/optimism", "2025-10-13 20:35:39"]
["I_kwDOKIsnqM7NrX0r", 1224, "snag report on improved superchain-ops flow", "Context: I was running through the signing flow for this task https://github.com/ethereum-optimism/superchain-ops/tree/main/src/tasks/sep/030-zora-sep-u13-to-u16a\n\nHere are some things that confused me / tripped me up: \n\n1. When simulating the task, I get output like the folllowing:\n\n```\n**<TODO: Slot was not automatically decoded. Please provide a summary with thorough detail then remove this line.>**\n  \n**<TODO: Insert links for this state change then remove this line.>**\n  \n- **Key:**          `0x0000000000000000000000000000000000000000000000000000000000000005`\n  - **Before:** `0x0000000000000000000000000000000000000000000000000000000000000000`\n  - **After:** `0x0000000000000000000000000000000000000000000000000000000001cc7a2b`\n  - **Summary:** \n  - **Detail:** \n  \n**<TODO: Slot was not automatically decoded. Please provide a summary with thorough detail then remove this line.>**\n  \n**<TODO: Insert links for this state change then remove this line.>**\n  \n- **Key:**          `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n  - **Decoded Kind:** `address`\n  - **Before:** `0x0000000000000000000000000000000000000000`\n  - **After:** `0x7b465370BB7A333f99edd19599EB7Fb1c2D3F8D2`\n  - **Summary:** ERC-1967 implementation slot\n  - **Detail:** Standard slot for storing the implementation address in a proxy contract that follows the ERC-1967 standard.\n  \n**<TODO: Insert links for this state change then remove this line.>**\n  \n- **Key:**          `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n  - **Decoded Kind:** `address`\n  - **Before:** `0x0000000000000000000000000000000000000000`\n  - **After:** `0xE17071F4C216Eb189437fbDBCc16Bb79c4efD9c2`\n  - **Summary:** Proxy owner address\n  - **Detail:** Standard slot for storing the owner address in a Proxy contract.\n  \n**<TODO: Insert links for this state change then remove this line.>**\n```\nI don't think we want to be printing all these TODOs?\n\n2. Readme and output stress the importance of checking a normalized state diff against an audit report, but I gather we don't have these any more. \n\n3. User is encouraged to use op-txverify, but I'm not clear that is a necessary step or not?\n\n4. How to use HD_PATH env variable does not seem to be documented. \n\n5. These links in the validation.md\n\n```md\n3. [Verifying the transaction input](#understanding-task-calldata)\n4. [Verifying the state changes](#task-state-changes)\n```\n\nare broken. \n\n6. I get a tenderly link to follow, but I don't know what to do with the simulation output since we don't validate the state diff any more.", "OPEN", 0, "geoknee", "2025-09-24T19:39:08Z", "2025-09-25T17:58:10Z", null, "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM7GPl0h", 1167, "Create Swap Owner Template", "The security council safe periodically swaps owners. This operation is highly sensitive and these transactions should be ran through superchain-ops. When kicking off a swap owner operation, the facilitator gets the new owners to walk through the rehearsals. At that point, we should have a final task that exists in the mainnet directory of superchain-ops. This task uses the newly created `GnosisSafeSwapOwner.sol` template.", "CLOSED", 0, "blmalone", "2025-08-15T18:20:07Z", "2025-09-24T19:41:35Z", "2025-09-24T19:41:35Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6vAKpi", 778, "Additional safety checks for finance template", "This is discussed here: https://discord.com/channels/1244729134312198194/1345058837748777080/1352055905755070524 \n\nWe should pause on implementing these until we get the feature in the hands of the user. Then we can get more requirements.", "CLOSED", 0, "blmalone", "2025-03-20T16:31:13Z", "2025-09-24T19:58:25Z", "2025-09-24T19:58:25Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6slOrv", 714, "[SIM-SEQUENCE] display datahash and message hash.", "", "CLOSED", 0, "Ethnical", "2025-03-04T21:18:45Z", "2025-09-24T19:42:10Z", "2025-09-24T19:42:10Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6sLSQl", 698, "Create skeleton upgrade test task", "", "OPEN", 0, "alcueca", "2025-03-01T06:12:16Z", "2025-09-24T20:02:02Z", null, "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6sLSJZ", 697, "Create skeleton config test task", "", "CLOSED", 0, "alcueca", "2025-03-01T06:11:56Z", "2025-09-24T19:57:52Z", "2025-09-24T19:57:52Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6rb0di", 666, "AccountAccessParser Improvement", "The AccountAccessParser library has lots of duplicate code looping over an array of `VmSafe.AccountAccess` and then subsequently looping over the array of `storageAccesses` contained inside each `AccountAccess` entry.\n\nIt would be nice to have a function that returns an array of all storage writes for a given AccountAccess array.\n\nThis function would allow us to remove duplicate code in functions `getUniqueWrites` and `getStateDiffFor`.", "CLOSED", 0, "ElliotFriedman", "2025-02-24T21:30:17Z", "2025-09-24T19:43:49Z", "2025-09-24T19:43:49Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6qf2kT", 617, "README installation instructions should be `mise install`", "The [README](https://github.com/ethereum-optimism/superchain-ops/blob/main/README.md#installation) instructs users to install all tools manually, when we already have a `mise.toml` configuration, which might need to be updated to include rust. ", "CLOSED", 0, "alcueca", "2025-02-18T13:33:50Z", "2025-09-24T19:45:06Z", "2025-09-24T19:45:06Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6kIDMK", 433, "[FPS] Task Tracking Configuration", "Create a task tracking system that requires task developers to update the task state in a toml config file. This way, instead of running searches on readme files to track which tasks are and are not executed, developers can have all task state live in a single toml file. The state of this toml file will determine whether or not the tasks run before the integration tests.", "CLOSED", 0, "ElliotFriedman", "2024-12-20T22:25:38Z", "2025-09-24T19:52:56Z", "2025-09-24T19:52:56Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6j5kpu", 427, "Merge `VerificationBase` into `JsonTxBuilderBase`", "Task [sep/026](https://github.com/ethereum-optimism/superchain-ops/pull/421) introduced a reusable verification framework to reduce the work of writing, maintaining and reviewing individual verification scripts. Part of this framework is a small `VerificationBase` contract\n\n```solidity\ncontract VerificationBase {\n    address[] public allowedStorageAccess;\n    address[] public codeExceptions;\n\n    function addAllowedStorageAccess(address addr) internal {\n        allowedStorageAccess.push(addr);\n    }\n\n    function addCodeException(address addr) internal {\n        codeExceptions.push(addr);\n    }\n}\n```\n\nIt provides two dynamic arrays in storage to allow for verification modules to add their respective allowed storage accesses and code exceptions. This allows for a more modular management of these addresses than the static overrides of `getAllowedStorageAccess` and `getCodeException`.\n\nI propose that we just merge this contract into `JsonTxBuilderBase`, and set its getters to just return those arrays, instead of setting default virtual getters that revert. The getters can still be `virtual` so that they can be overridden, which mostly provides backwards compatibility for the old pattern where individual tasks had to override the getters. I don't see a security risk from providing a default way to add accesses and exceptions via the `add...` functions. After all, adding these only makes checks _more permissive_.", "CLOSED", 0, "sebastianst", "2024-12-19T09:47:56Z", "2025-09-24T20:03:23Z", "2025-09-24T20:03:23Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6ixQd9", 396, "[Tracking] superchain-ops improvements", "Tracking issues for superchain-ops improvements. You'll find issues are broken down into broad categories. The order in which these issues get addressed will depend on our priorities.\n\n## To Do\n\n### Security Features\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/1167\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/339\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/591\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/637\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/1005\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/778\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/195 @alcueca \n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/338 @alcueca \n   - Important that we gain a higher level of assurance that Tenderly's state diff matches ours produced via FPS\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/754\n\n###  Hardening Tasks\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/1106\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/674\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/780\n\n### Additional Features:\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/529\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/991\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/451\n- [ ] https://github.com/ethereum-optimism/superchain-ops/issues/909\n\n## Completed\n\n### Security Features\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/753\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/686\n    - Closed by @AmadiMichael's [PR](https://github.com/ethereum-optimism/superchain-ops/pull/734)\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/679 @alcueca \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/375\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/337 @alcueca \n    - There was a [PR open](https://github.com/ethereum-optimism/superchain-ops/pull/420) for this targeting the old system but we should primarily focus on making this work for the new system.\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/99\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/373\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/777\n\n### Education & Onboarding\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/514\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/492\n###  Hardening Tasks\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/923\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/654\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/814\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/838\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/547\n    - Will be completed as part of first [mainnet PR](https://github.com/ethereum-optimism/superchain-ops/pull/721#pullrequestreview-2695572961) @maurelian \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/548\n    - Will be completed as part of first [mainnet PR](https://github.com/ethereum-optimism/superchain-ops/pull/721#pullrequestreview-2695572961) @maurelian \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/600\n    - Will be completed as part of first [mainnet PR](https://github.com/ethereum-optimism/superchain-ops/pull/721#pullrequestreview-2695572961) @maurelian \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/554\n    - We need this template to perform a Sepolia upgrade. The ProtocolVersions owner on sepolia is incorrect and should match the mainnet configuration i.e. should be the sepolia FUS. \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/651\n    - I don't think this is needed anymore once #547 is implemented. Keeping it open for now.\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/605\n    - `_buildStated` should be a boolean and some general cleanup. \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/636\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/448\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/648\n### Additional Features:\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/770\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/342\n### Blocking Mainnet (Estimate: 24th Feb)\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/336\n  - This [pr](https://github.com/ethereum-optimism/superchain-ops/pull/406/files#diff-9427ab8af0412d746fc954f4a43109f28dcc0dbcc55d0e5ae34aaf2e6776343a) introduced the consolidation of addresses but it hasn't yet been rolled out and used.\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/397\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/395\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/392\n   - This may already be completed via #395 \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/398\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/422\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/515\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/480\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/481\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/522\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/519\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/473\n  - Useful for onboarding and should probably block mainnet release.\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/523\n    - [x] https://github.com/ethereum-optimism/superchain-ops/issues/341\n       - This needs to be reconsidered if it's necessary after FPS is added.\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/536\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/343\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/557\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/541\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/493\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/549\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/491\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/580\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/576\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/566\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/571\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/596\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/610\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/573\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/621\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/613\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/726\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/482\n    - [x] Duplicate: https://github.com/ethereum-optimism/superchain-ops/issues/335\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/550\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/516\n### Non-Blocking Mainnet\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/475\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/469\n   - Pulling in chain IDs from a dependency is preferable but not blocking mainnet.\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/468\n   - Automatically figuring out if a safe is nested or not isn't blocking mainnet but a nice to have.\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/512\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/638\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/659\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/655\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/630\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/644\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/633 \n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/500\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/446\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/460\n- [x] https://github.com/ethereum-optimism/superchain-ops/issues/452", "OPEN", 0, "blmalone", "2024-12-10T18:03:48Z", "2025-09-24T19:58:27Z", null, "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM6Jnybe", 203, "Enforce folder numbering", "We should add a check in CI to ensure that within a task folder, the numbering of tasks is increasing and does not overlap.\r\n\r\nie. #200 currently introduces a new dir `tasks/sep/009-fpac-upgrade` which is incorrect since there is already a `tasks/sep/009-presigned-pause`. \r\n\r\nThis happens easily due to race conditions between new tasks, so we should automatically check for it.", "CLOSED", 0, "maurelian", "2024-05-21T18:51:56Z", "2025-09-24T19:51:13Z", "2025-09-24T19:51:13Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDOKIsnqM5zb2xU", 12, "clean up json length parsing", "<!--\r\nNeed help?\r\nRefer to our contributing guidelines for additional information about making a good issue:\r\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\r\n-->\r\n\r\nIf you are open to enabling `ffi`, it is possible to use `jq` to get the length of a JSON array. It would allow for the removal of this code:\r\nhttps://github.com/ethereum-optimism/superchain-ops/blob/2b033baf37326630260b870c868f6040635b1ea3/src/JsonTxBuilderBase.sol#L24-L25\r\n\r\nThere is a lot of usage of `jq` in the monorepo forge scripts.\r\n\r\nAlso the solidity team has talked about removing `abi.encodePacked` in a future version of solidity, so `string.concat` should be preferred over `string(abi.encodePacked(...))`\r\nhttps://github.com/ethereum-optimism/superchain-ops/blob/2b033baf37326630260b870c868f6040635b1ea3/src/JsonTxBuilderBase.sol#L33", "CLOSED", 0, "tynes", "2023-10-11T02:48:24Z", "2025-09-24T19:50:25Z", "2025-09-24T19:50:25Z", "ethereum-optimism/superchain-ops", "2025-10-13 20:35:49"]
["I_kwDODjvEJM7KGvR3", 17353, "Add", "Hi [Admin/Maintainer Name],\n\nI would like to request write/maintain permissions on the ethereum-optimism/design-docs repository so I can help review and approve pull requests.\n\nMy GitHub username: ajit2903\n\nHere are some of my recent contributions:\n- [Link to your PR or commit, e.g., https://github.com/ethereum-optimism/design-docs/pull/46/commits/f8ecf603986491b840a75509cf2f45a95cffde91]\n\nThank you!", "CLOSED", 0, "ajit2903", "2025-09-06T19:18:30Z", "2025-09-06T20:02:08Z", "2025-09-06T20:02:08Z", "ethereum-optimism/optimism", "2025-10-13 20:36:05"]
["I_kwDODjvEJM7KGPfN", 17352, "@ajsutton", "@ajsutton\r\n\r\n_Originally posted by @ajit2903 in https://github.com/ethereum-optimism/specs/issues/757#issuecomment-3262630814_\r\n            ", "CLOSED", 0, "ajit2903", "2025-09-06T18:04:22Z", "2025-09-06T20:01:34Z", "2025-09-06T20:01:34Z", "ethereum-optimism/optimism", "2025-10-13 20:36:05"]
["I_kwDODjvEJM7J_L3b", 17348, "Run precompile FP tests on Jovian fork", "", "OPEN", 0, "Inphi", "2025-09-05T21:11:40Z", "2025-09-05T21:11:40Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:05"]
["I_kwDODjvEJM7J7IW9", 17337, "Validate extradata pre-Holocene in engine_consolidate", "I ended up reverting this [b54581d](https://github.com/ethereum-optimism/optimism/pull/17307/commits/b54581dfa78ce5d9b347730030e054425fe3eb43), I didn't want to change the existing behaviour (it broke existing tests). Happy to look again in a followup PR>\r\n\r\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/optimism/pull/17307#discussion_r2324994070_\r\n            ", "OPEN", 0, "geoknee", "2025-09-05T14:14:39Z", "2025-09-05T14:14:39Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:05"]
["I_kwDODjvEJM7J6Qr_", 17336, "op-program: Update engine API checks for op-program", "I believe that the engine API check for op-program lag behind the latest update that we did for op-geth. We should track for follow-up work to harden the replicated engine api checks (maybe we can even reuse the extracted check functions from op-geth so we don't need to duplicate).\r\n\r\nOne result of this may be that we need to set the `minBaseFee` field to `nil` if `Jovian` is not active.\r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/optimism/pull/17307#discussion_r2318937361_\r\n            ", "OPEN", 0, "sebastianst", "2025-09-05T13:05:21Z", "2025-09-05T13:05:21Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:05"]
["I_kwDODjvEJM7JyLro", 17331, "Remove snapshots for OPCM sub-contracts", "Feedback from @maurelian:\r\n\r\n> nit: This is noisy and I don't think we need snapshots for OPCM components (they aren't meant to have a public interface. Would be nice to add a skip for these in [here](https://github.com/ethereum-optimism/optimism/blob/539c39a1765cb61e3111e380d08f0d2bca89df06/packages/contracts-bedrock/scripts/autogen/generate-snapshots/main.go#L81-L94)\r\n\r\nRelatively simple, just need to add skips for these files", "OPEN", 0, "smartcontracts", "2025-09-04T20:31:12Z", "2025-09-04T20:31:12Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:05"]
["I_kwDOJ_r-bs6ix3vn", 763, "superchain: make chain configs fully explicit", "## Overview\n\nCurrently `ChainConfig` .toml files do not contain the complete set of config values. Rather, there is logic within the `superchain` package to inherit/populate some values (namely hardfork activation timestamps and some superchain-wide contract addresses) from the appropriate superchain.toml file. This creates some confusion about how a chain is configured when looking at any given `ChainConfig` file. We would like to get rid of the inheritance so that the `ChainConfig` is a fully, self-contained set of information about the chain.\n\n## Tradeoffs\n\n1. Duplicated data across chain configs - worth this tradeoff to be explicit and avoid confusion\n2. Difficult to tell how a chain diverges from default values if default values are not excluded - could alleviate this concern by adding a simple command to the superchain-registry/ops module which could print out the diff?\n```\n./ops default-diffs <chain_id>\n```\n\n## Acceptance criteria\n\n1. All current chain configs contain all hardfork timestamp activations for their chain\n2. All current chain configs contain all contract addresses for their chain\n3. ops command exists to propagate new superchain hardfork timestamps to chains who want to inherit them (i.e. `superchain_time` is set)\n4. ops command exists to show diff between chain config and defaults: `./ops default-diffs <chain_id>`", "OPEN", 0, "bitwiseguy", "2024-12-10T19:15:19Z", "2025-09-05T16:09:08Z", null, "ethereum-optimism/superchain-registry", "2025-10-13 20:36:11"]
["I_kwDODjvEJM7MkKbB", 17525, "[op-acceptance-tests] Parallelise \"memory-all\" job", "Lets parallelise the \"memory-all\" job, as we intend to make this workflow blocking and we'd prefer not to make the overall CI duration longer.", "OPEN", 0, "scharissis", "2025-09-18T21:38:01Z", "2025-09-18T21:38:01Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7Mh6Cm", 17521, "Update optimism-package to support Fusaka on L1", "To test Fusaka on L1, we need to bump the version of `ethereum-package` in both `optimism-package` and `optimism`.\n\nRequested by @geoknee ", "CLOSED", 0, "janjakubnanista", "2025-09-18T18:08:41Z", "2025-09-19T16:12:50Z", "2025-09-19T16:12:50Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7MPOcz", 17501, "[DA Footprint Limit] Add DA footprint block metric", "Similarly to how we added a base fee block metric.", "OPEN", 0, "sebastianst", "2025-09-17T14:22:48Z", "2025-09-17T14:22:48Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7MMYza", 17490, "op-node: parse future SystemConfig.ConfigUpdate events without critical error", "See this P/PS https://www.notion.so/oplabs/P-PS-Allow-CL-clients-to-parse-future-SystemConfig-ConfigUpdate-events-without-critical-error-269f153ee16280fe9c5eec1e7b6640aa?d=0a6f153ee1628275938583be004777b6", "OPEN", 0, "geoknee", "2025-09-17T11:03:35Z", "2025-09-17T11:03:35Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7MFdmF", 17485, "[Forge Deployer] install forge binary in docker builds", "", "CLOSED", 0, "bitwiseguy", "2025-09-16T22:57:05Z", "2025-09-17T01:56:56Z", "2025-09-17T01:56:56Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7MEqhZ", 17483, "min-base-fee: run actions/proof tests against kona", "", "CLOSED", 0, "geoknee", "2025-09-16T21:15:09Z", "2025-10-17T14:56:32Z", "2025-10-17T14:56:32Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7MD95Y", 17480, "Fix godoc for MinBaseFee in op-service SystemConfig struct", "We can do this in a followup.\r\n\r\n_Originally posted by @geoknee in https://github.com/ethereum-optimism/optimism/pull/17441#discussion_r2353534055_\r\n            ", "CLOSED", 0, "geoknee", "2025-09-16T20:05:01Z", "2025-09-16T21:32:07Z", "2025-09-16T21:32:07Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7MD489", 17479, "min-base-fee: add actions/proof tests", "Should cover the activation boundary condition.", "CLOSED", 0, "geoknee", "2025-09-16T19:57:26Z", "2025-09-16T20:19:25Z", "2025-09-16T20:19:25Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7L_OaX", 17470, "Update withdrawal op-chain-ops command for U16a", "The [withdrawal command](https://github.com/ethereum-optimism/optimism/tree/develop/op-chain-ops/cmd/withdrawal) calls `superRootsActive()` which may not exist if the chain didn't go through U16. First check for a non-zero lockbox.\n\n```go\nfunc (b *StandardBridge) UsesSuperRoots() bool {\n\t// Only interop contracts have SuperRootsActive functionality\n\tversion := b.PortalVersion()\n\tif !strings.HasSuffix(version, \"+interop\") {\n\t\treturn false\n\t}\n\n\tsuperRootsActive, err := contractio.Read(b.l1Portal.SuperRootsActive(), b.ctx)\n\tb.require.NoError(err, \"Failed to read super roots active\")\n\treturn superRootsActive\n}\n```", "OPEN", 0, "pauldowman", "2025-09-16T13:37:29Z", "2025-09-16T13:39:18Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7LIS2N", 17436, "Dispute game creator pattern refactor: update specs", "Changes to the dispute game contract parameters should be reflected in the specs. Also double-check for references to any other things that may have changed.", "CLOSED", 0, "pauldowman", "2025-09-11T20:29:02Z", "2025-09-17T13:30:10Z", "2025-09-17T13:30:10Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7K4hBz", 17416, "op-program: Add hint for fast block header oracle lookup", "Add a hint to specs and op-program that provides key information prior to looking up a block hash by number through the \"fast block header lookup\": \nhttps://github.com/ethereum-optimism/optimism/blob/44f6e028d05eb1aca68fa0b89d82bd8e3b664380/op-program/client/l2/fast_canon.go#L38\n\nCurrently this depends on debug_dbGet and doesn't expose enough hint info to implement a different strategy that would work with a reth node as data source. Once we have this hint, the host part can later support different ways of prefetching the data, but we need the hint shipped in an on-chain prestate upgrade before that. ", "OPEN", 0, "ajsutton", "2025-09-10T20:15:36Z", "2025-09-15T00:49:19Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7KlX_w", 17396, "easy way to get the latest version numbers for OP Stack components", "It's not always clear what the latest or recommended versions of different OP Stack components (like `op-deployer`) are. This is partly due to confusion on the GH releases page:\n\n1. search doesn't work\n2. you can't have multiple \"latest\" releases (key for monorepos)\n3. you can't separate the releases by package, it's just one huge blob (also key for monorepos)\n4. prerelease stuff shows up alongside prod stuff\n\nWe discussed the possibility of creating something like releases.optimism.io which could display the latest version numbers for each component, but I was concerned about any security risks that this might introduced -- if this page were compromised, someone could redirect users to malicious releases. \n\nSo instead @bitwiseguy had the idea to include a new recipe (`just latest-releases`) that would display the latest versions for each component in the OP Stack \ud83d\udc4c\ud83c\udffc \n\nOnce implemented, we should also add a line to [this page](https://docs.optimism.io/operators/chain-operators/tools/op-deployer) that encourages people to use the recipe instead of just saying \"use the latest release\" \n\nOther criteria:\n\n* Should be updated automatically when new releases are created \n* Should cover key OP Stack components that live in the monorepo:\n    * op-node\n    * op-batcher\n    * op-challenger\n    * op-conductor\n    * op-deployer\n    * op-validator\n    * op-txproxy\n    * op-up\n    * (I might be missing something)", "CLOSED", 0, "tessr", "2025-09-09T14:44:56Z", "2025-09-15T15:06:59Z", "2025-09-15T15:06:59Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7J8lMJ", 17340, "min-base-fee: load minimum base fee value from SystemConfig contract events", "", "CLOSED", 0, "geoknee", "2025-09-05T16:14:38Z", "2025-09-16T20:19:25Z", "2025-09-16T20:19:25Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7C6o0y", 16841, "min-base-fee: add acceptance tests", "Requires https://github.com/ethereum-optimism/specs/issues/742.\n\nThese tests should exercise activating the feature both at genesis and on a live chain. \n\nFuzzing should be considered where appropriate, to exercise different relationships between fees (such as the base fee being greater/less than the priority fee etc). \n\n", "CLOSED", 0, "geoknee", "2025-07-28T14:29:07Z", "2025-09-16T20:19:25Z", "2025-09-16T20:19:25Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM66R7Cn", 16322, "op-deployer: refactor globalOverrides for clearer usage", "Currently it is not clear what are the valid intent.GlobalDeployOverrides options. The best reference is [this test file](https://github.com/ethereum-optimism/optimism/blob/develop/op-deployer/pkg/deployer/integration_test/apply_test.go#L269-L281). If an invalid key is provided, it is just silently ignored. We should throw an error if an invalid key is provided so that the user has a chance to fix it rather than the code just ignoring that flag.\n\nPotential solution:\nReplace the generic `GlobalDeployOverrides = map[string]interface` object with one that has explicit fields for all the valid override options.\n\nAddtional considerations:\nBackport this into previous op-deployer releases", "OPEN", 0, "bitwiseguy", "2025-06-06T16:28:23Z", "2025-09-19T16:27:07Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM62Qq_h", 15847, "Interop: Superchain Registry Integration", "The source of truth for an interop enabled network comes from the superchain registry, ensuring that production style config is used in devnets.\n\nThis issue tracks the work to complete [this workstream](https://www.notion.so/oplabs/Superchain-Registry-Integration-1eff153ee16280e8a0b7dd6e7ed4213d).\n\n- [ ] op-node interop fork time loaded from registry\n- [ ] op-geth interop fork time loaded from registry\n- [ ] op-supervisor dependency-set loaded from registry", "CLOSED", 0, "alfonso-op", "2025-05-12T18:41:09Z", "2025-09-19T16:24:51Z", "2025-09-19T16:24:51Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM6vCqCt", 14977, "Create a single source of truth for addresses structs", "There are a bunch of structs in op-deployer/op-chain-ops which are duplicated in other packages (e.g., `ImplementationAddresses` is redefined in `interopgen`). We should look through the codebase for these duplicate structs, and create a single source of truth for them.", "CLOSED", 0, "mslipper", "2025-03-20T21:37:30Z", "2025-09-19T16:19:41Z", "2025-09-19T16:19:41Z", "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM6t4Y6u", 14840, "op-deployer: add option to automatically verify contracts after deployment", "User request: instead of having to run `op-deployer verify` as a separate command, make it an option to verify contracts at the end of `bootstrap` and `apply`  commands. Will likely need to refactor `verify.VerifyCLI` a bit to make it easier to call from within bootstrap code ", "OPEN", 0, "bitwiseguy", "2025-03-13T13:50:12Z", "2025-09-17T00:29:05Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:27"]
["I_kwDODjvEJM7PT71n", 17704, "Jovian: Only deposit transactions in activation block", "Like in Interop, the Jovian activation block must only contain deposit transactions.\n\nThis rule has recently been added to the specs (https://github.com/ethereum-optimism/specs/pull/791). It still needs to be enforced in the Go and Rust implementations.\n- sequencer needs to set `noTxPool` to `true`\n- derivation batch verification needs to drop non-empty activation batch", "OPEN", 0, "sebastianst", "2025-10-02T16:16:09Z", "2025-10-16T10:03:21Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PTnvV", 17703, "Move L1 config resolution into op-challenger and out of executors", "Right now, every executor's L1 config param is optional. If it is not provided, the config is resolved based on the chain ID from a rollup config (mainnet, sepolia, hoodi, or holesky; error if unknown).\n\nIt would be preferable to centralize this logic in the op-challenger and make the L1 config a required argument to the executors. This simplifies the code and slightly derisks the executors.", "CLOSED", 0, "joshklop", "2025-10-02T15:48:40Z", "2025-10-02T16:21:48Z", "2025-10-02T16:21:48Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PTZ6R", 17700, "op-program/chainconfig: add more tests following Fusaka defence changes", "Would also be nice to add some tests where we call `L1ChainConfigByChainID()` with custom rollup json files that point to sepolia and mainnet, with no l1-genesis config.  We should then automatically pull the right config.\r\n\r\n_Originally posted by @mbaxter in https://github.com/ethereum-optimism/optimism/pull/17568#discussion_r2399189313_\r\n            ", "CLOSED", 0, "geoknee", "2025-10-02T15:30:16Z", "2025-10-02T22:06:22Z", "2025-10-02T22:06:22Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PSnkm", 17698, "op-deployer: create calldata for superchainConfig tx", "# Overview\n\nFor `op-contracts/v4.x.x` and beyond, the process to change the SuperchainConfig address within the L1 contracts is to create a tx bundle comprised of the following three txs:\n1. set SystemConfigImpl to our StorageSetter contract (address `0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC` on mainnet and sepolia)\n2. set new SuperchainConfigProxy with `setBytes32` on the slot storing the SuperchainConfigProxy address\n    * for U16/16a, the 32byte value will only have SuperchainConfigProxy address\n    * for U17 onward, the 32byte value is packed with SuperchainConfigProxy AND minBaseFee (can be 0 if not set)\n4. set SystemConfigImpl address back to original value\nTo provide a nice UX, op-deployer should be able to produce a single hex string of calldata that represents that entire tx bundle. The final tx containing the bundle should target `MultiDelegatecaller`, which should be called by the proxyAdmin\n\n# Command inputs\n\nThis should be a new command `op-deployer manage set-superchain-config` (similar to `op-deployer manage add-game-type`. Inputs to the new command:\n* SystemConfig proxy address\n* new SuperchainConfigProxy address\n* l1ChainId (or l1-rpc-url, from which l1ChainId can be derived)\n\n# Validations\n\nBefore outputting the calldata we should have op-deployer run a check that a SuperchainConfig is actually in the storage slot we think (to ensure we're updating the correct slot).\n\n* [storage layout snapshots](https://github.com/ethereum-optimism/optimism/blob/2e0d9ab73c20e881b438ac16d903769f039813b3/packages/contracts-bedrock/snapshots/storageLayout/SystemConfig.json#L121-L134) show we expect the superchainConfig in slot 108\n* we can read slot 108, extract the address, and then make a call to a view method that we expect to exist on a superchainConfig, like pauseExpiry() \u2014 this will give us confidence we're replacing the correct address\n* starting in U17 we have the minBaseFee packed into the same slot", "OPEN", 0, "bitwiseguy", "2025-10-02T14:32:07Z", "2025-10-02T19:10:51Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PNjAl", 17693, "L2CL: Document EL Sync behavior", "op-node and kona-node has their own EL Sync behaviors, and their desired outcomes. The design is not well documented and this must be compiled as a doc.", "CLOSED", 0, "pcw109550", "2025-10-02T07:38:52Z", "2025-10-17T15:55:19Z", "2025-10-17T15:55:19Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PC_V6", 17685, "replica-healthcheck for op-rbuilder", "op-rbuilder, being an EL of its own, should never diverge from its sibling op-geth (default block builder).\n\nFor that reason, we should have a dedicated replica-healthcheck for it tracking its non-divergence.", "OPEN", 0, "yashvardhan-kukreja", "2025-10-01T13:50:12Z", "2025-10-01T14:11:01Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PC9Ly", 17684, "snapman: reth snapshots of full nodes", "Considering the reliance on op-rbuilder for sequencing, which holds a reth-based chain state, it would be beneficial to have snapman periodically snapshot full reth-nodes so as to have readily available reth chain states for the scenarios when we'd potentially need to recover an op-rbuilder from them.", "OPEN", 0, "yashvardhan-kukreja", "2025-10-01T13:47:59Z", "2025-10-04T03:35:01Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PC2w9", 17681, "Shift Sepolia sequencing to full-nodes", "Currently, sepolia contains archive-enabled sequencers which can depict potentially detrimental sequencing performance especially considering the higher expectations with regards to Flashblocks production.\n\nHaving the sequencing shifted to NVME-enabled full node would be better while having the existing archive sequencers as a standby non-voter as a backup for any potentially catastrophic situations.", "OPEN", 0, "yashvardhan-kukreja", "2025-10-01T13:41:14Z", "2025-10-01T13:41:23Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PCsNs", 17677, "Load tests against 200ms flashblocks-enabled devnet", "These would be used to objectively compare and contrast their performance against the 250ms counterpart with any potentially operational updates to the setup.", "OPEN", 0, "yashvardhan-kukreja", "2025-10-01T13:30:27Z", "2025-10-01T13:30:51Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7PCpUZ", 17676, "Enable 200ms Flashblocks on a Flashblocks-enabled devnet", "Tweak the rbuilder to produce Flashblocks at a 200ms rate.\n\nObserve their stability as compared to the 250ms counterpart over a few days.\n\nHeads up: This issue might potentially branch out into other operational work. For example: spinning up an NVME-backed op-rbuilder in the devnet if the non-NVME setup becomes bottleneck beyond 250ms time.", "OPEN", 0, "yashvardhan-kukreja", "2025-10-01T13:27:51Z", "2025-10-01T13:28:33Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7O0v1M", 17667, "op-sync-tester: Documentation", "Update https://github.com/ethereum-optimism/optimism/tree/develop/op-sync-tester README with the current implementation", "OPEN", 0, "pcw109550", "2025-09-30T15:03:51Z", "2025-09-30T15:03:51Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7Ozwpr", 17664, "Write the blog for op mainnet Flashblocks deep dive", "Write and publish a blog port diving deep into the Flashblocks deployment, learnings and improvements for mainniet.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-30T14:07:08Z", "2025-09-30T14:13:04Z", "2025-09-30T14:07:23Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7Oo7Hm", 17654, "sequencer does not progress blocks", "Problem: Sequencer does not advance blocks when the node is in ELSync.\n\nAction: Diagnose the failure mode and use the outcome to consolidate sync.CLSync and sync.ELSync into a consistent path.\n\nStatus: Deprioritized; work is focused on the verifier pipeline.\n\nContext: Removal of ReqRes sync.", "OPEN", 0, "bingcicle", "2025-09-29T22:20:54Z", "2025-09-29T22:20:54Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7OGsLC", 17632, "op-sync-tester: Mock different EL implementations for initial EL Sync", "We need to validate L2CL by mimicking multiple L2EL implementations, especially for the EL sync and possibly different behavior around engine API responses.\n\nFor initial EL Sync, we may handle different networks(consider regenesis of op-mainnet), related with `l2.enginekind` flag(Introduced at https://github.com/ethereum-optimism/optimism/pull/10767).\n", "OPEN", 0, "pcw109550", "2025-09-26T14:13:12Z", "2025-10-02T11:02:23Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7OGVUT", 17630, "op-node: Make EL Sync work with sequencer", "Sequencer cannot advance blocks when it is in EL Sync mode. Find out why, and use that info for consolidating between `sync.CLSync` mode and `sync.ELSync` mode.\n\nDeprioritized and focusing on the verifier logic.\n\nThis is not a requirement for RR Sync Removal. Possibly related with \nhttps://github.com/ethereum-optimism/optimism/blob/262b23187458b6f83a2ddf5fc7d5bd07ff8a7af6/op-node/rollup/engine/engine_update.go#L117-L118\nSequencer may try to block build using `startBuildingBlock` method, and the EL will respond `SYNCING` which makes the sequencer not to advance.\n", "OPEN", 0, "pcw109550", "2025-09-26T13:49:11Z", "2025-10-02T08:31:29Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7OGRq6", 17629, "op-node: Ensure Sync Target", "Verifier wants to sync till the tip of the chain. More formally, verifier wants to reach the unsafe head.\n\nVerifier may advance its unsafe head via multiple ways.\n1. Verifier will read the L1 and advance safe heads, and unsafe head will follow.\n2. Unsafe head propagated via p2p is appended to safe heads, and finally reaching the tip of the unsafe chain.\n\nWhen verifier is started, sequencer(L2CL) pushes its latest unsafe payload via P2P. Since it is most recent, there must be a gap between verifier unsafe head and sequencer published signed unsafe payload.\n\nThe ReqRes sync(RR Sync) is the way to fill in this gap.\n\nThis issue aims to track, how should the verifiers get unsafe blocks/payloads when sequencer is down.\n\nNot a blocker for removal of RR Sync. This behavior is for the handling EL after snap sync, the initial EL Sync run. So we may deprioritize this.\n\n\n\n", "OPEN", 0, "pcw109550", "2025-09-26T13:45:50Z", "2025-10-02T07:21:29Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7OGKXC", 17628, "L2CL<>L2EL: Find out condition of L2EL for starting EL Syncing", "Find out the condition of EL that EL is able to EL Sync. This may differ by node implementations/networks and first priority is op-geth with op-sepolia.\n\nWe need this because when we do multiple EL Sync, we need to make the EL be able to EL Sync again.\n\nSome artifacts(not confirmed):\n> op-geth must not have finalized block to trigger EL Sync(snap sync).\n\nNecessary for removal of ReqRes Sync to EL Sync. Must understand the starting conditions of EL Sync to rely on it.\n", "CLOSED", 0, "pcw109550", "2025-09-26T13:37:44Z", "2025-10-02T07:24:27Z", "2025-10-02T07:24:27Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7NSfcU", 17564, "op-{node|sync-tester}: EL Sync Correctness: EngineController Parallelism and EL Sync Tests", "This issue claims that there is some synchronization issue in the op-node, especially in the EL sync code path.\n\nStarting from https://github.com/ethereum-optimism/optimism/pull/17565's first commit. The first commit simply prints `debug.Stack()` to nowhere:\nhttps://github.com/ethereum-optimism/optimism/blob/3c3944dfd99efb957c5ffca5d50182abac325ed6/op-node/rollup/engine/engine_controller.go#L490-L500\n\nif we run EL Sync acceptance tests using no parallelism,\n\n```sh\ncd op-acceptance-tests/tests/sync_tester/sync_tester_hfs_ext_granite\nTAILSCALE_NETWORKING=true GOMAXPROCS=1 go test ./... -run ^TestSyncTesterHFS_Granite_ELSync$   -count=1 -v \n```\nWe get always success. However, if we enable parallelism:\n```\nTAILSCALE_NETWORKING=true GOMAXPROCS=2 go test ./... -run ^TestSyncTesterHFS_Granite_ELSync$   -count=1 -v \n```\nWe get consistent failure.\n\nYou may argue that this faulty behavior may be rooted from mis-implementation of sync-tester. However, if we re-run the test starting from the second commit:\nhttps://github.com/ethereum-optimism/optimism/blob/53783060fbb37178fd4e0297cb3595d8558da32f/op-node/rollup/engine/engine_controller.go#L359-L363\n\nIf the `e.finalizedHead` is correctly synchronized, if the if statement is true, `e.finalizedHead` will be empty until explictly updated. However if we re-run using `GOMAXPROCS=2`, \n\n```log\n### 0 initializeUnknowns finalizedRef 0x0000000000000000000000000000000000000000000000000000000000000000:0\n### 1 initializeUnknowns finalizedRef 0x0000000000000000000000000000000000000000000000000000000000000000:0\n### 2 initializeUnknowns finalizedRef 0x0000000000000000000000000000000000000000000000000000000000000000:0\n### 3 initializeUnknowns finalizedRef 0xa828ef159f137180cdf7eb9c21355cb36057ca8642b8a4ee5a0fe0f4aca37e7b:15837935\n### 4 initializeUnknowns finalizedRef 0xa828ef159f137180cdf7eb9c21355cb36057ca8642b8a4ee5a0fe0f4aca37e7b:15837935\n### 5 initializeUnknowns finalizedRef \n...\n```\n\nWe can check that Engine Controller state is updated with race condition.\n\nThis cases the EL Sync to be flaky and unreliable, since after the race it fails to update the finalized head properly and be stucked.\n\nCurrent mitigation for EL Sync tests are to explicitly disable parallelism, by using `runtime.GOMAXPROCS(1)`.\n\n\n", "CLOSED", 0, "pcw109550", "2025-09-23T08:09:47Z", "2025-09-30T14:23:34Z", "2025-09-30T14:23:21Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7MPF1U", 17500, "op-e2e/actions/proofs: Fusaka activation test", "1) We need to write a test like this https://github.com/ethereum-optimism/optimism/blob/44d3429d2913c8c90fbb0848e14c1022b8ca2267/op-e2e/actions/proofs/l1_prague_fork_test.go#L21 but only for Fusaka (Osaka) activating on L1, not Pectra (Prague).\n\n2) We need to update the test code which handles blobs, so that if fusaka is active (or not) we do the appropriate validation. Can copy paste code from here https://github.com/ethereum-optimism/op-geth/blob/51614a3dc4af4a2b503ba178e0799013e6774613/core/txpool/validation.go#L220-L244\n\n", "CLOSED", 0, "geoknee", "2025-09-17T14:15:04Z", "2025-10-03T21:48:06Z", "2025-10-03T21:48:06Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7MNTa-", 17493, "op-node: prepare for Fusaka", "We need to ensure compatibility in the following areas:\n\n1. Derivation pipeline. \n\nConverting excess blob gas into the L1cost. We need to hardcode the Fusaka and blob parameter only hardfork [EIP 7892](https://eips.ethereum.org/EIPS/eip-7892) activation times, which vary by L1 chain. We can then editing this code accordingly, : \n\nhttps://github.com/ethereum-optimism/optimism/blob/44d3429d2913c8c90fbb0848e14c1022b8ca2267/op-service/eth/blob.go#L286-L308\n\nIt should be sufficient to simply modify the dummyConfig to schedule the various forks according to some lookup keyed by the L1 chain ID. Then, the upstream code will handle applying the right blob parameters. \n\n\n2. API related code. \n\nAre we able to fetch data from L1 after Fusaka?\n\n---\nNote that in future work we may be able to avoid hardcoding the per-fork blob parameters and read them from an  L1 RPC. However this is out of scope for this project.\n\nWe should also take account of[ EIP 7918](https://eips.ethereum.org/EIPS/eip-7918) which bounds the blob base fee by execution cost. I don't believe this is a concern for compatibility, however,  and more for when we adopt that EIP on L2.", "CLOSED", 0, "geoknee", "2025-09-17T12:15:21Z", "2025-10-02T15:51:51Z", "2025-10-02T15:51:51Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7MBr-U", 17475, "op-acceptance-test: add back op-reth to jovian kt-devnet", "Right now op-reth doesn't have the min base fee. So this issue is created to track that once op-reth is updated then we can add back the image to the yaml file.\n\nContext: https://github.com/ethereum-optimism/optimism/pull/17441#discussion_r2352622905 ", "OPEN", 0, "wlawt", "2025-09-16T16:33:01Z", "2025-10-17T12:26:11Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7Lyy8h", 17462, "[rollup-boost flashblocks forwarder][eris-0]: Load tests", "Run the load tests individually against both the scenarios by setting the respective sequencer as the leader individually.\n\nCompare and contrast their performances, and capture more Flashblocks oriented metrics from the PoV of flashblocks-websocket-proxy in both the scenarios.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-15T18:44:37Z", "2025-09-30T14:12:58Z", "2025-09-29T13:31:43Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7Lyrfw", 17458, "rollup-boost as flashblocks forwarder on eris-0", "We should begin with deploying these changes on eris-0 and evaluate the acceptance tests and load tests to determine any potentially new bottlenecks with the change.\n\nScenario 1 communication path: `rbuilder` -> `rollup-boost` -> `op-conductor` -> `flashblocks-websocket-proxy`\n\nScenario 2 communication path `rbuilder` -> `rollup-boost` -> `flashblocks-websocket-proxy`\n\nThe reason to try out these two scenarios is to observe the impact on Flashblocks performance due to the additional hop of rollup-boost and is it worth the performance benefits to remove op-conductor as a network hop.\n", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-15T18:33:59Z", "2025-09-29T13:31:59Z", "2025-09-29T13:31:58Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7LynoS", 17457, "Rollup-boost as a flashblocks forwarder", "op-rbuilder builds and produces Flashblocks. Currently, these Flashblocks are listened by the respective op-conductor, which if it's the leader, forwards those Flashblocks to the websocket-proxy.\n\nBut recently, we came to know about the importance of forwarding Flashblocks from rbuilder via rollup-boost.\nDue to a race condition between Flashblocks production and the get_payload engine call dealt by rollup-boost, it becomes possible for the transactions mentioned in the tail Flashblocks (streamed out to op-conductor, hence, the customer) to not get included / confirmed in the final block.\n\nTo mitigate this, rollup-boost can act as a filtering proxy which listens to the Flashblocks produced from rbuilder and only forwards the Flashblocks which were produced at the points in time before the get_payload call happened.\n- Because all the Flashblocks (along with the transactions in them) produced after the get_payload call wouldn't be considered anyway in the final block anyway.\n\nThis parent ticket enlists and tracks the action items associated with making the topology change of introducing rollup-boost as a Flashblocks forwarding hop to the Flashblocks setup in OP Labs.\n\n", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-15T18:28:31Z", "2025-09-30T14:12:45Z", "2025-09-29T13:32:09Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM7K9VvR", 17423, "Refine alerts and runbooks for flashblocks", "Revisit all the alerts related flashblocks and have runbooks ready for them backed by a good justification of the numbers/thresholds used in the alerts.", "CLOSED", 0, "yashvardhan-kukreja", "2025-09-11T06:51:55Z", "2025-10-01T19:31:01Z", "2025-10-01T19:31:01Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM68L4nd", 16498, "enable flashblocks on op-mainnet", "After having thorough confidence on flashblocks-enablement on op-sepolia, we can proceed with enabling flashblocks on op-mainnet.\n\nThis can be done in a progressive manner with one sequencer at a time with dry_run mode.\n\nA/C:\n- op-mainnet passing Flashblocks + Regular RRC\n- monitoring and alerting baked in into the existing setup to cover flashblocks related alerts.\n\nBlocked on https://github.com/ethereum-optimism/optimism/issues/16497", "CLOSED", 0, "yashvardhan-kukreja", "2025-06-18T15:01:59Z", "2025-09-30T14:12:21Z", "2025-09-30T07:47:40Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM67x5No", 16442, "interop: follow-mode / simplify / embed [tracker]", "Related:\n- https://github.com/ethereum-optimism/optimism/issues/15812\n- https://github.com/ethereum-optimism/optimism/issues/15759\n- https://github.com/ethereum-optimism/optimism/issues/15995\n- https://github.com/ethereum-optimism/optimism/issues/11744\n\nReview product feedback, scope/spike the needed changes.\n", "CLOSED", 0, "protolambda", "2025-06-16T15:24:19Z", "2025-10-01T14:40:48Z", "2025-10-01T14:40:48Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM6iC5rV", 13236, "op-chain-ops: Fix source map lookups in SourceMapFS", "Source maps are either broken or no longer where we expect them to be since the latest solc/forge upgrade. Specifically, reading source maps from [`SourceMapFS`](https://github.com/ethereum-optimism/optimism/blob/da85e698c4d6999c673e6e80233b08b217d62e2d/op-chain-ops/foundry/sourcefs.go#L129) always returns an error for valid forge artifacts.\n", "CLOSED", 0, "Inphi", "2024-12-04T19:57:09Z", "2025-10-01T14:37:16Z", "2025-10-01T14:37:16Z", "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDODjvEJM6cK7hD", 12720, "op-chain-ops: vm.expectRevert Go support", "Request by @maurelian: support the `vm.expectRevert` cheatcode in the Go EVM-script environment.\r\n\r\nDocs: https://book.getfoundry.sh/cheatcodes/expect-revert?highlight=expectRevert#expectrevert\r\n\r\nTo implement:\r\n- do the pattern-match of revert data:\r\n  - `expectPartialRevert`: selector matched only\r\n  - `expectRevert(bytes)`: exact full message\r\n  - `expectRevert(bytes4)`: exact selector only\r\n  - `expectRevert()`: any message\r\n- substitute the return-status of the next sub-call that matches the revert or not. Similar to how we set up a prank, we need to remember an expected-revert in the call-frame, to then apply it as we bubble back the revert.\r\n  - There might be a way to change the return-status in the existing tracer. Otherwise we may need a new but simple geth hook, similar to the caller-override.\r\n\r\n", "OPEN", 0, "protolambda", "2024-10-29T04:41:33Z", "2025-10-01T14:36:47Z", null, "ethereum-optimism/optimism", "2025-10-13 20:36:45"]
["I_kwDOKIwiaM7RpKM1", 1790, "[2024 Q4 Audit] [page-path]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\n<!-- Write a description of the current state of the page. -->\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisk\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>\n\n", "OPEN", 0, "kelvin7891", "2025-10-15T09:44:03Z", "2025-10-15T09:45:26Z", null, "ethereum-optimism/docs", "2025-10-17 03:24:06"]
["I_kwDOKIwiaM7RpKKj", 1789, "[2024 Q4 Audit] [page-path]", "<!-- this template is intended for internal OP Labs usage -->\n\n## Description of the updates required\n\n<!-- Write a description of the current state of the page. -->\n\n### Acceptance criteria\n\n<!-- Definition of done for the assignee -->\n\n### Resources\n\n<!-- Supporting docs, points of contact, and any additional helpful info -->\n\n### Action items\n\n<!-- The process for working through this issue for example:\n1. Read through resources and meet with SME\n2. Write the first draft\n3. Share draft with SMEs and implement feedback\n4. Peer review\n5. Final SME review\n6. Publish -->\n\n## Github issue label criteria\n\n> Choose the appropriate github issue labels for each page.\n\n<details>\n\n<summary>Priority</summary>\n\n- `p-on-hold`: (Defer) Tasks that are currently not actionable due to various reasons like waiting for external inputs, dependencies, or resource constraints. These are reviewed periodically to decide if they can be moved to a more active status.\n- `p-low`: (Nice to do) Tasks that have minimal impact on core operations and no immediate deadlines. These tasks are often more about quality of life improvements rather than essential needs.\n- `p-medium`: (Could do) Tasks that need to be done but are less critical than high-priority tasks. These often improve processes or efficiency but can be postponed if necessary without immediate severe repercussions.\n- `p-high`: (Should do) Important tasks that contribute significantly to long-term goals but may not have an immediate deadline. Delaying these tasks could have considerable negative effects but are not as immediate as critical tasks.\n- `p-critical`: Tasks that have immediate deadlines or significant consequences if not completed on time. These are non-negotiable and often linked to core business functions or legal requirements. \n</details>\n\n<details>\n\n<summary>T-shirt size</summary>\n\n- `s-XS`: (< 1 day) Very simple tasks that require minimal time and effort.\n- `s-S`: (few days) Tasks that are straightforward but require a bit more time to complete.\n- `s-M`: (1-2 weeks) Tasks that involve a moderate level of complexity and collaboration.\n- `s-L`: (several weeks) Complex tasks that require significant time investment and coordination across multiple teams. \n- `s-XL`: (> 1 month) Very large and complex projects that involve extensive planning, execution, and testing. \n</details>\n\n<details>\n\n<summary>Content evaluation</summary>\n- `a-delete`: don't need this page \n- `a-duplicate`: some content lives elsewhere \n- `a-minor`: needs small revisions \n- `a-moderate`: needs moderate revisions \n- `a-critical`: needs a lot of work\n</details>\n\n## MDX Metadata format\n\n> We will be adding better metadata to the header of each page. \n> If I was actively searching for this page on google and this description was the search result, would I know it's the correct page?\n> Parse the component and feature tags to add.\n\n```mdx\n---\ntitle: \"Your Title Here\"\ntags: [\"tag1\", \"tag2\"]\ndescription: \"A short description of the content.\"\n---\n```\n\n<details>\n<summary>Component tags</summary>\n\n```\nop-node\nop-geth\nop-reth\nop-erigon\nop-nethermind\nbatcher\nstandard-bridge\nsequencer\nl1-contracts\nl2-contracts\nprecompiles\npredeploys\npreinstalls\nop-proposer\nop-challenger\nop-gov-token\nop-supervisor\nop-conductor\nfp-contracts\ncannon\nop-program\nasterisk\nkona\nsuperchain-registry\nsupersim\ndev-console\nopsm\nmcp\nmcp-l2\ndeputy-guardian\nliveness-guard\ndispute-mon\nop-beat\nop-signer\nmonitorism\nblockspace-charters\nop-workbench\nkubernetes-infrastructure\ndevops-tooling\nartifacts-packaging\nsequencer-in-a-box\ndevnets\nperformance-tooling\npeer-management-service\nproxyd\nzdd-service\nsnapman\nsecurity-tools\nsuperchain-ops\nop-deployer\n```\n</details>\n\n<details>\n<summary>Engineering tags</summary>\n\n```\neng-platforms\neng-growth\neng-devx\neng-protocol\neng-proofs\neng-evm\neng-security\n```\n</details>\n\n", "OPEN", 0, "kelvin7891", "2025-10-15T09:44:00Z", "2025-10-15T09:44:00Z", null, "ethereum-optimism/docs", "2025-10-17 03:24:06"]
["I_kwDOKIwiaM7OYWQ4", 1766, "Update Node architecture", "## Description\nCleaner path, diagram needs to be upgraded with op-supervisor, and make it clear that l2geth is only for OP Mainnet.\n\nhttps://docs.optimism.io/operators/node-operators/architecture \n\n## Action items\n\n1. Do research on topic and raise any questions with the docs team\n2. Write a first draft. It doesn't have to be worded perfectly as the docs team will review\n3. Ping @bradleycamacho or @krofax on discord and request review\n4. Implement feedbacks from @bradleycamacho and @krofax\n5. Publish\n\n", "OPEN", 0, "bradleycamacho", "2025-09-28T20:31:01Z", "2025-10-15T16:02:31Z", null, "ethereum-optimism/docs", "2025-10-17 03:24:06"]
["I_kwDOKIwiaM7OYUsj", 1762, "Create chain monitoring doc", "## Description\n\nNew doc. Complete chain monitoring guide- see https://docs.optimism.io/operators/chain-operators/tools/chain-monitoring\n\nAction items\n\n1. Do research on topic and raise any questions with the docs team\n2. Write a first draft. It doesn't have to be worded perfectly as the docs team will review\n3. Ping @bradleycamacho or @krofax on discord and request review\n4. Implement feedbacks from @bradleycamacho and @krofax\n5. Publish\n", "OPEN", 0, "bradleycamacho", "2025-09-28T20:24:06Z", "2025-10-15T11:54:39Z", null, "ethereum-optimism/docs", "2025-10-17 03:24:06"]
["I_kwDOLB-lzc7P5y7K", 792, "Update DA footprint block limit specs with latest design", "We will now use the `blobBaseFee` header field to store the new gas-like dimension, instead of modifying the `gasUsed` field. See https://github.com/ethereum-optimism/design-docs/pull/317#discussion_r2373144103", "CLOSED", 0, "geoknee", "2025-10-06T16:14:22Z", "2025-10-15T22:05:19Z", "2025-10-15T22:05:19Z", "ethereum-optimism/specs", "2025-10-17 03:24:09"]
["I_kwDODjvEJM7SAybS", 17907, "jovian: do not marshal new fields in `rollupConfig.Genesis.SytemConfig` until Jovian is active", "This is breaking some zk stacks:\n\n> op-succinct and kailua uses the rollup configuration as a commitment hashing that so a new field change the public inputs for zk proving. they use alloy libraries/kona to deserialize the response by op-node for rollup_config, theres a new field, deserialization fails (because strict checks on field do to the hasing/commitment usage), they stop to operate. so existing kona instances will fail on reaching out op-node. and upgrade is not immediate theres a chain of stuff op-node => kona => any other stuff on top.\n\nThis needs to be fixed before Fusaka activates on Mainnet.", "OPEN", 0, "geoknee", "2025-10-16T20:31:04Z", "2025-10-16T20:31:04Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7R8dwD", 17899, "op-conductor :Failed to start sequencer, err=\"no unsafe head\"", "I originally deployed a sequencer to generate blocks normally. \n\n<img width=\"1977\" height=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4f7e43c5-8557-4be4-94f6-acbc9b20f869\" />\n\n1. After I linked the conductor, the sequencer stopped generating blocks:\n\nop-node log \n<img width=\"1636\" height=\"837\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0329a546-1d62-41e7-ac20-5a29549fa1a0\" />\n\nconductor   log:\n<img width=\"1258\" height=\"674\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ff9d0dc8-862f-4874-a9c5-9a0c639d400f\" />\n\n2. The log after I called the conductor conductor_resume rpc interface\uff1a\n<img width=\"1851\" height=\"630\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/258d31f4-3f5f-4f40-a5eb-4c2d927e627e\" />\n\n3. Config\n\nop-node :\n```# Sequencer configuration\nSEQUENCER_ENABLED=true\nSEQUENCER_STOPPED=false\nOP_NODE_P2P_NO_DISCOVERY=true\nOP_NODE_CONDUCTOR_ENABLED=true\nOP_NODE_CONDUCTOR_RPC=http://127.0.0.1:9547\n```\nop-conductor:\n```OP_CONDUCTOR_CONSENSUS_ADDR=0.0.0.0\nOP_CONDUCTOR_CONSENSUS_ADVERTISED=127.0.0.1:50050\nOP_CONDUCTOR_CONSENSUS_PORT=50050\nOP_CONDUCTOR_EXECUTION_RPC=http://127.0.0.1:8545\nOP_CONDUCTOR_HEALTHCHECK_INTERVAL=1\nOP_CONDUCTOR_HEALTHCHECK_MIN_PEER_COUNT=2\nOP_CONDUCTOR_HEALTHCHECK_UNSAFE_INTERVAL=60\nOP_CONDUCTOR_NODE_RPC=http://127.0.0.1:8547\nOP_CONDUCTOR_RAFT_SERVER_ID=conductor0\nOP_CONDUCTOR_RAFT_STORAGE_DIR=./raft\nOP_CONDUCTOR_RPC_ENABLE_PROXY=true\nOP_CONDUCTOR_RPC_ENABLE_ADMIN=true\nOP_CONDUCTOR_RAFT_BOOTSTRAP=true\nOP_CONDUCTOR_PAUSED=true\nOP_CONDUCTOR_RPC_PORT=9547\nOP_CONDUCTOR_RPC_ADDR=0.0.0.0\nOP_CONDUCTORHEALTHCHECK_MIN_PEER_COUNT=1\n```\nCan someone help me see what the reason is? Thank you very much.", "OPEN", 0, "wluisw", "2025-10-16T14:59:37Z", "2025-10-16T15:25:07Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7R7os8", 17897, "jovian/operator-fee: add explicit test for setting operator fee parameters before jovian", "Assert that the parameter change _does_ take effect after the fork. Fees would be much higer. ", "OPEN", 0, "geoknee", "2025-10-16T14:09:09Z", "2025-10-16T14:09:09Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RykJM", 17888, "jovian/operator-fee/GPO: revisit saturating math issue in operatorFee getter", "@fakedev9999 this comment was resolved, but it seems correct to me (i.e. consistent with other logic), so I unresolved it. Is there a reason we'd rather revert on an overflow caused by `* 100` as opposed to using `saturatingMul` there? (cc @geoknee)\r\n\r\n(In reality, overflow in any of these computations seems unrealistic because uint256 is so large compared to the magnitude of gasUsed)\r\n\r\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/optimism/pull/17366#discussion_r2432650445_\r\n            ", "OPEN", 0, "geoknee", "2025-10-15T21:52:04Z", "2025-10-17T14:58:07Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7Ryf5Z", 17887, "Jovian/operator-fee-fix/GPO: add stronger tests for edge cases", "All the test cases here seem pretty basic\u2014no fuzz tests, and no tests of edge cases or saturating behavior. We should add some stronger tests for edge case coverage\r\n\r\n_Originally posted by @mds1 in https://github.com/ethereum-optimism/optimism/pull/17366#discussion_r2432708868_\r\n            ", "OPEN", 0, "geoknee", "2025-10-15T21:45:31Z", "2025-10-15T21:45:54Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7Rye7l", 17886, "dispute-mon: Optimise sync status checks", "With https://github.com/ethereum-optimism/optimism/pull/17831 op-dispute-mon now check the sync status of nodes as part of considering their responses for each game. That means `optimism_syncStatus` is called one per RPC _per game_. It would probably make more sense to fetch the syncStatus for each RPC at the start of each cycle and just use that response for each game rather than re-requesting it.", "OPEN", 0, "ajsutton", "2025-10-15T21:43:28Z", "2025-10-15T21:43:28Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RxGdc", 17879, "Conductor: Allow flashblocks port auto-assignment", "In the triage of `TestControlLoop/TestFlashblocksHandlerIntegration`, I found the likely culprit was the way in which the port was being bound:\n- Test gets a random port\n- Test releases the port\n- (In the meantime, other things are likely to be assigned the port)\n- Test spins up the conductor with the port\n- Port in use, test fails\n\n\nIn attempting to fix this, I discovered that there is *no way* to enable port auto-assignment for `WebsocketServerPort`:\n\nhttps://github.com/ethereum-optimism/optimism/blob/25032f2e17e8d0c085697a4ad75e13f3787ad535/op-conductor/conductor/service.go#L326-L333", "CLOSED", 0, "axelKingsley", "2025-10-15T19:32:35Z", "2025-10-17T20:27:25Z", "2025-10-17T20:27:25Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RtyDv", 17872, "Investigate upstreaming Celestia batcher DA size fix", "Investigate fixing this issue: https://github.com/ethereum-optimism/optimism/issues/17796. Celestia has already developed a fix here which we could potentially upstream: https://github.com/celestiaorg/optimism/commit/1911fd9424ae9542f666ae7ee9b227ad46384994.\n\nDoD:\n\n- Either upstream the fix, or determine how we would resolve this issue ourselves.", "OPEN", 0, "mslipper", "2025-10-15T14:57:07Z", "2025-10-15T15:05:10Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7Rm7su", 17871, "Sepolia op-node cannot get blobs from Caplin", "<!--\nNeed help?\nRefer to our contributing guidelines for additional information about making a good issue:\nhttps://github.com/ethereum-optimism/.github/blob/master/CONTRIBUTING.md\n-->\n\n**Bug Description**\nI'm seeing this error from a Base Sepolia node connected to a Caplin beaon\n```\nOct 15 05:03:47 juju-8111ad-0 op-node[622705]: t=2025-10-15T05:03:47+0000 lvl=warn msg=\"Deriver system is resetting\" err=\"derivation failed: reset: failed to fetch blobs: failed to get blob sidecars for L1BlockRef 0x581bc6ad3f156c04c77a6772cb04cec0ffd92fb909d772d1b1af638f06568e62:9408578: failed to fetch blob sidecars for slot 8724483: failed request with status 404: {\\\"code\\\":404,\\\"message\\\":\\\"blobs are not supported after fulu fork\\\"}\\n: not found\"\n```\n\n**Steps to Reproduce**\n1. Run a Sepolia op-node\n2. Set `--l1-beacon` to use a Erigon Caplin beacon node\n\n**Expected behavior**\nThe node should be able to fetch blobs and sync\n\n**Environment Information:**\nRunning on Ubuntu 22.04\nop-node version v1.14.1-c1081e3a-1759886077\nErigon version 3.2.0-3418e071\n\n**Configurations:**\nop-node\n```\n--l2.jwt-secret=/home/op/jwtsecret --l2=ws://localhost:8551\n  --rpc.addr=0.0.0.0 --metrics.enabled --metrics.addr=0.0.0.0 --metrics.port=7300\n  --network=base-sepolia --p2p.bootnodes=enr:-J64QBwRIWAco7lv6jImSOjPU_W266lHXzpAS5YOh7WmgTyBZkgLgOwo_mxKJq3wz2XRbsoBItbv1dCyjIoNq67mFguGAYrTxM42gmlkgnY0gmlwhBLSsHKHb3BzdGFja4S0lAUAiXNlY3AyNTZrMaEDmoWSi8hcsRpQf2eJsNUx-sqv6fH4btmo2HsAzZFAKnKDdGNwgiQGg3VkcIIkBg,enr:-J64QFa3qMsONLGphfjEkeYyF6Jkil_jCuJmm7_a42ckZeUQGLVzrzstZNb1dgBp1GGx9bzImq5VxJLP-BaptZThGiWGAYrTytOvgmlkgnY0gmlwhGsV-zeHb3BzdGFja4S0lAUAiXNlY3AyNTZrMaEDahfSECTIS_cXyZ8IyNf4leANlZnrsMEWTkEYxf4GMCmDdGNwgiQGg3VkcIIkBg\n  --l1=\"http://192.168.110.67:8545\" --l1.beacon=\"http://192.168.111.205:5053\" --rpc.port=9545\n  --log.level=info --rollup.load-protocol-versions=true --rollup.halt=major --l1.trustrpc=true\n  --l1.rpckind=erigon --p2p.listen.tcp=9333\n```\n\nErigon\n```\n--chain=sepolia --prune.mode=archive --caplin.states-archive --caplin.blocks-archive --caplin.blobs-archive --caplin.blobs-no-pruning --http --ws --http.addr=0.0.0.0 --http.port=8545 --http.vhosts=* --http.api=eth,net,web3,debug,trace,erigon --metrics --metrics.addr=0.0.0.0 --beacon.api=beacon,builder,config,debug,events,node,validator,lighthouse --beacon.api.addr=0.0.0.0\n```\n\n**Logs:**\n\n[op-node.log](https://github.com/user-attachments/files/22920521/op-node.log)", "OPEN", 0, "jonathanudd", "2025-10-15T07:02:58Z", "2025-10-15T07:02:58Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RjzEo", 17870, "Prevent setting implementation for reserved game types in DisputeGameFactory", "As per https://github.com/ethereum-optimism/optimism/pull/17832#discussion_r2429556986 `DisputeGameFacotry.setImplementation` should be what enforces that games can't be created with the reserved game type.", "OPEN", 0, "ajsutton", "2025-10-14T23:23:40Z", "2025-10-14T23:23:40Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7Rhu82", 17867, "op-devstack: Rebuild program prestate", "Add a devstack option that rebuilds the op-program prestate for the sysgo backend. This rebuild can only be done after the initial stack is set up and the L2 genesis is known.", "OPEN", 0, "Inphi", "2025-10-14T19:56:38Z", "2025-10-14T19:56:38Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RgG3i", 17862, "Jovian: Add minBaseFee configuration to genesis op-chain-ops", "The `L2InitializationConfig` in `op-chain-ops/genesis/config.go` doesn't allow to configure the minBaseFee at genesis yet. We probably want to add it, possibly grouping it together with the `DAFootprintGasScalar` into their own deploy config struct (name TBD).", "OPEN", 0, "sebastianst", "2025-10-14T17:25:12Z", "2025-10-14T17:31:52Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7Rd3Rk", 17859, "[oncall] Enable log retention on CloudFlare", "**Description**\n\nCurrently we don't store logs from CloudFlare at all which makes investigation of networking & security issues very difficult.\n\nTo mitigate this, the easiest way is to enable log explorer, a pay-per-GB-stored CloudFlare add-on.", "OPEN", 0, "janjakubnanista", "2025-10-14T14:44:55Z", "2025-10-14T14:44:55Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RdPON", 17858, "Figure out 30 second timeout issue on the Flashblocks websocket URL", "Flashblocks websocket exposure if having 30 second timeout issues due to a Cloudflare<>GCP interfering concern. ", "OPEN", 0, "yashvardhan-kukreja", "2025-10-14T14:03:08Z", "2025-10-14T14:03:09Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RdNJ2", 17857, "Coordinate with Flashblocks RPC providers around the new Flashblocks RPC node", "", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-14T14:01:07Z", "2025-10-15T12:53:39Z", "2025-10-15T12:53:38Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RdLrl", 17856, "Fix flashblocks-websocket-proxy issue with losing flashblocks", "Flashblocks are being lost along the way when forwarding from rollup-boost to the RPC nodes.\n\nIdentify the source of drops and get it fixed.", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-14T13:59:28Z", "2025-10-14T14:00:27Z", "2025-10-14T14:00:27Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RdKJV", 17855, "Upgrade internal flashblocks rpc nodes to v0.1.10  version", "These will act as testing candidates for this version.", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-14T13:57:49Z", "2025-10-14T13:58:30Z", "2025-10-14T13:58:29Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RdJFM", 17854, "Upgrade rbuilder to Fusaka ready 0.2.6 version", "", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-14T13:56:45Z", "2025-10-14T13:58:08Z", "2025-10-14T13:58:07Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7RdIRu", 17853, "Fusaka readiness for Flashblocks components", "Considering op-rbuilder and Flashblocks-rpc nodes being reth-based, they need to be Fusaka ready with the relevant upgrades and ensuring that they're based out of at least op-reth 1.8.2.", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-14T13:56:02Z", "2025-10-15T12:53:47Z", "2025-10-15T12:53:47Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7QNY73", 17774, "Add acceptance tests for adding v2 game type with op-deployer", "Verify that `op-deployer manage add-game-type` works with and without v2 flag enabled. See #17260 ", "CLOSED", 0, "pauldowman", "2025-10-07T22:04:57Z", "2025-10-14T22:21:38Z", "2025-10-14T22:21:38Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7QIxjO", 17754, "[oncall] CI: Failing RPC calls on superchain-ops repo [502]", "**Description**\n\nThere is an elusive problem with some of the fork tests in `superchain-ops` repo. There seem to be no log traces around the error.\n\n[Example failing workflow](https://app.circleci.com/pipelines/github/ethereum-optimism/superchain-ops/14247/workflows/4a188377-a81e-4dea-af27-bfb121899dd9/jobs/152580)\n\n[The forge source code throwing this error](https://github.com/foundry-rs/foundry/blob/4fb5839e8eab1e5212b8e04ef9f6da2c8a5f4dcd/crates/evm/core/src/opts.rs#L129)\n\nThis error is tricky to diagnose, as the RPC (`proxyd`) can only be accessed from the self-hosted runners. The current approach is to use, one by one, all the RPC backends that the `proxyd` instance points to and see whether it's an issue with a specific provider.", "CLOSED", 0, "janjakubnanista", "2025-10-07T15:24:40Z", "2025-10-14T14:42:28Z", "2025-10-14T14:42:28Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7PNsnD", 17694, "Remove RR Sync: Testing", "Validate the assumption that ELP2P is working as expected, for performing EL Sync to fill in the unsafe gap.\n\nRun a real world/sysgo testing scenario trying to sync using the op-node.\n\n### List of Tracked Tests\n\n- [x] Test `sync.CLSync` behavior with unsafe payload queue: https://github.com/ethereum-optimism/optimism/pull/17675: `TestSyncAfterInitialELSync` @pcw109550 \n- [ ] Test L2EL behavior while EL Syncing, using direct engine / eth API calls to the EL: **Insight: We only need to rely on FCU not newPayload because EL Sync only triggers with FCU.**\n    - [x] Test op-geth: https://github.com/ethereum-optimism/optimism/pull/17752: `TestL2ELP2PCanonicalChainAdvancedByFCU` @pcw109550 \n    - [x] Test op-reth(not easily mergable to dev because we need reth binary):  https://github.com/ethereum-optimism/optimism/pull/17802: `TestL2ELP2PCanonicalChainAdvancedByFCU` but tweak @pcw109550 \n    - [ ] Merge op-reth tests, or run at [op-rs/kona](https://github.com/op-rs/kona)\n- [ ] Use op-node to check that further sync(with initial sync on/off) completes and unsafe head reaches sequencer tip. This must be validated using a real chain, possibly using sync tester.\n   - [x] Verify that if an unsafe chain gap emerges, due to network issues, a node running in CLSync or ELSync mode will fill the gap and continue to advance its unsafe chain, without help from the L1 derivation pipeline. https://github.com/ethereum-optimism/optimism/pull/17751: `TestUnsafeChainStalling_{CLSync|ELSync}` @nonsense \n   - [x] Same as upper case, but with actual stopping/starting of the op-node and not just network issue. Verifies that if an unsafe chain gap emerges, a node running in CLSync or ELSync mode will fill the gap after booting up: https://github.com/ethereum-optimism/optimism/pull/17751: `TestUnsafeChainStalling_{CLSync|ELSync}_RestartOpNode_Long` @nonsense \n   - [x] Show that the unsafe chain does not stall if RR sync is disabled, which is the case on current develop (i.e. we can't just switch RR sync on develop as is, without losing functionality) https://github.com/ethereum-optimism/optimism/pull/17751: `TestUnsafeChainStalling_DisabledReqRespSync` @nonsense \n   - [x] Validate upper behavior using real chain @nonsense \n- [ ] ELP2P down, but chain still advancing since the unsafe payloads build on top of the unsafe head: will be implemented on top of tests after we will in the unsafe gap. This scenario occurs when the verifier eventually reached the unsafe head tip @pcw109550 \n    - https://github.com/ethereum-optimism/optimism/pull/17895\n- [x] Reorg cases, where safe head reorg happened. FCU result will be INVALID. Test Reset behavior. This may be mocked using the Sync tester, since harder to test. When the safe head reorgs, the FCU call will (eventually) return INVALID, because that unsafe payload will not build on top of the safe head. Use sync-tester or test-sequencer. Ref: https://github.com/ethereum-optimism/optimism/issues/17627#issuecomment-3369432912 @pcw109550 \n    - https://github.com/ethereum-optimism/optimism/pull/17893\n        - `TestUnsafeGapFillAfterSafeReorg`\n        - `TestUnsafeGapFillAfterUnsafeReorg_RestartL2CL`\n        - `TestUnsafeGapFillAfterUnsafeReorg_RestartCLP2P`\n- [ ] Cover op-reth syncing, all upper scenarios may pass using reth @pcw109550 \n\n### Discussions\n\nWe have multiple combinations: \n- syncmode: `sync.CLSync` / `sync.ELSync`\n- RR Sync enabled / disabled\n- EL implementation: geth / reth\n\nNote that we have an assumption that EL P2P connectivity is stable, which means the syncing EL is connected to the EL which is fully synced\n\nValidate the EL side payload caching behavior, and check that if the gaps are filled, the latest payload can be appended to the unsafe chain and become canonicalized, after the initial EL sync run.\n\n**Should benchmark and examine how long will it takes to fill in the unsafe gap using real chain**. We may directly query the EL using the `eth_getBlockByNumber(\"latest\")` to check that the EL actually reached the unsafe head tip, not relying on the `optimism_syncStatus` result from the op-node.\n\nMore concretely the testing scenario will be\n1. Prepare op-node and EL(with stable ELP2P) which are fully synced, reaching the unsafe tip\n2. Shut op-node down. \n3. Stay for 5 minutes to make the EL(with stable ELP2P) not advance, intentionally making the unsafe gap\n4. Start op-node with\n    - RR Sync disabled (via flag)\n    - Patched to do the EL Sync to fill in the gap\n    - Connected via CLP2P and receiving unsafe payloads from the sequencer\n5. Measure time until the EL(with stable ELP2P) reaches the tip.\n\n\n\n\n", "OPEN", 0, "pcw109550", "2025-10-02T07:52:30Z", "2025-10-17T15:30:09Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7PFtFm", 17688, "[oncall] CI: Failing RPC calls on superchain-ops repo [block is out of range]", "**Description**\n\nThe `forge_test` CI workflow for `superchain-ops` repo is failing when setting up fork testing.\n\n[Example failed workflow](https://app.circleci.com/jobs/github/ethereum-optimism/superchain-ops/153096)\n\n[Configuration of `proxyd` it is connecting to](https://github.com/ethereum-optimism/k8s/blob/master/kustomize/proxyd/oplabs-prod-sepolia/proxyd-l2-ci/proxyd.toml)\n\nFrom the logs below we can see that errors are coming from `proxyd-l2-ci` - [the `proxyd` that the first `proxyd` is calling](https://github.com/ethereum-optimism/k8s/blob/master/kustomize/proxyd/oplabs-prod-sepolia/proxyd-l2-consensus/proxyd.toml#L4)\n\nFrom there it is one of these:\n\n```\n[backends.replica-0]\nconsensus_skip_peer_count = true\nrpc_url = \"https://op-opn-geth-a-rpc-0-op-geth.secondary.sepolia.prod.oplabs.cloud\"\nws_url = \"ws://dummy\"\n[backends.replica-1]\nconsensus_skip_peer_count = true\nrpc_url = \"https://op-opn-geth-a-rpc-1-op-geth.secondary.sepolia.prod.oplabs.cloud\"\nws_url = \"ws://dummy\"\n[backends.replica-2]\nconsensus_skip_peer_count = true\nrpc_url = \"https://op-opn-geth-a-rpc-2-op-geth.secondary.sepolia.prod.oplabs.cloud\"\nws_url = \"ws://dummy\"\n```\n\n[Logs from the `proxyd` it is connecting to](https://argocd.primary.infra.tools.oplabs.cloud/applications/prod-sepolia-proxyd-l2-ci?resource=&node=%2FPod%2Fproxyd-l2-ci%2Fproxyd-5db99d5cc9-5lgcf%2F0&tab=logs):\n\n```\n{\"time\":\"2025-09-19T18:12:03.131512791Z\",\"level\":\"WARN\",\"msg\":\"backend request failed, trying again\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"6d27217d4b293ad8c679\",\"err\":\"response code 503\",\"method\":\"eth_getBlockByHash\",\"attempt_count\":1,\"max_attempts\":1}\n{\"time\":\"2025-09-19T18:12:03.131606421Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding request to backend\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"6d27217d4b293ad8c679\",\"auth\":\"none\",\"err\":\"permanent error forwarding request response code 503\"}\n{\"time\":\"2025-09-19T18:12:03.131641971Z\",\"level\":\"ERROR\",\"msg\":\"error serving requests\",\"req_id\":\"6d27217d4b293ad8c679\",\"auth\":\"none\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-19T18:12:03.131659931Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding RPC batch\",\"batch_size\":1,\"backend_group\":\"proxyd-l2-ci\",\"req_id\":\"6d27217d4b293ad8c679\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-19T18:12:03.268365621Z\",\"level\":\"WARN\",\"msg\":\"backend request failed, trying again\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"6ba9478b2eacd3bad9c3\",\"err\":\"response code 503\",\"method\":\"eth_getBlockByHash\",\"attempt_count\":1,\"max_attempts\":1}\n{\"time\":\"2025-09-19T18:12:03.268413511Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding request to backend\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"6ba9478b2eacd3bad9c3\",\"auth\":\"none\",\"err\":\"permanent error forwarding request response code 503\"}\n{\"time\":\"2025-09-19T18:12:03.268452921Z\",\"level\":\"ERROR\",\"msg\":\"error serving requests\",\"req_id\":\"6ba9478b2eacd3bad9c3\",\"auth\":\"none\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-19T18:12:03.268498941Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding RPC batch\",\"batch_size\":1,\"backend_group\":\"proxyd-l2-ci\",\"req_id\":\"6ba9478b2eacd3bad9c3\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-19T18:12:03.292863891Z\",\"level\":\"WARN\",\"msg\":\"backend request failed, trying again\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"c79abefbd2f7fa8682e2\",\"err\":\"response code 503\",\"method\":\"eth_getBlockByNumber\",\"attempt_count\":1,\"max_attempts\":1}\n{\"time\":\"2025-09-19T18:12:03.292948151Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding request to backend\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"c79abefbd2f7fa8682e2\",\"auth\":\"none\",\"err\":\"permanent error forwarding request response code 503\"}\n{\"time\":\"2025-09-19T18:12:03.292982611Z\",\"level\":\"ERROR\",\"msg\":\"error serving requests\",\"req_id\":\"c79abefbd2f7fa8682e2\",\"auth\":\"none\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-19T18:12:03.293044511Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding RPC batch\",\"batch_size\":1,\"backend_group\":\"proxyd-l2-ci\",\"req_id\":\"c79abefbd2f7fa8682e2\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-22T19:27:54.067096661Z\",\"level\":\"WARN\",\"msg\":\"backend request failed, trying again\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"149aff962a882f8c0d90\",\"err\":\"error in backend request Post \\\"http://proxyd.proxyd-l2-consensus.svc.cluster.local:8080\\\": context canceled\",\"method\":\"eth_getBlockByHash\",\"attempt_count\":1,\"max_attempts\":1}\n{\"time\":\"2025-09-22T19:27:54.067165851Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding request to backend\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"149aff962a882f8c0d90\",\"auth\":\"none\",\"err\":\"permanent error forwarding request error in backend request Post \\\"http://proxyd.proxyd-l2-consensus.svc.cluster.local:8080\\\": context canceled\"}\n{\"time\":\"2025-09-22T19:27:54.067233831Z\",\"level\":\"ERROR\",\"msg\":\"error serving requests\",\"req_id\":\"149aff962a882f8c0d90\",\"auth\":\"none\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-22T19:27:54.067275061Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding RPC batch\",\"batch_size\":1,\"backend_group\":\"proxyd-l2-ci\",\"req_id\":\"149aff962a882f8c0d90\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-23T10:00:52.364020672Z\",\"level\":\"WARN\",\"msg\":\"backend request failed, trying again\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"29c3f7bae793a62d685e\",\"err\":\"error reading response body context canceled\",\"method\":\"eth_getBlockByHash\",\"attempt_count\":1,\"max_attempts\":1}\n{\"time\":\"2025-09-23T10:00:52.364088372Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding request to backend\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"29c3f7bae793a62d685e\",\"auth\":\"none\",\"err\":\"permanent error forwarding request error reading response body context canceled\"}\n{\"time\":\"2025-09-23T10:00:52.364106242Z\",\"level\":\"ERROR\",\"msg\":\"error serving requests\",\"req_id\":\"29c3f7bae793a62d685e\",\"auth\":\"none\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-23T10:00:52.364359232Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding RPC batch\",\"batch_size\":1,\"backend_group\":\"proxyd-l2-ci\",\"req_id\":\"29c3f7bae793a62d685e\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-24T04:27:17.841760386Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"438711ea6c96fabdd0ff\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-24T10:30:25.516971007Z\",\"level\":\"WARN\",\"msg\":\"backend request failed, trying again\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"e2a84f1ac4a11ff7adb4\",\"err\":\"error in backend request Post \\\"http://proxyd.proxyd-l2-consensus.svc.cluster.local:8080\\\": context canceled\",\"method\":\"eth_getBlockByHash\",\"attempt_count\":1,\"max_attempts\":1}\n{\"time\":\"2025-09-24T10:30:25.517048287Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding request to backend\",\"name\":\"proxyd-l2-ci\",\"req_id\":\"e2a84f1ac4a11ff7adb4\",\"auth\":\"none\",\"err\":\"permanent error forwarding request error in backend request Post \\\"http://proxyd.proxyd-l2-consensus.svc.cluster.local:8080\\\": context canceled\"}\n{\"time\":\"2025-09-24T10:30:25.517071976Z\",\"level\":\"ERROR\",\"msg\":\"error serving requests\",\"req_id\":\"e2a84f1ac4a11ff7adb4\",\"auth\":\"none\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-24T10:30:25.517115436Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding RPC batch\",\"batch_size\":1,\"backend_group\":\"proxyd-l2-ci\",\"req_id\":\"e2a84f1ac4a11ff7adb4\",\"err\":\"no backend is currently healthy to serve traffic\"}\n{\"time\":\"2025-09-24T13:38:41.780332298Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"74fb9d92d35e71c78cc1\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-24T14:10:07.492847391Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"41a24a4319a464a1bf41\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-24T14:42:09.70781107Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"b1c510417b5eeaeb0b0f\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-24T18:11:51.89631197Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"a20ceac14cbf760fa072\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-24T21:40:38.268995679Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"f48bff1bc0d85f8651ab\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-25T17:13:27.544988456Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"581e0f52220f239f89ca\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-25T18:37:05.611526475Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"928917b82dba7163e94f\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-26T18:15:03.768078525Z\",\"level\":\"ERROR\",\"msg\":\"error serving requests\",\"req_id\":\"b539cb575782c15ea5dd\",\"auth\":\"none\",\"err\":\"context canceled\"}\n{\"time\":\"2025-09-26T18:15:03.768209945Z\",\"level\":\"ERROR\",\"msg\":\"error forwarding RPC batch\",\"batch_size\":1,\"backend_group\":\"proxyd-l2-ci\",\"req_id\":\"b539cb575782c15ea5dd\",\"err\":\"context canceled\"}\n{\"time\":\"2025-09-26T23:38:49.887767017Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"bfb89ac7a588bdb85138\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-29T00:28:37.62003332Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"462dd59f3c3bc52764a2\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-29T18:34:53.65570574Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"0a7f2892d1ce2ecc42c7\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-29T18:34:53.65671587Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"b95d3f7903bf521900d8\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-29T18:34:53.66269133Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"6c28037baf38129f8959\",\"source\":\"rpc\",\"auth\":\"none\"}\n{\"time\":\"2025-09-29T20:27:11.774584579Z\",\"level\":\"INFO\",\"msg\":\"backend responded with RPC error\",\"backend\":\"proxyd-l2-ci\",\"last_error_code\":-32019,\"last_error_msg\":\"block is out of range\",\"req_id\":\"2ecda2697d670faaaf0f\",\"source\":\"rpc\",\"auth\":\"none\"}\n```\n\n[Grafana shows the in for these errors for this `proxyd` instance](https://optimistic.grafana.net/d/TRHRXiBV6/proxyd-k8s?orgId=1&from=2025-09-25T04:00:00.000Z&to=2025-09-25T04:59:59.000Z&timezone=browser&var-instance=prod-sepolia-proxyd-l2-ci&var-backend_name=$__all&var-method=$__all&refresh=1m)\n\n[Grafana shows no data for the replicas for this time range](https://optimistic.grafana.net/d/n-MDITAVz/replica-healthcheck?orgId=1&from=2025-09-25T04:00:00.000Z&to=2025-09-25T20:59:59.000Z&timezone=browser&var-network=sepolia-prod&var-instance=prod-sepolia-op-opn-geth-a-rpc-0&var-instance=prod-sepolia-op-opn-geth-a-rpc-1&var-instance=prod-sepolia-op-opn-geth-a-rpc-2&var-target=$__all&refresh=1m)", "OPEN", 0, "janjakubnanista", "2025-10-01T17:00:18Z", "2025-10-14T15:17:30Z", null, "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7PC6bc", 17683, "demote and lighten op-opn-geth-a-sequencer-1 of sepolia", "After provisioning the op-opn-geth-f-sequencer-3 in sepolia, op-opn-geth-a-sequencer-1 can have flashblocks-components detached from it and also, have it stepped out of the voter set.\n\nThis way, op-opn-geth-a-sequencer-1 can act a backup vanilla non-flashblocks sequencer capable of serving the rollup-boost kill switch in case of catastrophic situations.", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-01T13:45:02Z", "2025-10-16T20:20:58Z", "2025-10-16T20:19:53Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDODjvEJM7PC4Ju", 17682, "New geth-f-sequencer-3 in sepolia with Flashblocks", "This new sequencer would serve flashblocks-enabled sequencing performantly out of a full NVME-backed host.", "CLOSED", 0, "yashvardhan-kukreja", "2025-10-01T13:42:38Z", "2025-10-16T19:36:42Z", "2025-10-16T19:36:42Z", "ethereum-optimism/optimism", "2025-10-17 03:24:29"]
["I_kwDOH2Qg5s7SGW2Z", 700, "abount metric in grafana", "I want to show some metric infomations in grafana, so I want to know which metrics are there in op-geth and what are they mean.\nso , could you guys give a link? \n\n", "OPEN", 0, "z-hanwen", "2025-10-17T07:34:24Z", "2025-10-17T07:34:24Z", null, "ethereum-optimism/op-geth", "2025-10-17 23:21:32"]
["I_kwDOH2Qg5s7SGH7b", 699, "about metric in grafana", "This should only be used in very rare cases e.g. if you are not 100% sure if something is a bug or asking a question that leads to improving the documentation. For general questions please use [discord](https://discord.gg/nthXNEv) or the Ethereum stack exchange at https://ethereum.stackexchange.com.\n", "CLOSED", 0, "z-hanwen", "2025-10-17T07:12:23Z", "2025-10-17T07:12:31Z", "2025-10-17T07:12:31Z", "ethereum-optimism/op-geth", "2025-10-17 23:21:32"]
["I_kwDODjvEJM7SKiP8", 17912, "op-deployer:v0.2.6: \"transaction gas limit too high\" when deploy contracts", "**Bug Description**\nop-deployer:v0.2.6 fails to deploy contract with error:\n```\nt=2025-10-17T12:23:36+0000 lvl=error msg=\"unable to publish transaction\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 gasTipCap=1000000000 gasFeeCap=3000000000 gasLimit=24835190 err=\"transaction gas limit too high (cap: 16777216, tx: 24835190)\"\n```\n\n**Steps to Reproduce**\n1. Run deployer apply\n```bash\n$ docker run --rm \\\n  -v /tmp/contracts/deployer:/deployer \\\n  http://us-docker.pkg.dev/oplabs-tools-artifacts/images/op-deployer:v0.2.6 \\\n  op-deployer apply \\\n  --l1-rpc-url <hidden> \\\n  --private-key 0x<hidden> \\\n  --workdir /deployer\n```\n**Expected behavior**\nContracts should be successfully deployed\n\n**Environment Information:**\n* op-deployer:v0.2.6\n\n**Configurations:**\n```\n$ cat intent.toml \nconfigType = \"standard\"\nl1ChainID = 11155111\nopcmAddress = \"0x6b6f9129efb1b7a48f84e3b787333d1dca02ee34\"\nfundDevAccounts = false\nuseInterop = false\nl1ContractsLocator = \"tag://op-contracts/v2.2.0\"\nl2ContractsLocator = \"tag://op-contracts/v1.7.0-beta.1+l2-contracts\"\n\n[[chains]]\n  id = \"0x0000000000000000000000000000000000000000000000000000000007cdf991\"\n  baseFeeVaultRecipient = \"0x41033a8f6cC7daC119232069a769AcE942b68510\"\n  l1FeeVaultRecipient = \"0x41033a8f6cC7daC119232069a769AcE942b68510\"\n  sequencerFeeVaultRecipient = \"0x41033a8f6cC7daC119232069a769AcE942b68510\"\n  eip1559DenominatorCanyon = 250\n  eip1559Denominator = 50\n  eip1559Elasticity = 6\n  [chains.roles]\n    l1ProxyAdminOwner = \"0x1eb2ffc903729a0f03966b917003800b145f56e2\"\n    l2ProxyAdminOwner = \"0x2fc3ffc903729a0f03966b917003800b145f67f3\"\n    systemConfigOwner = \"0x978d8944A2a6E0e988761B31bFdf8EF873f526f4\"\n    unsafeBlockSigner = \"0x978d8944A2a6E0e988761B31bFdf8EF873f526f4\"\n    batcher = \"0x667b7087fe390a0A033e20E6F3f64060C6146E74\"\n    proposer = \"0xF4ae567735A8C243A4Aca90CEE76F7BAB22924C3\"\n    challenger = \"0xfd1d2e729ae8eee2e146c033bf4400fe75284301\"\n```\n\n**Logs:**\n> [INFO] Running command to deploy L1 contracts: \n>         docker run --rm         -v /tmp/tmp.TLsz5cCcoq-tonsberg/contracts/deployer:/deployer         us-docker.pkg.dev/oplabs-tools-artifacts/images/op-deployer:v0.2.6         op-deployer apply         --l1-rpc-url **********************************************************************************         --private-key 0x****************************************************************         --workdir /deployer\n>     \n>  100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| (60/60 MB, 19 MB/s)        \n>  100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| (57/57 MB, 26 MB/s)        \n> t=2025-10-17T12:21:54+0000 lvl=info msg=\"Initialized path database\" readonly=true cache=\"0.00 B\" buffer=\"0.00 B\" history=0\n> t=2025-10-17T12:21:54+0000 lvl=info msg=\"initializing pipeline\" stage=init strategy=live\n> t=2025-10-17T12:21:54+0000 lvl=info msg=\"superchain deployment not needed\" stage=deploy-superchain\n> t=2025-10-17T12:21:54+0000 lvl=info msg=\"implementations deployment not needed\" stage=deploy-implementations\n> t=2025-10-17T12:21:54+0000 lvl=info msg=\"deploying OP chain using local allocs\" stage=deploy-opchain id=0x0000000000000000000000000000000000000000000000000000000007cdf991\n> t=2025-10-17T12:22:00+0000 lvl=info msg=\"transaction broadcasted\" id=0xf13024c9b20595e0d5a370cd11f34270cd08be1546a8b5968e62a368477ade93 nonce=50176\n> t=2025-10-17T12:22:00+0000 lvl=info msg=\"Publishing transaction\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 gasTipCap=1000000000 gasFeeCap=3000000000 gasLimit=24835190\n> t=2025-10-17T12:22:00+0000 lvl=error msg=\"unable to publish transaction\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 gasTipCap=1000000000 gasFeeCap=3000000000 gasLimit=24835190 err=\"transaction gas limit too high (cap: 16777216, tx: 24835190)\"\n> t=2025-10-17T12:22:48+0000 lvl=info msg=\"Publishing transaction\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 gasTipCap=1000000000 gasFeeCap=3000000000 gasLimit=24835190\n> t=2025-10-17T12:22:48+0000 lvl=error msg=\"unable to publish transaction\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 gasTipCap=1000000000 gasFeeCap=3000000000 gasLimit=24835190 err=\"transaction gas limit too high (cap: 16777216, tx: 24835190)\"\n> t=2025-10-17T12:23:36+0000 lvl=info msg=\"Publishing transaction\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 gasTipCap=1000000000 gasFeeCap=3000000000 gasLimit=24835190\n> t=2025-10-17T12:23:36+0000 lvl=error msg=\"unable to publish transaction\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 gasTipCap=1000000000 gasFeeCap=3000000000 gasLimit=24835190 err=\"transaction gas limit too high (cap: 16777216, tx: 24835190)\"\n> t=2025-10-17T12:23:36+0000 lvl=warn msg=\"Aborting transaction submission\" service=transactor tx=0xdbac3302f9bda79843bf75585d8fa26327764e02eddf93344239ceaf0788e518 nonce=50176 err=\"failed to get tx into the mempool\"\n> t=2025-10-17T12:23:36+0000 lvl=error msg=\"transaction failed\" id=0xf13024c9b20595e0d5a370cd11f34270cd08be1546a8b5968e62a368477ade93 completed=1 total=1 err=\"aborted tx send due to critical error: failed to get tx into the mempool\"\n> Application failed: failed to broadcast stage deploy-opchain-0x0000000000000000000000000000000000000000000000000000000007cdf991: 1 error occurred:\n>         * aborted tx send due to critical error: failed to get tx into the mempool\n> \n\n**Additional context**\nProbably related to recent Fusaka hardfork. \n", "OPEN", 0, "polskikh", "2025-10-17T12:29:55Z", "2025-10-17T12:29:55Z", null, "ethereum-optimism/optimism", "2025-10-17 23:21:52"]
["I_kwDODjvEJM7QMk3r", 17768, "op-batcher: ensure full shutdown when \"SetMaxDASize RPC method unavailable\"", "We have seen \n```\n\"SetMaxDASize RPC method unavailable on endpoint, shutting down. Either enable it or disable throttling.\"\n```\noccur several times on our deployments, despite there being no misconfiguration of the EL endpoints.\n\nWe should try and make the logic governing this behavior more robust to temporary timeouts:\nhttps://github.com/ethereum-optimism/optimism/blob/27f6f505cdb65021d0446b51f21cdfe8b2a827b1/op-batcher/batcher/driver.go#L627-L638\n\nWe should also get the batcher to report this condition through a metric or log (instead of shutting down), and then we can define an alert and tune the definition so that there is some time for the problem to self-heal. This is because, it is actually safer to keep the batcher running even if an endpoint cannot be throttled (to prevent a DA backlog forming); although the failure to throttle should still be investigated with reasonably high urgency. \n\n", "OPEN", 0, "geoknee", "2025-10-07T20:39:16Z", "2025-10-17T09:37:05Z", null, "ethereum-optimism/optimism", "2025-10-17 23:21:52"]
["I_kwDODjvEJM7P_e-h", 17740, "Update `FetchChainInfo.s.sol`", "", "CLOSED", 0, "Inphi", "2025-10-07T00:15:41Z", "2025-10-17T19:06:29Z", "2025-10-17T19:06:29Z", "ethereum-optimism/optimism", "2025-10-17 23:21:52"]
["I_kwDODjvEJM65bu_a", 16240, "Interop Monitoring: Monitoring Service Dashboard", "A Dashboard should exist which can visualize the Monitoring Service sufficiently.\n\nDoD:\n- Dashboard defined and included in Kurtosis\n- Dashboard deployed for devnets\n- Dashboard tracks \"at a glance\" interop health across the superchain sufficently\n- Includes logs for critical situations", "OPEN", 0, "axelKingsley", "2025-06-02T17:39:13Z", "2025-10-17T12:25:40Z", null, "ethereum-optimism/optimism", "2025-10-17 23:21:52"]
["I_kwDODjvEJM65aNMx", 16228, "Interop Monitoring: Integrate Monitor Service with Infra", "Infra definitions (kurtosis, k8s, etc) should include provisions to spin up the interop monitoring service.\n\nDoD:\n- Kurtosis spins up monitoring service, hooked to grafana\n- K8s definitions are included in devnets going forward\n\nShould work with platforms team to achieve this.", "OPEN", 0, "axelKingsley", "2025-06-02T15:27:51Z", "2025-10-17T12:25:39Z", null, "ethereum-optimism/optimism", "2025-10-17 23:21:52"]
["I_kwDODjvEJM6eb4eD", 12926, "`CursorQueue` abstraction", "In #12390, the batcher got refactored to work with cursors on queues of blocks, channels and frames. Since the cursor and queue are manipulated together and consistent state between the two should be maintained, we could add a `CursorQueue` abstract to keep the consistency by design.\r\n\r\n_Originally posted by @sebastianst in https://github.com/ethereum-optimism/optimism/pull/12390#discussion_r1832546236_\r\n\r\n> We may consider adding a `CursorQueue` abstraction that is a `Queue` with a cursor and then use it for blocks and frames. This way, we can better unit test the invariants between the queue and cursor.\r\n", "OPEN", 0, "sebastianst", "2024-11-14T09:02:21Z", "2025-10-17T12:26:10Z", null, "ethereum-optimism/optimism", "2025-10-17 23:21:52"]
